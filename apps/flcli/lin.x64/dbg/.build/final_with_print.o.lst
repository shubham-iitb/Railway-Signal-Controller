   1              		.file	"final_with_print.c"
   2              		.text
   3              	.Ltext0:
   4              		.local	ptr
   5              		.comm	ptr,8,8
   6              		.local	enableBenchmarking
   7              		.comm	enableBenchmarking,1,1
   8              		.globl	delay
  10              	delay:
  11              	.LFB4:
  12              		.file 1 "final_with_print.c"
   1:final_with_print.c **** /* 
   2:final_with_print.c ****  * Copyright (C) 2012-2014 Chris McClelland
   3:final_with_print.c ****  *
   4:final_with_print.c ****  * This program is free software: you can redistribute it and/or modify
   5:final_with_print.c ****  * it under the terms of the GNU General Public License as published by
   6:final_with_print.c ****  * the Free Software Foundation, either version 3 of the License, or
   7:final_with_print.c ****  * (at your option) any later version.
   8:final_with_print.c ****  *
   9:final_with_print.c ****  * This program is distributed in the hope that it will be useful,
  10:final_with_print.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:final_with_print.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:final_with_print.c ****  * GNU General Public License for more details.
  13:final_with_print.c ****  *  
  14:final_with_print.c ****  * You should have received a copy of the GNU General Public License
  15:final_with_print.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:final_with_print.c ****  */
  17:final_with_print.c **** #include <stdio.h>
  18:final_with_print.c **** #include <time.h>
  19:final_with_print.c **** #include <stdlib.h>
  20:final_with_print.c **** #include <string.h>
  21:final_with_print.c **** #include <errno.h>
  22:final_with_print.c **** #include <stdint.h>
  23:final_with_print.c **** #include <makestuff.h>
  24:final_with_print.c **** #include <libfpgalink.h>
  25:final_with_print.c **** #include <libbuffer.h>
  26:final_with_print.c **** #include <liberror.h>
  27:final_with_print.c **** #include <libdump.h>
  28:final_with_print.c **** #include <argtable2.h>
  29:final_with_print.c **** #include <readline/readline.h>
  30:final_with_print.c **** #include <readline/history.h>
  31:final_with_print.c **** #ifdef WIN32
  32:final_with_print.c **** #include <Windows.h>
  33:final_with_print.c **** #else
  34:final_with_print.c **** #include <sys/time.h>
  35:final_with_print.c **** #endif
  36:final_with_print.c **** 
  37:final_with_print.c **** bool sigIsRaised(void);
  38:final_with_print.c **** void sigRegisterHandler(void);
  39:final_with_print.c **** 
  40:final_with_print.c **** static const char *ptr;
  41:final_with_print.c **** static bool enableBenchmarking = false;
  42:final_with_print.c **** 
  43:final_with_print.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  44:final_with_print.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  45:final_with_print.c **** 
  46:final_with_print.c **** void delay(unsigned int mseconds)
  47:final_with_print.c **** {
  13              		.loc 1 47 0
  14              		.cfi_startproc
  15 0000 55       		pushq	%rbp
  16              		.cfi_def_cfa_offset 16
  17              		.cfi_offset 6, -16
  18 0001 4889E5   		movq	%rsp, %rbp
  19              		.cfi_def_cfa_register 6
  20 0004 53       		pushq	%rbx
  21 0005 4883EC28 		subq	$40, %rsp
  22              		.cfi_offset 3, -24
  23 0009 897DDC   		movl	%edi, -36(%rbp)
  48:final_with_print.c **** 	clock_t goal = mseconds + clock();
  24              		.loc 1 48 0
  25 000c 8B5DDC   		movl	-36(%rbp), %ebx
  26 000f E8000000 		call	clock
  26      00
  27 0014 4801D8   		addq	%rbx, %rax
  28 0017 488945E8 		movq	%rax, -24(%rbp)
  49:final_with_print.c **** 	while (goal > clock());
  29              		.loc 1 49 0
  30 001b 90       		nop
  31              	.L2:
  32              		.loc 1 49 0 is_stmt 0 discriminator 1
  33 001c E8000000 		call	clock
  33      00
  34 0021 483B45E8 		cmpq	-24(%rbp), %rax
  35 0025 7CF5     		jl	.L2
  50:final_with_print.c **** }
  36              		.loc 1 50 0 is_stmt 1
  37 0027 90       		nop
  38 0028 4883C428 		addq	$40, %rsp
  39 002c 5B       		popq	%rbx
  40 002d 5D       		popq	%rbp
  41              		.cfi_def_cfa 7, 8
  42 002e C3       		ret
  43              		.cfi_endproc
  44              	.LFE4:
  46              		.globl	myxor
  48              	myxor:
  49              	.LFB5:
  51:final_with_print.c **** 
  52:final_with_print.c **** int myxor(int arr[])
  53:final_with_print.c **** {
  50              		.loc 1 53 0
  51              		.cfi_startproc
  52 002f 55       		pushq	%rbp
  53              		.cfi_def_cfa_offset 16
  54              		.cfi_offset 6, -16
  55 0030 4889E5   		movq	%rsp, %rbp
  56              		.cfi_def_cfa_register 6
  57 0033 48897DE8 		movq	%rdi, -24(%rbp)
  54:final_with_print.c **** 	int count = 0;
  58              		.loc 1 54 0
  59 0037 C745F800 		movl	$0, -8(%rbp)
  59      000000
  60              	.LBB2:
  55:final_with_print.c **** 	for(int i=0; i<8; i++)
  61              		.loc 1 55 0
  62 003e C745FC00 		movl	$0, -4(%rbp)
  62      000000
  63 0045 EB23     		jmp	.L4
  64              	.L6:
  56:final_with_print.c **** 		if(arr[i] == 1) count++;
  65              		.loc 1 56 0
  66 0047 8B45FC   		movl	-4(%rbp), %eax
  67 004a 4898     		cltq
  68 004c 488D1485 		leaq	0(,%rax,4), %rdx
  68      00000000 
  69 0054 488B45E8 		movq	-24(%rbp), %rax
  70 0058 4801D0   		addq	%rdx, %rax
  71 005b 8B00     		movl	(%rax), %eax
  72 005d 83F801   		cmpl	$1, %eax
  73 0060 7504     		jne	.L5
  74              		.loc 1 56 0 is_stmt 0 discriminator 1
  75 0062 8345F801 		addl	$1, -8(%rbp)
  76              	.L5:
  55:final_with_print.c **** 	for(int i=0; i<8; i++)
  77              		.loc 1 55 0 is_stmt 1 discriminator 2
  78 0066 8345FC01 		addl	$1, -4(%rbp)
  79              	.L4:
  55:final_with_print.c **** 	for(int i=0; i<8; i++)
  80              		.loc 1 55 0 is_stmt 0 discriminator 1
  81 006a 837DFC07 		cmpl	$7, -4(%rbp)
  82 006e 7ED7     		jle	.L6
  83              	.LBE2:
  57:final_with_print.c **** 
  58:final_with_print.c **** 	if(count%2 == 1) return 1;
  84              		.loc 1 58 0 is_stmt 1
  85 0070 8B45F8   		movl	-8(%rbp), %eax
  86 0073 99       		cltd
  87 0074 C1EA1F   		shrl	$31, %edx
  88 0077 01D0     		addl	%edx, %eax
  89 0079 83E001   		andl	$1, %eax
  90 007c 29D0     		subl	%edx, %eax
  91 007e 83F801   		cmpl	$1, %eax
  92 0081 7507     		jne	.L7
  93              		.loc 1 58 0 is_stmt 0 discriminator 1
  94 0083 B8010000 		movl	$1, %eax
  94      00
  95 0088 EB05     		jmp	.L8
  96              	.L7:
  59:final_with_print.c **** 	else return 0;
  97              		.loc 1 59 0 is_stmt 1
  98 008a B8000000 		movl	$0, %eax
  98      00
  99              	.L8:
  60:final_with_print.c **** }
 100              		.loc 1 60 0
 101 008f 5D       		popq	%rbp
 102              		.cfi_def_cfa 7, 8
 103 0090 C3       		ret
 104              		.cfi_endproc
 105              	.LFE5:
 107              		.globl	bitArrayToInt
 109              	bitArrayToInt:
 110              	.LFB6:
  61:final_with_print.c **** 
  62:final_with_print.c **** int bitArrayToInt(int arr[], int count)
  63:final_with_print.c **** {
 111              		.loc 1 63 0
 112              		.cfi_startproc
 113 0091 55       		pushq	%rbp
 114              		.cfi_def_cfa_offset 16
 115              		.cfi_offset 6, -16
 116 0092 4889E5   		movq	%rsp, %rbp
 117              		.cfi_def_cfa_register 6
 118 0095 48897DE8 		movq	%rdi, -24(%rbp)
 119 0099 8975E4   		movl	%esi, -28(%rbp)
  64:final_with_print.c **** 	int ret = 0;
 120              		.loc 1 64 0
 121 009c C745F400 		movl	$0, -12(%rbp)
 121      000000
 122              	.LBB3:
  65:final_with_print.c **** 	int tmp;
  66:final_with_print.c **** 	for (int i = 0; i < count; i++) {
 123              		.loc 1 66 0
 124 00a3 C745F800 		movl	$0, -8(%rbp)
 124      000000
 125 00aa EB35     		jmp	.L10
 126              	.L11:
  67:final_with_print.c **** 		tmp = arr[count - i -1];
 127              		.loc 1 67 0 discriminator 3
 128 00ac 8B45E4   		movl	-28(%rbp), %eax
 129 00af 2B45F8   		subl	-8(%rbp), %eax
 130 00b2 4898     		cltq
 131 00b4 48C1E002 		salq	$2, %rax
 132 00b8 488D50FC 		leaq	-4(%rax), %rdx
 133 00bc 488B45E8 		movq	-24(%rbp), %rax
 134 00c0 4801D0   		addq	%rdx, %rax
 135 00c3 8B00     		movl	(%rax), %eax
 136 00c5 8945FC   		movl	%eax, -4(%rbp)
  68:final_with_print.c **** 		ret |= tmp << (count - i - 1);
 137              		.loc 1 68 0 discriminator 3
 138 00c8 8B45E4   		movl	-28(%rbp), %eax
 139 00cb 2B45F8   		subl	-8(%rbp), %eax
 140 00ce 83E801   		subl	$1, %eax
 141 00d1 8B55FC   		movl	-4(%rbp), %edx
 142 00d4 89C1     		movl	%eax, %ecx
 143 00d6 D3E2     		sall	%cl, %edx
 144 00d8 89D0     		movl	%edx, %eax
 145 00da 0945F4   		orl	%eax, -12(%rbp)
  66:final_with_print.c **** 		tmp = arr[count - i -1];
 146              		.loc 1 66 0 discriminator 3
 147 00dd 8345F801 		addl	$1, -8(%rbp)
 148              	.L10:
  66:final_with_print.c **** 		tmp = arr[count - i -1];
 149              		.loc 1 66 0 is_stmt 0 discriminator 1
 150 00e1 8B45F8   		movl	-8(%rbp), %eax
 151 00e4 3B45E4   		cmpl	-28(%rbp), %eax
 152 00e7 7CC3     		jl	.L11
 153              	.LBE3:
  69:final_with_print.c **** 	}
  70:final_with_print.c **** 	return ret;
 154              		.loc 1 70 0 is_stmt 1
 155 00e9 8B45F4   		movl	-12(%rbp), %eax
  71:final_with_print.c **** }
 156              		.loc 1 71 0
 157 00ec 5D       		popq	%rbp
 158              		.cfi_def_cfa 7, 8
 159 00ed C3       		ret
 160              		.cfi_endproc
 161              	.LFE6:
 163              		.globl	BinTouint8
 165              	BinTouint8:
 166              	.LFB7:
  72:final_with_print.c **** 
  73:final_with_print.c **** void BinTouint8(uint8 bin[], int arr[])
  74:final_with_print.c **** {
 167              		.loc 1 74 0
 168              		.cfi_startproc
 169 00ee 55       		pushq	%rbp
 170              		.cfi_def_cfa_offset 16
 171              		.cfi_offset 6, -16
 172 00ef 4889E5   		movq	%rsp, %rbp
 173              		.cfi_def_cfa_register 6
 174 00f2 53       		pushq	%rbx
 175 00f3 4881ECB8 		subq	$184, %rsp
 175      000000
 176              		.cfi_offset 3, -24
 177 00fa 4889BD48 		movq	%rdi, -184(%rbp)
 177      FFFFFF
 178 0101 4889B540 		movq	%rsi, -192(%rbp)
 178      FFFFFF
 179              		.loc 1 74 0
 180 0108 64488B04 		movq	%fs:40, %rax
 180      25280000 
 180      00
 181 0111 488945E8 		movq	%rax, -24(%rbp)
 182 0115 31C0     		xorl	%eax, %eax
 183              	.LBB4:
  75:final_with_print.c **** 	int arr0[8], arr1[8], arr2[8], arr3[8];
  76:final_with_print.c **** 	for (int i = 0; i < 8; ++i)
 184              		.loc 1 76 0
 185 0117 C7855CFF 		movl	$0, -164(%rbp)
 185      FFFF0000 
 185      0000
 186 0121 E9B60000 		jmp	.L14
 186      00
 187              	.L15:
  77:final_with_print.c **** 	{
  78:final_with_print.c **** 		arr0[i] = arr[i];
 188              		.loc 1 78 0 discriminator 3
 189 0126 8B855CFF 		movl	-164(%rbp), %eax
 189      FFFF
 190 012c 4898     		cltq
 191 012e 488D1485 		leaq	0(,%rax,4), %rdx
 191      00000000 
 192 0136 488B8540 		movq	-192(%rbp), %rax
 192      FFFFFF
 193 013d 4801D0   		addq	%rdx, %rax
 194 0140 8B10     		movl	(%rax), %edx
 195 0142 8B855CFF 		movl	-164(%rbp), %eax
 195      FFFF
 196 0148 4898     		cltq
 197 014a 89948560 		movl	%edx, -160(%rbp,%rax,4)
 197      FFFFFF
  79:final_with_print.c **** 		arr1[i] = arr[i+8];
 198              		.loc 1 79 0 discriminator 3
 199 0151 8B855CFF 		movl	-164(%rbp), %eax
 199      FFFF
 200 0157 4898     		cltq
 201 0159 4883C008 		addq	$8, %rax
 202 015d 488D1485 		leaq	0(,%rax,4), %rdx
 202      00000000 
 203 0165 488B8540 		movq	-192(%rbp), %rax
 203      FFFFFF
 204 016c 4801D0   		addq	%rdx, %rax
 205 016f 8B10     		movl	(%rax), %edx
 206 0171 8B855CFF 		movl	-164(%rbp), %eax
 206      FFFF
 207 0177 4898     		cltq
 208 0179 89548580 		movl	%edx, -128(%rbp,%rax,4)
  80:final_with_print.c **** 		arr2[i] = arr[i+16];
 209              		.loc 1 80 0 discriminator 3
 210 017d 8B855CFF 		movl	-164(%rbp), %eax
 210      FFFF
 211 0183 4898     		cltq
 212 0185 4883C010 		addq	$16, %rax
 213 0189 488D1485 		leaq	0(,%rax,4), %rdx
 213      00000000 
 214 0191 488B8540 		movq	-192(%rbp), %rax
 214      FFFFFF
 215 0198 4801D0   		addq	%rdx, %rax
 216 019b 8B10     		movl	(%rax), %edx
 217 019d 8B855CFF 		movl	-164(%rbp), %eax
 217      FFFF
 218 01a3 4898     		cltq
 219 01a5 895485A0 		movl	%edx, -96(%rbp,%rax,4)
  81:final_with_print.c **** 		arr3[i] = arr[i+24];
 220              		.loc 1 81 0 discriminator 3
 221 01a9 8B855CFF 		movl	-164(%rbp), %eax
 221      FFFF
 222 01af 4898     		cltq
 223 01b1 4883C018 		addq	$24, %rax
 224 01b5 488D1485 		leaq	0(,%rax,4), %rdx
 224      00000000 
 225 01bd 488B8540 		movq	-192(%rbp), %rax
 225      FFFFFF
 226 01c4 4801D0   		addq	%rdx, %rax
 227 01c7 8B10     		movl	(%rax), %edx
 228 01c9 8B855CFF 		movl	-164(%rbp), %eax
 228      FFFF
 229 01cf 4898     		cltq
 230 01d1 895485C0 		movl	%edx, -64(%rbp,%rax,4)
  76:final_with_print.c **** 	{
 231              		.loc 1 76 0 discriminator 3
 232 01d5 83855CFF 		addl	$1, -164(%rbp)
 232      FFFF01
 233              	.L14:
  76:final_with_print.c **** 	{
 234              		.loc 1 76 0 is_stmt 0 discriminator 1
 235 01dc 83BD5CFF 		cmpl	$7, -164(%rbp)
 235      FFFF07
 236 01e3 0F8E3DFF 		jle	.L15
 236      FFFF
 237              	.LBE4:
  82:final_with_print.c **** 	}
  83:final_with_print.c **** 	
  84:final_with_print.c **** 	bin[0] = bitArrayToInt(arr0, 8);
 238              		.loc 1 84 0 is_stmt 1
 239 01e9 488D8560 		leaq	-160(%rbp), %rax
 239      FFFFFF
 240 01f0 BE080000 		movl	$8, %esi
 240      00
 241 01f5 4889C7   		movq	%rax, %rdi
 242 01f8 E8000000 		call	bitArrayToInt
 242      00
 243 01fd 89C2     		movl	%eax, %edx
 244 01ff 488B8548 		movq	-184(%rbp), %rax
 244      FFFFFF
 245 0206 8810     		movb	%dl, (%rax)
  85:final_with_print.c **** 	bin[1] = bitArrayToInt(arr1, 8);
 246              		.loc 1 85 0
 247 0208 488B8548 		movq	-184(%rbp), %rax
 247      FFFFFF
 248 020f 488D5801 		leaq	1(%rax), %rbx
 249 0213 488D4580 		leaq	-128(%rbp), %rax
 250 0217 BE080000 		movl	$8, %esi
 250      00
 251 021c 4889C7   		movq	%rax, %rdi
 252 021f E8000000 		call	bitArrayToInt
 252      00
 253 0224 8803     		movb	%al, (%rbx)
  86:final_with_print.c **** 	bin[2] = bitArrayToInt(arr2, 8);
 254              		.loc 1 86 0
 255 0226 488B8548 		movq	-184(%rbp), %rax
 255      FFFFFF
 256 022d 488D5802 		leaq	2(%rax), %rbx
 257 0231 488D45A0 		leaq	-96(%rbp), %rax
 258 0235 BE080000 		movl	$8, %esi
 258      00
 259 023a 4889C7   		movq	%rax, %rdi
 260 023d E8000000 		call	bitArrayToInt
 260      00
 261 0242 8803     		movb	%al, (%rbx)
  87:final_with_print.c **** 	bin[3] = bitArrayToInt(arr3, 8);
 262              		.loc 1 87 0
 263 0244 488B8548 		movq	-184(%rbp), %rax
 263      FFFFFF
 264 024b 488D5803 		leaq	3(%rax), %rbx
 265 024f 488D45C0 		leaq	-64(%rbp), %rax
 266 0253 BE080000 		movl	$8, %esi
 266      00
 267 0258 4889C7   		movq	%rax, %rdi
 268 025b E8000000 		call	bitArrayToInt
 268      00
 269 0260 8803     		movb	%al, (%rbx)
  88:final_with_print.c **** }
 270              		.loc 1 88 0
 271 0262 90       		nop
 272 0263 488B45E8 		movq	-24(%rbp), %rax
 273 0267 64483304 		xorq	%fs:40, %rax
 273      25280000 
 273      00
 274 0270 7405     		je	.L16
 275 0272 E8000000 		call	__stack_chk_fail
 275      00
 276              	.L16:
 277 0277 4881C4B8 		addq	$184, %rsp
 277      000000
 278 027e 5B       		popq	%rbx
 279 027f 5D       		popq	%rbp
 280              		.cfi_def_cfa 7, 8
 281 0280 C3       		ret
 282              		.cfi_endproc
 283              	.LFE7:
 285              		.globl	decToBinary
 287              	decToBinary:
 288              	.LFB8:
  89:final_with_print.c **** 
  90:final_with_print.c **** void decToBinary(int n, int arr[], int count)
  91:final_with_print.c **** {
 289              		.loc 1 91 0
 290              		.cfi_startproc
 291 0281 55       		pushq	%rbp
 292              		.cfi_def_cfa_offset 16
 293              		.cfi_offset 6, -16
 294 0282 4889E5   		movq	%rsp, %rbp
 295              		.cfi_def_cfa_register 6
 296 0285 53       		pushq	%rbx
 297 0286 4883EC48 		subq	$72, %rsp
 298              		.cfi_offset 3, -24
 299 028a 897DBC   		movl	%edi, -68(%rbp)
 300 028d 488975B0 		movq	%rsi, -80(%rbp)
 301 0291 8955B8   		movl	%edx, -72(%rbp)
 302              		.loc 1 91 0
 303 0294 64488B04 		movq	%fs:40, %rax
 303      25280000 
 303      00
 304 029d 488945E8 		movq	%rax, -24(%rbp)
 305 02a1 31C0     		xorl	%eax, %eax
 306 02a3 4889E0   		movq	%rsp, %rax
 307 02a6 4889C6   		movq	%rax, %rsi
  92:final_with_print.c **** 	int binaryNum[count];
 308              		.loc 1 92 0
 309 02a9 8B45B8   		movl	-72(%rbp), %eax
 310 02ac 4863D0   		movslq	%eax, %rdx
 311 02af 4883EA01 		subq	$1, %rdx
 312 02b3 488955D8 		movq	%rdx, -40(%rbp)
 313 02b7 4863D0   		movslq	%eax, %rdx
 314 02ba 4989D0   		movq	%rdx, %r8
 315 02bd 41B90000 		movl	$0, %r9d
 315      0000
 316 02c3 4863D0   		movslq	%eax, %rdx
 317 02c6 4889D1   		movq	%rdx, %rcx
 318 02c9 BB000000 		movl	$0, %ebx
 318      00
 319 02ce 4898     		cltq
 320 02d0 48C1E002 		salq	$2, %rax
 321 02d4 488D5003 		leaq	3(%rax), %rdx
 322 02d8 B8100000 		movl	$16, %eax
 322      00
 323 02dd 4883E801 		subq	$1, %rax
 324 02e1 4801D0   		addq	%rdx, %rax
 325 02e4 BB100000 		movl	$16, %ebx
 325      00
 326 02e9 BA000000 		movl	$0, %edx
 326      00
 327 02ee 48F7F3   		divq	%rbx
 328 02f1 486BC010 		imulq	$16, %rax, %rax
 329 02f5 4829C4   		subq	%rax, %rsp
 330 02f8 4889E0   		movq	%rsp, %rax
 331 02fb 4883C003 		addq	$3, %rax
 332 02ff 48C1E802 		shrq	$2, %rax
 333 0303 48C1E002 		salq	$2, %rax
 334 0307 488945E0 		movq	%rax, -32(%rbp)
 335              	.LBB5:
  93:final_with_print.c **** 	for (int i = 0; i < count; ++i)
 336              		.loc 1 93 0
 337 030b C745CC00 		movl	$0, -52(%rbp)
 337      000000
 338 0312 EB15     		jmp	.L18
 339              	.L19:
  94:final_with_print.c **** 		binaryNum[i] = 0;
 340              		.loc 1 94 0 discriminator 3
 341 0314 488B45E0 		movq	-32(%rbp), %rax
 342 0318 8B55CC   		movl	-52(%rbp), %edx
 343 031b 4863D2   		movslq	%edx, %rdx
 344 031e C7049000 		movl	$0, (%rax,%rdx,4)
 344      000000
  93:final_with_print.c **** 	for (int i = 0; i < count; ++i)
 345              		.loc 1 93 0 discriminator 3
 346 0325 8345CC01 		addl	$1, -52(%rbp)
 347              	.L18:
  93:final_with_print.c **** 	for (int i = 0; i < count; ++i)
 348              		.loc 1 93 0 is_stmt 0 discriminator 1
 349 0329 8B45CC   		movl	-52(%rbp), %eax
 350 032c 3B45B8   		cmpl	-72(%rbp), %eax
 351 032f 7CE3     		jl	.L19
 352              	.LBE5:
  95:final_with_print.c **** 
  96:final_with_print.c **** 	int i = 0;
 353              		.loc 1 96 0 is_stmt 1
 354 0331 C745D000 		movl	$0, -48(%rbp)
 354      000000
  97:final_with_print.c **** 	while (n > 0) {
 355              		.loc 1 97 0
 356 0338 EB30     		jmp	.L20
 357              	.L21:
  98:final_with_print.c **** 		binaryNum[i] = n % 2;
 358              		.loc 1 98 0
 359 033a 8B45BC   		movl	-68(%rbp), %eax
 360 033d 99       		cltd
 361 033e C1EA1F   		shrl	$31, %edx
 362 0341 01D0     		addl	%edx, %eax
 363 0343 83E001   		andl	$1, %eax
 364 0346 29D0     		subl	%edx, %eax
 365 0348 89C1     		movl	%eax, %ecx
 366 034a 488B45E0 		movq	-32(%rbp), %rax
 367 034e 8B55D0   		movl	-48(%rbp), %edx
 368 0351 4863D2   		movslq	%edx, %rdx
 369 0354 890C90   		movl	%ecx, (%rax,%rdx,4)
  99:final_with_print.c **** 		n = n / 2;
 370              		.loc 1 99 0
 371 0357 8B45BC   		movl	-68(%rbp), %eax
 372 035a 89C2     		movl	%eax, %edx
 373 035c C1EA1F   		shrl	$31, %edx
 374 035f 01D0     		addl	%edx, %eax
 375 0361 D1F8     		sarl	%eax
 376 0363 8945BC   		movl	%eax, -68(%rbp)
 100:final_with_print.c **** 		i++;
 377              		.loc 1 100 0
 378 0366 8345D001 		addl	$1, -48(%rbp)
 379              	.L20:
  97:final_with_print.c **** 		binaryNum[i] = n % 2;
 380              		.loc 1 97 0
 381 036a 837DBC00 		cmpl	$0, -68(%rbp)
 382 036e 7FCA     		jg	.L21
 383              	.LBB6:
 101:final_with_print.c **** 	}
 102:final_with_print.c **** 
 103:final_with_print.c ****     // printing binary array in reverse order
 104:final_with_print.c **** 	for (int i=0; i<count; i++)
 384              		.loc 1 104 0
 385 0370 C745D400 		movl	$0, -44(%rbp)
 385      000000
 386 0377 EB28     		jmp	.L22
 387              	.L23:
 105:final_with_print.c **** 		arr[i] = binaryNum[i];
 388              		.loc 1 105 0 discriminator 3
 389 0379 8B45D4   		movl	-44(%rbp), %eax
 390 037c 4898     		cltq
 391 037e 488D1485 		leaq	0(,%rax,4), %rdx
 391      00000000 
 392 0386 488B45B0 		movq	-80(%rbp), %rax
 393 038a 488D0C02 		leaq	(%rdx,%rax), %rcx
 394 038e 488B45E0 		movq	-32(%rbp), %rax
 395 0392 8B55D4   		movl	-44(%rbp), %edx
 396 0395 4863D2   		movslq	%edx, %rdx
 397 0398 8B0490   		movl	(%rax,%rdx,4), %eax
 398 039b 8901     		movl	%eax, (%rcx)
 104:final_with_print.c **** 		arr[i] = binaryNum[i];
 399              		.loc 1 104 0 discriminator 3
 400 039d 8345D401 		addl	$1, -44(%rbp)
 401              	.L22:
 104:final_with_print.c **** 		arr[i] = binaryNum[i];
 402              		.loc 1 104 0 is_stmt 0 discriminator 1
 403 03a1 8B45D4   		movl	-44(%rbp), %eax
 404 03a4 3B45B8   		cmpl	-72(%rbp), %eax
 405 03a7 7CD0     		jl	.L23
 406              	.LBE6:
 407 03a9 4889F4   		movq	%rsi, %rsp
 106:final_with_print.c **** }
 408              		.loc 1 106 0 is_stmt 1
 409 03ac 90       		nop
 410 03ad 488B45E8 		movq	-24(%rbp), %rax
 411 03b1 64483304 		xorq	%fs:40, %rax
 411      25280000 
 411      00
 412 03ba 7405     		je	.L24
 413 03bc E8000000 		call	__stack_chk_fail
 413      00
 414              	.L24:
 415 03c1 488B5DF8 		movq	-8(%rbp), %rbx
 416 03c5 C9       		leave
 417              		.cfi_def_cfa 7, 8
 418 03c6 C3       		ret
 419              		.cfi_endproc
 420              	.LFE8:
 422              		.globl	encrypter
 424              	encrypter:
 425              	.LFB9:
 107:final_with_print.c **** 
 108:final_with_print.c **** void encrypter(int P[], int K[], int bin[])
 109:final_with_print.c **** {
 426              		.loc 1 109 0
 427              		.cfi_startproc
 428 03c7 55       		pushq	%rbp
 429              		.cfi_def_cfa_offset 16
 430              		.cfi_offset 6, -16
 431 03c8 4889E5   		movq	%rsp, %rbp
 432              		.cfi_def_cfa_register 6
 433 03cb 4881EC60 		subq	$608, %rsp
 433      020000
 434 03d2 4889BDB8 		movq	%rdi, -584(%rbp)
 434      FDFFFF
 435 03d9 4889B5B0 		movq	%rsi, -592(%rbp)
 435      FDFFFF
 436 03e0 488995A8 		movq	%rdx, -600(%rbp)
 436      FDFFFF
 437              		.loc 1 109 0
 438 03e7 64488B04 		movq	%fs:40, %rax
 438      25280000 
 438      00
 439 03f0 488945F8 		movq	%rax, -8(%rbp)
 440 03f4 31C0     		xorl	%eax, %eax
 110:final_with_print.c ****   //int plain_text[32];
 111:final_with_print.c **** 	int key[32];
 112:final_with_print.c **** 	int cipher_text[32];
 113:final_with_print.c **** 	int T[4];
 114:final_with_print.c **** 	int count1=0;
 441              		.loc 1 114 0
 442 03f6 C785C0FD 		movl	$0, -576(%rbp)
 442      FFFF0000 
 442      0000
 443              	.LBB7:
 115:final_with_print.c **** 
 116:final_with_print.c **** 	for (int i = 0; i < 32; ++i)
 444              		.loc 1 116 0
 445 0400 C785C4FD 		movl	$0, -572(%rbp)
 445      FFFF0000 
 445      0000
 446 040a E9850000 		jmp	.L26
 446      00
 447              	.L28:
 117:final_with_print.c **** 	{
 118:final_with_print.c **** 		cipher_text[i] = P[i];
 448              		.loc 1 118 0
 449 040f 8B85C4FD 		movl	-572(%rbp), %eax
 449      FFFF
 450 0415 4898     		cltq
 451 0417 488D1485 		leaq	0(,%rax,4), %rdx
 451      00000000 
 452 041f 488B85B8 		movq	-584(%rbp), %rax
 452      FDFFFF
 453 0426 4801D0   		addq	%rdx, %rax
 454 0429 8B10     		movl	(%rax), %edx
 455 042b 8B85C4FD 		movl	-572(%rbp), %eax
 455      FFFF
 456 0431 4898     		cltq
 457 0433 899485F0 		movl	%edx, -272(%rbp,%rax,4)
 457      FEFFFF
 119:final_with_print.c **** 		key[i] = K[i];
 458              		.loc 1 119 0
 459 043a 8B85C4FD 		movl	-572(%rbp), %eax
 459      FFFF
 460 0440 4898     		cltq
 461 0442 488D1485 		leaq	0(,%rax,4), %rdx
 461      00000000 
 462 044a 488B85B0 		movq	-592(%rbp), %rax
 462      FDFFFF
 463 0451 4801D0   		addq	%rdx, %rax
 464 0454 8B10     		movl	(%rax), %edx
 465 0456 8B85C4FD 		movl	-572(%rbp), %eax
 465      FFFF
 466 045c 4898     		cltq
 467 045e 89948570 		movl	%edx, -400(%rbp,%rax,4)
 467      FEFFFF
 120:final_with_print.c **** 		if(K[i] == 1) 
 468              		.loc 1 120 0
 469 0465 8B85C4FD 		movl	-572(%rbp), %eax
 469      FFFF
 470 046b 4898     		cltq
 471 046d 488D1485 		leaq	0(,%rax,4), %rdx
 471      00000000 
 472 0475 488B85B0 		movq	-592(%rbp), %rax
 472      FDFFFF
 473 047c 4801D0   		addq	%rdx, %rax
 474 047f 8B00     		movl	(%rax), %eax
 475 0481 83F801   		cmpl	$1, %eax
 476 0484 7507     		jne	.L27
 121:final_with_print.c **** 			count1++;
 477              		.loc 1 121 0
 478 0486 8385C0FD 		addl	$1, -576(%rbp)
 478      FFFF01
 479              	.L27:
 116:final_with_print.c **** 	{
 480              		.loc 1 116 0 discriminator 2
 481 048d 8385C4FD 		addl	$1, -572(%rbp)
 481      FFFF01
 482              	.L26:
 116:final_with_print.c **** 	{
 483              		.loc 1 116 0 is_stmt 0 discriminator 1
 484 0494 83BDC4FD 		cmpl	$31, -572(%rbp)
 484      FFFF1F
 485 049b 0F8E6EFF 		jle	.L28
 485      FFFF
 486              	.LBE7:
 487              	.LBB8:
 122:final_with_print.c **** 	}
 123:final_with_print.c **** 
 124:final_with_print.c **** 	int arr0[8];
 125:final_with_print.c **** 	int arr1[8];
 126:final_with_print.c **** 	int arr2[8];
 127:final_with_print.c **** 	int arr3[8];
 128:final_with_print.c **** 
 129:final_with_print.c **** 	for(int i=0; i<8; i++)
 488              		.loc 1 129 0 is_stmt 1
 489 04a1 C785C8FD 		movl	$0, -568(%rbp)
 489      FFFF0000 
 489      0000
 490 04ab E9940000 		jmp	.L29
 490      00
 491              	.L30:
 130:final_with_print.c **** 	{
 131:final_with_print.c **** 		arr0[i] = key[4*i];
 492              		.loc 1 131 0 discriminator 3
 493 04b0 8B85C8FD 		movl	-568(%rbp), %eax
 493      FFFF
 494 04b6 C1E002   		sall	$2, %eax
 495 04b9 4898     		cltq
 496 04bb 8B948570 		movl	-400(%rbp,%rax,4), %edx
 496      FEFFFF
 497 04c2 8B85C8FD 		movl	-568(%rbp), %eax
 497      FFFF
 498 04c8 4898     		cltq
 499 04ca 899485F0 		movl	%edx, -528(%rbp,%rax,4)
 499      FDFFFF
 132:final_with_print.c **** 		arr1[i] = key[4*i+1];
 500              		.loc 1 132 0 discriminator 3
 501 04d1 8B85C8FD 		movl	-568(%rbp), %eax
 501      FFFF
 502 04d7 C1E002   		sall	$2, %eax
 503 04da 83C001   		addl	$1, %eax
 504 04dd 4898     		cltq
 505 04df 8B948570 		movl	-400(%rbp,%rax,4), %edx
 505      FEFFFF
 506 04e6 8B85C8FD 		movl	-568(%rbp), %eax
 506      FFFF
 507 04ec 4898     		cltq
 508 04ee 89948510 		movl	%edx, -496(%rbp,%rax,4)
 508      FEFFFF
 133:final_with_print.c **** 		arr2[i] = key[4*i+2];
 509              		.loc 1 133 0 discriminator 3
 510 04f5 8B85C8FD 		movl	-568(%rbp), %eax
 510      FFFF
 511 04fb C1E002   		sall	$2, %eax
 512 04fe 83C002   		addl	$2, %eax
 513 0501 4898     		cltq
 514 0503 8B948570 		movl	-400(%rbp,%rax,4), %edx
 514      FEFFFF
 515 050a 8B85C8FD 		movl	-568(%rbp), %eax
 515      FFFF
 516 0510 4898     		cltq
 517 0512 89948530 		movl	%edx, -464(%rbp,%rax,4)
 517      FEFFFF
 134:final_with_print.c **** 		arr3[i] = key[4*i+3];
 518              		.loc 1 134 0 discriminator 3
 519 0519 8B85C8FD 		movl	-568(%rbp), %eax
 519      FFFF
 520 051f C1E002   		sall	$2, %eax
 521 0522 83C003   		addl	$3, %eax
 522 0525 4898     		cltq
 523 0527 8B948570 		movl	-400(%rbp,%rax,4), %edx
 523      FEFFFF
 524 052e 8B85C8FD 		movl	-568(%rbp), %eax
 524      FFFF
 525 0534 4898     		cltq
 526 0536 89948550 		movl	%edx, -432(%rbp,%rax,4)
 526      FEFFFF
 129:final_with_print.c **** 	{
 527              		.loc 1 129 0 discriminator 3
 528 053d 8385C8FD 		addl	$1, -568(%rbp)
 528      FFFF01
 529              	.L29:
 129:final_with_print.c **** 	{
 530              		.loc 1 129 0 is_stmt 0 discriminator 1
 531 0544 83BDC8FD 		cmpl	$7, -568(%rbp)
 531      FFFF07
 532 054b 0F8E5FFF 		jle	.L30
 532      FFFF
 533              	.LBE8:
 135:final_with_print.c **** 	}
 136:final_with_print.c **** 
 137:final_with_print.c **** 	T[0] = myxor(arr0);
 534              		.loc 1 137 0 is_stmt 1
 535 0551 488D85F0 		leaq	-528(%rbp), %rax
 535      FDFFFF
 536 0558 4889C7   		movq	%rax, %rdi
 537 055b E8000000 		call	myxor
 537      00
 538 0560 8985E0FD 		movl	%eax, -544(%rbp)
 538      FFFF
 138:final_with_print.c **** 	T[1] = myxor(arr1);
 539              		.loc 1 138 0
 540 0566 488D8510 		leaq	-496(%rbp), %rax
 540      FEFFFF
 541 056d 4889C7   		movq	%rax, %rdi
 542 0570 E8000000 		call	myxor
 542      00
 543 0575 8985E4FD 		movl	%eax, -540(%rbp)
 543      FFFF
 139:final_with_print.c **** 	T[2] = myxor(arr2);
 544              		.loc 1 139 0
 545 057b 488D8530 		leaq	-464(%rbp), %rax
 545      FEFFFF
 546 0582 4889C7   		movq	%rax, %rdi
 547 0585 E8000000 		call	myxor
 547      00
 548 058a 8985E8FD 		movl	%eax, -536(%rbp)
 548      FFFF
 140:final_with_print.c **** 	T[3] = myxor(arr3);
 549              		.loc 1 140 0
 550 0590 488D8550 		leaq	-432(%rbp), %rax
 550      FEFFFF
 551 0597 4889C7   		movq	%rax, %rdi
 552 059a E8000000 		call	myxor
 552      00
 553 059f 8985ECFD 		movl	%eax, -532(%rbp)
 553      FFFF
 141:final_with_print.c **** 
 142:final_with_print.c **** 	int T32[32];
 143:final_with_print.c **** 	int dec = bitArrayToInt(T, 4);
 554              		.loc 1 143 0
 555 05a5 488D85E0 		leaq	-544(%rbp), %rax
 555      FDFFFF
 556 05ac BE040000 		movl	$4, %esi
 556      00
 557 05b1 4889C7   		movq	%rax, %rdi
 558 05b4 E8000000 		call	bitArrayToInt
 558      00
 559 05b9 8985CCFD 		movl	%eax, -564(%rbp)
 559      FFFF
 560              	.LBB9:
 144:final_with_print.c **** 
 145:final_with_print.c **** 	for (int i = 0; i < count1; ++i)
 561              		.loc 1 145 0
 562 05bf C785D0FD 		movl	$0, -560(%rbp)
 562      FFFF0000 
 562      0000
 563 05c9 E90D0100 		jmp	.L31
 563      00
 564              	.L37:
 565              	.LBB10:
 146:final_with_print.c **** 	{ 
 147:final_with_print.c **** 		for (int j = 0; j < 8; j++)
 566              		.loc 1 147 0
 567 05ce C785D4FD 		movl	$0, -556(%rbp)
 567      FFFF0000 
 567      0000
 568 05d8 EB70     		jmp	.L32
 569              	.L33:
 148:final_with_print.c **** 		{
 149:final_with_print.c **** 			T32[4*j] = T[0];
 570              		.loc 1 149 0 discriminator 3
 571 05da 8B85D4FD 		movl	-556(%rbp), %eax
 571      FFFF
 572 05e0 C1E002   		sall	$2, %eax
 573 05e3 8B95E0FD 		movl	-544(%rbp), %edx
 573      FFFF
 574 05e9 4898     		cltq
 575 05eb 89948570 		movl	%edx, -144(%rbp,%rax,4)
 575      FFFFFF
 150:final_with_print.c **** 			T32[4*j+1] = T[1];
 576              		.loc 1 150 0 discriminator 3
 577 05f2 8B85D4FD 		movl	-556(%rbp), %eax
 577      FFFF
 578 05f8 C1E002   		sall	$2, %eax
 579 05fb 83C001   		addl	$1, %eax
 580 05fe 8B95E4FD 		movl	-540(%rbp), %edx
 580      FFFF
 581 0604 4898     		cltq
 582 0606 89948570 		movl	%edx, -144(%rbp,%rax,4)
 582      FFFFFF
 151:final_with_print.c **** 			T32[4*j+2] = T[2];
 583              		.loc 1 151 0 discriminator 3
 584 060d 8B85D4FD 		movl	-556(%rbp), %eax
 584      FFFF
 585 0613 C1E002   		sall	$2, %eax
 586 0616 83C002   		addl	$2, %eax
 587 0619 8B95E8FD 		movl	-536(%rbp), %edx
 587      FFFF
 588 061f 4898     		cltq
 589 0621 89948570 		movl	%edx, -144(%rbp,%rax,4)
 589      FFFFFF
 152:final_with_print.c **** 			T32[4*j+3] = T[3];
 590              		.loc 1 152 0 discriminator 3
 591 0628 8B85D4FD 		movl	-556(%rbp), %eax
 591      FFFF
 592 062e C1E002   		sall	$2, %eax
 593 0631 83C003   		addl	$3, %eax
 594 0634 8B95ECFD 		movl	-532(%rbp), %edx
 594      FFFF
 595 063a 4898     		cltq
 596 063c 89948570 		movl	%edx, -144(%rbp,%rax,4)
 596      FFFFFF
 147:final_with_print.c **** 		{
 597              		.loc 1 147 0 discriminator 3
 598 0643 8385D4FD 		addl	$1, -556(%rbp)
 598      FFFF01
 599              	.L32:
 147:final_with_print.c **** 		{
 600              		.loc 1 147 0 is_stmt 0 discriminator 1
 601 064a 83BDD4FD 		cmpl	$7, -556(%rbp)
 601      FFFF07
 602 0651 7E87     		jle	.L33
 603              	.LBE10:
 604              	.LBB11:
 153:final_with_print.c **** 		}
 154:final_with_print.c **** 
 155:final_with_print.c **** 		for (int j = 0; j < 32; ++j)
 605              		.loc 1 155 0 is_stmt 1
 606 0653 C785D8FD 		movl	$0, -552(%rbp)
 606      FFFF0000 
 606      0000
 607 065d EB36     		jmp	.L34
 608              	.L35:
 156:final_with_print.c **** 			cipher_text[j] = cipher_text[j] ^ T32[j];
 609              		.loc 1 156 0 discriminator 3
 610 065f 8B85D8FD 		movl	-552(%rbp), %eax
 610      FFFF
 611 0665 4898     		cltq
 612 0667 8B9485F0 		movl	-272(%rbp,%rax,4), %edx
 612      FEFFFF
 613 066e 8B85D8FD 		movl	-552(%rbp), %eax
 613      FFFF
 614 0674 4898     		cltq
 615 0676 8B848570 		movl	-144(%rbp,%rax,4), %eax
 615      FFFFFF
 616 067d 31C2     		xorl	%eax, %edx
 617 067f 8B85D8FD 		movl	-552(%rbp), %eax
 617      FFFF
 618 0685 4898     		cltq
 619 0687 899485F0 		movl	%edx, -272(%rbp,%rax,4)
 619      FEFFFF
 155:final_with_print.c **** 			cipher_text[j] = cipher_text[j] ^ T32[j];
 620              		.loc 1 155 0 discriminator 3
 621 068e 8385D8FD 		addl	$1, -552(%rbp)
 621      FFFF01
 622              	.L34:
 155:final_with_print.c **** 			cipher_text[j] = cipher_text[j] ^ T32[j];
 623              		.loc 1 155 0 is_stmt 0 discriminator 1
 624 0695 83BDD8FD 		cmpl	$31, -552(%rbp)
 624      FFFF1F
 625 069c 7EC1     		jle	.L35
 626              	.LBE11:
 157:final_with_print.c **** 
 158:final_with_print.c ****     // for (int j = 0; j < 32; ++j)
 159:final_with_print.c ****     //  printf("%d", cipher_text[j]);
 160:final_with_print.c ****     // printf("\n");
 161:final_with_print.c **** 
 162:final_with_print.c **** 		dec++;
 627              		.loc 1 162 0 is_stmt 1
 628 069e 8385CCFD 		addl	$1, -564(%rbp)
 628      FFFF01
 163:final_with_print.c **** 		if(dec==16) dec = 0;
 629              		.loc 1 163 0
 630 06a5 83BDCCFD 		cmpl	$16, -564(%rbp)
 630      FFFF10
 631 06ac 750A     		jne	.L36
 632              		.loc 1 163 0 is_stmt 0 discriminator 1
 633 06ae C785CCFD 		movl	$0, -564(%rbp)
 633      FFFF0000 
 633      0000
 634              	.L36:
 164:final_with_print.c **** 		decToBinary(dec, T, 4);
 635              		.loc 1 164 0 is_stmt 1 discriminator 2
 636 06b8 488D8DE0 		leaq	-544(%rbp), %rcx
 636      FDFFFF
 637 06bf 8B85CCFD 		movl	-564(%rbp), %eax
 637      FFFF
 638 06c5 BA040000 		movl	$4, %edx
 638      00
 639 06ca 4889CE   		movq	%rcx, %rsi
 640 06cd 89C7     		movl	%eax, %edi
 641 06cf E8000000 		call	decToBinary
 641      00
 145:final_with_print.c **** 	{ 
 642              		.loc 1 145 0 discriminator 2
 643 06d4 8385D0FD 		addl	$1, -560(%rbp)
 643      FFFF01
 644              	.L31:
 145:final_with_print.c **** 	{ 
 645              		.loc 1 145 0 is_stmt 0 discriminator 1
 646 06db 8B85D0FD 		movl	-560(%rbp), %eax
 646      FFFF
 647 06e1 3B85C0FD 		cmpl	-576(%rbp), %eax
 647      FFFF
 648 06e7 0F8CE1FE 		jl	.L37
 648      FFFF
 649              	.LBE9:
 650              	.LBB12:
 165:final_with_print.c **** 	}
 166:final_with_print.c **** 
 167:final_with_print.c **** 	for (int i = 0; i < 32; ++i)
 651              		.loc 1 167 0 is_stmt 1
 652 06ed C785DCFD 		movl	$0, -548(%rbp)
 652      FFFF0000 
 652      0000
 653 06f7 EB32     		jmp	.L38
 654              	.L39:
 168:final_with_print.c **** 		bin[i] = cipher_text[i];
 655              		.loc 1 168 0 discriminator 3
 656 06f9 8B85DCFD 		movl	-548(%rbp), %eax
 656      FFFF
 657 06ff 4898     		cltq
 658 0701 488D1485 		leaq	0(,%rax,4), %rdx
 658      00000000 
 659 0709 488B85A8 		movq	-600(%rbp), %rax
 659      FDFFFF
 660 0710 4801C2   		addq	%rax, %rdx
 661 0713 8B85DCFD 		movl	-548(%rbp), %eax
 661      FFFF
 662 0719 4898     		cltq
 663 071b 8B8485F0 		movl	-272(%rbp,%rax,4), %eax
 663      FEFFFF
 664 0722 8902     		movl	%eax, (%rdx)
 167:final_with_print.c **** 		bin[i] = cipher_text[i];
 665              		.loc 1 167 0 discriminator 3
 666 0724 8385DCFD 		addl	$1, -548(%rbp)
 666      FFFF01
 667              	.L38:
 167:final_with_print.c **** 		bin[i] = cipher_text[i];
 668              		.loc 1 167 0 is_stmt 0 discriminator 1
 669 072b 83BDDCFD 		cmpl	$31, -548(%rbp)
 669      FFFF1F
 670 0732 7EC5     		jle	.L39
 671              	.LBE12:
 169:final_with_print.c **** }
 672              		.loc 1 169 0 is_stmt 1
 673 0734 90       		nop
 674 0735 488B45F8 		movq	-8(%rbp), %rax
 675 0739 64483304 		xorq	%fs:40, %rax
 675      25280000 
 675      00
 676 0742 7405     		je	.L40
 677 0744 E8000000 		call	__stack_chk_fail
 677      00
 678              	.L40:
 679 0749 C9       		leave
 680              		.cfi_def_cfa 7, 8
 681 074a C3       		ret
 682              		.cfi_endproc
 683              	.LFE9:
 685              		.globl	decrypter
 687              	decrypter:
 688              	.LFB10:
 170:final_with_print.c **** 
 171:final_with_print.c **** void decrypter(int P[], int K[], int bin[])
 172:final_with_print.c **** {
 689              		.loc 1 172 0
 690              		.cfi_startproc
 691 074b 55       		pushq	%rbp
 692              		.cfi_def_cfa_offset 16
 693              		.cfi_offset 6, -16
 694 074c 4889E5   		movq	%rsp, %rbp
 695              		.cfi_def_cfa_register 6
 696 074f 4881EC60 		subq	$608, %rsp
 696      020000
 697 0756 4889BDB8 		movq	%rdi, -584(%rbp)
 697      FDFFFF
 698 075d 4889B5B0 		movq	%rsi, -592(%rbp)
 698      FDFFFF
 699 0764 488995A8 		movq	%rdx, -600(%rbp)
 699      FDFFFF
 700              		.loc 1 172 0
 701 076b 64488B04 		movq	%fs:40, %rax
 701      25280000 
 701      00
 702 0774 488945F8 		movq	%rax, -8(%rbp)
 703 0778 31C0     		xorl	%eax, %eax
 173:final_with_print.c ****   //int plain_text[32];
 174:final_with_print.c **** 	int key[32];
 175:final_with_print.c **** 	int cipher_text[32];
 176:final_with_print.c **** 	int T[4];
 177:final_with_print.c **** 	int count1=0;
 704              		.loc 1 177 0
 705 077a C785C0FD 		movl	$0, -576(%rbp)
 705      FFFF0000 
 705      0000
 706              	.LBB13:
 178:final_with_print.c **** 
 179:final_with_print.c **** 	for (int i = 0; i < 32; ++i)
 707              		.loc 1 179 0
 708 0784 C785C4FD 		movl	$0, -572(%rbp)
 708      FFFF0000 
 708      0000
 709 078e E9840000 		jmp	.L42
 709      00
 710              	.L44:
 180:final_with_print.c **** 	{
 181:final_with_print.c **** 		cipher_text[i] = P[i];
 711              		.loc 1 181 0
 712 0793 8B85C4FD 		movl	-572(%rbp), %eax
 712      FFFF
 713 0799 4898     		cltq
 714 079b 488D1485 		leaq	0(,%rax,4), %rdx
 714      00000000 
 715 07a3 488B85B8 		movq	-584(%rbp), %rax
 715      FDFFFF
 716 07aa 4801D0   		addq	%rdx, %rax
 717 07ad 8B10     		movl	(%rax), %edx
 718 07af 8B85C4FD 		movl	-572(%rbp), %eax
 718      FFFF
 719 07b5 4898     		cltq
 720 07b7 899485F0 		movl	%edx, -272(%rbp,%rax,4)
 720      FEFFFF
 182:final_with_print.c **** 		key[i] = K[i];
 721              		.loc 1 182 0
 722 07be 8B85C4FD 		movl	-572(%rbp), %eax
 722      FFFF
 723 07c4 4898     		cltq
 724 07c6 488D1485 		leaq	0(,%rax,4), %rdx
 724      00000000 
 725 07ce 488B85B0 		movq	-592(%rbp), %rax
 725      FDFFFF
 726 07d5 4801D0   		addq	%rdx, %rax
 727 07d8 8B10     		movl	(%rax), %edx
 728 07da 8B85C4FD 		movl	-572(%rbp), %eax
 728      FFFF
 729 07e0 4898     		cltq
 730 07e2 89948570 		movl	%edx, -400(%rbp,%rax,4)
 730      FEFFFF
 183:final_with_print.c **** 		if(K[i] == 0) 
 731              		.loc 1 183 0
 732 07e9 8B85C4FD 		movl	-572(%rbp), %eax
 732      FFFF
 733 07ef 4898     		cltq
 734 07f1 488D1485 		leaq	0(,%rax,4), %rdx
 734      00000000 
 735 07f9 488B85B0 		movq	-592(%rbp), %rax
 735      FDFFFF
 736 0800 4801D0   		addq	%rdx, %rax
 737 0803 8B00     		movl	(%rax), %eax
 738 0805 85C0     		testl	%eax, %eax
 739 0807 7507     		jne	.L43
 184:final_with_print.c **** 			count1++;
 740              		.loc 1 184 0
 741 0809 8385C0FD 		addl	$1, -576(%rbp)
 741      FFFF01
 742              	.L43:
 179:final_with_print.c **** 	{
 743              		.loc 1 179 0 discriminator 2
 744 0810 8385C4FD 		addl	$1, -572(%rbp)
 744      FFFF01
 745              	.L42:
 179:final_with_print.c **** 	{
 746              		.loc 1 179 0 is_stmt 0 discriminator 1
 747 0817 83BDC4FD 		cmpl	$31, -572(%rbp)
 747      FFFF1F
 748 081e 0F8E6FFF 		jle	.L44
 748      FFFF
 749              	.LBE13:
 750              	.LBB14:
 185:final_with_print.c **** 	}
 186:final_with_print.c **** 
 187:final_with_print.c **** 	int arr0[8];
 188:final_with_print.c **** 	int arr1[8];
 189:final_with_print.c **** 	int arr2[8];
 190:final_with_print.c **** 	int arr3[8];
 191:final_with_print.c **** 
 192:final_with_print.c **** 	for(int i=0; i<8; i++)
 751              		.loc 1 192 0 is_stmt 1
 752 0824 C785C8FD 		movl	$0, -568(%rbp)
 752      FFFF0000 
 752      0000
 753 082e E9940000 		jmp	.L45
 753      00
 754              	.L46:
 193:final_with_print.c **** 	{
 194:final_with_print.c **** 		arr0[i] = key[4*i];
 755              		.loc 1 194 0 discriminator 3
 756 0833 8B85C8FD 		movl	-568(%rbp), %eax
 756      FFFF
 757 0839 C1E002   		sall	$2, %eax
 758 083c 4898     		cltq
 759 083e 8B948570 		movl	-400(%rbp,%rax,4), %edx
 759      FEFFFF
 760 0845 8B85C8FD 		movl	-568(%rbp), %eax
 760      FFFF
 761 084b 4898     		cltq
 762 084d 899485F0 		movl	%edx, -528(%rbp,%rax,4)
 762      FDFFFF
 195:final_with_print.c **** 		arr1[i] = key[4*i+1];
 763              		.loc 1 195 0 discriminator 3
 764 0854 8B85C8FD 		movl	-568(%rbp), %eax
 764      FFFF
 765 085a C1E002   		sall	$2, %eax
 766 085d 83C001   		addl	$1, %eax
 767 0860 4898     		cltq
 768 0862 8B948570 		movl	-400(%rbp,%rax,4), %edx
 768      FEFFFF
 769 0869 8B85C8FD 		movl	-568(%rbp), %eax
 769      FFFF
 770 086f 4898     		cltq
 771 0871 89948510 		movl	%edx, -496(%rbp,%rax,4)
 771      FEFFFF
 196:final_with_print.c **** 		arr2[i] = key[4*i+2];
 772              		.loc 1 196 0 discriminator 3
 773 0878 8B85C8FD 		movl	-568(%rbp), %eax
 773      FFFF
 774 087e C1E002   		sall	$2, %eax
 775 0881 83C002   		addl	$2, %eax
 776 0884 4898     		cltq
 777 0886 8B948570 		movl	-400(%rbp,%rax,4), %edx
 777      FEFFFF
 778 088d 8B85C8FD 		movl	-568(%rbp), %eax
 778      FFFF
 779 0893 4898     		cltq
 780 0895 89948530 		movl	%edx, -464(%rbp,%rax,4)
 780      FEFFFF
 197:final_with_print.c **** 		arr3[i] = key[4*i+3];
 781              		.loc 1 197 0 discriminator 3
 782 089c 8B85C8FD 		movl	-568(%rbp), %eax
 782      FFFF
 783 08a2 C1E002   		sall	$2, %eax
 784 08a5 83C003   		addl	$3, %eax
 785 08a8 4898     		cltq
 786 08aa 8B948570 		movl	-400(%rbp,%rax,4), %edx
 786      FEFFFF
 787 08b1 8B85C8FD 		movl	-568(%rbp), %eax
 787      FFFF
 788 08b7 4898     		cltq
 789 08b9 89948550 		movl	%edx, -432(%rbp,%rax,4)
 789      FEFFFF
 192:final_with_print.c **** 	{
 790              		.loc 1 192 0 discriminator 3
 791 08c0 8385C8FD 		addl	$1, -568(%rbp)
 791      FFFF01
 792              	.L45:
 192:final_with_print.c **** 	{
 793              		.loc 1 192 0 is_stmt 0 discriminator 1
 794 08c7 83BDC8FD 		cmpl	$7, -568(%rbp)
 794      FFFF07
 795 08ce 0F8E5FFF 		jle	.L46
 795      FFFF
 796              	.LBE14:
 198:final_with_print.c **** 	}
 199:final_with_print.c **** 
 200:final_with_print.c **** 	T[0] = myxor(arr0);
 797              		.loc 1 200 0 is_stmt 1
 798 08d4 488D85F0 		leaq	-528(%rbp), %rax
 798      FDFFFF
 799 08db 4889C7   		movq	%rax, %rdi
 800 08de E8000000 		call	myxor
 800      00
 801 08e3 8985E0FD 		movl	%eax, -544(%rbp)
 801      FFFF
 201:final_with_print.c **** 	T[1] = myxor(arr1);
 802              		.loc 1 201 0
 803 08e9 488D8510 		leaq	-496(%rbp), %rax
 803      FEFFFF
 804 08f0 4889C7   		movq	%rax, %rdi
 805 08f3 E8000000 		call	myxor
 805      00
 806 08f8 8985E4FD 		movl	%eax, -540(%rbp)
 806      FFFF
 202:final_with_print.c **** 	T[2] = myxor(arr2);
 807              		.loc 1 202 0
 808 08fe 488D8530 		leaq	-464(%rbp), %rax
 808      FEFFFF
 809 0905 4889C7   		movq	%rax, %rdi
 810 0908 E8000000 		call	myxor
 810      00
 811 090d 8985E8FD 		movl	%eax, -536(%rbp)
 811      FFFF
 203:final_with_print.c **** 	T[3] = myxor(arr3);
 812              		.loc 1 203 0
 813 0913 488D8550 		leaq	-432(%rbp), %rax
 813      FEFFFF
 814 091a 4889C7   		movq	%rax, %rdi
 815 091d E8000000 		call	myxor
 815      00
 816 0922 8985ECFD 		movl	%eax, -532(%rbp)
 816      FFFF
 204:final_with_print.c **** 
 205:final_with_print.c **** 	int T32[32];
 206:final_with_print.c **** 	int dec = bitArrayToInt(T, 4);
 817              		.loc 1 206 0
 818 0928 488D85E0 		leaq	-544(%rbp), %rax
 818      FDFFFF
 819 092f BE040000 		movl	$4, %esi
 819      00
 820 0934 4889C7   		movq	%rax, %rdi
 821 0937 E8000000 		call	bitArrayToInt
 821      00
 822 093c 8985CCFD 		movl	%eax, -564(%rbp)
 822      FFFF
 207:final_with_print.c **** 	dec = (dec+15)%16;
 823              		.loc 1 207 0
 824 0942 8B85CCFD 		movl	-564(%rbp), %eax
 824      FFFF
 825 0948 8D500F   		leal	15(%rax), %edx
 826 094b 89D0     		movl	%edx, %eax
 827 094d C1F81F   		sarl	$31, %eax
 828 0950 C1E81C   		shrl	$28, %eax
 829 0953 01C2     		addl	%eax, %edx
 830 0955 83E20F   		andl	$15, %edx
 831 0958 29C2     		subl	%eax, %edx
 832 095a 89D0     		movl	%edx, %eax
 833 095c 8985CCFD 		movl	%eax, -564(%rbp)
 833      FFFF
 208:final_with_print.c **** 	decToBinary(dec, T, 4);
 834              		.loc 1 208 0
 835 0962 488D8DE0 		leaq	-544(%rbp), %rcx
 835      FDFFFF
 836 0969 8B85CCFD 		movl	-564(%rbp), %eax
 836      FFFF
 837 096f BA040000 		movl	$4, %edx
 837      00
 838 0974 4889CE   		movq	%rcx, %rsi
 839 0977 89C7     		movl	%eax, %edi
 840 0979 E8000000 		call	decToBinary
 840      00
 841              	.LBB15:
 209:final_with_print.c **** 
 210:final_with_print.c **** 	for (int i = 0; i < count1; ++i)
 842              		.loc 1 210 0
 843 097e C785D0FD 		movl	$0, -560(%rbp)
 843      FFFF0000 
 843      0000
 844 0988 E9130100 		jmp	.L47
 844      00
 845              	.L52:
 846              	.LBB16:
 211:final_with_print.c **** 	{ 
 212:final_with_print.c **** 		for (int j = 0; j < 8; j++)
 847              		.loc 1 212 0
 848 098d C785D4FD 		movl	$0, -556(%rbp)
 848      FFFF0000 
 848      0000
 849 0997 EB70     		jmp	.L48
 850              	.L49:
 213:final_with_print.c **** 		{
 214:final_with_print.c **** 			T32[4*j] = T[0];
 851              		.loc 1 214 0 discriminator 3
 852 0999 8B85D4FD 		movl	-556(%rbp), %eax
 852      FFFF
 853 099f C1E002   		sall	$2, %eax
 854 09a2 8B95E0FD 		movl	-544(%rbp), %edx
 854      FFFF
 855 09a8 4898     		cltq
 856 09aa 89948570 		movl	%edx, -144(%rbp,%rax,4)
 856      FFFFFF
 215:final_with_print.c **** 			T32[4*j+1] = T[1];
 857              		.loc 1 215 0 discriminator 3
 858 09b1 8B85D4FD 		movl	-556(%rbp), %eax
 858      FFFF
 859 09b7 C1E002   		sall	$2, %eax
 860 09ba 83C001   		addl	$1, %eax
 861 09bd 8B95E4FD 		movl	-540(%rbp), %edx
 861      FFFF
 862 09c3 4898     		cltq
 863 09c5 89948570 		movl	%edx, -144(%rbp,%rax,4)
 863      FFFFFF
 216:final_with_print.c **** 			T32[4*j+2] = T[2];
 864              		.loc 1 216 0 discriminator 3
 865 09cc 8B85D4FD 		movl	-556(%rbp), %eax
 865      FFFF
 866 09d2 C1E002   		sall	$2, %eax
 867 09d5 83C002   		addl	$2, %eax
 868 09d8 8B95E8FD 		movl	-536(%rbp), %edx
 868      FFFF
 869 09de 4898     		cltq
 870 09e0 89948570 		movl	%edx, -144(%rbp,%rax,4)
 870      FFFFFF
 217:final_with_print.c **** 			T32[4*j+3] = T[3];
 871              		.loc 1 217 0 discriminator 3
 872 09e7 8B85D4FD 		movl	-556(%rbp), %eax
 872      FFFF
 873 09ed C1E002   		sall	$2, %eax
 874 09f0 83C003   		addl	$3, %eax
 875 09f3 8B95ECFD 		movl	-532(%rbp), %edx
 875      FFFF
 876 09f9 4898     		cltq
 877 09fb 89948570 		movl	%edx, -144(%rbp,%rax,4)
 877      FFFFFF
 212:final_with_print.c **** 		{
 878              		.loc 1 212 0 discriminator 3
 879 0a02 8385D4FD 		addl	$1, -556(%rbp)
 879      FFFF01
 880              	.L48:
 212:final_with_print.c **** 		{
 881              		.loc 1 212 0 is_stmt 0 discriminator 1
 882 0a09 83BDD4FD 		cmpl	$7, -556(%rbp)
 882      FFFF07
 883 0a10 7E87     		jle	.L49
 884              	.LBE16:
 885              	.LBB17:
 218:final_with_print.c **** 		}
 219:final_with_print.c **** 
 220:final_with_print.c **** 		for (int j = 0; j < 32; ++j)
 886              		.loc 1 220 0 is_stmt 1
 887 0a12 C785D8FD 		movl	$0, -552(%rbp)
 887      FFFF0000 
 887      0000
 888 0a1c EB36     		jmp	.L50
 889              	.L51:
 221:final_with_print.c **** 			cipher_text[j] = cipher_text[j] ^ T32[j];
 890              		.loc 1 221 0 discriminator 3
 891 0a1e 8B85D8FD 		movl	-552(%rbp), %eax
 891      FFFF
 892 0a24 4898     		cltq
 893 0a26 8B9485F0 		movl	-272(%rbp,%rax,4), %edx
 893      FEFFFF
 894 0a2d 8B85D8FD 		movl	-552(%rbp), %eax
 894      FFFF
 895 0a33 4898     		cltq
 896 0a35 8B848570 		movl	-144(%rbp,%rax,4), %eax
 896      FFFFFF
 897 0a3c 31C2     		xorl	%eax, %edx
 898 0a3e 8B85D8FD 		movl	-552(%rbp), %eax
 898      FFFF
 899 0a44 4898     		cltq
 900 0a46 899485F0 		movl	%edx, -272(%rbp,%rax,4)
 900      FEFFFF
 220:final_with_print.c **** 			cipher_text[j] = cipher_text[j] ^ T32[j];
 901              		.loc 1 220 0 discriminator 3
 902 0a4d 8385D8FD 		addl	$1, -552(%rbp)
 902      FFFF01
 903              	.L50:
 220:final_with_print.c **** 			cipher_text[j] = cipher_text[j] ^ T32[j];
 904              		.loc 1 220 0 is_stmt 0 discriminator 1
 905 0a54 83BDD8FD 		cmpl	$31, -552(%rbp)
 905      FFFF1F
 906 0a5b 7EC1     		jle	.L51
 907              	.LBE17:
 222:final_with_print.c **** 
 223:final_with_print.c **** 		dec=(dec+15)%16;
 908              		.loc 1 223 0 is_stmt 1 discriminator 2
 909 0a5d 8B85CCFD 		movl	-564(%rbp), %eax
 909      FFFF
 910 0a63 8D500F   		leal	15(%rax), %edx
 911 0a66 89D0     		movl	%edx, %eax
 912 0a68 C1F81F   		sarl	$31, %eax
 913 0a6b C1E81C   		shrl	$28, %eax
 914 0a6e 01C2     		addl	%eax, %edx
 915 0a70 83E20F   		andl	$15, %edx
 916 0a73 29C2     		subl	%eax, %edx
 917 0a75 89D0     		movl	%edx, %eax
 918 0a77 8985CCFD 		movl	%eax, -564(%rbp)
 918      FFFF
 224:final_with_print.c **** 		decToBinary(dec, T, 4);
 919              		.loc 1 224 0 discriminator 2
 920 0a7d 488D8DE0 		leaq	-544(%rbp), %rcx
 920      FDFFFF
 921 0a84 8B85CCFD 		movl	-564(%rbp), %eax
 921      FFFF
 922 0a8a BA040000 		movl	$4, %edx
 922      00
 923 0a8f 4889CE   		movq	%rcx, %rsi
 924 0a92 89C7     		movl	%eax, %edi
 925 0a94 E8000000 		call	decToBinary
 925      00
 210:final_with_print.c **** 	{ 
 926              		.loc 1 210 0 discriminator 2
 927 0a99 8385D0FD 		addl	$1, -560(%rbp)
 927      FFFF01
 928              	.L47:
 210:final_with_print.c **** 	{ 
 929              		.loc 1 210 0 is_stmt 0 discriminator 1
 930 0aa0 8B85D0FD 		movl	-560(%rbp), %eax
 930      FFFF
 931 0aa6 3B85C0FD 		cmpl	-576(%rbp), %eax
 931      FFFF
 932 0aac 0F8CDBFE 		jl	.L52
 932      FFFF
 933              	.LBE15:
 934              	.LBB18:
 225:final_with_print.c **** 	}
 226:final_with_print.c **** 
 227:final_with_print.c **** 	for (int i = 0; i < 32; ++i)
 935              		.loc 1 227 0 is_stmt 1
 936 0ab2 C785DCFD 		movl	$0, -548(%rbp)
 936      FFFF0000 
 936      0000
 937 0abc EB32     		jmp	.L53
 938              	.L54:
 228:final_with_print.c **** 		bin[i] = cipher_text[i];
 939              		.loc 1 228 0 discriminator 3
 940 0abe 8B85DCFD 		movl	-548(%rbp), %eax
 940      FFFF
 941 0ac4 4898     		cltq
 942 0ac6 488D1485 		leaq	0(,%rax,4), %rdx
 942      00000000 
 943 0ace 488B85A8 		movq	-600(%rbp), %rax
 943      FDFFFF
 944 0ad5 4801C2   		addq	%rax, %rdx
 945 0ad8 8B85DCFD 		movl	-548(%rbp), %eax
 945      FFFF
 946 0ade 4898     		cltq
 947 0ae0 8B8485F0 		movl	-272(%rbp,%rax,4), %eax
 947      FEFFFF
 948 0ae7 8902     		movl	%eax, (%rdx)
 227:final_with_print.c **** 		bin[i] = cipher_text[i];
 949              		.loc 1 227 0 discriminator 3
 950 0ae9 8385DCFD 		addl	$1, -548(%rbp)
 950      FFFF01
 951              	.L53:
 227:final_with_print.c **** 		bin[i] = cipher_text[i];
 952              		.loc 1 227 0 is_stmt 0 discriminator 1
 953 0af0 83BDDCFD 		cmpl	$31, -548(%rbp)
 953      FFFF1F
 954 0af7 7EC5     		jle	.L54
 955              	.LBE18:
 229:final_with_print.c **** }
 956              		.loc 1 229 0 is_stmt 1
 957 0af9 90       		nop
 958 0afa 488B45F8 		movq	-8(%rbp), %rax
 959 0afe 64483304 		xorq	%fs:40, %rax
 959      25280000 
 959      00
 960 0b07 7405     		je	.L55
 961 0b09 E8000000 		call	__stack_chk_fail
 961      00
 962              	.L55:
 963 0b0e C9       		leave
 964              		.cfi_def_cfa 7, 8
 965 0b0f C3       		ret
 966              		.cfi_endproc
 967              	.LFE10:
 969              		.globl	convert_to_binary
 971              	convert_to_binary:
 972              	.LFB11:
 230:final_with_print.c **** 
 231:final_with_print.c **** 
 232:final_with_print.c **** void convert_to_binary(int co_ordinates[8], unsigned int* buff)
 233:final_with_print.c **** {  
 973              		.loc 1 233 0
 974              		.cfi_startproc
 975 0b10 55       		pushq	%rbp
 976              		.cfi_def_cfa_offset 16
 977              		.cfi_offset 6, -16
 978 0b11 4889E5   		movq	%rsp, %rbp
 979              		.cfi_def_cfa_register 6
 980 0b14 48897DE8 		movq	%rdi, -24(%rbp)
 981 0b18 488975E0 		movq	%rsi, -32(%rbp)
 234:final_with_print.c **** 	int arb = 0;
 982              		.loc 1 234 0
 983 0b1c C745FC00 		movl	$0, -4(%rbp)
 983      000000
 235:final_with_print.c **** 	int i = 7;
 984              		.loc 1 235 0
 985 0b23 C745F807 		movl	$7, -8(%rbp)
 985      000000
 236:final_with_print.c **** 	while(buff[0]!=0)
 986              		.loc 1 236 0
 987 0b2a EB39     		jmp	.L57
 988              	.L58:
 237:final_with_print.c **** 	{  //printf("%s\n", "Running");
 238:final_with_print.c **** arb = buff[0] % 2;
 989              		.loc 1 238 0
 990 0b2c 488B45E0 		movq	-32(%rbp), %rax
 991 0b30 8B00     		movl	(%rax), %eax
 992 0b32 83E001   		andl	$1, %eax
 993 0b35 8945FC   		movl	%eax, -4(%rbp)
 239:final_with_print.c **** buff[0] = buff[0]/2;
 994              		.loc 1 239 0
 995 0b38 488B45E0 		movq	-32(%rbp), %rax
 996 0b3c 8B00     		movl	(%rax), %eax
 997 0b3e D1E8     		shrl	%eax
 998 0b40 89C2     		movl	%eax, %edx
 999 0b42 488B45E0 		movq	-32(%rbp), %rax
 1000 0b46 8910     		movl	%edx, (%rax)
 240:final_with_print.c **** co_ordinates[i] = arb;
 1001              		.loc 1 240 0
 1002 0b48 8B45F8   		movl	-8(%rbp), %eax
 1003 0b4b 4898     		cltq
 1004 0b4d 488D1485 		leaq	0(,%rax,4), %rdx
 1004      00000000 
 1005 0b55 488B45E8 		movq	-24(%rbp), %rax
 1006 0b59 4801C2   		addq	%rax, %rdx
 1007 0b5c 8B45FC   		movl	-4(%rbp), %eax
 1008 0b5f 8902     		movl	%eax, (%rdx)
 241:final_with_print.c **** i--;	
 1009              		.loc 1 241 0
 1010 0b61 836DF801 		subl	$1, -8(%rbp)
 1011              	.L57:
 236:final_with_print.c **** 	{  //printf("%s\n", "Running");
 1012              		.loc 1 236 0
 1013 0b65 488B45E0 		movq	-32(%rbp), %rax
 1014 0b69 8B00     		movl	(%rax), %eax
 1015 0b6b 85C0     		testl	%eax, %eax
 1016 0b6d 75BD     		jne	.L58
 242:final_with_print.c **** }
 243:final_with_print.c **** }
 1017              		.loc 1 243 0
 1018 0b6f 90       		nop
 1019 0b70 5D       		popq	%rbp
 1020              		.cfi_def_cfa 7, 8
 1021 0b71 C3       		ret
 1022              		.cfi_endproc
 1023              	.LFE11:
 1025              		.section	.rodata
 1026              	.LC1:
 1027 0000 4572726F 		.string	"Error, not Running"
 1027      722C206E 
 1027      6F742052 
 1027      756E6E69 
 1027      6E6700
 1028              	.LC2:
 1029 0013 54686520 		.string	"The x and y"
 1029      7820616E 
 1029      64207900 
 1030              	.LC3:
 1031 001f 2025642C 		.string	" %d,%d,%d,%d,%d"
 1031      25642C25 
 1031      642C2564 
 1031      2C256400 
 1032 002f 00       		.align 16
 1033              	.LC0:
 1034 0030 303030   		.ascii	"000"
 1035 0033 303031   		.ascii	"001"
 1036 0036 303130   		.ascii	"010"
 1037 0039 303131   		.ascii	"011"
 1038 003c 313030   		.ascii	"100"
 1039 003f 313031   		.ascii	"101"
 1040 0042 313130   		.ascii	"110"
 1041 0045 313131   		.ascii	"111"
 1042              		.text
 1043              		.globl	print
 1045              	print:
 1046              	.LFB12:
 244:final_with_print.c **** 
 245:final_with_print.c **** void print(int x_cord, int y_cord, int final_arr[8][8], FILE * fp)
 246:final_with_print.c **** {
 1047              		.loc 1 246 0
 1048              		.cfi_startproc
 1049 0b72 55       		pushq	%rbp
 1050              		.cfi_def_cfa_offset 16
 1051              		.cfi_offset 6, -16
 1052 0b73 4889E5   		movq	%rsp, %rbp
 1053              		.cfi_def_cfa_register 6
 1054 0b76 4881EC20 		subq	$288, %rsp
 1054      010000
 1055 0b7d 89BDFCFE 		movl	%edi, -260(%rbp)
 1055      FFFF
 1056 0b83 89B5F8FE 		movl	%esi, -264(%rbp)
 1056      FFFF
 1057 0b89 488995F0 		movq	%rdx, -272(%rbp)
 1057      FEFFFF
 1058 0b90 48898DE8 		movq	%rcx, -280(%rbp)
 1058      FEFFFF
 1059              		.loc 1 246 0
 1060 0b97 64488B04 		movq	%fs:40, %rax
 1060      25280000 
 1060      00
 1061 0ba0 488945F8 		movq	%rax, -8(%rbp)
 1062 0ba4 31C0     		xorl	%eax, %eax
 247:final_with_print.c **** 
 248:final_with_print.c **** 	int arr[8][5];
 249:final_with_print.c **** 	int count = 0;
 1063              		.loc 1 249 0
 1064 0ba6 C78514FF 		movl	$0, -236(%rbp)
 1064      FFFF0000 
 1064      0000
 250:final_with_print.c **** 	//printf("%s\n", "The x and y ");
 251:final_with_print.c **** 
 252:final_with_print.c **** 	char conversion[8][3] = {"000","001","010","011","100","101","110","111"};
 1065              		.loc 1 252 0
 1066 0bb0 488B0500 		movq	.LC0(%rip), %rax
 1066      000000
 1067 0bb7 48898530 		movq	%rax, -208(%rbp)
 1067      FFFFFF
 1068 0bbe 488B0500 		movq	.LC0+8(%rip), %rax
 1068      000000
 1069 0bc5 48898538 		movq	%rax, -200(%rbp)
 1069      FFFFFF
 1070 0bcc 488B0500 		movq	.LC0+16(%rip), %rax
 1070      000000
 1071 0bd3 48898540 		movq	%rax, -192(%rbp)
 1071      FFFFFF
 1072              	.LBB19:
 253:final_with_print.c **** 
 254:final_with_print.c **** 	for (int i = 0; i < 8; i++)
 1073              		.loc 1 254 0
 1074 0bda C78518FF 		movl	$0, -232(%rbp)
 1074      FFFF0000 
 1074      0000
 1075 0be4 E9E50000 		jmp	.L60
 1075      00
 1076              	.L61:
 255:final_with_print.c **** 	{
 256:final_with_print.c **** 		arr[i][0] = -1;
 1077              		.loc 1 256 0 discriminator 3
 1078 0be9 8B8518FF 		movl	-232(%rbp), %eax
 1078      FFFF
 1079 0bef 4863D0   		movslq	%eax, %rdx
 1080 0bf2 4889D0   		movq	%rdx, %rax
 1081 0bf5 48C1E002 		salq	$2, %rax
 1082 0bf9 4801D0   		addq	%rdx, %rax
 1083 0bfc 48C1E002 		salq	$2, %rax
 1084 0c00 4801E8   		addq	%rbp, %rax
 1085 0c03 482DB000 		subq	$176, %rax
 1085      0000
 1086 0c09 C700FFFF 		movl	$-1, (%rax)
 1086      FFFF
 257:final_with_print.c **** 		arr[i][1] = -1;
 1087              		.loc 1 257 0 discriminator 3
 1088 0c0f 8B8518FF 		movl	-232(%rbp), %eax
 1088      FFFF
 1089 0c15 4863D0   		movslq	%eax, %rdx
 1090 0c18 4889D0   		movq	%rdx, %rax
 1091 0c1b 48C1E002 		salq	$2, %rax
 1092 0c1f 4801D0   		addq	%rdx, %rax
 1093 0c22 48C1E002 		salq	$2, %rax
 1094 0c26 4801E8   		addq	%rbp, %rax
 1095 0c29 482DAC00 		subq	$172, %rax
 1095      0000
 1096 0c2f C700FFFF 		movl	$-1, (%rax)
 1096      FFFF
 258:final_with_print.c **** 		arr[i][2] = -1;
 1097              		.loc 1 258 0 discriminator 3
 1098 0c35 8B8518FF 		movl	-232(%rbp), %eax
 1098      FFFF
 1099 0c3b 4863D0   		movslq	%eax, %rdx
 1100 0c3e 4889D0   		movq	%rdx, %rax
 1101 0c41 48C1E002 		salq	$2, %rax
 1102 0c45 4801D0   		addq	%rdx, %rax
 1103 0c48 48C1E002 		salq	$2, %rax
 1104 0c4c 4801E8   		addq	%rbp, %rax
 1105 0c4f 482DA800 		subq	$168, %rax
 1105      0000
 1106 0c55 C700FFFF 		movl	$-1, (%rax)
 1106      FFFF
 259:final_with_print.c **** 		arr[i][3] = -1;
 1107              		.loc 1 259 0 discriminator 3
 1108 0c5b 8B8518FF 		movl	-232(%rbp), %eax
 1108      FFFF
 1109 0c61 4863D0   		movslq	%eax, %rdx
 1110 0c64 4889D0   		movq	%rdx, %rax
 1111 0c67 48C1E002 		salq	$2, %rax
 1112 0c6b 4801D0   		addq	%rdx, %rax
 1113 0c6e 48C1E002 		salq	$2, %rax
 1114 0c72 4801E8   		addq	%rbp, %rax
 1115 0c75 482DA400 		subq	$164, %rax
 1115      0000
 1116 0c7b C700FFFF 		movl	$-1, (%rax)
 1116      FFFF
 260:final_with_print.c **** 		arr[i][4] = -1;
 1117              		.loc 1 260 0 discriminator 3
 1118 0c81 8B8518FF 		movl	-232(%rbp), %eax
 1118      FFFF
 1119 0c87 4863D0   		movslq	%eax, %rdx
 1120 0c8a 4889D0   		movq	%rdx, %rax
 1121 0c8d 48C1E002 		salq	$2, %rax
 1122 0c91 4801D0   		addq	%rdx, %rax
 1123 0c94 48C1E002 		salq	$2, %rax
 1124 0c98 4801E8   		addq	%rbp, %rax
 1125 0c9b 482DA000 		subq	$160, %rax
 1125      0000
 1126 0ca1 C700FFFF 		movl	$-1, (%rax)
 1126      FFFF
 261:final_with_print.c **** 		final_arr[i][7] = -1;
 1127              		.loc 1 261 0 discriminator 3
 1128 0ca7 8B8518FF 		movl	-232(%rbp), %eax
 1128      FFFF
 1129 0cad 4898     		cltq
 1130 0caf 48C1E005 		salq	$5, %rax
 1131 0cb3 4889C2   		movq	%rax, %rdx
 1132 0cb6 488B85F0 		movq	-272(%rbp), %rax
 1132      FEFFFF
 1133 0cbd 4801D0   		addq	%rdx, %rax
 1134 0cc0 C7401CFF 		movl	$-1, 28(%rax)
 1134      FFFFFF
 254:final_with_print.c **** 	{
 1135              		.loc 1 254 0 discriminator 3
 1136 0cc7 838518FF 		addl	$1, -232(%rbp)
 1136      FFFF01
 1137              	.L60:
 254:final_with_print.c **** 	{
 1138              		.loc 1 254 0 is_stmt 0 discriminator 1
 1139 0cce 83BD18FF 		cmpl	$7, -232(%rbp)
 1139      FFFF07
 1140 0cd5 0F8E0EFF 		jle	.L61
 1140      FFFF
 1141              	.LBE19:
 262:final_with_print.c **** 	}
 263:final_with_print.c **** 
 264:final_with_print.c **** 	if(fp == NULL)
 1142              		.loc 1 264 0 is_stmt 1
 1143 0cdb 4883BDE8 		cmpq	$0, -280(%rbp)
 1143      FEFFFF00 
 1144 0ce3 751E     		jne	.L62
 265:final_with_print.c **** 	{
 266:final_with_print.c **** 		fprintf(stderr, "Error, not Running" );
 1145              		.loc 1 266 0
 1146 0ce5 488B0500 		movq	stderr(%rip), %rax
 1146      000000
 1147 0cec 4889C1   		movq	%rax, %rcx
 1148 0cef BA120000 		movl	$18, %edx
 1148      00
 1149 0cf4 BE010000 		movl	$1, %esi
 1149      00
 1150 0cf9 BF000000 		movl	$.LC1, %edi
 1150      00
 1151 0cfe E8000000 		call	fwrite
 1151      00
 1152              	.L62:
 267:final_with_print.c **** 	}
 268:final_with_print.c **** 	int a,b,c,d,e;
 269:final_with_print.c **** 	printf("%s\n", "The x and y");
 1153              		.loc 1 269 0
 1154 0d03 BF000000 		movl	$.LC2, %edi
 1154      00
 1155 0d08 E8000000 		call	puts
 1155      00
 270:final_with_print.c **** 	while (fscanf(fp, " %d,%d,%d,%d,%d", &a, &b,&c,&d,&e) == 5) {
 1156              		.loc 1 270 0
 1157 0d0d E9F50000 		jmp	.L63
 1157      00
 1158              	.L64:
 271:final_with_print.c **** 
 272:final_with_print.c **** 		if(a==x_cord && b==y_cord)
 1159              		.loc 1 272 0
 1160 0d12 8B8500FF 		movl	-256(%rbp), %eax
 1160      FFFF
 1161 0d18 3B85FCFE 		cmpl	-260(%rbp), %eax
 1161      FFFF
 1162 0d1e 0F85E300 		jne	.L63
 1162      0000
 1163              		.loc 1 272 0 is_stmt 0 discriminator 1
 1164 0d24 8B8504FF 		movl	-252(%rbp), %eax
 1164      FFFF
 1165 0d2a 3B85F8FE 		cmpl	-264(%rbp), %eax
 1165      FFFF
 1166 0d30 0F85D100 		jne	.L63
 1166      0000
 273:final_with_print.c **** 		{
 274:final_with_print.c **** 			arr[c][0] = x_cord;
 1167              		.loc 1 274 0 is_stmt 1
 1168 0d36 8B8508FF 		movl	-248(%rbp), %eax
 1168      FFFF
 1169 0d3c 4863D0   		movslq	%eax, %rdx
 1170 0d3f 4889D0   		movq	%rdx, %rax
 1171 0d42 48C1E002 		salq	$2, %rax
 1172 0d46 4801D0   		addq	%rdx, %rax
 1173 0d49 48C1E002 		salq	$2, %rax
 1174 0d4d 4801E8   		addq	%rbp, %rax
 1175 0d50 488D9050 		leaq	-176(%rax), %rdx
 1175      FFFFFF
 1176 0d57 8B85FCFE 		movl	-260(%rbp), %eax
 1176      FFFF
 1177 0d5d 8902     		movl	%eax, (%rdx)
 275:final_with_print.c **** 			arr[c][1] = y_cord;
 1178              		.loc 1 275 0
 1179 0d5f 8B8508FF 		movl	-248(%rbp), %eax
 1179      FFFF
 1180 0d65 4863D0   		movslq	%eax, %rdx
 1181 0d68 4889D0   		movq	%rdx, %rax
 1182 0d6b 48C1E002 		salq	$2, %rax
 1183 0d6f 4801D0   		addq	%rdx, %rax
 1184 0d72 48C1E002 		salq	$2, %rax
 1185 0d76 4801E8   		addq	%rbp, %rax
 1186 0d79 488D9054 		leaq	-172(%rax), %rdx
 1186      FFFFFF
 1187 0d80 8B85F8FE 		movl	-264(%rbp), %eax
 1187      FFFF
 1188 0d86 8902     		movl	%eax, (%rdx)
 276:final_with_print.c **** 			arr[c][2] = c;
 1189              		.loc 1 276 0
 1190 0d88 8B8508FF 		movl	-248(%rbp), %eax
 1190      FFFF
 1191 0d8e 8B8D08FF 		movl	-248(%rbp), %ecx
 1191      FFFF
 1192 0d94 4863D0   		movslq	%eax, %rdx
 1193 0d97 4889D0   		movq	%rdx, %rax
 1194 0d9a 48C1E002 		salq	$2, %rax
 1195 0d9e 4801D0   		addq	%rdx, %rax
 1196 0da1 48C1E002 		salq	$2, %rax
 1197 0da5 4801E8   		addq	%rbp, %rax
 1198 0da8 482DA800 		subq	$168, %rax
 1198      0000
 1199 0dae 8908     		movl	%ecx, (%rax)
 277:final_with_print.c **** 			arr[c][3] = d;
 1200              		.loc 1 277 0
 1201 0db0 8B8508FF 		movl	-248(%rbp), %eax
 1201      FFFF
 1202 0db6 8B8D0CFF 		movl	-244(%rbp), %ecx
 1202      FFFF
 1203 0dbc 4863D0   		movslq	%eax, %rdx
 1204 0dbf 4889D0   		movq	%rdx, %rax
 1205 0dc2 48C1E002 		salq	$2, %rax
 1206 0dc6 4801D0   		addq	%rdx, %rax
 1207 0dc9 48C1E002 		salq	$2, %rax
 1208 0dcd 4801E8   		addq	%rbp, %rax
 1209 0dd0 482DA400 		subq	$164, %rax
 1209      0000
 1210 0dd6 8908     		movl	%ecx, (%rax)
 278:final_with_print.c **** 			arr[c][4] = e;
 1211              		.loc 1 278 0
 1212 0dd8 8B8508FF 		movl	-248(%rbp), %eax
 1212      FFFF
 1213 0dde 8B8D10FF 		movl	-240(%rbp), %ecx
 1213      FFFF
 1214 0de4 4863D0   		movslq	%eax, %rdx
 1215 0de7 4889D0   		movq	%rdx, %rax
 1216 0dea 48C1E002 		salq	$2, %rax
 1217 0dee 4801D0   		addq	%rdx, %rax
 1218 0df1 48C1E002 		salq	$2, %rax
 1219 0df5 4801E8   		addq	%rbp, %rax
 1220 0df8 482DA000 		subq	$160, %rax
 1220      0000
 1221 0dfe 8908     		movl	%ecx, (%rax)
 279:final_with_print.c **** 			count++;
 1222              		.loc 1 279 0
 1223 0e00 838514FF 		addl	$1, -236(%rbp)
 1223      FFFF01
 1224              	.L63:
 270:final_with_print.c **** 
 1225              		.loc 1 270 0
 1226 0e07 4C8D850C 		leaq	-244(%rbp), %r8
 1226      FFFFFF
 1227 0e0e 488DBD08 		leaq	-248(%rbp), %rdi
 1227      FFFFFF
 1228 0e15 488D8D04 		leaq	-252(%rbp), %rcx
 1228      FFFFFF
 1229 0e1c 488D9500 		leaq	-256(%rbp), %rdx
 1229      FFFFFF
 1230 0e23 488B85E8 		movq	-280(%rbp), %rax
 1230      FEFFFF
 1231 0e2a 4883EC08 		subq	$8, %rsp
 1232 0e2e 488DB510 		leaq	-240(%rbp), %rsi
 1232      FFFFFF
 1233 0e35 56       		pushq	%rsi
 1234 0e36 4D89C1   		movq	%r8, %r9
 1235 0e39 4989F8   		movq	%rdi, %r8
 1236 0e3c BE000000 		movl	$.LC3, %esi
 1236      00
 1237 0e41 4889C7   		movq	%rax, %rdi
 1238 0e44 B8000000 		movl	$0, %eax
 1238      00
 1239 0e49 E8000000 		call	__isoc99_fscanf
 1239      00
 1240 0e4e 4883C410 		addq	$16, %rsp
 1241 0e52 83F805   		cmpl	$5, %eax
 1242 0e55 0F84B7FE 		je	.L64
 1242      FFFF
 1243              	.LBB20:
 280:final_with_print.c **** 
 281:final_with_print.c **** 		}
 282:final_with_print.c **** 
 283:final_with_print.c **** 	}
 284:final_with_print.c **** 
 285:final_with_print.c **** 	for (int i = 0; i < 8; i++)
 1244              		.loc 1 285 0
 1245 0e5b C7851CFF 		movl	$0, -228(%rbp)
 1245      FFFF0000 
 1245      0000
 1246 0e65 E9C50100 		jmp	.L65
 1246      00
 1247              	.L67:
 286:final_with_print.c **** 	{
 287:final_with_print.c **** 		if(arr[i][0] == -1 && arr[i][1] == -1 && arr[i][2] == -1 && arr[i][3] == -1 && arr[i][4] == -1)
 1248              		.loc 1 287 0
 1249 0e6a 8B851CFF 		movl	-228(%rbp), %eax
 1249      FFFF
 1250 0e70 4863D0   		movslq	%eax, %rdx
 1251 0e73 4889D0   		movq	%rdx, %rax
 1252 0e76 48C1E002 		salq	$2, %rax
 1253 0e7a 4801D0   		addq	%rdx, %rax
 1254 0e7d 48C1E002 		salq	$2, %rax
 1255 0e81 4801E8   		addq	%rbp, %rax
 1256 0e84 482DB000 		subq	$176, %rax
 1256      0000
 1257 0e8a 8B00     		movl	(%rax), %eax
 1258 0e8c 83F8FF   		cmpl	$-1, %eax
 1259 0e8f 0F859301 		jne	.L66
 1259      0000
 1260              		.loc 1 287 0 is_stmt 0 discriminator 1
 1261 0e95 8B851CFF 		movl	-228(%rbp), %eax
 1261      FFFF
 1262 0e9b 4863D0   		movslq	%eax, %rdx
 1263 0e9e 4889D0   		movq	%rdx, %rax
 1264 0ea1 48C1E002 		salq	$2, %rax
 1265 0ea5 4801D0   		addq	%rdx, %rax
 1266 0ea8 48C1E002 		salq	$2, %rax
 1267 0eac 4801E8   		addq	%rbp, %rax
 1268 0eaf 482DAC00 		subq	$172, %rax
 1268      0000
 1269 0eb5 8B00     		movl	(%rax), %eax
 1270 0eb7 83F8FF   		cmpl	$-1, %eax
 1271 0eba 0F856801 		jne	.L66
 1271      0000
 1272              		.loc 1 287 0 discriminator 2
 1273 0ec0 8B851CFF 		movl	-228(%rbp), %eax
 1273      FFFF
 1274 0ec6 4863D0   		movslq	%eax, %rdx
 1275 0ec9 4889D0   		movq	%rdx, %rax
 1276 0ecc 48C1E002 		salq	$2, %rax
 1277 0ed0 4801D0   		addq	%rdx, %rax
 1278 0ed3 48C1E002 		salq	$2, %rax
 1279 0ed7 4801E8   		addq	%rbp, %rax
 1280 0eda 482DA800 		subq	$168, %rax
 1280      0000
 1281 0ee0 8B00     		movl	(%rax), %eax
 1282 0ee2 83F8FF   		cmpl	$-1, %eax
 1283 0ee5 0F853D01 		jne	.L66
 1283      0000
 1284              		.loc 1 287 0 discriminator 3
 1285 0eeb 8B851CFF 		movl	-228(%rbp), %eax
 1285      FFFF
 1286 0ef1 4863D0   		movslq	%eax, %rdx
 1287 0ef4 4889D0   		movq	%rdx, %rax
 1288 0ef7 48C1E002 		salq	$2, %rax
 1289 0efb 4801D0   		addq	%rdx, %rax
 1290 0efe 48C1E002 		salq	$2, %rax
 1291 0f02 4801E8   		addq	%rbp, %rax
 1292 0f05 482DA400 		subq	$164, %rax
 1292      0000
 1293 0f0b 8B00     		movl	(%rax), %eax
 1294 0f0d 83F8FF   		cmpl	$-1, %eax
 1295 0f10 0F851201 		jne	.L66
 1295      0000
 1296              		.loc 1 287 0 discriminator 4
 1297 0f16 8B851CFF 		movl	-228(%rbp), %eax
 1297      FFFF
 1298 0f1c 4863D0   		movslq	%eax, %rdx
 1299 0f1f 4889D0   		movq	%rdx, %rax
 1300 0f22 48C1E002 		salq	$2, %rax
 1301 0f26 4801D0   		addq	%rdx, %rax
 1302 0f29 48C1E002 		salq	$2, %rax
 1303 0f2d 4801E8   		addq	%rbp, %rax
 1304 0f30 482DA000 		subq	$160, %rax
 1304      0000
 1305 0f36 8B00     		movl	(%rax), %eax
 1306 0f38 83F8FF   		cmpl	$-1, %eax
 1307 0f3b 0F85E700 		jne	.L66
 1307      0000
 288:final_with_print.c **** 		{
 289:final_with_print.c **** 			arr[i][0] = x_cord;
 1308              		.loc 1 289 0 is_stmt 1
 1309 0f41 8B851CFF 		movl	-228(%rbp), %eax
 1309      FFFF
 1310 0f47 4863D0   		movslq	%eax, %rdx
 1311 0f4a 4889D0   		movq	%rdx, %rax
 1312 0f4d 48C1E002 		salq	$2, %rax
 1313 0f51 4801D0   		addq	%rdx, %rax
 1314 0f54 48C1E002 		salq	$2, %rax
 1315 0f58 4801E8   		addq	%rbp, %rax
 1316 0f5b 488D9050 		leaq	-176(%rax), %rdx
 1316      FFFFFF
 1317 0f62 8B85FCFE 		movl	-260(%rbp), %eax
 1317      FFFF
 1318 0f68 8902     		movl	%eax, (%rdx)
 290:final_with_print.c **** 			arr[i][1] = y_cord;
 1319              		.loc 1 290 0
 1320 0f6a 8B851CFF 		movl	-228(%rbp), %eax
 1320      FFFF
 1321 0f70 4863D0   		movslq	%eax, %rdx
 1322 0f73 4889D0   		movq	%rdx, %rax
 1323 0f76 48C1E002 		salq	$2, %rax
 1324 0f7a 4801D0   		addq	%rdx, %rax
 1325 0f7d 48C1E002 		salq	$2, %rax
 1326 0f81 4801E8   		addq	%rbp, %rax
 1327 0f84 488D9054 		leaq	-172(%rax), %rdx
 1327      FFFFFF
 1328 0f8b 8B85F8FE 		movl	-264(%rbp), %eax
 1328      FFFF
 1329 0f91 8902     		movl	%eax, (%rdx)
 291:final_with_print.c **** 			arr[i][2] = i;
 1330              		.loc 1 291 0
 1331 0f93 8B851CFF 		movl	-228(%rbp), %eax
 1331      FFFF
 1332 0f99 4863D0   		movslq	%eax, %rdx
 1333 0f9c 4889D0   		movq	%rdx, %rax
 1334 0f9f 48C1E002 		salq	$2, %rax
 1335 0fa3 4801D0   		addq	%rdx, %rax
 1336 0fa6 48C1E002 		salq	$2, %rax
 1337 0faa 4801E8   		addq	%rbp, %rax
 1338 0fad 488D9058 		leaq	-168(%rax), %rdx
 1338      FFFFFF
 1339 0fb4 8B851CFF 		movl	-228(%rbp), %eax
 1339      FFFF
 1340 0fba 8902     		movl	%eax, (%rdx)
 292:final_with_print.c **** 			arr[i][3] = 0;
 1341              		.loc 1 292 0
 1342 0fbc 8B851CFF 		movl	-228(%rbp), %eax
 1342      FFFF
 1343 0fc2 4863D0   		movslq	%eax, %rdx
 1344 0fc5 4889D0   		movq	%rdx, %rax
 1345 0fc8 48C1E002 		salq	$2, %rax
 1346 0fcc 4801D0   		addq	%rdx, %rax
 1347 0fcf 48C1E002 		salq	$2, %rax
 1348 0fd3 4801E8   		addq	%rbp, %rax
 1349 0fd6 482DA400 		subq	$164, %rax
 1349      0000
 1350 0fdc C7000000 		movl	$0, (%rax)
 1350      0000
 293:final_with_print.c **** 			arr[i][4] = 0;
 1351              		.loc 1 293 0
 1352 0fe2 8B851CFF 		movl	-228(%rbp), %eax
 1352      FFFF
 1353 0fe8 4863D0   		movslq	%eax, %rdx
 1354 0feb 4889D0   		movq	%rdx, %rax
 1355 0fee 48C1E002 		salq	$2, %rax
 1356 0ff2 4801D0   		addq	%rdx, %rax
 1357 0ff5 48C1E002 		salq	$2, %rax
 1358 0ff9 4801E8   		addq	%rbp, %rax
 1359 0ffc 482DA000 		subq	$160, %rax
 1359      0000
 1360 1002 C7000000 		movl	$0, (%rax)
 1360      0000
 294:final_with_print.c **** 			final_arr[i][7] = 0;
 1361              		.loc 1 294 0
 1362 1008 8B851CFF 		movl	-228(%rbp), %eax
 1362      FFFF
 1363 100e 4898     		cltq
 1364 1010 48C1E005 		salq	$5, %rax
 1365 1014 4889C2   		movq	%rax, %rdx
 1366 1017 488B85F0 		movq	-272(%rbp), %rax
 1366      FEFFFF
 1367 101e 4801D0   		addq	%rdx, %rax
 1368 1021 C7401C00 		movl	$0, 28(%rax)
 1368      000000
 1369              	.L66:
 285:final_with_print.c **** 	{
 1370              		.loc 1 285 0 discriminator 2
 1371 1028 83851CFF 		addl	$1, -228(%rbp)
 1371      FFFF01
 1372              	.L65:
 285:final_with_print.c **** 	{
 1373              		.loc 1 285 0 is_stmt 0 discriminator 1
 1374 102f 83BD1CFF 		cmpl	$7, -228(%rbp)
 1374      FFFF07
 1375 1036 0F8E2EFE 		jle	.L67
 1375      FFFF
 1376              	.LBE20:
 1377              	.LBB21:
 295:final_with_print.c **** 		}
 296:final_with_print.c **** 	}
 297:final_with_print.c **** 
 298:final_with_print.c **** 	for (int i = 0; i < 8; i++)
 1378              		.loc 1 298 0 is_stmt 1
 1379 103c C78520FF 		movl	$0, -224(%rbp)
 1379      FFFF0000 
 1379      0000
 1380 1046 E9870200 		jmp	.L68
 1380      00
 1381              	.L71:
 1382              	.LBB22:
 299:final_with_print.c **** 	{
 300:final_with_print.c **** 		int next_signal = arr[i][4];
 1383              		.loc 1 300 0
 1384 104b 8B8520FF 		movl	-224(%rbp), %eax
 1384      FFFF
 1385 1051 4863D0   		movslq	%eax, %rdx
 1386 1054 4889D0   		movq	%rdx, %rax
 1387 1057 48C1E002 		salq	$2, %rax
 1388 105b 4801D0   		addq	%rdx, %rax
 1389 105e 48C1E002 		salq	$2, %rax
 1390 1062 4801E8   		addq	%rbp, %rax
 1391 1065 482DA000 		subq	$160, %rax
 1391      0000
 1392 106b 8B00     		movl	(%rax), %eax
 1393 106d 898524FF 		movl	%eax, -220(%rbp)
 1393      FFFF
 301:final_with_print.c **** 		int track_ok = arr[i][3];
 1394              		.loc 1 301 0
 1395 1073 8B8520FF 		movl	-224(%rbp), %eax
 1395      FFFF
 1396 1079 4863D0   		movslq	%eax, %rdx
 1397 107c 4889D0   		movq	%rdx, %rax
 1398 107f 48C1E002 		salq	$2, %rax
 1399 1083 4801D0   		addq	%rdx, %rax
 1400 1086 48C1E002 		salq	$2, %rax
 1401 108a 4801E8   		addq	%rbp, %rax
 1402 108d 482DA400 		subq	$164, %rax
 1402      0000
 1403 1093 8B00     		movl	(%rax), %eax
 1404 1095 898528FF 		movl	%eax, -216(%rbp)
 1404      FFFF
 302:final_with_print.c **** 		int direction = arr[i][2];
 1405              		.loc 1 302 0
 1406 109b 8B8520FF 		movl	-224(%rbp), %eax
 1406      FFFF
 1407 10a1 4863D0   		movslq	%eax, %rdx
 1408 10a4 4889D0   		movq	%rdx, %rax
 1409 10a7 48C1E002 		salq	$2, %rax
 1410 10ab 4801D0   		addq	%rdx, %rax
 1411 10ae 48C1E002 		salq	$2, %rax
 1412 10b2 4801E8   		addq	%rbp, %rax
 1413 10b5 482DA800 		subq	$168, %rax
 1413      0000
 1414 10bb 8B00     		movl	(%rax), %eax
 1415 10bd 89852CFF 		movl	%eax, -212(%rbp)
 1415      FFFF
 303:final_with_print.c **** 
 304:final_with_print.c **** 		final_arr[i][0] = conversion[next_signal][2] -48;
 1416              		.loc 1 304 0
 1417 10c3 8B8520FF 		movl	-224(%rbp), %eax
 1417      FFFF
 1418 10c9 4898     		cltq
 1419 10cb 48C1E005 		salq	$5, %rax
 1420 10cf 4889C2   		movq	%rax, %rdx
 1421 10d2 488B85F0 		movq	-272(%rbp), %rax
 1421      FEFFFF
 1422 10d9 488D0C02 		leaq	(%rdx,%rax), %rcx
 1423 10dd 8B8524FF 		movl	-220(%rbp), %eax
 1423      FFFF
 1424 10e3 4863D0   		movslq	%eax, %rdx
 1425 10e6 4889D0   		movq	%rdx, %rax
 1426 10e9 4801C0   		addq	%rax, %rax
 1427 10ec 4801D0   		addq	%rdx, %rax
 1428 10ef 4801E8   		addq	%rbp, %rax
 1429 10f2 482DCE00 		subq	$206, %rax
 1429      0000
 1430 10f8 0FB600   		movzbl	(%rax), %eax
 1431 10fb 0FBEC0   		movsbl	%al, %eax
 1432 10fe 83E830   		subl	$48, %eax
 1433 1101 8901     		movl	%eax, (%rcx)
 305:final_with_print.c **** 		final_arr[i][1] = conversion[next_signal][1] -48;
 1434              		.loc 1 305 0
 1435 1103 8B8520FF 		movl	-224(%rbp), %eax
 1435      FFFF
 1436 1109 4898     		cltq
 1437 110b 48C1E005 		salq	$5, %rax
 1438 110f 4889C2   		movq	%rax, %rdx
 1439 1112 488B85F0 		movq	-272(%rbp), %rax
 1439      FEFFFF
 1440 1119 488D0C02 		leaq	(%rdx,%rax), %rcx
 1441 111d 8B8524FF 		movl	-220(%rbp), %eax
 1441      FFFF
 1442 1123 4863D0   		movslq	%eax, %rdx
 1443 1126 4889D0   		movq	%rdx, %rax
 1444 1129 4801C0   		addq	%rax, %rax
 1445 112c 4801D0   		addq	%rdx, %rax
 1446 112f 4801E8   		addq	%rbp, %rax
 1447 1132 482DCF00 		subq	$207, %rax
 1447      0000
 1448 1138 0FB600   		movzbl	(%rax), %eax
 1449 113b 0FBEC0   		movsbl	%al, %eax
 1450 113e 83E830   		subl	$48, %eax
 1451 1141 894104   		movl	%eax, 4(%rcx)
 306:final_with_print.c **** 		final_arr[i][2] = conversion[next_signal][0] -48;
 1452              		.loc 1 306 0
 1453 1144 8B8520FF 		movl	-224(%rbp), %eax
 1453      FFFF
 1454 114a 4898     		cltq
 1455 114c 48C1E005 		salq	$5, %rax
 1456 1150 4889C2   		movq	%rax, %rdx
 1457 1153 488B85F0 		movq	-272(%rbp), %rax
 1457      FEFFFF
 1458 115a 488D0C02 		leaq	(%rdx,%rax), %rcx
 1459 115e 8B8524FF 		movl	-220(%rbp), %eax
 1459      FFFF
 1460 1164 4863D0   		movslq	%eax, %rdx
 1461 1167 4889D0   		movq	%rdx, %rax
 1462 116a 4801C0   		addq	%rax, %rax
 1463 116d 4801D0   		addq	%rdx, %rax
 1464 1170 4801E8   		addq	%rbp, %rax
 1465 1173 482DD000 		subq	$208, %rax
 1465      0000
 1466 1179 0FB600   		movzbl	(%rax), %eax
 1467 117c 0FBEC0   		movsbl	%al, %eax
 1468 117f 83E830   		subl	$48, %eax
 1469 1182 894108   		movl	%eax, 8(%rcx)
 307:final_with_print.c **** 
 308:final_with_print.c **** 		final_arr[i][3] = conversion[direction][2] -48;
 1470              		.loc 1 308 0
 1471 1185 8B8520FF 		movl	-224(%rbp), %eax
 1471      FFFF
 1472 118b 4898     		cltq
 1473 118d 48C1E005 		salq	$5, %rax
 1474 1191 4889C2   		movq	%rax, %rdx
 1475 1194 488B85F0 		movq	-272(%rbp), %rax
 1475      FEFFFF
 1476 119b 488D0C02 		leaq	(%rdx,%rax), %rcx
 1477 119f 8B852CFF 		movl	-212(%rbp), %eax
 1477      FFFF
 1478 11a5 4863D0   		movslq	%eax, %rdx
 1479 11a8 4889D0   		movq	%rdx, %rax
 1480 11ab 4801C0   		addq	%rax, %rax
 1481 11ae 4801D0   		addq	%rdx, %rax
 1482 11b1 4801E8   		addq	%rbp, %rax
 1483 11b4 482DCE00 		subq	$206, %rax
 1483      0000
 1484 11ba 0FB600   		movzbl	(%rax), %eax
 1485 11bd 0FBEC0   		movsbl	%al, %eax
 1486 11c0 83E830   		subl	$48, %eax
 1487 11c3 89410C   		movl	%eax, 12(%rcx)
 309:final_with_print.c **** 		final_arr[i][4] = conversion[direction][1] -48;
 1488              		.loc 1 309 0
 1489 11c6 8B8520FF 		movl	-224(%rbp), %eax
 1489      FFFF
 1490 11cc 4898     		cltq
 1491 11ce 48C1E005 		salq	$5, %rax
 1492 11d2 4889C2   		movq	%rax, %rdx
 1493 11d5 488B85F0 		movq	-272(%rbp), %rax
 1493      FEFFFF
 1494 11dc 488D0C02 		leaq	(%rdx,%rax), %rcx
 1495 11e0 8B852CFF 		movl	-212(%rbp), %eax
 1495      FFFF
 1496 11e6 4863D0   		movslq	%eax, %rdx
 1497 11e9 4889D0   		movq	%rdx, %rax
 1498 11ec 4801C0   		addq	%rax, %rax
 1499 11ef 4801D0   		addq	%rdx, %rax
 1500 11f2 4801E8   		addq	%rbp, %rax
 1501 11f5 482DCF00 		subq	$207, %rax
 1501      0000
 1502 11fb 0FB600   		movzbl	(%rax), %eax
 1503 11fe 0FBEC0   		movsbl	%al, %eax
 1504 1201 83E830   		subl	$48, %eax
 1505 1204 894110   		movl	%eax, 16(%rcx)
 310:final_with_print.c **** 		final_arr[i][5] = conversion[direction][0] -48;
 1506              		.loc 1 310 0
 1507 1207 8B8520FF 		movl	-224(%rbp), %eax
 1507      FFFF
 1508 120d 4898     		cltq
 1509 120f 48C1E005 		salq	$5, %rax
 1510 1213 4889C2   		movq	%rax, %rdx
 1511 1216 488B85F0 		movq	-272(%rbp), %rax
 1511      FEFFFF
 1512 121d 488D0C02 		leaq	(%rdx,%rax), %rcx
 1513 1221 8B852CFF 		movl	-212(%rbp), %eax
 1513      FFFF
 1514 1227 4863D0   		movslq	%eax, %rdx
 1515 122a 4889D0   		movq	%rdx, %rax
 1516 122d 4801C0   		addq	%rax, %rax
 1517 1230 4801D0   		addq	%rdx, %rax
 1518 1233 4801E8   		addq	%rbp, %rax
 1519 1236 482DD000 		subq	$208, %rax
 1519      0000
 1520 123c 0FB600   		movzbl	(%rax), %eax
 1521 123f 0FBEC0   		movsbl	%al, %eax
 1522 1242 83E830   		subl	$48, %eax
 1523 1245 894114   		movl	%eax, 20(%rcx)
 311:final_with_print.c **** 
 312:final_with_print.c **** 		final_arr[i][6] = track_ok;
 1524              		.loc 1 312 0
 1525 1248 8B8520FF 		movl	-224(%rbp), %eax
 1525      FFFF
 1526 124e 4898     		cltq
 1527 1250 48C1E005 		salq	$5, %rax
 1528 1254 4889C2   		movq	%rax, %rdx
 1529 1257 488B85F0 		movq	-272(%rbp), %rax
 1529      FEFFFF
 1530 125e 4801C2   		addq	%rax, %rdx
 1531 1261 8B8528FF 		movl	-216(%rbp), %eax
 1531      FFFF
 1532 1267 894218   		movl	%eax, 24(%rdx)
 313:final_with_print.c **** 
 314:final_with_print.c **** 		if(final_arr[i][7] != 0 || final_arr[i][7] == -1)
 1533              		.loc 1 314 0
 1534 126a 8B8520FF 		movl	-224(%rbp), %eax
 1534      FFFF
 1535 1270 4898     		cltq
 1536 1272 48C1E005 		salq	$5, %rax
 1537 1276 4889C2   		movq	%rax, %rdx
 1538 1279 488B85F0 		movq	-272(%rbp), %rax
 1538      FEFFFF
 1539 1280 4801D0   		addq	%rdx, %rax
 1540 1283 8B401C   		movl	28(%rax), %eax
 1541 1286 85C0     		testl	%eax, %eax
 1542 1288 7521     		jne	.L69
 1543              		.loc 1 314 0 is_stmt 0 discriminator 1
 1544 128a 8B8520FF 		movl	-224(%rbp), %eax
 1544      FFFF
 1545 1290 4898     		cltq
 1546 1292 48C1E005 		salq	$5, %rax
 1547 1296 4889C2   		movq	%rax, %rdx
 1548 1299 488B85F0 		movq	-272(%rbp), %rax
 1548      FEFFFF
 1549 12a0 4801D0   		addq	%rdx, %rax
 1550 12a3 8B401C   		movl	28(%rax), %eax
 1551 12a6 83F8FF   		cmpl	$-1, %eax
 1552 12a9 7520     		jne	.L70
 1553              	.L69:
 315:final_with_print.c **** 		{
 316:final_with_print.c **** 			final_arr[i][7] = 1;
 1554              		.loc 1 316 0 is_stmt 1
 1555 12ab 8B8520FF 		movl	-224(%rbp), %eax
 1555      FFFF
 1556 12b1 4898     		cltq
 1557 12b3 48C1E005 		salq	$5, %rax
 1558 12b7 4889C2   		movq	%rax, %rdx
 1559 12ba 488B85F0 		movq	-272(%rbp), %rax
 1559      FEFFFF
 1560 12c1 4801D0   		addq	%rdx, %rax
 1561 12c4 C7401C01 		movl	$1, 28(%rax)
 1561      000000
 1562              	.L70:
 1563              	.LBE22:
 298:final_with_print.c **** 	{
 1564              		.loc 1 298 0 discriminator 2
 1565 12cb 838520FF 		addl	$1, -224(%rbp)
 1565      FFFF01
 1566              	.L68:
 298:final_with_print.c **** 	{
 1567              		.loc 1 298 0 is_stmt 0 discriminator 1
 1568 12d2 83BD20FF 		cmpl	$7, -224(%rbp)
 1568      FFFF07
 1569 12d9 0F8E6CFD 		jle	.L71
 1569      FFFF
 1570              	.LBE21:
 317:final_with_print.c **** 		}
 318:final_with_print.c **** 	}
 319:final_with_print.c **** 
 320:final_with_print.c **** }
 1571              		.loc 1 320 0 is_stmt 1
 1572 12df 90       		nop
 1573 12e0 488B45F8 		movq	-8(%rbp), %rax
 1574 12e4 64483304 		xorq	%fs:40, %rax
 1574      25280000 
 1574      00
 1575 12ed 7405     		je	.L72
 1576 12ef E8000000 		call	__stack_chk_fail
 1576      00
 1577              	.L72:
 1578 12f4 C9       		leave
 1579              		.cfi_def_cfa 7, 8
 1580 12f5 C3       		ret
 1581              		.cfi_endproc
 1582              	.LFE12:
 1584              		.section	.rodata
 1585              	.LC4:
 1586 0048 75696E74 		.string	"uint8"
 1586      3800
 1587              	.LC5:
 1588 004e 25730A20 		.string	"%s\n "
 1588      00
 1589              		.text
 1590              		.globl	uint8ToBin
 1592              	uint8ToBin:
 1593              	.LFB13:
 321:final_with_print.c **** 
 322:final_with_print.c **** void uint8ToBin(uint8 arr[], int rec[])
 323:final_with_print.c **** {
 1594              		.loc 1 323 0
 1595              		.cfi_startproc
 1596 12f6 55       		pushq	%rbp
 1597              		.cfi_def_cfa_offset 16
 1598              		.cfi_offset 6, -16
 1599 12f7 4889E5   		movq	%rsp, %rbp
 1600              		.cfi_def_cfa_register 6
 1601 12fa 4883EC20 		subq	$32, %rsp
 1602 12fe 48897DE8 		movq	%rdi, -24(%rbp)
 1603 1302 488975E0 		movq	%rsi, -32(%rbp)
 324:final_with_print.c **** 	printf("%s\n ", "uint8");
 1604              		.loc 1 324 0
 1605 1306 BE000000 		movl	$.LC4, %esi
 1605      00
 1606 130b BF000000 		movl	$.LC5, %edi
 1606      00
 1607 1310 B8000000 		movl	$0, %eax
 1607      00
 1608 1315 E8000000 		call	printf
 1608      00
 1609              	.LBB23:
 325:final_with_print.c **** 
 326:final_with_print.c **** 	for (int i = 0; i < 4; ++i)
 1610              		.loc 1 326 0
 1611 131a C745F800 		movl	$0, -8(%rbp)
 1611      000000
 1612 1321 EB5C     		jmp	.L74
 1613              	.L77:
 1614              	.LBB24:
 327:final_with_print.c **** 	{
 328:final_with_print.c **** 		uint8 tempssss= arr[i];
 1615              		.loc 1 328 0
 1616 1323 8B45F8   		movl	-8(%rbp), %eax
 1617 1326 4863D0   		movslq	%eax, %rdx
 1618 1329 488B45E8 		movq	-24(%rbp), %rax
 1619 132d 4801D0   		addq	%rdx, %rax
 1620 1330 0FB600   		movzbl	(%rax), %eax
 1621 1333 8845F7   		movb	%al, -9(%rbp)
 1622              	.LBB25:
 329:final_with_print.c **** 		for(int k=0;k<8;k++)
 1623              		.loc 1 329 0
 1624 1336 C745FC00 		movl	$0, -4(%rbp)
 1624      000000
 1625 133d EB36     		jmp	.L75
 1626              	.L76:
 330:final_with_print.c **** 		{
 331:final_with_print.c **** 			rec[8*i+k] =(int) (tempssss % 2);
 1627              		.loc 1 331 0 discriminator 3
 1628 133f 8B45F8   		movl	-8(%rbp), %eax
 1629 1342 8D14C500 		leal	0(,%rax,8), %edx
 1629      000000
 1630 1349 8B45FC   		movl	-4(%rbp), %eax
 1631 134c 01D0     		addl	%edx, %eax
 1632 134e 4898     		cltq
 1633 1350 488D1485 		leaq	0(,%rax,4), %rdx
 1633      00000000 
 1634 1358 488B45E0 		movq	-32(%rbp), %rax
 1635 135c 4801D0   		addq	%rdx, %rax
 1636 135f 0FB655F7 		movzbl	-9(%rbp), %edx
 1637 1363 83E201   		andl	$1, %edx
 1638 1366 8910     		movl	%edx, (%rax)
 332:final_with_print.c **** 			tempssss = tempssss/2;
 1639              		.loc 1 332 0 discriminator 3
 1640 1368 0FB645F7 		movzbl	-9(%rbp), %eax
 1641 136c D0E8     		shrb	%al
 1642 136e 8845F7   		movb	%al, -9(%rbp)
 329:final_with_print.c **** 		for(int k=0;k<8;k++)
 1643              		.loc 1 329 0 discriminator 3
 1644 1371 8345FC01 		addl	$1, -4(%rbp)
 1645              	.L75:
 329:final_with_print.c **** 		for(int k=0;k<8;k++)
 1646              		.loc 1 329 0 is_stmt 0 discriminator 1
 1647 1375 837DFC07 		cmpl	$7, -4(%rbp)
 1648 1379 7EC4     		jle	.L76
 1649              	.LBE25:
 1650              	.LBE24:
 326:final_with_print.c **** 	{
 1651              		.loc 1 326 0 is_stmt 1 discriminator 2
 1652 137b 8345F801 		addl	$1, -8(%rbp)
 1653              	.L74:
 326:final_with_print.c **** 	{
 1654              		.loc 1 326 0 is_stmt 0 discriminator 1
 1655 137f 837DF803 		cmpl	$3, -8(%rbp)
 1656 1383 7E9E     		jle	.L77
 1657              	.LBE23:
 333:final_with_print.c **** 		}
 334:final_with_print.c **** 	}
 335:final_with_print.c **** }
 1658              		.loc 1 335 0 is_stmt 1
 1659 1385 90       		nop
 1660 1386 C9       		leave
 1661              		.cfi_def_cfa 7, 8
 1662 1387 C3       		ret
 1663              		.cfi_endproc
 1664              	.LFE13:
 1666              		.section	.rodata
 1667              	.LC6:
 1668 0053 7200     		.string	"r"
 1669 0055 000000   		.align 8
 1670              	.LC7:
 1671 0058 2F686F6D 		.string	"/home/shubham/Desktop/track_data.csv"
 1671      652F7368 
 1671      75626861 
 1671      6D2F4465 
 1671      736B746F 
 1672              	.LC8:
 1673 007d 25642C25 		.string	"%d,%d,%d,%d,%d"
 1673      642C2564 
 1673      2C25642C 
 1673      256400
 1674              	.LC9:
 1675 008c 45786973 		.string	"Existing track_data"
 1675      74696E67 
 1675      20747261 
 1675      636B5F64 
 1675      61746100 
 1676              	.LC10:
 1677 00a0 25642000 		.string	"%d "
 1678              	.LC11:
 1679 00a4 7700     		.string	"w"
 1680              	.LC12:
 1681 00a6 25642C25 		.string	"%d,%d,%d,%d,%d\n"
 1681      642C2564 
 1681      2C25642C 
 1681      25640A00 
 1682              	.LC13:
 1683 00b6 55706461 		.string	"Updated track_data"
 1683      74656420 
 1683      74726163 
 1683      6B5F6461 
 1683      746100
 1684              		.text
 1685              		.globl	writecsv
 1687              	writecsv:
 1688              	.LFB14:
 336:final_with_print.c **** 
 337:final_with_print.c **** void writecsv(int x_cord, int y_cord, int ok, int direction, int next)
 338:final_with_print.c **** {
 1689              		.loc 1 338 0
 1690              		.cfi_startproc
 1691 1388 55       		pushq	%rbp
 1692              		.cfi_def_cfa_offset 16
 1693              		.cfi_offset 6, -16
 1694 1389 4889E5   		movq	%rsp, %rbp
 1695              		.cfi_def_cfa_register 6
 1696 138c 4881EC50 		subq	$2128, %rsp
 1696      080000
 1697 1393 89BDCCF7 		movl	%edi, -2100(%rbp)
 1697      FFFF
 1698 1399 89B5C8F7 		movl	%esi, -2104(%rbp)
 1698      FFFF
 1699 139f 8995C4F7 		movl	%edx, -2108(%rbp)
 1699      FFFF
 1700 13a5 898DC0F7 		movl	%ecx, -2112(%rbp)
 1700      FFFF
 1701 13ab 448985BC 		movl	%r8d, -2116(%rbp)
 1701      F7FFFF
 1702              		.loc 1 338 0
 1703 13b2 64488B04 		movq	%fs:40, %rax
 1703      25280000 
 1703      00
 1704 13bb 488945F8 		movq	%rax, -8(%rbp)
 1705 13bf 31C0     		xorl	%eax, %eax
 339:final_with_print.c **** 	FILE *fp1 = fopen("/home/shubham/Desktop/track_data.csv", "r");
 1706              		.loc 1 339 0
 1707 13c1 BE000000 		movl	$.LC6, %esi
 1707      00
 1708 13c6 BF000000 		movl	$.LC7, %edi
 1708      00
 1709 13cb E8000000 		call	fopen
 1709      00
 1710 13d0 48898510 		movq	%rax, -2032(%rbp)
 1710      F8FFFF
 340:final_with_print.c **** 	int mat[100][5];
 341:final_with_print.c **** 	//int temp;
 342:final_with_print.c **** 	int i =0;
 1711              		.loc 1 342 0
 1712 13d7 C785ECF7 		movl	$0, -2068(%rbp)
 1712      FFFF0000 
 1712      0000
 343:final_with_print.c **** 	int a,b,c,d,e;
 344:final_with_print.c **** 	while (fscanf(fp1, "%d,%d,%d,%d,%d", &a, &b,&c,&d,&e) == 5)
 1713              		.loc 1 344 0
 1714 13e1 E9CF0000 		jmp	.L79
 1714      00
 1715              	.L80:
 345:final_with_print.c **** 	{
 346:final_with_print.c **** 
 347:final_with_print.c **** 		mat[i][4] = a;
 1716              		.loc 1 347 0
 1717 13e6 8B8DD8F7 		movl	-2088(%rbp), %ecx
 1717      FFFF
 1718 13ec 8B85ECF7 		movl	-2068(%rbp), %eax
 1718      FFFF
 1719 13f2 4863D0   		movslq	%eax, %rdx
 1720 13f5 4889D0   		movq	%rdx, %rax
 1721 13f8 48C1E002 		salq	$2, %rax
 1722 13fc 4801D0   		addq	%rdx, %rax
 1723 13ff 48C1E002 		salq	$2, %rax
 1724 1403 4801E8   		addq	%rbp, %rax
 1725 1406 482DD007 		subq	$2000, %rax
 1725      0000
 1726 140c 8908     		movl	%ecx, (%rax)
 348:final_with_print.c **** 		mat[i][3] = b;
 1727              		.loc 1 348 0
 1728 140e 8B8DDCF7 		movl	-2084(%rbp), %ecx
 1728      FFFF
 1729 1414 8B85ECF7 		movl	-2068(%rbp), %eax
 1729      FFFF
 1730 141a 4863D0   		movslq	%eax, %rdx
 1731 141d 4889D0   		movq	%rdx, %rax
 1732 1420 48C1E002 		salq	$2, %rax
 1733 1424 4801D0   		addq	%rdx, %rax
 1734 1427 48C1E002 		salq	$2, %rax
 1735 142b 4801E8   		addq	%rbp, %rax
 1736 142e 482DD407 		subq	$2004, %rax
 1736      0000
 1737 1434 8908     		movl	%ecx, (%rax)
 349:final_with_print.c **** 		mat[i][2] = c;
 1738              		.loc 1 349 0
 1739 1436 8B8DE0F7 		movl	-2080(%rbp), %ecx
 1739      FFFF
 1740 143c 8B85ECF7 		movl	-2068(%rbp), %eax
 1740      FFFF
 1741 1442 4863D0   		movslq	%eax, %rdx
 1742 1445 4889D0   		movq	%rdx, %rax
 1743 1448 48C1E002 		salq	$2, %rax
 1744 144c 4801D0   		addq	%rdx, %rax
 1745 144f 48C1E002 		salq	$2, %rax
 1746 1453 4801E8   		addq	%rbp, %rax
 1747 1456 482DD807 		subq	$2008, %rax
 1747      0000
 1748 145c 8908     		movl	%ecx, (%rax)
 350:final_with_print.c **** 		mat[i][1] = d;
 1749              		.loc 1 350 0
 1750 145e 8B8DE4F7 		movl	-2076(%rbp), %ecx
 1750      FFFF
 1751 1464 8B85ECF7 		movl	-2068(%rbp), %eax
 1751      FFFF
 1752 146a 4863D0   		movslq	%eax, %rdx
 1753 146d 4889D0   		movq	%rdx, %rax
 1754 1470 48C1E002 		salq	$2, %rax
 1755 1474 4801D0   		addq	%rdx, %rax
 1756 1477 48C1E002 		salq	$2, %rax
 1757 147b 4801E8   		addq	%rbp, %rax
 1758 147e 482DDC07 		subq	$2012, %rax
 1758      0000
 1759 1484 8908     		movl	%ecx, (%rax)
 351:final_with_print.c **** 		mat[i][0] = e;
 1760              		.loc 1 351 0
 1761 1486 8B8DE8F7 		movl	-2072(%rbp), %ecx
 1761      FFFF
 1762 148c 8B85ECF7 		movl	-2068(%rbp), %eax
 1762      FFFF
 1763 1492 4863D0   		movslq	%eax, %rdx
 1764 1495 4889D0   		movq	%rdx, %rax
 1765 1498 48C1E002 		salq	$2, %rax
 1766 149c 4801D0   		addq	%rdx, %rax
 1767 149f 48C1E002 		salq	$2, %rax
 1768 14a3 4801E8   		addq	%rbp, %rax
 1769 14a6 482DE007 		subq	$2016, %rax
 1769      0000
 1770 14ac 8908     		movl	%ecx, (%rax)
 352:final_with_print.c **** 		i++; 
 1771              		.loc 1 352 0
 1772 14ae 8385ECF7 		addl	$1, -2068(%rbp)
 1772      FFFF01
 1773              	.L79:
 344:final_with_print.c **** 	{
 1774              		.loc 1 344 0
 1775 14b5 4C8D85E4 		leaq	-2076(%rbp), %r8
 1775      F7FFFF
 1776 14bc 488DBDE0 		leaq	-2080(%rbp), %rdi
 1776      F7FFFF
 1777 14c3 488D8DDC 		leaq	-2084(%rbp), %rcx
 1777      F7FFFF
 1778 14ca 488D95D8 		leaq	-2088(%rbp), %rdx
 1778      F7FFFF
 1779 14d1 488B8510 		movq	-2032(%rbp), %rax
 1779      F8FFFF
 1780 14d8 4883EC08 		subq	$8, %rsp
 1781 14dc 488DB5E8 		leaq	-2072(%rbp), %rsi
 1781      F7FFFF
 1782 14e3 56       		pushq	%rsi
 1783 14e4 4D89C1   		movq	%r8, %r9
 1784 14e7 4989F8   		movq	%rdi, %r8
 1785 14ea BE000000 		movl	$.LC8, %esi
 1785      00
 1786 14ef 4889C7   		movq	%rax, %rdi
 1787 14f2 B8000000 		movl	$0, %eax
 1787      00
 1788 14f7 E8000000 		call	__isoc99_fscanf
 1788      00
 1789 14fc 4883C410 		addq	$16, %rsp
 1790 1500 83F805   		cmpl	$5, %eax
 1791 1503 0F84DDFE 		je	.L80
 1791      FFFF
 353:final_with_print.c **** 	}
 354:final_with_print.c **** 
 355:final_with_print.c **** 	int len = i;
 1792              		.loc 1 355 0
 1793 1509 8B85ECF7 		movl	-2068(%rbp), %eax
 1793      FFFF
 1794 150f 8985F0F7 		movl	%eax, -2064(%rbp)
 1794      FFFF
 356:final_with_print.c **** 
 357:final_with_print.c **** 	printf("%s\n", "Existing track_data");
 1795              		.loc 1 357 0
 1796 1515 BF000000 		movl	$.LC9, %edi
 1796      00
 1797 151a E8000000 		call	puts
 1797      00
 1798              	.LBB26:
 358:final_with_print.c **** 	for(int i=0;i<len;i++)
 1799              		.loc 1 358 0
 1800 151f C785F4F7 		movl	$0, -2060(%rbp)
 1800      FFFF0000 
 1800      0000
 1801 1529 EB69     		jmp	.L81
 1802              	.L84:
 1803              	.LBB27:
 359:final_with_print.c **** 	{
 360:final_with_print.c **** 		for(int j=0;j<5;j++)
 1804              		.loc 1 360 0
 1805 152b C785F8F7 		movl	$0, -2056(%rbp)
 1805      FFFF0000 
 1805      0000
 1806 1535 EB43     		jmp	.L82
 1807              	.L83:
 361:final_with_print.c **** 		{
 362:final_with_print.c **** 			printf("%d ", mat[i][4-j]);
 1808              		.loc 1 362 0 discriminator 3
 1809 1537 B8040000 		movl	$4, %eax
 1809      00
 1810 153c 2B85F8F7 		subl	-2056(%rbp), %eax
 1810      FFFF
 1811 1542 4863C8   		movslq	%eax, %rcx
 1812 1545 8B85F4F7 		movl	-2060(%rbp), %eax
 1812      FFFF
 1813 154b 4863D0   		movslq	%eax, %rdx
 1814 154e 4889D0   		movq	%rdx, %rax
 1815 1551 48C1E002 		salq	$2, %rax
 1816 1555 4801D0   		addq	%rdx, %rax
 1817 1558 4801C8   		addq	%rcx, %rax
 1818 155b 8B848520 		movl	-2016(%rbp,%rax,4), %eax
 1818      F8FFFF
 1819 1562 89C6     		movl	%eax, %esi
 1820 1564 BF000000 		movl	$.LC10, %edi
 1820      00
 1821 1569 B8000000 		movl	$0, %eax
 1821      00
 1822 156e E8000000 		call	printf
 1822      00
 360:final_with_print.c **** 		{
 1823              		.loc 1 360 0 discriminator 3
 1824 1573 8385F8F7 		addl	$1, -2056(%rbp)
 1824      FFFF01
 1825              	.L82:
 360:final_with_print.c **** 		{
 1826              		.loc 1 360 0 is_stmt 0 discriminator 1
 1827 157a 83BDF8F7 		cmpl	$4, -2056(%rbp)
 1827      FFFF04
 1828 1581 7EB4     		jle	.L83
 1829              	.LBE27:
 363:final_with_print.c **** 		}
 364:final_with_print.c **** 		printf("\n");
 1830              		.loc 1 364 0 is_stmt 1 discriminator 2
 1831 1583 BF0A0000 		movl	$10, %edi
 1831      00
 1832 1588 E8000000 		call	putchar
 1832      00
 358:final_with_print.c **** 	{
 1833              		.loc 1 358 0 discriminator 2
 1834 158d 8385F4F7 		addl	$1, -2060(%rbp)
 1834      FFFF01
 1835              	.L81:
 358:final_with_print.c **** 	{
 1836              		.loc 1 358 0 is_stmt 0 discriminator 1
 1837 1594 8B85F4F7 		movl	-2060(%rbp), %eax
 1837      FFFF
 1838 159a 3B85F0F7 		cmpl	-2064(%rbp), %eax
 1838      FFFF
 1839 15a0 7C89     		jl	.L84
 1840              	.LBE26:
 365:final_with_print.c **** 	}
 366:final_with_print.c **** 
 367:final_with_print.c **** 	printf("\n");
 1841              		.loc 1 367 0 is_stmt 1
 1842 15a2 BF0A0000 		movl	$10, %edi
 1842      00
 1843 15a7 E8000000 		call	putchar
 1843      00
 368:final_with_print.c **** 	FILE *fp2 = fopen("/home/shubham/Desktop/track_data.csv", "w");
 1844              		.loc 1 368 0
 1845 15ac BE000000 		movl	$.LC11, %esi
 1845      00
 1846 15b1 BF000000 		movl	$.LC7, %edi
 1846      00
 1847 15b6 E8000000 		call	fopen
 1847      00
 1848 15bb 48898518 		movq	%rax, -2024(%rbp)
 1848      F8FFFF
 369:final_with_print.c **** 	
 370:final_with_print.c **** 	int counter = 0;
 1849              		.loc 1 370 0
 1850 15c2 C785FCF7 		movl	$0, -2052(%rbp)
 1850      FFFF0000 
 1850      0000
 1851              	.LBB28:
 371:final_with_print.c **** 	for (int i = 0; i < len; ++i)
 1852              		.loc 1 371 0
 1853 15cc C78500F8 		movl	$0, -2048(%rbp)
 1853      FFFF0000 
 1853      0000
 1854 15d6 E9E60000 		jmp	.L85
 1854      00
 1855              	.L87:
 372:final_with_print.c **** 	{
 373:final_with_print.c **** 		if(mat[i][4] == x_cord && mat[i][3] == y_cord && mat[i][2] == direction)
 1856              		.loc 1 373 0
 1857 15db 8B8500F8 		movl	-2048(%rbp), %eax
 1857      FFFF
 1858 15e1 4863D0   		movslq	%eax, %rdx
 1859 15e4 4889D0   		movq	%rdx, %rax
 1860 15e7 48C1E002 		salq	$2, %rax
 1861 15eb 4801D0   		addq	%rdx, %rax
 1862 15ee 48C1E002 		salq	$2, %rax
 1863 15f2 4801E8   		addq	%rbp, %rax
 1864 15f5 482DD007 		subq	$2000, %rax
 1864      0000
 1865 15fb 8B00     		movl	(%rax), %eax
 1866 15fd 3B85CCF7 		cmpl	-2100(%rbp), %eax
 1866      FFFF
 1867 1603 0F85B100 		jne	.L86
 1867      0000
 1868              		.loc 1 373 0 is_stmt 0 discriminator 1
 1869 1609 8B8500F8 		movl	-2048(%rbp), %eax
 1869      FFFF
 1870 160f 4863D0   		movslq	%eax, %rdx
 1871 1612 4889D0   		movq	%rdx, %rax
 1872 1615 48C1E002 		salq	$2, %rax
 1873 1619 4801D0   		addq	%rdx, %rax
 1874 161c 48C1E002 		salq	$2, %rax
 1875 1620 4801E8   		addq	%rbp, %rax
 1876 1623 482DD407 		subq	$2004, %rax
 1876      0000
 1877 1629 8B00     		movl	(%rax), %eax
 1878 162b 3B85C8F7 		cmpl	-2104(%rbp), %eax
 1878      FFFF
 1879 1631 0F858300 		jne	.L86
 1879      0000
 1880              		.loc 1 373 0 discriminator 2
 1881 1637 8B8500F8 		movl	-2048(%rbp), %eax
 1881      FFFF
 1882 163d 4863D0   		movslq	%eax, %rdx
 1883 1640 4889D0   		movq	%rdx, %rax
 1884 1643 48C1E002 		salq	$2, %rax
 1885 1647 4801D0   		addq	%rdx, %rax
 1886 164a 48C1E002 		salq	$2, %rax
 1887 164e 4801E8   		addq	%rbp, %rax
 1888 1651 482DD807 		subq	$2008, %rax
 1888      0000
 1889 1657 8B00     		movl	(%rax), %eax
 1890 1659 3B85C0F7 		cmpl	-2112(%rbp), %eax
 1890      FFFF
 1891 165f 7559     		jne	.L86
 374:final_with_print.c **** 		{
 375:final_with_print.c **** 			mat[i][1] = ok;
 1892              		.loc 1 375 0 is_stmt 1
 1893 1661 8B8500F8 		movl	-2048(%rbp), %eax
 1893      FFFF
 1894 1667 4863D0   		movslq	%eax, %rdx
 1895 166a 4889D0   		movq	%rdx, %rax
 1896 166d 48C1E002 		salq	$2, %rax
 1897 1671 4801D0   		addq	%rdx, %rax
 1898 1674 48C1E002 		salq	$2, %rax
 1899 1678 4801E8   		addq	%rbp, %rax
 1900 167b 488D9024 		leaq	-2012(%rax), %rdx
 1900      F8FFFF
 1901 1682 8B85C4F7 		movl	-2108(%rbp), %eax
 1901      FFFF
 1902 1688 8902     		movl	%eax, (%rdx)
 376:final_with_print.c **** 			mat[i][0] = next;
 1903              		.loc 1 376 0
 1904 168a 8B8500F8 		movl	-2048(%rbp), %eax
 1904      FFFF
 1905 1690 4863D0   		movslq	%eax, %rdx
 1906 1693 4889D0   		movq	%rdx, %rax
 1907 1696 48C1E002 		salq	$2, %rax
 1908 169a 4801D0   		addq	%rdx, %rax
 1909 169d 48C1E002 		salq	$2, %rax
 1910 16a1 4801E8   		addq	%rbp, %rax
 1911 16a4 488D9020 		leaq	-2016(%rax), %rdx
 1911      F8FFFF
 1912 16ab 8B85BCF7 		movl	-2116(%rbp), %eax
 1912      FFFF
 1913 16b1 8902     		movl	%eax, (%rdx)
 377:final_with_print.c **** 			counter++;
 1914              		.loc 1 377 0
 1915 16b3 8385FCF7 		addl	$1, -2052(%rbp)
 1915      FFFF01
 1916              	.L86:
 371:final_with_print.c **** 	{
 1917              		.loc 1 371 0 discriminator 2
 1918 16ba 838500F8 		addl	$1, -2048(%rbp)
 1918      FFFF01
 1919              	.L85:
 371:final_with_print.c **** 	{
 1920              		.loc 1 371 0 is_stmt 0 discriminator 1
 1921 16c1 8B8500F8 		movl	-2048(%rbp), %eax
 1921      FFFF
 1922 16c7 3B85F0F7 		cmpl	-2064(%rbp), %eax
 1922      FFFF
 1923 16cd 0F8C08FF 		jl	.L87
 1923      FFFF
 1924              	.LBE28:
 378:final_with_print.c **** 		}
 379:final_with_print.c **** 	}
 380:final_with_print.c **** 
 381:final_with_print.c **** 	if(counter == 0)
 1925              		.loc 1 381 0 is_stmt 1
 1926 16d3 83BDFCF7 		cmpl	$0, -2052(%rbp)
 1926      FFFF00
 1927 16da 0F85D400 		jne	.L88
 1927      0000
 382:final_with_print.c **** 	{
 383:final_with_print.c **** 		mat[len][4] = x_cord;
 1928              		.loc 1 383 0
 1929 16e0 8B85F0F7 		movl	-2064(%rbp), %eax
 1929      FFFF
 1930 16e6 4863D0   		movslq	%eax, %rdx
 1931 16e9 4889D0   		movq	%rdx, %rax
 1932 16ec 48C1E002 		salq	$2, %rax
 1933 16f0 4801D0   		addq	%rdx, %rax
 1934 16f3 48C1E002 		salq	$2, %rax
 1935 16f7 4801E8   		addq	%rbp, %rax
 1936 16fa 488D9030 		leaq	-2000(%rax), %rdx
 1936      F8FFFF
 1937 1701 8B85CCF7 		movl	-2100(%rbp), %eax
 1937      FFFF
 1938 1707 8902     		movl	%eax, (%rdx)
 384:final_with_print.c **** 		mat[len][3] = y_cord;
 1939              		.loc 1 384 0
 1940 1709 8B85F0F7 		movl	-2064(%rbp), %eax
 1940      FFFF
 1941 170f 4863D0   		movslq	%eax, %rdx
 1942 1712 4889D0   		movq	%rdx, %rax
 1943 1715 48C1E002 		salq	$2, %rax
 1944 1719 4801D0   		addq	%rdx, %rax
 1945 171c 48C1E002 		salq	$2, %rax
 1946 1720 4801E8   		addq	%rbp, %rax
 1947 1723 488D902C 		leaq	-2004(%rax), %rdx
 1947      F8FFFF
 1948 172a 8B85C8F7 		movl	-2104(%rbp), %eax
 1948      FFFF
 1949 1730 8902     		movl	%eax, (%rdx)
 385:final_with_print.c **** 		mat[len][2] = direction;
 1950              		.loc 1 385 0
 1951 1732 8B85F0F7 		movl	-2064(%rbp), %eax
 1951      FFFF
 1952 1738 4863D0   		movslq	%eax, %rdx
 1953 173b 4889D0   		movq	%rdx, %rax
 1954 173e 48C1E002 		salq	$2, %rax
 1955 1742 4801D0   		addq	%rdx, %rax
 1956 1745 48C1E002 		salq	$2, %rax
 1957 1749 4801E8   		addq	%rbp, %rax
 1958 174c 488D9028 		leaq	-2008(%rax), %rdx
 1958      F8FFFF
 1959 1753 8B85C0F7 		movl	-2112(%rbp), %eax
 1959      FFFF
 1960 1759 8902     		movl	%eax, (%rdx)
 386:final_with_print.c **** 		mat[len][1] = ok;
 1961              		.loc 1 386 0
 1962 175b 8B85F0F7 		movl	-2064(%rbp), %eax
 1962      FFFF
 1963 1761 4863D0   		movslq	%eax, %rdx
 1964 1764 4889D0   		movq	%rdx, %rax
 1965 1767 48C1E002 		salq	$2, %rax
 1966 176b 4801D0   		addq	%rdx, %rax
 1967 176e 48C1E002 		salq	$2, %rax
 1968 1772 4801E8   		addq	%rbp, %rax
 1969 1775 488D9024 		leaq	-2012(%rax), %rdx
 1969      F8FFFF
 1970 177c 8B85C4F7 		movl	-2108(%rbp), %eax
 1970      FFFF
 1971 1782 8902     		movl	%eax, (%rdx)
 387:final_with_print.c **** 		mat[len][0] = next;
 1972              		.loc 1 387 0
 1973 1784 8B85F0F7 		movl	-2064(%rbp), %eax
 1973      FFFF
 1974 178a 4863D0   		movslq	%eax, %rdx
 1975 178d 4889D0   		movq	%rdx, %rax
 1976 1790 48C1E002 		salq	$2, %rax
 1977 1794 4801D0   		addq	%rdx, %rax
 1978 1797 48C1E002 		salq	$2, %rax
 1979 179b 4801E8   		addq	%rbp, %rax
 1980 179e 488D9020 		leaq	-2016(%rax), %rdx
 1980      F8FFFF
 1981 17a5 8B85BCF7 		movl	-2116(%rbp), %eax
 1981      FFFF
 1982 17ab 8902     		movl	%eax, (%rdx)
 388:final_with_print.c **** 		len++;
 1983              		.loc 1 388 0
 1984 17ad 8385F0F7 		addl	$1, -2064(%rbp)
 1984      FFFF01
 1985              	.L88:
 1986              	.LBB29:
 389:final_with_print.c **** 	}
 390:final_with_print.c **** 
 391:final_with_print.c **** 	for (int i = 0; i < len; ++i)
 1987              		.loc 1 391 0
 1988 17b4 C78504F8 		movl	$0, -2044(%rbp)
 1988      FFFF0000 
 1988      0000
 1989 17be E9DA0000 		jmp	.L89
 1989      00
 1990              	.L90:
 392:final_with_print.c **** 	{
 393:final_with_print.c **** 		fprintf(fp2, "%d,%d,%d,%d,%d\n", mat[i][4], mat[i][3], mat[i][2], mat[i][1], mat[i][0]);
 1991              		.loc 1 393 0 discriminator 3
 1992 17c3 8B8504F8 		movl	-2044(%rbp), %eax
 1992      FFFF
 1993 17c9 4863D0   		movslq	%eax, %rdx
 1994 17cc 4889D0   		movq	%rdx, %rax
 1995 17cf 48C1E002 		salq	$2, %rax
 1996 17d3 4801D0   		addq	%rdx, %rax
 1997 17d6 48C1E002 		salq	$2, %rax
 1998 17da 4801E8   		addq	%rbp, %rax
 1999 17dd 482DE007 		subq	$2016, %rax
 1999      0000
 2000 17e3 8B30     		movl	(%rax), %esi
 2001 17e5 8B8504F8 		movl	-2044(%rbp), %eax
 2001      FFFF
 2002 17eb 4863D0   		movslq	%eax, %rdx
 2003 17ee 4889D0   		movq	%rdx, %rax
 2004 17f1 48C1E002 		salq	$2, %rax
 2005 17f5 4801D0   		addq	%rdx, %rax
 2006 17f8 48C1E002 		salq	$2, %rax
 2007 17fc 4801E8   		addq	%rbp, %rax
 2008 17ff 482DDC07 		subq	$2012, %rax
 2008      0000
 2009 1805 448B00   		movl	(%rax), %r8d
 2010 1808 8B8504F8 		movl	-2044(%rbp), %eax
 2010      FFFF
 2011 180e 4863D0   		movslq	%eax, %rdx
 2012 1811 4889D0   		movq	%rdx, %rax
 2013 1814 48C1E002 		salq	$2, %rax
 2014 1818 4801D0   		addq	%rdx, %rax
 2015 181b 48C1E002 		salq	$2, %rax
 2016 181f 4801E8   		addq	%rbp, %rax
 2017 1822 482DD807 		subq	$2008, %rax
 2017      0000
 2018 1828 8B38     		movl	(%rax), %edi
 2019 182a 8B8504F8 		movl	-2044(%rbp), %eax
 2019      FFFF
 2020 1830 4863D0   		movslq	%eax, %rdx
 2021 1833 4889D0   		movq	%rdx, %rax
 2022 1836 48C1E002 		salq	$2, %rax
 2023 183a 4801D0   		addq	%rdx, %rax
 2024 183d 48C1E002 		salq	$2, %rax
 2025 1841 4801E8   		addq	%rbp, %rax
 2026 1844 482DD407 		subq	$2004, %rax
 2026      0000
 2027 184a 8B08     		movl	(%rax), %ecx
 2028 184c 8B8504F8 		movl	-2044(%rbp), %eax
 2028      FFFF
 2029 1852 4863D0   		movslq	%eax, %rdx
 2030 1855 4889D0   		movq	%rdx, %rax
 2031 1858 48C1E002 		salq	$2, %rax
 2032 185c 4801D0   		addq	%rdx, %rax
 2033 185f 48C1E002 		salq	$2, %rax
 2034 1863 4801E8   		addq	%rbp, %rax
 2035 1866 482DD007 		subq	$2000, %rax
 2035      0000
 2036 186c 8B10     		movl	(%rax), %edx
 2037 186e 488B8518 		movq	-2024(%rbp), %rax
 2037      F8FFFF
 2038 1875 4883EC08 		subq	$8, %rsp
 2039 1879 56       		pushq	%rsi
 2040 187a 4589C1   		movl	%r8d, %r9d
 2041 187d 4189F8   		movl	%edi, %r8d
 2042 1880 BE000000 		movl	$.LC12, %esi
 2042      00
 2043 1885 4889C7   		movq	%rax, %rdi
 2044 1888 B8000000 		movl	$0, %eax
 2044      00
 2045 188d E8000000 		call	fprintf
 2045      00
 2046 1892 4883C410 		addq	$16, %rsp
 391:final_with_print.c **** 	{
 2047              		.loc 1 391 0 discriminator 3
 2048 1896 838504F8 		addl	$1, -2044(%rbp)
 2048      FFFF01
 2049              	.L89:
 391:final_with_print.c **** 	{
 2050              		.loc 1 391 0 is_stmt 0 discriminator 1
 2051 189d 8B8504F8 		movl	-2044(%rbp), %eax
 2051      FFFF
 2052 18a3 3B85F0F7 		cmpl	-2064(%rbp), %eax
 2052      FFFF
 2053 18a9 0F8C14FF 		jl	.L90
 2053      FFFF
 2054              	.LBE29:
 394:final_with_print.c **** 	}
 395:final_with_print.c **** 
 396:final_with_print.c **** 	printf("%s\n", "Updated track_data");
 2055              		.loc 1 396 0 is_stmt 1
 2056 18af BF000000 		movl	$.LC13, %edi
 2056      00
 2057 18b4 E8000000 		call	puts
 2057      00
 2058              	.LBB30:
 397:final_with_print.c **** 	for(int i=0;i<len;i++)
 2059              		.loc 1 397 0
 2060 18b9 C78508F8 		movl	$0, -2040(%rbp)
 2060      FFFF0000 
 2060      0000
 2061 18c3 EB69     		jmp	.L91
 2062              	.L94:
 2063              	.LBB31:
 398:final_with_print.c **** 	{
 399:final_with_print.c **** 		for(int j=0;j<5;j++)
 2064              		.loc 1 399 0
 2065 18c5 C7850CF8 		movl	$0, -2036(%rbp)
 2065      FFFF0000 
 2065      0000
 2066 18cf EB43     		jmp	.L92
 2067              	.L93:
 400:final_with_print.c **** 		{
 401:final_with_print.c **** 			printf("%d ", mat[i][4-j]);
 2068              		.loc 1 401 0 discriminator 3
 2069 18d1 B8040000 		movl	$4, %eax
 2069      00
 2070 18d6 2B850CF8 		subl	-2036(%rbp), %eax
 2070      FFFF
 2071 18dc 4863C8   		movslq	%eax, %rcx
 2072 18df 8B8508F8 		movl	-2040(%rbp), %eax
 2072      FFFF
 2073 18e5 4863D0   		movslq	%eax, %rdx
 2074 18e8 4889D0   		movq	%rdx, %rax
 2075 18eb 48C1E002 		salq	$2, %rax
 2076 18ef 4801D0   		addq	%rdx, %rax
 2077 18f2 4801C8   		addq	%rcx, %rax
 2078 18f5 8B848520 		movl	-2016(%rbp,%rax,4), %eax
 2078      F8FFFF
 2079 18fc 89C6     		movl	%eax, %esi
 2080 18fe BF000000 		movl	$.LC10, %edi
 2080      00
 2081 1903 B8000000 		movl	$0, %eax
 2081      00
 2082 1908 E8000000 		call	printf
 2082      00
 399:final_with_print.c **** 		{
 2083              		.loc 1 399 0 discriminator 3
 2084 190d 83850CF8 		addl	$1, -2036(%rbp)
 2084      FFFF01
 2085              	.L92:
 399:final_with_print.c **** 		{
 2086              		.loc 1 399 0 is_stmt 0 discriminator 1
 2087 1914 83BD0CF8 		cmpl	$4, -2036(%rbp)
 2087      FFFF04
 2088 191b 7EB4     		jle	.L93
 2089              	.LBE31:
 402:final_with_print.c **** 		}
 403:final_with_print.c **** 		printf("\n");
 2090              		.loc 1 403 0 is_stmt 1 discriminator 2
 2091 191d BF0A0000 		movl	$10, %edi
 2091      00
 2092 1922 E8000000 		call	putchar
 2092      00
 397:final_with_print.c **** 	{
 2093              		.loc 1 397 0 discriminator 2
 2094 1927 838508F8 		addl	$1, -2040(%rbp)
 2094      FFFF01
 2095              	.L91:
 397:final_with_print.c **** 	{
 2096              		.loc 1 397 0 is_stmt 0 discriminator 1
 2097 192e 8B8508F8 		movl	-2040(%rbp), %eax
 2097      FFFF
 2098 1934 3B85F0F7 		cmpl	-2064(%rbp), %eax
 2098      FFFF
 2099 193a 7C89     		jl	.L94
 2100              	.LBE30:
 404:final_with_print.c **** 	}
 405:final_with_print.c **** 	fclose(fp1);
 2101              		.loc 1 405 0 is_stmt 1
 2102 193c 488B8510 		movq	-2032(%rbp), %rax
 2102      F8FFFF
 2103 1943 4889C7   		movq	%rax, %rdi
 2104 1946 E8000000 		call	fclose
 2104      00
 406:final_with_print.c **** 	fclose(fp2);
 2105              		.loc 1 406 0
 2106 194b 488B8518 		movq	-2024(%rbp), %rax
 2106      F8FFFF
 2107 1952 4889C7   		movq	%rax, %rdi
 2108 1955 E8000000 		call	fclose
 2108      00
 407:final_with_print.c **** }
 2109              		.loc 1 407 0
 2110 195a 90       		nop
 2111 195b 488B45F8 		movq	-8(%rbp), %rax
 2112 195f 64483304 		xorq	%fs:40, %rax
 2112      25280000 
 2112      00
 2113 1968 7405     		je	.L95
 2114 196a E8000000 		call	__stack_chk_fail
 2114      00
 2115              	.L95:
 2116 196f C9       		leave
 2117              		.cfi_def_cfa 7, 8
 2118 1970 C3       		ret
 2119              		.cfi_endproc
 2120              	.LFE14:
 2123              	isHexDigit:
 2124              	.LFB15:
 408:final_with_print.c **** 
 409:final_with_print.c **** 
 410:final_with_print.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
 411:final_with_print.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
 412:final_with_print.c **** 
 413:final_with_print.c **** 
 414:final_with_print.c **** static bool isHexDigit(char ch) {
 2125              		.loc 1 414 0
 2126              		.cfi_startproc
 2127 1971 55       		pushq	%rbp
 2128              		.cfi_def_cfa_offset 16
 2129              		.cfi_offset 6, -16
 2130 1972 4889E5   		movq	%rsp, %rbp
 2131              		.cfi_def_cfa_register 6
 2132 1975 89F8     		movl	%edi, %eax
 2133 1977 8845FC   		movb	%al, -4(%rbp)
 415:final_with_print.c **** 	return
 416:final_with_print.c **** 	(ch >= '0' && ch <= '9') ||
 417:final_with_print.c **** 	(ch >= 'a' && ch <= 'f') ||
 2134              		.loc 1 417 0
 2135 197a 807DFC2F 		cmpb	$47, -4(%rbp)
 2136 197e 7E06     		jle	.L97
 416:final_with_print.c **** 	(ch >= 'a' && ch <= 'f') ||
 2137              		.loc 1 416 0
 2138 1980 807DFC39 		cmpb	$57, -4(%rbp)
 2139 1984 7E18     		jle	.L98
 2140              	.L97:
 416:final_with_print.c **** 	(ch >= 'a' && ch <= 'f') ||
 2141              		.loc 1 416 0 is_stmt 0 discriminator 1
 2142 1986 807DFC60 		cmpb	$96, -4(%rbp)
 2143 198a 7E06     		jle	.L99
 2144              		.loc 1 417 0 is_stmt 1
 2145 198c 807DFC66 		cmpb	$102, -4(%rbp)
 2146 1990 7E0C     		jle	.L98
 2147              	.L99:
 2148              		.loc 1 417 0 is_stmt 0 discriminator 2
 2149 1992 807DFC40 		cmpb	$64, -4(%rbp)
 2150 1996 7E0D     		jle	.L100
 418:final_with_print.c **** 	(ch >= 'A' && ch <= 'F');
 2151              		.loc 1 418 0 is_stmt 1
 2152 1998 807DFC46 		cmpb	$70, -4(%rbp)
 2153 199c 7F07     		jg	.L100
 2154              	.L98:
 417:final_with_print.c **** 	(ch >= 'A' && ch <= 'F');
 2155              		.loc 1 417 0 discriminator 1
 2156 199e B8010000 		movl	$1, %eax
 2156      00
 2157 19a3 EB05     		jmp	.L101
 2158              	.L100:
 417:final_with_print.c **** 	(ch >= 'A' && ch <= 'F');
 2159              		.loc 1 417 0 is_stmt 0 discriminator 3
 2160 19a5 B8000000 		movl	$0, %eax
 2160      00
 2161              	.L101:
 416:final_with_print.c **** 	(ch >= 'a' && ch <= 'f') ||
 2162              		.loc 1 416 0 is_stmt 1
 2163 19aa 83E001   		andl	$1, %eax
 419:final_with_print.c **** }
 2164              		.loc 1 419 0
 2165 19ad 5D       		popq	%rbp
 2166              		.cfi_def_cfa 7, 8
 2167 19ae C3       		ret
 2168              		.cfi_endproc
 2169              	.LFE15:
 2172              	calcChecksum:
 2173              	.LFB16:
 420:final_with_print.c **** 
 421:final_with_print.c **** static uint16 calcChecksum(const uint8 *data, size_t length) {
 2174              		.loc 1 421 0
 2175              		.cfi_startproc
 2176 19af 55       		pushq	%rbp
 2177              		.cfi_def_cfa_offset 16
 2178              		.cfi_offset 6, -16
 2179 19b0 4889E5   		movq	%rsp, %rbp
 2180              		.cfi_def_cfa_register 6
 2181 19b3 48897DE8 		movq	%rdi, -24(%rbp)
 2182 19b7 488975E0 		movq	%rsi, -32(%rbp)
 422:final_with_print.c **** 	uint16 cksum = 0x0000;
 2183              		.loc 1 422 0
 2184 19bb 66C745FE 		movw	$0, -2(%rbp)
 2184      0000
 423:final_with_print.c **** 	while ( length-- ) {
 2185              		.loc 1 423 0
 2186 19c1 EB16     		jmp	.L104
 2187              	.L105:
 424:final_with_print.c **** 		cksum = (uint16)(cksum + *data++);
 2188              		.loc 1 424 0
 2189 19c3 488B45E8 		movq	-24(%rbp), %rax
 2190 19c7 488D5001 		leaq	1(%rax), %rdx
 2191 19cb 488955E8 		movq	%rdx, -24(%rbp)
 2192 19cf 0FB600   		movzbl	(%rax), %eax
 2193 19d2 0FB6C0   		movzbl	%al, %eax
 2194 19d5 660145FE 		addw	%ax, -2(%rbp)
 2195              	.L104:
 423:final_with_print.c **** 	while ( length-- ) {
 2196              		.loc 1 423 0
 2197 19d9 488B45E0 		movq	-32(%rbp), %rax
 2198 19dd 488D50FF 		leaq	-1(%rax), %rdx
 2199 19e1 488955E0 		movq	%rdx, -32(%rbp)
 2200 19e5 4885C0   		testq	%rax, %rax
 2201 19e8 75D9     		jne	.L105
 425:final_with_print.c **** 	}
 426:final_with_print.c **** 	return cksum;
 2202              		.loc 1 426 0
 2203 19ea 0FB745FE 		movzwl	-2(%rbp), %eax
 427:final_with_print.c **** }
 2204              		.loc 1 427 0
 2205 19ee 5D       		popq	%rbp
 2206              		.cfi_def_cfa 7, 8
 2207 19ef C3       		ret
 2208              		.cfi_endproc
 2209              	.LFE16:
 2212              	getHexNibble:
 2213              	.LFB17:
 428:final_with_print.c **** 
 429:final_with_print.c **** static bool getHexNibble(char hexDigit, uint8 *nibble) {
 2214              		.loc 1 429 0
 2215              		.cfi_startproc
 2216 19f0 55       		pushq	%rbp
 2217              		.cfi_def_cfa_offset 16
 2218              		.cfi_offset 6, -16
 2219 19f1 4889E5   		movq	%rsp, %rbp
 2220              		.cfi_def_cfa_register 6
 2221 19f4 89F8     		movl	%edi, %eax
 2222 19f6 488975F0 		movq	%rsi, -16(%rbp)
 2223 19fa 8845FC   		movb	%al, -4(%rbp)
 430:final_with_print.c **** 	if ( hexDigit >= '0' && hexDigit <= '9' ) {
 2224              		.loc 1 430 0
 2225 19fd 807DFC2F 		cmpb	$47, -4(%rbp)
 2226 1a01 7E1A     		jle	.L108
 2227              		.loc 1 430 0 is_stmt 0 discriminator 1
 2228 1a03 807DFC39 		cmpb	$57, -4(%rbp)
 2229 1a07 7F14     		jg	.L108
 431:final_with_print.c **** 		*nibble = (uint8)(hexDigit - '0');
 2230              		.loc 1 431 0 is_stmt 1
 2231 1a09 0FB645FC 		movzbl	-4(%rbp), %eax
 2232 1a0d 8D50D0   		leal	-48(%rax), %edx
 2233 1a10 488B45F0 		movq	-16(%rbp), %rax
 2234 1a14 8810     		movb	%dl, (%rax)
 432:final_with_print.c **** 		return false;
 2235              		.loc 1 432 0
 2236 1a16 B8000000 		movl	$0, %eax
 2236      00
 2237 1a1b EB45     		jmp	.L109
 2238              	.L108:
 433:final_with_print.c **** 	} else if ( hexDigit >= 'a' && hexDigit <= 'f' ) {
 2239              		.loc 1 433 0
 2240 1a1d 807DFC60 		cmpb	$96, -4(%rbp)
 2241 1a21 7E1A     		jle	.L110
 2242              		.loc 1 433 0 is_stmt 0 discriminator 1
 2243 1a23 807DFC66 		cmpb	$102, -4(%rbp)
 2244 1a27 7F14     		jg	.L110
 434:final_with_print.c **** 		*nibble = (uint8)(hexDigit - 'a' + 10);
 2245              		.loc 1 434 0 is_stmt 1
 2246 1a29 0FB645FC 		movzbl	-4(%rbp), %eax
 2247 1a2d 8D50A9   		leal	-87(%rax), %edx
 2248 1a30 488B45F0 		movq	-16(%rbp), %rax
 2249 1a34 8810     		movb	%dl, (%rax)
 435:final_with_print.c **** 		return false;
 2250              		.loc 1 435 0
 2251 1a36 B8000000 		movl	$0, %eax
 2251      00
 2252 1a3b EB25     		jmp	.L109
 2253              	.L110:
 436:final_with_print.c **** 	} else if ( hexDigit >= 'A' && hexDigit <= 'F' ) {
 2254              		.loc 1 436 0
 2255 1a3d 807DFC40 		cmpb	$64, -4(%rbp)
 2256 1a41 7E1A     		jle	.L111
 2257              		.loc 1 436 0 is_stmt 0 discriminator 1
 2258 1a43 807DFC46 		cmpb	$70, -4(%rbp)
 2259 1a47 7F14     		jg	.L111
 437:final_with_print.c **** 		*nibble = (uint8)(hexDigit - 'A' + 10);
 2260              		.loc 1 437 0 is_stmt 1
 2261 1a49 0FB645FC 		movzbl	-4(%rbp), %eax
 2262 1a4d 8D50C9   		leal	-55(%rax), %edx
 2263 1a50 488B45F0 		movq	-16(%rbp), %rax
 2264 1a54 8810     		movb	%dl, (%rax)
 438:final_with_print.c **** 		return false;
 2265              		.loc 1 438 0
 2266 1a56 B8000000 		movl	$0, %eax
 2266      00
 2267 1a5b EB05     		jmp	.L109
 2268              	.L111:
 439:final_with_print.c **** 	} else {
 440:final_with_print.c **** 		return true;
 2269              		.loc 1 440 0
 2270 1a5d B8010000 		movl	$1, %eax
 2270      00
 2271              	.L109:
 441:final_with_print.c **** 	}
 442:final_with_print.c **** }
 2272              		.loc 1 442 0
 2273 1a62 5D       		popq	%rbp
 2274              		.cfi_def_cfa 7, 8
 2275 1a63 C3       		ret
 2276              		.cfi_endproc
 2277              	.LFE17:
 2280              	getHexByte:
 2281              	.LFB18:
 443:final_with_print.c **** 
 444:final_with_print.c **** static int getHexByte(uint8 *byte) {
 2282              		.loc 1 444 0
 2283              		.cfi_startproc
 2284 1a64 55       		pushq	%rbp
 2285              		.cfi_def_cfa_offset 16
 2286              		.cfi_offset 6, -16
 2287 1a65 4889E5   		movq	%rsp, %rbp
 2288              		.cfi_def_cfa_register 6
 2289 1a68 4883EC20 		subq	$32, %rsp
 2290 1a6c 48897DE8 		movq	%rdi, -24(%rbp)
 2291              		.loc 1 444 0
 2292 1a70 64488B04 		movq	%fs:40, %rax
 2292      25280000 
 2292      00
 2293 1a79 488945F8 		movq	%rax, -8(%rbp)
 2294 1a7d 31C0     		xorl	%eax, %eax
 445:final_with_print.c **** 	uint8 upperNibble;
 446:final_with_print.c **** 	uint8 lowerNibble;
 447:final_with_print.c **** 	if ( !getHexNibble(ptr[0], &upperNibble) && !getHexNibble(ptr[1], &lowerNibble) ) {
 2295              		.loc 1 447 0
 2296 1a7f 488B0500 		movq	ptr(%rip), %rax
 2296      000000
 2297 1a86 0FB600   		movzbl	(%rax), %eax
 2298 1a89 0FBEC0   		movsbl	%al, %eax
 2299 1a8c 488D55F6 		leaq	-10(%rbp), %rdx
 2300 1a90 4889D6   		movq	%rdx, %rsi
 2301 1a93 89C7     		movl	%eax, %edi
 2302 1a95 E856FFFF 		call	getHexNibble
 2302      FF
 2303 1a9a 83F001   		xorl	$1, %eax
 2304 1a9d 84C0     		testb	%al, %al
 2305 1a9f 744C     		je	.L113
 2306              		.loc 1 447 0 is_stmt 0 discriminator 1
 2307 1aa1 488B0500 		movq	ptr(%rip), %rax
 2307      000000
 2308 1aa8 4883C001 		addq	$1, %rax
 2309 1aac 0FB600   		movzbl	(%rax), %eax
 2310 1aaf 0FBEC0   		movsbl	%al, %eax
 2311 1ab2 488D55F7 		leaq	-9(%rbp), %rdx
 2312 1ab6 4889D6   		movq	%rdx, %rsi
 2313 1ab9 89C7     		movl	%eax, %edi
 2314 1abb E830FFFF 		call	getHexNibble
 2314      FF
 2315 1ac0 83F001   		xorl	$1, %eax
 2316 1ac3 84C0     		testb	%al, %al
 2317 1ac5 7426     		je	.L113
 448:final_with_print.c **** 		*byte = (uint8)((upperNibble << 4) | lowerNibble);
 2318              		.loc 1 448 0 is_stmt 1
 2319 1ac7 0FB645F6 		movzbl	-10(%rbp), %eax
 2320 1acb 0FB6C0   		movzbl	%al, %eax
 2321 1ace C1E004   		sall	$4, %eax
 2322 1ad1 89C2     		movl	%eax, %edx
 2323 1ad3 0FB645F7 		movzbl	-9(%rbp), %eax
 2324 1ad7 09D0     		orl	%edx, %eax
 2325 1ad9 89C2     		movl	%eax, %edx
 2326 1adb 488B45E8 		movq	-24(%rbp), %rax
 2327 1adf 8810     		movb	%dl, (%rax)
 449:final_with_print.c **** 		byte += 2;
 2328              		.loc 1 449 0
 2329 1ae1 488345E8 		addq	$2, -24(%rbp)
 2329      02
 450:final_with_print.c **** 		return 0;
 2330              		.loc 1 450 0
 2331 1ae6 B8000000 		movl	$0, %eax
 2331      00
 2332 1aeb EB05     		jmp	.L115
 2333              	.L113:
 451:final_with_print.c **** 	} else {
 452:final_with_print.c **** 		return 1;
 2334              		.loc 1 452 0
 2335 1aed B8010000 		movl	$1, %eax
 2335      00
 2336              	.L115:
 453:final_with_print.c **** 	}
 454:final_with_print.c **** }
 2337              		.loc 1 454 0 discriminator 1
 2338 1af2 488B4DF8 		movq	-8(%rbp), %rcx
 2339 1af6 6448330C 		xorq	%fs:40, %rcx
 2339      25280000 
 2339      00
 2340 1aff 7405     		je	.L116
 2341              		.loc 1 454 0 is_stmt 0
 2342 1b01 E8000000 		call	__stack_chk_fail
 2342      00
 2343              	.L116:
 2344 1b06 C9       		leave
 2345              		.cfi_def_cfa 7, 8
 2346 1b07 C3       		ret
 2347              		.cfi_endproc
 2348              	.LFE18:
 2350              		.section	.rodata
 2351              	.LC14:
 2352 00c9 556E7061 		.string	"Unparseable hex number"
 2352      72736561 
 2352      626C6520 
 2352      68657820 
 2352      6E756D62 
 2353              	.LC15:
 2354 00e0 4368616E 		.string	"Channel out of range"
 2354      6E656C20 
 2354      6F757420 
 2354      6F662072 
 2354      616E6765 
 2355              	.LC16:
 2356 00f5 436F6E64 		.string	"Conduit out of range"
 2356      75697420 
 2356      6F757420 
 2356      6F662072 
 2356      616E6765 
 2357              	.LC17:
 2358 010a 496C6C65 		.string	"Illegal character"
 2358      67616C20 
 2358      63686172 
 2358      61637465 
 2358      7200
 2359              	.LC18:
 2360 011c 556E7465 		.string	"Unterminated string"
 2360      726D696E 
 2360      61746564 
 2360      20737472 
 2360      696E6700 
 2361              	.LC19:
 2362 0130 4E6F206D 		.string	"No memory"
 2362      656D6F72 
 2362      7900
 2363              	.LC20:
 2364 013a 456D7074 		.string	"Empty string"
 2364      79207374 
 2364      72696E67 
 2364      00
 2365              	.LC21:
 2366 0147 4F646420 		.string	"Odd number of digits"
 2366      6E756D62 
 2366      6572206F 
 2366      66206469 
 2366      67697473 
 2367              	.LC22:
 2368 015c 43616E6E 		.string	"Cannot load file"
 2368      6F74206C 
 2368      6F616420 
 2368      66696C65 
 2368      00
 2369              	.LC23:
 2370 016d 43616E6E 		.string	"Cannot save file"
 2370      6F742073 
 2370      61766520 
 2370      66696C65 
 2370      00
 2371              	.LC24:
 2372 017e 42616420 		.string	"Bad arguments"
 2372      61726775 
 2372      6D656E74 
 2372      7300
 2373 018c 00000000 		.align 32
 2373      00000000 
 2373      00000000 
 2373      00000000 
 2373      00000000 
 2376              	errMessages:
 2377 01a0 00000000 		.quad	0
 2377      00000000 
 2378 01a8 00000000 		.quad	0
 2378      00000000 
 2379 01b0 00000000 		.quad	.LC14
 2379      00000000 
 2380 01b8 00000000 		.quad	.LC15
 2380      00000000 
 2381 01c0 00000000 		.quad	.LC16
 2381      00000000 
 2382 01c8 00000000 		.quad	.LC17
 2382      00000000 
 2383 01d0 00000000 		.quad	.LC18
 2383      00000000 
 2384 01d8 00000000 		.quad	.LC19
 2384      00000000 
 2385 01e0 00000000 		.quad	.LC20
 2385      00000000 
 2386 01e8 00000000 		.quad	.LC21
 2386      00000000 
 2387 01f0 00000000 		.quad	.LC22
 2387      00000000 
 2388 01f8 00000000 		.quad	.LC23
 2388      00000000 
 2389 0200 00000000 		.quad	.LC24
 2389      00000000 
 2390              	.LC25:
 2391 0208 646F5265 		.string	"doRead()"
 2391      61642829 
 2391      00
 2392              	.LC26:
 2393 0211 4261666F 		.string	"Bafoon"
 2393      6F6E00
 2394              		.text
 2396              	doRead:
 2397              	.LFB19:
 455:final_with_print.c **** 
 456:final_with_print.c **** static const char *const errMessages[] = {
 457:final_with_print.c **** 	NULL,
 458:final_with_print.c **** 	NULL,
 459:final_with_print.c **** 	"Unparseable hex number",
 460:final_with_print.c **** 	"Channel out of range",
 461:final_with_print.c **** 	"Conduit out of range",
 462:final_with_print.c **** 	"Illegal character",
 463:final_with_print.c **** 	"Unterminated string",
 464:final_with_print.c **** 	"No memory",
 465:final_with_print.c **** 	"Empty string",
 466:final_with_print.c **** 	"Odd number of digits",
 467:final_with_print.c **** 	"Cannot load file",
 468:final_with_print.c **** 	"Cannot save file",
 469:final_with_print.c **** 	"Bad arguments"
 470:final_with_print.c **** };
 471:final_with_print.c **** 
 472:final_with_print.c **** typedef enum {
 473:final_with_print.c **** 	FLP_SUCCESS,
 474:final_with_print.c **** 	FLP_LIBERR,
 475:final_with_print.c **** 	FLP_BAD_HEX,
 476:final_with_print.c **** 	FLP_CHAN_RANGE,
 477:final_with_print.c **** 	FLP_CONDUIT_RANGE,
 478:final_with_print.c **** 	FLP_ILL_CHAR,
 479:final_with_print.c **** 	FLP_UNTERM_STRING,
 480:final_with_print.c **** 	FLP_NO_MEMORY,
 481:final_with_print.c **** 	FLP_EMPTY_STRING,
 482:final_with_print.c **** 	FLP_ODD_DIGITS,
 483:final_with_print.c **** 	FLP_CANNOT_LOAD,
 484:final_with_print.c **** 	FLP_CANNOT_SAVE,
 485:final_with_print.c **** 	FLP_ARGS
 486:final_with_print.c **** } ReturnCode;
 487:final_with_print.c **** 
 488:final_with_print.c **** static ReturnCode doRead(
 489:final_with_print.c **** 	struct FLContext *handle, uint8 chan, uint32 length, FILE *destFile, uint16 *checksum,
 490:final_with_print.c **** 	const char **error)
 491:final_with_print.c **** {
 2398              		.loc 1 491 0 is_stmt 1
 2399              		.cfi_startproc
 2400 1b08 55       		pushq	%rbp
 2401              		.cfi_def_cfa_offset 16
 2402              		.cfi_offset 6, -16
 2403 1b09 4889E5   		movq	%rsp, %rbp
 2404              		.cfi_def_cfa_register 6
 2405 1b0c 4883EC60 		subq	$96, %rsp
 2406 1b10 48897DC8 		movq	%rdi, -56(%rbp)
 2407 1b14 89F0     		movl	%esi, %eax
 2408 1b16 8955C0   		movl	%edx, -64(%rbp)
 2409 1b19 48894DB8 		movq	%rcx, -72(%rbp)
 2410 1b1d 4C8945B0 		movq	%r8, -80(%rbp)
 2411 1b21 4C894DA8 		movq	%r9, -88(%rbp)
 2412 1b25 8845C4   		movb	%al, -60(%rbp)
 2413              		.loc 1 491 0
 2414 1b28 64488B04 		movq	%fs:40, %rax
 2414      25280000 
 2414      00
 2415 1b31 488945F8 		movq	%rax, -8(%rbp)
 2416 1b35 31C0     		xorl	%eax, %eax
 492:final_with_print.c **** 	ReturnCode retVal = FLP_SUCCESS;
 2417              		.loc 1 492 0
 2418 1b37 C745D800 		movl	$0, -40(%rbp)
 2418      000000
 493:final_with_print.c **** 	uint32 bytesWritten;
 494:final_with_print.c **** 	FLStatus fStatus;
 495:final_with_print.c **** 	uint32 chunkSize;
 496:final_with_print.c **** 	const uint8 *recvData;
 497:final_with_print.c **** 	uint32 actualLength;
 498:final_with_print.c **** 	const uint8 *ptr;
 499:final_with_print.c **** 	uint16 csVal = 0x0000;
 2419              		.loc 1 499 0
 2420 1b3e 66C745D2 		movw	$0, -46(%rbp)
 2420      0000
 500:final_with_print.c **** 	#define READ_MAX 65536
 501:final_with_print.c **** 
 502:final_with_print.c **** 	// Read first chunk
 503:final_with_print.c **** 	chunkSize = length >= READ_MAX ? READ_MAX : length;
 2421              		.loc 1 503 0
 2422 1b44 B8000001 		movl	$65536, %eax
 2422      00
 2423 1b49 817DC000 		cmpl	$65536, -64(%rbp)
 2423      000100
 2424 1b50 0F4645C0 		cmovbe	-64(%rbp), %eax
 2425 1b54 8945DC   		movl	%eax, -36(%rbp)
 504:final_with_print.c **** 	fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 2426              		.loc 1 504 0
 2427 1b57 0FB675C4 		movzbl	-60(%rbp), %esi
 2428 1b5b 488B4DA8 		movq	-88(%rbp), %rcx
 2429 1b5f 8B55DC   		movl	-36(%rbp), %edx
 2430 1b62 488B45C8 		movq	-56(%rbp), %rax
 2431 1b66 4989C8   		movq	%rcx, %r8
 2432 1b69 B9000000 		movl	$0, %ecx
 2432      00
 2433 1b6e 4889C7   		movq	%rax, %rdi
 2434 1b71 E8000000 		call	flReadChannelAsyncSubmit
 2434      00
 2435 1b76 8945E0   		movl	%eax, -32(%rbp)
 505:final_with_print.c **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 2436              		.loc 1 505 0
 2437 1b79 837DE000 		cmpl	$0, -32(%rbp)
 2438 1b7d 741D     		je	.L118
 2439              		.loc 1 505 0 is_stmt 0 discriminator 1
 2440 1b7f 488B45A8 		movq	-88(%rbp), %rax
 2441 1b83 BE000000 		movl	$.LC25, %esi
 2441      00
 2442 1b88 4889C7   		movq	%rax, %rdi
 2443 1b8b E8000000 		call	errPrefix
 2443      00
 2444 1b90 C745D801 		movl	$1, -40(%rbp)
 2444      000000
 2445 1b97 E9050200 		jmp	.L119
 2445      00
 2446              	.L118:
 506:final_with_print.c **** 	length = length - chunkSize;
 2447              		.loc 1 506 0 is_stmt 1
 2448 1b9c 8B45DC   		movl	-36(%rbp), %eax
 2449 1b9f 2945C0   		subl	%eax, -64(%rbp)
 507:final_with_print.c **** 
 508:final_with_print.c **** 	while ( length ) {
 2450              		.loc 1 508 0
 2451 1ba2 E9280100 		jmp	.L120
 2451      00
 2452              	.L126:
 509:final_with_print.c **** 		// Read chunk N
 510:final_with_print.c **** 		chunkSize = length >= READ_MAX ? READ_MAX : length;
 2453              		.loc 1 510 0
 2454 1ba7 B8000001 		movl	$65536, %eax
 2454      00
 2455 1bac 817DC000 		cmpl	$65536, -64(%rbp)
 2455      000100
 2456 1bb3 0F4645C0 		cmovbe	-64(%rbp), %eax
 2457 1bb7 8945DC   		movl	%eax, -36(%rbp)
 511:final_with_print.c **** 		fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 2458              		.loc 1 511 0
 2459 1bba 0FB675C4 		movzbl	-60(%rbp), %esi
 2460 1bbe 488B4DA8 		movq	-88(%rbp), %rcx
 2461 1bc2 8B55DC   		movl	-36(%rbp), %edx
 2462 1bc5 488B45C8 		movq	-56(%rbp), %rax
 2463 1bc9 4989C8   		movq	%rcx, %r8
 2464 1bcc B9000000 		movl	$0, %ecx
 2464      00
 2465 1bd1 4889C7   		movq	%rax, %rdi
 2466 1bd4 E8000000 		call	flReadChannelAsyncSubmit
 2466      00
 2467 1bd9 8945E0   		movl	%eax, -32(%rbp)
 512:final_with_print.c **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 2468              		.loc 1 512 0
 2469 1bdc 837DE000 		cmpl	$0, -32(%rbp)
 2470 1be0 741D     		je	.L121
 2471              		.loc 1 512 0 is_stmt 0 discriminator 1
 2472 1be2 488B45A8 		movq	-88(%rbp), %rax
 2473 1be6 BE000000 		movl	$.LC25, %esi
 2473      00
 2474 1beb 4889C7   		movq	%rax, %rdi
 2475 1bee E8000000 		call	errPrefix
 2475      00
 2476 1bf3 C745D801 		movl	$1, -40(%rbp)
 2476      000000
 2477 1bfa E9A20100 		jmp	.L119
 2477      00
 2478              	.L121:
 513:final_with_print.c **** 		length = length - chunkSize;
 2479              		.loc 1 513 0 is_stmt 1
 2480 1bff 8B45DC   		movl	-36(%rbp), %eax
 2481 1c02 2945C0   		subl	%eax, -64(%rbp)
 514:final_with_print.c **** 		printf("Bafoon\n");
 2482              		.loc 1 514 0
 2483 1c05 BF000000 		movl	$.LC26, %edi
 2483      00
 2484 1c0a E8000000 		call	puts
 2484      00
 515:final_with_print.c **** 		
 516:final_with_print.c **** 		// Await chunk N-1
 517:final_with_print.c **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 2485              		.loc 1 517 0
 2486 1c0f 488B7DA8 		movq	-88(%rbp), %rdi
 2487 1c13 488D4DD4 		leaq	-44(%rbp), %rcx
 2488 1c17 488D55D4 		leaq	-44(%rbp), %rdx
 2489 1c1b 488D75E8 		leaq	-24(%rbp), %rsi
 2490 1c1f 488B45C8 		movq	-56(%rbp), %rax
 2491 1c23 4989F8   		movq	%rdi, %r8
 2492 1c26 4889C7   		movq	%rax, %rdi
 2493 1c29 E8000000 		call	flReadChannelAsyncAwait
 2493      00
 2494 1c2e 8945E0   		movl	%eax, -32(%rbp)
 518:final_with_print.c **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 2495              		.loc 1 518 0
 2496 1c31 837DE000 		cmpl	$0, -32(%rbp)
 2497 1c35 741D     		je	.L122
 2498              		.loc 1 518 0 is_stmt 0 discriminator 1
 2499 1c37 488B45A8 		movq	-88(%rbp), %rax
 2500 1c3b BE000000 		movl	$.LC25, %esi
 2500      00
 2501 1c40 4889C7   		movq	%rax, %rdi
 2502 1c43 E8000000 		call	errPrefix
 2502      00
 2503 1c48 C745D801 		movl	$1, -40(%rbp)
 2503      000000
 2504 1c4f E94D0100 		jmp	.L119
 2504      00
 2505              	.L122:
 519:final_with_print.c **** 
 520:final_with_print.c **** 		// Write chunk N-1 to file
 521:final_with_print.c **** 		bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 2506              		.loc 1 521 0 is_stmt 1
 2507 1c54 8B45D4   		movl	-44(%rbp), %eax
 2508 1c57 89C6     		movl	%eax, %esi
 2509 1c59 488B45E8 		movq	-24(%rbp), %rax
 2510 1c5d 488B55B8 		movq	-72(%rbp), %rdx
 2511 1c61 4889D1   		movq	%rdx, %rcx
 2512 1c64 4889F2   		movq	%rsi, %rdx
 2513 1c67 BE010000 		movl	$1, %esi
 2513      00
 2514 1c6c 4889C7   		movq	%rax, %rdi
 2515 1c6f E8000000 		call	fwrite
 2515      00
 2516 1c74 8945E4   		movl	%eax, -28(%rbp)
 522:final_with_print.c **** 		CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 2517              		.loc 1 522 0
 2518 1c77 8B45D4   		movl	-44(%rbp), %eax
 2519 1c7a 3945E4   		cmpl	%eax, -28(%rbp)
 2520 1c7d 741D     		je	.L123
 2521              		.loc 1 522 0 is_stmt 0 discriminator 1
 2522 1c7f 488B45A8 		movq	-88(%rbp), %rax
 2523 1c83 BE000000 		movl	$.LC25, %esi
 2523      00
 2524 1c88 4889C7   		movq	%rax, %rdi
 2525 1c8b E8000000 		call	errPrefix
 2525      00
 2526 1c90 C745D80B 		movl	$11, -40(%rbp)
 2526      000000
 2527 1c97 E9050100 		jmp	.L119
 2527      00
 2528              	.L123:
 523:final_with_print.c **** 
 524:final_with_print.c **** 		// Checksum chunk N-1
 525:final_with_print.c **** 		chunkSize = actualLength;
 2529              		.loc 1 525 0 is_stmt 1
 2530 1c9c 8B45D4   		movl	-44(%rbp), %eax
 2531 1c9f 8945DC   		movl	%eax, -36(%rbp)
 526:final_with_print.c **** 		ptr = recvData;
 2532              		.loc 1 526 0
 2533 1ca2 488B45E8 		movq	-24(%rbp), %rax
 2534 1ca6 488945F0 		movq	%rax, -16(%rbp)
 527:final_with_print.c **** 		while ( chunkSize-- ) {
 2535              		.loc 1 527 0
 2536 1caa EB16     		jmp	.L124
 2537              	.L125:
 528:final_with_print.c **** 			csVal = (uint16)(csVal + *ptr++);
 2538              		.loc 1 528 0
 2539 1cac 488B45F0 		movq	-16(%rbp), %rax
 2540 1cb0 488D5001 		leaq	1(%rax), %rdx
 2541 1cb4 488955F0 		movq	%rdx, -16(%rbp)
 2542 1cb8 0FB600   		movzbl	(%rax), %eax
 2543 1cbb 0FB6C0   		movzbl	%al, %eax
 2544 1cbe 660145D2 		addw	%ax, -46(%rbp)
 2545              	.L124:
 527:final_with_print.c **** 		while ( chunkSize-- ) {
 2546              		.loc 1 527 0
 2547 1cc2 8B45DC   		movl	-36(%rbp), %eax
 2548 1cc5 8D50FF   		leal	-1(%rax), %edx
 2549 1cc8 8955DC   		movl	%edx, -36(%rbp)
 2550 1ccb 85C0     		testl	%eax, %eax
 2551 1ccd 75DD     		jne	.L125
 2552              	.L120:
 508:final_with_print.c **** 		// Read chunk N
 2553              		.loc 1 508 0
 2554 1ccf 837DC000 		cmpl	$0, -64(%rbp)
 2555 1cd3 0F85CEFE 		jne	.L126
 2555      FFFF
 529:final_with_print.c **** 		}
 530:final_with_print.c **** 	}
 531:final_with_print.c **** 
 532:final_with_print.c **** 	// Await last chunk
 533:final_with_print.c **** 	fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 2556              		.loc 1 533 0
 2557 1cd9 488B7DA8 		movq	-88(%rbp), %rdi
 2558 1cdd 488D4DD4 		leaq	-44(%rbp), %rcx
 2559 1ce1 488D55D4 		leaq	-44(%rbp), %rdx
 2560 1ce5 488D75E8 		leaq	-24(%rbp), %rsi
 2561 1ce9 488B45C8 		movq	-56(%rbp), %rax
 2562 1ced 4989F8   		movq	%rdi, %r8
 2563 1cf0 4889C7   		movq	%rax, %rdi
 2564 1cf3 E8000000 		call	flReadChannelAsyncAwait
 2564      00
 2565 1cf8 8945E0   		movl	%eax, -32(%rbp)
 534:final_with_print.c **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 2566              		.loc 1 534 0
 2567 1cfb 837DE000 		cmpl	$0, -32(%rbp)
 2568 1cff 741D     		je	.L127
 2569              		.loc 1 534 0 is_stmt 0 discriminator 1
 2570 1d01 488B45A8 		movq	-88(%rbp), %rax
 2571 1d05 BE000000 		movl	$.LC25, %esi
 2571      00
 2572 1d0a 4889C7   		movq	%rax, %rdi
 2573 1d0d E8000000 		call	errPrefix
 2573      00
 2574 1d12 C745D801 		movl	$1, -40(%rbp)
 2574      000000
 2575 1d19 E9830000 		jmp	.L119
 2575      00
 2576              	.L127:
 535:final_with_print.c **** 	
 536:final_with_print.c **** 	// Write last chunk to file
 537:final_with_print.c **** 	bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 2577              		.loc 1 537 0 is_stmt 1
 2578 1d1e 8B45D4   		movl	-44(%rbp), %eax
 2579 1d21 89C6     		movl	%eax, %esi
 2580 1d23 488B45E8 		movq	-24(%rbp), %rax
 2581 1d27 488B55B8 		movq	-72(%rbp), %rdx
 2582 1d2b 4889D1   		movq	%rdx, %rcx
 2583 1d2e 4889F2   		movq	%rsi, %rdx
 2584 1d31 BE010000 		movl	$1, %esi
 2584      00
 2585 1d36 4889C7   		movq	%rax, %rdi
 2586 1d39 E8000000 		call	fwrite
 2586      00
 2587 1d3e 8945E4   		movl	%eax, -28(%rbp)
 538:final_with_print.c **** 	CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 2588              		.loc 1 538 0
 2589 1d41 8B45D4   		movl	-44(%rbp), %eax
 2590 1d44 3945E4   		cmpl	%eax, -28(%rbp)
 2591 1d47 741A     		je	.L128
 2592              		.loc 1 538 0 is_stmt 0 discriminator 1
 2593 1d49 488B45A8 		movq	-88(%rbp), %rax
 2594 1d4d BE000000 		movl	$.LC25, %esi
 2594      00
 2595 1d52 4889C7   		movq	%rax, %rdi
 2596 1d55 E8000000 		call	errPrefix
 2596      00
 2597 1d5a C745D80B 		movl	$11, -40(%rbp)
 2597      000000
 2598 1d61 EB3E     		jmp	.L119
 2599              	.L128:
 539:final_with_print.c **** 
 540:final_with_print.c **** 	// Checksum last chunk
 541:final_with_print.c **** 	chunkSize = actualLength;
 2600              		.loc 1 541 0 is_stmt 1
 2601 1d63 8B45D4   		movl	-44(%rbp), %eax
 2602 1d66 8945DC   		movl	%eax, -36(%rbp)
 542:final_with_print.c **** 	ptr = recvData;
 2603              		.loc 1 542 0
 2604 1d69 488B45E8 		movq	-24(%rbp), %rax
 2605 1d6d 488945F0 		movq	%rax, -16(%rbp)
 543:final_with_print.c **** 	while ( chunkSize-- ) {
 2606              		.loc 1 543 0
 2607 1d71 EB16     		jmp	.L129
 2608              	.L130:
 544:final_with_print.c **** 		csVal = (uint16)(csVal + *ptr++);
 2609              		.loc 1 544 0
 2610 1d73 488B45F0 		movq	-16(%rbp), %rax
 2611 1d77 488D5001 		leaq	1(%rax), %rdx
 2612 1d7b 488955F0 		movq	%rdx, -16(%rbp)
 2613 1d7f 0FB600   		movzbl	(%rax), %eax
 2614 1d82 0FB6C0   		movzbl	%al, %eax
 2615 1d85 660145D2 		addw	%ax, -46(%rbp)
 2616              	.L129:
 543:final_with_print.c **** 	while ( chunkSize-- ) {
 2617              		.loc 1 543 0
 2618 1d89 8B45DC   		movl	-36(%rbp), %eax
 2619 1d8c 8D50FF   		leal	-1(%rax), %edx
 2620 1d8f 8955DC   		movl	%edx, -36(%rbp)
 2621 1d92 85C0     		testl	%eax, %eax
 2622 1d94 75DD     		jne	.L130
 545:final_with_print.c **** 	}
 546:final_with_print.c **** 	
 547:final_with_print.c **** 	// Return checksum to caller
 548:final_with_print.c **** 	*checksum = csVal;
 2623              		.loc 1 548 0
 2624 1d96 488B45B0 		movq	-80(%rbp), %rax
 2625 1d9a 0FB755D2 		movzwl	-46(%rbp), %edx
 2626 1d9e 668910   		movw	%dx, (%rax)
 2627              	.L119:
 549:final_with_print.c **** 	cleanup:
 550:final_with_print.c **** 	return retVal;
 2628              		.loc 1 550 0
 2629 1da1 8B45D8   		movl	-40(%rbp), %eax
 551:final_with_print.c **** }
 2630              		.loc 1 551 0
 2631 1da4 488B4DF8 		movq	-8(%rbp), %rcx
 2632 1da8 6448330C 		xorq	%fs:40, %rcx
 2632      25280000 
 2632      00
 2633 1db1 7405     		je	.L132
 2634 1db3 E8000000 		call	__stack_chk_fail
 2634      00
 2635              	.L132:
 2636 1db8 C9       		leave
 2637              		.cfi_def_cfa 7, 8
 2638 1db9 C3       		ret
 2639              		.cfi_endproc
 2640              	.LFE19:
 2642              		.section	.rodata
 2643              	.LC27:
 2644 0218 646F5772 		.string	"doWrite()"
 2644      69746528 
 2644      2900
 2645              		.text
 2647              	doWrite:
 2648              	.LFB20:
 552:final_with_print.c **** 
 553:final_with_print.c **** static ReturnCode doWrite(
 554:final_with_print.c **** 	struct FLContext *handle, uint8 chan, FILE *srcFile, size_t *length, uint16 *checksum,
 555:final_with_print.c **** 	const char **error)
 556:final_with_print.c **** {
 2649              		.loc 1 556 0
 2650              		.cfi_startproc
 2651 1dba 55       		pushq	%rbp
 2652              		.cfi_def_cfa_offset 16
 2653              		.cfi_offset 6, -16
 2654 1dbb 4889E5   		movq	%rsp, %rbp
 2655              		.cfi_def_cfa_register 6
 2656 1dbe 4881EC70 		subq	$65648, %rsp
 2656      000100
 2657 1dc5 4889BDB8 		movq	%rdi, -65608(%rbp)
 2657      FFFEFF
 2658 1dcc 89F0     		movl	%esi, %eax
 2659 1dce 488995A8 		movq	%rdx, -65624(%rbp)
 2659      FFFEFF
 2660 1dd5 48898DA0 		movq	%rcx, -65632(%rbp)
 2660      FFFEFF
 2661 1ddc 4C898598 		movq	%r8, -65640(%rbp)
 2661      FFFEFF
 2662 1de3 4C898D90 		movq	%r9, -65648(%rbp)
 2662      FFFEFF
 2663 1dea 8885B4FF 		movb	%al, -65612(%rbp)
 2663      FEFF
 2664              		.loc 1 556 0
 2665 1df0 64488B04 		movq	%fs:40, %rax
 2665      25280000 
 2665      00
 2666 1df9 488945F8 		movq	%rax, -8(%rbp)
 2667 1dfd 31C0     		xorl	%eax, %eax
 557:final_with_print.c **** 	ReturnCode retVal = FLP_SUCCESS;
 2668              		.loc 1 557 0
 2669 1dff C785C8FF 		movl	$0, -65592(%rbp)
 2669      FEFF0000 
 2669      0000
 558:final_with_print.c **** 	size_t bytesRead, i;
 559:final_with_print.c **** 	FLStatus fStatus;
 560:final_with_print.c **** 	const uint8 *ptr;
 561:final_with_print.c **** 	uint16 csVal = 0x0000;
 2670              		.loc 1 561 0
 2671 1e09 66C785C6 		movw	$0, -65594(%rbp)
 2671      FFFEFF00 
 2671      00
 562:final_with_print.c **** 	size_t lenVal = 0;
 2672              		.loc 1 562 0
 2673 1e12 48C785E0 		movq	$0, -65568(%rbp)
 2673      FFFEFF00 
 2673      000000
 2674              	.L139:
 563:final_with_print.c **** 	#define WRITE_MAX (65536 - 5)
 564:final_with_print.c **** 	uint8 buffer[WRITE_MAX];
 565:final_with_print.c **** 
 566:final_with_print.c **** 	do {
 567:final_with_print.c **** 		// Read Nth chunk
 568:final_with_print.c **** 		bytesRead = fread(buffer, 1, WRITE_MAX, srcFile);
 2675              		.loc 1 568 0
 2676 1e1d 488B95A8 		movq	-65624(%rbp), %rdx
 2676      FFFEFF
 2677 1e24 488D85F0 		leaq	-65552(%rbp), %rax
 2677      FFFEFF
 2678 1e2b 4889D1   		movq	%rdx, %rcx
 2679 1e2e BAFBFF00 		movl	$65531, %edx
 2679      00
 2680 1e33 BE010000 		movl	$1, %esi
 2680      00
 2681 1e38 4889C7   		movq	%rax, %rdi
 2682 1e3b E8000000 		call	fread
 2682      00
 2683 1e40 488985E8 		movq	%rax, -65560(%rbp)
 2683      FFFEFF
 569:final_with_print.c **** 		if ( bytesRead ) {
 2684              		.loc 1 569 0
 2685 1e47 4883BDE8 		cmpq	$0, -65560(%rbp)
 2685      FFFEFF00 
 2686 1e4f 0F84C200 		je	.L134
 2686      0000
 570:final_with_print.c **** 			// Update running total
 571:final_with_print.c **** 			lenVal = lenVal + bytesRead;
 2687              		.loc 1 571 0
 2688 1e55 488B85E8 		movq	-65560(%rbp), %rax
 2688      FFFEFF
 2689 1e5c 480185E0 		addq	%rax, -65568(%rbp)
 2689      FFFEFF
 572:final_with_print.c **** 
 573:final_with_print.c **** 			// Submit Nth chunk
 574:final_with_print.c **** 			fStatus = flWriteChannelAsync(handle, chan, bytesRead, buffer, error);
 2690              		.loc 1 574 0
 2691 1e63 0FB6B5B4 		movzbl	-65612(%rbp), %esi
 2691      FFFEFF
 2692 1e6a 488BBD90 		movq	-65648(%rbp), %rdi
 2692      FFFEFF
 2693 1e71 488D8DF0 		leaq	-65552(%rbp), %rcx
 2693      FFFEFF
 2694 1e78 488B95E8 		movq	-65560(%rbp), %rdx
 2694      FFFEFF
 2695 1e7f 488B85B8 		movq	-65608(%rbp), %rax
 2695      FFFEFF
 2696 1e86 4989F8   		movq	%rdi, %r8
 2697 1e89 4889C7   		movq	%rax, %rdi
 2698 1e8c E8000000 		call	flWriteChannelAsync
 2698      00
 2699 1e91 8985CCFF 		movl	%eax, -65588(%rbp)
 2699      FEFF
 575:final_with_print.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 2700              		.loc 1 575 0
 2701 1e97 83BDCCFF 		cmpl	$0, -65588(%rbp)
 2701      FEFF00
 2702 1e9e 7423     		je	.L135
 2703              		.loc 1 575 0 is_stmt 0 discriminator 1
 2704 1ea0 488B8590 		movq	-65648(%rbp), %rax
 2704      FFFEFF
 2705 1ea7 BE000000 		movl	$.LC27, %esi
 2705      00
 2706 1eac 4889C7   		movq	%rax, %rdi
 2707 1eaf E8000000 		call	errPrefix
 2707      00
 2708 1eb4 C785C8FF 		movl	$1, -65592(%rbp)
 2708      FEFF0100 
 2708      0000
 2709 1ebe E9CF0000 		jmp	.L136
 2709      00
 2710              	.L135:
 576:final_with_print.c **** 
 577:final_with_print.c **** 			// Checksum Nth chunk
 578:final_with_print.c **** 			i = bytesRead;
 2711              		.loc 1 578 0 is_stmt 1
 2712 1ec3 488B85E8 		movq	-65560(%rbp), %rax
 2712      FFFEFF
 2713 1eca 488985D0 		movq	%rax, -65584(%rbp)
 2713      FFFEFF
 579:final_with_print.c **** 			ptr = buffer;
 2714              		.loc 1 579 0
 2715 1ed1 488D85F0 		leaq	-65552(%rbp), %rax
 2715      FFFEFF
 2716 1ed8 488985D8 		movq	%rax, -65576(%rbp)
 2716      FFFEFF
 580:final_with_print.c **** 			while ( i-- ) {
 2717              		.loc 1 580 0
 2718 1edf EB1F     		jmp	.L137
 2719              	.L138:
 581:final_with_print.c **** 				csVal = (uint16)(csVal + *ptr++);
 2720              		.loc 1 581 0
 2721 1ee1 488B85D8 		movq	-65576(%rbp), %rax
 2721      FFFEFF
 2722 1ee8 488D5001 		leaq	1(%rax), %rdx
 2723 1eec 488995D8 		movq	%rdx, -65576(%rbp)
 2723      FFFEFF
 2724 1ef3 0FB600   		movzbl	(%rax), %eax
 2725 1ef6 0FB6C0   		movzbl	%al, %eax
 2726 1ef9 660185C6 		addw	%ax, -65594(%rbp)
 2726      FFFEFF
 2727              	.L137:
 580:final_with_print.c **** 			while ( i-- ) {
 2728              		.loc 1 580 0
 2729 1f00 488B85D0 		movq	-65584(%rbp), %rax
 2729      FFFEFF
 2730 1f07 488D50FF 		leaq	-1(%rax), %rdx
 2731 1f0b 488995D0 		movq	%rdx, -65584(%rbp)
 2731      FFFEFF
 2732 1f12 4885C0   		testq	%rax, %rax
 2733 1f15 75CA     		jne	.L138
 2734              	.L134:
 582:final_with_print.c **** 			}
 583:final_with_print.c **** 		}
 584:final_with_print.c **** 	} while ( bytesRead == WRITE_MAX );
 2735              		.loc 1 584 0
 2736 1f17 4881BDE8 		cmpq	$65531, -65560(%rbp)
 2736      FFFEFFFB 
 2736      FF0000
 2737 1f22 0F84F5FE 		je	.L139
 2737      FFFF
 585:final_with_print.c **** 
 586:final_with_print.c **** 	// Wait for writes to be received. This is optional, but it's only fair if we're benchmarking to
 587:final_with_print.c **** 	// actually wait for the work to be completed.
 588:final_with_print.c **** 	fStatus = flAwaitAsyncWrites(handle, error);
 2738              		.loc 1 588 0
 2739 1f28 488B9590 		movq	-65648(%rbp), %rdx
 2739      FFFEFF
 2740 1f2f 488B85B8 		movq	-65608(%rbp), %rax
 2740      FFFEFF
 2741 1f36 4889D6   		movq	%rdx, %rsi
 2742 1f39 4889C7   		movq	%rax, %rdi
 2743 1f3c E8000000 		call	flAwaitAsyncWrites
 2743      00
 2744 1f41 8985CCFF 		movl	%eax, -65588(%rbp)
 2744      FEFF
 589:final_with_print.c **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 2745              		.loc 1 589 0
 2746 1f47 83BDCCFF 		cmpl	$0, -65588(%rbp)
 2746      FEFF00
 2747 1f4e 7420     		je	.L140
 2748              		.loc 1 589 0 is_stmt 0 discriminator 1
 2749 1f50 488B8590 		movq	-65648(%rbp), %rax
 2749      FFFEFF
 2750 1f57 BE000000 		movl	$.LC27, %esi
 2750      00
 2751 1f5c 4889C7   		movq	%rax, %rdi
 2752 1f5f E8000000 		call	errPrefix
 2752      00
 2753 1f64 C785C8FF 		movl	$1, -65592(%rbp)
 2753      FEFF0100 
 2753      0000
 2754 1f6e EB22     		jmp	.L136
 2755              	.L140:
 590:final_with_print.c **** 
 591:final_with_print.c **** 	// Return checksum & length to caller
 592:final_with_print.c **** 	*checksum = csVal;
 2756              		.loc 1 592 0 is_stmt 1
 2757 1f70 488B8598 		movq	-65640(%rbp), %rax
 2757      FFFEFF
 2758 1f77 0FB795C6 		movzwl	-65594(%rbp), %edx
 2758      FFFEFF
 2759 1f7e 668910   		movw	%dx, (%rax)
 593:final_with_print.c **** 	*length = lenVal;
 2760              		.loc 1 593 0
 2761 1f81 488B85A0 		movq	-65632(%rbp), %rax
 2761      FFFEFF
 2762 1f88 488B95E0 		movq	-65568(%rbp), %rdx
 2762      FFFEFF
 2763 1f8f 488910   		movq	%rdx, (%rax)
 2764              	.L136:
 594:final_with_print.c **** 	cleanup:
 595:final_with_print.c **** 	return retVal;
 2765              		.loc 1 595 0
 2766 1f92 8B85C8FF 		movl	-65592(%rbp), %eax
 2766      FEFF
 596:final_with_print.c **** }
 2767              		.loc 1 596 0
 2768 1f98 488B4DF8 		movq	-8(%rbp), %rcx
 2769 1f9c 6448330C 		xorq	%fs:40, %rcx
 2769      25280000 
 2769      00
 2770 1fa5 7405     		je	.L142
 2771 1fa7 E8000000 		call	__stack_chk_fail
 2771      00
 2772              	.L142:
 2773 1fac C9       		leave
 2774              		.cfi_def_cfa 7, 8
 2775 1fad C3       		ret
 2776              		.cfi_endproc
 2777              	.LFE20:
 2779              		.section	.rodata
 2780              	.LC28:
 2781 0222 776200   		.string	"wb"
 2782 0225 000000   		.align 8
 2783              	.LC31:
 2784 0228 52656164 		.string	"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n"
 2784      20256420 
 2784      62797465 
 2784      73202863 
 2784      6865636B 
 2785              	.LC32:
 2786 0265 726200   		.string	"rb"
 2787              		.align 8
 2788              	.LC33:
 2789 0268 57726F74 		.string	"Wrote %zu bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n"
 2789      6520257A 
 2789      75206279 
 2789      74657320 
 2789      28636865 
 2790              	.LC34:
 2791 02a6 25732061 		.string	"%s at column %d\n  %s\n  "
 2791      7420636F 
 2791      6C756D6E 
 2791      2025640A 
 2791      20202573 
 2792              	.LC35:
 2793 02be 5E0A00   		.string	"^\n"
 2794              		.text
 2796              	parseLine:
 2797              	.LFB21:
 597:final_with_print.c **** 
 598:final_with_print.c **** static int parseLine(struct FLContext *handle, const char *line, const char **error) {
 2798              		.loc 1 598 0
 2799              		.cfi_startproc
 2800 1fae 55       		pushq	%rbp
 2801              		.cfi_def_cfa_offset 16
 2802              		.cfi_offset 6, -16
 2803 1faf 4889E5   		movq	%rsp, %rbp
 2804              		.cfi_def_cfa_register 6
 2805 1fb2 4881EC10 		subq	$272, %rsp
 2805      010000
 2806 1fb9 4889BD08 		movq	%rdi, -248(%rbp)
 2806      FFFFFF
 2807 1fc0 4889B500 		movq	%rsi, -256(%rbp)
 2807      FFFFFF
 2808 1fc7 488995F8 		movq	%rdx, -264(%rbp)
 2808      FEFFFF
 2809              		.loc 1 598 0
 2810 1fce 64488B04 		movq	%fs:40, %rax
 2810      25280000 
 2810      00
 2811 1fd7 488945F8 		movq	%rax, -8(%rbp)
 2812 1fdb 31C0     		xorl	%eax, %eax
 599:final_with_print.c **** 	ReturnCode retVal = FLP_SUCCESS, status;
 2813              		.loc 1 599 0
 2814 1fdd C78514FF 		movl	$0, -236(%rbp)
 2814      FFFF0000 
 2814      0000
 600:final_with_print.c **** 	FLStatus fStatus;
 601:final_with_print.c **** 	struct Buffer dataFromFPGA = {0,};
 2815              		.loc 1 601 0
 2816 1fe7 48C745D0 		movq	$0, -48(%rbp)
 2816      00000000 
 2817 1fef 48C745D8 		movq	$0, -40(%rbp)
 2817      00000000 
 2818 1ff7 48C745E0 		movq	$0, -32(%rbp)
 2818      00000000 
 2819 1fff 48C745E8 		movq	$0, -24(%rbp)
 2819      00000000 
 602:final_with_print.c **** 	BufferStatus bStatus;
 603:final_with_print.c **** 	uint8 *data = NULL;
 2820              		.loc 1 603 0
 2821 2007 48C78548 		movq	$0, -184(%rbp)
 2821      FFFFFF00 
 2821      000000
 604:final_with_print.c **** 	char *fileName = NULL;
 2822              		.loc 1 604 0
 2823 2012 48C78550 		movq	$0, -176(%rbp)
 2823      FFFFFF00 
 2823      000000
 605:final_with_print.c **** 	FILE *file = NULL;
 2824              		.loc 1 605 0
 2825 201d 48C78558 		movq	$0, -168(%rbp)
 2825      FFFFFF00 
 2825      000000
 606:final_with_print.c **** 	double totalTime, speed;
 607:final_with_print.c **** 	#ifdef WIN32
 608:final_with_print.c **** 	LARGE_INTEGER tvStart, tvEnd, freq;
 609:final_with_print.c **** 	DWORD_PTR mask = 1;
 610:final_with_print.c **** 	SetThreadAffinityMask(GetCurrentThread(), mask);
 611:final_with_print.c **** 	QueryPerformanceFrequency(&freq);
 612:final_with_print.c **** 	#else
 613:final_with_print.c **** 	struct timeval tvStart, tvEnd;
 614:final_with_print.c **** 	long long startTime, endTime;
 615:final_with_print.c **** 	#endif
 616:final_with_print.c **** 	bStatus = bufInitialise(&dataFromFPGA, 1024, 0x00, error);
 2826              		.loc 1 616 0
 2827 2028 488B95F8 		movq	-264(%rbp), %rdx
 2827      FEFFFF
 2828 202f 488D45D0 		leaq	-48(%rbp), %rax
 2829 2033 4889D1   		movq	%rdx, %rcx
 2830 2036 BA000000 		movl	$0, %edx
 2830      00
 2831 203b BE000400 		movl	$1024, %esi
 2831      00
 2832 2040 4889C7   		movq	%rax, %rdi
 2833 2043 E8000000 		call	bufInitialise
 2833      00
 2834 2048 898520FF 		movl	%eax, -224(%rbp)
 2834      FFFF
 617:final_with_print.c **** 	CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 2835              		.loc 1 617 0
 2836 204e 83BD20FF 		cmpl	$0, -224(%rbp)
 2836      FFFF00
 2837 2055 740F     		je	.L144
 2838              		.loc 1 617 0 is_stmt 0 discriminator 1
 2839 2057 C78514FF 		movl	$1, -236(%rbp)
 2839      FFFF0100 
 2839      0000
 2840 2061 E9E40E00 		jmp	.L145
 2840      00
 2841              	.L144:
 618:final_with_print.c **** 	ptr = line;
 2842              		.loc 1 618 0 is_stmt 1
 2843 2066 488B8500 		movq	-256(%rbp), %rax
 2843      FFFFFF
 2844 206d 48890500 		movq	%rax, ptr(%rip)
 2844      000000
 619:final_with_print.c **** 	do {
 620:final_with_print.c **** 		while ( *ptr == ';' ) {
 2845              		.loc 1 620 0
 2846 2074 EB12     		jmp	.L146
 2847              	.L147:
 621:final_with_print.c **** 			ptr++;
 2848              		.loc 1 621 0
 2849 2076 488B0500 		movq	ptr(%rip), %rax
 2849      000000
 2850 207d 4883C001 		addq	$1, %rax
 2851 2081 48890500 		movq	%rax, ptr(%rip)
 2851      000000
 2852              	.L146:
 620:final_with_print.c **** 			ptr++;
 2853              		.loc 1 620 0
 2854 2088 488B0500 		movq	ptr(%rip), %rax
 2854      000000
 2855 208f 0FB600   		movzbl	(%rax), %eax
 2856 2092 3C3B     		cmpb	$59, %al
 2857 2094 74E0     		je	.L147
 622:final_with_print.c **** 		}
 623:final_with_print.c **** 		switch ( *ptr ) {
 2858              		.loc 1 623 0
 2859 2096 488B0500 		movq	ptr(%rip), %rax
 2859      000000
 2860 209d 0FB600   		movzbl	(%rax), %eax
 2861 20a0 0FBEC0   		movsbl	%al, %eax
 2862 20a3 83F872   		cmpl	$114, %eax
 2863 20a6 7417     		je	.L149
 2864 20a8 83F877   		cmpl	$119, %eax
 2865 20ab 0F84C306 		je	.L150
 2865      0000
 2866 20b1 83F82B   		cmpl	$43, %eax
 2867 20b4 0F84530D 		je	.L151
 2867      0000
 2868 20ba E93A0E00 		jmp	.L221
 2868      00
 2869              	.L149:
 2870              	.LBB32:
 624:final_with_print.c **** 			case 'r':{
 625:final_with_print.c **** 				uint32 chan;
 626:final_with_print.c **** 				uint32 length = 1;
 2871              		.loc 1 626 0
 2872 20bf C78518FF 		movl	$1, -232(%rbp)
 2872      FFFF0100 
 2872      0000
 627:final_with_print.c **** 				char *end;
 628:final_with_print.c **** 				ptr++;
 2873              		.loc 1 628 0
 2874 20c9 488B0500 		movq	ptr(%rip), %rax
 2874      000000
 2875 20d0 4883C001 		addq	$1, %rax
 2876 20d4 48890500 		movq	%rax, ptr(%rip)
 2876      000000
 629:final_with_print.c **** 
 630:final_with_print.c **** 			// Get the channel to be read:
 631:final_with_print.c **** 				errno = 0;
 2877              		.loc 1 631 0
 2878 20db E8000000 		call	__errno_location
 2878      00
 2879 20e0 C7000000 		movl	$0, (%rax)
 2879      0000
 632:final_with_print.c **** 				chan = (uint32)strtoul(ptr, &end, 16);
 2880              		.loc 1 632 0
 2881 20e6 488B0500 		movq	ptr(%rip), %rax
 2881      000000
 2882 20ed 488D8D40 		leaq	-192(%rbp), %rcx
 2882      FFFFFF
 2883 20f4 BA100000 		movl	$16, %edx
 2883      00
 2884 20f9 4889CE   		movq	%rcx, %rsi
 2885 20fc 4889C7   		movq	%rax, %rdi
 2886 20ff E8000000 		call	strtoul
 2886      00
 2887 2104 898530FF 		movl	%eax, -208(%rbp)
 2887      FFFF
 633:final_with_print.c **** 				CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 2888              		.loc 1 633 0
 2889 210a E8000000 		call	__errno_location
 2889      00
 2890 210f 8B00     		movl	(%rax), %eax
 2891 2111 85C0     		testl	%eax, %eax
 2892 2113 740F     		je	.L152
 2893              		.loc 1 633 0 is_stmt 0 discriminator 1
 2894 2115 C78514FF 		movl	$2, -236(%rbp)
 2894      FFFF0200 
 2894      0000
 2895 211f E9260E00 		jmp	.L145
 2895      00
 2896              	.L152:
 634:final_with_print.c **** 
 635:final_with_print.c **** 			// Ensure that it's 0-127
 636:final_with_print.c **** 				CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 2897              		.loc 1 636 0 is_stmt 1
 2898 2124 83BD30FF 		cmpl	$127, -208(%rbp)
 2898      FFFF7F
 2899 212b 760F     		jbe	.L154
 2900              		.loc 1 636 0 is_stmt 0 discriminator 1
 2901 212d C78514FF 		movl	$3, -236(%rbp)
 2901      FFFF0300 
 2901      0000
 2902 2137 E90E0E00 		jmp	.L145
 2902      00
 2903              	.L154:
 637:final_with_print.c **** 				ptr = end;
 2904              		.loc 1 637 0 is_stmt 1
 2905 213c 488B8540 		movq	-192(%rbp), %rax
 2905      FFFFFF
 2906 2143 48890500 		movq	%rax, ptr(%rip)
 2906      000000
 638:final_with_print.c **** 
 639:final_with_print.c **** 			// Only three valid chars at this point:
 640:final_with_print.c **** 				CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 2907              		.loc 1 640 0
 2908 214a 488B0500 		movq	ptr(%rip), %rax
 2908      000000
 2909 2151 0FB600   		movzbl	(%rax), %eax
 2910 2154 84C0     		testb	%al, %al
 2911 2156 742B     		je	.L155
 2912              		.loc 1 640 0 is_stmt 0 discriminator 1
 2913 2158 488B0500 		movq	ptr(%rip), %rax
 2913      000000
 2914 215f 0FB600   		movzbl	(%rax), %eax
 2915 2162 3C3B     		cmpb	$59, %al
 2916 2164 741D     		je	.L155
 2917              		.loc 1 640 0 discriminator 2
 2918 2166 488B0500 		movq	ptr(%rip), %rax
 2918      000000
 2919 216d 0FB600   		movzbl	(%rax), %eax
 2920 2170 3C20     		cmpb	$32, %al
 2921 2172 740F     		je	.L155
 2922              		.loc 1 640 0 discriminator 3
 2923 2174 C78514FF 		movl	$5, -236(%rbp)
 2923      FFFF0500 
 2923      0000
 2924 217e E9C70D00 		jmp	.L145
 2924      00
 2925              	.L155:
 641:final_with_print.c **** 
 642:final_with_print.c **** 				if ( *ptr == ' ' ) {
 2926              		.loc 1 642 0 is_stmt 1
 2927 2183 488B0500 		movq	ptr(%rip), %rax
 2927      000000
 2928 218a 0FB600   		movzbl	(%rax), %eax
 2929 218d 3C20     		cmpb	$32, %al
 2930 218f 0F851D02 		jne	.L156
 2930      0000
 643:final_with_print.c **** 					ptr++;
 2931              		.loc 1 643 0
 2932 2195 488B0500 		movq	ptr(%rip), %rax
 2932      000000
 2933 219c 4883C001 		addq	$1, %rax
 2934 21a0 48890500 		movq	%rax, ptr(%rip)
 2934      000000
 644:final_with_print.c **** 
 645:final_with_print.c **** 				// Get the read count:
 646:final_with_print.c **** 					errno = 0;
 2935              		.loc 1 646 0
 2936 21a7 E8000000 		call	__errno_location
 2936      00
 2937 21ac C7000000 		movl	$0, (%rax)
 2937      0000
 647:final_with_print.c **** 					length = (uint32)strtoul(ptr, &end, 16);
 2938              		.loc 1 647 0
 2939 21b2 488B0500 		movq	ptr(%rip), %rax
 2939      000000
 2940 21b9 488D8D40 		leaq	-192(%rbp), %rcx
 2940      FFFFFF
 2941 21c0 BA100000 		movl	$16, %edx
 2941      00
 2942 21c5 4889CE   		movq	%rcx, %rsi
 2943 21c8 4889C7   		movq	%rax, %rdi
 2944 21cb E8000000 		call	strtoul
 2944      00
 2945 21d0 898518FF 		movl	%eax, -232(%rbp)
 2945      FFFF
 648:final_with_print.c **** 					CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 2946              		.loc 1 648 0
 2947 21d6 E8000000 		call	__errno_location
 2947      00
 2948 21db 8B00     		movl	(%rax), %eax
 2949 21dd 85C0     		testl	%eax, %eax
 2950 21df 740F     		je	.L157
 2951              		.loc 1 648 0 is_stmt 0 discriminator 1
 2952 21e1 C78514FF 		movl	$2, -236(%rbp)
 2952      FFFF0200 
 2952      0000
 2953 21eb E95A0D00 		jmp	.L145
 2953      00
 2954              	.L157:
 649:final_with_print.c **** 					ptr = end;
 2955              		.loc 1 649 0 is_stmt 1
 2956 21f0 488B8540 		movq	-192(%rbp), %rax
 2956      FFFFFF
 2957 21f7 48890500 		movq	%rax, ptr(%rip)
 2957      000000
 650:final_with_print.c **** 
 651:final_with_print.c **** 				// Only three valid chars at this point:
 652:final_with_print.c **** 					CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 2958              		.loc 1 652 0
 2959 21fe 488B0500 		movq	ptr(%rip), %rax
 2959      000000
 2960 2205 0FB600   		movzbl	(%rax), %eax
 2961 2208 84C0     		testb	%al, %al
 2962 220a 742B     		je	.L158
 2963              		.loc 1 652 0 is_stmt 0 discriminator 1
 2964 220c 488B0500 		movq	ptr(%rip), %rax
 2964      000000
 2965 2213 0FB600   		movzbl	(%rax), %eax
 2966 2216 3C3B     		cmpb	$59, %al
 2967 2218 741D     		je	.L158
 2968              		.loc 1 652 0 discriminator 2
 2969 221a 488B0500 		movq	ptr(%rip), %rax
 2969      000000
 2970 2221 0FB600   		movzbl	(%rax), %eax
 2971 2224 3C20     		cmpb	$32, %al
 2972 2226 740F     		je	.L158
 2973              		.loc 1 652 0 discriminator 3
 2974 2228 C78514FF 		movl	$5, -236(%rbp)
 2974      FFFF0500 
 2974      0000
 2975 2232 E9130D00 		jmp	.L145
 2975      00
 2976              	.L158:
 653:final_with_print.c **** 					if ( *ptr == ' ' ) {
 2977              		.loc 1 653 0 is_stmt 1
 2978 2237 488B0500 		movq	ptr(%rip), %rax
 2978      000000
 2979 223e 0FB600   		movzbl	(%rax), %eax
 2980 2241 3C20     		cmpb	$32, %al
 2981 2243 0F856901 		jne	.L156
 2981      0000
 2982              	.LBB33:
 654:final_with_print.c **** 						const char *p;
 655:final_with_print.c **** 						const char quoteChar = *++ptr;
 2983              		.loc 1 655 0
 2984 2249 488B0500 		movq	ptr(%rip), %rax
 2984      000000
 2985 2250 4883C001 		addq	$1, %rax
 2986 2254 48890500 		movq	%rax, ptr(%rip)
 2986      000000
 2987 225b 488B0500 		movq	ptr(%rip), %rax
 2987      000000
 2988 2262 0FB600   		movzbl	(%rax), %eax
 2989 2265 888511FF 		movb	%al, -239(%rbp)
 2989      FFFF
 656:final_with_print.c **** 						CHECK_STATUS(
 2990              		.loc 1 656 0
 2991 226b 80BD11FF 		cmpb	$34, -239(%rbp)
 2991      FFFF22
 2992 2272 7418     		je	.L159
 2993              		.loc 1 656 0 is_stmt 0 discriminator 1
 2994 2274 80BD11FF 		cmpb	$39, -239(%rbp)
 2994      FFFF27
 2995 227b 740F     		je	.L159
 2996              		.loc 1 656 0 discriminator 2
 2997 227d C78514FF 		movl	$5, -236(%rbp)
 2997      FFFF0500 
 2997      0000
 2998 2287 E9BE0C00 		jmp	.L145
 2998      00
 2999              	.L159:
 657:final_with_print.c **** 							(quoteChar != '"' && quoteChar != '\''),
 658:final_with_print.c **** 							FLP_ILL_CHAR, cleanup);
 659:final_with_print.c **** 
 660:final_with_print.c **** 					// Get the file to write bytes to:
 661:final_with_print.c **** 						ptr++;
 3000              		.loc 1 661 0 is_stmt 1
 3001 228c 488B0500 		movq	ptr(%rip), %rax
 3001      000000
 3002 2293 4883C001 		addq	$1, %rax
 3003 2297 48890500 		movq	%rax, ptr(%rip)
 3003      000000
 662:final_with_print.c **** 						p = ptr;
 3004              		.loc 1 662 0
 3005 229e 488B0500 		movq	ptr(%rip), %rax
 3005      000000
 3006 22a5 48898560 		movq	%rax, -160(%rbp)
 3006      FFFFFF
 663:final_with_print.c **** 						while ( *p != quoteChar && *p != '\0' ) {
 3007              		.loc 1 663 0
 3008 22ac EB08     		jmp	.L160
 3009              	.L162:
 664:final_with_print.c **** 							p++;
 3010              		.loc 1 664 0
 3011 22ae 48838560 		addq	$1, -160(%rbp)
 3011      FFFFFF01 
 3012              	.L160:
 663:final_with_print.c **** 						while ( *p != quoteChar && *p != '\0' ) {
 3013              		.loc 1 663 0
 3014 22b6 488B8560 		movq	-160(%rbp), %rax
 3014      FFFFFF
 3015 22bd 0FB600   		movzbl	(%rax), %eax
 3016 22c0 3A8511FF 		cmpb	-239(%rbp), %al
 3016      FFFF
 3017 22c6 740E     		je	.L161
 663:final_with_print.c **** 						while ( *p != quoteChar && *p != '\0' ) {
 3018              		.loc 1 663 0 is_stmt 0 discriminator 1
 3019 22c8 488B8560 		movq	-160(%rbp), %rax
 3019      FFFFFF
 3020 22cf 0FB600   		movzbl	(%rax), %eax
 3021 22d2 84C0     		testb	%al, %al
 3022 22d4 75D8     		jne	.L162
 3023              	.L161:
 665:final_with_print.c **** 						}
 666:final_with_print.c **** 						CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 3024              		.loc 1 666 0 is_stmt 1
 3025 22d6 488B8560 		movq	-160(%rbp), %rax
 3025      FFFFFF
 3026 22dd 0FB600   		movzbl	(%rax), %eax
 3027 22e0 84C0     		testb	%al, %al
 3028 22e2 750F     		jne	.L163
 3029              		.loc 1 666 0 is_stmt 0 discriminator 1
 3030 22e4 C78514FF 		movl	$6, -236(%rbp)
 3030      FFFF0600 
 3030      0000
 3031 22ee E9570C00 		jmp	.L145
 3031      00
 3032              	.L163:
 667:final_with_print.c **** 						fileName = malloc((size_t)(p - ptr + 1));
 3033              		.loc 1 667 0 is_stmt 1
 3034 22f3 488B8560 		movq	-160(%rbp), %rax
 3034      FFFFFF
 3035 22fa 488B1500 		movq	ptr(%rip), %rdx
 3035      000000
 3036 2301 4829D0   		subq	%rdx, %rax
 3037 2304 4883C001 		addq	$1, %rax
 3038 2308 4889C7   		movq	%rax, %rdi
 3039 230b E8000000 		call	malloc
 3039      00
 3040 2310 48898550 		movq	%rax, -176(%rbp)
 3040      FFFFFF
 668:final_with_print.c **** 						CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 3041              		.loc 1 668 0
 3042 2317 4883BD50 		cmpq	$0, -176(%rbp)
 3042      FFFFFF00 
 3043 231f 750F     		jne	.L164
 3044              		.loc 1 668 0 is_stmt 0 discriminator 1
 3045 2321 C78514FF 		movl	$7, -236(%rbp)
 3045      FFFF0700 
 3045      0000
 3046 232b E91A0C00 		jmp	.L145
 3046      00
 3047              	.L164:
 669:final_with_print.c **** 						CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 3048              		.loc 1 669 0 is_stmt 1
 3049 2330 488B8560 		movq	-160(%rbp), %rax
 3049      FFFFFF
 3050 2337 488B1500 		movq	ptr(%rip), %rdx
 3050      000000
 3051 233e 4839D0   		cmpq	%rdx, %rax
 3052 2341 750F     		jne	.L165
 3053              		.loc 1 669 0 is_stmt 0 discriminator 1
 3054 2343 C78514FF 		movl	$8, -236(%rbp)
 3054      FFFF0800 
 3054      0000
 3055 234d E9F80B00 		jmp	.L145
 3055      00
 3056              	.L165:
 670:final_with_print.c **** 						strncpy(fileName, ptr, (size_t)(p - ptr));
 3057              		.loc 1 670 0 is_stmt 1
 3058 2352 488B8560 		movq	-160(%rbp), %rax
 3058      FFFFFF
 3059 2359 488B1500 		movq	ptr(%rip), %rdx
 3059      000000
 3060 2360 4829D0   		subq	%rdx, %rax
 3061 2363 4889C2   		movq	%rax, %rdx
 3062 2366 488B0D00 		movq	ptr(%rip), %rcx
 3062      000000
 3063 236d 488B8550 		movq	-176(%rbp), %rax
 3063      FFFFFF
 3064 2374 4889CE   		movq	%rcx, %rsi
 3065 2377 4889C7   		movq	%rax, %rdi
 3066 237a E8000000 		call	strncpy
 3066      00
 671:final_with_print.c **** 						fileName[p - ptr] = '\0';
 3067              		.loc 1 671 0
 3068 237f 488B8560 		movq	-160(%rbp), %rax
 3068      FFFFFF
 3069 2386 488B1500 		movq	ptr(%rip), %rdx
 3069      000000
 3070 238d 4829D0   		subq	%rdx, %rax
 3071 2390 4889C2   		movq	%rax, %rdx
 3072 2393 488B8550 		movq	-176(%rbp), %rax
 3072      FFFFFF
 3073 239a 4801D0   		addq	%rdx, %rax
 3074 239d C60000   		movb	$0, (%rax)
 672:final_with_print.c **** 						ptr = p + 1;
 3075              		.loc 1 672 0
 3076 23a0 488B8560 		movq	-160(%rbp), %rax
 3076      FFFFFF
 3077 23a7 4883C001 		addq	$1, %rax
 3078 23ab 48890500 		movq	%rax, ptr(%rip)
 3078      000000
 3079              	.L156:
 3080              	.LBE33:
 673:final_with_print.c **** 					}
 674:final_with_print.c **** 				}
 675:final_with_print.c **** 				if ( fileName ) {
 3081              		.loc 1 675 0
 3082 23b2 4883BD50 		cmpq	$0, -176(%rbp)
 3082      FFFFFF00 
 3083 23ba 0F84EA01 		je	.L166
 3083      0000
 3084              	.LBB34:
 676:final_with_print.c **** 					uint16 checksum = 0x0000;
 3085              		.loc 1 676 0
 3086 23c0 66C78538 		movw	$0, -200(%rbp)
 3086      FFFFFF00 
 3086      00
 677:final_with_print.c **** 
 678:final_with_print.c **** 				// Open file for writing
 679:final_with_print.c **** 					file = fopen(fileName, "wb");
 3087              		.loc 1 679 0
 3088 23c9 488B8550 		movq	-176(%rbp), %rax
 3088      FFFFFF
 3089 23d0 BE000000 		movl	$.LC28, %esi
 3089      00
 3090 23d5 4889C7   		movq	%rax, %rdi
 3091 23d8 E8000000 		call	fopen
 3091      00
 3092 23dd 48898558 		movq	%rax, -168(%rbp)
 3092      FFFFFF
 680:final_with_print.c **** 					CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 3093              		.loc 1 680 0
 3094 23e4 4883BD58 		cmpq	$0, -168(%rbp)
 3094      FFFFFF00 
 3095 23ec 750F     		jne	.L167
 3096              		.loc 1 680 0 is_stmt 0 discriminator 1
 3097 23ee C78514FF 		movl	$11, -236(%rbp)
 3097      FFFF0B00 
 3097      0000
 3098 23f8 E94D0B00 		jmp	.L145
 3098      00
 3099              	.L167:
 681:final_with_print.c **** 					free(fileName);
 3100              		.loc 1 681 0 is_stmt 1
 3101 23fd 488B8550 		movq	-176(%rbp), %rax
 3101      FFFFFF
 3102 2404 4889C7   		movq	%rax, %rdi
 3103 2407 E8000000 		call	free
 3103      00
 682:final_with_print.c **** 					fileName = NULL;
 3104              		.loc 1 682 0
 3105 240c 48C78550 		movq	$0, -176(%rbp)
 3105      FFFFFF00 
 3105      000000
 683:final_with_print.c **** 					
 684:final_with_print.c **** 				#ifdef WIN32
 685:final_with_print.c **** 					QueryPerformanceCounter(&tvStart);
 686:final_with_print.c **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 687:final_with_print.c **** 					QueryPerformanceCounter(&tvEnd);
 688:final_with_print.c **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 689:final_with_print.c **** 					totalTime /= freq.QuadPart;
 690:final_with_print.c **** 					speed = (double)length / (1024*1024*totalTime);
 691:final_with_print.c **** 				#else
 692:final_with_print.c **** 					gettimeofday(&tvStart, NULL);
 3106              		.loc 1 692 0
 3107 2417 488D45B0 		leaq	-80(%rbp), %rax
 3108 241b BE000000 		movl	$0, %esi
 3108      00
 3109 2420 4889C7   		movq	%rax, %rdi
 3110 2423 E8000000 		call	gettimeofday
 3110      00
 693:final_with_print.c **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 3111              		.loc 1 693 0
 3112 2428 8B8530FF 		movl	-208(%rbp), %eax
 3112      FFFF
 3113 242e 0FB6F0   		movzbl	%al, %esi
 3114 2431 4C8B85F8 		movq	-264(%rbp), %r8
 3114      FEFFFF
 3115 2438 488DBD38 		leaq	-200(%rbp), %rdi
 3115      FFFFFF
 3116 243f 488B8D58 		movq	-168(%rbp), %rcx
 3116      FFFFFF
 3117 2446 8B9518FF 		movl	-232(%rbp), %edx
 3117      FFFF
 3118 244c 488B8508 		movq	-248(%rbp), %rax
 3118      FFFFFF
 3119 2453 4D89C1   		movq	%r8, %r9
 3120 2456 4989F8   		movq	%rdi, %r8
 3121 2459 4889C7   		movq	%rax, %rdi
 3122 245c E8A7F6FF 		call	doRead
 3122      FF
 3123 2461 898528FF 		movl	%eax, -216(%rbp)
 3123      FFFF
 694:final_with_print.c **** 					gettimeofday(&tvEnd, NULL);
 3124              		.loc 1 694 0
 3125 2467 488D45C0 		leaq	-64(%rbp), %rax
 3126 246b BE000000 		movl	$0, %esi
 3126      00
 3127 2470 4889C7   		movq	%rax, %rdi
 3128 2473 E8000000 		call	gettimeofday
 3128      00
 695:final_with_print.c **** 					startTime = tvStart.tv_sec;
 3129              		.loc 1 695 0
 3130 2478 488B45B0 		movq	-80(%rbp), %rax
 3131 247c 48894588 		movq	%rax, -120(%rbp)
 696:final_with_print.c **** 					startTime *= 1000000;
 3132              		.loc 1 696 0
 3133 2480 488B4588 		movq	-120(%rbp), %rax
 3134 2484 4869C040 		imulq	$1000000, %rax, %rax
 3134      420F00
 3135 248b 48894588 		movq	%rax, -120(%rbp)
 697:final_with_print.c **** 					startTime += tvStart.tv_usec;
 3136              		.loc 1 697 0
 3137 248f 488B45B8 		movq	-72(%rbp), %rax
 3138 2493 48014588 		addq	%rax, -120(%rbp)
 698:final_with_print.c **** 					endTime = tvEnd.tv_sec;
 3139              		.loc 1 698 0
 3140 2497 488B45C0 		movq	-64(%rbp), %rax
 3141 249b 48894590 		movq	%rax, -112(%rbp)
 699:final_with_print.c **** 					endTime *= 1000000;
 3142              		.loc 1 699 0
 3143 249f 488B4590 		movq	-112(%rbp), %rax
 3144 24a3 4869C040 		imulq	$1000000, %rax, %rax
 3144      420F00
 3145 24aa 48894590 		movq	%rax, -112(%rbp)
 700:final_with_print.c **** 					endTime += tvEnd.tv_usec;
 3146              		.loc 1 700 0
 3147 24ae 488B45C8 		movq	-56(%rbp), %rax
 3148 24b2 48014590 		addq	%rax, -112(%rbp)
 701:final_with_print.c **** 					totalTime = (double)(endTime - startTime);
 3149              		.loc 1 701 0
 3150 24b6 488B4590 		movq	-112(%rbp), %rax
 3151 24ba 482B4588 		subq	-120(%rbp), %rax
 3152 24be 660FEFC0 		pxor	%xmm0, %xmm0
 3153 24c2 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 3153      C0
 3154 24c7 F20F1145 		movsd	%xmm0, -104(%rbp)
 3154      98
 702:final_with_print.c **** 					totalTime /= 1000000;  // convert from uS to S.
 3155              		.loc 1 702 0
 3156 24cc F20F1045 		movsd	-104(%rbp), %xmm0
 3156      98
 3157 24d1 F20F100D 		movsd	.LC29(%rip), %xmm1
 3157      00000000 
 3158 24d9 F20F5EC1 		divsd	%xmm1, %xmm0
 3159 24dd F20F1145 		movsd	%xmm0, -104(%rbp)
 3159      98
 703:final_with_print.c **** 					speed = (double)length / (1024*1024*totalTime);
 3160              		.loc 1 703 0
 3161 24e2 8B8518FF 		movl	-232(%rbp), %eax
 3161      FFFF
 3162 24e8 4885C0   		testq	%rax, %rax
 3163 24eb 780B     		js	.L169
 3164 24ed 660FEFC0 		pxor	%xmm0, %xmm0
 3165 24f1 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 3165      C0
 3166 24f6 EB19     		jmp	.L170
 3167              	.L169:
 3168 24f8 4889C2   		movq	%rax, %rdx
 3169 24fb 48D1EA   		shrq	%rdx
 3170 24fe 83E001   		andl	$1, %eax
 3171 2501 4809C2   		orq	%rax, %rdx
 3172 2504 660FEFC0 		pxor	%xmm0, %xmm0
 3173 2508 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 3173      C2
 3174 250d F20F58C0 		addsd	%xmm0, %xmm0
 3175              	.L170:
 3176 2511 F20F1055 		movsd	-104(%rbp), %xmm2
 3176      98
 3177 2516 F20F100D 		movsd	.LC30(%rip), %xmm1
 3177      00000000 
 3178 251e F20F59CA 		mulsd	%xmm2, %xmm1
 3179 2522 F20F5EC1 		divsd	%xmm1, %xmm0
 3180 2526 F20F1145 		movsd	%xmm0, -96(%rbp)
 3180      A0
 704:final_with_print.c **** 				#endif
 705:final_with_print.c **** 					if ( enableBenchmarking ) {
 3181              		.loc 1 705 0
 3182 252b 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 3182      000000
 3183 2532 84C0     		testb	%al, %al
 3184 2534 743A     		je	.L171
 706:final_with_print.c **** 						printf(
 3185              		.loc 1 706 0
 3186 2536 0FB78538 		movzwl	-200(%rbp), %eax
 3186      FFFFFF
 3187 253d 0FB7D0   		movzwl	%ax, %edx
 3188 2540 488B75A0 		movq	-96(%rbp), %rsi
 3189 2544 8B8D30FF 		movl	-208(%rbp), %ecx
 3189      FFFF
 3190 254a 8B8518FF 		movl	-232(%rbp), %eax
 3190      FFFF
 3191 2550 4889B5F0 		movq	%rsi, -272(%rbp)
 3191      FEFFFF
 3192 2557 F20F1085 		movsd	-272(%rbp), %xmm0
 3192      F0FEFFFF 
 3193 255f 89C6     		movl	%eax, %esi
 3194 2561 BF000000 		movl	$.LC31, %edi
 3194      00
 3195 2566 B8010000 		movl	$1, %eax
 3195      00
 3196 256b E8000000 		call	printf
 3196      00
 3197              	.L171:
 707:final_with_print.c **** 							"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 708:final_with_print.c **** 							length, checksum, chan, speed);
 709:final_with_print.c **** 					}
 710:final_with_print.c **** 					CHECK_STATUS(status, status, cleanup);
 3198              		.loc 1 710 0
 3199 2570 83BD28FF 		cmpl	$0, -216(%rbp)
 3199      FFFF00
 3200 2577 7412     		je	.L172
 3201              		.loc 1 710 0 is_stmt 0 discriminator 1
 3202 2579 8B8528FF 		movl	-216(%rbp), %eax
 3202      FFFF
 3203 257f 898514FF 		movl	%eax, -236(%rbp)
 3203      FFFF
 3204 2585 90       		nop
 3205              	.LBE34:
 633:final_with_print.c **** 
 3206              		.loc 1 633 0 is_stmt 1 discriminator 1
 3207 2586 E9BF0900 		jmp	.L145
 3207      00
 3208              	.L172:
 3209              	.LBB35:
 711:final_with_print.c **** 
 712:final_with_print.c **** 				// Close the file
 713:final_with_print.c **** 					fclose(file);
 3210              		.loc 1 713 0
 3211 258b 488B8558 		movq	-168(%rbp), %rax
 3211      FFFFFF
 3212 2592 4889C7   		movq	%rax, %rdi
 3213 2595 E8000000 		call	fclose
 3213      00
 714:final_with_print.c **** 					file = NULL;
 3214              		.loc 1 714 0
 3215 259a 48C78558 		movq	$0, -168(%rbp)
 3215      FFFFFF00 
 3215      000000
 3216              	.LBE35:
 715:final_with_print.c **** 				} else {
 716:final_with_print.c **** 					size_t oldLength = dataFromFPGA.length;
 717:final_with_print.c **** 					bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 718:final_with_print.c **** 					CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 719:final_with_print.c **** 				#ifdef WIN32
 720:final_with_print.c **** 					QueryPerformanceCounter(&tvStart);
 721:final_with_print.c **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 722:final_with_print.c **** 					QueryPerformanceCounter(&tvEnd);
 723:final_with_print.c **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 724:final_with_print.c **** 					totalTime /= freq.QuadPart;
 725:final_with_print.c **** 					speed = (double)length / (1024*1024*totalTime);
 726:final_with_print.c **** 				#else
 727:final_with_print.c **** 					gettimeofday(&tvStart, NULL);
 728:final_with_print.c **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 729:final_with_print.c **** 					gettimeofday(&tvEnd, NULL);
 730:final_with_print.c **** 					startTime = tvStart.tv_sec;
 731:final_with_print.c **** 					startTime *= 1000000;
 732:final_with_print.c **** 					startTime += tvStart.tv_usec;
 733:final_with_print.c **** 					endTime = tvEnd.tv_sec;
 734:final_with_print.c **** 					endTime *= 1000000;
 735:final_with_print.c **** 					endTime += tvEnd.tv_usec;
 736:final_with_print.c **** 					totalTime = (double)(endTime - startTime);
 737:final_with_print.c **** 					totalTime /= 1000000;  // convert from uS to S.
 738:final_with_print.c **** 					speed = (double)length / (1024*1024*totalTime);
 739:final_with_print.c **** 				#endif
 740:final_with_print.c **** 					if ( enableBenchmarking ) {
 741:final_with_print.c **** 						printf(
 742:final_with_print.c **** 							"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 743:final_with_print.c **** 							length, calcChecksum(dataFromFPGA.data + oldLength, length), chan, speed);
 744:final_with_print.c **** 					}
 745:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 746:final_with_print.c **** 				}
 747:final_with_print.c **** 				break;
 3217              		.loc 1 747 0
 3218 25a5 E95B0900 		jmp	.L222
 3218      00
 3219              	.L166:
 3220              	.LBB36:
 716:final_with_print.c **** 					bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 3221              		.loc 1 716 0
 3222 25aa 488B45D8 		movq	-40(%rbp), %rax
 3223 25ae 488945A8 		movq	%rax, -88(%rbp)
 717:final_with_print.c **** 					CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 3224              		.loc 1 717 0
 3225 25b2 8B9518FF 		movl	-232(%rbp), %edx
 3225      FFFF
 3226 25b8 488B8DF8 		movq	-264(%rbp), %rcx
 3226      FEFFFF
 3227 25bf 488D45D0 		leaq	-48(%rbp), %rax
 3228 25c3 BE000000 		movl	$0, %esi
 3228      00
 3229 25c8 4889C7   		movq	%rax, %rdi
 3230 25cb E8000000 		call	bufAppendConst
 3230      00
 3231 25d0 898520FF 		movl	%eax, -224(%rbp)
 3231      FFFF
 718:final_with_print.c **** 				#ifdef WIN32
 3232              		.loc 1 718 0
 3233 25d6 83BD20FF 		cmpl	$0, -224(%rbp)
 3233      FFFF00
 3234 25dd 740F     		je	.L174
 718:final_with_print.c **** 				#ifdef WIN32
 3235              		.loc 1 718 0 is_stmt 0 discriminator 1
 3236 25df C78514FF 		movl	$1, -236(%rbp)
 3236      FFFF0100 
 3236      0000
 3237 25e9 E95C0900 		jmp	.L145
 3237      00
 3238              	.L174:
 727:final_with_print.c **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 3239              		.loc 1 727 0 is_stmt 1
 3240 25ee 488D45B0 		leaq	-80(%rbp), %rax
 3241 25f2 BE000000 		movl	$0, %esi
 3241      00
 3242 25f7 4889C7   		movq	%rax, %rdi
 3243 25fa E8000000 		call	gettimeofday
 3243      00
 728:final_with_print.c **** 					gettimeofday(&tvEnd, NULL);
 3244              		.loc 1 728 0
 3245 25ff 488B55D0 		movq	-48(%rbp), %rdx
 3246 2603 488B45A8 		movq	-88(%rbp), %rax
 3247 2607 488D0C02 		leaq	(%rdx,%rax), %rcx
 3248 260b 8B9518FF 		movl	-232(%rbp), %edx
 3248      FFFF
 3249 2611 8B8530FF 		movl	-208(%rbp), %eax
 3249      FFFF
 3250 2617 0FB6F0   		movzbl	%al, %esi
 3251 261a 488BBDF8 		movq	-264(%rbp), %rdi
 3251      FEFFFF
 3252 2621 488B8508 		movq	-248(%rbp), %rax
 3252      FFFFFF
 3253 2628 4989F8   		movq	%rdi, %r8
 3254 262b 4889C7   		movq	%rax, %rdi
 3255 262e E8000000 		call	flReadChannel
 3255      00
 3256 2633 898524FF 		movl	%eax, -220(%rbp)
 3256      FFFF
 729:final_with_print.c **** 					startTime = tvStart.tv_sec;
 3257              		.loc 1 729 0
 3258 2639 488D45C0 		leaq	-64(%rbp), %rax
 3259 263d BE000000 		movl	$0, %esi
 3259      00
 3260 2642 4889C7   		movq	%rax, %rdi
 3261 2645 E8000000 		call	gettimeofday
 3261      00
 730:final_with_print.c **** 					startTime *= 1000000;
 3262              		.loc 1 730 0
 3263 264a 488B45B0 		movq	-80(%rbp), %rax
 3264 264e 48894588 		movq	%rax, -120(%rbp)
 731:final_with_print.c **** 					startTime += tvStart.tv_usec;
 3265              		.loc 1 731 0
 3266 2652 488B4588 		movq	-120(%rbp), %rax
 3267 2656 4869C040 		imulq	$1000000, %rax, %rax
 3267      420F00
 3268 265d 48894588 		movq	%rax, -120(%rbp)
 732:final_with_print.c **** 					endTime = tvEnd.tv_sec;
 3269              		.loc 1 732 0
 3270 2661 488B45B8 		movq	-72(%rbp), %rax
 3271 2665 48014588 		addq	%rax, -120(%rbp)
 733:final_with_print.c **** 					endTime *= 1000000;
 3272              		.loc 1 733 0
 3273 2669 488B45C0 		movq	-64(%rbp), %rax
 3274 266d 48894590 		movq	%rax, -112(%rbp)
 734:final_with_print.c **** 					endTime += tvEnd.tv_usec;
 3275              		.loc 1 734 0
 3276 2671 488B4590 		movq	-112(%rbp), %rax
 3277 2675 4869C040 		imulq	$1000000, %rax, %rax
 3277      420F00
 3278 267c 48894590 		movq	%rax, -112(%rbp)
 735:final_with_print.c **** 					totalTime = (double)(endTime - startTime);
 3279              		.loc 1 735 0
 3280 2680 488B45C8 		movq	-56(%rbp), %rax
 3281 2684 48014590 		addq	%rax, -112(%rbp)
 736:final_with_print.c **** 					totalTime /= 1000000;  // convert from uS to S.
 3282              		.loc 1 736 0
 3283 2688 488B4590 		movq	-112(%rbp), %rax
 3284 268c 482B4588 		subq	-120(%rbp), %rax
 3285 2690 660FEFC0 		pxor	%xmm0, %xmm0
 3286 2694 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 3286      C0
 3287 2699 F20F1145 		movsd	%xmm0, -104(%rbp)
 3287      98
 737:final_with_print.c **** 					speed = (double)length / (1024*1024*totalTime);
 3288              		.loc 1 737 0
 3289 269e F20F1045 		movsd	-104(%rbp), %xmm0
 3289      98
 3290 26a3 F20F100D 		movsd	.LC29(%rip), %xmm1
 3290      00000000 
 3291 26ab F20F5EC1 		divsd	%xmm1, %xmm0
 3292 26af F20F1145 		movsd	%xmm0, -104(%rbp)
 3292      98
 738:final_with_print.c **** 				#endif
 3293              		.loc 1 738 0
 3294 26b4 8B8518FF 		movl	-232(%rbp), %eax
 3294      FFFF
 3295 26ba 4885C0   		testq	%rax, %rax
 3296 26bd 780B     		js	.L175
 3297 26bf 660FEFC0 		pxor	%xmm0, %xmm0
 3298 26c3 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 3298      C0
 3299 26c8 EB19     		jmp	.L176
 3300              	.L175:
 3301 26ca 4889C2   		movq	%rax, %rdx
 3302 26cd 48D1EA   		shrq	%rdx
 3303 26d0 83E001   		andl	$1, %eax
 3304 26d3 4809C2   		orq	%rax, %rdx
 3305 26d6 660FEFC0 		pxor	%xmm0, %xmm0
 3306 26da F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 3306      C2
 3307 26df F20F58C0 		addsd	%xmm0, %xmm0
 3308              	.L176:
 3309 26e3 F20F1055 		movsd	-104(%rbp), %xmm2
 3309      98
 3310 26e8 F20F100D 		movsd	.LC30(%rip), %xmm1
 3310      00000000 
 3311 26f0 F20F59CA 		mulsd	%xmm2, %xmm1
 3312 26f4 F20F5EC1 		divsd	%xmm1, %xmm0
 3313 26f8 F20F1145 		movsd	%xmm0, -96(%rbp)
 3313      A0
 740:final_with_print.c **** 						printf(
 3314              		.loc 1 740 0
 3315 26fd 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 3315      000000
 3316 2704 84C0     		testb	%al, %al
 3317 2706 744F     		je	.L177
 743:final_with_print.c **** 					}
 3318              		.loc 1 743 0
 3319 2708 8B8518FF 		movl	-232(%rbp), %eax
 3319      FFFF
 3320 270e 488B4DD0 		movq	-48(%rbp), %rcx
 3321 2712 488B55A8 		movq	-88(%rbp), %rdx
 3322 2716 4801CA   		addq	%rcx, %rdx
 3323 2719 4889C6   		movq	%rax, %rsi
 3324 271c 4889D7   		movq	%rdx, %rdi
 3325 271f E88BF2FF 		call	calcChecksum
 3325      FF
 741:final_with_print.c **** 							"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 3326              		.loc 1 741 0
 3327 2724 0FB7D0   		movzwl	%ax, %edx
 3328 2727 488B75A0 		movq	-96(%rbp), %rsi
 3329 272b 8B8D30FF 		movl	-208(%rbp), %ecx
 3329      FFFF
 3330 2731 8B8518FF 		movl	-232(%rbp), %eax
 3330      FFFF
 3331 2737 4889B5F0 		movq	%rsi, -272(%rbp)
 3331      FEFFFF
 3332 273e F20F1085 		movsd	-272(%rbp), %xmm0
 3332      F0FEFFFF 
 3333 2746 89C6     		movl	%eax, %esi
 3334 2748 BF000000 		movl	$.LC31, %edi
 3334      00
 3335 274d B8010000 		movl	$1, %eax
 3335      00
 3336 2752 E8000000 		call	printf
 3336      00
 3337              	.L177:
 745:final_with_print.c **** 				}
 3338              		.loc 1 745 0
 3339 2757 83BD24FF 		cmpl	$0, -220(%rbp)
 3339      FFFF00
 3340 275e 0F84A107 		je	.L222
 3340      0000
 745:final_with_print.c **** 				}
 3341              		.loc 1 745 0 is_stmt 0 discriminator 1
 3342 2764 C78514FF 		movl	$1, -236(%rbp)
 3342      FFFF0100 
 3342      0000
 3343 276e 90       		nop
 3344 276f E9D60700 		jmp	.L145
 3344      00
 3345              	.L150:
 3346              	.LBE36:
 3347              	.LBE32:
 3348              	.LBB37:
 748:final_with_print.c **** 			}
 749:final_with_print.c **** 			case 'w':{
 750:final_with_print.c **** 				unsigned long int chan;
 751:final_with_print.c **** 				size_t length = 1, i;
 3349              		.loc 1 751 0 is_stmt 1
 3350 2774 48C78538 		movq	$1, -200(%rbp)
 3350      FFFFFF01 
 3350      000000
 752:final_with_print.c **** 				char *end, ch;
 753:final_with_print.c **** 				const char *p;
 754:final_with_print.c **** 				ptr++;
 3351              		.loc 1 754 0
 3352 277f 488B0500 		movq	ptr(%rip), %rax
 3352      000000
 3353 2786 4883C001 		addq	$1, %rax
 3354 278a 48890500 		movq	%rax, ptr(%rip)
 3354      000000
 755:final_with_print.c **** 
 756:final_with_print.c **** 			// Get the channel to be written:
 757:final_with_print.c **** 				errno = 0;
 3355              		.loc 1 757 0
 3356 2791 E8000000 		call	__errno_location
 3356      00
 3357 2796 C7000000 		movl	$0, (%rax)
 3357      0000
 758:final_with_print.c **** 				chan = strtoul(ptr, &end, 16);
 3358              		.loc 1 758 0
 3359 279c 488B0500 		movq	ptr(%rip), %rax
 3359      000000
 3360 27a3 488D8D40 		leaq	-192(%rbp), %rcx
 3360      FFFFFF
 3361 27aa BA100000 		movl	$16, %edx
 3361      00
 3362 27af 4889CE   		movq	%rcx, %rsi
 3363 27b2 4889C7   		movq	%rax, %rdi
 3364 27b5 E8000000 		call	strtoul
 3364      00
 3365 27ba 48894580 		movq	%rax, -128(%rbp)
 759:final_with_print.c **** 				CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 3366              		.loc 1 759 0
 3367 27be E8000000 		call	__errno_location
 3367      00
 3368 27c3 8B00     		movl	(%rax), %eax
 3369 27c5 85C0     		testl	%eax, %eax
 3370 27c7 740F     		je	.L179
 3371              		.loc 1 759 0 is_stmt 0 discriminator 1
 3372 27c9 C78514FF 		movl	$2, -236(%rbp)
 3372      FFFF0200 
 3372      0000
 3373 27d3 E9720700 		jmp	.L145
 3373      00
 3374              	.L179:
 760:final_with_print.c **** 
 761:final_with_print.c **** 			// Ensure that it's 0-127
 762:final_with_print.c **** 				CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 3375              		.loc 1 762 0 is_stmt 1
 3376 27d8 48837D80 		cmpq	$127, -128(%rbp)
 3376      7F
 3377 27dd 760F     		jbe	.L181
 3378              		.loc 1 762 0 is_stmt 0 discriminator 1
 3379 27df C78514FF 		movl	$3, -236(%rbp)
 3379      FFFF0300 
 3379      0000
 3380 27e9 E95C0700 		jmp	.L145
 3380      00
 3381              	.L181:
 763:final_with_print.c **** 				ptr = end;
 3382              		.loc 1 763 0 is_stmt 1
 3383 27ee 488B8540 		movq	-192(%rbp), %rax
 3383      FFFFFF
 3384 27f5 48890500 		movq	%rax, ptr(%rip)
 3384      000000
 764:final_with_print.c **** 
 765:final_with_print.c **** 			// There must be a space now:
 766:final_with_print.c **** 				CHECK_STATUS(*ptr != ' ', FLP_ILL_CHAR, cleanup);
 3385              		.loc 1 766 0
 3386 27fc 488B0500 		movq	ptr(%rip), %rax
 3386      000000
 3387 2803 0FB600   		movzbl	(%rax), %eax
 3388 2806 3C20     		cmpb	$32, %al
 3389 2808 740F     		je	.L182
 3390              		.loc 1 766 0 is_stmt 0 discriminator 1
 3391 280a C78514FF 		movl	$5, -236(%rbp)
 3391      FFFF0500 
 3391      0000
 3392 2814 E9310700 		jmp	.L145
 3392      00
 3393              	.L182:
 767:final_with_print.c **** 
 768:final_with_print.c **** 			// Now either a quote or a hex digit
 769:final_with_print.c **** 				ch = *++ptr;
 3394              		.loc 1 769 0 is_stmt 1
 3395 2819 488B0500 		movq	ptr(%rip), %rax
 3395      000000
 3396 2820 4883C001 		addq	$1, %rax
 3397 2824 48890500 		movq	%rax, ptr(%rip)
 3397      000000
 3398 282b 488B0500 		movq	ptr(%rip), %rax
 3398      000000
 3399 2832 0FB600   		movzbl	(%rax), %eax
 3400 2835 888510FF 		movb	%al, -240(%rbp)
 3400      FFFF
 770:final_with_print.c **** 				if ( ch == '"' || ch == '\'' ) {
 3401              		.loc 1 770 0
 3402 283b 80BD10FF 		cmpb	$34, -240(%rbp)
 3402      FFFF22
 3403 2842 740D     		je	.L183
 3404              		.loc 1 770 0 is_stmt 0 discriminator 1
 3405 2844 80BD10FF 		cmpb	$39, -240(%rbp)
 3405      FFFF27
 3406 284b 0F851203 		jne	.L184
 3406      0000
 3407              	.L183:
 3408              	.LBB38:
 771:final_with_print.c **** 					uint16 checksum = 0x0000;
 3409              		.loc 1 771 0 is_stmt 1
 3410 2851 66C78512 		movw	$0, -238(%rbp)
 3410      FFFFFF00 
 3410      00
 772:final_with_print.c **** 
 773:final_with_print.c **** 				// Get the file to read bytes from:
 774:final_with_print.c **** 					ptr++;
 3411              		.loc 1 774 0
 3412 285a 488B0500 		movq	ptr(%rip), %rax
 3412      000000
 3413 2861 4883C001 		addq	$1, %rax
 3414 2865 48890500 		movq	%rax, ptr(%rip)
 3414      000000
 775:final_with_print.c **** 					p = ptr;
 3415              		.loc 1 775 0
 3416 286c 488B0500 		movq	ptr(%rip), %rax
 3416      000000
 3417 2873 48898570 		movq	%rax, -144(%rbp)
 3417      FFFFFF
 776:final_with_print.c **** 					while ( *p != ch && *p != '\0' ) {
 3418              		.loc 1 776 0
 3419 287a EB08     		jmp	.L185
 3420              	.L187:
 777:final_with_print.c **** 						p++;
 3421              		.loc 1 777 0
 3422 287c 48838570 		addq	$1, -144(%rbp)
 3422      FFFFFF01 
 3423              	.L185:
 776:final_with_print.c **** 					while ( *p != ch && *p != '\0' ) {
 3424              		.loc 1 776 0
 3425 2884 488B8570 		movq	-144(%rbp), %rax
 3425      FFFFFF
 3426 288b 0FB600   		movzbl	(%rax), %eax
 3427 288e 3A8510FF 		cmpb	-240(%rbp), %al
 3427      FFFF
 3428 2894 740E     		je	.L186
 776:final_with_print.c **** 					while ( *p != ch && *p != '\0' ) {
 3429              		.loc 1 776 0 is_stmt 0 discriminator 1
 3430 2896 488B8570 		movq	-144(%rbp), %rax
 3430      FFFFFF
 3431 289d 0FB600   		movzbl	(%rax), %eax
 3432 28a0 84C0     		testb	%al, %al
 3433 28a2 75D8     		jne	.L187
 3434              	.L186:
 778:final_with_print.c **** 					}
 779:final_with_print.c **** 					CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 3435              		.loc 1 779 0 is_stmt 1
 3436 28a4 488B8570 		movq	-144(%rbp), %rax
 3436      FFFFFF
 3437 28ab 0FB600   		movzbl	(%rax), %eax
 3438 28ae 84C0     		testb	%al, %al
 3439 28b0 750F     		jne	.L188
 3440              		.loc 1 779 0 is_stmt 0 discriminator 1
 3441 28b2 C78514FF 		movl	$6, -236(%rbp)
 3441      FFFF0600 
 3441      0000
 3442 28bc E9890600 		jmp	.L145
 3442      00
 3443              	.L188:
 780:final_with_print.c **** 					fileName = malloc((size_t)(p - ptr + 1));
 3444              		.loc 1 780 0 is_stmt 1
 3445 28c1 488B8570 		movq	-144(%rbp), %rax
 3445      FFFFFF
 3446 28c8 488B1500 		movq	ptr(%rip), %rdx
 3446      000000
 3447 28cf 4829D0   		subq	%rdx, %rax
 3448 28d2 4883C001 		addq	$1, %rax
 3449 28d6 4889C7   		movq	%rax, %rdi
 3450 28d9 E8000000 		call	malloc
 3450      00
 3451 28de 48898550 		movq	%rax, -176(%rbp)
 3451      FFFFFF
 781:final_with_print.c **** 					CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 3452              		.loc 1 781 0
 3453 28e5 4883BD50 		cmpq	$0, -176(%rbp)
 3453      FFFFFF00 
 3454 28ed 750F     		jne	.L190
 3455              		.loc 1 781 0 is_stmt 0 discriminator 1
 3456 28ef C78514FF 		movl	$7, -236(%rbp)
 3456      FFFF0700 
 3456      0000
 3457 28f9 E9600200 		jmp	.L189
 3457      00
 3458              	.L190:
 782:final_with_print.c **** 					CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 3459              		.loc 1 782 0 is_stmt 1
 3460 28fe 488B8570 		movq	-144(%rbp), %rax
 3460      FFFFFF
 3461 2905 488B1500 		movq	ptr(%rip), %rdx
 3461      000000
 3462 290c 4839D0   		cmpq	%rdx, %rax
 3463 290f 750F     		jne	.L191
 3464              		.loc 1 782 0 is_stmt 0 discriminator 1
 3465 2911 C78514FF 		movl	$8, -236(%rbp)
 3465      FFFF0800 
 3465      0000
 3466 291b E93E0200 		jmp	.L189
 3466      00
 3467              	.L191:
 783:final_with_print.c **** 					strncpy(fileName, ptr, (size_t)(p - ptr));
 3468              		.loc 1 783 0 is_stmt 1
 3469 2920 488B8570 		movq	-144(%rbp), %rax
 3469      FFFFFF
 3470 2927 488B1500 		movq	ptr(%rip), %rdx
 3470      000000
 3471 292e 4829D0   		subq	%rdx, %rax
 3472 2931 4889C2   		movq	%rax, %rdx
 3473 2934 488B0D00 		movq	ptr(%rip), %rcx
 3473      000000
 3474 293b 488B8550 		movq	-176(%rbp), %rax
 3474      FFFFFF
 3475 2942 4889CE   		movq	%rcx, %rsi
 3476 2945 4889C7   		movq	%rax, %rdi
 3477 2948 E8000000 		call	strncpy
 3477      00
 784:final_with_print.c **** 					fileName[p - ptr] = '\0';
 3478              		.loc 1 784 0
 3479 294d 488B8570 		movq	-144(%rbp), %rax
 3479      FFFFFF
 3480 2954 488B1500 		movq	ptr(%rip), %rdx
 3480      000000
 3481 295b 4829D0   		subq	%rdx, %rax
 3482 295e 4889C2   		movq	%rax, %rdx
 3483 2961 488B8550 		movq	-176(%rbp), %rax
 3483      FFFFFF
 3484 2968 4801D0   		addq	%rdx, %rax
 3485 296b C60000   		movb	$0, (%rax)
 785:final_with_print.c **** 				ptr = p + 1;  // skip over closing quote
 3486              		.loc 1 785 0
 3487 296e 488B8570 		movq	-144(%rbp), %rax
 3487      FFFFFF
 3488 2975 4883C001 		addq	$1, %rax
 3489 2979 48890500 		movq	%rax, ptr(%rip)
 3489      000000
 786:final_with_print.c **** 
 787:final_with_print.c **** 				// Open file for reading
 788:final_with_print.c **** 				file = fopen(fileName, "rb");
 3490              		.loc 1 788 0
 3491 2980 488B8550 		movq	-176(%rbp), %rax
 3491      FFFFFF
 3492 2987 BE000000 		movl	$.LC32, %esi
 3492      00
 3493 298c 4889C7   		movq	%rax, %rdi
 3494 298f E8000000 		call	fopen
 3494      00
 3495 2994 48898558 		movq	%rax, -168(%rbp)
 3495      FFFFFF
 789:final_with_print.c **** 				CHECK_STATUS(!file, FLP_CANNOT_LOAD, cleanup);
 3496              		.loc 1 789 0
 3497 299b 4883BD58 		cmpq	$0, -168(%rbp)
 3497      FFFFFF00 
 3498 29a3 750F     		jne	.L192
 3499              		.loc 1 789 0 is_stmt 0 discriminator 1
 3500 29a5 C78514FF 		movl	$10, -236(%rbp)
 3500      FFFF0A00 
 3500      0000
 3501 29af E9AA0100 		jmp	.L189
 3501      00
 3502              	.L192:
 790:final_with_print.c **** 				free(fileName);
 3503              		.loc 1 790 0 is_stmt 1
 3504 29b4 488B8550 		movq	-176(%rbp), %rax
 3504      FFFFFF
 3505 29bb 4889C7   		movq	%rax, %rdi
 3506 29be E8000000 		call	free
 3506      00
 791:final_with_print.c **** 				fileName = NULL;
 3507              		.loc 1 791 0
 3508 29c3 48C78550 		movq	$0, -176(%rbp)
 3508      FFFFFF00 
 3508      000000
 792:final_with_print.c **** 				
 793:final_with_print.c **** 				#ifdef WIN32
 794:final_with_print.c **** 				QueryPerformanceCounter(&tvStart);
 795:final_with_print.c **** 				status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 796:final_with_print.c **** 				QueryPerformanceCounter(&tvEnd);
 797:final_with_print.c **** 				totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 798:final_with_print.c **** 				totalTime /= freq.QuadPart;
 799:final_with_print.c **** 				speed = (double)length / (1024*1024*totalTime);
 800:final_with_print.c **** 				#else
 801:final_with_print.c **** 				gettimeofday(&tvStart, NULL);
 3509              		.loc 1 801 0
 3510 29ce 488D45B0 		leaq	-80(%rbp), %rax
 3511 29d2 BE000000 		movl	$0, %esi
 3511      00
 3512 29d7 4889C7   		movq	%rax, %rdi
 3513 29da E8000000 		call	gettimeofday
 3513      00
 802:final_with_print.c **** 				status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 3514              		.loc 1 802 0
 3515 29df 488B4580 		movq	-128(%rbp), %rax
 3516 29e3 0FB6F0   		movzbl	%al, %esi
 3517 29e6 4C8B85F8 		movq	-264(%rbp), %r8
 3517      FEFFFF
 3518 29ed 488DBD12 		leaq	-238(%rbp), %rdi
 3518      FFFFFF
 3519 29f4 488D8D38 		leaq	-200(%rbp), %rcx
 3519      FFFFFF
 3520 29fb 488B9558 		movq	-168(%rbp), %rdx
 3520      FFFFFF
 3521 2a02 488B8508 		movq	-248(%rbp), %rax
 3521      FFFFFF
 3522 2a09 4D89C1   		movq	%r8, %r9
 3523 2a0c 4989F8   		movq	%rdi, %r8
 3524 2a0f 4889C7   		movq	%rax, %rdi
 3525 2a12 E8A3F3FF 		call	doWrite
 3525      FF
 3526 2a17 898528FF 		movl	%eax, -216(%rbp)
 3526      FFFF
 803:final_with_print.c **** 				gettimeofday(&tvEnd, NULL);
 3527              		.loc 1 803 0
 3528 2a1d 488D45C0 		leaq	-64(%rbp), %rax
 3529 2a21 BE000000 		movl	$0, %esi
 3529      00
 3530 2a26 4889C7   		movq	%rax, %rdi
 3531 2a29 E8000000 		call	gettimeofday
 3531      00
 804:final_with_print.c **** 				startTime = tvStart.tv_sec;
 3532              		.loc 1 804 0
 3533 2a2e 488B45B0 		movq	-80(%rbp), %rax
 3534 2a32 48894588 		movq	%rax, -120(%rbp)
 805:final_with_print.c **** 				startTime *= 1000000;
 3535              		.loc 1 805 0
 3536 2a36 488B4588 		movq	-120(%rbp), %rax
 3537 2a3a 4869C040 		imulq	$1000000, %rax, %rax
 3537      420F00
 3538 2a41 48894588 		movq	%rax, -120(%rbp)
 806:final_with_print.c **** 				startTime += tvStart.tv_usec;
 3539              		.loc 1 806 0
 3540 2a45 488B45B8 		movq	-72(%rbp), %rax
 3541 2a49 48014588 		addq	%rax, -120(%rbp)
 807:final_with_print.c **** 				endTime = tvEnd.tv_sec;
 3542              		.loc 1 807 0
 3543 2a4d 488B45C0 		movq	-64(%rbp), %rax
 3544 2a51 48894590 		movq	%rax, -112(%rbp)
 808:final_with_print.c **** 				endTime *= 1000000;
 3545              		.loc 1 808 0
 3546 2a55 488B4590 		movq	-112(%rbp), %rax
 3547 2a59 4869C040 		imulq	$1000000, %rax, %rax
 3547      420F00
 3548 2a60 48894590 		movq	%rax, -112(%rbp)
 809:final_with_print.c **** 				endTime += tvEnd.tv_usec;
 3549              		.loc 1 809 0
 3550 2a64 488B45C8 		movq	-56(%rbp), %rax
 3551 2a68 48014590 		addq	%rax, -112(%rbp)
 810:final_with_print.c **** 				totalTime = (double)(endTime - startTime);
 3552              		.loc 1 810 0
 3553 2a6c 488B4590 		movq	-112(%rbp), %rax
 3554 2a70 482B4588 		subq	-120(%rbp), %rax
 3555 2a74 660FEFC0 		pxor	%xmm0, %xmm0
 3556 2a78 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 3556      C0
 3557 2a7d F20F1145 		movsd	%xmm0, -104(%rbp)
 3557      98
 811:final_with_print.c **** 					totalTime /= 1000000;  // convert from uS to S.
 3558              		.loc 1 811 0
 3559 2a82 F20F1045 		movsd	-104(%rbp), %xmm0
 3559      98
 3560 2a87 F20F100D 		movsd	.LC29(%rip), %xmm1
 3560      00000000 
 3561 2a8f F20F5EC1 		divsd	%xmm1, %xmm0
 3562 2a93 F20F1145 		movsd	%xmm0, -104(%rbp)
 3562      98
 812:final_with_print.c **** 					speed = (double)length / (1024*1024*totalTime);
 3563              		.loc 1 812 0
 3564 2a98 488B8538 		movq	-200(%rbp), %rax
 3564      FFFFFF
 3565 2a9f 4885C0   		testq	%rax, %rax
 3566 2aa2 780B     		js	.L193
 3567 2aa4 660FEFC0 		pxor	%xmm0, %xmm0
 3568 2aa8 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 3568      C0
 3569 2aad EB19     		jmp	.L194
 3570              	.L193:
 3571 2aaf 4889C2   		movq	%rax, %rdx
 3572 2ab2 48D1EA   		shrq	%rdx
 3573 2ab5 83E001   		andl	$1, %eax
 3574 2ab8 4809C2   		orq	%rax, %rdx
 3575 2abb 660FEFC0 		pxor	%xmm0, %xmm0
 3576 2abf F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 3576      C2
 3577 2ac4 F20F58C0 		addsd	%xmm0, %xmm0
 3578              	.L194:
 3579 2ac8 F20F1055 		movsd	-104(%rbp), %xmm2
 3579      98
 3580 2acd F20F100D 		movsd	.LC30(%rip), %xmm1
 3580      00000000 
 3581 2ad5 F20F59CA 		mulsd	%xmm2, %xmm1
 3582 2ad9 F20F5EC1 		divsd	%xmm1, %xmm0
 3583 2add F20F1145 		movsd	%xmm0, -96(%rbp)
 3583      A0
 813:final_with_print.c **** 				#endif
 814:final_with_print.c **** 					if ( enableBenchmarking ) {
 3584              		.loc 1 814 0
 3585 2ae2 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 3585      000000
 3586 2ae9 84C0     		testb	%al, %al
 3587 2aeb 743A     		je	.L195
 815:final_with_print.c **** 						printf(
 3588              		.loc 1 815 0
 3589 2aed 0FB78512 		movzwl	-238(%rbp), %eax
 3589      FFFFFF
 3590 2af4 0FB7D0   		movzwl	%ax, %edx
 3591 2af7 488B8538 		movq	-200(%rbp), %rax
 3591      FFFFFF
 3592 2afe 488B75A0 		movq	-96(%rbp), %rsi
 3593 2b02 488B4D80 		movq	-128(%rbp), %rcx
 3594 2b06 4889B5F0 		movq	%rsi, -272(%rbp)
 3594      FEFFFF
 3595 2b0d F20F1085 		movsd	-272(%rbp), %xmm0
 3595      F0FEFFFF 
 3596 2b15 4889C6   		movq	%rax, %rsi
 3597 2b18 BF000000 		movl	$.LC33, %edi
 3597      00
 3598 2b1d B8010000 		movl	$1, %eax
 3598      00
 3599 2b22 E8000000 		call	printf
 3599      00
 3600              	.L195:
 816:final_with_print.c **** 							"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 817:final_with_print.c **** 							length, checksum, chan, speed);
 818:final_with_print.c **** 					}
 819:final_with_print.c **** 					CHECK_STATUS(status, status, cleanup);
 3601              		.loc 1 819 0
 3602 2b27 83BD28FF 		cmpl	$0, -216(%rbp)
 3602      FFFF00
 3603 2b2e 740E     		je	.L196
 3604              		.loc 1 819 0 is_stmt 0 discriminator 1
 3605 2b30 8B8528FF 		movl	-216(%rbp), %eax
 3605      FFFF
 3606 2b36 898514FF 		movl	%eax, -236(%rbp)
 3606      FFFF
 3607 2b3c EB20     		jmp	.L189
 3608              	.L196:
 820:final_with_print.c **** 
 821:final_with_print.c **** 				// Close the file
 822:final_with_print.c **** 					fclose(file);
 3609              		.loc 1 822 0 is_stmt 1
 3610 2b3e 488B8558 		movq	-168(%rbp), %rax
 3610      FFFFFF
 3611 2b45 4889C7   		movq	%rax, %rdi
 3612 2b48 E8000000 		call	fclose
 3612      00
 823:final_with_print.c **** 					file = NULL;
 3613              		.loc 1 823 0
 3614 2b4d 48C78558 		movq	$0, -168(%rbp)
 3614      FFFFFF00 
 3614      000000
 3615              	.LBE38:
 770:final_with_print.c **** 					uint16 checksum = 0x0000;
 3616              		.loc 1 770 0
 3617 2b58 90       		nop
 3618 2b59 E9AB0300 		jmp	.L178
 3618      00
 3619              	.L189:
 759:final_with_print.c **** 
 3620              		.loc 1 759 0 discriminator 2
 3621 2b5e E9E70300 		jmp	.L145
 3621      00
 3622              	.L184:
 824:final_with_print.c **** 				} else if ( isHexDigit(ch) ) {
 3623              		.loc 1 824 0
 3624 2b63 0FBE8510 		movsbl	-240(%rbp), %eax
 3624      FFFFFF
 3625 2b6a 89C7     		movl	%eax, %edi
 3626 2b6c E800EEFF 		call	isHexDigit
 3626      FF
 3627 2b71 84C0     		testb	%al, %al
 3628 2b73 0F848402 		je	.L198
 3628      0000
 3629              	.LBB39:
 825:final_with_print.c **** 				// Read a sequence of hex bytes to write
 826:final_with_print.c **** 					uint8 *dataPtr;
 827:final_with_print.c **** 					p = ptr + 1;
 3630              		.loc 1 827 0
 3631 2b79 488B0500 		movq	ptr(%rip), %rax
 3631      000000
 3632 2b80 4883C001 		addq	$1, %rax
 3633 2b84 48898570 		movq	%rax, -144(%rbp)
 3633      FFFFFF
 828:final_with_print.c **** 					while ( isHexDigit(*p) ) {
 3634              		.loc 1 828 0
 3635 2b8b EB08     		jmp	.L199
 3636              	.L200:
 829:final_with_print.c **** 						p++;
 3637              		.loc 1 829 0
 3638 2b8d 48838570 		addq	$1, -144(%rbp)
 3638      FFFFFF01 
 3639              	.L199:
 828:final_with_print.c **** 					while ( isHexDigit(*p) ) {
 3640              		.loc 1 828 0
 3641 2b95 488B8570 		movq	-144(%rbp), %rax
 3641      FFFFFF
 3642 2b9c 0FB600   		movzbl	(%rax), %eax
 3643 2b9f 0FBEC0   		movsbl	%al, %eax
 3644 2ba2 89C7     		movl	%eax, %edi
 3645 2ba4 E8C8EDFF 		call	isHexDigit
 3645      FF
 3646 2ba9 84C0     		testb	%al, %al
 3647 2bab 75E0     		jne	.L200
 830:final_with_print.c **** 					}
 831:final_with_print.c **** 					CHECK_STATUS((p - ptr) & 1, FLP_ODD_DIGITS, cleanup);
 3648              		.loc 1 831 0
 3649 2bad 488B8570 		movq	-144(%rbp), %rax
 3649      FFFFFF
 3650 2bb4 488B1500 		movq	ptr(%rip), %rdx
 3650      000000
 3651 2bbb 4829D0   		subq	%rdx, %rax
 3652 2bbe 83E001   		andl	$1, %eax
 3653 2bc1 4885C0   		testq	%rax, %rax
 3654 2bc4 740F     		je	.L201
 3655              		.loc 1 831 0 is_stmt 0 discriminator 1
 3656 2bc6 C78514FF 		movl	$9, -236(%rbp)
 3656      FFFF0900 
 3656      0000
 3657 2bd0 E9750300 		jmp	.L145
 3657      00
 3658              	.L201:
 832:final_with_print.c **** 					length = (size_t)(p - ptr) / 2;
 3659              		.loc 1 832 0 is_stmt 1
 3660 2bd5 488B8570 		movq	-144(%rbp), %rax
 3660      FFFFFF
 3661 2bdc 488B1500 		movq	ptr(%rip), %rdx
 3661      000000
 3662 2be3 4829D0   		subq	%rdx, %rax
 3663 2be6 48D1E8   		shrq	%rax
 3664 2be9 48898538 		movq	%rax, -200(%rbp)
 3664      FFFFFF
 833:final_with_print.c **** 					data = malloc(length);
 3665              		.loc 1 833 0
 3666 2bf0 488B8538 		movq	-200(%rbp), %rax
 3666      FFFFFF
 3667 2bf7 4889C7   		movq	%rax, %rdi
 3668 2bfa E8000000 		call	malloc
 3668      00
 3669 2bff 48898548 		movq	%rax, -184(%rbp)
 3669      FFFFFF
 834:final_with_print.c **** 					dataPtr = data;
 3670              		.loc 1 834 0
 3671 2c06 488B8548 		movq	-184(%rbp), %rax
 3671      FFFFFF
 3672 2c0d 48898578 		movq	%rax, -136(%rbp)
 3672      FFFFFF
 835:final_with_print.c **** 					for ( i = 0; i < length; i++ ) {
 3673              		.loc 1 835 0
 3674 2c14 48C78568 		movq	$0, -152(%rbp)
 3674      FFFFFF00 
 3674      000000
 3675 2c1f EB34     		jmp	.L202
 3676              	.L203:
 836:final_with_print.c **** 						getHexByte(dataPtr++);
 3677              		.loc 1 836 0 discriminator 3
 3678 2c21 488B8578 		movq	-136(%rbp), %rax
 3678      FFFFFF
 3679 2c28 488D5001 		leaq	1(%rax), %rdx
 3680 2c2c 48899578 		movq	%rdx, -136(%rbp)
 3680      FFFFFF
 3681 2c33 4889C7   		movq	%rax, %rdi
 3682 2c36 E829EEFF 		call	getHexByte
 3682      FF
 837:final_with_print.c **** 						ptr += 2;
 3683              		.loc 1 837 0 discriminator 3
 3684 2c3b 488B0500 		movq	ptr(%rip), %rax
 3684      000000
 3685 2c42 4883C002 		addq	$2, %rax
 3686 2c46 48890500 		movq	%rax, ptr(%rip)
 3686      000000
 835:final_with_print.c **** 					for ( i = 0; i < length; i++ ) {
 3687              		.loc 1 835 0 discriminator 3
 3688 2c4d 48838568 		addq	$1, -152(%rbp)
 3688      FFFFFF01 
 3689              	.L202:
 835:final_with_print.c **** 					for ( i = 0; i < length; i++ ) {
 3690              		.loc 1 835 0 is_stmt 0 discriminator 1
 3691 2c55 488B8538 		movq	-200(%rbp), %rax
 3691      FFFFFF
 3692 2c5c 48398568 		cmpq	%rax, -152(%rbp)
 3692      FFFFFF
 3693 2c63 72BC     		jb	.L203
 838:final_with_print.c **** 					}
 839:final_with_print.c **** 				#ifdef WIN32
 840:final_with_print.c **** 					QueryPerformanceCounter(&tvStart);
 841:final_with_print.c **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 842:final_with_print.c **** 					QueryPerformanceCounter(&tvEnd);
 843:final_with_print.c **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 844:final_with_print.c **** 					totalTime /= freq.QuadPart;
 845:final_with_print.c **** 					speed = (double)length / (1024*1024*totalTime);
 846:final_with_print.c **** 				#else
 847:final_with_print.c **** 					gettimeofday(&tvStart, NULL);
 3694              		.loc 1 847 0 is_stmt 1
 3695 2c65 488D45B0 		leaq	-80(%rbp), %rax
 3696 2c69 BE000000 		movl	$0, %esi
 3696      00
 3697 2c6e 4889C7   		movq	%rax, %rdi
 3698 2c71 E8000000 		call	gettimeofday
 3698      00
 848:final_with_print.c **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 3699              		.loc 1 848 0
 3700 2c76 488B9538 		movq	-200(%rbp), %rdx
 3700      FFFFFF
 3701 2c7d 488B4580 		movq	-128(%rbp), %rax
 3702 2c81 0FB6F0   		movzbl	%al, %esi
 3703 2c84 488BBDF8 		movq	-264(%rbp), %rdi
 3703      FEFFFF
 3704 2c8b 488B8D48 		movq	-184(%rbp), %rcx
 3704      FFFFFF
 3705 2c92 488B8508 		movq	-248(%rbp), %rax
 3705      FFFFFF
 3706 2c99 4989F8   		movq	%rdi, %r8
 3707 2c9c 4889C7   		movq	%rax, %rdi
 3708 2c9f E8000000 		call	flWriteChannel
 3708      00
 3709 2ca4 898524FF 		movl	%eax, -220(%rbp)
 3709      FFFF
 849:final_with_print.c **** 					gettimeofday(&tvEnd, NULL);
 3710              		.loc 1 849 0
 3711 2caa 488D45C0 		leaq	-64(%rbp), %rax
 3712 2cae BE000000 		movl	$0, %esi
 3712      00
 3713 2cb3 4889C7   		movq	%rax, %rdi
 3714 2cb6 E8000000 		call	gettimeofday
 3714      00
 850:final_with_print.c **** 					startTime = tvStart.tv_sec;
 3715              		.loc 1 850 0
 3716 2cbb 488B45B0 		movq	-80(%rbp), %rax
 3717 2cbf 48894588 		movq	%rax, -120(%rbp)
 851:final_with_print.c **** 					startTime *= 1000000;
 3718              		.loc 1 851 0
 3719 2cc3 488B4588 		movq	-120(%rbp), %rax
 3720 2cc7 4869C040 		imulq	$1000000, %rax, %rax
 3720      420F00
 3721 2cce 48894588 		movq	%rax, -120(%rbp)
 852:final_with_print.c **** 					startTime += tvStart.tv_usec;
 3722              		.loc 1 852 0
 3723 2cd2 488B45B8 		movq	-72(%rbp), %rax
 3724 2cd6 48014588 		addq	%rax, -120(%rbp)
 853:final_with_print.c **** 					endTime = tvEnd.tv_sec;
 3725              		.loc 1 853 0
 3726 2cda 488B45C0 		movq	-64(%rbp), %rax
 3727 2cde 48894590 		movq	%rax, -112(%rbp)
 854:final_with_print.c **** 					endTime *= 1000000;
 3728              		.loc 1 854 0
 3729 2ce2 488B4590 		movq	-112(%rbp), %rax
 3730 2ce6 4869C040 		imulq	$1000000, %rax, %rax
 3730      420F00
 3731 2ced 48894590 		movq	%rax, -112(%rbp)
 855:final_with_print.c **** 					endTime += tvEnd.tv_usec;
 3732              		.loc 1 855 0
 3733 2cf1 488B45C8 		movq	-56(%rbp), %rax
 3734 2cf5 48014590 		addq	%rax, -112(%rbp)
 856:final_with_print.c **** 					totalTime = (double)(endTime - startTime);
 3735              		.loc 1 856 0
 3736 2cf9 488B4590 		movq	-112(%rbp), %rax
 3737 2cfd 482B4588 		subq	-120(%rbp), %rax
 3738 2d01 660FEFC0 		pxor	%xmm0, %xmm0
 3739 2d05 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 3739      C0
 3740 2d0a F20F1145 		movsd	%xmm0, -104(%rbp)
 3740      98
 857:final_with_print.c **** 					totalTime /= 1000000;  // convert from uS to S.
 3741              		.loc 1 857 0
 3742 2d0f F20F1045 		movsd	-104(%rbp), %xmm0
 3742      98
 3743 2d14 F20F100D 		movsd	.LC29(%rip), %xmm1
 3743      00000000 
 3744 2d1c F20F5EC1 		divsd	%xmm1, %xmm0
 3745 2d20 F20F1145 		movsd	%xmm0, -104(%rbp)
 3745      98
 858:final_with_print.c **** 					speed = (double)length / (1024*1024*totalTime);
 3746              		.loc 1 858 0
 3747 2d25 488B8538 		movq	-200(%rbp), %rax
 3747      FFFFFF
 3748 2d2c 4885C0   		testq	%rax, %rax
 3749 2d2f 780B     		js	.L204
 3750 2d31 660FEFC0 		pxor	%xmm0, %xmm0
 3751 2d35 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 3751      C0
 3752 2d3a EB19     		jmp	.L205
 3753              	.L204:
 3754 2d3c 4889C2   		movq	%rax, %rdx
 3755 2d3f 48D1EA   		shrq	%rdx
 3756 2d42 83E001   		andl	$1, %eax
 3757 2d45 4809C2   		orq	%rax, %rdx
 3758 2d48 660FEFC0 		pxor	%xmm0, %xmm0
 3759 2d4c F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 3759      C2
 3760 2d51 F20F58C0 		addsd	%xmm0, %xmm0
 3761              	.L205:
 3762 2d55 F20F1055 		movsd	-104(%rbp), %xmm2
 3762      98
 3763 2d5a F20F100D 		movsd	.LC30(%rip), %xmm1
 3763      00000000 
 3764 2d62 F20F59CA 		mulsd	%xmm2, %xmm1
 3765 2d66 F20F5EC1 		divsd	%xmm1, %xmm0
 3766 2d6a F20F1145 		movsd	%xmm0, -96(%rbp)
 3766      A0
 859:final_with_print.c **** 				#endif
 860:final_with_print.c **** 					if ( enableBenchmarking ) {
 3767              		.loc 1 860 0
 3768 2d6f 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 3768      000000
 3769 2d76 84C0     		testb	%al, %al
 3770 2d78 744C     		je	.L206
 861:final_with_print.c **** 						printf(
 862:final_with_print.c **** 							"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 863:final_with_print.c **** 							length, calcChecksum(data, length), chan, speed);
 3771              		.loc 1 863 0
 3772 2d7a 488B9538 		movq	-200(%rbp), %rdx
 3772      FFFFFF
 3773 2d81 488B8548 		movq	-184(%rbp), %rax
 3773      FFFFFF
 3774 2d88 4889D6   		movq	%rdx, %rsi
 3775 2d8b 4889C7   		movq	%rax, %rdi
 3776 2d8e E81CECFF 		call	calcChecksum
 3776      FF
 861:final_with_print.c **** 						printf(
 3777              		.loc 1 861 0
 3778 2d93 0FB7D0   		movzwl	%ax, %edx
 3779 2d96 488B8538 		movq	-200(%rbp), %rax
 3779      FFFFFF
 3780 2d9d 488B75A0 		movq	-96(%rbp), %rsi
 3781 2da1 488B4D80 		movq	-128(%rbp), %rcx
 3782 2da5 4889B5F0 		movq	%rsi, -272(%rbp)
 3782      FEFFFF
 3783 2dac F20F1085 		movsd	-272(%rbp), %xmm0
 3783      F0FEFFFF 
 3784 2db4 4889C6   		movq	%rax, %rsi
 3785 2db7 BF000000 		movl	$.LC33, %edi
 3785      00
 3786 2dbc B8010000 		movl	$1, %eax
 3786      00
 3787 2dc1 E8000000 		call	printf
 3787      00
 3788              	.L206:
 864:final_with_print.c **** 					}
 865:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3789              		.loc 1 865 0
 3790 2dc6 83BD24FF 		cmpl	$0, -220(%rbp)
 3790      FFFF00
 3791 2dcd 740F     		je	.L207
 3792              		.loc 1 865 0 is_stmt 0 discriminator 1
 3793 2dcf C78514FF 		movl	$1, -236(%rbp)
 3793      FFFF0100 
 3793      0000
 3794 2dd9 E96C0100 		jmp	.L145
 3794      00
 3795              	.L207:
 866:final_with_print.c **** 					free(data);
 3796              		.loc 1 866 0 is_stmt 1
 3797 2dde 488B8548 		movq	-184(%rbp), %rax
 3797      FFFFFF
 3798 2de5 4889C7   		movq	%rax, %rdi
 3799 2de8 E8000000 		call	free
 3799      00
 867:final_with_print.c **** 					data = NULL;
 3800              		.loc 1 867 0
 3801 2ded 48C78548 		movq	$0, -184(%rbp)
 3801      FFFFFF00 
 3801      000000
 3802              	.LBE39:
 868:final_with_print.c **** 				} else {
 869:final_with_print.c **** 					FAIL(FLP_ILL_CHAR, cleanup);
 870:final_with_print.c **** 				}
 871:final_with_print.c **** 				break;
 3803              		.loc 1 871 0
 3804 2df8 E90C0100 		jmp	.L178
 3804      00
 3805              	.L198:
 869:final_with_print.c **** 				}
 3806              		.loc 1 869 0
 3807 2dfd C78514FF 		movl	$5, -236(%rbp)
 3807      FFFF0500 
 3807      0000
 3808 2e07 90       		nop
 3809 2e08 E93D0100 		jmp	.L145
 3809      00
 3810              	.L151:
 3811              	.LBE37:
 3812              	.LBB40:
 872:final_with_print.c **** 			}
 873:final_with_print.c **** 			case '+':{
 874:final_with_print.c **** 				uint32 conduit;
 875:final_with_print.c **** 				char *end;
 876:final_with_print.c **** 				ptr++;
 3813              		.loc 1 876 0
 3814 2e0d 488B0500 		movq	ptr(%rip), %rax
 3814      000000
 3815 2e14 4883C001 		addq	$1, %rax
 3816 2e18 48890500 		movq	%rax, ptr(%rip)
 3816      000000
 877:final_with_print.c **** 
 878:final_with_print.c **** 			// Get the conduit
 879:final_with_print.c **** 				errno = 0;
 3817              		.loc 1 879 0
 3818 2e1f E8000000 		call	__errno_location
 3818      00
 3819 2e24 C7000000 		movl	$0, (%rax)
 3819      0000
 880:final_with_print.c **** 				conduit = (uint32)strtoul(ptr, &end, 16);
 3820              		.loc 1 880 0
 3821 2e2a 488B0500 		movq	ptr(%rip), %rax
 3821      000000
 3822 2e31 488D8D40 		leaq	-192(%rbp), %rcx
 3822      FFFFFF
 3823 2e38 BA100000 		movl	$16, %edx
 3823      00
 3824 2e3d 4889CE   		movq	%rcx, %rsi
 3825 2e40 4889C7   		movq	%rax, %rdi
 3826 2e43 E8000000 		call	strtoul
 3826      00
 3827 2e48 89852CFF 		movl	%eax, -212(%rbp)
 3827      FFFF
 881:final_with_print.c **** 				CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 3828              		.loc 1 881 0
 3829 2e4e E8000000 		call	__errno_location
 3829      00
 3830 2e53 8B00     		movl	(%rax), %eax
 3831 2e55 85C0     		testl	%eax, %eax
 3832 2e57 740F     		je	.L208
 3833              		.loc 1 881 0 is_stmt 0 discriminator 1
 3834 2e59 C78514FF 		movl	$2, -236(%rbp)
 3834      FFFF0200 
 3834      0000
 3835 2e63 E9E20000 		jmp	.L145
 3835      00
 3836              	.L208:
 882:final_with_print.c **** 
 883:final_with_print.c **** 			// Ensure that it's 0-127
 884:final_with_print.c **** 				CHECK_STATUS(conduit > 255, FLP_CONDUIT_RANGE, cleanup);
 3837              		.loc 1 884 0 is_stmt 1
 3838 2e68 81BD2CFF 		cmpl	$255, -212(%rbp)
 3838      FFFFFF00 
 3838      0000
 3839 2e72 760F     		jbe	.L210
 3840              		.loc 1 884 0 is_stmt 0 discriminator 1
 3841 2e74 C78514FF 		movl	$4, -236(%rbp)
 3841      FFFF0400 
 3841      0000
 3842 2e7e E9C70000 		jmp	.L145
 3842      00
 3843              	.L210:
 885:final_with_print.c **** 				ptr = end;
 3844              		.loc 1 885 0 is_stmt 1
 3845 2e83 488B8540 		movq	-192(%rbp), %rax
 3845      FFFFFF
 3846 2e8a 48890500 		movq	%rax, ptr(%rip)
 3846      000000
 886:final_with_print.c **** 
 887:final_with_print.c **** 			// Only two valid chars at this point:
 888:final_with_print.c **** 				CHECK_STATUS(*ptr != '\0' && *ptr != ';', FLP_ILL_CHAR, cleanup);
 3847              		.loc 1 888 0
 3848 2e91 488B0500 		movq	ptr(%rip), %rax
 3848      000000
 3849 2e98 0FB600   		movzbl	(%rax), %eax
 3850 2e9b 84C0     		testb	%al, %al
 3851 2e9d 741D     		je	.L211
 3852              		.loc 1 888 0 is_stmt 0 discriminator 1
 3853 2e9f 488B0500 		movq	ptr(%rip), %rax
 3853      000000
 3854 2ea6 0FB600   		movzbl	(%rax), %eax
 3855 2ea9 3C3B     		cmpb	$59, %al
 3856 2eab 740F     		je	.L211
 3857              		.loc 1 888 0 discriminator 2
 3858 2ead C78514FF 		movl	$5, -236(%rbp)
 3858      FFFF0500 
 3858      0000
 3859 2eb7 E98E0000 		jmp	.L145
 3859      00
 3860              	.L211:
 889:final_with_print.c **** 
 890:final_with_print.c **** 				fStatus = flSelectConduit(handle, (uint8)conduit, error);
 3861              		.loc 1 890 0 is_stmt 1
 3862 2ebc 8B852CFF 		movl	-212(%rbp), %eax
 3862      FFFF
 3863 2ec2 0FB6C8   		movzbl	%al, %ecx
 3864 2ec5 488B95F8 		movq	-264(%rbp), %rdx
 3864      FEFFFF
 3865 2ecc 488B8508 		movq	-248(%rbp), %rax
 3865      FFFFFF
 3866 2ed3 89CE     		movl	%ecx, %esi
 3867 2ed5 4889C7   		movq	%rax, %rdi
 3868 2ed8 E8000000 		call	flSelectConduit
 3868      00
 3869 2edd 898524FF 		movl	%eax, -220(%rbp)
 3869      FFFF
 891:final_with_print.c **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3870              		.loc 1 891 0
 3871 2ee3 83BD24FF 		cmpl	$0, -220(%rbp)
 3871      FFFF00
 3872 2eea 741C     		je	.L223
 3873              		.loc 1 891 0 is_stmt 0 discriminator 1
 3874 2eec C78514FF 		movl	$1, -236(%rbp)
 3874      FFFF0100 
 3874      0000
 3875 2ef6 90       		nop
 3876 2ef7 EB51     		jmp	.L145
 3877              	.L221:
 3878              	.LBE40:
 892:final_with_print.c **** 				break;
 893:final_with_print.c **** 			}
 894:final_with_print.c **** 			default:
 895:final_with_print.c **** 			FAIL(FLP_ILL_CHAR, cleanup);
 3879              		.loc 1 895 0 is_stmt 1
 3880 2ef9 C78514FF 		movl	$5, -236(%rbp)
 3880      FFFF0500 
 3880      0000
 3881 2f03 EB45     		jmp	.L145
 3882              	.L222:
 3883              	.LBB41:
 747:final_with_print.c **** 			}
 3884              		.loc 1 747 0
 3885 2f05 90       		nop
 3886 2f06 EB01     		jmp	.L178
 3887              	.L223:
 3888              	.LBE41:
 3889              	.LBB42:
 892:final_with_print.c **** 				break;
 3890              		.loc 1 892 0
 3891 2f08 90       		nop
 3892              	.L178:
 3893              	.LBE42:
 896:final_with_print.c **** 		}
 897:final_with_print.c **** 	} while ( *ptr == ';' );
 3894              		.loc 1 897 0
 3895 2f09 488B0500 		movq	ptr(%rip), %rax
 3895      000000
 3896 2f10 0FB600   		movzbl	(%rax), %eax
 3897 2f13 3C3B     		cmpb	$59, %al
 3898 2f15 0F846DF1 		je	.L146
 3898      FFFF
 898:final_with_print.c **** 	CHECK_STATUS(*ptr != '\0', FLP_ILL_CHAR, cleanup);
 3899              		.loc 1 898 0
 3900 2f1b 488B0500 		movq	ptr(%rip), %rax
 3900      000000
 3901 2f22 0FB600   		movzbl	(%rax), %eax
 3902 2f25 84C0     		testb	%al, %al
 3903 2f27 740C     		je	.L214
 3904              		.loc 1 898 0 is_stmt 0 discriminator 1
 3905 2f29 C78514FF 		movl	$5, -236(%rbp)
 3905      FFFF0500 
 3905      0000
 3906 2f33 EB15     		jmp	.L145
 3907              	.L214:
 899:final_with_print.c **** 
 900:final_with_print.c **** 	dump(0x00000000, dataFromFPGA.data, dataFromFPGA.length);
 3908              		.loc 1 900 0 is_stmt 1
 3909 2f35 488B55D8 		movq	-40(%rbp), %rdx
 3910 2f39 488B45D0 		movq	-48(%rbp), %rax
 3911 2f3d 4889C6   		movq	%rax, %rsi
 3912 2f40 BF000000 		movl	$0, %edi
 3912      00
 3913 2f45 E8000000 		call	dump
 3913      00
 3914              	.L145:
 901:final_with_print.c **** 
 902:final_with_print.c **** 	cleanup:
 903:final_with_print.c **** 	bufDestroy(&dataFromFPGA);
 3915              		.loc 1 903 0
 3916 2f4a 488D45D0 		leaq	-48(%rbp), %rax
 3917 2f4e 4889C7   		movq	%rax, %rdi
 3918 2f51 E8000000 		call	bufDestroy
 3918      00
 904:final_with_print.c **** 	if ( file ) {
 3919              		.loc 1 904 0
 3920 2f56 4883BD58 		cmpq	$0, -168(%rbp)
 3920      FFFFFF00 
 3921 2f5e 740F     		je	.L215
 905:final_with_print.c **** 		fclose(file);
 3922              		.loc 1 905 0
 3923 2f60 488B8558 		movq	-168(%rbp), %rax
 3923      FFFFFF
 3924 2f67 4889C7   		movq	%rax, %rdi
 3925 2f6a E8000000 		call	fclose
 3925      00
 3926              	.L215:
 906:final_with_print.c **** 	}
 907:final_with_print.c **** 	free(fileName);
 3927              		.loc 1 907 0
 3928 2f6f 488B8550 		movq	-176(%rbp), %rax
 3928      FFFFFF
 3929 2f76 4889C7   		movq	%rax, %rdi
 3930 2f79 E8000000 		call	free
 3930      00
 908:final_with_print.c **** 	free(data);
 3931              		.loc 1 908 0
 3932 2f7e 488B8548 		movq	-184(%rbp), %rax
 3932      FFFFFF
 3933 2f85 4889C7   		movq	%rax, %rdi
 3934 2f88 E8000000 		call	free
 3934      00
 909:final_with_print.c **** 	if ( retVal > FLP_LIBERR ) {
 3935              		.loc 1 909 0
 3936 2f8d 83BD14FF 		cmpl	$1, -236(%rbp)
 3936      FFFF01
 3937 2f94 0F86A700 		jbe	.L216
 3937      0000
 3938              	.LBB43:
 910:final_with_print.c **** 		const int column = (int)(ptr - line);
 3939              		.loc 1 910 0
 3940 2f9a 488B0500 		movq	ptr(%rip), %rax
 3940      000000
 3941 2fa1 4889C2   		movq	%rax, %rdx
 3942 2fa4 488B8500 		movq	-256(%rbp), %rax
 3942      FFFFFF
 3943 2fab 4829C2   		subq	%rax, %rdx
 3944 2fae 4889D0   		movq	%rdx, %rax
 3945 2fb1 898534FF 		movl	%eax, -204(%rbp)
 3945      FFFF
 911:final_with_print.c **** 		int i;
 912:final_with_print.c **** 		fprintf(stderr, "%s at column %d\n  %s\n  ", errMessages[retVal], column, line);
 3946              		.loc 1 912 0
 3947 2fb7 8B8514FF 		movl	-236(%rbp), %eax
 3947      FFFF
 3948 2fbd 488B14C5 		movq	errMessages(,%rax,8), %rdx
 3948      00000000 
 3949 2fc5 488B0500 		movq	stderr(%rip), %rax
 3949      000000
 3950 2fcc 488BB500 		movq	-256(%rbp), %rsi
 3950      FFFFFF
 3951 2fd3 8B8D34FF 		movl	-204(%rbp), %ecx
 3951      FFFF
 3952 2fd9 4989F0   		movq	%rsi, %r8
 3953 2fdc BE000000 		movl	$.LC34, %esi
 3953      00
 3954 2fe1 4889C7   		movq	%rax, %rdi
 3955 2fe4 B8000000 		movl	$0, %eax
 3955      00
 3956 2fe9 E8000000 		call	fprintf
 3956      00
 913:final_with_print.c **** 		for ( i = 0; i < column; i++ ) {
 3957              		.loc 1 913 0
 3958 2fee C7851CFF 		movl	$0, -228(%rbp)
 3958      FFFF0000 
 3958      0000
 3959 2ff8 EB1B     		jmp	.L217
 3960              	.L218:
 914:final_with_print.c **** 			fprintf(stderr, " ");
 3961              		.loc 1 914 0 discriminator 3
 3962 2ffa 488B0500 		movq	stderr(%rip), %rax
 3962      000000
 3963 3001 4889C6   		movq	%rax, %rsi
 3964 3004 BF200000 		movl	$32, %edi
 3964      00
 3965 3009 E8000000 		call	fputc
 3965      00
 913:final_with_print.c **** 		for ( i = 0; i < column; i++ ) {
 3966              		.loc 1 913 0 discriminator 3
 3967 300e 83851CFF 		addl	$1, -228(%rbp)
 3967      FFFF01
 3968              	.L217:
 913:final_with_print.c **** 		for ( i = 0; i < column; i++ ) {
 3969              		.loc 1 913 0 is_stmt 0 discriminator 1
 3970 3015 8B851CFF 		movl	-228(%rbp), %eax
 3970      FFFF
 3971 301b 3B8534FF 		cmpl	-204(%rbp), %eax
 3971      FFFF
 3972 3021 7CD7     		jl	.L218
 915:final_with_print.c **** 		}
 916:final_with_print.c **** 		fprintf(stderr, "^\n");
 3973              		.loc 1 916 0 is_stmt 1
 3974 3023 488B0500 		movq	stderr(%rip), %rax
 3974      000000
 3975 302a 4889C1   		movq	%rax, %rcx
 3976 302d BA020000 		movl	$2, %edx
 3976      00
 3977 3032 BE010000 		movl	$1, %esi
 3977      00
 3978 3037 BF000000 		movl	$.LC35, %edi
 3978      00
 3979 303c E8000000 		call	fwrite
 3979      00
 3980              	.L216:
 3981              	.LBE43:
 917:final_with_print.c **** 	}
 918:final_with_print.c **** 	return retVal;
 3982              		.loc 1 918 0
 3983 3041 8B8514FF 		movl	-236(%rbp), %eax
 3983      FFFF
 919:final_with_print.c **** }
 3984              		.loc 1 919 0
 3985 3047 488B4DF8 		movq	-8(%rbp), %rcx
 3986 304b 6448330C 		xorq	%fs:40, %rcx
 3986      25280000 
 3986      00
 3987 3054 7405     		je	.L220
 3988 3056 E8000000 		call	__stack_chk_fail
 3988      00
 3989              	.L220:
 3990 305b C9       		leave
 3991              		.cfi_def_cfa 7, 8
 3992 305c C3       		ret
 3993              		.cfi_endproc
 3994              	.LFE21:
 3996              		.section	.rodata
 3997              	.LC36:
 3998 02c1 30303030 		.string	"0000"
 3998      00
 3999              	.LC37:
 4000 02c6 30303031 		.string	"0001"
 4000      00
 4001              	.LC38:
 4002 02cb 30303130 		.string	"0010"
 4002      00
 4003              	.LC39:
 4004 02d0 30303131 		.string	"0011"
 4004      00
 4005              	.LC40:
 4006 02d5 30313030 		.string	"0100"
 4006      00
 4007              	.LC41:
 4008 02da 30313031 		.string	"0101"
 4008      00
 4009              	.LC42:
 4010 02df 30313130 		.string	"0110"
 4010      00
 4011              	.LC43:
 4012 02e4 30313131 		.string	"0111"
 4012      00
 4013              	.LC44:
 4014 02e9 31303030 		.string	"1000"
 4014      00
 4015              	.LC45:
 4016 02ee 31303031 		.string	"1001"
 4016      00
 4017              	.LC46:
 4018 02f3 58585858 		.string	"XXXX"
 4018      00
 4019              	.LC47:
 4020 02f8 31303130 		.string	"1010"
 4020      00
 4021              	.LC48:
 4022 02fd 31303131 		.string	"1011"
 4022      00
 4023              	.LC49:
 4024 0302 31313030 		.string	"1100"
 4024      00
 4025              	.LC50:
 4026 0307 31313031 		.string	"1101"
 4026      00
 4027              	.LC51:
 4028 030c 31313130 		.string	"1110"
 4028      00
 4029              	.LC52:
 4030 0311 31313131 		.string	"1111"
 4030      00
 4031              		.data
 4032              		.align 32
 4035              	nibbles:
 4036 0000 00000000 		.quad	.LC36
 4036      00000000 
 4037 0008 00000000 		.quad	.LC37
 4037      00000000 
 4038 0010 00000000 		.quad	.LC38
 4038      00000000 
 4039 0018 00000000 		.quad	.LC39
 4039      00000000 
 4040 0020 00000000 		.quad	.LC40
 4040      00000000 
 4041 0028 00000000 		.quad	.LC41
 4041      00000000 
 4042 0030 00000000 		.quad	.LC42
 4042      00000000 
 4043 0038 00000000 		.quad	.LC43
 4043      00000000 
 4044 0040 00000000 		.quad	.LC44
 4044      00000000 
 4045 0048 00000000 		.quad	.LC45
 4045      00000000 
 4046 0050 00000000 		.quad	.LC46
 4046      00000000 
 4047 0058 00000000 		.quad	.LC46
 4047      00000000 
 4048 0060 00000000 		.quad	.LC46
 4048      00000000 
 4049 0068 00000000 		.quad	.LC46
 4049      00000000 
 4050 0070 00000000 		.quad	.LC46
 4050      00000000 
 4051 0078 00000000 		.quad	.LC46
 4051      00000000 
 4052 0080 00000000 		.quad	.LC46
 4052      00000000 
 4053 0088 00000000 		.quad	.LC47
 4053      00000000 
 4054 0090 00000000 		.quad	.LC48
 4054      00000000 
 4055 0098 00000000 		.quad	.LC49
 4055      00000000 
 4056 00a0 00000000 		.quad	.LC50
 4056      00000000 
 4057 00a8 00000000 		.quad	.LC51
 4057      00000000 
 4058 00b0 00000000 		.quad	.LC52
 4058      00000000 
 4059              		.text
 4060              		.globl	asciiToBinary
 4062              	asciiToBinary:
 4063              	.LFB22:
 920:final_with_print.c **** 
 921:final_with_print.c **** static const char *nibbles[] = {
 922:final_with_print.c **** 	"0000",  // '0'
 923:final_with_print.c **** 	"0001",  // '1'
 924:final_with_print.c **** 	"0010",  // '2'
 925:final_with_print.c **** 	"0011",  // '3'
 926:final_with_print.c **** 	"0100",  // '4'
 927:final_with_print.c **** 	"0101",  // '5'
 928:final_with_print.c **** 	"0110",  // '6'
 929:final_with_print.c **** 	"0111",  // '7'
 930:final_with_print.c **** 	"1000",  // '8'
 931:final_with_print.c **** 	"1001",  // '9'
 932:final_with_print.c **** 
 933:final_with_print.c **** 	"XXXX",  // ':'
 934:final_with_print.c **** 	"XXXX",  // ';'
 935:final_with_print.c **** 	"XXXX",  // '<'
 936:final_with_print.c **** 	"XXXX",  // '='
 937:final_with_print.c **** 	"XXXX",  // '>'
 938:final_with_print.c **** 	"XXXX",  // '?'
 939:final_with_print.c **** 	"XXXX",  // '@'
 940:final_with_print.c **** 
 941:final_with_print.c **** 	"1010",  // 'A'
 942:final_with_print.c **** 	"1011",  // 'B'
 943:final_with_print.c **** 	"1100",  // 'C'
 944:final_with_print.c **** 	"1101",  // 'D'
 945:final_with_print.c **** 	"1110",  // 'E'
 946:final_with_print.c **** 	"1111"   // 'F'
 947:final_with_print.c **** };
 948:final_with_print.c **** 
 949:final_with_print.c **** ////////////////////////////////////////////////////////////////////////
 950:final_with_print.c **** int asciiToBinary(int input) {
 4064              		.loc 1 950 0
 4065              		.cfi_startproc
 4066 305d 55       		pushq	%rbp
 4067              		.cfi_def_cfa_offset 16
 4068              		.cfi_offset 6, -16
 4069 305e 4889E5   		movq	%rsp, %rbp
 4070              		.cfi_def_cfa_register 6
 4071 3061 897DEC   		movl	%edi, -20(%rbp)
 951:final_with_print.c **** 	int result = 0, i = 1, remainder;
 4072              		.loc 1 951 0
 4073 3064 C745F400 		movl	$0, -12(%rbp)
 4073      000000
 4074 306b C745F801 		movl	$1, -8(%rbp)
 4074      000000
 952:final_with_print.c **** 
 953:final_with_print.c ****         /* convert decimal to binary format */
 954:final_with_print.c **** 	while (input > 0) {
 4075              		.loc 1 954 0
 4076 3072 EB39     		jmp	.L225
 4077              	.L226:
 955:final_with_print.c **** 		remainder = input % 2;
 4078              		.loc 1 955 0
 4079 3074 8B45EC   		movl	-20(%rbp), %eax
 4080 3077 99       		cltd
 4081 3078 C1EA1F   		shrl	$31, %edx
 4082 307b 01D0     		addl	%edx, %eax
 4083 307d 83E001   		andl	$1, %eax
 4084 3080 29D0     		subl	%edx, %eax
 4085 3082 8945FC   		movl	%eax, -4(%rbp)
 956:final_with_print.c **** 		result = result + (i * remainder);
 4086              		.loc 1 956 0
 4087 3085 8B45F8   		movl	-8(%rbp), %eax
 4088 3088 0FAF45FC 		imull	-4(%rbp), %eax
 4089 308c 0145F4   		addl	%eax, -12(%rbp)
 957:final_with_print.c **** 		input = input / 2;
 4090              		.loc 1 957 0
 4091 308f 8B45EC   		movl	-20(%rbp), %eax
 4092 3092 89C2     		movl	%eax, %edx
 4093 3094 C1EA1F   		shrl	$31, %edx
 4094 3097 01D0     		addl	%edx, %eax
 4095 3099 D1F8     		sarl	%eax
 4096 309b 8945EC   		movl	%eax, -20(%rbp)
 958:final_with_print.c **** 		i = i * 10;
 4097              		.loc 1 958 0
 4098 309e 8B55F8   		movl	-8(%rbp), %edx
 4099 30a1 89D0     		movl	%edx, %eax
 4100 30a3 C1E002   		sall	$2, %eax
 4101 30a6 01D0     		addl	%edx, %eax
 4102 30a8 01C0     		addl	%eax, %eax
 4103 30aa 8945F8   		movl	%eax, -8(%rbp)
 4104              	.L225:
 954:final_with_print.c **** 		remainder = input % 2;
 4105              		.loc 1 954 0
 4106 30ad 837DEC00 		cmpl	$0, -20(%rbp)
 4107 30b1 7FC1     		jg	.L226
 959:final_with_print.c **** 	}
 960:final_with_print.c **** 
 961:final_with_print.c ****         /* print the resultant binary value */
 962:final_with_print.c **** 	return(result);
 4108              		.loc 1 962 0
 4109 30b3 8B45F4   		movl	-12(%rbp), %eax
 963:final_with_print.c **** }
 4110              		.loc 1 963 0
 4111 30b6 5D       		popq	%rbp
 4112              		.cfi_def_cfa 7, 8
 4113 30b7 C3       		ret
 4114              		.cfi_endproc
 4115              	.LFE22:
 4117              		.section	.rodata
 4118 0316 0000     		.align 8
 4119              	.LC53:
 4120 0318 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 4120      20202020 
 4120      20202020 
 4120      76656E64 
 4120      6F722049 
 4121              	.LC54:
 4122 034d 3C564944 		.string	"<VID:PID>"
 4122      3A504944 
 4122      3E00
 4123              	.LC55:
 4124 0357 69767000 		.string	"ivp"
 4125              	.LC56:
 4126 035b 6900     		.string	"i"
 4127 035d 000000   		.align 8
 4128              	.LC57:
 4129 0360 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 4129      20202056 
 4129      49442C20 
 4129      50494420 
 4129      616E6420 
 4130              	.LC58:
 4131 0395 3C564944 		.string	"<VID:PID[:DID]>"
 4131      3A504944 
 4131      5B3A4449 
 4131      445D3E00 
 4132              	.LC59:
 4133 03a5 767000   		.string	"vp"
 4134              	.LC60:
 4135 03a8 7600     		.string	"v"
 4136 03aa 00000000 		.align 8
 4136      0000
 4137              	.LC61:
 4138 03b0 20202020 		.string	"        firmware to RAM-load (or use std fw)"
 4138      20202020 
 4138      6669726D 
 4138      77617265 
 4138      20746F20 
 4139              	.LC62:
 4140 03dd 3C666972 		.string	"<firmware.hex>"
 4140      6D776172 
 4140      652E6865 
 4140      783E00
 4141              	.LC63:
 4142 03ec 667700   		.string	"fw"
 4143              	.LC64:
 4144 03ef 6600     		.string	"f"
 4145 03f1 00000000 		.align 8
 4145      000000
 4146              	.LC65:
 4147 03f8 20726561 		.string	" read/write digital ports (e.g B13+,C1-,B2?)"
 4147      642F7772 
 4147      69746520 
 4147      64696769 
 4147      74616C20 
 4148              	.LC66:
 4149 0425 3C626974 		.string	"<bitCfg[,bitCfg]*>"
 4149      4366675B 
 4149      2C626974 
 4149      4366675D 
 4149      2A3E00
 4150              	.LC67:
 4151 0438 706F7274 		.string	"ports"
 4151      7300
 4152              	.LC68:
 4153 043e 6400     		.string	"d"
 4154              	.LC69:
 4155 0440 20202020 		.string	"         query the JTAG chain"
 4155      20202020 
 4155      20717565 
 4155      72792074 
 4155      6865204A 
 4156              	.LC70:
 4157 045e 3C6A7461 		.string	"<jtagBits>"
 4157      67426974 
 4157      733E00
 4158              	.LC71:
 4159 0469 71756572 		.string	"query"
 4159      7900
 4160              	.LC72:
 4161 046f 7100     		.string	"q"
 4162              	.LC73:
 4163 0471 20202020 		.string	"         program a device"
 4163      20202020 
 4163      2070726F 
 4163      6772616D 
 4163      20612064 
 4164              	.LC74:
 4165 048b 3C636F6E 		.string	"<config>"
 4165      6669673E 
 4165      00
 4166              	.LC75:
 4167 0494 70726F67 		.string	"program"
 4167      72616D00 
 4168              	.LC76:
 4169 049c 7000     		.string	"p"
 4170 049e 0000     		.align 8
 4171              	.LC77:
 4172 04a0 20202020 		.string	"        which comm conduit to choose (default 0x01)"
 4172      20202020 
 4172      77686963 
 4172      6820636F 
 4172      6D6D2063 
 4173              	.LC78:
 4174 04d4 3C636F6E 		.string	"<conduit>"
 4174      64756974 
 4174      3E00
 4175              	.LC79:
 4176 04de 636F6E64 		.string	"conduit"
 4176      75697400 
 4177              	.LC80:
 4178 04e6 6300     		.string	"c"
 4179              		.align 8
 4180              	.LC81:
 4181 04e8 20202020 		.string	"    a series of CommFPGA actions"
 4181      61207365 
 4181      72696573 
 4181      206F6620 
 4181      436F6D6D 
 4182              	.LC82:
 4183 0509 3C616374 		.string	"<actionString>"
 4183      696F6E53 
 4183      7472696E 
 4183      673E00
 4184              	.LC83:
 4185 0518 61637469 		.string	"action"
 4185      6F6E00
 4186              	.LC84:
 4187 051f 6100     		.string	"a"
 4188 0521 00000000 		.align 8
 4188      000000
 4189              	.LC85:
 4190 0528 20202020 		.string	"                 some other stuff"
 4190      20202020 
 4190      20202020 
 4190      20202020 
 4190      20736F6D 
 4191              	.LC86:
 4192 054a 736F6D65 		.string	"some stuff"
 4192      20737475 
 4192      666600
 4193              	.LC87:
 4194 0555 7A00     		.string	"z"
 4195 0557 00       		.align 8
 4196              	.LC88:
 4197 0558 20202020 		.string	"                    start up an interactive CommFPGA session"
 4197      20202020 
 4197      20202020 
 4197      20202020 
 4197      20202020 
 4198              	.LC89:
 4199 0595 7368656C 		.string	"shell"
 4199      6C00
 4200              	.LC90:
 4201 059b 7300     		.string	"s"
 4202 059d 000000   		.align 8
 4203              	.LC91:
 4204 05a0 20202020 		.string	"                enable benchmarking & chefcksumming"
 4204      20202020 
 4204      20202020 
 4204      20202020 
 4204      656E6162 
 4205              	.LC92:
 4206 05d4 62656E63 		.string	"benchmark"
 4206      686D6172 
 4206      6B00
 4207              	.LC93:
 4208 05de 6200     		.string	"b"
 4209              		.align 8
 4210              	.LC94:
 4211 05e0 20202020 		.string	"                    reset the bulk endpoints"
 4211      20202020 
 4211      20202020 
 4211      20202020 
 4211      20202020 
 4212              	.LC95:
 4213 060d 72657365 		.string	"reset"
 4213      7400
 4214 0613 00000000 		.align 8
 4214      00
 4215              	.LC96:
 4216 0618 20202077 		.string	"   write data from channel ch to file"
 4216      72697465 
 4216      20646174 
 4216      61206672 
 4216      6F6D2063 
 4217              	.LC97:
 4218 063e 3C63683A 		.string	"<ch:file.bin>"
 4218      66696C65 
 4218      2E62696E 
 4218      3E00
 4219              	.LC98:
 4220 064c 64756D70 		.string	"dumploop"
 4220      6C6F6F70 
 4220      00
 4221              	.LC99:
 4222 0655 6C00     		.string	"l"
 4223 0657 00       		.align 8
 4224              	.LC100:
 4225 0658 20202020 		.string	"                     print this help and exit"
 4225      20202020 
 4225      20202020 
 4225      20202020 
 4225      20202020 
 4226              	.LC101:
 4227 0686 68656C70 		.string	"help"
 4227      00
 4228              	.LC102:
 4229 068b 6800     		.string	"h"
 4230 068d 000000   		.align 8
 4231              	.LC103:
 4232 0690 20202077 		.string	"   write firmware to FX2's EEPROM (!!)"
 4232      72697465 
 4232      20666972 
 4232      6D776172 
 4232      6520746F 
 4233              	.LC104:
 4234 06b7 3C737464 		.string	"<std|fw.hex|fw.iic>"
 4234      7C66772E 
 4234      6865787C 
 4234      66772E69 
 4234      69633E00 
 4235              	.LC105:
 4236 06cb 65657072 		.string	"eeprom"
 4236      6F6D00
 4237 06d2 00000000 		.align 8
 4237      0000
 4238              	.LC106:
 4239 06d8 20202020 		.string	"     backup FX2's EEPROM (e.g 128:fw.iic)\n"
 4239      20626163 
 4239      6B757020 
 4239      46583227 
 4239      73204545 
 4240              	.LC107:
 4241 0703 3C6B6269 		.string	"<kbitSize:fw.iic>"
 4241      7453697A 
 4241      653A6677 
 4241      2E696963 
 4241      3E00
 4242              	.LC108:
 4243 0715 6261636B 		.string	"backup"
 4243      757000
 4244              	.LC109:
 4245 071c 666C636C 		.string	"flcli"
 4245      6900
 4246              	.LC110:
 4247 0722 25733A20 		.string	"%s: insufficient memory\n"
 4247      696E7375 
 4247      66666963 
 4247      69656E74 
 4247      206D656D 
 4248 073b 00000000 		.align 8
 4248      00
 4249              	.LC111:
 4250 0740 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s"
 4250      4C696E6B 
 4250      20436F6D 
 4250      6D616E64 
 4250      2D4C696E 
 4251              	.LC112:
 4252 0794 0A00     		.string	"\n"
 4253 0796 0000     		.align 8
 4254              	.LC113:
 4255 0798 0A496E74 		.string	"\nInteract with an FPGALink device.\n"
 4255      65726163 
 4255      74207769 
 4255      74682061 
 4255      6E204650 
 4256              	.LC114:
 4257 07bc 2020252D 		.string	"  %-10s %s\n"
 4257      31307320 
 4257      25730A00 
 4258              		.align 8
 4259              	.LC115:
 4260 07c8 54727920 		.string	"Try '%s --help' for more information.\n"
 4260      27257320 
 4260      2D2D6865 
 4260      6C702720 
 4260      666F7220 
 4261 07ef 00       		.align 8
 4262              	.LC116:
 4263 07f0 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 4263      6D707469 
 4263      6E672074 
 4263      6F206F70 
 4263      656E2063 
 4264              	.LC117:
 4265 0828 4C6F6164 		.string	"Loading firmware into %s...\n"
 4265      696E6720 
 4265      6669726D 
 4265      77617265 
 4265      20696E74 
 4266              	.LC118:
 4267 0845 41776169 		.string	"Awaiting renumeration"
 4267      74696E67 
 4267      2072656E 
 4267      756D6572 
 4267      6174696F 
 4268 085b 00000000 		.align 8
 4268      00
 4269              	.LC119:
 4270 0860 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 4270      4C696E6B 
 4270      20646576 
 4270      69636520 
 4270      64696420 
 4271 0893 00000000 		.align 8
 4271      00
 4272              	.LC120:
 4273 0898 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 4273      6D707469 
 4273      6E672074 
 4273      6F206F70 
 4273      656E2063 
 4274 08d5 000000   		.align 8
 4275              	.LC121:
 4276 08d8 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 4276      64206E6F 
 4276      74206F70 
 4276      656E2046 
 4276      5047414C 
 4277 0922 00000000 		.align 8
 4277      0000
 4278              	.LC122:
 4279 0928 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 4279      65637465 
 4279      6420746F 
 4279      20465047 
 4279      414C696E 
 4280              	.LC123:
 4281 0977 73746400 		.string	"std"
 4282 097b 00000000 		.align 8
 4282      00
 4283              	.LC124:
 4284 0980 57726974 		.string	"Writing the standard FPGALink firmware to the FX2's EEPROM..."
 4284      696E6720 
 4284      74686520 
 4284      7374616E 
 4284      64617264 
 4285 09be 0000     		.align 8
 4286              	.LC125:
 4287 09c0 57726974 		.string	"Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n"
 4287      696E6720 
 4287      63757374 
 4287      6F6D2046 
 4287      5047414C 
 4288 0a01 00000000 		.align 8
 4288      000000
 4289              	.LC126:
 4290 0a08 25733A20 		.string	"%s: invalid argument to option --backup=<kbitSize:fw.iic>\n"
 4290      696E7661 
 4290      6C696420 
 4290      61726775 
 4290      6D656E74 
 4291 0a43 00000000 		.align 8
 4291      00
 4292              	.LC127:
 4293 0a48 53617669 		.string	"Saving a backup of %d kbit from the FX2's EEPROM to %s...\n"
 4293      6E672061 
 4293      20626163 
 4293      6B757020 
 4293      6F662025 
 4294              	.LC128:
 4295 0a83 436F6E66 		.string	"Configuring ports..."
 4295      69677572 
 4295      696E6720 
 4295      706F7274 
 4295      732E2E2E 
 4296              	.LC129:
 4297 0a98 25303858 		.string	"%08X"
 4297      00
 4298 0a9d 000000   		.align 8
 4299              	.LC130:
 4300 0aa0 52656164 		.string	"Readback:   28   24   20   16    12    8    4    0\n          %s"
 4300      6261636B 
 4300      3A202020 
 4300      32382020 
 4300      20323420 
 4301              	.LC131:
 4302 0ae0 20257300 		.string	" %s"
 4303              	.LC132:
 4304 0ae4 20202573 		.string	"  %s"
 4304      00
 4305              	.LC133:
 4306 0ae9 2025730A 		.string	" %s\n"
 4306      00
 4307 0aee 0000     		.align 8
 4308              	.LC134:
 4309 0af0 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain, yielding:\n"
 4309      46504741 
 4309      4C696E6B 
 4309      20646576 
 4309      69636520 
 4310              	.LC135:
 4311 0b2d 20203078 		.string	"  0x%08X\n"
 4311      25303858 
 4311      0A00
 4312 0b37 00       		.align 8
 4313              	.LC136:
 4314 0b38 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\n"
 4314      46504741 
 4314      4C696E6B 
 4314      20646576 
 4314      69636520 
 4315              		.align 8
 4316              	.LC137:
 4317 0b90 4A544147 		.string	"JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n"
 4317      20636861 
 4317      696E2073 
 4317      63616E20 
 4317      72657175 
 4318              	.LC138:
 4319 0bdf 50726F67 		.string	"Programming device..."
 4319      72616D6D 
 4319      696E6720 
 4319      64657669 
 4319      63652E2E 
 4320 0bf5 000000   		.align 8
 4321              	.LC139:
 4322 0bf8 50726F67 		.string	"Program operation requested but device at %s does not support NeroProg\n"
 4322      72616D20 
 4322      6F706572 
 4322      6174696F 
 4322      6E207265 
 4323              		.align 8
 4324              	.LC140:
 4325 0c40 45786563 		.string	"Executing CommFPGA actions on FPGALink device %s...\n"
 4325      7574696E 
 4325      6720436F 
 4325      6D6D4650 
 4325      47412061 
 4326 0c75 000000   		.align 8
 4327              	.LC141:
 4328 0c78 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 4328      46504741 
 4328      4C696E6B 
 4328      20646576 
 4328      69636520 
 4329 0cc4 00000000 		.align 8
 4330              	.LC142:
 4331 0cc8 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 4331      6F6E2072 
 4331      65717565 
 4331      73746564 
 4331      20627574 
 4332 0d05 000000   		.align 8
 4333              	.LC143:
 4334 0d08 25733A20 		.string	"%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n"
 4334      696E7661 
 4334      6C696420 
 4334      61726775 
 4334      6D656E74 
 4335 0d44 00000000 		.align 8
 4336              	.LC144:
 4337 0d48 436F7079 		.string	"Copying from channel %lu to %s"
 4337      696E6720 
 4337      66726F6D 
 4337      20636861 
 4337      6E6E656C 
 4338              	.LC145:
 4339 0d67 0A436175 		.string	"\nCaught SIGINT, quitting..."
 4339      67687420 
 4339      53494749 
 4339      4E542C20 
 4339      71756974 
 4340 0d83 00000000 		.align 8
 4340      00
 4341              	.LC146:
 4342 0d88 0A456E74 		.string	"\nEntering CommFPGA command-line mode:"
 4342      6572696E 
 4342      6720436F 
 4342      6D6D4650 
 4342      47412063 
 4343              	.LC147:
 4344 0dae 3E2000   		.string	"> "
 4345 0db1 00000000 		.align 8
 4345      000000
 4346              	.LC148:
 4347 0db8 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n"
 4347      46504741 
 4347      4C696E6B 
 4347      20646576 
 4347      69636520 
 4348 0e01 00000000 		.align 8
 4348      000000
 4349              	.LC149:
 4350 0e08 5368656C 		.string	"Shell requested but device at %s does not support CommFPGA\n"
 4350      6C207265 
 4350      71756573 
 4350      74656420 
 4350      62757420 
 4351              	.LC150:
 4352 0e44 48656C6C 		.string	"Hello "
 4352      6F2000
 4353              	.LC151:
 4354 0e4b 48656C6C 		.string	"Helloghjkl "
 4354      6F67686A 
 4354      6B6C2000 
 4355              	.LC152:
 4356 0e57 4368616E 		.string	"Channel = "
 4356      6E656C20 
 4356      3D2000
 4357              	.LC153:
 4358 0e62 257300   		.string	"%s"
 4359              	.LC154:
 4360 0e65 25640A00 		.string	"%d\n"
 4361 0e69 00000000 		.align 8
 4361      000000
 4362              	.LC155:
 4363 0e70 2D2D2D2D 		.string	"----------------------H2.1 started----------------------- "
 4363      2D2D2D2D 
 4363      2D2D2D2D 
 4363      2D2D2D2D 
 4363      2D2D2D2D 
 4364 0eab 00000000 		.align 8
 4364      00
 4365              	.LC156:
 4366 0eb0 57616974 		.string	"Waiting for encrypted co_ordinates"
 4366      696E6720 
 4366      666F7220 
 4366      656E6372 
 4366      79707465 
 4367 0ed3 00000000 		.align 8
 4367      00
 4368              	.LC157:
 4369 0ed8 2D2D2D2D 		.string	"-------------------------RESET------------------------"
 4369      2D2D2D2D 
 4369      2D2D2D2D 
 4369      2D2D2D2D 
 4369      2D2D2D2D 
 4370 0f0f 00       		.align 8
 4371              	.LC158:
 4372 0f10 476F7420 		.string	"Got the encrypted co_ordinates, they are as in uint8 form --"
 4372      74686520 
 4372      656E6372 
 4372      79707465 
 4372      6420636F 
 4373 0f4d 000000   		.align 8
 4374              	.LC159:
 4375 0f50 656E6372 		.string	"encrypted_pos is converted to binary"
 4375      79707465 
 4375      645F706F 
 4375      73206973 
 4375      20636F6E 
 4376              	.LC160:
 4377 0f75 54686520 		.string	"The encrypted_pos are as --"
 4377      656E6372 
 4377      79707465 
 4377      645F706F 
 4377      73206172 
 4378 0f91 00000000 		.align 8
 4378      000000
 4379              	.LC161:
 4380 0f98 54686520 		.string	"The decrypted pos in binary form are as --"
 4380      64656372 
 4380      79707465 
 4380      6420706F 
 4380      7320696E 
 4381 0fc3 00000000 		.align 8
 4381      00
 4382              	.LC162:
 4383 0fc8 2D2D2D2D 		.string	"----------------------H2.1 ended----------------------- "
 4383      2D2D2D2D 
 4383      2D2D2D2D 
 4383      2D2D2D2D 
 4383      2D2D2D2D 
 4384 1001 00000000 		.align 8
 4384      000000
 4385              	.LC163:
 4386 1008 2D2D2D2D 		.string	"----------------------H2.2 started----------------------- "
 4386      2D2D2D2D 
 4386      2D2D2D2D 
 4386      2D2D2D2D 
 4386      2D2D2D2D 
 4387 1043 00000000 		.align 8
 4387      00
 4388              	.LC164:
 4389 1048 54686520 		.string	"The co_ordinates are re-encrypted in binary form"
 4389      636F5F6F 
 4389      7264696E 
 4389      61746573 
 4389      20617265 
 4390 1079 00000000 		.align 8
 4390      000000
 4391              	.LC165:
 4392 1080 54686520 		.string	"The re-encrypted co_ords are as follows"
 4392      72652D65 
 4392      6E637279 
 4392      70746564 
 4392      20636F5F 
 4393              		.align 8
 4394              	.LC166:
 4395 10a8 436F6E76 		.string	"Converting the re-encrypted data in binary to uint8 form"
 4395      65727469 
 4395      6E672074 
 4395      68652072 
 4395      652D656E 
 4396 10e1 00000000 		.align 8
 4396      000000
 4397              	.LC167:
 4398 10e8 50726570 		.string	"Preparing to send the encrypted co_ordinates "
 4398      6172696E 
 4398      6720746F 
 4398      2073656E 
 4398      64207468 
 4399 1116 0000     		.align 8
 4400              	.LC168:
 4401 1118 53756363 		.string	"Successfully send the encrypted co_ordinates in uint8 form"
 4401      65737366 
 4401      756C6C79 
 4401      2073656E 
 4401      64207468 
 4402 1153 00000000 		.align 8
 4402      00
 4403              	.LC169:
 4404 1158 2D2D2D2D 		.string	"----------------------H2.2 ended----------------------- "
 4404      2D2D2D2D 
 4404      2D2D2D2D 
 4404      2D2D2D2D 
 4404      2D2D2D2D 
 4405 1191 00000000 		.align 8
 4405      000000
 4406              	.LC170:
 4407 1198 2D2D2D2D 		.string	"----------------------H2.3 started----------------------- "
 4407      2D2D2D2D 
 4407      2D2D2D2D 
 4407      2D2D2D2D 
 4407      2D2D2D2D 
 4408 11d3 00000000 		.align 8
 4408      00
 4409              	.LC171:
 4410 11d8 57616974 		.string	"Waiting to get Ack1 from the fpga controller"
 4410      696E6720 
 4410      746F2067 
 4410      65742041 
 4410      636B3120 
 4411 1205 000000   		.align 8
 4412              	.LC172:
 4413 1208 46697273 		.string	"First ack1 received successfully"
 4413      74206163 
 4413      6B312072 
 4413      65636569 
 4413      76656420 
 4414 1229 00000000 		.align 8
 4414      000000
 4415              	.LC173:
 4416 1230 54686520 		.string	"The first ack1 is ----- in uint8 form"
 4416      66697273 
 4416      74206163 
 4416      6B312069 
 4416      73202D2D 
 4417 1256 0000     		.align 8
 4418              	.LC174:
 4419 1258 2D2D2D2D 		.string	"----------------------H2.3 ended----------------------- "
 4419      2D2D2D2D 
 4419      2D2D2D2D 
 4419      2D2D2D2D 
 4419      2D2D2D2D 
 4420 1291 00000000 		.align 8
 4420      000000
 4421              	.LC175:
 4422 1298 2D2D2D2D 		.string	"----------------------H2.4 started----------------------- "
 4422      2D2D2D2D 
 4422      2D2D2D2D 
 4422      2D2D2D2D 
 4422      2D2D2D2D 
 4423 12d3 00000000 		.align 8
 4423      00
 4424              	.LC176:
 4425 12d8 436F6E76 		.string	"Converting encrypted ack1 from uint8 to binary"
 4425      65727469 
 4425      6E672065 
 4425      6E637279 
 4425      70746564 
 4426 1307 00       		.align 8
 4427              	.LC177:
 4428 1308 54686520 		.string	"The encrypted ack1 is as follows in binary form --"
 4428      656E6372 
 4428      79707465 
 4428      64206163 
 4428      6B312069 
 4429 133b 00000000 		.align 8
 4429      00
 4430              	.LC178:
 4431 1340 54686520 		.string	"The decrypted ack1 in binary is as follows --"
 4431      64656372 
 4431      79707465 
 4431      64206163 
 4431      6B312069 
 4432 136e 0000     		.align 8
 4433              	.LC179:
 4434 1370 43686563 		.string	"Checking if this ack1 is equal to the original ack1 "
 4434      6B696E67 
 4434      20696620 
 4434      74686973 
 4434      2061636B 
 4435 13a5 000000   		.align 8
 4436              	.LC180:
 4437 13a8 41636B31 		.string	"Ack1 received doesn't match with the original one"
 4437      20726563 
 4437      65697665 
 4437      6420646F 
 4437      65736E27 
 4438              	.LC181:
 4439 13da 52656164 		.string	"Reading the channel 2i again "
 4439      696E6720 
 4439      74686520 
 4439      6368616E 
 4439      6E656C20 
 4440              		.align 8
 4441              	.LC182:
 4442 13f8 47657420 		.string	"Get the encrypted ack1 again successfully ---"
 4442      74686520 
 4442      656E6372 
 4442      79707465 
 4442      64206163 
 4443 1426 0000     		.align 8
 4444              	.LC183:
 4445 1428 436F6E76 		.string	"Converted encrypted ack1 to binary and it is as ----"
 4445      65727465 
 4445      6420656E 
 4445      63727970 
 4445      74656420 
 4446 145d 000000   		.align 8
 4447              	.LC184:
 4448 1460 44656372 		.string	"Decrypting the encrypted ack1 "
 4448      79707469 
 4448      6E672074 
 4448      68652065 
 4448      6E637279 
 4449 147f 00       		.align 8
 4450              	.LC185:
 4451 1480 41636B31 		.string	"Ack1 got decrpyted and is as ----"
 4451      20676F74 
 4451      20646563 
 4451      72707974 
 4451      65642061 
 4452 14a2 00000000 		.align 8
 4452      0000
 4453              	.LC186:
 4454 14a8 2D2D2D2D 		.string	"----------------------H2.4 ended----------------------- "
 4454      2D2D2D2D 
 4454      2D2D2D2D 
 4454      2D2D2D2D 
 4454      2D2D2D2D 
 4455 14e1 00000000 		.align 8
 4455      000000
 4456              	.LC187:
 4457 14e8 2D2D2D2D 		.string	"-------------------------H2.5 started-------------------------"
 4457      2D2D2D2D 
 4457      2D2D2D2D 
 4457      2D2D2D2D 
 4457      2D2D2D2D 
 4458 1527 00       		.align 8
 4459              	.LC188:
 4460 1528 4661696C 		.string	"Fails to receive encrypted ack1 "
 4460      7320746F 
 4460      20726563 
 4460      65697665 
 4460      20656E63 
 4461 1549 00000000 		.align 8
 4461      000000
 4462              	.LC189:
 4463 1550 2D2D2D2D 		.string	"-------------------------H2.5 ended-------------------------"
 4463      2D2D2D2D 
 4463      2D2D2D2D 
 4463      2D2D2D2D 
 4463      2D2D2D2D 
 4464 158d 000000   		.align 8
 4465              	.LC190:
 4466 1590 2D2D2D2D 		.string	"-------------------------H3 starts--------------------------"
 4466      2D2D2D2D 
 4466      2D2D2D2D 
 4466      2D2D2D2D 
 4466      2D2D2D2D 
 4467              	.LC191:
 4468 15cd 656E6372 		.string	"encrypting ack2 "
 4468      79707469 
 4468      6E672061 
 4468      636B3220 
 4468      00
 4469 15de 0000     		.align 8
 4470              	.LC192:
 4471 15e0 41636B32 		.string	"Ack2 got encrypted and it is as -----"
 4471      20676F74 
 4471      20656E63 
 4471      72797074 
 4471      65642061 
 4472 1606 0000     		.align 8
 4473              	.LC193:
 4474 1608 436F6E76 		.string	"Converting encrypted ack2 from binary to uint8"
 4474      65727469 
 4474      6E672065 
 4474      6E637279 
 4474      70746564 
 4475 1637 00       		.align 8
 4476              	.LC194:
 4477 1638 436F6E76 		.string	"Converted encrypted ack2 to uint8 and it is as -----"
 4477      65727465 
 4477      6420656E 
 4477      63727970 
 4477      74656420 
 4478 166d 000000   		.align 8
 4479              	.LC195:
 4480 1670 53656E64 		.string	"Sending encrypted ack2 to fpga "
 4480      696E6720 
 4480      656E6372 
 4480      79707465 
 4480      64206163 
 4481              		.align 8
 4482              	.LC196:
 4483 1690 456E6372 		.string	"Encrypted ack2 send successfully"
 4483      79707465 
 4483      64206163 
 4483      6B322073 
 4483      656E6420 
 4484 16b1 00000000 		.align 8
 4484      000000
 4485              	.LC197:
 4486 16b8 2D2D2D2D 		.string	"-------------------------H3 ended----------------------------"
 4486      2D2D2D2D 
 4486      2D2D2D2D 
 4486      2D2D2D2D 
 4486      2D2D2D2D 
 4487 16f6 0000     		.align 8
 4488              	.LC198:
 4489 16f8 2D2D2D2D 		.string	"-------------------------H4 started--------------------------"
 4489      2D2D2D2D 
 4489      2D2D2D2D 
 4489      2D2D2D2D 
 4489      2D2D2D2D 
 4490 1736 0000     		.align 8
 4491              	.LC199:
 4492 1738 43616C63 		.string	"Calculating x and y co_ordinates ------------------"
 4492      756C6174 
 4492      696E6720 
 4492      7820616E 
 4492      64207920 
 4493 176c 00000000 		.align 8
 4494              	.LC200:
 4495 1770 7820616E 		.string	"x and y co_ordinates calculated, they are as --"
 4495      64207920 
 4495      636F5F6F 
 4495      7264696E 
 4495      61746573 
 4496              	.LC201:
 4497 17a0 25642025 		.string	"%d %d "
 4497      642000
 4498 17a7 00       		.align 8
 4499              	.LC202:
 4500 17a8 476F7420 		.string	"Got the information for x and y co_ordinates, 64 bits filled"
 4500      74686520 
 4500      696E666F 
 4500      726D6174 
 4500      696F6E20 
 4501 17e5 000000   		.align 8
 4502              	.LC203:
 4503 17e8 54686520 		.string	"The final 64 bit array in decrypted form --"
 4503      66696E61 
 4503      6C203634 
 4503      20626974 
 4503      20617272 
 4504 1814 00000000 		.align 8
 4505              	.LC204:
 4506 1818 2D2D2D2D 		.string	"-------------------------H4 ended--------------------------"
 4506      2D2D2D2D 
 4506      2D2D2D2D 
 4506      2D2D2D2D 
 4506      2D2D2D2D 
 4507 1854 00000000 		.align 8
 4508              	.LC205:
 4509 1858 2D2D2D2D 		.string	"-------------------------H5 starts--------------------------"
 4509      2D2D2D2D 
 4509      2D2D2D2D 
 4509      2D2D2D2D 
 4509      2D2D2D2D 
 4510 1895 000000   		.align 8
 4511              	.LC206:
 4512 1898 456E6372 		.string	"Encrypting first 32 bits of final array"
 4512      79707469 
 4512      6E672066 
 4512      69727374 
 4512      20333220 
 4513              		.align 8
 4514              	.LC207:
 4515 18c0 46697273 		.string	"First 32 bits got encrypted , they are as ----"
 4515      74203332 
 4515      20626974 
 4515      7320676F 
 4515      7420656E 
 4516 18ef 00       		.align 8
 4517              	.LC208:
 4518 18f0 436F6E76 		.string	"Converting first 32 bits to uint8"
 4518      65727469 
 4518      6E672066 
 4518      69727374 
 4518      20333220 
 4519 1912 00000000 		.align 8
 4519      0000
 4520              	.LC209:
 4521 1918 46697273 		.string	"First 32 bits got converted to uint8, they are as"
 4521      74203332 
 4521      20626974 
 4521      7320676F 
 4521      7420636F 
 4522 194a 00000000 		.align 8
 4522      0000
 4523              	.LC210:
 4524 1950 57726974 		.string	"Writing on channel first 32 bits encrypted"
 4524      696E6720 
 4524      6F6E2063 
 4524      68616E6E 
 4524      656C2066 
 4525 197b 00000000 		.align 8
 4525      00
 4526              	.LC211:
 4527 1980 2D2D2D2D 		.string	"-----------------------------H5 ends------------------"
 4527      2D2D2D2D 
 4527      2D2D2D2D 
 4527      2D2D2D2D 
 4527      2D2D2D2D 
 4528 19b7 00       		.align 8
 4529              	.LC212:
 4530 19b8 2D2D2D2D 		.string	"-----------------------------H6 starts------------------"
 4530      2D2D2D2D 
 4530      2D2D2D2D 
 4530      2D2D2D2D 
 4530      2D2D2D2D 
 4531              	.LC213:
 4532 19f1 57616974 		.string	"Waiting for encrypted ack1 "
 4532      696E6720 
 4532      666F7220 
 4532      656E6372 
 4532      79707465 
 4533 1a0d 000000   		.align 8
 4534              	.LC214:
 4535 1a10 2D2D2D2D 		.string	"-----------------------------H7 starts------------------"
 4535      2D2D2D2D 
 4535      2D2D2D2D 
 4535      2D2D2D2D 
 4535      2D2D2D2D 
 4536 1a49 00000000 		.align 8
 4536      000000
 4537              	.LC216:
 4538 1a50 476F696E 		.string	"Going to H2, time exceeded 256 seconds"
 4538      6720746F 
 4538      2048322C 
 4538      2074696D 
 4538      65206578 
 4539 1a77 00       		.align 8
 4540              	.LC217:
 4541 1a78 41636B31 		.string	"Ack1 received successfully, not checked yet, it is as----"
 4541      20726563 
 4541      65697665 
 4541      64207375 
 4541      63636573 
 4542 1ab2 00000000 		.align 8
 4542      0000
 4543              	.LC218:
 4544 1ab8 436F6E76 		.string	"Converted encrypted ack1 from uint8 to binary , it is as --"
 4544      65727465 
 4544      6420656E 
 4544      63727970 
 4544      74656420 
 4545              	.LC219:
 4546 1af4 44656372 		.string	"Decrypting the encrypted ack1"
 4546      79707469 
 4546      6E672074 
 4546      68652065 
 4546      6E637279 
 4547 1b12 00000000 		.align 8
 4547      0000
 4548              	.LC220:
 4549 1b18 456E6372 		.string	"Encrypted ack1 decrypted successfully, it is as----"
 4549      79707465 
 4549      64206163 
 4549      6B312064 
 4549      65637279 
 4550              	.LC221:
 4551 1b4c 41636B31 		.string	"Ack1 doesn't match"
 4551      20646F65 
 4551      736E2774 
 4551      206D6174 
 4551      636800
 4552              	.LC222:
 4553 1b5f 41636B31 		.string	"Ack1 match successfully"
 4553      206D6174 
 4553      63682073 
 4553      75636365 
 4553      73736675 
 4554 1b77 00       		.align 8
 4555              	.LC223:
 4556 1b78 656E6372 		.string	"encrypting last 32 bits to send to fpga "
 4556      79707469 
 4556      6E67206C 
 4556      61737420 
 4556      33322062 
 4557 1ba1 00000000 		.align 8
 4557      000000
 4558              	.LC224:
 4559 1ba8 4C617374 		.string	"Last 32 bits got encrypted , they are as in binary form"
 4559      20333220 
 4559      62697473 
 4559      20676F74 
 4559      20656E63 
 4560              		.align 8
 4561              	.LC225:
 4562 1be0 436F6E76 		.string	"Converting last 32 bits to uint8"
 4562      65727469 
 4562      6E67206C 
 4562      61737420 
 4562      33322062 
 4563 1c01 00000000 		.align 8
 4563      000000
 4564              	.LC226:
 4565 1c08 4C617374 		.string	"Last 32 bits got converted to uint8, they are as"
 4565      20333220 
 4565      62697473 
 4565      20676F74 
 4565      20636F6E 
 4566 1c39 00000000 		.align 8
 4566      000000
 4567              	.LC227:
 4568 1c40 57726974 		.string	"Writing on channel last 32 bits encrypted"
 4568      696E6720 
 4568      6F6E2063 
 4568      68616E6E 
 4568      656C206C 
 4569 1c6a 00000000 		.align 8
 4569      0000
 4570              	.LC228:
 4571 1c70 53756363 		.string	"Successfully written last 32 bits"
 4571      65737366 
 4571      756C6C79 
 4571      20777269 
 4571      7474656E 
 4572 1c92 00000000 		.align 8
 4572      0000
 4573              	.LC229:
 4574 1c98 2D2D2D2D 		.string	"---------------------------------H7 ends---------------------"
 4574      2D2D2D2D 
 4574      2D2D2D2D 
 4574      2D2D2D2D 
 4574      2D2D2D2D 
 4575              	.LC230:
 4576 1cd6 456E6372 		.string	"Encrypting ack2 "
 4576      79707469 
 4576      6E672061 
 4576      636B3220 
 4576      00
 4577 1ce7 00       		.align 8
 4578              	.LC231:
 4579 1ce8 456E6372 		.string	"Encrypted ack2 is as follows  ----"
 4579      79707465 
 4579      64206163 
 4579      6B322069 
 4579      73206173 
 4580 1d0b 00000000 		.align 8
 4580      00
 4581              	.LC232:
 4582 1d10 436F6E76 		.string	"Converted encrypted ack2 to uint8, it is as follows"
 4582      65727465 
 4582      6420656E 
 4582      63727970 
 4582      74656420 
 4583 1d44 00000000 		.align 8
 4584              	.LC233:
 4585 1d48 57726974 		.string	"Writing encrypted ack2 to channel"
 4585      696E6720 
 4585      656E6372 
 4585      79707465 
 4585      64206163 
 4586 1d6a 00000000 		.align 8
 4586      0000
 4587              	.LC234:
 4588 1d70 57726974 		.string	"Written successfully encrypted ack2, the written data is --"
 4588      74656E20 
 4588      73756363 
 4588      65737366 
 4588      756C6C79 
 4589 1dac 00000000 		.align 8
 4590              	.LC235:
 4591 1db0 52656365 		.string	"Receiving data to update CSV file"
 4591      6976696E 
 4591      67206461 
 4591      74612074 
 4591      6F207570 
 4592              	.LC236:
 4593 1dd2 46504741 		.string	"FPGA Count "
 4593      20436F75 
 4593      6E742000 
 4594 1dde 0000     		.align 8
 4595              	.LC237:
 4596 1de0 52656365 		.string	"Receiving Controlling signal form FPGA "
 4596      6976696E 
 4596      6720436F 
 4596      6E74726F 
 4596      6C6C696E 
 4597              		.align 8
 4598              	.LC238:
 4599 1e08 436F6E74 		.string	"Controlling signal received from FPGA, it is-----"
 4599      726F6C6C 
 4599      696E6720 
 4599      7369676E 
 4599      616C2072 
 4600 1e3a 00000000 		.align 8
 4600      0000
 4601              	.LC239:
 4602 1e40 43686563 		.string	"Checking the controlling singal, whether it is to update CSV data or not"
 4602      6B696E67 
 4602      20746865 
 4602      20636F6E 
 4602      74726F6C 
 4603 1e89 00000000 		.align 8
 4603      000000
 4604              	.LC240:
 4605 1e90 436F6E74 		.string	"Controlling signal is to update the CSV data"
 4605      726F6C6C 
 4605      696E6720 
 4605      7369676E 
 4605      616C2069 
 4606 1ebd 000000   		.align 8
 4607              	.LC241:
 4608 1ec0 52656365 		.string	"Receiving encrypted data from the FPGA to update CSV"
 4608      6976696E 
 4608      6720656E 
 4608      63727970 
 4608      74656420 
 4609 1ef5 000000   		.align 8
 4610              	.LC242:
 4611 1ef8 456E6372 		.string	"Encrypted Data received successfully from the FPGA, it is as in uint8 format-----"
 4611      79707465 
 4611      64204461 
 4611      74612072 
 4611      65636569 
 4612 1f4a 00000000 		.align 8
 4612      0000
 4613              	.LC243:
 4614 1f50 436F6E76 		.string	"Converting uint8 data to binary"
 4614      65727469 
 4614      6E672075 
 4614      696E7438 
 4614      20646174 
 4615              		.align 8
 4616              	.LC244:
 4617 1f70 436F6E76 		.string	"Converted uint8 data to binary, it is as-----"
 4617      65727465 
 4617      64207569 
 4617      6E743820 
 4617      64617461 
 4618              	.LC245:
 4619 1f9e 44656372 		.string	"Decrypting the data"
 4619      79707469 
 4619      6E672074 
 4619      68652064 
 4619      61746100 
 4620 1fb2 00000000 		.align 8
 4620      0000
 4621              	.LC246:
 4622 1fb8 44617461 		.string	"Data decrypted successfully, it is as----"
 4622      20646563 
 4622      72797074 
 4622      65642073 
 4622      75636365 
 4623              	.LC247:
 4624 1fe2 47657474 		.string	"Getting ready to update CSV"
 4624      696E6720 
 4624      72656164 
 4624      7920746F 
 4624      20757064 
 4625 1ffe 0000     		.align 8
 4626              	.LC248:
 4627 2000 2D2D2D2D 		.string	"-------------------------UART PART----------------------------"
 4627      2D2D2D2D 
 4627      2D2D2D2D 
 4627      2D2D2D2D 
 4627      2D2D2D2D 
 4628              	.LC249:
 4629 203f 20554152 		.string	" UART Count "
 4629      5420436F 
 4629      756E7420 
 4629      00
 4630              	.LC250:
 4631 204c 57616974 		.string	"Waiting for UART signal "
 4631      696E6720 
 4631      666F7220 
 4631      55415254 
 4631      20736967 
 4632 2065 000000   		.align 8
 4633              	.LC251:
 4634 2068 436F6E74 		.string	"Controlling signal received from UART, it is-----"
 4634      726F6C6C 
 4634      696E6720 
 4634      7369676E 
 4634      616C2072 
 4635 209a 00000000 		.align 8
 4635      0000
 4636              	.LC252:
 4637 20a0 54686520 		.string	"The information received from FPGA"
 4637      696E666F 
 4637      726D6174 
 4637      696F6E20 
 4637      72656365 
 4638              	.LC253:
 4639 20c3 54686520 		.string	"The x_cord ----->"
 4639      785F636F 
 4639      7264202D 
 4639      2D2D2D2D 
 4639      3E00
 4640              	.LC254:
 4641 20d5 54686520 		.string	"The y_cord ----->"
 4641      795F636F 
 4641      7264202D 
 4641      2D2D2D2D 
 4641      3E00
 4642              	.LC255:
 4643 20e7 54726163 		.string	"Track exists   ---->   "
 4643      6B206578 
 4643      69737473 
 4643      2020202D 
 4643      2D2D2D3E 
 4644              	.LC256:
 4645 20ff 25732000 		.string	"%s "
 4646              	.LC257:
 4647 2103 54726163 		.string	"Track ok   ----->   "
 4647      6B206F6B 
 4647      2020202D 
 4647      2D2D2D2D 
 4647      3E202020 
 4648              	.LC258:
 4649 2118 44697265 		.string	"Direction   ----->   "
 4649      6374696F 
 4649      6E202020 
 4649      2D2D2D2D 
 4649      2D3E2020 
 4650              	.LC259:
 4651 212e 4E657874 		.string	"Next signal   ------>    "
 4651      20736967 
 4651      6E616C20 
 4651      20202D2D 
 4651      2D2D2D2D 
 4652              		.align 8
 4653              	.LC260:
 4654 2148 4F766572 		.string	"Overwriting the CSV file with the updated information"
 4654      77726974 
 4654      696E6720 
 4654      74686520 
 4654      43535620 
 4655 217e 0000     		.align 8
 4656              	.LC261:
 4657 2180 43535620 		.string	"CSV file overwritten successfully"
 4657      66696C65 
 4657      206F7665 
 4657      72777269 
 4657      7474656E 
 4658              	.LC262:
 4659 21a2 25730A00 		.string	"%s\n"
 4660              		.text
 4661              		.globl	main
 4663              	main:
 4664              	.LFB23:
 964:final_with_print.c **** 
 965:final_with_print.c **** // void decToBinary(int n, int arr[], int count)
 966:final_with_print.c **** // {
 967:final_with_print.c **** //     int binaryNum[count];
 968:final_with_print.c **** //     for (int i = 0; i < count; ++i)
 969:final_with_print.c **** //       binaryNum[i] = 0;
 970:final_with_print.c **** 
 971:final_with_print.c **** //     int i = 0;
 972:final_with_print.c **** //     while (n > 0) {
 973:final_with_print.c **** //         binaryNum[i] = n % 2;
 974:final_with_print.c **** //         n = n / 2;
 975:final_with_print.c **** //         i++;
 976:final_with_print.c **** //     }
 977:final_with_print.c **** 
 978:final_with_print.c **** //      for (int i=0; i<count; i++)
 979:final_with_print.c **** //         arr[i] = binaryNum[i];
 980:final_with_print.c **** // }
 981:final_with_print.c **** 
 982:final_with_print.c **** //////////////////////////////////////////////////////////////////////////////////
 983:final_with_print.c **** 
 984:final_with_print.c **** 
 985:final_with_print.c **** int main(int argc, char *argv[]) {
 4665              		.loc 1 985 0
 4666              		.cfi_startproc
 4667 30b8 55       		pushq	%rbp
 4668              		.cfi_def_cfa_offset 16
 4669              		.cfi_offset 6, -16
 4670 30b9 4889E5   		movq	%rsp, %rbp
 4671              		.cfi_def_cfa_register 6
 4672 30bc 53       		pushq	%rbx
 4673 30bd 4881EC68 		subq	$3432, %rsp
 4673      0D0000
 4674              		.cfi_offset 3, -24
 4675 30c4 89BD9CF2 		movl	%edi, -3428(%rbp)
 4675      FFFF
 4676 30ca 4889B590 		movq	%rsi, -3440(%rbp)
 4676      F2FFFF
 4677              		.loc 1 985 0
 4678 30d1 64488B04 		movq	%fs:40, %rax
 4678      25280000 
 4678      00
 4679 30da 488945E8 		movq	%rax, -24(%rbp)
 4680 30de 31C0     		xorl	%eax, %eax
 986:final_with_print.c **** 	ReturnCode retVal = FLP_SUCCESS, pStatus;
 4681              		.loc 1 986 0
 4682 30e0 C785B8F2 		movl	$0, -3400(%rbp)
 4682      FFFF0000 
 4682      0000
 987:final_with_print.c **** 	struct arg_str *ivpOpt = arg_str0("i", "ivp", "<VID:PID>", "            vendor ID and product ID (
 4683              		.loc 1 987 0
 4684 30ea B9000000 		movl	$.LC53, %ecx
 4684      00
 4685 30ef BA000000 		movl	$.LC54, %edx
 4685      00
 4686 30f4 BE000000 		movl	$.LC55, %esi
 4686      00
 4687 30f9 BF000000 		movl	$.LC56, %edi
 4687      00
 4688 30fe E8000000 		call	arg_str0
 4688      00
 4689 3103 48898520 		movq	%rax, -3040(%rbp)
 4689      F4FFFF
 988:final_with_print.c **** 	struct arg_str *vpOpt = arg_str1("v", "vp", "<VID:PID[:DID]>", "       VID, PID and opt. dev ID (e
 4690              		.loc 1 988 0
 4691 310a B9000000 		movl	$.LC57, %ecx
 4691      00
 4692 310f BA000000 		movl	$.LC58, %edx
 4692      00
 4693 3114 BE000000 		movl	$.LC59, %esi
 4693      00
 4694 3119 BF000000 		movl	$.LC60, %edi
 4694      00
 4695 311e E8000000 		call	arg_str1
 4695      00
 4696 3123 48898528 		movq	%rax, -3032(%rbp)
 4696      F4FFFF
 989:final_with_print.c **** 	struct arg_str *fwOpt = arg_str0("f", "fw", "<firmware.hex>", "        firmware to RAM-load (or us
 4697              		.loc 1 989 0
 4698 312a B9000000 		movl	$.LC61, %ecx
 4698      00
 4699 312f BA000000 		movl	$.LC62, %edx
 4699      00
 4700 3134 BE000000 		movl	$.LC63, %esi
 4700      00
 4701 3139 BF000000 		movl	$.LC64, %edi
 4701      00
 4702 313e E8000000 		call	arg_str0
 4702      00
 4703 3143 48898530 		movq	%rax, -3024(%rbp)
 4703      F4FFFF
 990:final_with_print.c **** 	struct arg_str *portOpt = arg_str0("d", "ports", "<bitCfg[,bitCfg]*>", " read/write digital ports 
 4704              		.loc 1 990 0
 4705 314a B9000000 		movl	$.LC65, %ecx
 4705      00
 4706 314f BA000000 		movl	$.LC66, %edx
 4706      00
 4707 3154 BE000000 		movl	$.LC67, %esi
 4707      00
 4708 3159 BF000000 		movl	$.LC68, %edi
 4708      00
 4709 315e E8000000 		call	arg_str0
 4709      00
 4710 3163 48898538 		movq	%rax, -3016(%rbp)
 4710      F4FFFF
 991:final_with_print.c **** 	struct arg_str *queryOpt = arg_str0("q", "query", "<jtagBits>", "         query the JTAG chain");
 4711              		.loc 1 991 0
 4712 316a B9000000 		movl	$.LC69, %ecx
 4712      00
 4713 316f BA000000 		movl	$.LC70, %edx
 4713      00
 4714 3174 BE000000 		movl	$.LC71, %esi
 4714      00
 4715 3179 BF000000 		movl	$.LC72, %edi
 4715      00
 4716 317e E8000000 		call	arg_str0
 4716      00
 4717 3183 48898540 		movq	%rax, -3008(%rbp)
 4717      F4FFFF
 992:final_with_print.c **** 	struct arg_str *progOpt = arg_str0("p", "program", "<config>", "         program a device");
 4718              		.loc 1 992 0
 4719 318a B9000000 		movl	$.LC73, %ecx
 4719      00
 4720 318f BA000000 		movl	$.LC74, %edx
 4720      00
 4721 3194 BE000000 		movl	$.LC75, %esi
 4721      00
 4722 3199 BF000000 		movl	$.LC76, %edi
 4722      00
 4723 319e E8000000 		call	arg_str0
 4723      00
 4724 31a3 48898548 		movq	%rax, -3000(%rbp)
 4724      F4FFFF
 993:final_with_print.c **** 	struct arg_uint *conOpt = arg_uint0("c", "conduit", "<conduit>", "        which comm conduit to ch
 4725              		.loc 1 993 0
 4726 31aa B9000000 		movl	$.LC77, %ecx
 4726      00
 4727 31af BA000000 		movl	$.LC78, %edx
 4727      00
 4728 31b4 BE000000 		movl	$.LC79, %esi
 4728      00
 4729 31b9 BF000000 		movl	$.LC80, %edi
 4729      00
 4730 31be E8000000 		call	arg_uint0
 4730      00
 4731 31c3 48898550 		movq	%rax, -2992(%rbp)
 4731      F4FFFF
 994:final_with_print.c **** 	struct arg_str *actOpt = arg_str0("a", "action", "<actionString>", "    a series of CommFPGA actio
 4732              		.loc 1 994 0
 4733 31ca B9000000 		movl	$.LC81, %ecx
 4733      00
 4734 31cf BA000000 		movl	$.LC82, %edx
 4734      00
 4735 31d4 BE000000 		movl	$.LC83, %esi
 4735      00
 4736 31d9 BF000000 		movl	$.LC84, %edi
 4736      00
 4737 31de E8000000 		call	arg_str0
 4737      00
 4738 31e3 48898558 		movq	%rax, -2984(%rbp)
 4738      F4FFFF
 995:final_with_print.c **** 	struct arg_lit *doworkOpt = arg_lit0("z", "some stuff" ,"                 some other stuff");
 4739              		.loc 1 995 0
 4740 31ea BA000000 		movl	$.LC85, %edx
 4740      00
 4741 31ef BE000000 		movl	$.LC86, %esi
 4741      00
 4742 31f4 BF000000 		movl	$.LC87, %edi
 4742      00
 4743 31f9 E8000000 		call	arg_lit0
 4743      00
 4744 31fe 48898560 		movq	%rax, -2976(%rbp)
 4744      F4FFFF
 996:final_with_print.c **** 	struct arg_lit *shellOpt  = arg_lit0("s", "shell", "                    start up an interactive Co
 4745              		.loc 1 996 0
 4746 3205 BA000000 		movl	$.LC88, %edx
 4746      00
 4747 320a BE000000 		movl	$.LC89, %esi
 4747      00
 4748 320f BF000000 		movl	$.LC90, %edi
 4748      00
 4749 3214 E8000000 		call	arg_lit0
 4749      00
 4750 3219 48898568 		movq	%rax, -2968(%rbp)
 4750      F4FFFF
 997:final_with_print.c **** 	struct arg_lit *benOpt  = arg_lit0("b", "benchmark", "                enable benchmarking & chefck
 4751              		.loc 1 997 0
 4752 3220 BA000000 		movl	$.LC91, %edx
 4752      00
 4753 3225 BE000000 		movl	$.LC92, %esi
 4753      00
 4754 322a BF000000 		movl	$.LC93, %edi
 4754      00
 4755 322f E8000000 		call	arg_lit0
 4755      00
 4756 3234 48898570 		movq	%rax, -2960(%rbp)
 4756      F4FFFF
 998:final_with_print.c **** 	struct arg_lit *rstOpt  = arg_lit0("r", "reset", "                    reset the bulk endpoints");
 4757              		.loc 1 998 0
 4758 323b BA000000 		movl	$.LC94, %edx
 4758      00
 4759 3240 BE000000 		movl	$.LC95, %esi
 4759      00
 4760 3245 BF000000 		movl	$.LC6, %edi
 4760      00
 4761 324a E8000000 		call	arg_lit0
 4761      00
 4762 324f 48898578 		movq	%rax, -2952(%rbp)
 4762      F4FFFF
 999:final_with_print.c **** 	struct arg_str *dumpOpt = arg_str0("l", "dumploop", "<ch:file.bin>", "   write data from channel c
 4763              		.loc 1 999 0
 4764 3256 B9000000 		movl	$.LC96, %ecx
 4764      00
 4765 325b BA000000 		movl	$.LC97, %edx
 4765      00
 4766 3260 BE000000 		movl	$.LC98, %esi
 4766      00
 4767 3265 BF000000 		movl	$.LC99, %edi
 4767      00
 4768 326a E8000000 		call	arg_str0
 4768      00
 4769 326f 48898580 		movq	%rax, -2944(%rbp)
 4769      F4FFFF
1000:final_with_print.c **** 	struct arg_lit *helpOpt  = arg_lit0("h", "help", "                     print this help and exit");
 4770              		.loc 1 1000 0
 4771 3276 BA000000 		movl	$.LC100, %edx
 4771      00
 4772 327b BE000000 		movl	$.LC101, %esi
 4772      00
 4773 3280 BF000000 		movl	$.LC102, %edi
 4773      00
 4774 3285 E8000000 		call	arg_lit0
 4774      00
 4775 328a 48898588 		movq	%rax, -2936(%rbp)
 4775      F4FFFF
1001:final_with_print.c **** 	struct arg_str *eepromOpt  = arg_str0(NULL, "eeprom", "<std|fw.hex|fw.iic>", "   write firmware to
 4776              		.loc 1 1001 0
 4777 3291 B9000000 		movl	$.LC103, %ecx
 4777      00
 4778 3296 BA000000 		movl	$.LC104, %edx
 4778      00
 4779 329b BE000000 		movl	$.LC105, %esi
 4779      00
 4780 32a0 BF000000 		movl	$0, %edi
 4780      00
 4781 32a5 E8000000 		call	arg_str0
 4781      00
 4782 32aa 48898590 		movq	%rax, -2928(%rbp)
 4782      F4FFFF
1002:final_with_print.c **** 	struct arg_str *backupOpt  = arg_str0(NULL, "backup", "<kbitSize:fw.iic>", "     backup FX2's EEPR
 4783              		.loc 1 1002 0
 4784 32b1 B9000000 		movl	$.LC106, %ecx
 4784      00
 4785 32b6 BA000000 		movl	$.LC107, %edx
 4785      00
 4786 32bb BE000000 		movl	$.LC108, %esi
 4786      00
 4787 32c0 BF000000 		movl	$0, %edi
 4787      00
 4788 32c5 E8000000 		call	arg_str0
 4788      00
 4789 32ca 48898598 		movq	%rax, -2920(%rbp)
 4789      F4FFFF
1003:final_with_print.c **** 	////////////////////////////////////////////////////////////////////////////////////
1004:final_with_print.c ****     ////////////////////////////////////////////////////////////////////////////////////
1005:final_with_print.c **** 	struct arg_end *endOpt   = arg_end(20);
 4790              		.loc 1 1005 0
 4791 32d1 BF140000 		movl	$20, %edi
 4791      00
 4792 32d6 E8000000 		call	arg_end
 4792      00
 4793 32db 488985A0 		movq	%rax, -2912(%rbp)
 4793      F4FFFF
1006:final_with_print.c **** 
1007:final_with_print.c **** 
1008:final_with_print.c **** 
1009:final_with_print.c **** 
1010:final_with_print.c **** 	void *argTable[] = {
 4794              		.loc 1 1010 0
 4795 32e2 488B8520 		movq	-3040(%rbp), %rax
 4795      F4FFFF
 4796 32e9 488985D0 		movq	%rax, -560(%rbp)
 4796      FDFFFF
 4797 32f0 488B8528 		movq	-3032(%rbp), %rax
 4797      F4FFFF
 4798 32f7 488985D8 		movq	%rax, -552(%rbp)
 4798      FDFFFF
 4799 32fe 488B8530 		movq	-3024(%rbp), %rax
 4799      F4FFFF
 4800 3305 488985E0 		movq	%rax, -544(%rbp)
 4800      FDFFFF
 4801 330c 488B8538 		movq	-3016(%rbp), %rax
 4801      F4FFFF
 4802 3313 488985E8 		movq	%rax, -536(%rbp)
 4802      FDFFFF
 4803 331a 488B8540 		movq	-3008(%rbp), %rax
 4803      F4FFFF
 4804 3321 488985F0 		movq	%rax, -528(%rbp)
 4804      FDFFFF
 4805 3328 488B8548 		movq	-3000(%rbp), %rax
 4805      F4FFFF
 4806 332f 488985F8 		movq	%rax, -520(%rbp)
 4806      FDFFFF
 4807 3336 488B8550 		movq	-2992(%rbp), %rax
 4807      F4FFFF
 4808 333d 48898500 		movq	%rax, -512(%rbp)
 4808      FEFFFF
 4809 3344 488B8558 		movq	-2984(%rbp), %rax
 4809      F4FFFF
 4810 334b 48898508 		movq	%rax, -504(%rbp)
 4810      FEFFFF
 4811 3352 488B8568 		movq	-2968(%rbp), %rax
 4811      F4FFFF
 4812 3359 48898510 		movq	%rax, -496(%rbp)
 4812      FEFFFF
 4813 3360 488B8570 		movq	-2960(%rbp), %rax
 4813      F4FFFF
 4814 3367 48898518 		movq	%rax, -488(%rbp)
 4814      FEFFFF
 4815 336e 488B8578 		movq	-2952(%rbp), %rax
 4815      F4FFFF
 4816 3375 48898520 		movq	%rax, -480(%rbp)
 4816      FEFFFF
 4817 337c 488B8580 		movq	-2944(%rbp), %rax
 4817      F4FFFF
 4818 3383 48898528 		movq	%rax, -472(%rbp)
 4818      FEFFFF
 4819 338a 488B8588 		movq	-2936(%rbp), %rax
 4819      F4FFFF
 4820 3391 48898530 		movq	%rax, -464(%rbp)
 4820      FEFFFF
 4821 3398 488B8590 		movq	-2928(%rbp), %rax
 4821      F4FFFF
 4822 339f 48898538 		movq	%rax, -456(%rbp)
 4822      FEFFFF
 4823 33a6 488B8598 		movq	-2920(%rbp), %rax
 4823      F4FFFF
 4824 33ad 48898540 		movq	%rax, -448(%rbp)
 4824      FEFFFF
 4825 33b4 488B8560 		movq	-2976(%rbp), %rax
 4825      F4FFFF
 4826 33bb 48898548 		movq	%rax, -440(%rbp)
 4826      FEFFFF
 4827 33c2 488B85A0 		movq	-2912(%rbp), %rax
 4827      F4FFFF
 4828 33c9 48898550 		movq	%rax, -432(%rbp)
 4828      FEFFFF
1011:final_with_print.c **** 		ivpOpt, vpOpt, fwOpt, portOpt, queryOpt, progOpt, conOpt, actOpt,
1012:final_with_print.c **** 		shellOpt, benOpt, rstOpt, dumpOpt, helpOpt, eepromOpt, backupOpt, doworkOpt, endOpt
1013:final_with_print.c **** 	};
1014:final_with_print.c **** 	const char *progName = "flcli";
 4829              		.loc 1 1014 0
 4830 33d0 48C785A8 		movq	$.LC109, -2904(%rbp)
 4830      F4FFFF00 
 4830      000000
1015:final_with_print.c **** 	int numErrors;
1016:final_with_print.c **** 	struct FLContext *handle = NULL;
 4831              		.loc 1 1016 0
 4832 33db 48C785E0 		movq	$0, -3104(%rbp)
 4832      F3FFFF00 
 4832      000000
1017:final_with_print.c **** 	FLStatus fStatus;
1018:final_with_print.c **** 	const char *error = NULL;
 4833              		.loc 1 1018 0
 4834 33e6 48C785E8 		movq	$0, -3096(%rbp)
 4834      F3FFFF00 
 4834      000000
1019:final_with_print.c **** 	const char *ivp = NULL;
 4835              		.loc 1 1019 0
 4836 33f1 48C785B0 		movq	$0, -2896(%rbp)
 4836      F4FFFF00 
 4836      000000
1020:final_with_print.c **** 	const char *vp = NULL;
 4837              		.loc 1 1020 0
 4838 33fc 48C785B8 		movq	$0, -2888(%rbp)
 4838      F4FFFF00 
 4838      000000
1021:final_with_print.c **** 	bool isNeroCapable, isCommCapable;
1022:final_with_print.c **** 	uint32 numDevices, scanChain[16], i;
1023:final_with_print.c **** 	const char *line = NULL;
 4839              		.loc 1 1023 0
 4840 3407 48C78518 		movq	$0, -3048(%rbp)
 4840      F4FFFF00 
 4840      000000
1024:final_with_print.c **** 	uint8 conduit = 0x01;
 4841              		.loc 1 1024 0
 4842 3412 C685ABF2 		movb	$1, -3413(%rbp)
 4842      FFFF01
1025:final_with_print.c **** 
1026:final_with_print.c **** 	if ( arg_nullcheck(argTable) != 0 ) {
 4843              		.loc 1 1026 0
 4844 3419 488D85D0 		leaq	-560(%rbp), %rax
 4844      FDFFFF
 4845 3420 4889C7   		movq	%rax, %rdi
 4846 3423 E8000000 		call	arg_nullcheck
 4846      00
 4847 3428 85C0     		testl	%eax, %eax
 4848 342a 742F     		je	.L229
1027:final_with_print.c **** 		fprintf(stderr, "%s: insufficient memory\n", progName);
 4849              		.loc 1 1027 0
 4850 342c 488B0500 		movq	stderr(%rip), %rax
 4850      000000
 4851 3433 488B95A8 		movq	-2904(%rbp), %rdx
 4851      F4FFFF
 4852 343a BE000000 		movl	$.LC110, %esi
 4852      00
 4853 343f 4889C7   		movq	%rax, %rdi
 4854 3442 B8000000 		movl	$0, %eax
 4854      00
 4855 3447 E8000000 		call	fprintf
 4855      00
1028:final_with_print.c **** 		FAIL(1, cleanup);
 4856              		.loc 1 1028 0
 4857 344c C785B8F2 		movl	$1, -3400(%rbp)
 4857      FFFF0100 
 4857      0000
 4858 3456 E9854A00 		jmp	.L230
 4858      00
 4859              	.L229:
1029:final_with_print.c **** 	}
1030:final_with_print.c **** 
1031:final_with_print.c **** 	numErrors = arg_parse(argc, argv, argTable);
 4860              		.loc 1 1031 0
 4861 345b 488D95D0 		leaq	-560(%rbp), %rdx
 4861      FDFFFF
 4862 3462 488B8D90 		movq	-3440(%rbp), %rcx
 4862      F2FFFF
 4863 3469 8B859CF2 		movl	-3428(%rbp), %eax
 4863      FFFF
 4864 346f 4889CE   		movq	%rcx, %rsi
 4865 3472 89C7     		movl	%eax, %edi
 4866 3474 E8000000 		call	arg_parse
 4866      00
 4867 3479 8985A0F3 		movl	%eax, -3168(%rbp)
 4867      FFFF
1032:final_with_print.c **** 
1033:final_with_print.c **** 	if ( helpOpt->count > 0 ) {
 4868              		.loc 1 1033 0
 4869 347f 488B8588 		movq	-2936(%rbp), %rax
 4869      F4FFFF
 4870 3486 8B4060   		movl	96(%rax), %eax
 4871 3489 85C0     		testl	%eax, %eax
 4872 348b 7E6E     		jle	.L231
1034:final_with_print.c **** 		printf("FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s", p
 4873              		.loc 1 1034 0
 4874 348d 488B85A8 		movq	-2904(%rbp), %rax
 4874      F4FFFF
 4875 3494 4889C6   		movq	%rax, %rsi
 4876 3497 BF000000 		movl	$.LC111, %edi
 4876      00
 4877 349c B8000000 		movl	$0, %eax
 4877      00
 4878 34a1 E8000000 		call	printf
 4878      00
1035:final_with_print.c **** 		arg_print_syntax(stdout, argTable, "\n");
 4879              		.loc 1 1035 0
 4880 34a6 488B0500 		movq	stdout(%rip), %rax
 4880      000000
 4881 34ad 488D8DD0 		leaq	-560(%rbp), %rcx
 4881      FDFFFF
 4882 34b4 BA000000 		movl	$.LC112, %edx
 4882      00
 4883 34b9 4889CE   		movq	%rcx, %rsi
 4884 34bc 4889C7   		movq	%rax, %rdi
 4885 34bf E8000000 		call	arg_print_syntax
 4885      00
1036:final_with_print.c **** 		printf("\nInteract with an FPGALink device.\n\n");
 4886              		.loc 1 1036 0
 4887 34c4 BF000000 		movl	$.LC113, %edi
 4887      00
 4888 34c9 E8000000 		call	puts
 4888      00
1037:final_with_print.c **** 		arg_print_glossary(stdout, argTable,"  %-10s %s\n");
 4889              		.loc 1 1037 0
 4890 34ce 488B0500 		movq	stdout(%rip), %rax
 4890      000000
 4891 34d5 488D8DD0 		leaq	-560(%rbp), %rcx
 4891      FDFFFF
 4892 34dc BA000000 		movl	$.LC114, %edx
 4892      00
 4893 34e1 4889CE   		movq	%rcx, %rsi
 4894 34e4 4889C7   		movq	%rax, %rdi
 4895 34e7 E8000000 		call	arg_print_glossary
 4895      00
1038:final_with_print.c **** 		FAIL(FLP_SUCCESS, cleanup);
 4896              		.loc 1 1038 0
 4897 34ec C785B8F2 		movl	$0, -3400(%rbp)
 4897      FFFF0000 
 4897      0000
 4898 34f6 E9E54900 		jmp	.L230
 4898      00
 4899              	.L231:
1039:final_with_print.c **** 	}
1040:final_with_print.c **** 
1041:final_with_print.c **** 	if ( numErrors > 0 ) {
 4900              		.loc 1 1041 0
 4901 34fb 83BDA0F3 		cmpl	$0, -3168(%rbp)
 4901      FFFF00
 4902 3502 7E4F     		jle	.L232
1042:final_with_print.c **** 		arg_print_errors(stdout, endOpt, progName);
 4903              		.loc 1 1042 0
 4904 3504 488B0500 		movq	stdout(%rip), %rax
 4904      000000
 4905 350b 488B95A8 		movq	-2904(%rbp), %rdx
 4905      F4FFFF
 4906 3512 488B8DA0 		movq	-2912(%rbp), %rcx
 4906      F4FFFF
 4907 3519 4889CE   		movq	%rcx, %rsi
 4908 351c 4889C7   		movq	%rax, %rdi
 4909 351f E8000000 		call	arg_print_errors
 4909      00
1043:final_with_print.c **** 		fprintf(stderr, "Try '%s --help' for more information.\n", progName);
 4910              		.loc 1 1043 0
 4911 3524 488B0500 		movq	stderr(%rip), %rax
 4911      000000
 4912 352b 488B95A8 		movq	-2904(%rbp), %rdx
 4912      F4FFFF
 4913 3532 BE000000 		movl	$.LC115, %esi
 4913      00
 4914 3537 4889C7   		movq	%rax, %rdi
 4915 353a B8000000 		movl	$0, %eax
 4915      00
 4916 353f E8000000 		call	fprintf
 4916      00
1044:final_with_print.c **** 		FAIL(FLP_ARGS, cleanup);
 4917              		.loc 1 1044 0
 4918 3544 C785B8F2 		movl	$12, -3400(%rbp)
 4918      FFFF0C00 
 4918      0000
 4919 354e E98D4900 		jmp	.L230
 4919      00
 4920              	.L232:
1045:final_with_print.c **** 	}
1046:final_with_print.c **** 
1047:final_with_print.c **** 	fStatus = flInitialise(0, &error);
 4921              		.loc 1 1047 0
 4922 3553 488D85E8 		leaq	-3096(%rbp), %rax
 4922      F3FFFF
 4923 355a 4889C6   		movq	%rax, %rsi
 4924 355d BF000000 		movl	$0, %edi
 4924      00
 4925 3562 E8000000 		call	flInitialise
 4925      00
 4926 3567 8985BCF2 		movl	%eax, -3396(%rbp)
 4926      FFFF
1048:final_with_print.c **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4927              		.loc 1 1048 0
 4928 356d 83BDBCF2 		cmpl	$0, -3396(%rbp)
 4928      FFFF00
 4929 3574 740F     		je	.L233
 4930              		.loc 1 1048 0 is_stmt 0 discriminator 1
 4931 3576 C785B8F2 		movl	$1, -3400(%rbp)
 4931      FFFF0100 
 4931      0000
 4932 3580 E95B4900 		jmp	.L230
 4932      00
 4933              	.L233:
1049:final_with_print.c **** 
1050:final_with_print.c **** 	vp = vpOpt->sval[0];
 4934              		.loc 1 1050 0 is_stmt 1
 4935 3585 488B8528 		movq	-3032(%rbp), %rax
 4935      F4FFFF
 4936 358c 488B4068 		movq	104(%rax), %rax
 4937 3590 488B00   		movq	(%rax), %rax
 4938 3593 488985B8 		movq	%rax, -2888(%rbp)
 4938      F4FFFF
1051:final_with_print.c **** 
1052:final_with_print.c **** 	printf("Attempting to open connection to FPGALink device %s...\n", vp);
 4939              		.loc 1 1052 0
 4940 359a 488B85B8 		movq	-2888(%rbp), %rax
 4940      F4FFFF
 4941 35a1 4889C6   		movq	%rax, %rsi
 4942 35a4 BF000000 		movl	$.LC116, %edi
 4942      00
 4943 35a9 B8000000 		movl	$0, %eax
 4943      00
 4944 35ae E8000000 		call	printf
 4944      00
1053:final_with_print.c **** 	fStatus = flOpen(vp, &handle, NULL);
 4945              		.loc 1 1053 0
 4946 35b3 488D8DE0 		leaq	-3104(%rbp), %rcx
 4946      F3FFFF
 4947 35ba 488B85B8 		movq	-2888(%rbp), %rax
 4947      F4FFFF
 4948 35c1 BA000000 		movl	$0, %edx
 4948      00
 4949 35c6 4889CE   		movq	%rcx, %rsi
 4950 35c9 4889C7   		movq	%rax, %rdi
 4951 35cc E8000000 		call	flOpen
 4951      00
 4952 35d1 8985BCF2 		movl	%eax, -3396(%rbp)
 4952      FFFF
1054:final_with_print.c **** 	if ( fStatus ) {
 4953              		.loc 1 1054 0
 4954 35d7 83BDBCF2 		cmpl	$0, -3396(%rbp)
 4954      FFFF00
 4955 35de 0F842502 		je	.L234
 4955      0000
1055:final_with_print.c **** 		if ( ivpOpt->count ) {
 4956              		.loc 1 1055 0
 4957 35e4 488B8520 		movq	-3040(%rbp), %rax
 4957      F4FFFF
 4958 35eb 8B4060   		movl	96(%rax), %eax
 4959 35ee 85C0     		testl	%eax, %eax
 4960 35f0 0F84E401 		je	.L235
 4960      0000
 4961              	.LBB44:
1056:final_with_print.c **** 			int count = 60;
 4962              		.loc 1 1056 0
 4963 35f6 C785C4F2 		movl	$60, -3388(%rbp)
 4963      FFFF3C00 
 4963      0000
1057:final_with_print.c **** 			uint8 flag;
1058:final_with_print.c **** 			ivp = ivpOpt->sval[0];
 4964              		.loc 1 1058 0
 4965 3600 488B8520 		movq	-3040(%rbp), %rax
 4965      F4FFFF
 4966 3607 488B4068 		movq	104(%rax), %rax
 4967 360b 488B00   		movq	(%rax), %rax
 4968 360e 488985B0 		movq	%rax, -2896(%rbp)
 4968      F4FFFF
1059:final_with_print.c **** 			printf("Loading firmware into %s...\n", ivp);
 4969              		.loc 1 1059 0
 4970 3615 488B85B0 		movq	-2896(%rbp), %rax
 4970      F4FFFF
 4971 361c 4889C6   		movq	%rax, %rsi
 4972 361f BF000000 		movl	$.LC117, %edi
 4972      00
 4973 3624 B8000000 		movl	$0, %eax
 4973      00
 4974 3629 E8000000 		call	printf
 4974      00
1060:final_with_print.c **** 			if ( fwOpt->count ) {
 4975              		.loc 1 1060 0
 4976 362e 488B8530 		movq	-3024(%rbp), %rax
 4976      F4FFFF
 4977 3635 8B4060   		movl	96(%rax), %eax
 4978 3638 85C0     		testl	%eax, %eax
 4979 363a 742F     		je	.L236
1061:final_with_print.c **** 				fStatus = flLoadCustomFirmware(ivp, fwOpt->sval[0], &error);
 4980              		.loc 1 1061 0
 4981 363c 488B8530 		movq	-3024(%rbp), %rax
 4981      F4FFFF
 4982 3643 488B4068 		movq	104(%rax), %rax
 4983 3647 488B08   		movq	(%rax), %rcx
 4984 364a 488D95E8 		leaq	-3096(%rbp), %rdx
 4984      F3FFFF
 4985 3651 488B85B0 		movq	-2896(%rbp), %rax
 4985      F4FFFF
 4986 3658 4889CE   		movq	%rcx, %rsi
 4987 365b 4889C7   		movq	%rax, %rdi
 4988 365e E8000000 		call	flLoadCustomFirmware
 4988      00
 4989 3663 8985BCF2 		movl	%eax, -3396(%rbp)
 4989      FFFF
 4990 3669 EB26     		jmp	.L237
 4991              	.L236:
1062:final_with_print.c **** 			} else {
1063:final_with_print.c **** 				fStatus = flLoadStandardFirmware(ivp, vp, &error);
 4992              		.loc 1 1063 0
 4993 366b 488D95E8 		leaq	-3096(%rbp), %rdx
 4993      F3FFFF
 4994 3672 488B8DB8 		movq	-2888(%rbp), %rcx
 4994      F4FFFF
 4995 3679 488B85B0 		movq	-2896(%rbp), %rax
 4995      F4FFFF
 4996 3680 4889CE   		movq	%rcx, %rsi
 4997 3683 4889C7   		movq	%rax, %rdi
 4998 3686 E8000000 		call	flLoadStandardFirmware
 4998      00
 4999 368b 8985BCF2 		movl	%eax, -3396(%rbp)
 4999      FFFF
 5000              	.L237:
1064:final_with_print.c **** 			}
1065:final_with_print.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5001              		.loc 1 1065 0
 5002 3691 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5002      FFFF00
 5003 3698 740F     		je	.L238
 5004              		.loc 1 1065 0 is_stmt 0 discriminator 1
 5005 369a C785B8F2 		movl	$1, -3400(%rbp)
 5005      FFFF0100 
 5005      0000
 5006 36a4 E9374800 		jmp	.L230
 5006      00
 5007              	.L238:
1066:final_with_print.c **** 			
1067:final_with_print.c **** 			printf("Awaiting renumeration");
 5008              		.loc 1 1067 0 is_stmt 1
 5009 36a9 BF000000 		movl	$.LC118, %edi
 5009      00
 5010 36ae B8000000 		movl	$0, %eax
 5010      00
 5011 36b3 E8000000 		call	printf
 5011      00
1068:final_with_print.c **** 			flSleep(1000);
 5012              		.loc 1 1068 0
 5013 36b8 BFE80300 		movl	$1000, %edi
 5013      00
 5014 36bd E8000000 		call	flSleep
 5014      00
 5015              	.L242:
1069:final_with_print.c **** 			do {
1070:final_with_print.c **** 				printf(".");
 5016              		.loc 1 1070 0
 5017 36c2 BF2E0000 		movl	$46, %edi
 5017      00
 5018 36c7 E8000000 		call	putchar
 5018      00
1071:final_with_print.c **** 				fflush(stdout);
 5019              		.loc 1 1071 0
 5020 36cc 488B0500 		movq	stdout(%rip), %rax
 5020      000000
 5021 36d3 4889C7   		movq	%rax, %rdi
 5022 36d6 E8000000 		call	fflush
 5022      00
1072:final_with_print.c **** 				fStatus = flIsDeviceAvailable(vp, &flag, &error);
 5023              		.loc 1 1072 0
 5024 36db 488D95E8 		leaq	-3096(%rbp), %rdx
 5024      F3FFFF
 5025 36e2 488D8D10 		leaq	-3056(%rbp), %rcx
 5025      F4FFFF
 5026 36e9 488B85B8 		movq	-2888(%rbp), %rax
 5026      F4FFFF
 5027 36f0 4889CE   		movq	%rcx, %rsi
 5028 36f3 4889C7   		movq	%rax, %rdi
 5029 36f6 E8000000 		call	flIsDeviceAvailable
 5029      00
 5030 36fb 8985BCF2 		movl	%eax, -3396(%rbp)
 5030      FFFF
1073:final_with_print.c **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5031              		.loc 1 1073 0
 5032 3701 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5032      FFFF00
 5033 3708 740F     		je	.L240
 5034              		.loc 1 1073 0 is_stmt 0 discriminator 1
 5035 370a C785B8F2 		movl	$1, -3400(%rbp)
 5035      FFFF0100 
 5035      0000
 5036 3714 E9C74700 		jmp	.L230
 5036      00
 5037              	.L240:
1074:final_with_print.c **** 				flSleep(250);
 5038              		.loc 1 1074 0 is_stmt 1
 5039 3719 BFFA0000 		movl	$250, %edi
 5039      00
 5040 371e E8000000 		call	flSleep
 5040      00
1075:final_with_print.c **** 				count--;
 5041              		.loc 1 1075 0
 5042 3723 83ADC4F2 		subl	$1, -3388(%rbp)
 5042      FFFF01
1076:final_with_print.c **** 			} while ( !flag && count );
 5043              		.loc 1 1076 0
 5044 372a 0FB68510 		movzbl	-3056(%rbp), %eax
 5044      F4FFFF
 5045 3731 84C0     		testb	%al, %al
 5046 3733 7509     		jne	.L241
 5047              		.loc 1 1076 0 is_stmt 0 discriminator 1
 5048 3735 83BDC4F2 		cmpl	$0, -3388(%rbp)
 5048      FFFF00
 5049 373c 7584     		jne	.L242
 5050              	.L241:
1077:final_with_print.c **** 			printf("\n");
 5051              		.loc 1 1077 0 is_stmt 1
 5052 373e BF0A0000 		movl	$10, %edi
 5052      00
 5053 3743 E8000000 		call	putchar
 5053      00
1078:final_with_print.c **** 			if ( !flag ) {
 5054              		.loc 1 1078 0
 5055 3748 0FB68510 		movzbl	-3056(%rbp), %eax
 5055      F4FFFF
 5056 374f 84C0     		testb	%al, %al
 5057 3751 752F     		jne	.L243
1079:final_with_print.c **** 				fprintf(stderr, "FPGALink device did not renumerate properly as %s\n", vp);
 5058              		.loc 1 1079 0
 5059 3753 488B0500 		movq	stderr(%rip), %rax
 5059      000000
 5060 375a 488B95B8 		movq	-2888(%rbp), %rdx
 5060      F4FFFF
 5061 3761 BE000000 		movl	$.LC119, %esi
 5061      00
 5062 3766 4889C7   		movq	%rax, %rdi
 5063 3769 B8000000 		movl	$0, %eax
 5063      00
 5064 376e E8000000 		call	fprintf
 5064      00
1080:final_with_print.c **** 				FAIL(FLP_LIBERR, cleanup);
 5065              		.loc 1 1080 0
 5066 3773 C785B8F2 		movl	$1, -3400(%rbp)
 5066      FFFF0100 
 5066      0000
 5067 377d E95E4700 		jmp	.L230
 5067      00
 5068              	.L243:
1081:final_with_print.c **** 			}
1082:final_with_print.c **** 
1083:final_with_print.c **** 			printf("Attempting to open connection to FPGLink device %s again...\n", vp);
 5069              		.loc 1 1083 0
 5070 3782 488B85B8 		movq	-2888(%rbp), %rax
 5070      F4FFFF
 5071 3789 4889C6   		movq	%rax, %rsi
 5072 378c BF000000 		movl	$.LC120, %edi
 5072      00
 5073 3791 B8000000 		movl	$0, %eax
 5073      00
 5074 3796 E8000000 		call	printf
 5074      00
1084:final_with_print.c **** 			fStatus = flOpen(vp, &handle, &error);
 5075              		.loc 1 1084 0
 5076 379b 488D95E8 		leaq	-3096(%rbp), %rdx
 5076      F3FFFF
 5077 37a2 488D8DE0 		leaq	-3104(%rbp), %rcx
 5077      F3FFFF
 5078 37a9 488B85B8 		movq	-2888(%rbp), %rax
 5078      F4FFFF
 5079 37b0 4889CE   		movq	%rcx, %rsi
 5080 37b3 4889C7   		movq	%rax, %rdi
 5081 37b6 E8000000 		call	flOpen
 5081      00
 5082 37bb 8985BCF2 		movl	%eax, -3396(%rbp)
 5082      FFFF
1085:final_with_print.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5083              		.loc 1 1085 0
 5084 37c1 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5084      FFFF00
 5085 37c8 743F     		je	.L234
 5086              		.loc 1 1085 0 is_stmt 0 discriminator 1
 5087 37ca C785B8F2 		movl	$1, -3400(%rbp)
 5087      FFFF0100 
 5087      0000
 5088 37d4 90       		nop
 5089 37d5 E9064700 		jmp	.L230
 5089      00
 5090              	.L235:
 5091              	.LBE44:
1086:final_with_print.c **** 		} else {
1087:final_with_print.c **** 			fprintf(stderr, "Could not open FPGALink device at %s and no initial VID:PID was supplied\n", vp
 5092              		.loc 1 1087 0 is_stmt 1
 5093 37da 488B0500 		movq	stderr(%rip), %rax
 5093      000000
 5094 37e1 488B95B8 		movq	-2888(%rbp), %rdx
 5094      F4FFFF
 5095 37e8 BE000000 		movl	$.LC121, %esi
 5095      00
 5096 37ed 4889C7   		movq	%rax, %rdi
 5097 37f0 B8000000 		movl	$0, %eax
 5097      00
 5098 37f5 E8000000 		call	fprintf
 5098      00
1088:final_with_print.c **** 			FAIL(FLP_ARGS, cleanup);
 5099              		.loc 1 1088 0
 5100 37fa C785B8F2 		movl	$12, -3400(%rbp)
 5100      FFFF0C00 
 5100      0000
 5101 3804 E9D74600 		jmp	.L230
 5101      00
 5102              	.L234:
1089:final_with_print.c **** 		}
1090:final_with_print.c **** 	}
1091:final_with_print.c **** 
1092:final_with_print.c **** 	printf(
 5103              		.loc 1 1092 0
 5104 3809 488B85E0 		movq	-3104(%rbp), %rax
 5104      F3FFFF
 5105 3810 4889C7   		movq	%rax, %rdi
 5106 3813 E8000000 		call	flGetFirmwareVersion
 5106      00
 5107 3818 89C3     		movl	%eax, %ebx
1093:final_with_print.c **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
1094:final_with_print.c **** 		vp, flGetFirmwareID(handle), flGetFirmwareVersion(handle)
 5108              		.loc 1 1094 0
 5109 381a 488B85E0 		movq	-3104(%rbp), %rax
 5109      F3FFFF
 5110 3821 4889C7   		movq	%rax, %rdi
 5111 3824 E8000000 		call	flGetFirmwareID
 5111      00
1092:final_with_print.c **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 5112              		.loc 1 1092 0
 5113 3829 0FB7D0   		movzwl	%ax, %edx
 5114 382c 488B85B8 		movq	-2888(%rbp), %rax
 5114      F4FFFF
 5115 3833 89D9     		movl	%ebx, %ecx
 5116 3835 4889C6   		movq	%rax, %rsi
 5117 3838 BF000000 		movl	$.LC122, %edi
 5117      00
 5118 383d B8000000 		movl	$0, %eax
 5118      00
 5119 3842 E8000000 		call	printf
 5119      00
1095:final_with_print.c **** 		);
1096:final_with_print.c **** 
1097:final_with_print.c **** 	if ( eepromOpt->count ) {
 5120              		.loc 1 1097 0
 5121 3847 488B8590 		movq	-2928(%rbp), %rax
 5121      F4FFFF
 5122 384e 8B4060   		movl	96(%rax), %eax
 5123 3851 85C0     		testl	%eax, %eax
 5124 3853 0F84B600 		je	.L245
 5124      0000
1098:final_with_print.c **** 		if ( !strcmp("std", eepromOpt->sval[0]) ) {
 5125              		.loc 1 1098 0
 5126 3859 488B8590 		movq	-2928(%rbp), %rax
 5126      F4FFFF
 5127 3860 488B4068 		movq	104(%rax), %rax
 5128 3864 488B00   		movq	(%rax), %rax
 5129 3867 4889C6   		movq	%rax, %rsi
 5130 386a BF000000 		movl	$.LC123, %edi
 5130      00
 5131 386f E8000000 		call	strcmp
 5131      00
 5132 3874 85C0     		testl	%eax, %eax
 5133 3876 7532     		jne	.L246
1099:final_with_print.c **** 			printf("Writing the standard FPGALink firmware to the FX2's EEPROM...\n");
 5134              		.loc 1 1099 0
 5135 3878 BF000000 		movl	$.LC124, %edi
 5135      00
 5136 387d E8000000 		call	puts
 5136      00
1100:final_with_print.c **** 			fStatus = flFlashStandardFirmware(handle, vp, &error);
 5137              		.loc 1 1100 0
 5138 3882 488B85E0 		movq	-3104(%rbp), %rax
 5138      F3FFFF
 5139 3889 488D95E8 		leaq	-3096(%rbp), %rdx
 5139      F3FFFF
 5140 3890 488B8DB8 		movq	-2888(%rbp), %rcx
 5140      F4FFFF
 5141 3897 4889CE   		movq	%rcx, %rsi
 5142 389a 4889C7   		movq	%rax, %rdi
 5143 389d E8000000 		call	flFlashStandardFirmware
 5143      00
 5144 38a2 8985BCF2 		movl	%eax, -3396(%rbp)
 5144      FFFF
 5145 38a8 EB4D     		jmp	.L247
 5146              	.L246:
1101:final_with_print.c **** 		} else {
1102:final_with_print.c **** 			printf("Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n", eepromOpt->sval[0]);
 5147              		.loc 1 1102 0
 5148 38aa 488B8590 		movq	-2928(%rbp), %rax
 5148      F4FFFF
 5149 38b1 488B4068 		movq	104(%rax), %rax
 5150 38b5 488B00   		movq	(%rax), %rax
 5151 38b8 4889C6   		movq	%rax, %rsi
 5152 38bb BF000000 		movl	$.LC125, %edi
 5152      00
 5153 38c0 B8000000 		movl	$0, %eax
 5153      00
 5154 38c5 E8000000 		call	printf
 5154      00
1103:final_with_print.c **** 			fStatus = flFlashCustomFirmware(handle, eepromOpt->sval[0], &error);
 5155              		.loc 1 1103 0
 5156 38ca 488B8590 		movq	-2928(%rbp), %rax
 5156      F4FFFF
 5157 38d1 488B4068 		movq	104(%rax), %rax
 5158 38d5 488B08   		movq	(%rax), %rcx
 5159 38d8 488B85E0 		movq	-3104(%rbp), %rax
 5159      F3FFFF
 5160 38df 488D95E8 		leaq	-3096(%rbp), %rdx
 5160      F3FFFF
 5161 38e6 4889CE   		movq	%rcx, %rsi
 5162 38e9 4889C7   		movq	%rax, %rdi
 5163 38ec E8000000 		call	flFlashCustomFirmware
 5163      00
 5164 38f1 8985BCF2 		movl	%eax, -3396(%rbp)
 5164      FFFF
 5165              	.L247:
1104:final_with_print.c **** 		}
1105:final_with_print.c **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5166              		.loc 1 1105 0
 5167 38f7 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5167      FFFF00
 5168 38fe 740F     		je	.L245
 5169              		.loc 1 1105 0 is_stmt 0 discriminator 1
 5170 3900 C785B8F2 		movl	$1, -3400(%rbp)
 5170      FFFF0100 
 5170      0000
 5171 390a E9D14500 		jmp	.L230
 5171      00
 5172              	.L245:
1106:final_with_print.c **** 	}
1107:final_with_print.c **** 
1108:final_with_print.c **** 	if ( backupOpt->count ) {
 5173              		.loc 1 1108 0 is_stmt 1
 5174 390f 488B8598 		movq	-2920(%rbp), %rax
 5174      F4FFFF
 5175 3916 8B4060   		movl	96(%rax), %eax
 5176 3919 85C0     		testl	%eax, %eax
 5177 391b 0F84DA00 		je	.L248
 5177      0000
 5178              	.LBB45:
1109:final_with_print.c **** 		const char *fileName;
1110:final_with_print.c **** 		const uint32 kbitSize = strtoul(backupOpt->sval[0], (char**)&fileName, 0);
 5179              		.loc 1 1110 0
 5180 3921 488B8598 		movq	-2920(%rbp), %rax
 5180      F4FFFF
 5181 3928 488B4068 		movq	104(%rax), %rax
 5182 392c 488B00   		movq	(%rax), %rax
 5183 392f 488D8D10 		leaq	-3056(%rbp), %rcx
 5183      F4FFFF
 5184 3936 BA000000 		movl	$0, %edx
 5184      00
 5185 393b 4889CE   		movq	%rcx, %rsi
 5186 393e 4889C7   		movq	%rax, %rdi
 5187 3941 E8000000 		call	strtoul
 5187      00
 5188 3946 8985A4F3 		movl	%eax, -3164(%rbp)
 5188      FFFF
1111:final_with_print.c **** 		if ( *fileName != ':' ) {
 5189              		.loc 1 1111 0
 5190 394c 488B8510 		movq	-3056(%rbp), %rax
 5190      F4FFFF
 5191 3953 0FB600   		movzbl	(%rax), %eax
 5192 3956 3C3A     		cmpb	$58, %al
 5193 3958 742F     		je	.L249
1112:final_with_print.c **** 			fprintf(stderr, "%s: invalid argument to option --backup=<kbitSize:fw.iic>\n", progName);
 5194              		.loc 1 1112 0
 5195 395a 488B0500 		movq	stderr(%rip), %rax
 5195      000000
 5196 3961 488B95A8 		movq	-2904(%rbp), %rdx
 5196      F4FFFF
 5197 3968 BE000000 		movl	$.LC126, %esi
 5197      00
 5198 396d 4889C7   		movq	%rax, %rdi
 5199 3970 B8000000 		movl	$0, %eax
 5199      00
 5200 3975 E8000000 		call	fprintf
 5200      00
1113:final_with_print.c **** 			FAIL(FLP_ARGS, cleanup);
 5201              		.loc 1 1113 0
 5202 397a C785B8F2 		movl	$12, -3400(%rbp)
 5202      FFFF0C00 
 5202      0000
 5203 3984 E9574500 		jmp	.L230
 5203      00
 5204              	.L249:
1114:final_with_print.c **** 		}
1115:final_with_print.c **** 		fileName++;
 5205              		.loc 1 1115 0
 5206 3989 488B8510 		movq	-3056(%rbp), %rax
 5206      F4FFFF
 5207 3990 4883C001 		addq	$1, %rax
 5208 3994 48898510 		movq	%rax, -3056(%rbp)
 5208      F4FFFF
1116:final_with_print.c **** 		printf("Saving a backup of %d kbit from the FX2's EEPROM to %s...\n", kbitSize, fileName);
 5209              		.loc 1 1116 0
 5210 399b 488B9510 		movq	-3056(%rbp), %rdx
 5210      F4FFFF
 5211 39a2 8B85A4F3 		movl	-3164(%rbp), %eax
 5211      FFFF
 5212 39a8 89C6     		movl	%eax, %esi
 5213 39aa BF000000 		movl	$.LC127, %edi
 5213      00
 5214 39af B8000000 		movl	$0, %eax
 5214      00
 5215 39b4 E8000000 		call	printf
 5215      00
1117:final_with_print.c **** 		fStatus = flSaveFirmware(handle, kbitSize, fileName, &error);
 5216              		.loc 1 1117 0
 5217 39b9 488B9510 		movq	-3056(%rbp), %rdx
 5217      F4FFFF
 5218 39c0 488B85E0 		movq	-3104(%rbp), %rax
 5218      F3FFFF
 5219 39c7 488D8DE8 		leaq	-3096(%rbp), %rcx
 5219      F3FFFF
 5220 39ce 8BB5A4F3 		movl	-3164(%rbp), %esi
 5220      FFFF
 5221 39d4 4889C7   		movq	%rax, %rdi
 5222 39d7 E8000000 		call	flSaveFirmware
 5222      00
 5223 39dc 8985BCF2 		movl	%eax, -3396(%rbp)
 5223      FFFF
1118:final_with_print.c **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5224              		.loc 1 1118 0
 5225 39e2 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5225      FFFF00
 5226 39e9 7410     		je	.L248
 5227              		.loc 1 1118 0 is_stmt 0 discriminator 1
 5228 39eb C785B8F2 		movl	$1, -3400(%rbp)
 5228      FFFF0100 
 5228      0000
 5229 39f5 90       		nop
 5230 39f6 E9E54400 		jmp	.L230
 5230      00
 5231              	.L248:
 5232              	.LBE45:
1119:final_with_print.c **** 	}
1120:final_with_print.c **** 
1121:final_with_print.c **** 	if ( rstOpt->count ) {
 5233              		.loc 1 1121 0 is_stmt 1
 5234 39fb 488B8578 		movq	-2952(%rbp), %rax
 5234      F4FFFF
 5235 3a02 8B4060   		movl	96(%rax), %eax
 5236 3a05 85C0     		testl	%eax, %eax
 5237 3a07 7437     		je	.L252
1122:final_with_print.c **** 		// Reset the bulk endpoints (only needed in some virtualised environments)
1123:final_with_print.c **** 		fStatus = flResetToggle(handle, &error);
 5238              		.loc 1 1123 0
 5239 3a09 488B85E0 		movq	-3104(%rbp), %rax
 5239      F3FFFF
 5240 3a10 488D95E8 		leaq	-3096(%rbp), %rdx
 5240      F3FFFF
 5241 3a17 4889D6   		movq	%rdx, %rsi
 5242 3a1a 4889C7   		movq	%rax, %rdi
 5243 3a1d E8000000 		call	flResetToggle
 5243      00
 5244 3a22 8985BCF2 		movl	%eax, -3396(%rbp)
 5244      FFFF
1124:final_with_print.c **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5245              		.loc 1 1124 0
 5246 3a28 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5246      FFFF00
 5247 3a2f 740F     		je	.L252
 5248              		.loc 1 1124 0 is_stmt 0 discriminator 1
 5249 3a31 C785B8F2 		movl	$1, -3400(%rbp)
 5249      FFFF0100 
 5249      0000
 5250 3a3b E9A04400 		jmp	.L230
 5250      00
 5251              	.L252:
1125:final_with_print.c **** 	}
1126:final_with_print.c **** 
1127:final_with_print.c **** 	if ( conOpt->count ) {
 5252              		.loc 1 1127 0 is_stmt 1
 5253 3a40 488B8550 		movq	-2992(%rbp), %rax
 5253      F4FFFF
 5254 3a47 8B4060   		movl	96(%rax), %eax
 5255 3a4a 85C0     		testl	%eax, %eax
 5256 3a4c 7413     		je	.L253
1128:final_with_print.c **** 		conduit = (uint8)conOpt->ival[0];
 5257              		.loc 1 1128 0
 5258 3a4e 488B8550 		movq	-2992(%rbp), %rax
 5258      F4FFFF
 5259 3a55 488B4068 		movq	104(%rax), %rax
 5260 3a59 8B00     		movl	(%rax), %eax
 5261 3a5b 8885ABF2 		movb	%al, -3413(%rbp)
 5261      FFFF
 5262              	.L253:
1129:final_with_print.c **** 	}
1130:final_with_print.c **** 
1131:final_with_print.c **** 	isNeroCapable = flIsNeroCapable(handle);
 5263              		.loc 1 1131 0
 5264 3a61 488B85E0 		movq	-3104(%rbp), %rax
 5264      F3FFFF
 5265 3a68 4889C7   		movq	%rax, %rdi
 5266 3a6b E8000000 		call	flIsNeroCapable
 5266      00
 5267 3a70 84C0     		testb	%al, %al
 5268 3a72 0F95C0   		setne	%al
 5269 3a75 8885ADF2 		movb	%al, -3411(%rbp)
 5269      FFFF
1132:final_with_print.c **** 	isCommCapable = flIsCommCapable(handle, conduit);
 5270              		.loc 1 1132 0
 5271 3a7b 0FB695AB 		movzbl	-3413(%rbp), %edx
 5271      F2FFFF
 5272 3a82 488B85E0 		movq	-3104(%rbp), %rax
 5272      F3FFFF
 5273 3a89 89D6     		movl	%edx, %esi
 5274 3a8b 4889C7   		movq	%rax, %rdi
 5275 3a8e E8000000 		call	flIsCommCapable
 5275      00
 5276 3a93 84C0     		testb	%al, %al
 5277 3a95 0F95C0   		setne	%al
 5278 3a98 8885AEF2 		movb	%al, -3410(%rbp)
 5278      FFFF
1133:final_with_print.c **** 
1134:final_with_print.c **** 	if ( portOpt->count ) {
 5279              		.loc 1 1134 0
 5280 3a9e 488B8538 		movq	-3016(%rbp), %rax
 5280      F4FFFF
 5281 3aa5 8B4060   		movl	96(%rax), %eax
 5282 3aa8 85C0     		testl	%eax, %eax
 5283 3aaa 0F843C02 		je	.L254
 5283      0000
 5284              	.LBB46:
1135:final_with_print.c **** 		uint32 readState;
1136:final_with_print.c **** 		char hex[9];
1137:final_with_print.c **** 		const uint8 *p = (const uint8 *)hex;
 5285              		.loc 1 1137 0
 5286 3ab0 488D45D0 		leaq	-48(%rbp), %rax
 5287 3ab4 488985C0 		movq	%rax, -2880(%rbp)
 5287      F4FFFF
1138:final_with_print.c **** 		printf("Configuring ports...\n");
 5288              		.loc 1 1138 0
 5289 3abb BF000000 		movl	$.LC128, %edi
 5289      00
 5290 3ac0 E8000000 		call	puts
 5290      00
1139:final_with_print.c **** 		fStatus = flMultiBitPortAccess(handle, portOpt->sval[0], &readState, &error);
 5291              		.loc 1 1139 0
 5292 3ac5 488B8538 		movq	-3016(%rbp), %rax
 5292      F4FFFF
 5293 3acc 488B4068 		movq	104(%rax), %rax
 5294 3ad0 488B30   		movq	(%rax), %rsi
 5295 3ad3 488B85E0 		movq	-3104(%rbp), %rax
 5295      F3FFFF
 5296 3ada 488D8DE8 		leaq	-3096(%rbp), %rcx
 5296      F3FFFF
 5297 3ae1 488D9510 		leaq	-3056(%rbp), %rdx
 5297      F4FFFF
 5298 3ae8 4889C7   		movq	%rax, %rdi
 5299 3aeb E8000000 		call	flMultiBitPortAccess
 5299      00
 5300 3af0 8985BCF2 		movl	%eax, -3396(%rbp)
 5300      FFFF
1140:final_with_print.c **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5301              		.loc 1 1140 0
 5302 3af6 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5302      FFFF00
 5303 3afd 740F     		je	.L255
 5304              		.loc 1 1140 0 is_stmt 0 discriminator 1
 5305 3aff C785B8F2 		movl	$1, -3400(%rbp)
 5305      FFFF0100 
 5305      0000
 5306 3b09 E9D24300 		jmp	.L230
 5306      00
 5307              	.L255:
1141:final_with_print.c **** 		sprintf(hex, "%08X", readState);
 5308              		.loc 1 1141 0 is_stmt 1
 5309 3b0e 8B9510F4 		movl	-3056(%rbp), %edx
 5309      FFFF
 5310 3b14 488D45D0 		leaq	-48(%rbp), %rax
 5311 3b18 BE000000 		movl	$.LC129, %esi
 5311      00
 5312 3b1d 4889C7   		movq	%rax, %rdi
 5313 3b20 B8000000 		movl	$0, %eax
 5313      00
 5314 3b25 E8000000 		call	sprintf
 5314      00
1142:final_with_print.c **** 		printf("Readback:   28   24   20   16    12    8    4    0\n          %s", nibbles[*p++ - '0']);
 5315              		.loc 1 1142 0
 5316 3b2a 488B85C0 		movq	-2880(%rbp), %rax
 5316      F4FFFF
 5317 3b31 488D5001 		leaq	1(%rax), %rdx
 5318 3b35 488995C0 		movq	%rdx, -2880(%rbp)
 5318      F4FFFF
 5319 3b3c 0FB600   		movzbl	(%rax), %eax
 5320 3b3f 0FB6C0   		movzbl	%al, %eax
 5321 3b42 83E830   		subl	$48, %eax
 5322 3b45 4898     		cltq
 5323 3b47 488B04C5 		movq	nibbles(,%rax,8), %rax
 5323      00000000 
 5324 3b4f 4889C6   		movq	%rax, %rsi
 5325 3b52 BF000000 		movl	$.LC130, %edi
 5325      00
 5326 3b57 B8000000 		movl	$0, %eax
 5326      00
 5327 3b5c E8000000 		call	printf
 5327      00
1143:final_with_print.c **** 		printf(" %s", nibbles[*p++ - '0']);
 5328              		.loc 1 1143 0
 5329 3b61 488B85C0 		movq	-2880(%rbp), %rax
 5329      F4FFFF
 5330 3b68 488D5001 		leaq	1(%rax), %rdx
 5331 3b6c 488995C0 		movq	%rdx, -2880(%rbp)
 5331      F4FFFF
 5332 3b73 0FB600   		movzbl	(%rax), %eax
 5333 3b76 0FB6C0   		movzbl	%al, %eax
 5334 3b79 83E830   		subl	$48, %eax
 5335 3b7c 4898     		cltq
 5336 3b7e 488B04C5 		movq	nibbles(,%rax,8), %rax
 5336      00000000 
 5337 3b86 4889C6   		movq	%rax, %rsi
 5338 3b89 BF000000 		movl	$.LC131, %edi
 5338      00
 5339 3b8e B8000000 		movl	$0, %eax
 5339      00
 5340 3b93 E8000000 		call	printf
 5340      00
1144:final_with_print.c **** 		printf(" %s", nibbles[*p++ - '0']);
 5341              		.loc 1 1144 0
 5342 3b98 488B85C0 		movq	-2880(%rbp), %rax
 5342      F4FFFF
 5343 3b9f 488D5001 		leaq	1(%rax), %rdx
 5344 3ba3 488995C0 		movq	%rdx, -2880(%rbp)
 5344      F4FFFF
 5345 3baa 0FB600   		movzbl	(%rax), %eax
 5346 3bad 0FB6C0   		movzbl	%al, %eax
 5347 3bb0 83E830   		subl	$48, %eax
 5348 3bb3 4898     		cltq
 5349 3bb5 488B04C5 		movq	nibbles(,%rax,8), %rax
 5349      00000000 
 5350 3bbd 4889C6   		movq	%rax, %rsi
 5351 3bc0 BF000000 		movl	$.LC131, %edi
 5351      00
 5352 3bc5 B8000000 		movl	$0, %eax
 5352      00
 5353 3bca E8000000 		call	printf
 5353      00
1145:final_with_print.c **** 		printf(" %s", nibbles[*p++ - '0']);
 5354              		.loc 1 1145 0
 5355 3bcf 488B85C0 		movq	-2880(%rbp), %rax
 5355      F4FFFF
 5356 3bd6 488D5001 		leaq	1(%rax), %rdx
 5357 3bda 488995C0 		movq	%rdx, -2880(%rbp)
 5357      F4FFFF
 5358 3be1 0FB600   		movzbl	(%rax), %eax
 5359 3be4 0FB6C0   		movzbl	%al, %eax
 5360 3be7 83E830   		subl	$48, %eax
 5361 3bea 4898     		cltq
 5362 3bec 488B04C5 		movq	nibbles(,%rax,8), %rax
 5362      00000000 
 5363 3bf4 4889C6   		movq	%rax, %rsi
 5364 3bf7 BF000000 		movl	$.LC131, %edi
 5364      00
 5365 3bfc B8000000 		movl	$0, %eax
 5365      00
 5366 3c01 E8000000 		call	printf
 5366      00
1146:final_with_print.c **** 		printf("  %s", nibbles[*p++ - '0']);
 5367              		.loc 1 1146 0
 5368 3c06 488B85C0 		movq	-2880(%rbp), %rax
 5368      F4FFFF
 5369 3c0d 488D5001 		leaq	1(%rax), %rdx
 5370 3c11 488995C0 		movq	%rdx, -2880(%rbp)
 5370      F4FFFF
 5371 3c18 0FB600   		movzbl	(%rax), %eax
 5372 3c1b 0FB6C0   		movzbl	%al, %eax
 5373 3c1e 83E830   		subl	$48, %eax
 5374 3c21 4898     		cltq
 5375 3c23 488B04C5 		movq	nibbles(,%rax,8), %rax
 5375      00000000 
 5376 3c2b 4889C6   		movq	%rax, %rsi
 5377 3c2e BF000000 		movl	$.LC132, %edi
 5377      00
 5378 3c33 B8000000 		movl	$0, %eax
 5378      00
 5379 3c38 E8000000 		call	printf
 5379      00
1147:final_with_print.c **** 		printf(" %s", nibbles[*p++ - '0']);
 5380              		.loc 1 1147 0
 5381 3c3d 488B85C0 		movq	-2880(%rbp), %rax
 5381      F4FFFF
 5382 3c44 488D5001 		leaq	1(%rax), %rdx
 5383 3c48 488995C0 		movq	%rdx, -2880(%rbp)
 5383      F4FFFF
 5384 3c4f 0FB600   		movzbl	(%rax), %eax
 5385 3c52 0FB6C0   		movzbl	%al, %eax
 5386 3c55 83E830   		subl	$48, %eax
 5387 3c58 4898     		cltq
 5388 3c5a 488B04C5 		movq	nibbles(,%rax,8), %rax
 5388      00000000 
 5389 3c62 4889C6   		movq	%rax, %rsi
 5390 3c65 BF000000 		movl	$.LC131, %edi
 5390      00
 5391 3c6a B8000000 		movl	$0, %eax
 5391      00
 5392 3c6f E8000000 		call	printf
 5392      00
1148:final_with_print.c **** 		printf(" %s", nibbles[*p++ - '0']);
 5393              		.loc 1 1148 0
 5394 3c74 488B85C0 		movq	-2880(%rbp), %rax
 5394      F4FFFF
 5395 3c7b 488D5001 		leaq	1(%rax), %rdx
 5396 3c7f 488995C0 		movq	%rdx, -2880(%rbp)
 5396      F4FFFF
 5397 3c86 0FB600   		movzbl	(%rax), %eax
 5398 3c89 0FB6C0   		movzbl	%al, %eax
 5399 3c8c 83E830   		subl	$48, %eax
 5400 3c8f 4898     		cltq
 5401 3c91 488B04C5 		movq	nibbles(,%rax,8), %rax
 5401      00000000 
 5402 3c99 4889C6   		movq	%rax, %rsi
 5403 3c9c BF000000 		movl	$.LC131, %edi
 5403      00
 5404 3ca1 B8000000 		movl	$0, %eax
 5404      00
 5405 3ca6 E8000000 		call	printf
 5405      00
1149:final_with_print.c **** 		printf(" %s\n", nibbles[*p++ - '0']);
 5406              		.loc 1 1149 0
 5407 3cab 488B85C0 		movq	-2880(%rbp), %rax
 5407      F4FFFF
 5408 3cb2 488D5001 		leaq	1(%rax), %rdx
 5409 3cb6 488995C0 		movq	%rdx, -2880(%rbp)
 5409      F4FFFF
 5410 3cbd 0FB600   		movzbl	(%rax), %eax
 5411 3cc0 0FB6C0   		movzbl	%al, %eax
 5412 3cc3 83E830   		subl	$48, %eax
 5413 3cc6 4898     		cltq
 5414 3cc8 488B04C5 		movq	nibbles(,%rax,8), %rax
 5414      00000000 
 5415 3cd0 4889C6   		movq	%rax, %rsi
 5416 3cd3 BF000000 		movl	$.LC133, %edi
 5416      00
 5417 3cd8 B8000000 		movl	$0, %eax
 5417      00
 5418 3cdd E8000000 		call	printf
 5418      00
1150:final_with_print.c **** 		flSleep(100);
 5419              		.loc 1 1150 0
 5420 3ce2 BF640000 		movl	$100, %edi
 5420      00
 5421 3ce7 E8000000 		call	flSleep
 5421      00
 5422              	.L254:
 5423              	.LBE46:
1151:final_with_print.c **** 	}
1152:final_with_print.c **** 
1153:final_with_print.c **** 	if ( queryOpt->count ) {
 5424              		.loc 1 1153 0
 5425 3cec 488B8540 		movq	-3008(%rbp), %rax
 5425      F4FFFF
 5426 3cf3 8B4060   		movl	96(%rax), %eax
 5427 3cf6 85C0     		testl	%eax, %eax
 5428 3cf8 0F844D01 		je	.L256
 5428      0000
1154:final_with_print.c **** 		if ( isNeroCapable ) {
 5429              		.loc 1 1154 0
 5430 3cfe 80BDADF2 		cmpb	$0, -3411(%rbp)
 5430      FFFF00
 5431 3d05 0F841101 		je	.L257
 5431      0000
1155:final_with_print.c **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 5432              		.loc 1 1155 0
 5433 3d0b 488B85E0 		movq	-3104(%rbp), %rax
 5433      F3FFFF
 5434 3d12 488D95E8 		leaq	-3096(%rbp), %rdx
 5434      F3FFFF
 5435 3d19 BE000000 		movl	$0, %esi
 5435      00
 5436 3d1e 4889C7   		movq	%rax, %rdi
 5437 3d21 E8000000 		call	flSelectConduit
 5437      00
 5438 3d26 8985BCF2 		movl	%eax, -3396(%rbp)
 5438      FFFF
1156:final_with_print.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5439              		.loc 1 1156 0
 5440 3d2c 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5440      FFFF00
 5441 3d33 740F     		je	.L258
 5442              		.loc 1 1156 0 is_stmt 0 discriminator 1
 5443 3d35 C785B8F2 		movl	$1, -3400(%rbp)
 5443      FFFF0100 
 5443      0000
 5444 3d3f E99C4100 		jmp	.L230
 5444      00
 5445              	.L258:
1157:final_with_print.c **** 			fStatus = jtagScanChain(handle, queryOpt->sval[0], &numDevices, scanChain, 16, &error);
 5446              		.loc 1 1157 0 is_stmt 1
 5447 3d44 488B8540 		movq	-3008(%rbp), %rax
 5447      F4FFFF
 5448 3d4b 488B4068 		movq	104(%rax), %rax
 5449 3d4f 488B30   		movq	(%rax), %rsi
 5450 3d52 488B85E0 		movq	-3104(%rbp), %rax
 5450      F3FFFF
 5451 3d59 488DBDE8 		leaq	-3096(%rbp), %rdi
 5451      F3FFFF
 5452 3d60 488D8D90 		leaq	-2672(%rbp), %rcx
 5452      F5FFFF
 5453 3d67 488D95B0 		leaq	-3408(%rbp), %rdx
 5453      F2FFFF
 5454 3d6e 4989F9   		movq	%rdi, %r9
 5455 3d71 41B81000 		movl	$16, %r8d
 5455      0000
 5456 3d77 4889C7   		movq	%rax, %rdi
 5457 3d7a E8000000 		call	jtagScanChain
 5457      00
 5458 3d7f 8985BCF2 		movl	%eax, -3396(%rbp)
 5458      FFFF
1158:final_with_print.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5459              		.loc 1 1158 0
 5460 3d85 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5460      FFFF00
 5461 3d8c 740F     		je	.L259
 5462              		.loc 1 1158 0 is_stmt 0 discriminator 1
 5463 3d8e C785B8F2 		movl	$1, -3400(%rbp)
 5463      FFFF0100 
 5463      0000
 5464 3d98 E9434100 		jmp	.L230
 5464      00
 5465              	.L259:
1159:final_with_print.c **** 			if ( numDevices ) {
 5466              		.loc 1 1159 0 is_stmt 1
 5467 3d9d 8B85B0F2 		movl	-3408(%rbp), %eax
 5467      FFFF
 5468 3da3 85C0     		testl	%eax, %eax
 5469 3da5 745A     		je	.L260
1160:final_with_print.c **** 				printf("The FPGALink device at %s scanned its JTAG chain, yielding:\n", vp);
 5470              		.loc 1 1160 0
 5471 3da7 488B85B8 		movq	-2888(%rbp), %rax
 5471      F4FFFF
 5472 3dae 4889C6   		movq	%rax, %rsi
 5473 3db1 BF000000 		movl	$.LC134, %edi
 5473      00
 5474 3db6 B8000000 		movl	$0, %eax
 5474      00
 5475 3dbb E8000000 		call	printf
 5475      00
1161:final_with_print.c **** 				for ( i = 0; i < numDevices; i++ ) {
 5476              		.loc 1 1161 0
 5477 3dc0 C785C0F2 		movl	$0, -3392(%rbp)
 5477      FFFF0000 
 5477      0000
 5478 3dca EB25     		jmp	.L261
 5479              	.L262:
1162:final_with_print.c **** 					printf("  0x%08X\n", scanChain[i]);
 5480              		.loc 1 1162 0 discriminator 3
 5481 3dcc 8B85C0F2 		movl	-3392(%rbp), %eax
 5481      FFFF
 5482 3dd2 8B848590 		movl	-2672(%rbp,%rax,4), %eax
 5482      F5FFFF
 5483 3dd9 89C6     		movl	%eax, %esi
 5484 3ddb BF000000 		movl	$.LC135, %edi
 5484      00
 5485 3de0 B8000000 		movl	$0, %eax
 5485      00
 5486 3de5 E8000000 		call	printf
 5486      00
1161:final_with_print.c **** 				for ( i = 0; i < numDevices; i++ ) {
 5487              		.loc 1 1161 0 discriminator 3
 5488 3dea 8385C0F2 		addl	$1, -3392(%rbp)
 5488      FFFF01
 5489              	.L261:
1161:final_with_print.c **** 				for ( i = 0; i < numDevices; i++ ) {
 5490              		.loc 1 1161 0 is_stmt 0 discriminator 1
 5491 3df1 8B85B0F2 		movl	-3408(%rbp), %eax
 5491      FFFF
 5492 3df7 3985C0F2 		cmpl	%eax, -3392(%rbp)
 5492      FFFF
 5493 3dfd 72CD     		jb	.L262
 5494 3dff EB4A     		jmp	.L256
 5495              	.L260:
1163:final_with_print.c **** 				}
1164:final_with_print.c **** 			} else {
1165:final_with_print.c **** 				printf("The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\
 5496              		.loc 1 1165 0 is_stmt 1
 5497 3e01 488B85B8 		movq	-2888(%rbp), %rax
 5497      F4FFFF
 5498 3e08 4889C6   		movq	%rax, %rsi
 5499 3e0b BF000000 		movl	$.LC136, %edi
 5499      00
 5500 3e10 B8000000 		movl	$0, %eax
 5500      00
 5501 3e15 E8000000 		call	printf
 5501      00
 5502 3e1a EB2F     		jmp	.L256
 5503              	.L257:
1166:final_with_print.c **** 			}
1167:final_with_print.c **** 		} else {
1168:final_with_print.c **** 			fprintf(stderr, "JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n
 5504              		.loc 1 1168 0
 5505 3e1c 488B0500 		movq	stderr(%rip), %rax
 5505      000000
 5506 3e23 488B95B8 		movq	-2888(%rbp), %rdx
 5506      F4FFFF
 5507 3e2a BE000000 		movl	$.LC137, %esi
 5507      00
 5508 3e2f 4889C7   		movq	%rax, %rdi
 5509 3e32 B8000000 		movl	$0, %eax
 5509      00
 5510 3e37 E8000000 		call	fprintf
 5510      00
1169:final_with_print.c **** 			FAIL(FLP_ARGS, cleanup);
 5511              		.loc 1 1169 0
 5512 3e3c C785B8F2 		movl	$12, -3400(%rbp)
 5512      FFFF0C00 
 5512      0000
 5513 3e46 E9954000 		jmp	.L230
 5513      00
 5514              	.L256:
1170:final_with_print.c **** 		}
1171:final_with_print.c **** 	}
1172:final_with_print.c **** 
1173:final_with_print.c **** 	if ( progOpt->count ) {
 5515              		.loc 1 1173 0
 5516 3e4b 488B8548 		movq	-3000(%rbp), %rax
 5516      F4FFFF
 5517 3e52 8B4060   		movl	96(%rax), %eax
 5518 3e55 85C0     		testl	%eax, %eax
 5519 3e57 0F84C900 		je	.L264
 5519      0000
1174:final_with_print.c **** 		printf("Programming device...\n");
 5520              		.loc 1 1174 0
 5521 3e5d BF000000 		movl	$.LC138, %edi
 5521      00
 5522 3e62 E8000000 		call	puts
 5522      00
1175:final_with_print.c **** 		if ( isNeroCapable ) {
 5523              		.loc 1 1175 0
 5524 3e67 80BDADF2 		cmpb	$0, -3411(%rbp)
 5524      FFFF00
 5525 3e6e 0F848300 		je	.L265
 5525      0000
1176:final_with_print.c **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 5526              		.loc 1 1176 0
 5527 3e74 488B85E0 		movq	-3104(%rbp), %rax
 5527      F3FFFF
 5528 3e7b 488D95E8 		leaq	-3096(%rbp), %rdx
 5528      F3FFFF
 5529 3e82 BE000000 		movl	$0, %esi
 5529      00
 5530 3e87 4889C7   		movq	%rax, %rdi
 5531 3e8a E8000000 		call	flSelectConduit
 5531      00
 5532 3e8f 8985BCF2 		movl	%eax, -3396(%rbp)
 5532      FFFF
1177:final_with_print.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5533              		.loc 1 1177 0
 5534 3e95 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5534      FFFF00
 5535 3e9c 740F     		je	.L266
 5536              		.loc 1 1177 0 is_stmt 0 discriminator 1
 5537 3e9e C785B8F2 		movl	$1, -3400(%rbp)
 5537      FFFF0100 
 5537      0000
 5538 3ea8 E9334000 		jmp	.L230
 5538      00
 5539              	.L266:
1178:final_with_print.c **** 			fStatus = flProgram(handle, progOpt->sval[0], NULL, &error);
 5540              		.loc 1 1178 0 is_stmt 1
 5541 3ead 488B8548 		movq	-3000(%rbp), %rax
 5541      F4FFFF
 5542 3eb4 488B4068 		movq	104(%rax), %rax
 5543 3eb8 488B30   		movq	(%rax), %rsi
 5544 3ebb 488B85E0 		movq	-3104(%rbp), %rax
 5544      F3FFFF
 5545 3ec2 488D95E8 		leaq	-3096(%rbp), %rdx
 5545      F3FFFF
 5546 3ec9 4889D1   		movq	%rdx, %rcx
 5547 3ecc BA000000 		movl	$0, %edx
 5547      00
 5548 3ed1 4889C7   		movq	%rax, %rdi
 5549 3ed4 E8000000 		call	flProgram
 5549      00
 5550 3ed9 8985BCF2 		movl	%eax, -3396(%rbp)
 5550      FFFF
1179:final_with_print.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5551              		.loc 1 1179 0
 5552 3edf 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5552      FFFF00
 5553 3ee6 743E     		je	.L264
 5554              		.loc 1 1179 0 is_stmt 0 discriminator 1
 5555 3ee8 C785B8F2 		movl	$1, -3400(%rbp)
 5555      FFFF0100 
 5555      0000
 5556 3ef2 E9E93F00 		jmp	.L230
 5556      00
 5557              	.L265:
1180:final_with_print.c **** 		} else {
1181:final_with_print.c **** 			fprintf(stderr, "Program operation requested but device at %s does not support NeroProg\n", vp);
 5558              		.loc 1 1181 0 is_stmt 1
 5559 3ef7 488B0500 		movq	stderr(%rip), %rax
 5559      000000
 5560 3efe 488B95B8 		movq	-2888(%rbp), %rdx
 5560      F4FFFF
 5561 3f05 BE000000 		movl	$.LC139, %esi
 5561      00
 5562 3f0a 4889C7   		movq	%rax, %rdi
 5563 3f0d B8000000 		movl	$0, %eax
 5563      00
 5564 3f12 E8000000 		call	fprintf
 5564      00
1182:final_with_print.c **** 			FAIL(FLP_ARGS, cleanup);
 5565              		.loc 1 1182 0
 5566 3f17 C785B8F2 		movl	$12, -3400(%rbp)
 5566      FFFF0C00 
 5566      0000
 5567 3f21 E9BA3F00 		jmp	.L230
 5567      00
 5568              	.L264:
1183:final_with_print.c **** 		}
1184:final_with_print.c **** 	}
1185:final_with_print.c **** 
1186:final_with_print.c **** 	if ( benOpt->count ) {
 5569              		.loc 1 1186 0
 5570 3f26 488B8570 		movq	-2960(%rbp), %rax
 5570      F4FFFF
 5571 3f2d 8B4060   		movl	96(%rax), %eax
 5572 3f30 85C0     		testl	%eax, %eax
 5573 3f32 7407     		je	.L267
1187:final_with_print.c **** 		enableBenchmarking = true;
 5574              		.loc 1 1187 0
 5575 3f34 C6050000 		movb	$1, enableBenchmarking(%rip)
 5575      000001
 5576              	.L267:
1188:final_with_print.c **** 	}
1189:final_with_print.c **** 	
1190:final_with_print.c **** 	if ( actOpt->count ) {
 5577              		.loc 1 1190 0
 5578 3f3b 488B8558 		movq	-2984(%rbp), %rax
 5578      F4FFFF
 5579 3f42 8B4060   		movl	96(%rax), %eax
 5580 3f45 85C0     		testl	%eax, %eax
 5581 3f47 0F845201 		je	.L268
 5581      0000
1191:final_with_print.c **** 		printf("Executing CommFPGA actions on FPGALink device %s...\n", vp);
 5582              		.loc 1 1191 0
 5583 3f4d 488B85B8 		movq	-2888(%rbp), %rax
 5583      F4FFFF
 5584 3f54 4889C6   		movq	%rax, %rsi
 5585 3f57 BF000000 		movl	$.LC140, %edi
 5585      00
 5586 3f5c B8000000 		movl	$0, %eax
 5586      00
 5587 3f61 E8000000 		call	printf
 5587      00
1192:final_with_print.c **** 		if ( isCommCapable ) {
 5588              		.loc 1 1192 0
 5589 3f66 80BDAEF2 		cmpb	$0, -3410(%rbp)
 5589      FFFF00
 5590 3f6d 0F84FD00 		je	.L269
 5590      0000
 5591              	.LBB47:
1193:final_with_print.c **** 			uint8 isRunning;
1194:final_with_print.c **** 			fStatus = flSelectConduit(handle, conduit, &error);
 5592              		.loc 1 1194 0
 5593 3f73 0FB68DAB 		movzbl	-3413(%rbp), %ecx
 5593      F2FFFF
 5594 3f7a 488B85E0 		movq	-3104(%rbp), %rax
 5594      F3FFFF
 5595 3f81 488D95E8 		leaq	-3096(%rbp), %rdx
 5595      F3FFFF
 5596 3f88 89CE     		movl	%ecx, %esi
 5597 3f8a 4889C7   		movq	%rax, %rdi
 5598 3f8d E8000000 		call	flSelectConduit
 5598      00
 5599 3f92 8985BCF2 		movl	%eax, -3396(%rbp)
 5599      FFFF
1195:final_with_print.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5600              		.loc 1 1195 0
 5601 3f98 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5601      FFFF00
 5602 3f9f 740F     		je	.L270
 5603              		.loc 1 1195 0 is_stmt 0 discriminator 1
 5604 3fa1 C785B8F2 		movl	$1, -3400(%rbp)
 5604      FFFF0100 
 5604      0000
 5605 3fab E9303F00 		jmp	.L230
 5605      00
 5606              	.L270:
1196:final_with_print.c **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 5607              		.loc 1 1196 0 is_stmt 1
 5608 3fb0 488B85E0 		movq	-3104(%rbp), %rax
 5608      F3FFFF
 5609 3fb7 488D95E8 		leaq	-3096(%rbp), %rdx
 5609      F3FFFF
 5610 3fbe 488D8D10 		leaq	-3056(%rbp), %rcx
 5610      F4FFFF
 5611 3fc5 4889CE   		movq	%rcx, %rsi
 5612 3fc8 4889C7   		movq	%rax, %rdi
 5613 3fcb E8000000 		call	flIsFPGARunning
 5613      00
 5614 3fd0 8985BCF2 		movl	%eax, -3396(%rbp)
 5614      FFFF
1197:final_with_print.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5615              		.loc 1 1197 0
 5616 3fd6 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5616      FFFF00
 5617 3fdd 740F     		je	.L272
 5618              		.loc 1 1197 0 is_stmt 0 discriminator 1
 5619 3fdf C785B8F2 		movl	$1, -3400(%rbp)
 5619      FFFF0100 
 5619      0000
 5620 3fe9 E9F23E00 		jmp	.L230
 5620      00
 5621              	.L272:
1198:final_with_print.c **** 			if ( isRunning ) {
 5622              		.loc 1 1198 0 is_stmt 1
 5623 3fee 0FB68510 		movzbl	-3056(%rbp), %eax
 5623      F4FFFF
 5624 3ff5 84C0     		testb	%al, %al
 5625 3ff7 7447     		je	.L273
1199:final_with_print.c **** 				pStatus = parseLine(handle, actOpt->sval[0], &error);
 5626              		.loc 1 1199 0
 5627 3ff9 488B8558 		movq	-2984(%rbp), %rax
 5627      F4FFFF
 5628 4000 488B4068 		movq	104(%rax), %rax
 5629 4004 488B08   		movq	(%rax), %rcx
 5630 4007 488B85E0 		movq	-3104(%rbp), %rax
 5630      F3FFFF
 5631 400e 488D95E8 		leaq	-3096(%rbp), %rdx
 5631      F3FFFF
 5632 4015 4889CE   		movq	%rcx, %rsi
 5633 4018 4889C7   		movq	%rax, %rdi
 5634 401b E88EDFFF 		call	parseLine
 5634      FF
 5635 4020 8985A8F3 		movl	%eax, -3160(%rbp)
 5635      FFFF
1200:final_with_print.c **** 				CHECK_STATUS(pStatus, pStatus, cleanup);
 5636              		.loc 1 1200 0
 5637 4026 83BDA8F3 		cmpl	$0, -3160(%rbp)
 5637      FFFF00
 5638 402d 7470     		je	.L268
 5639              		.loc 1 1200 0 is_stmt 0 discriminator 1
 5640 402f 8B85A8F3 		movl	-3160(%rbp), %eax
 5640      FFFF
 5641 4035 8985B8F2 		movl	%eax, -3400(%rbp)
 5641      FFFF
 5642 403b E9A03E00 		jmp	.L230
 5642      00
 5643              	.L273:
1201:final_with_print.c **** 			} else {
1202:final_with_print.c **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n",
 5644              		.loc 1 1202 0 is_stmt 1
 5645 4040 488B0500 		movq	stderr(%rip), %rax
 5645      000000
 5646 4047 488B95B8 		movq	-2888(%rbp), %rdx
 5646      F4FFFF
 5647 404e BE000000 		movl	$.LC141, %esi
 5647      00
 5648 4053 4889C7   		movq	%rax, %rdi
 5649 4056 B8000000 		movl	$0, %eax
 5649      00
 5650 405b E8000000 		call	fprintf
 5650      00
1203:final_with_print.c **** 				FAIL(FLP_ARGS, cleanup);
 5651              		.loc 1 1203 0
 5652 4060 C785B8F2 		movl	$12, -3400(%rbp)
 5652      FFFF0C00 
 5652      0000
 5653 406a 90       		nop
 5654 406b E9703E00 		jmp	.L230
 5654      00
 5655              	.L269:
 5656              	.LBE47:
1204:final_with_print.c **** 			}
1205:final_with_print.c **** 		} else {
1206:final_with_print.c **** 			fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 5657              		.loc 1 1206 0
 5658 4070 488B0500 		movq	stderr(%rip), %rax
 5658      000000
 5659 4077 488B95B8 		movq	-2888(%rbp), %rdx
 5659      F4FFFF
 5660 407e BE000000 		movl	$.LC142, %esi
 5660      00
 5661 4083 4889C7   		movq	%rax, %rdi
 5662 4086 B8000000 		movl	$0, %eax
 5662      00
 5663 408b E8000000 		call	fprintf
 5663      00
1207:final_with_print.c **** 			FAIL(FLP_ARGS, cleanup);
 5664              		.loc 1 1207 0
 5665 4090 C785B8F2 		movl	$12, -3400(%rbp)
 5665      FFFF0C00 
 5665      0000
 5666 409a E9413E00 		jmp	.L230
 5666      00
 5667              	.L268:
1208:final_with_print.c **** 		}
1209:final_with_print.c **** 	}
1210:final_with_print.c **** 
1211:final_with_print.c **** 	if ( dumpOpt->count ) {
 5668              		.loc 1 1211 0
 5669 409f 488B8580 		movq	-2944(%rbp), %rax
 5669      F4FFFF
 5670 40a6 8B4060   		movl	96(%rax), %eax
 5671 40a9 85C0     		testl	%eax, %eax
 5672 40ab 0F84D002 		je	.L275
 5672      0000
 5673              	.LBB48:
1212:final_with_print.c **** 		const char *fileName;
1213:final_with_print.c **** 		unsigned long chan = strtoul(dumpOpt->sval[0], (char**)&fileName, 10);
 5674              		.loc 1 1213 0
 5675 40b1 488B8580 		movq	-2944(%rbp), %rax
 5675      F4FFFF
 5676 40b8 488B4068 		movq	104(%rax), %rax
 5677 40bc 488B00   		movq	(%rax), %rax
 5678 40bf 488D8D08 		leaq	-3064(%rbp), %rcx
 5678      F4FFFF
 5679 40c6 BA0A0000 		movl	$10, %edx
 5679      00
 5680 40cb 4889CE   		movq	%rcx, %rsi
 5681 40ce 4889C7   		movq	%rax, %rdi
 5682 40d1 E8000000 		call	strtoul
 5682      00
 5683 40d6 488985C8 		movq	%rax, -2872(%rbp)
 5683      F4FFFF
1214:final_with_print.c **** 		FILE *file = NULL;
 5684              		.loc 1 1214 0
 5685 40dd 48C785D0 		movq	$0, -2864(%rbp)
 5685      F4FFFF00 
 5685      000000
1215:final_with_print.c **** 		const uint8 *recvData;
1216:final_with_print.c **** 		uint32 actualLength;
1217:final_with_print.c **** 		if ( *fileName != ':' ) {
 5686              		.loc 1 1217 0
 5687 40e8 488B8508 		movq	-3064(%rbp), %rax
 5687      F4FFFF
 5688 40ef 0FB600   		movzbl	(%rax), %eax
 5689 40f2 3C3A     		cmpb	$58, %al
 5690 40f4 742F     		je	.L276
1218:final_with_print.c **** 			fprintf(stderr, "%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n", progName);
 5691              		.loc 1 1218 0
 5692 40f6 488B0500 		movq	stderr(%rip), %rax
 5692      000000
 5693 40fd 488B95A8 		movq	-2904(%rbp), %rdx
 5693      F4FFFF
 5694 4104 BE000000 		movl	$.LC143, %esi
 5694      00
 5695 4109 4889C7   		movq	%rax, %rdi
 5696 410c B8000000 		movl	$0, %eax
 5696      00
 5697 4111 E8000000 		call	fprintf
 5697      00
1219:final_with_print.c **** 			FAIL(FLP_ARGS, cleanup);
 5698              		.loc 1 1219 0
 5699 4116 C785B8F2 		movl	$12, -3400(%rbp)
 5699      FFFF0C00 
 5699      0000
 5700 4120 E9BB3D00 		jmp	.L230
 5700      00
 5701              	.L276:
1220:final_with_print.c **** 		}
1221:final_with_print.c **** 		fileName++;
 5702              		.loc 1 1221 0
 5703 4125 488B8508 		movq	-3064(%rbp), %rax
 5703      F4FFFF
 5704 412c 4883C001 		addq	$1, %rax
 5705 4130 48898508 		movq	%rax, -3064(%rbp)
 5705      F4FFFF
1222:final_with_print.c **** 		printf("Copying from channel %lu to %s", chan, fileName);
 5706              		.loc 1 1222 0
 5707 4137 488B9508 		movq	-3064(%rbp), %rdx
 5707      F4FFFF
 5708 413e 488B85C8 		movq	-2872(%rbp), %rax
 5708      F4FFFF
 5709 4145 4889C6   		movq	%rax, %rsi
 5710 4148 BF000000 		movl	$.LC144, %edi
 5710      00
 5711 414d B8000000 		movl	$0, %eax
 5711      00
 5712 4152 E8000000 		call	printf
 5712      00
1223:final_with_print.c **** 		file = fopen(fileName, "wb");
 5713              		.loc 1 1223 0
 5714 4157 488B8508 		movq	-3064(%rbp), %rax
 5714      F4FFFF
 5715 415e BE000000 		movl	$.LC28, %esi
 5715      00
 5716 4163 4889C7   		movq	%rax, %rdi
 5717 4166 E8000000 		call	fopen
 5717      00
 5718 416b 488985D0 		movq	%rax, -2864(%rbp)
 5718      F4FFFF
1224:final_with_print.c **** 		CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 5719              		.loc 1 1224 0
 5720 4172 4883BDD0 		cmpq	$0, -2864(%rbp)
 5720      F4FFFF00 
 5721 417a 750F     		jne	.L278
 5722              		.loc 1 1224 0 is_stmt 0 discriminator 1
 5723 417c C785B8F2 		movl	$11, -3400(%rbp)
 5723      FFFF0B00 
 5723      0000
 5724 4186 E9553D00 		jmp	.L230
 5724      00
 5725              	.L278:
1225:final_with_print.c **** 		sigRegisterHandler();
 5726              		.loc 1 1225 0 is_stmt 1
 5727 418b E8000000 		call	sigRegisterHandler
 5727      00
1226:final_with_print.c **** 		fStatus = flSelectConduit(handle, conduit, &error);
 5728              		.loc 1 1226 0
 5729 4190 0FB68DAB 		movzbl	-3413(%rbp), %ecx
 5729      F2FFFF
 5730 4197 488B85E0 		movq	-3104(%rbp), %rax
 5730      F3FFFF
 5731 419e 488D95E8 		leaq	-3096(%rbp), %rdx
 5731      F3FFFF
 5732 41a5 89CE     		movl	%ecx, %esi
 5733 41a7 4889C7   		movq	%rax, %rdi
 5734 41aa E8000000 		call	flSelectConduit
 5734      00
 5735 41af 8985BCF2 		movl	%eax, -3396(%rbp)
 5735      FFFF
1227:final_with_print.c **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5736              		.loc 1 1227 0
 5737 41b5 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5737      FFFF00
 5738 41bc 740F     		je	.L279
 5739              		.loc 1 1227 0 is_stmt 0 discriminator 1
 5740 41be C785B8F2 		movl	$1, -3400(%rbp)
 5740      FFFF0100 
 5740      0000
 5741 41c8 E9133D00 		jmp	.L230
 5741      00
 5742              	.L279:
1228:final_with_print.c **** 		fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 5743              		.loc 1 1228 0 is_stmt 1
 5744 41cd 488B85C8 		movq	-2872(%rbp), %rax
 5744      F4FFFF
 5745 41d4 0FB6F0   		movzbl	%al, %esi
 5746 41d7 488B85E0 		movq	-3104(%rbp), %rax
 5746      F3FFFF
 5747 41de 488D95E8 		leaq	-3096(%rbp), %rdx
 5747      F3FFFF
 5748 41e5 4989D0   		movq	%rdx, %r8
 5749 41e8 B9000000 		movl	$0, %ecx
 5749      00
 5750 41ed BA005800 		movl	$22528, %edx
 5750      00
 5751 41f2 4889C7   		movq	%rax, %rdi
 5752 41f5 E8000000 		call	flReadChannelAsyncSubmit
 5752      00
 5753 41fa 8985BCF2 		movl	%eax, -3396(%rbp)
 5753      FFFF
1229:final_with_print.c **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5754              		.loc 1 1229 0
 5755 4200 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5755      FFFF00
 5756 4207 740F     		je	.L280
 5757              		.loc 1 1229 0 is_stmt 0 discriminator 1
 5758 4209 C785B8F2 		movl	$1, -3400(%rbp)
 5758      FFFF0100 
 5758      0000
 5759 4213 E9C83C00 		jmp	.L230
 5759      00
 5760              	.L280:
1230:final_with_print.c **** 		do {
1231:final_with_print.c **** 			fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 5761              		.loc 1 1231 0 is_stmt 1
 5762 4218 488B85C8 		movq	-2872(%rbp), %rax
 5762      F4FFFF
 5763 421f 0FB6F0   		movzbl	%al, %esi
 5764 4222 488B85E0 		movq	-3104(%rbp), %rax
 5764      F3FFFF
 5765 4229 488D95E8 		leaq	-3096(%rbp), %rdx
 5765      F3FFFF
 5766 4230 4989D0   		movq	%rdx, %r8
 5767 4233 B9000000 		movl	$0, %ecx
 5767      00
 5768 4238 BA005800 		movl	$22528, %edx
 5768      00
 5769 423d 4889C7   		movq	%rax, %rdi
 5770 4240 E8000000 		call	flReadChannelAsyncSubmit
 5770      00
 5771 4245 8985BCF2 		movl	%eax, -3396(%rbp)
 5771      FFFF
1232:final_with_print.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5772              		.loc 1 1232 0
 5773 424b 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5773      FFFF00
 5774 4252 740F     		je	.L281
 5775              		.loc 1 1232 0 is_stmt 0 discriminator 1
 5776 4254 C785B8F2 		movl	$1, -3400(%rbp)
 5776      FFFF0100 
 5776      0000
 5777 425e E97D3C00 		jmp	.L230
 5777      00
 5778              	.L281:
1233:final_with_print.c **** 			fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 5779              		.loc 1 1233 0 is_stmt 1
 5780 4263 488B85E0 		movq	-3104(%rbp), %rax
 5780      F3FFFF
 5781 426a 488DBDE8 		leaq	-3096(%rbp), %rdi
 5781      F3FFFF
 5782 4271 488D8D00 		leaq	-3072(%rbp), %rcx
 5782      F4FFFF
 5783 4278 488D9500 		leaq	-3072(%rbp), %rdx
 5783      F4FFFF
 5784 427f 488DB510 		leaq	-3056(%rbp), %rsi
 5784      F4FFFF
 5785 4286 4989F8   		movq	%rdi, %r8
 5786 4289 4889C7   		movq	%rax, %rdi
 5787 428c E8000000 		call	flReadChannelAsyncAwait
 5787      00
 5788 4291 8985BCF2 		movl	%eax, -3396(%rbp)
 5788      FFFF
1234:final_with_print.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5789              		.loc 1 1234 0
 5790 4297 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5790      FFFF00
 5791 429e 740F     		je	.L282
 5792              		.loc 1 1234 0 is_stmt 0 discriminator 1
 5793 42a0 C785B8F2 		movl	$1, -3400(%rbp)
 5793      FFFF0100 
 5793      0000
 5794 42aa E9313C00 		jmp	.L230
 5794      00
 5795              	.L282:
1235:final_with_print.c **** 			fwrite(recvData, 1, actualLength, file);
 5796              		.loc 1 1235 0 is_stmt 1
 5797 42af 8B8500F4 		movl	-3072(%rbp), %eax
 5797      FFFF
 5798 42b5 89C6     		movl	%eax, %esi
 5799 42b7 488B8510 		movq	-3056(%rbp), %rax
 5799      F4FFFF
 5800 42be 488B95D0 		movq	-2864(%rbp), %rdx
 5800      F4FFFF
 5801 42c5 4889D1   		movq	%rdx, %rcx
 5802 42c8 4889F2   		movq	%rsi, %rdx
 5803 42cb BE010000 		movl	$1, %esi
 5803      00
 5804 42d0 4889C7   		movq	%rax, %rdi
 5805 42d3 E8000000 		call	fwrite
 5805      00
1236:final_with_print.c **** 			printf(".");
 5806              		.loc 1 1236 0
 5807 42d8 BF2E0000 		movl	$46, %edi
 5807      00
 5808 42dd E8000000 		call	putchar
 5808      00
1237:final_with_print.c **** 		} while ( !sigIsRaised() );
 5809              		.loc 1 1237 0
 5810 42e2 E8000000 		call	sigIsRaised
 5810      00
 5811 42e7 83F001   		xorl	$1, %eax
 5812 42ea 84C0     		testb	%al, %al
 5813 42ec 0F8526FF 		jne	.L280
 5813      FFFF
1238:final_with_print.c **** 		printf("\nCaught SIGINT, quitting...\n");
 5814              		.loc 1 1238 0
 5815 42f2 BF000000 		movl	$.LC145, %edi
 5815      00
 5816 42f7 E8000000 		call	puts
 5816      00
1239:final_with_print.c **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 5817              		.loc 1 1239 0
 5818 42fc 488B85E0 		movq	-3104(%rbp), %rax
 5818      F3FFFF
 5819 4303 488DBDE8 		leaq	-3096(%rbp), %rdi
 5819      F3FFFF
 5820 430a 488D8D00 		leaq	-3072(%rbp), %rcx
 5820      F4FFFF
 5821 4311 488D9500 		leaq	-3072(%rbp), %rdx
 5821      F4FFFF
 5822 4318 488DB510 		leaq	-3056(%rbp), %rsi
 5822      F4FFFF
 5823 431f 4989F8   		movq	%rdi, %r8
 5824 4322 4889C7   		movq	%rax, %rdi
 5825 4325 E8000000 		call	flReadChannelAsyncAwait
 5825      00
 5826 432a 8985BCF2 		movl	%eax, -3396(%rbp)
 5826      FFFF
1240:final_with_print.c **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5827              		.loc 1 1240 0
 5828 4330 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5828      FFFF00
 5829 4337 7410     		je	.L283
 5830              		.loc 1 1240 0 is_stmt 0 discriminator 1
 5831 4339 C785B8F2 		movl	$1, -3400(%rbp)
 5831      FFFF0100 
 5831      0000
 5832 4343 90       		nop
 5833 4344 E9973B00 		jmp	.L230
 5833      00
 5834              	.L283:
1241:final_with_print.c **** 		fwrite(recvData, 1, actualLength, file);
 5835              		.loc 1 1241 0 is_stmt 1
 5836 4349 8B8500F4 		movl	-3072(%rbp), %eax
 5836      FFFF
 5837 434f 89C6     		movl	%eax, %esi
 5838 4351 488B8510 		movq	-3056(%rbp), %rax
 5838      F4FFFF
 5839 4358 488B95D0 		movq	-2864(%rbp), %rdx
 5839      F4FFFF
 5840 435f 4889D1   		movq	%rdx, %rcx
 5841 4362 4889F2   		movq	%rsi, %rdx
 5842 4365 BE010000 		movl	$1, %esi
 5842      00
 5843 436a 4889C7   		movq	%rax, %rdi
 5844 436d E8000000 		call	fwrite
 5844      00
1242:final_with_print.c **** 		fclose(file);
 5845              		.loc 1 1242 0
 5846 4372 488B85D0 		movq	-2864(%rbp), %rax
 5846      F4FFFF
 5847 4379 4889C7   		movq	%rax, %rdi
 5848 437c E8000000 		call	fclose
 5848      00
 5849              	.L275:
 5850              	.LBE48:
1243:final_with_print.c **** 	}
1244:final_with_print.c **** 
1245:final_with_print.c **** 	if ( shellOpt->count ) 
 5851              		.loc 1 1245 0
 5852 4381 488B8568 		movq	-2968(%rbp), %rax
 5852      F4FFFF
 5853 4388 8B4060   		movl	96(%rax), %eax
 5854 438b 85C0     		testl	%eax, %eax
 5855 438d 0F84CB01 		je	.L284
 5855      0000
1246:final_with_print.c **** 	{
1247:final_with_print.c **** 		printf("\nEntering CommFPGA command-line mode:\n");
 5856              		.loc 1 1247 0
 5857 4393 BF000000 		movl	$.LC146, %edi
 5857      00
 5858 4398 E8000000 		call	puts
 5858      00
1248:final_with_print.c **** 		if ( isCommCapable ) {
 5859              		.loc 1 1248 0
 5860 439d 80BDAEF2 		cmpb	$0, -3410(%rbp)
 5860      FFFF00
 5861 43a4 0F848501 		je	.L285
 5861      0000
 5862              	.LBB49:
1249:final_with_print.c **** 			uint8 isRunning;
1250:final_with_print.c **** 			fStatus = flSelectConduit(handle, conduit, &error);
 5863              		.loc 1 1250 0
 5864 43aa 0FB68DAB 		movzbl	-3413(%rbp), %ecx
 5864      F2FFFF
 5865 43b1 488B85E0 		movq	-3104(%rbp), %rax
 5865      F3FFFF
 5866 43b8 488D95E8 		leaq	-3096(%rbp), %rdx
 5866      F3FFFF
 5867 43bf 89CE     		movl	%ecx, %esi
 5868 43c1 4889C7   		movq	%rax, %rdi
 5869 43c4 E8000000 		call	flSelectConduit
 5869      00
 5870 43c9 8985BCF2 		movl	%eax, -3396(%rbp)
 5870      FFFF
1251:final_with_print.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5871              		.loc 1 1251 0
 5872 43cf 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5872      FFFF00
 5873 43d6 740F     		je	.L286
 5874              		.loc 1 1251 0 is_stmt 0 discriminator 1
 5875 43d8 C785B8F2 		movl	$1, -3400(%rbp)
 5875      FFFF0100 
 5875      0000
 5876 43e2 E9F93A00 		jmp	.L230
 5876      00
 5877              	.L286:
1252:final_with_print.c **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 5878              		.loc 1 1252 0 is_stmt 1
 5879 43e7 488B85E0 		movq	-3104(%rbp), %rax
 5879      F3FFFF
 5880 43ee 488D95E8 		leaq	-3096(%rbp), %rdx
 5880      F3FFFF
 5881 43f5 488D8D10 		leaq	-3056(%rbp), %rcx
 5881      F4FFFF
 5882 43fc 4889CE   		movq	%rcx, %rsi
 5883 43ff 4889C7   		movq	%rax, %rdi
 5884 4402 E8000000 		call	flIsFPGARunning
 5884      00
 5885 4407 8985BCF2 		movl	%eax, -3396(%rbp)
 5885      FFFF
1253:final_with_print.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5886              		.loc 1 1253 0
 5887 440d 83BDBCF2 		cmpl	$0, -3396(%rbp)
 5887      FFFF00
 5888 4414 740F     		je	.L288
 5889              		.loc 1 1253 0 is_stmt 0 discriminator 1
 5890 4416 C785B8F2 		movl	$1, -3400(%rbp)
 5890      FFFF0100 
 5890      0000
 5891 4420 E9BB3A00 		jmp	.L230
 5891      00
 5892              	.L288:
1254:final_with_print.c **** 			if ( isRunning ) {
 5893              		.loc 1 1254 0 is_stmt 1
 5894 4425 0FB68510 		movzbl	-3056(%rbp), %eax
 5894      F4FFFF
 5895 442c 84C0     		testb	%al, %al
 5896 442e 0F84CB00 		je	.L289
 5896      0000
 5897              	.L291:
1255:final_with_print.c **** 				do {
1256:final_with_print.c **** 					do {
1257:final_with_print.c **** 						line = readline("> ");
 5898              		.loc 1 1257 0 discriminator 2
 5899 4434 BF000000 		movl	$.LC147, %edi
 5899      00
 5900 4439 E8000000 		call	readline
 5900      00
 5901 443e 48898518 		movq	%rax, -3048(%rbp)
 5901      F4FFFF
1258:final_with_print.c **** 					} while ( line && !line[0] );
 5902              		.loc 1 1258 0 discriminator 2
 5903 4445 4883BD18 		cmpq	$0, -3048(%rbp)
 5903      F4FFFF00 
 5904 444d 740E     		je	.L290
 5905              		.loc 1 1258 0 is_stmt 0 discriminator 1
 5906 444f 488B8518 		movq	-3048(%rbp), %rax
 5906      F4FFFF
 5907 4456 0FB600   		movzbl	(%rax), %eax
 5908 4459 84C0     		testb	%al, %al
 5909 445b 74D7     		je	.L291
 5910              	.L290:
1259:final_with_print.c **** 					if ( line && line[0] && line[0] != 'q' ) {
 5911              		.loc 1 1259 0 is_stmt 1
 5912 445d 4883BD18 		cmpq	$0, -3048(%rbp)
 5912      F4FFFF00 
 5913 4465 747A     		je	.L292
 5914              		.loc 1 1259 0 is_stmt 0 discriminator 1
 5915 4467 488B8518 		movq	-3048(%rbp), %rax
 5915      F4FFFF
 5916 446e 0FB600   		movzbl	(%rax), %eax
 5917 4471 84C0     		testb	%al, %al
 5918 4473 746C     		je	.L292
 5919              		.loc 1 1259 0 discriminator 2
 5920 4475 488B8518 		movq	-3048(%rbp), %rax
 5920      F4FFFF
 5921 447c 0FB600   		movzbl	(%rax), %eax
 5922 447f 3C71     		cmpb	$113, %al
 5923 4481 745E     		je	.L292
1260:final_with_print.c **** 						add_history(line);
 5924              		.loc 1 1260 0 is_stmt 1
 5925 4483 488B8518 		movq	-3048(%rbp), %rax
 5925      F4FFFF
 5926 448a 4889C7   		movq	%rax, %rdi
 5927 448d E8000000 		call	add_history
 5927      00
1261:final_with_print.c **** 						pStatus = parseLine(handle, line, &error);
 5928              		.loc 1 1261 0
 5929 4492 488B85E0 		movq	-3104(%rbp), %rax
 5929      F3FFFF
 5930 4499 488D95E8 		leaq	-3096(%rbp), %rdx
 5930      F3FFFF
 5931 44a0 488B8D18 		movq	-3048(%rbp), %rcx
 5931      F4FFFF
 5932 44a7 4889CE   		movq	%rcx, %rsi
 5933 44aa 4889C7   		movq	%rax, %rdi
 5934 44ad E8FCDAFF 		call	parseLine
 5934      FF
 5935 44b2 8985A8F3 		movl	%eax, -3160(%rbp)
 5935      FFFF
1262:final_with_print.c **** 						CHECK_STATUS(pStatus, pStatus, cleanup);
 5936              		.loc 1 1262 0
 5937 44b8 83BDA8F3 		cmpl	$0, -3160(%rbp)
 5937      FFFF00
 5938 44bf 7411     		je	.L293
 5939              		.loc 1 1262 0 is_stmt 0 discriminator 1
 5940 44c1 8B85A8F3 		movl	-3160(%rbp), %eax
 5940      FFFF
 5941 44c7 8985B8F2 		movl	%eax, -3400(%rbp)
 5941      FFFF
 5942 44cd E90E3A00 		jmp	.L230
 5942      00
 5943              	.L293:
1263:final_with_print.c **** 						free((void*)line);
 5944              		.loc 1 1263 0 is_stmt 1
 5945 44d2 488B8518 		movq	-3048(%rbp), %rax
 5945      F4FFFF
 5946 44d9 4889C7   		movq	%rax, %rdi
 5947 44dc E8000000 		call	free
 5947      00
 5948              	.L292:
1264:final_with_print.c **** 					}
1265:final_with_print.c **** 				} while ( line && line[0] != 'q' );
 5949              		.loc 1 1265 0
 5950 44e1 4883BD18 		cmpq	$0, -3048(%rbp)
 5950      F4FFFF00 
 5951 44e9 7473     		je	.L284
 5952              		.loc 1 1265 0 is_stmt 0 discriminator 1
 5953 44eb 488B8518 		movq	-3048(%rbp), %rax
 5953      F4FFFF
 5954 44f2 0FB600   		movzbl	(%rax), %eax
 5955 44f5 3C71     		cmpb	$113, %al
 5956 44f7 0F8537FF 		jne	.L291
 5956      FFFF
 5957 44fd EB5F     		jmp	.L284
 5958              	.L289:
1266:final_with_print.c **** 			} else {
1267:final_with_print.c **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n", vp
 5959              		.loc 1 1267 0 is_stmt 1
 5960 44ff 488B0500 		movq	stderr(%rip), %rax
 5960      000000
 5961 4506 488B95B8 		movq	-2888(%rbp), %rdx
 5961      F4FFFF
 5962 450d BE000000 		movl	$.LC148, %esi
 5962      00
 5963 4512 4889C7   		movq	%rax, %rdi
 5964 4515 B8000000 		movl	$0, %eax
 5964      00
 5965 451a E8000000 		call	fprintf
 5965      00
1268:final_with_print.c **** 				FAIL(FLP_ARGS, cleanup);
 5966              		.loc 1 1268 0
 5967 451f C785B8F2 		movl	$12, -3400(%rbp)
 5967      FFFF0C00 
 5967      0000
 5968 4529 90       		nop
 5969 452a E9B13900 		jmp	.L230
 5969      00
 5970              	.L285:
 5971              	.LBE49:
1269:final_with_print.c **** 			}
1270:final_with_print.c **** 		} else {
1271:final_with_print.c **** 			fprintf(stderr, "Shell requested but device at %s does not support CommFPGA\n", vp);
 5972              		.loc 1 1271 0
 5973 452f 488B0500 		movq	stderr(%rip), %rax
 5973      000000
 5974 4536 488B95B8 		movq	-2888(%rbp), %rdx
 5974      F4FFFF
 5975 453d BE000000 		movl	$.LC149, %esi
 5975      00
 5976 4542 4889C7   		movq	%rax, %rdi
 5977 4545 B8000000 		movl	$0, %eax
 5977      00
 5978 454a E8000000 		call	fprintf
 5978      00
1272:final_with_print.c **** 			FAIL(FLP_ARGS, cleanup);
 5979              		.loc 1 1272 0
 5980 454f C785B8F2 		movl	$12, -3400(%rbp)
 5980      FFFF0C00 
 5980      0000
 5981 4559 E9823900 		jmp	.L230
 5981      00
 5982              	.L284:
1273:final_with_print.c **** 		}
1274:final_with_print.c **** 	}
1275:final_with_print.c **** 
1276:final_with_print.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
1277:final_with_print.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
1278:final_with_print.c **** 	if (doworkOpt->count) 
 5983              		.loc 1 1278 0
 5984 455e 488B8560 		movq	-2976(%rbp), %rax
 5984      F4FFFF
 5985 4565 8B4060   		movl	96(%rax), %eax
 5986 4568 85C0     		testl	%eax, %eax
 5987 456a 0F847039 		je	.L230
 5987      0000
1279:final_with_print.c **** 	{
1280:final_with_print.c **** 		printf("%s\n", "Hello ");
 5988              		.loc 1 1280 0
 5989 4570 BF000000 		movl	$.LC150, %edi
 5989      00
 5990 4575 E8000000 		call	puts
 5990      00
1281:final_with_print.c **** 		//int my_read_channel = 0;
1282:final_with_print.c **** 		//uint8 my_write_channel = 0x01;
1283:final_with_print.c **** 		//uint32 my_time_out = 0x00000002;
1284:final_with_print.c **** 		//uint32 my_count = 0x0004;
1285:final_with_print.c **** 		//uint32 *buf;
1286:final_with_print.c **** 		// uint8 buf[4];
1287:final_with_print.c **** 		// uint8 Ack1[4]={221,221,221,221};
1288:final_with_print.c **** 		// uint8 Ack2[4]={187,187,187,187};
1289:final_with_print.c **** 		printf("%s\n", "Helloghjkl ");
 5991              		.loc 1 1289 0
 5992 457a BF000000 		movl	$.LC151, %edi
 5992      00
 5993 457f E8000000 		call	puts
 5993      00
1290:final_with_print.c **** 		if ( isCommCapable ) 
 5994              		.loc 1 1290 0
 5995 4584 80BDAEF2 		cmpb	$0, -3410(%rbp)
 5995      FFFF00
 5996 458b 0F842439 		je	.L295
 5996      0000
 5997              	.LBB50:
1291:final_with_print.c **** 		{
1292:final_with_print.c **** 			uint8 isRunning;
1293:final_with_print.c **** 			fStatus = flSelectConduit(handle, conduit, &error);
 5998              		.loc 1 1293 0
 5999 4591 0FB68DAB 		movzbl	-3413(%rbp), %ecx
 5999      F2FFFF
 6000 4598 488B85E0 		movq	-3104(%rbp), %rax
 6000      F3FFFF
 6001 459f 488D95E8 		leaq	-3096(%rbp), %rdx
 6001      F3FFFF
 6002 45a6 89CE     		movl	%ecx, %esi
 6003 45a8 4889C7   		movq	%rax, %rdi
 6004 45ab E8000000 		call	flSelectConduit
 6004      00
 6005 45b0 8985BCF2 		movl	%eax, -3396(%rbp)
 6005      FFFF
1294:final_with_print.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6006              		.loc 1 1294 0
 6007 45b6 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6007      FFFF00
 6008 45bd 740F     		je	.L296
 6009              		.loc 1 1294 0 is_stmt 0 discriminator 1
 6010 45bf C785B8F2 		movl	$1, -3400(%rbp)
 6010      FFFF0100 
 6010      0000
 6011 45c9 E9123900 		jmp	.L230
 6011      00
 6012              	.L296:
1295:final_with_print.c **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 6013              		.loc 1 1295 0 is_stmt 1
 6014 45ce 488B85E0 		movq	-3104(%rbp), %rax
 6014      F3FFFF
 6015 45d5 488D95E8 		leaq	-3096(%rbp), %rdx
 6015      F3FFFF
 6016 45dc 488D8DA8 		leaq	-3416(%rbp), %rcx
 6016      F2FFFF
 6017 45e3 4889CE   		movq	%rcx, %rsi
 6018 45e6 4889C7   		movq	%rax, %rdi
 6019 45e9 E8000000 		call	flIsFPGARunning
 6019      00
 6020 45ee 8985BCF2 		movl	%eax, -3396(%rbp)
 6020      FFFF
1296:final_with_print.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6021              		.loc 1 1296 0
 6022 45f4 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6022      FFFF00
 6023 45fb 740F     		je	.L298
 6024              		.loc 1 1296 0 is_stmt 0 discriminator 1
 6025 45fd C785B8F2 		movl	$1, -3400(%rbp)
 6025      FFFF0100 
 6025      0000
 6026 4607 E9D43800 		jmp	.L230
 6026      00
 6027              	.L298:
1297:final_with_print.c **** 			uint8 *recvData;
1298:final_with_print.c **** 			recvData = malloc(8);
 6028              		.loc 1 1298 0 is_stmt 1
 6029 460c BF080000 		movl	$8, %edi
 6029      00
 6030 4611 E8000000 		call	malloc
 6030      00
 6031 4616 488985F0 		movq	%rax, -3088(%rbp)
 6031      F3FFFF
1299:final_with_print.c **** 			uint32 actualLength;
1300:final_with_print.c **** 			if ( isRunning ) 
 6032              		.loc 1 1300 0
 6033 461d 0FB685A8 		movzbl	-3416(%rbp), %eax
 6033      F2FFFF
 6034 4624 84C0     		testb	%al, %al
 6035 4626 0F845C38 		je	.L299
 6035      0000
 6036              	.LBB51:
1301:final_with_print.c **** 			{
1302:final_with_print.c **** 				int K[32] = {0,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,1,1,0,1,0};
 6037              		.loc 1 1302 0
 6038 462c C785D0F5 		movl	$0, -2608(%rbp)
 6038      FFFF0000 
 6038      0000
 6039 4636 C785D4F5 		movl	$1, -2604(%rbp)
 6039      FFFF0100 
 6039      0000
 6040 4640 C785D8F5 		movl	$0, -2600(%rbp)
 6040      FFFF0000 
 6040      0000
 6041 464a C785DCF5 		movl	$0, -2596(%rbp)
 6041      FFFF0000 
 6041      0000
 6042 4654 C785E0F5 		movl	$1, -2592(%rbp)
 6042      FFFF0100 
 6042      0000
 6043 465e C785E4F5 		movl	$1, -2588(%rbp)
 6043      FFFF0100 
 6043      0000
 6044 4668 C785E8F5 		movl	$1, -2584(%rbp)
 6044      FFFF0100 
 6044      0000
 6045 4672 C785ECF5 		movl	$1, -2580(%rbp)
 6045      FFFF0100 
 6045      0000
 6046 467c C785F0F5 		movl	$1, -2576(%rbp)
 6046      FFFF0100 
 6046      0000
 6047 4686 C785F4F5 		movl	$1, -2572(%rbp)
 6047      FFFF0100 
 6047      0000
 6048 4690 C785F8F5 		movl	$1, -2568(%rbp)
 6048      FFFF0100 
 6048      0000
 6049 469a C785FCF5 		movl	$1, -2564(%rbp)
 6049      FFFF0100 
 6049      0000
 6050 46a4 C78500F6 		movl	$0, -2560(%rbp)
 6050      FFFF0000 
 6050      0000
 6051 46ae C78504F6 		movl	$0, -2556(%rbp)
 6051      FFFF0000 
 6051      0000
 6052 46b8 C78508F6 		movl	$0, -2552(%rbp)
 6052      FFFF0000 
 6052      0000
 6053 46c2 C7850CF6 		movl	$0, -2548(%rbp)
 6053      FFFF0000 
 6053      0000
 6054 46cc C78510F6 		movl	$0, -2544(%rbp)
 6054      FFFF0000 
 6054      0000
 6055 46d6 C78514F6 		movl	$0, -2540(%rbp)
 6055      FFFF0000 
 6055      0000
 6056 46e0 C78518F6 		movl	$1, -2536(%rbp)
 6056      FFFF0100 
 6056      0000
 6057 46ea C7851CF6 		movl	$1, -2532(%rbp)
 6057      FFFF0100 
 6057      0000
 6058 46f4 C78520F6 		movl	$1, -2528(%rbp)
 6058      FFFF0100 
 6058      0000
 6059 46fe C78524F6 		movl	$0, -2524(%rbp)
 6059      FFFF0000 
 6059      0000
 6060 4708 C78528F6 		movl	$1, -2520(%rbp)
 6060      FFFF0100 
 6060      0000
 6061 4712 C7852CF6 		movl	$0, -2516(%rbp)
 6061      FFFF0000 
 6061      0000
 6062 471c C78530F6 		movl	$1, -2512(%rbp)
 6062      FFFF0100 
 6062      0000
 6063 4726 C78534F6 		movl	$0, -2508(%rbp)
 6063      FFFF0000 
 6063      0000
 6064 4730 C78538F6 		movl	$1, -2504(%rbp)
 6064      FFFF0100 
 6064      0000
 6065 473a C7853CF6 		movl	$1, -2500(%rbp)
 6065      FFFF0100 
 6065      0000
 6066 4744 C78540F6 		movl	$1, -2496(%rbp)
 6066      FFFF0100 
 6066      0000
 6067 474e C78544F6 		movl	$0, -2492(%rbp)
 6067      FFFF0000 
 6067      0000
 6068 4758 C78548F6 		movl	$1, -2488(%rbp)
 6068      FFFF0100 
 6068      0000
 6069 4762 C7854CF6 		movl	$0, -2484(%rbp)
 6069      FFFF0000 
 6069      0000
1303:final_with_print.c **** 				int ack1[32] = {0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1};
 6070              		.loc 1 1303 0
 6071 476c C78550F6 		movl	$0, -2480(%rbp)
 6071      FFFF0000 
 6071      0000
 6072 4776 C78554F6 		movl	$1, -2476(%rbp)
 6072      FFFF0100 
 6072      0000
 6073 4780 C78558F6 		movl	$0, -2472(%rbp)
 6073      FFFF0000 
 6073      0000
 6074 478a C7855CF6 		movl	$1, -2468(%rbp)
 6074      FFFF0100 
 6074      0000
 6075 4794 C78560F6 		movl	$0, -2464(%rbp)
 6075      FFFF0000 
 6075      0000
 6076 479e C78564F6 		movl	$1, -2460(%rbp)
 6076      FFFF0100 
 6076      0000
 6077 47a8 C78568F6 		movl	$0, -2456(%rbp)
 6077      FFFF0000 
 6077      0000
 6078 47b2 C7856CF6 		movl	$1, -2452(%rbp)
 6078      FFFF0100 
 6078      0000
 6079 47bc C78570F6 		movl	$0, -2448(%rbp)
 6079      FFFF0000 
 6079      0000
 6080 47c6 C78574F6 		movl	$1, -2444(%rbp)
 6080      FFFF0100 
 6080      0000
 6081 47d0 C78578F6 		movl	$0, -2440(%rbp)
 6081      FFFF0000 
 6081      0000
 6082 47da C7857CF6 		movl	$1, -2436(%rbp)
 6082      FFFF0100 
 6082      0000
 6083 47e4 C78580F6 		movl	$0, -2432(%rbp)
 6083      FFFF0000 
 6083      0000
 6084 47ee C78584F6 		movl	$1, -2428(%rbp)
 6084      FFFF0100 
 6084      0000
 6085 47f8 C78588F6 		movl	$0, -2424(%rbp)
 6085      FFFF0000 
 6085      0000
 6086 4802 C7858CF6 		movl	$1, -2420(%rbp)
 6086      FFFF0100 
 6086      0000
 6087 480c C78590F6 		movl	$0, -2416(%rbp)
 6087      FFFF0000 
 6087      0000
 6088 4816 C78594F6 		movl	$1, -2412(%rbp)
 6088      FFFF0100 
 6088      0000
 6089 4820 C78598F6 		movl	$0, -2408(%rbp)
 6089      FFFF0000 
 6089      0000
 6090 482a C7859CF6 		movl	$1, -2404(%rbp)
 6090      FFFF0100 
 6090      0000
 6091 4834 C785A0F6 		movl	$0, -2400(%rbp)
 6091      FFFF0000 
 6091      0000
 6092 483e C785A4F6 		movl	$1, -2396(%rbp)
 6092      FFFF0100 
 6092      0000
 6093 4848 C785A8F6 		movl	$0, -2392(%rbp)
 6093      FFFF0000 
 6093      0000
 6094 4852 C785ACF6 		movl	$1, -2388(%rbp)
 6094      FFFF0100 
 6094      0000
 6095 485c C785B0F6 		movl	$0, -2384(%rbp)
 6095      FFFF0000 
 6095      0000
 6096 4866 C785B4F6 		movl	$1, -2380(%rbp)
 6096      FFFF0100 
 6096      0000
 6097 4870 C785B8F6 		movl	$0, -2376(%rbp)
 6097      FFFF0000 
 6097      0000
 6098 487a C785BCF6 		movl	$1, -2372(%rbp)
 6098      FFFF0100 
 6098      0000
 6099 4884 C785C0F6 		movl	$0, -2368(%rbp)
 6099      FFFF0000 
 6099      0000
 6100 488e C785C4F6 		movl	$1, -2364(%rbp)
 6100      FFFF0100 
 6100      0000
 6101 4898 C785C8F6 		movl	$0, -2360(%rbp)
 6101      FFFF0000 
 6101      0000
 6102 48a2 C785CCF6 		movl	$1, -2356(%rbp)
 6102      FFFF0100 
 6102      0000
1304:final_with_print.c **** 				int ack2[32] = {0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1};
 6103              		.loc 1 1304 0
 6104 48ac C785D0F6 		movl	$0, -2352(%rbp)
 6104      FFFF0000 
 6104      0000
 6105 48b6 C785D4F6 		movl	$0, -2348(%rbp)
 6105      FFFF0000 
 6105      0000
 6106 48c0 C785D8F6 		movl	$1, -2344(%rbp)
 6106      FFFF0100 
 6106      0000
 6107 48ca C785DCF6 		movl	$1, -2340(%rbp)
 6107      FFFF0100 
 6107      0000
 6108 48d4 C785E0F6 		movl	$0, -2336(%rbp)
 6108      FFFF0000 
 6108      0000
 6109 48de C785E4F6 		movl	$0, -2332(%rbp)
 6109      FFFF0000 
 6109      0000
 6110 48e8 C785E8F6 		movl	$1, -2328(%rbp)
 6110      FFFF0100 
 6110      0000
 6111 48f2 C785ECF6 		movl	$1, -2324(%rbp)
 6111      FFFF0100 
 6111      0000
 6112 48fc C785F0F6 		movl	$0, -2320(%rbp)
 6112      FFFF0000 
 6112      0000
 6113 4906 C785F4F6 		movl	$0, -2316(%rbp)
 6113      FFFF0000 
 6113      0000
 6114 4910 C785F8F6 		movl	$1, -2312(%rbp)
 6114      FFFF0100 
 6114      0000
 6115 491a C785FCF6 		movl	$1, -2308(%rbp)
 6115      FFFF0100 
 6115      0000
 6116 4924 C78500F7 		movl	$0, -2304(%rbp)
 6116      FFFF0000 
 6116      0000
 6117 492e C78504F7 		movl	$0, -2300(%rbp)
 6117      FFFF0000 
 6117      0000
 6118 4938 C78508F7 		movl	$1, -2296(%rbp)
 6118      FFFF0100 
 6118      0000
 6119 4942 C7850CF7 		movl	$1, -2292(%rbp)
 6119      FFFF0100 
 6119      0000
 6120 494c C78510F7 		movl	$0, -2288(%rbp)
 6120      FFFF0000 
 6120      0000
 6121 4956 C78514F7 		movl	$0, -2284(%rbp)
 6121      FFFF0000 
 6121      0000
 6122 4960 C78518F7 		movl	$1, -2280(%rbp)
 6122      FFFF0100 
 6122      0000
 6123 496a C7851CF7 		movl	$1, -2276(%rbp)
 6123      FFFF0100 
 6123      0000
 6124 4974 C78520F7 		movl	$0, -2272(%rbp)
 6124      FFFF0000 
 6124      0000
 6125 497e C78524F7 		movl	$0, -2268(%rbp)
 6125      FFFF0000 
 6125      0000
 6126 4988 C78528F7 		movl	$1, -2264(%rbp)
 6126      FFFF0100 
 6126      0000
 6127 4992 C7852CF7 		movl	$1, -2260(%rbp)
 6127      FFFF0100 
 6127      0000
 6128 499c C78530F7 		movl	$0, -2256(%rbp)
 6128      FFFF0000 
 6128      0000
 6129 49a6 C78534F7 		movl	$0, -2252(%rbp)
 6129      FFFF0000 
 6129      0000
 6130 49b0 C78538F7 		movl	$1, -2248(%rbp)
 6130      FFFF0100 
 6130      0000
 6131 49ba C7853CF7 		movl	$1, -2244(%rbp)
 6131      FFFF0100 
 6131      0000
 6132 49c4 C78540F7 		movl	$0, -2240(%rbp)
 6132      FFFF0000 
 6132      0000
 6133 49ce C78544F7 		movl	$0, -2236(%rbp)
 6133      FFFF0000 
 6133      0000
 6134 49d8 C78548F7 		movl	$1, -2232(%rbp)
 6134      FFFF0100 
 6134      0000
 6135 49e2 C7854CF7 		movl	$1, -2228(%rbp)
 6135      FFFF0100 
 6135      0000
1305:final_with_print.c **** 				int reset_bytes[8] = {0,0,0,1,1,0,0,0};
 6136              		.loc 1 1305 0
 6137 49ec C785F0F4 		movl	$0, -2832(%rbp)
 6137      FFFF0000 
 6137      0000
 6138 49f6 C785F4F4 		movl	$0, -2828(%rbp)
 6138      FFFF0000 
 6138      0000
 6139 4a00 C785F8F4 		movl	$0, -2824(%rbp)
 6139      FFFF0000 
 6139      0000
 6140 4a0a C785FCF4 		movl	$1, -2820(%rbp)
 6140      FFFF0100 
 6140      0000
 6141 4a14 C78500F5 		movl	$1, -2816(%rbp)
 6141      FFFF0100 
 6141      0000
 6142 4a1e C78504F5 		movl	$0, -2812(%rbp)
 6142      FFFF0000 
 6142      0000
 6143 4a28 C78508F5 		movl	$0, -2808(%rbp)
 6143      FFFF0000 
 6143      0000
 6144 4a32 C7850CF5 		movl	$0, -2804(%rbp)
 6144      FFFF0000 
 6144      0000
1306:final_with_print.c **** 				int reset_int = bitArrayToInt(reset_bytes,8);
 6145              		.loc 1 1306 0
 6146 4a3c 488D85F0 		leaq	-2832(%rbp), %rax
 6146      F4FFFF
 6147 4a43 BE080000 		movl	$8, %esi
 6147      00
 6148 4a48 4889C7   		movq	%rax, %rdi
 6149 4a4b E8000000 		call	bitArrayToInt
 6149      00
 6150 4a50 8985ACF3 		movl	%eax, -3156(%rbp)
 6150      FFFF
1307:final_with_print.c **** 				uint8 reset = (uint8)reset_int;
 6151              		.loc 1 1307 0
 6152 4a56 8B85ACF3 		movl	-3156(%rbp), %eax
 6152      FFFF
 6153 4a5c 8885AFF2 		movb	%al, -3409(%rbp)
 6153      FFFF
1308:final_with_print.c **** 				int del = 1000;
 6154              		.loc 1 1308 0
 6155 4a62 C785B0F3 		movl	$1000, -3152(%rbp)
 6155      FFFFE803 
 6155      0000
 6156              	.LBB52:
1309:final_with_print.c **** 				for (int k = 0; k < 64; ++k)
 6157              		.loc 1 1309 0
 6158 4a6c C785C8F2 		movl	$0, -3384(%rbp)
 6158      FFFF0000 
 6158      0000
 6159 4a76 E9FE3300 		jmp	.L300
 6159      00
 6160              	.L511:
 6161              	.LBB53:
1310:final_with_print.c **** 				{	printf("%s","Channel = " );
 6162              		.loc 1 1310 0
 6163 4a7b BE000000 		movl	$.LC152, %esi
 6163      00
 6164 4a80 BF000000 		movl	$.LC153, %edi
 6164      00
 6165 4a85 B8000000 		movl	$0, %eax
 6165      00
 6166 4a8a E8000000 		call	printf
 6166      00
1311:final_with_print.c **** 					printf("%d\n",2*k );
 6167              		.loc 1 1311 0
 6168 4a8f 8B85C8F2 		movl	-3384(%rbp), %eax
 6168      FFFF
 6169 4a95 01C0     		addl	%eax, %eax
 6170 4a97 89C6     		movl	%eax, %esi
 6171 4a99 BF000000 		movl	$.LC154, %edi
 6171      00
 6172 4a9e B8000000 		movl	$0, %eax
 6172      00
 6173 4aa3 E8000000 		call	printf
 6173      00
1312:final_with_print.c **** 					uint8 get_encrypted_coord[4];
1313:final_with_print.c **** 					printf("%s\n", "----------------------H2.1 started----------------------- ");
 6174              		.loc 1 1313 0
 6175 4aa8 BF000000 		movl	$.LC155, %edi
 6175      00
 6176 4aad E8000000 		call	puts
 6176      00
1314:final_with_print.c **** 					printf("%s\n", "Waiting for encrypted co_ordinates");
 6177              		.loc 1 1314 0
 6178 4ab2 BF000000 		movl	$.LC156, %edi
 6178      00
 6179 4ab7 E8000000 		call	puts
 6179      00
1315:final_with_print.c **** 
1316:final_with_print.c **** 					delay(del * 1000);
 6180              		.loc 1 1316 0
 6181 4abc 8B85B0F3 		movl	-3152(%rbp), %eax
 6181      FFFF
 6182 4ac2 69C0E803 		imull	$1000, %eax, %eax
 6182      0000
 6183 4ac8 89C7     		movl	%eax, %edi
 6184 4aca E8000000 		call	delay
 6184      00
1317:final_with_print.c **** 					fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &get_encrypted_coord[0], &error);
 6185              		.loc 1 1317 0
 6186 4acf 8B85C8F2 		movl	-3384(%rbp), %eax
 6186      FFFF
 6187 4ad5 01C0     		addl	%eax, %eax
 6188 4ad7 0FB6F0   		movzbl	%al, %esi
 6189 4ada 488B85E0 		movq	-3104(%rbp), %rax
 6189      F3FFFF
 6190 4ae1 488D8DE8 		leaq	-3096(%rbp), %rcx
 6190      F3FFFF
 6191 4ae8 488D9560 		leaq	-160(%rbp), %rdx
 6191      FFFFFF
 6192 4aef 4989C8   		movq	%rcx, %r8
 6193 4af2 4889D1   		movq	%rdx, %rcx
 6194 4af5 BA010000 		movl	$1, %edx
 6194      00
 6195 4afa 4889C7   		movq	%rax, %rdi
 6196 4afd E8000000 		call	flReadChannelAsyncSubmit
 6196      00
 6197 4b02 8985BCF2 		movl	%eax, -3396(%rbp)
 6197      FFFF
1318:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6198              		.loc 1 1318 0
 6199 4b08 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6199      FFFF00
 6200 4b0f 740F     		je	.L301
 6201              		.loc 1 1318 0 is_stmt 0 discriminator 1
 6202 4b11 C785B8F2 		movl	$1, -3400(%rbp)
 6202      FFFF0100 
 6202      0000
 6203 4b1b E9C03300 		jmp	.L230
 6203      00
 6204              	.L301:
1319:final_with_print.c **** 					fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 6205              		.loc 1 1319 0 is_stmt 1
 6206 4b20 488B85E0 		movq	-3104(%rbp), %rax
 6206      F3FFFF
 6207 4b27 488DBDE8 		leaq	-3096(%rbp), %rdi
 6207      F3FFFF
 6208 4b2e 488D8DB4 		leaq	-3404(%rbp), %rcx
 6208      F2FFFF
 6209 4b35 488D95B4 		leaq	-3404(%rbp), %rdx
 6209      F2FFFF
 6210 4b3c 488DB5F0 		leaq	-3088(%rbp), %rsi
 6210      F3FFFF
 6211 4b43 4989F8   		movq	%rdi, %r8
 6212 4b46 4889C7   		movq	%rax, %rdi
 6213 4b49 E8000000 		call	flReadChannelAsyncAwait
 6213      00
 6214 4b4e 8985BCF2 		movl	%eax, -3396(%rbp)
 6214      FFFF
1320:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6215              		.loc 1 1320 0
 6216 4b54 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6216      FFFF00
 6217 4b5b 740F     		je	.L303
 6218              		.loc 1 1320 0 is_stmt 0 discriminator 1
 6219 4b5d C785B8F2 		movl	$1, -3400(%rbp)
 6219      FFFF0100 
 6219      0000
 6220 4b67 E9743300 		jmp	.L230
 6220      00
 6221              	.L303:
1321:final_with_print.c **** 					if(get_encrypted_coord[0] == reset) 
 6222              		.loc 1 1321 0 is_stmt 1
 6223 4b6c 0FB68560 		movzbl	-160(%rbp), %eax
 6223      FFFFFF
 6224 4b73 3A85AFF2 		cmpb	-3409(%rbp), %al
 6224      FFFF
 6225 4b79 7516     		jne	.L304
1322:final_with_print.c **** 						{
1323:final_with_print.c **** 							k--; 
 6226              		.loc 1 1323 0
 6227 4b7b 83ADC8F2 		subl	$1, -3384(%rbp)
 6227      FFFF01
1324:final_with_print.c **** 							printf("%s\n", "-------------------------RESET------------------------");
 6228              		.loc 1 1324 0
 6229 4b82 BF000000 		movl	$.LC157, %edi
 6229      00
 6230 4b87 E8000000 		call	puts
 6230      00
1325:final_with_print.c **** 							continue;
 6231              		.loc 1 1325 0
 6232 4b8c E9E13200 		jmp	.L305
 6232      00
 6233              	.L304:
1326:final_with_print.c **** 						}
1327:final_with_print.c **** 					delay(del);
 6234              		.loc 1 1327 0
 6235 4b91 8B85B0F3 		movl	-3152(%rbp), %eax
 6235      FFFF
 6236 4b97 89C7     		movl	%eax, %edi
 6237 4b99 E8000000 		call	delay
 6237      00
1328:final_with_print.c **** 					fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &get_encrypted_coord[1], &error);
 6238              		.loc 1 1328 0
 6239 4b9e 8B85C8F2 		movl	-3384(%rbp), %eax
 6239      FFFF
 6240 4ba4 01C0     		addl	%eax, %eax
 6241 4ba6 0FB6F0   		movzbl	%al, %esi
 6242 4ba9 488B85E0 		movq	-3104(%rbp), %rax
 6242      F3FFFF
 6243 4bb0 488D8DE8 		leaq	-3096(%rbp), %rcx
 6243      F3FFFF
 6244 4bb7 488D9560 		leaq	-160(%rbp), %rdx
 6244      FFFFFF
 6245 4bbe 4883C201 		addq	$1, %rdx
 6246 4bc2 4989C8   		movq	%rcx, %r8
 6247 4bc5 4889D1   		movq	%rdx, %rcx
 6248 4bc8 BA010000 		movl	$1, %edx
 6248      00
 6249 4bcd 4889C7   		movq	%rax, %rdi
 6250 4bd0 E8000000 		call	flReadChannelAsyncSubmit
 6250      00
 6251 4bd5 8985BCF2 		movl	%eax, -3396(%rbp)
 6251      FFFF
1329:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6252              		.loc 1 1329 0
 6253 4bdb 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6253      FFFF00
 6254 4be2 740F     		je	.L306
 6255              		.loc 1 1329 0 is_stmt 0 discriminator 1
 6256 4be4 C785B8F2 		movl	$1, -3400(%rbp)
 6256      FFFF0100 
 6256      0000
 6257 4bee E9ED3200 		jmp	.L230
 6257      00
 6258              	.L306:
1330:final_with_print.c **** 					fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 6259              		.loc 1 1330 0 is_stmt 1
 6260 4bf3 488B85E0 		movq	-3104(%rbp), %rax
 6260      F3FFFF
 6261 4bfa 488DBDE8 		leaq	-3096(%rbp), %rdi
 6261      F3FFFF
 6262 4c01 488D8DB4 		leaq	-3404(%rbp), %rcx
 6262      F2FFFF
 6263 4c08 488D95B4 		leaq	-3404(%rbp), %rdx
 6263      F2FFFF
 6264 4c0f 488DB5F0 		leaq	-3088(%rbp), %rsi
 6264      F3FFFF
 6265 4c16 4989F8   		movq	%rdi, %r8
 6266 4c19 4889C7   		movq	%rax, %rdi
 6267 4c1c E8000000 		call	flReadChannelAsyncAwait
 6267      00
 6268 4c21 8985BCF2 		movl	%eax, -3396(%rbp)
 6268      FFFF
1331:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6269              		.loc 1 1331 0
 6270 4c27 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6270      FFFF00
 6271 4c2e 740F     		je	.L307
 6272              		.loc 1 1331 0 is_stmt 0 discriminator 1
 6273 4c30 C785B8F2 		movl	$1, -3400(%rbp)
 6273      FFFF0100 
 6273      0000
 6274 4c3a E9A13200 		jmp	.L230
 6274      00
 6275              	.L307:
1332:final_with_print.c **** 					if(get_encrypted_coord[1] == reset) 
 6276              		.loc 1 1332 0 is_stmt 1
 6277 4c3f 0FB68561 		movzbl	-159(%rbp), %eax
 6277      FFFFFF
 6278 4c46 3A85AFF2 		cmpb	-3409(%rbp), %al
 6278      FFFF
 6279 4c4c 7516     		jne	.L308
1333:final_with_print.c **** 						{
1334:final_with_print.c **** 							k--; 
 6280              		.loc 1 1334 0
 6281 4c4e 83ADC8F2 		subl	$1, -3384(%rbp)
 6281      FFFF01
1335:final_with_print.c **** 							printf("%s\n", "-------------------------RESET------------------------");							
 6282              		.loc 1 1335 0
 6283 4c55 BF000000 		movl	$.LC157, %edi
 6283      00
 6284 4c5a E8000000 		call	puts
 6284      00
1336:final_with_print.c **** 							continue;
 6285              		.loc 1 1336 0
 6286 4c5f E90E3200 		jmp	.L305
 6286      00
 6287              	.L308:
1337:final_with_print.c **** 						}
1338:final_with_print.c **** 					delay(del);
 6288              		.loc 1 1338 0
 6289 4c64 8B85B0F3 		movl	-3152(%rbp), %eax
 6289      FFFF
 6290 4c6a 89C7     		movl	%eax, %edi
 6291 4c6c E8000000 		call	delay
 6291      00
1339:final_with_print.c **** 					fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &get_encrypted_coord[2], &error);
 6292              		.loc 1 1339 0
 6293 4c71 8B85C8F2 		movl	-3384(%rbp), %eax
 6293      FFFF
 6294 4c77 01C0     		addl	%eax, %eax
 6295 4c79 0FB6F0   		movzbl	%al, %esi
 6296 4c7c 488B85E0 		movq	-3104(%rbp), %rax
 6296      F3FFFF
 6297 4c83 488D8DE8 		leaq	-3096(%rbp), %rcx
 6297      F3FFFF
 6298 4c8a 488D9560 		leaq	-160(%rbp), %rdx
 6298      FFFFFF
 6299 4c91 4883C202 		addq	$2, %rdx
 6300 4c95 4989C8   		movq	%rcx, %r8
 6301 4c98 4889D1   		movq	%rdx, %rcx
 6302 4c9b BA010000 		movl	$1, %edx
 6302      00
 6303 4ca0 4889C7   		movq	%rax, %rdi
 6304 4ca3 E8000000 		call	flReadChannelAsyncSubmit
 6304      00
 6305 4ca8 8985BCF2 		movl	%eax, -3396(%rbp)
 6305      FFFF
1340:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6306              		.loc 1 1340 0
 6307 4cae 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6307      FFFF00
 6308 4cb5 740F     		je	.L309
 6309              		.loc 1 1340 0 is_stmt 0 discriminator 1
 6310 4cb7 C785B8F2 		movl	$1, -3400(%rbp)
 6310      FFFF0100 
 6310      0000
 6311 4cc1 E91A3200 		jmp	.L230
 6311      00
 6312              	.L309:
1341:final_with_print.c **** 					fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 6313              		.loc 1 1341 0 is_stmt 1
 6314 4cc6 488B85E0 		movq	-3104(%rbp), %rax
 6314      F3FFFF
 6315 4ccd 488DBDE8 		leaq	-3096(%rbp), %rdi
 6315      F3FFFF
 6316 4cd4 488D8DB4 		leaq	-3404(%rbp), %rcx
 6316      F2FFFF
 6317 4cdb 488D95B4 		leaq	-3404(%rbp), %rdx
 6317      F2FFFF
 6318 4ce2 488DB5F0 		leaq	-3088(%rbp), %rsi
 6318      F3FFFF
 6319 4ce9 4989F8   		movq	%rdi, %r8
 6320 4cec 4889C7   		movq	%rax, %rdi
 6321 4cef E8000000 		call	flReadChannelAsyncAwait
 6321      00
 6322 4cf4 8985BCF2 		movl	%eax, -3396(%rbp)
 6322      FFFF
1342:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6323              		.loc 1 1342 0
 6324 4cfa 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6324      FFFF00
 6325 4d01 740F     		je	.L310
 6326              		.loc 1 1342 0 is_stmt 0 discriminator 1
 6327 4d03 C785B8F2 		movl	$1, -3400(%rbp)
 6327      FFFF0100 
 6327      0000
 6328 4d0d E9CE3100 		jmp	.L230
 6328      00
 6329              	.L310:
1343:final_with_print.c **** 					if(get_encrypted_coord[2] == reset) 
 6330              		.loc 1 1343 0 is_stmt 1
 6331 4d12 0FB68562 		movzbl	-158(%rbp), %eax
 6331      FFFFFF
 6332 4d19 3A85AFF2 		cmpb	-3409(%rbp), %al
 6332      FFFF
 6333 4d1f 7516     		jne	.L311
1344:final_with_print.c **** 						{
1345:final_with_print.c **** 							k--; 
 6334              		.loc 1 1345 0
 6335 4d21 83ADC8F2 		subl	$1, -3384(%rbp)
 6335      FFFF01
1346:final_with_print.c **** 							printf("%s\n", "-------------------------RESET------------------------");							
 6336              		.loc 1 1346 0
 6337 4d28 BF000000 		movl	$.LC157, %edi
 6337      00
 6338 4d2d E8000000 		call	puts
 6338      00
1347:final_with_print.c **** 							continue;
 6339              		.loc 1 1347 0
 6340 4d32 E93B3100 		jmp	.L305
 6340      00
 6341              	.L311:
1348:final_with_print.c **** 						}
1349:final_with_print.c **** 					delay(del);
 6342              		.loc 1 1349 0
 6343 4d37 8B85B0F3 		movl	-3152(%rbp), %eax
 6343      FFFF
 6344 4d3d 89C7     		movl	%eax, %edi
 6345 4d3f E8000000 		call	delay
 6345      00
1350:final_with_print.c **** 					fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &get_encrypted_coord[3], &error);
 6346              		.loc 1 1350 0
 6347 4d44 8B85C8F2 		movl	-3384(%rbp), %eax
 6347      FFFF
 6348 4d4a 01C0     		addl	%eax, %eax
 6349 4d4c 0FB6F0   		movzbl	%al, %esi
 6350 4d4f 488B85E0 		movq	-3104(%rbp), %rax
 6350      F3FFFF
 6351 4d56 488D8DE8 		leaq	-3096(%rbp), %rcx
 6351      F3FFFF
 6352 4d5d 488D9560 		leaq	-160(%rbp), %rdx
 6352      FFFFFF
 6353 4d64 4883C203 		addq	$3, %rdx
 6354 4d68 4989C8   		movq	%rcx, %r8
 6355 4d6b 4889D1   		movq	%rdx, %rcx
 6356 4d6e BA010000 		movl	$1, %edx
 6356      00
 6357 4d73 4889C7   		movq	%rax, %rdi
 6358 4d76 E8000000 		call	flReadChannelAsyncSubmit
 6358      00
 6359 4d7b 8985BCF2 		movl	%eax, -3396(%rbp)
 6359      FFFF
1351:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6360              		.loc 1 1351 0
 6361 4d81 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6361      FFFF00
 6362 4d88 740F     		je	.L312
 6363              		.loc 1 1351 0 is_stmt 0 discriminator 1
 6364 4d8a C785B8F2 		movl	$1, -3400(%rbp)
 6364      FFFF0100 
 6364      0000
 6365 4d94 E9473100 		jmp	.L230
 6365      00
 6366              	.L312:
1352:final_with_print.c **** 					fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 6367              		.loc 1 1352 0 is_stmt 1
 6368 4d99 488B85E0 		movq	-3104(%rbp), %rax
 6368      F3FFFF
 6369 4da0 488DBDE8 		leaq	-3096(%rbp), %rdi
 6369      F3FFFF
 6370 4da7 488D8DB4 		leaq	-3404(%rbp), %rcx
 6370      F2FFFF
 6371 4dae 488D95B4 		leaq	-3404(%rbp), %rdx
 6371      F2FFFF
 6372 4db5 488DB5F0 		leaq	-3088(%rbp), %rsi
 6372      F3FFFF
 6373 4dbc 4989F8   		movq	%rdi, %r8
 6374 4dbf 4889C7   		movq	%rax, %rdi
 6375 4dc2 E8000000 		call	flReadChannelAsyncAwait
 6375      00
 6376 4dc7 8985BCF2 		movl	%eax, -3396(%rbp)
 6376      FFFF
1353:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6377              		.loc 1 1353 0
 6378 4dcd 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6378      FFFF00
 6379 4dd4 740F     		je	.L313
 6380              		.loc 1 1353 0 is_stmt 0 discriminator 1
 6381 4dd6 C785B8F2 		movl	$1, -3400(%rbp)
 6381      FFFF0100 
 6381      0000
 6382 4de0 E9FB3000 		jmp	.L230
 6382      00
 6383              	.L313:
1354:final_with_print.c **** 					if(get_encrypted_coord[3] == reset) 
 6384              		.loc 1 1354 0 is_stmt 1
 6385 4de5 0FB68563 		movzbl	-157(%rbp), %eax
 6385      FFFFFF
 6386 4dec 3A85AFF2 		cmpb	-3409(%rbp), %al
 6386      FFFF
 6387 4df2 7516     		jne	.L314
1355:final_with_print.c **** 						{
1356:final_with_print.c **** 							k--; 
 6388              		.loc 1 1356 0
 6389 4df4 83ADC8F2 		subl	$1, -3384(%rbp)
 6389      FFFF01
1357:final_with_print.c **** 							printf("%s\n", "-------------------------RESET------------------------");
 6390              		.loc 1 1357 0
 6391 4dfb BF000000 		movl	$.LC157, %edi
 6391      00
 6392 4e00 E8000000 		call	puts
 6392      00
1358:final_with_print.c **** 							continue;
 6393              		.loc 1 1358 0
 6394 4e05 E9683000 		jmp	.L305
 6394      00
 6395              	.L314:
1359:final_with_print.c **** 						}
1360:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6396              		.loc 1 1360 0
 6397 4e0a 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6397      FFFF00
 6398 4e11 740F     		je	.L315
 6399              		.loc 1 1360 0 is_stmt 0 discriminator 1
 6400 4e13 C785B8F2 		movl	$1, -3400(%rbp)
 6400      FFFF0100 
 6400      0000
 6401 4e1d E9BE3000 		jmp	.L230
 6401      00
 6402              	.L315:
1361:final_with_print.c **** 
1362:final_with_print.c **** 					printf("%s\n", "Got the encrypted co_ordinates, they are as in uint8 form --");
 6403              		.loc 1 1362 0 is_stmt 1
 6404 4e22 BF000000 		movl	$.LC158, %edi
 6404      00
 6405 4e27 E8000000 		call	puts
 6405      00
 6406              	.LBB54:
1363:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 6407              		.loc 1 1363 0
 6408 4e2c C785CCF2 		movl	$0, -3380(%rbp)
 6408      FFFF0000 
 6408      0000
 6409 4e36 EB2B     		jmp	.L316
 6410              	.L317:
1364:final_with_print.c **** 					{
1365:final_with_print.c **** 						printf("%d ", get_encrypted_coord[i]);
 6411              		.loc 1 1365 0 discriminator 3
 6412 4e38 8B85CCF2 		movl	-3380(%rbp), %eax
 6412      FFFF
 6413 4e3e 4898     		cltq
 6414 4e40 0FB68405 		movzbl	-160(%rbp,%rax), %eax
 6414      60FFFFFF 
 6415 4e48 0FB6C0   		movzbl	%al, %eax
 6416 4e4b 89C6     		movl	%eax, %esi
 6417 4e4d BF000000 		movl	$.LC10, %edi
 6417      00
 6418 4e52 B8000000 		movl	$0, %eax
 6418      00
 6419 4e57 E8000000 		call	printf
 6419      00
1363:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 6420              		.loc 1 1363 0 discriminator 3
 6421 4e5c 8385CCF2 		addl	$1, -3380(%rbp)
 6421      FFFF01
 6422              	.L316:
1363:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 6423              		.loc 1 1363 0 is_stmt 0 discriminator 1
 6424 4e63 83BDCCF2 		cmpl	$3, -3380(%rbp)
 6424      FFFF03
 6425 4e6a 7ECC     		jle	.L317
 6426              	.LBE54:
1366:final_with_print.c **** 					}
1367:final_with_print.c **** 					printf("\n");
 6427              		.loc 1 1367 0 is_stmt 1
 6428 4e6c BF0A0000 		movl	$10, %edi
 6428      00
 6429 4e71 E8000000 		call	putchar
 6429      00
1368:final_with_print.c **** 					int encrypted_pos[32];
1369:final_with_print.c **** 					uint8ToBin(get_encrypted_coord, encrypted_pos);
 6430              		.loc 1 1369 0
 6431 4e76 488D9550 		leaq	-2224(%rbp), %rdx
 6431      F7FFFF
 6432 4e7d 488D8560 		leaq	-160(%rbp), %rax
 6432      FFFFFF
 6433 4e84 4889D6   		movq	%rdx, %rsi
 6434 4e87 4889C7   		movq	%rax, %rdi
 6435 4e8a E8000000 		call	uint8ToBin
 6435      00
1370:final_with_print.c **** 					printf("%s\n", "encrypted_pos is converted to binary");
 6436              		.loc 1 1370 0
 6437 4e8f BF000000 		movl	$.LC159, %edi
 6437      00
 6438 4e94 E8000000 		call	puts
 6438      00
1371:final_with_print.c **** 					printf("%s\n", "The encrypted_pos are as --");
 6439              		.loc 1 1371 0
 6440 4e99 BF000000 		movl	$.LC160, %edi
 6440      00
 6441 4e9e E8000000 		call	puts
 6441      00
 6442              	.LBB55:
1372:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 6443              		.loc 1 1372 0
 6444 4ea3 C785D0F2 		movl	$0, -3376(%rbp)
 6444      FFFF0000 
 6444      0000
 6445 4ead EB27     		jmp	.L318
 6446              	.L319:
1373:final_with_print.c **** 					{
1374:final_with_print.c **** 						printf("%d ", encrypted_pos[i]);
 6447              		.loc 1 1374 0 discriminator 3
 6448 4eaf 8B85D0F2 		movl	-3376(%rbp), %eax
 6448      FFFF
 6449 4eb5 4898     		cltq
 6450 4eb7 8B848550 		movl	-2224(%rbp,%rax,4), %eax
 6450      F7FFFF
 6451 4ebe 89C6     		movl	%eax, %esi
 6452 4ec0 BF000000 		movl	$.LC10, %edi
 6452      00
 6453 4ec5 B8000000 		movl	$0, %eax
 6453      00
 6454 4eca E8000000 		call	printf
 6454      00
1372:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 6455              		.loc 1 1372 0 discriminator 3
 6456 4ecf 8385D0F2 		addl	$1, -3376(%rbp)
 6456      FFFF01
 6457              	.L318:
1372:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 6458              		.loc 1 1372 0 is_stmt 0 discriminator 1
 6459 4ed6 83BDD0F2 		cmpl	$31, -3376(%rbp)
 6459      FFFF1F
 6460 4edd 7ED0     		jle	.L319
 6461              	.LBE55:
1375:final_with_print.c **** 					}
1376:final_with_print.c **** 					printf("\n");
 6462              		.loc 1 1376 0 is_stmt 1
 6463 4edf BF0A0000 		movl	$10, %edi
 6463      00
 6464 4ee4 E8000000 		call	putchar
 6464      00
1377:final_with_print.c **** 					int decrypted_pos[32];
1378:final_with_print.c **** 					decrypter(encrypted_pos, K, decrypted_pos);
 6465              		.loc 1 1378 0
 6466 4ee9 488D95D0 		leaq	-2096(%rbp), %rdx
 6466      F7FFFF
 6467 4ef0 488D8DD0 		leaq	-2608(%rbp), %rcx
 6467      F5FFFF
 6468 4ef7 488D8550 		leaq	-2224(%rbp), %rax
 6468      F7FFFF
 6469 4efe 4889CE   		movq	%rcx, %rsi
 6470 4f01 4889C7   		movq	%rax, %rdi
 6471 4f04 E8000000 		call	decrypter
 6471      00
1379:final_with_print.c **** 					printf("%s\n", "The decrypted pos in binary form are as --");
 6472              		.loc 1 1379 0
 6473 4f09 BF000000 		movl	$.LC161, %edi
 6473      00
 6474 4f0e E8000000 		call	puts
 6474      00
 6475              	.LBB56:
1380:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 6476              		.loc 1 1380 0
 6477 4f13 C785D4F2 		movl	$0, -3372(%rbp)
 6477      FFFF0000 
 6477      0000
 6478 4f1d EB27     		jmp	.L320
 6479              	.L321:
1381:final_with_print.c **** 					{
1382:final_with_print.c **** 						printf("%d ", decrypted_pos[i]);
 6480              		.loc 1 1382 0 discriminator 3
 6481 4f1f 8B85D4F2 		movl	-3372(%rbp), %eax
 6481      FFFF
 6482 4f25 4898     		cltq
 6483 4f27 8B8485D0 		movl	-2096(%rbp,%rax,4), %eax
 6483      F7FFFF
 6484 4f2e 89C6     		movl	%eax, %esi
 6485 4f30 BF000000 		movl	$.LC10, %edi
 6485      00
 6486 4f35 B8000000 		movl	$0, %eax
 6486      00
 6487 4f3a E8000000 		call	printf
 6487      00
1380:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 6488              		.loc 1 1380 0 discriminator 3
 6489 4f3f 8385D4F2 		addl	$1, -3372(%rbp)
 6489      FFFF01
 6490              	.L320:
1380:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 6491              		.loc 1 1380 0 is_stmt 0 discriminator 1
 6492 4f46 83BDD4F2 		cmpl	$31, -3372(%rbp)
 6492      FFFF1F
 6493 4f4d 7ED0     		jle	.L321
 6494              	.LBE56:
1383:final_with_print.c **** 					}
1384:final_with_print.c **** 					printf("\n");
 6495              		.loc 1 1384 0 is_stmt 1
 6496 4f4f BF0A0000 		movl	$10, %edi
 6496      00
 6497 4f54 E8000000 		call	putchar
 6497      00
1385:final_with_print.c **** 					printf("%s\n", "----------------------H2.1 ended----------------------- ");
 6498              		.loc 1 1385 0
 6499 4f59 BF000000 		movl	$.LC162, %edi
 6499      00
 6500 4f5e E8000000 		call	puts
 6500      00
1386:final_with_print.c **** 					printf("%s\n", "----------------------H2.2 started----------------------- ");
 6501              		.loc 1 1386 0
 6502 4f63 BF000000 		movl	$.LC163, %edi
 6502      00
 6503 4f68 E8000000 		call	puts
 6503      00
1387:final_with_print.c **** 					
1388:final_with_print.c **** 					int encrypted_pos2[32];
1389:final_with_print.c **** 					encrypter(decrypted_pos, K, encrypted_pos2);
 6504              		.loc 1 1389 0
 6505 4f6d 488D9550 		leaq	-1968(%rbp), %rdx
 6505      F8FFFF
 6506 4f74 488D8DD0 		leaq	-2608(%rbp), %rcx
 6506      F5FFFF
 6507 4f7b 488D85D0 		leaq	-2096(%rbp), %rax
 6507      F7FFFF
 6508 4f82 4889CE   		movq	%rcx, %rsi
 6509 4f85 4889C7   		movq	%rax, %rdi
 6510 4f88 E8000000 		call	encrypter
 6510      00
1390:final_with_print.c **** 					printf("%s\n", "The co_ordinates are re-encrypted in binary form");
 6511              		.loc 1 1390 0
 6512 4f8d BF000000 		movl	$.LC164, %edi
 6512      00
 6513 4f92 E8000000 		call	puts
 6513      00
1391:final_with_print.c **** 					printf("%s\n", "The re-encrypted co_ords are as follows");
 6514              		.loc 1 1391 0
 6515 4f97 BF000000 		movl	$.LC165, %edi
 6515      00
 6516 4f9c E8000000 		call	puts
 6516      00
 6517              	.LBB57:
1392:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 6518              		.loc 1 1392 0
 6519 4fa1 C785D8F2 		movl	$0, -3368(%rbp)
 6519      FFFF0000 
 6519      0000
 6520 4fab EB27     		jmp	.L322
 6521              	.L323:
1393:final_with_print.c **** 					{
1394:final_with_print.c **** 						printf("%d ", encrypted_pos2[i]);
 6522              		.loc 1 1394 0 discriminator 3
 6523 4fad 8B85D8F2 		movl	-3368(%rbp), %eax
 6523      FFFF
 6524 4fb3 4898     		cltq
 6525 4fb5 8B848550 		movl	-1968(%rbp,%rax,4), %eax
 6525      F8FFFF
 6526 4fbc 89C6     		movl	%eax, %esi
 6527 4fbe BF000000 		movl	$.LC10, %edi
 6527      00
 6528 4fc3 B8000000 		movl	$0, %eax
 6528      00
 6529 4fc8 E8000000 		call	printf
 6529      00
1392:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 6530              		.loc 1 1392 0 discriminator 3
 6531 4fcd 8385D8F2 		addl	$1, -3368(%rbp)
 6531      FFFF01
 6532              	.L322:
1392:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 6533              		.loc 1 1392 0 is_stmt 0 discriminator 1
 6534 4fd4 83BDD8F2 		cmpl	$31, -3368(%rbp)
 6534      FFFF1F
 6535 4fdb 7ED0     		jle	.L323
 6536              	.LBE57:
1395:final_with_print.c **** 					}
1396:final_with_print.c **** 					printf("\n");
 6537              		.loc 1 1396 0 is_stmt 1
 6538 4fdd BF0A0000 		movl	$10, %edi
 6538      00
 6539 4fe2 E8000000 		call	putchar
 6539      00
1397:final_with_print.c **** 					uint8 send_encrypted_coord[4];
1398:final_with_print.c **** 					printf("%s\n", "Converting the re-encrypted data in binary to uint8 form");
 6540              		.loc 1 1398 0
 6541 4fe7 BF000000 		movl	$.LC166, %edi
 6541      00
 6542 4fec E8000000 		call	puts
 6542      00
1399:final_with_print.c **** 					BinTouint8(send_encrypted_coord, encrypted_pos);
 6543              		.loc 1 1399 0
 6544 4ff1 488D9550 		leaq	-2224(%rbp), %rdx
 6544      F7FFFF
 6545 4ff8 488D8570 		leaq	-144(%rbp), %rax
 6545      FFFFFF
 6546 4fff 4889D6   		movq	%rdx, %rsi
 6547 5002 4889C7   		movq	%rax, %rdi
 6548 5005 E8000000 		call	BinTouint8
 6548      00
1400:final_with_print.c **** 					printf("%s\n", "Preparing to send the encrypted co_ordinates ");
 6549              		.loc 1 1400 0
 6550 500a BF000000 		movl	$.LC167, %edi
 6550      00
 6551 500f E8000000 		call	puts
 6551      00
1401:final_with_print.c **** 					delay(del);
 6552              		.loc 1 1401 0
 6553 5014 8B85B0F3 		movl	-3152(%rbp), %eax
 6553      FFFF
 6554 501a 89C7     		movl	%eax, %edi
 6555 501c E8000000 		call	delay
 6555      00
1402:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &send_encrypted_coord[0], &error);
 6556              		.loc 1 1402 0
 6557 5021 8B85C8F2 		movl	-3384(%rbp), %eax
 6557      FFFF
 6558 5027 01C0     		addl	%eax, %eax
 6559 5029 83C001   		addl	$1, %eax
 6560 502c 0FB6F0   		movzbl	%al, %esi
 6561 502f 488B85E0 		movq	-3104(%rbp), %rax
 6561      F3FFFF
 6562 5036 488D8DE8 		leaq	-3096(%rbp), %rcx
 6562      F3FFFF
 6563 503d 488D9570 		leaq	-144(%rbp), %rdx
 6563      FFFFFF
 6564 5044 4989C8   		movq	%rcx, %r8
 6565 5047 4889D1   		movq	%rdx, %rcx
 6566 504a BA010000 		movl	$1, %edx
 6566      00
 6567 504f 4889C7   		movq	%rax, %rdi
 6568 5052 E8000000 		call	flWriteChannel
 6568      00
 6569 5057 8985BCF2 		movl	%eax, -3396(%rbp)
 6569      FFFF
1403:final_with_print.c **** 					delay(del);
 6570              		.loc 1 1403 0
 6571 505d 8B85B0F3 		movl	-3152(%rbp), %eax
 6571      FFFF
 6572 5063 89C7     		movl	%eax, %edi
 6573 5065 E8000000 		call	delay
 6573      00
1404:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &send_encrypted_coord[1], &error);
 6574              		.loc 1 1404 0
 6575 506a 8B85C8F2 		movl	-3384(%rbp), %eax
 6575      FFFF
 6576 5070 01C0     		addl	%eax, %eax
 6577 5072 83C001   		addl	$1, %eax
 6578 5075 0FB6F0   		movzbl	%al, %esi
 6579 5078 488B85E0 		movq	-3104(%rbp), %rax
 6579      F3FFFF
 6580 507f 488D8DE8 		leaq	-3096(%rbp), %rcx
 6580      F3FFFF
 6581 5086 488D9570 		leaq	-144(%rbp), %rdx
 6581      FFFFFF
 6582 508d 4883C201 		addq	$1, %rdx
 6583 5091 4989C8   		movq	%rcx, %r8
 6584 5094 4889D1   		movq	%rdx, %rcx
 6585 5097 BA010000 		movl	$1, %edx
 6585      00
 6586 509c 4889C7   		movq	%rax, %rdi
 6587 509f E8000000 		call	flWriteChannel
 6587      00
 6588 50a4 8985BCF2 		movl	%eax, -3396(%rbp)
 6588      FFFF
1405:final_with_print.c **** 					delay(del);
 6589              		.loc 1 1405 0
 6590 50aa 8B85B0F3 		movl	-3152(%rbp), %eax
 6590      FFFF
 6591 50b0 89C7     		movl	%eax, %edi
 6592 50b2 E8000000 		call	delay
 6592      00
1406:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &send_encrypted_coord[2], &error);
 6593              		.loc 1 1406 0
 6594 50b7 8B85C8F2 		movl	-3384(%rbp), %eax
 6594      FFFF
 6595 50bd 01C0     		addl	%eax, %eax
 6596 50bf 83C001   		addl	$1, %eax
 6597 50c2 0FB6F0   		movzbl	%al, %esi
 6598 50c5 488B85E0 		movq	-3104(%rbp), %rax
 6598      F3FFFF
 6599 50cc 488D8DE8 		leaq	-3096(%rbp), %rcx
 6599      F3FFFF
 6600 50d3 488D9570 		leaq	-144(%rbp), %rdx
 6600      FFFFFF
 6601 50da 4883C202 		addq	$2, %rdx
 6602 50de 4989C8   		movq	%rcx, %r8
 6603 50e1 4889D1   		movq	%rdx, %rcx
 6604 50e4 BA010000 		movl	$1, %edx
 6604      00
 6605 50e9 4889C7   		movq	%rax, %rdi
 6606 50ec E8000000 		call	flWriteChannel
 6606      00
 6607 50f1 8985BCF2 		movl	%eax, -3396(%rbp)
 6607      FFFF
1407:final_with_print.c **** 					delay(del);
 6608              		.loc 1 1407 0
 6609 50f7 8B85B0F3 		movl	-3152(%rbp), %eax
 6609      FFFF
 6610 50fd 89C7     		movl	%eax, %edi
 6611 50ff E8000000 		call	delay
 6611      00
1408:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &send_encrypted_coord[3], &error);
 6612              		.loc 1 1408 0
 6613 5104 8B85C8F2 		movl	-3384(%rbp), %eax
 6613      FFFF
 6614 510a 01C0     		addl	%eax, %eax
 6615 510c 83C001   		addl	$1, %eax
 6616 510f 0FB6F0   		movzbl	%al, %esi
 6617 5112 488B85E0 		movq	-3104(%rbp), %rax
 6617      F3FFFF
 6618 5119 488D8DE8 		leaq	-3096(%rbp), %rcx
 6618      F3FFFF
 6619 5120 488D9570 		leaq	-144(%rbp), %rdx
 6619      FFFFFF
 6620 5127 4883C203 		addq	$3, %rdx
 6621 512b 4989C8   		movq	%rcx, %r8
 6622 512e 4889D1   		movq	%rdx, %rcx
 6623 5131 BA010000 		movl	$1, %edx
 6623      00
 6624 5136 4889C7   		movq	%rax, %rdi
 6625 5139 E8000000 		call	flWriteChannel
 6625      00
 6626 513e 8985BCF2 		movl	%eax, -3396(%rbp)
 6626      FFFF
1409:final_with_print.c **** 
1410:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6627              		.loc 1 1410 0
 6628 5144 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6628      FFFF00
 6629 514b 740F     		je	.L324
 6630              		.loc 1 1410 0 is_stmt 0 discriminator 1
 6631 514d C785B8F2 		movl	$1, -3400(%rbp)
 6631      FFFF0100 
 6631      0000
 6632 5157 E9842D00 		jmp	.L230
 6632      00
 6633              	.L324:
1411:final_with_print.c **** 					printf("%s\n", "Successfully send the encrypted co_ordinates in uint8 form");
 6634              		.loc 1 1411 0 is_stmt 1
 6635 515c BF000000 		movl	$.LC168, %edi
 6635      00
 6636 5161 E8000000 		call	puts
 6636      00
1412:final_with_print.c **** 
1413:final_with_print.c **** 					printf("%s\n", "----------------------H2.2 ended----------------------- ");
 6637              		.loc 1 1413 0
 6638 5166 BF000000 		movl	$.LC169, %edi
 6638      00
 6639 516b E8000000 		call	puts
 6639      00
1414:final_with_print.c **** 
1415:final_with_print.c **** 					printf("%s\n", "----------------------H2.3 started----------------------- ");
 6640              		.loc 1 1415 0
 6641 5170 BF000000 		movl	$.LC170, %edi
 6641      00
 6642 5175 E8000000 		call	puts
 6642      00
1416:final_with_print.c **** 					printf("%s\n", "Waiting to get Ack1 from the fpga controller");
 6643              		.loc 1 1416 0
 6644 517a BF000000 		movl	$.LC171, %edi
 6644      00
 6645 517f E8000000 		call	puts
 6645      00
1417:final_with_print.c **** 					uint8 first_ack1_received[4];
1418:final_with_print.c **** 					delay(del);
 6646              		.loc 1 1418 0
 6647 5184 8B85B0F3 		movl	-3152(%rbp), %eax
 6647      FFFF
 6648 518a 89C7     		movl	%eax, %edi
 6649 518c E8000000 		call	delay
 6649      00
1419:final_with_print.c **** 					fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &first_ack1_received[0], &error);
 6650              		.loc 1 1419 0
 6651 5191 8B85C8F2 		movl	-3384(%rbp), %eax
 6651      FFFF
 6652 5197 01C0     		addl	%eax, %eax
 6653 5199 0FB6F0   		movzbl	%al, %esi
 6654 519c 488B85E0 		movq	-3104(%rbp), %rax
 6654      F3FFFF
 6655 51a3 488D8DE8 		leaq	-3096(%rbp), %rcx
 6655      F3FFFF
 6656 51aa 488D5580 		leaq	-128(%rbp), %rdx
 6657 51ae 4989C8   		movq	%rcx, %r8
 6658 51b1 4889D1   		movq	%rdx, %rcx
 6659 51b4 BA010000 		movl	$1, %edx
 6659      00
 6660 51b9 4889C7   		movq	%rax, %rdi
 6661 51bc E8000000 		call	flReadChannelAsyncSubmit
 6661      00
 6662 51c1 8985BCF2 		movl	%eax, -3396(%rbp)
 6662      FFFF
1420:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6663              		.loc 1 1420 0
 6664 51c7 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6664      FFFF00
 6665 51ce 740F     		je	.L325
 6666              		.loc 1 1420 0 is_stmt 0 discriminator 1
 6667 51d0 C785B8F2 		movl	$1, -3400(%rbp)
 6667      FFFF0100 
 6667      0000
 6668 51da E9012D00 		jmp	.L230
 6668      00
 6669              	.L325:
1421:final_with_print.c **** 					fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 6670              		.loc 1 1421 0 is_stmt 1
 6671 51df 488B85E0 		movq	-3104(%rbp), %rax
 6671      F3FFFF
 6672 51e6 488DBDE8 		leaq	-3096(%rbp), %rdi
 6672      F3FFFF
 6673 51ed 488D8DB4 		leaq	-3404(%rbp), %rcx
 6673      F2FFFF
 6674 51f4 488D95B4 		leaq	-3404(%rbp), %rdx
 6674      F2FFFF
 6675 51fb 488DB5F0 		leaq	-3088(%rbp), %rsi
 6675      F3FFFF
 6676 5202 4989F8   		movq	%rdi, %r8
 6677 5205 4889C7   		movq	%rax, %rdi
 6678 5208 E8000000 		call	flReadChannelAsyncAwait
 6678      00
 6679 520d 8985BCF2 		movl	%eax, -3396(%rbp)
 6679      FFFF
1422:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6680              		.loc 1 1422 0
 6681 5213 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6681      FFFF00
 6682 521a 740F     		je	.L326
 6683              		.loc 1 1422 0 is_stmt 0 discriminator 1
 6684 521c C785B8F2 		movl	$1, -3400(%rbp)
 6684      FFFF0100 
 6684      0000
 6685 5226 E9B52C00 		jmp	.L230
 6685      00
 6686              	.L326:
1423:final_with_print.c **** 					if(first_ack1_received[0] == reset) 
 6687              		.loc 1 1423 0 is_stmt 1
 6688 522b 0FB64580 		movzbl	-128(%rbp), %eax
 6689 522f 3A85AFF2 		cmpb	-3409(%rbp), %al
 6689      FFFF
 6690 5235 7516     		jne	.L327
1424:final_with_print.c **** 						{
1425:final_with_print.c **** 							k--;
 6691              		.loc 1 1425 0
 6692 5237 83ADC8F2 		subl	$1, -3384(%rbp)
 6692      FFFF01
1426:final_with_print.c **** 							printf("%s\n", "-------------------------RESET------------------------");							 
 6693              		.loc 1 1426 0
 6694 523e BF000000 		movl	$.LC157, %edi
 6694      00
 6695 5243 E8000000 		call	puts
 6695      00
1427:final_with_print.c **** 							continue;
 6696              		.loc 1 1427 0
 6697 5248 E9252C00 		jmp	.L305
 6697      00
 6698              	.L327:
1428:final_with_print.c **** 						}
1429:final_with_print.c **** 					delay(del);
 6699              		.loc 1 1429 0
 6700 524d 8B85B0F3 		movl	-3152(%rbp), %eax
 6700      FFFF
 6701 5253 89C7     		movl	%eax, %edi
 6702 5255 E8000000 		call	delay
 6702      00
1430:final_with_print.c **** 					fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &first_ack1_received[1], &error);
 6703              		.loc 1 1430 0
 6704 525a 8B85C8F2 		movl	-3384(%rbp), %eax
 6704      FFFF
 6705 5260 01C0     		addl	%eax, %eax
 6706 5262 0FB6F0   		movzbl	%al, %esi
 6707 5265 488B85E0 		movq	-3104(%rbp), %rax
 6707      F3FFFF
 6708 526c 488D8DE8 		leaq	-3096(%rbp), %rcx
 6708      F3FFFF
 6709 5273 488D5580 		leaq	-128(%rbp), %rdx
 6710 5277 4883C201 		addq	$1, %rdx
 6711 527b 4989C8   		movq	%rcx, %r8
 6712 527e 4889D1   		movq	%rdx, %rcx
 6713 5281 BA010000 		movl	$1, %edx
 6713      00
 6714 5286 4889C7   		movq	%rax, %rdi
 6715 5289 E8000000 		call	flReadChannelAsyncSubmit
 6715      00
 6716 528e 8985BCF2 		movl	%eax, -3396(%rbp)
 6716      FFFF
1431:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6717              		.loc 1 1431 0
 6718 5294 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6718      FFFF00
 6719 529b 740F     		je	.L328
 6720              		.loc 1 1431 0 is_stmt 0 discriminator 1
 6721 529d C785B8F2 		movl	$1, -3400(%rbp)
 6721      FFFF0100 
 6721      0000
 6722 52a7 E9342C00 		jmp	.L230
 6722      00
 6723              	.L328:
1432:final_with_print.c **** 					fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 6724              		.loc 1 1432 0 is_stmt 1
 6725 52ac 488B85E0 		movq	-3104(%rbp), %rax
 6725      F3FFFF
 6726 52b3 488DBDE8 		leaq	-3096(%rbp), %rdi
 6726      F3FFFF
 6727 52ba 488D8DB4 		leaq	-3404(%rbp), %rcx
 6727      F2FFFF
 6728 52c1 488D95B4 		leaq	-3404(%rbp), %rdx
 6728      F2FFFF
 6729 52c8 488DB5F0 		leaq	-3088(%rbp), %rsi
 6729      F3FFFF
 6730 52cf 4989F8   		movq	%rdi, %r8
 6731 52d2 4889C7   		movq	%rax, %rdi
 6732 52d5 E8000000 		call	flReadChannelAsyncAwait
 6732      00
 6733 52da 8985BCF2 		movl	%eax, -3396(%rbp)
 6733      FFFF
1433:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6734              		.loc 1 1433 0
 6735 52e0 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6735      FFFF00
 6736 52e7 740F     		je	.L329
 6737              		.loc 1 1433 0 is_stmt 0 discriminator 1
 6738 52e9 C785B8F2 		movl	$1, -3400(%rbp)
 6738      FFFF0100 
 6738      0000
 6739 52f3 E9E82B00 		jmp	.L230
 6739      00
 6740              	.L329:
1434:final_with_print.c **** 					if(first_ack1_received[1] == reset) 
 6741              		.loc 1 1434 0 is_stmt 1
 6742 52f8 0FB64581 		movzbl	-127(%rbp), %eax
 6743 52fc 3A85AFF2 		cmpb	-3409(%rbp), %al
 6743      FFFF
 6744 5302 7516     		jne	.L330
1435:final_with_print.c **** 						{
1436:final_with_print.c **** 							k--; 
 6745              		.loc 1 1436 0
 6746 5304 83ADC8F2 		subl	$1, -3384(%rbp)
 6746      FFFF01
1437:final_with_print.c **** 							printf("%s\n", "-------------------------RESET------------------------");
 6747              		.loc 1 1437 0
 6748 530b BF000000 		movl	$.LC157, %edi
 6748      00
 6749 5310 E8000000 		call	puts
 6749      00
1438:final_with_print.c **** 							continue;
 6750              		.loc 1 1438 0
 6751 5315 E9582B00 		jmp	.L305
 6751      00
 6752              	.L330:
1439:final_with_print.c **** 						}
1440:final_with_print.c **** 					delay(del);
 6753              		.loc 1 1440 0
 6754 531a 8B85B0F3 		movl	-3152(%rbp), %eax
 6754      FFFF
 6755 5320 89C7     		movl	%eax, %edi
 6756 5322 E8000000 		call	delay
 6756      00
1441:final_with_print.c **** 					fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &first_ack1_received[2], &error);
 6757              		.loc 1 1441 0
 6758 5327 8B85C8F2 		movl	-3384(%rbp), %eax
 6758      FFFF
 6759 532d 01C0     		addl	%eax, %eax
 6760 532f 0FB6F0   		movzbl	%al, %esi
 6761 5332 488B85E0 		movq	-3104(%rbp), %rax
 6761      F3FFFF
 6762 5339 488D8DE8 		leaq	-3096(%rbp), %rcx
 6762      F3FFFF
 6763 5340 488D5580 		leaq	-128(%rbp), %rdx
 6764 5344 4883C202 		addq	$2, %rdx
 6765 5348 4989C8   		movq	%rcx, %r8
 6766 534b 4889D1   		movq	%rdx, %rcx
 6767 534e BA010000 		movl	$1, %edx
 6767      00
 6768 5353 4889C7   		movq	%rax, %rdi
 6769 5356 E8000000 		call	flReadChannelAsyncSubmit
 6769      00
 6770 535b 8985BCF2 		movl	%eax, -3396(%rbp)
 6770      FFFF
1442:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6771              		.loc 1 1442 0
 6772 5361 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6772      FFFF00
 6773 5368 740F     		je	.L331
 6774              		.loc 1 1442 0 is_stmt 0 discriminator 1
 6775 536a C785B8F2 		movl	$1, -3400(%rbp)
 6775      FFFF0100 
 6775      0000
 6776 5374 E9672B00 		jmp	.L230
 6776      00
 6777              	.L331:
1443:final_with_print.c **** 					fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 6778              		.loc 1 1443 0 is_stmt 1
 6779 5379 488B85E0 		movq	-3104(%rbp), %rax
 6779      F3FFFF
 6780 5380 488DBDE8 		leaq	-3096(%rbp), %rdi
 6780      F3FFFF
 6781 5387 488D8DB4 		leaq	-3404(%rbp), %rcx
 6781      F2FFFF
 6782 538e 488D95B4 		leaq	-3404(%rbp), %rdx
 6782      F2FFFF
 6783 5395 488DB5F0 		leaq	-3088(%rbp), %rsi
 6783      F3FFFF
 6784 539c 4989F8   		movq	%rdi, %r8
 6785 539f 4889C7   		movq	%rax, %rdi
 6786 53a2 E8000000 		call	flReadChannelAsyncAwait
 6786      00
 6787 53a7 8985BCF2 		movl	%eax, -3396(%rbp)
 6787      FFFF
1444:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6788              		.loc 1 1444 0
 6789 53ad 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6789      FFFF00
 6790 53b4 740F     		je	.L332
 6791              		.loc 1 1444 0 is_stmt 0 discriminator 1
 6792 53b6 C785B8F2 		movl	$1, -3400(%rbp)
 6792      FFFF0100 
 6792      0000
 6793 53c0 E91B2B00 		jmp	.L230
 6793      00
 6794              	.L332:
1445:final_with_print.c **** 					if(first_ack1_received[2] == reset) 
 6795              		.loc 1 1445 0 is_stmt 1
 6796 53c5 0FB64582 		movzbl	-126(%rbp), %eax
 6797 53c9 3A85AFF2 		cmpb	-3409(%rbp), %al
 6797      FFFF
 6798 53cf 7516     		jne	.L333
1446:final_with_print.c **** 						{
1447:final_with_print.c **** 							k--; 
 6799              		.loc 1 1447 0
 6800 53d1 83ADC8F2 		subl	$1, -3384(%rbp)
 6800      FFFF01
1448:final_with_print.c **** 							printf("%s\n", "-------------------------RESET------------------------");
 6801              		.loc 1 1448 0
 6802 53d8 BF000000 		movl	$.LC157, %edi
 6802      00
 6803 53dd E8000000 		call	puts
 6803      00
1449:final_with_print.c **** 							continue;
 6804              		.loc 1 1449 0
 6805 53e2 E98B2A00 		jmp	.L305
 6805      00
 6806              	.L333:
1450:final_with_print.c **** 						}
1451:final_with_print.c **** 					delay(del);
 6807              		.loc 1 1451 0
 6808 53e7 8B85B0F3 		movl	-3152(%rbp), %eax
 6808      FFFF
 6809 53ed 89C7     		movl	%eax, %edi
 6810 53ef E8000000 		call	delay
 6810      00
1452:final_with_print.c **** 					fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &first_ack1_received[3], &error);
 6811              		.loc 1 1452 0
 6812 53f4 8B85C8F2 		movl	-3384(%rbp), %eax
 6812      FFFF
 6813 53fa 01C0     		addl	%eax, %eax
 6814 53fc 0FB6F0   		movzbl	%al, %esi
 6815 53ff 488B85E0 		movq	-3104(%rbp), %rax
 6815      F3FFFF
 6816 5406 488D8DE8 		leaq	-3096(%rbp), %rcx
 6816      F3FFFF
 6817 540d 488D5580 		leaq	-128(%rbp), %rdx
 6818 5411 4883C203 		addq	$3, %rdx
 6819 5415 4989C8   		movq	%rcx, %r8
 6820 5418 4889D1   		movq	%rdx, %rcx
 6821 541b BA010000 		movl	$1, %edx
 6821      00
 6822 5420 4889C7   		movq	%rax, %rdi
 6823 5423 E8000000 		call	flReadChannelAsyncSubmit
 6823      00
 6824 5428 8985BCF2 		movl	%eax, -3396(%rbp)
 6824      FFFF
1453:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6825              		.loc 1 1453 0
 6826 542e 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6826      FFFF00
 6827 5435 740F     		je	.L334
 6828              		.loc 1 1453 0 is_stmt 0 discriminator 1
 6829 5437 C785B8F2 		movl	$1, -3400(%rbp)
 6829      FFFF0100 
 6829      0000
 6830 5441 E99A2A00 		jmp	.L230
 6830      00
 6831              	.L334:
1454:final_with_print.c **** 					fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 6832              		.loc 1 1454 0 is_stmt 1
 6833 5446 488B85E0 		movq	-3104(%rbp), %rax
 6833      F3FFFF
 6834 544d 488DBDE8 		leaq	-3096(%rbp), %rdi
 6834      F3FFFF
 6835 5454 488D8DB4 		leaq	-3404(%rbp), %rcx
 6835      F2FFFF
 6836 545b 488D95B4 		leaq	-3404(%rbp), %rdx
 6836      F2FFFF
 6837 5462 488DB5F0 		leaq	-3088(%rbp), %rsi
 6837      F3FFFF
 6838 5469 4989F8   		movq	%rdi, %r8
 6839 546c 4889C7   		movq	%rax, %rdi
 6840 546f E8000000 		call	flReadChannelAsyncAwait
 6840      00
 6841 5474 8985BCF2 		movl	%eax, -3396(%rbp)
 6841      FFFF
1455:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6842              		.loc 1 1455 0
 6843 547a 83BDBCF2 		cmpl	$0, -3396(%rbp)
 6843      FFFF00
 6844 5481 740F     		je	.L335
 6845              		.loc 1 1455 0 is_stmt 0 discriminator 1
 6846 5483 C785B8F2 		movl	$1, -3400(%rbp)
 6846      FFFF0100 
 6846      0000
 6847 548d E94E2A00 		jmp	.L230
 6847      00
 6848              	.L335:
1456:final_with_print.c **** 					if(first_ack1_received[3] == reset) 
 6849              		.loc 1 1456 0 is_stmt 1
 6850 5492 0FB64583 		movzbl	-125(%rbp), %eax
 6851 5496 3A85AFF2 		cmpb	-3409(%rbp), %al
 6851      FFFF
 6852 549c 7516     		jne	.L336
1457:final_with_print.c **** 						{
1458:final_with_print.c **** 							k--; 
 6853              		.loc 1 1458 0
 6854 549e 83ADC8F2 		subl	$1, -3384(%rbp)
 6854      FFFF01
1459:final_with_print.c **** 							printf("%s\n", "-------------------------RESET------------------------");
 6855              		.loc 1 1459 0
 6856 54a5 BF000000 		movl	$.LC157, %edi
 6856      00
 6857 54aa E8000000 		call	puts
 6857      00
1460:final_with_print.c **** 							continue;
 6858              		.loc 1 1460 0
 6859 54af E9BE2900 		jmp	.L305
 6859      00
 6860              	.L336:
1461:final_with_print.c **** 						}
1462:final_with_print.c **** 					printf("%s\n", "First ack1 received successfully");
 6861              		.loc 1 1462 0
 6862 54b4 BF000000 		movl	$.LC172, %edi
 6862      00
 6863 54b9 E8000000 		call	puts
 6863      00
1463:final_with_print.c **** 					printf("%s\n", "The first ack1 is ----- in uint8 form");
 6864              		.loc 1 1463 0
 6865 54be BF000000 		movl	$.LC173, %edi
 6865      00
 6866 54c3 E8000000 		call	puts
 6866      00
 6867              	.LBB58:
1464:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 6868              		.loc 1 1464 0
 6869 54c8 C785DCF2 		movl	$0, -3364(%rbp)
 6869      FFFF0000 
 6869      0000
 6870 54d2 EB28     		jmp	.L337
 6871              	.L338:
1465:final_with_print.c **** 					{
1466:final_with_print.c **** 						printf("%d ", first_ack1_received[i]);
 6872              		.loc 1 1466 0 discriminator 3
 6873 54d4 8B85DCF2 		movl	-3364(%rbp), %eax
 6873      FFFF
 6874 54da 4898     		cltq
 6875 54dc 0FB64405 		movzbl	-128(%rbp,%rax), %eax
 6875      80
 6876 54e1 0FB6C0   		movzbl	%al, %eax
 6877 54e4 89C6     		movl	%eax, %esi
 6878 54e6 BF000000 		movl	$.LC10, %edi
 6878      00
 6879 54eb B8000000 		movl	$0, %eax
 6879      00
 6880 54f0 E8000000 		call	printf
 6880      00
1464:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 6881              		.loc 1 1464 0 discriminator 3
 6882 54f5 8385DCF2 		addl	$1, -3364(%rbp)
 6882      FFFF01
 6883              	.L337:
1464:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 6884              		.loc 1 1464 0 is_stmt 0 discriminator 1
 6885 54fc 83BDDCF2 		cmpl	$3, -3364(%rbp)
 6885      FFFF03
 6886 5503 7ECF     		jle	.L338
 6887              	.LBE58:
1467:final_with_print.c **** 					}
1468:final_with_print.c **** 					printf("\n");
 6888              		.loc 1 1468 0 is_stmt 1
 6889 5505 BF0A0000 		movl	$10, %edi
 6889      00
 6890 550a E8000000 		call	putchar
 6890      00
1469:final_with_print.c **** 					printf("%s\n", "----------------------H2.3 ended----------------------- ");
 6891              		.loc 1 1469 0
 6892 550f BF000000 		movl	$.LC174, %edi
 6892      00
 6893 5514 E8000000 		call	puts
 6893      00
1470:final_with_print.c **** 					printf("%s\n", "----------------------H2.4 started----------------------- ");
 6894              		.loc 1 1470 0
 6895 5519 BF000000 		movl	$.LC175, %edi
 6895      00
 6896 551e E8000000 		call	puts
 6896      00
1471:final_with_print.c **** 					
1472:final_with_print.c **** 					int encrpyted_ack1[32];
1473:final_with_print.c **** 					printf("%s\n", "Converting encrypted ack1 from uint8 to binary");
 6897              		.loc 1 1473 0
 6898 5523 BF000000 		movl	$.LC176, %edi
 6898      00
 6899 5528 E8000000 		call	puts
 6899      00
1474:final_with_print.c **** 					uint8ToBin(first_ack1_received, encrpyted_ack1);
 6900              		.loc 1 1474 0
 6901 552d 488D95D0 		leaq	-1840(%rbp), %rdx
 6901      F8FFFF
 6902 5534 488D4580 		leaq	-128(%rbp), %rax
 6903 5538 4889D6   		movq	%rdx, %rsi
 6904 553b 4889C7   		movq	%rax, %rdi
 6905 553e E8000000 		call	uint8ToBin
 6905      00
1475:final_with_print.c **** 					printf("%s\n", "The encrypted ack1 is as follows in binary form --");
 6906              		.loc 1 1475 0
 6907 5543 BF000000 		movl	$.LC177, %edi
 6907      00
 6908 5548 E8000000 		call	puts
 6908      00
 6909              	.LBB59:
1476:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 6910              		.loc 1 1476 0
 6911 554d C785E0F2 		movl	$0, -3360(%rbp)
 6911      FFFF0000 
 6911      0000
 6912 5557 EB27     		jmp	.L339
 6913              	.L340:
1477:final_with_print.c **** 					{
1478:final_with_print.c **** 						printf("%d ", encrpyted_ack1[i]);
 6914              		.loc 1 1478 0 discriminator 3
 6915 5559 8B85E0F2 		movl	-3360(%rbp), %eax
 6915      FFFF
 6916 555f 4898     		cltq
 6917 5561 8B8485D0 		movl	-1840(%rbp,%rax,4), %eax
 6917      F8FFFF
 6918 5568 89C6     		movl	%eax, %esi
 6919 556a BF000000 		movl	$.LC10, %edi
 6919      00
 6920 556f B8000000 		movl	$0, %eax
 6920      00
 6921 5574 E8000000 		call	printf
 6921      00
1476:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 6922              		.loc 1 1476 0 discriminator 3
 6923 5579 8385E0F2 		addl	$1, -3360(%rbp)
 6923      FFFF01
 6924              	.L339:
1476:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 6925              		.loc 1 1476 0 is_stmt 0 discriminator 1
 6926 5580 83BDE0F2 		cmpl	$31, -3360(%rbp)
 6926      FFFF1F
 6927 5587 7ED0     		jle	.L340
 6928              	.LBE59:
1479:final_with_print.c **** 					}
1480:final_with_print.c **** 					printf("\n");
 6929              		.loc 1 1480 0 is_stmt 1
 6930 5589 BF0A0000 		movl	$10, %edi
 6930      00
 6931 558e E8000000 		call	putchar
 6931      00
1481:final_with_print.c **** 					int decrypted_ack1[32];
1482:final_with_print.c **** 					decrypter(encrpyted_ack1, K, decrypted_ack1);
 6932              		.loc 1 1482 0
 6933 5593 488D9550 		leaq	-1712(%rbp), %rdx
 6933      F9FFFF
 6934 559a 488D8DD0 		leaq	-2608(%rbp), %rcx
 6934      F5FFFF
 6935 55a1 488D85D0 		leaq	-1840(%rbp), %rax
 6935      F8FFFF
 6936 55a8 4889CE   		movq	%rcx, %rsi
 6937 55ab 4889C7   		movq	%rax, %rdi
 6938 55ae E8000000 		call	decrypter
 6938      00
1483:final_with_print.c **** 					printf("%s\n", "The decrypted ack1 in binary is as follows --");
 6939              		.loc 1 1483 0
 6940 55b3 BF000000 		movl	$.LC178, %edi
 6940      00
 6941 55b8 E8000000 		call	puts
 6941      00
 6942              	.LBB60:
1484:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 6943              		.loc 1 1484 0
 6944 55bd C785E4F2 		movl	$0, -3356(%rbp)
 6944      FFFF0000 
 6944      0000
 6945 55c7 EB27     		jmp	.L341
 6946              	.L342:
1485:final_with_print.c **** 					{
1486:final_with_print.c **** 						printf("%d ", decrypted_ack1[i]);
 6947              		.loc 1 1486 0 discriminator 3
 6948 55c9 8B85E4F2 		movl	-3356(%rbp), %eax
 6948      FFFF
 6949 55cf 4898     		cltq
 6950 55d1 8B848550 		movl	-1712(%rbp,%rax,4), %eax
 6950      F9FFFF
 6951 55d8 89C6     		movl	%eax, %esi
 6952 55da BF000000 		movl	$.LC10, %edi
 6952      00
 6953 55df B8000000 		movl	$0, %eax
 6953      00
 6954 55e4 E8000000 		call	printf
 6954      00
1484:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 6955              		.loc 1 1484 0 discriminator 3
 6956 55e9 8385E4F2 		addl	$1, -3356(%rbp)
 6956      FFFF01
 6957              	.L341:
1484:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 6958              		.loc 1 1484 0 is_stmt 0 discriminator 1
 6959 55f0 83BDE4F2 		cmpl	$31, -3356(%rbp)
 6959      FFFF1F
 6960 55f7 7ED0     		jle	.L342
 6961              	.LBE60:
1487:final_with_print.c **** 					}
1488:final_with_print.c **** 					printf("\n");
 6962              		.loc 1 1488 0 is_stmt 1
 6963 55f9 BF0A0000 		movl	$10, %edi
 6963      00
 6964 55fe E8000000 		call	putchar
 6964      00
1489:final_with_print.c **** 					printf("%s\n", "Checking if this ack1 is equal to the original ack1 ");
 6965              		.loc 1 1489 0
 6966 5603 BF000000 		movl	$.LC179, %edi
 6966      00
 6967 5608 E8000000 		call	puts
 6967      00
1490:final_with_print.c **** 
1491:final_with_print.c **** 					int ack_helper = 0;
 6968              		.loc 1 1491 0
 6969 560d C785E8F2 		movl	$0, -3352(%rbp)
 6969      FFFF0000 
 6969      0000
 6970              	.LBB61:
1492:final_with_print.c **** 					for(int i=0; i<32; i++)
 6971              		.loc 1 1492 0
 6972 5617 C785ECF2 		movl	$0, -3348(%rbp)
 6972      FFFF0000 
 6972      0000
 6973 5621 EB33     		jmp	.L343
 6974              	.L345:
1493:final_with_print.c **** 					{
1494:final_with_print.c **** 						if(decrypted_ack1[i] != ack1[i])
 6975              		.loc 1 1494 0
 6976 5623 8B85ECF2 		movl	-3348(%rbp), %eax
 6976      FFFF
 6977 5629 4898     		cltq
 6978 562b 8B948550 		movl	-1712(%rbp,%rax,4), %edx
 6978      F9FFFF
 6979 5632 8B85ECF2 		movl	-3348(%rbp), %eax
 6979      FFFF
 6980 5638 4898     		cltq
 6981 563a 8B848550 		movl	-2480(%rbp,%rax,4), %eax
 6981      F6FFFF
 6982 5641 39C2     		cmpl	%eax, %edx
 6983 5643 740A     		je	.L344
1495:final_with_print.c **** 						{
1496:final_with_print.c **** 							ack_helper = 1;
 6984              		.loc 1 1496 0
 6985 5645 C785E8F2 		movl	$1, -3352(%rbp)
 6985      FFFF0100 
 6985      0000
 6986              	.L344:
1492:final_with_print.c **** 					{
 6987              		.loc 1 1492 0 discriminator 2
 6988 564f 8385ECF2 		addl	$1, -3348(%rbp)
 6988      FFFF01
 6989              	.L343:
1492:final_with_print.c **** 					{
 6990              		.loc 1 1492 0 is_stmt 0 discriminator 1
 6991 5656 83BDECF2 		cmpl	$31, -3348(%rbp)
 6991      FFFF1F
 6992 565d 7EC4     		jle	.L345
 6993              	.LBE61:
1497:final_with_print.c **** 						}
1498:final_with_print.c **** 					}
1499:final_with_print.c **** 
1500:final_with_print.c **** 					if(ack_helper == 1)
 6994              		.loc 1 1500 0 is_stmt 1
 6995 565f 83BDE8F2 		cmpl	$1, -3352(%rbp)
 6995      FFFF01
 6996 5666 0F85F104 		jne	.L346
 6996      0000
 6997              	.LBB62:
1501:final_with_print.c **** 					{
1502:final_with_print.c **** 						printf("%s\n", "Ack1 received doesn't match with the original one");
 6998              		.loc 1 1502 0
 6999 566c BF000000 		movl	$.LC180, %edi
 6999      00
 7000 5671 E8000000 		call	puts
 7000      00
1503:final_with_print.c **** 						uint8 encrypted_ack1_again[4];
1504:final_with_print.c **** 						delay(1000000);
 7001              		.loc 1 1504 0
 7002 5676 BF40420F 		movl	$1000000, %edi
 7002      00
 7003 567b E8000000 		call	delay
 7003      00
1505:final_with_print.c **** 						printf("%s\n", "Reading the channel 2i again ");
 7004              		.loc 1 1505 0
 7005 5680 BF000000 		movl	$.LC181, %edi
 7005      00
 7006 5685 E8000000 		call	puts
 7006      00
1506:final_with_print.c **** 						delay(del);
 7007              		.loc 1 1506 0
 7008 568a 8B85B0F3 		movl	-3152(%rbp), %eax
 7008      FFFF
 7009 5690 89C7     		movl	%eax, %edi
 7010 5692 E8000000 		call	delay
 7010      00
1507:final_with_print.c **** 						fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &encrypted_ack1_again[0], &error);
 7011              		.loc 1 1507 0
 7012 5697 8B85C8F2 		movl	-3384(%rbp), %eax
 7012      FFFF
 7013 569d 01C0     		addl	%eax, %eax
 7014 569f 0FB6F0   		movzbl	%al, %esi
 7015 56a2 488B85E0 		movq	-3104(%rbp), %rax
 7015      F3FFFF
 7016 56a9 488D8DE8 		leaq	-3096(%rbp), %rcx
 7016      F3FFFF
 7017 56b0 488D55D0 		leaq	-48(%rbp), %rdx
 7018 56b4 4989C8   		movq	%rcx, %r8
 7019 56b7 4889D1   		movq	%rdx, %rcx
 7020 56ba BA010000 		movl	$1, %edx
 7020      00
 7021 56bf 4889C7   		movq	%rax, %rdi
 7022 56c2 E8000000 		call	flReadChannelAsyncSubmit
 7022      00
 7023 56c7 8985BCF2 		movl	%eax, -3396(%rbp)
 7023      FFFF
1508:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 7024              		.loc 1 1508 0
 7025 56cd 83BDBCF2 		cmpl	$0, -3396(%rbp)
 7025      FFFF00
 7026 56d4 740F     		je	.L347
 7027              		.loc 1 1508 0 is_stmt 0 discriminator 1
 7028 56d6 C785B8F2 		movl	$1, -3400(%rbp)
 7028      FFFF0100 
 7028      0000
 7029 56e0 E9FB2700 		jmp	.L230
 7029      00
 7030              	.L347:
1509:final_with_print.c **** 						fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 7031              		.loc 1 1509 0 is_stmt 1
 7032 56e5 488B85E0 		movq	-3104(%rbp), %rax
 7032      F3FFFF
 7033 56ec 488DBDE8 		leaq	-3096(%rbp), %rdi
 7033      F3FFFF
 7034 56f3 488D8DB4 		leaq	-3404(%rbp), %rcx
 7034      F2FFFF
 7035 56fa 488D95B4 		leaq	-3404(%rbp), %rdx
 7035      F2FFFF
 7036 5701 488DB5F0 		leaq	-3088(%rbp), %rsi
 7036      F3FFFF
 7037 5708 4989F8   		movq	%rdi, %r8
 7038 570b 4889C7   		movq	%rax, %rdi
 7039 570e E8000000 		call	flReadChannelAsyncAwait
 7039      00
 7040 5713 8985BCF2 		movl	%eax, -3396(%rbp)
 7040      FFFF
1510:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 7041              		.loc 1 1510 0
 7042 5719 83BDBCF2 		cmpl	$0, -3396(%rbp)
 7042      FFFF00
 7043 5720 740F     		je	.L349
 7044              		.loc 1 1510 0 is_stmt 0 discriminator 1
 7045 5722 C785B8F2 		movl	$1, -3400(%rbp)
 7045      FFFF0100 
 7045      0000
 7046 572c E9270400 		jmp	.L348
 7046      00
 7047              	.L349:
1511:final_with_print.c **** 						if(encrypted_ack1_again[0] == reset) 
 7048              		.loc 1 1511 0 is_stmt 1
 7049 5731 0FB645D0 		movzbl	-48(%rbp), %eax
 7050 5735 3A85AFF2 		cmpb	-3409(%rbp), %al
 7050      FFFF
 7051 573b 7516     		jne	.L350
1512:final_with_print.c **** 							{
1513:final_with_print.c **** 								k--; 
 7052              		.loc 1 1513 0
 7053 573d 83ADC8F2 		subl	$1, -3384(%rbp)
 7053      FFFF01
1514:final_with_print.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 7054              		.loc 1 1514 0
 7055 5744 BF000000 		movl	$.LC157, %edi
 7055      00
 7056 5749 E8000000 		call	puts
 7056      00
1515:final_with_print.c **** 								continue;
 7057              		.loc 1 1515 0
 7058 574e E91F2700 		jmp	.L305
 7058      00
 7059              	.L350:
1516:final_with_print.c **** 							}
1517:final_with_print.c **** 						delay(del);
 7060              		.loc 1 1517 0
 7061 5753 8B85B0F3 		movl	-3152(%rbp), %eax
 7061      FFFF
 7062 5759 89C7     		movl	%eax, %edi
 7063 575b E8000000 		call	delay
 7063      00
1518:final_with_print.c **** 						fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &encrypted_ack1_again[1], &error);
 7064              		.loc 1 1518 0
 7065 5760 8B85C8F2 		movl	-3384(%rbp), %eax
 7065      FFFF
 7066 5766 01C0     		addl	%eax, %eax
 7067 5768 0FB6F0   		movzbl	%al, %esi
 7068 576b 488B85E0 		movq	-3104(%rbp), %rax
 7068      F3FFFF
 7069 5772 488D8DE8 		leaq	-3096(%rbp), %rcx
 7069      F3FFFF
 7070 5779 488D55D0 		leaq	-48(%rbp), %rdx
 7071 577d 4883C201 		addq	$1, %rdx
 7072 5781 4989C8   		movq	%rcx, %r8
 7073 5784 4889D1   		movq	%rdx, %rcx
 7074 5787 BA010000 		movl	$1, %edx
 7074      00
 7075 578c 4889C7   		movq	%rax, %rdi
 7076 578f E8000000 		call	flReadChannelAsyncSubmit
 7076      00
 7077 5794 8985BCF2 		movl	%eax, -3396(%rbp)
 7077      FFFF
1519:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 7078              		.loc 1 1519 0
 7079 579a 83BDBCF2 		cmpl	$0, -3396(%rbp)
 7079      FFFF00
 7080 57a1 740F     		je	.L352
 7081              		.loc 1 1519 0 is_stmt 0 discriminator 1
 7082 57a3 C785B8F2 		movl	$1, -3400(%rbp)
 7082      FFFF0100 
 7082      0000
 7083 57ad E9A60300 		jmp	.L348
 7083      00
 7084              	.L352:
1520:final_with_print.c **** 						fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 7085              		.loc 1 1520 0 is_stmt 1
 7086 57b2 488B85E0 		movq	-3104(%rbp), %rax
 7086      F3FFFF
 7087 57b9 488DBDE8 		leaq	-3096(%rbp), %rdi
 7087      F3FFFF
 7088 57c0 488D8DB4 		leaq	-3404(%rbp), %rcx
 7088      F2FFFF
 7089 57c7 488D95B4 		leaq	-3404(%rbp), %rdx
 7089      F2FFFF
 7090 57ce 488DB5F0 		leaq	-3088(%rbp), %rsi
 7090      F3FFFF
 7091 57d5 4989F8   		movq	%rdi, %r8
 7092 57d8 4889C7   		movq	%rax, %rdi
 7093 57db E8000000 		call	flReadChannelAsyncAwait
 7093      00
 7094 57e0 8985BCF2 		movl	%eax, -3396(%rbp)
 7094      FFFF
1521:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 7095              		.loc 1 1521 0
 7096 57e6 83BDBCF2 		cmpl	$0, -3396(%rbp)
 7096      FFFF00
 7097 57ed 740F     		je	.L353
 7098              		.loc 1 1521 0 is_stmt 0 discriminator 1
 7099 57ef C785B8F2 		movl	$1, -3400(%rbp)
 7099      FFFF0100 
 7099      0000
 7100 57f9 E95A0300 		jmp	.L348
 7100      00
 7101              	.L353:
1522:final_with_print.c **** 						if(encrypted_ack1_again[1] == reset) 
 7102              		.loc 1 1522 0 is_stmt 1
 7103 57fe 0FB645D1 		movzbl	-47(%rbp), %eax
 7104 5802 3A85AFF2 		cmpb	-3409(%rbp), %al
 7104      FFFF
 7105 5808 7516     		jne	.L354
1523:final_with_print.c **** 							{
1524:final_with_print.c **** 								k--; 
 7106              		.loc 1 1524 0
 7107 580a 83ADC8F2 		subl	$1, -3384(%rbp)
 7107      FFFF01
1525:final_with_print.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 7108              		.loc 1 1525 0
 7109 5811 BF000000 		movl	$.LC157, %edi
 7109      00
 7110 5816 E8000000 		call	puts
 7110      00
1526:final_with_print.c **** 								continue;
 7111              		.loc 1 1526 0
 7112 581b E9522600 		jmp	.L305
 7112      00
 7113              	.L354:
1527:final_with_print.c **** 							}
1528:final_with_print.c **** 						delay(del);
 7114              		.loc 1 1528 0
 7115 5820 8B85B0F3 		movl	-3152(%rbp), %eax
 7115      FFFF
 7116 5826 89C7     		movl	%eax, %edi
 7117 5828 E8000000 		call	delay
 7117      00
1529:final_with_print.c **** 						fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &encrypted_ack1_again[2], &error);
 7118              		.loc 1 1529 0
 7119 582d 8B85C8F2 		movl	-3384(%rbp), %eax
 7119      FFFF
 7120 5833 01C0     		addl	%eax, %eax
 7121 5835 0FB6F0   		movzbl	%al, %esi
 7122 5838 488B85E0 		movq	-3104(%rbp), %rax
 7122      F3FFFF
 7123 583f 488D8DE8 		leaq	-3096(%rbp), %rcx
 7123      F3FFFF
 7124 5846 488D55D0 		leaq	-48(%rbp), %rdx
 7125 584a 4883C202 		addq	$2, %rdx
 7126 584e 4989C8   		movq	%rcx, %r8
 7127 5851 4889D1   		movq	%rdx, %rcx
 7128 5854 BA010000 		movl	$1, %edx
 7128      00
 7129 5859 4889C7   		movq	%rax, %rdi
 7130 585c E8000000 		call	flReadChannelAsyncSubmit
 7130      00
 7131 5861 8985BCF2 		movl	%eax, -3396(%rbp)
 7131      FFFF
1530:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 7132              		.loc 1 1530 0
 7133 5867 83BDBCF2 		cmpl	$0, -3396(%rbp)
 7133      FFFF00
 7134 586e 740F     		je	.L355
 7135              		.loc 1 1530 0 is_stmt 0 discriminator 1
 7136 5870 C785B8F2 		movl	$1, -3400(%rbp)
 7136      FFFF0100 
 7136      0000
 7137 587a E9D90200 		jmp	.L348
 7137      00
 7138              	.L355:
1531:final_with_print.c **** 						fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 7139              		.loc 1 1531 0 is_stmt 1
 7140 587f 488B85E0 		movq	-3104(%rbp), %rax
 7140      F3FFFF
 7141 5886 488DBDE8 		leaq	-3096(%rbp), %rdi
 7141      F3FFFF
 7142 588d 488D8DB4 		leaq	-3404(%rbp), %rcx
 7142      F2FFFF
 7143 5894 488D95B4 		leaq	-3404(%rbp), %rdx
 7143      F2FFFF
 7144 589b 488DB5F0 		leaq	-3088(%rbp), %rsi
 7144      F3FFFF
 7145 58a2 4989F8   		movq	%rdi, %r8
 7146 58a5 4889C7   		movq	%rax, %rdi
 7147 58a8 E8000000 		call	flReadChannelAsyncAwait
 7147      00
 7148 58ad 8985BCF2 		movl	%eax, -3396(%rbp)
 7148      FFFF
1532:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 7149              		.loc 1 1532 0
 7150 58b3 83BDBCF2 		cmpl	$0, -3396(%rbp)
 7150      FFFF00
 7151 58ba 740F     		je	.L356
 7152              		.loc 1 1532 0 is_stmt 0 discriminator 1
 7153 58bc C785B8F2 		movl	$1, -3400(%rbp)
 7153      FFFF0100 
 7153      0000
 7154 58c6 E98D0200 		jmp	.L348
 7154      00
 7155              	.L356:
1533:final_with_print.c **** 						if(encrypted_ack1_again[2] == reset) 
 7156              		.loc 1 1533 0 is_stmt 1
 7157 58cb 0FB645D2 		movzbl	-46(%rbp), %eax
 7158 58cf 3A85AFF2 		cmpb	-3409(%rbp), %al
 7158      FFFF
 7159 58d5 7516     		jne	.L357
1534:final_with_print.c **** 							{
1535:final_with_print.c **** 								k--; 
 7160              		.loc 1 1535 0
 7161 58d7 83ADC8F2 		subl	$1, -3384(%rbp)
 7161      FFFF01
1536:final_with_print.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 7162              		.loc 1 1536 0
 7163 58de BF000000 		movl	$.LC157, %edi
 7163      00
 7164 58e3 E8000000 		call	puts
 7164      00
1537:final_with_print.c **** 								continue;
 7165              		.loc 1 1537 0
 7166 58e8 E9852500 		jmp	.L305
 7166      00
 7167              	.L357:
1538:final_with_print.c **** 							}
1539:final_with_print.c **** 						delay(del);
 7168              		.loc 1 1539 0
 7169 58ed 8B85B0F3 		movl	-3152(%rbp), %eax
 7169      FFFF
 7170 58f3 89C7     		movl	%eax, %edi
 7171 58f5 E8000000 		call	delay
 7171      00
1540:final_with_print.c **** 						fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &encrypted_ack1_again[3], &error);
 7172              		.loc 1 1540 0
 7173 58fa 8B85C8F2 		movl	-3384(%rbp), %eax
 7173      FFFF
 7174 5900 01C0     		addl	%eax, %eax
 7175 5902 0FB6F0   		movzbl	%al, %esi
 7176 5905 488B85E0 		movq	-3104(%rbp), %rax
 7176      F3FFFF
 7177 590c 488D8DE8 		leaq	-3096(%rbp), %rcx
 7177      F3FFFF
 7178 5913 488D55D0 		leaq	-48(%rbp), %rdx
 7179 5917 4883C203 		addq	$3, %rdx
 7180 591b 4989C8   		movq	%rcx, %r8
 7181 591e 4889D1   		movq	%rdx, %rcx
 7182 5921 BA010000 		movl	$1, %edx
 7182      00
 7183 5926 4889C7   		movq	%rax, %rdi
 7184 5929 E8000000 		call	flReadChannelAsyncSubmit
 7184      00
 7185 592e 8985BCF2 		movl	%eax, -3396(%rbp)
 7185      FFFF
1541:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 7186              		.loc 1 1541 0
 7187 5934 83BDBCF2 		cmpl	$0, -3396(%rbp)
 7187      FFFF00
 7188 593b 740F     		je	.L358
 7189              		.loc 1 1541 0 is_stmt 0 discriminator 1
 7190 593d C785B8F2 		movl	$1, -3400(%rbp)
 7190      FFFF0100 
 7190      0000
 7191 5947 E90C0200 		jmp	.L348
 7191      00
 7192              	.L358:
1542:final_with_print.c **** 						fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 7193              		.loc 1 1542 0 is_stmt 1
 7194 594c 488B85E0 		movq	-3104(%rbp), %rax
 7194      F3FFFF
 7195 5953 488DBDE8 		leaq	-3096(%rbp), %rdi
 7195      F3FFFF
 7196 595a 488D8DB4 		leaq	-3404(%rbp), %rcx
 7196      F2FFFF
 7197 5961 488D95B4 		leaq	-3404(%rbp), %rdx
 7197      F2FFFF
 7198 5968 488DB5F0 		leaq	-3088(%rbp), %rsi
 7198      F3FFFF
 7199 596f 4989F8   		movq	%rdi, %r8
 7200 5972 4889C7   		movq	%rax, %rdi
 7201 5975 E8000000 		call	flReadChannelAsyncAwait
 7201      00
 7202 597a 8985BCF2 		movl	%eax, -3396(%rbp)
 7202      FFFF
1543:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 7203              		.loc 1 1543 0
 7204 5980 83BDBCF2 		cmpl	$0, -3396(%rbp)
 7204      FFFF00
 7205 5987 740F     		je	.L359
 7206              		.loc 1 1543 0 is_stmt 0 discriminator 1
 7207 5989 C785B8F2 		movl	$1, -3400(%rbp)
 7207      FFFF0100 
 7207      0000
 7208 5993 E9C00100 		jmp	.L348
 7208      00
 7209              	.L359:
1544:final_with_print.c **** 						if(encrypted_ack1_again[3] == reset) 
 7210              		.loc 1 1544 0 is_stmt 1
 7211 5998 0FB645D3 		movzbl	-45(%rbp), %eax
 7212 599c 3A85AFF2 		cmpb	-3409(%rbp), %al
 7212      FFFF
 7213 59a2 7517     		jne	.L360
1545:final_with_print.c **** 							{
1546:final_with_print.c **** 								k--; 
 7214              		.loc 1 1546 0
 7215 59a4 83ADC8F2 		subl	$1, -3384(%rbp)
 7215      FFFF01
1547:final_with_print.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 7216              		.loc 1 1547 0
 7217 59ab BF000000 		movl	$.LC157, %edi
 7217      00
 7218 59b0 E8000000 		call	puts
 7218      00
1548:final_with_print.c **** 								continue;
 7219              		.loc 1 1548 0
 7220 59b5 90       		nop
 7221 59b6 E9B72400 		jmp	.L305
 7221      00
 7222              	.L360:
1549:final_with_print.c **** 							}
1550:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 7223              		.loc 1 1550 0
 7224 59bb 83BDBCF2 		cmpl	$0, -3396(%rbp)
 7224      FFFF00
 7225 59c2 740F     		je	.L361
 7226              		.loc 1 1550 0 is_stmt 0 discriminator 1
 7227 59c4 C785B8F2 		movl	$1, -3400(%rbp)
 7227      FFFF0100 
 7227      0000
 7228 59ce E9850100 		jmp	.L348
 7228      00
 7229              	.L361:
1551:final_with_print.c **** 						printf("%s\n", "Get the encrypted ack1 again successfully ---");
 7230              		.loc 1 1551 0 is_stmt 1
 7231 59d3 BF000000 		movl	$.LC182, %edi
 7231      00
 7232 59d8 E8000000 		call	puts
 7232      00
 7233              	.LBB63:
1552:final_with_print.c **** 						for (int i = 0; i < 4; ++i)
 7234              		.loc 1 1552 0
 7235 59dd C785F0F2 		movl	$0, -3344(%rbp)
 7235      FFFF0000 
 7235      0000
 7236 59e7 EB28     		jmp	.L362
 7237              	.L363:
1553:final_with_print.c **** 						{
1554:final_with_print.c **** 							printf("%d ", encrypted_ack1_again[i]);
 7238              		.loc 1 1554 0 discriminator 3
 7239 59e9 8B85F0F2 		movl	-3344(%rbp), %eax
 7239      FFFF
 7240 59ef 4898     		cltq
 7241 59f1 0FB64405 		movzbl	-48(%rbp,%rax), %eax
 7241      D0
 7242 59f6 0FB6C0   		movzbl	%al, %eax
 7243 59f9 89C6     		movl	%eax, %esi
 7244 59fb BF000000 		movl	$.LC10, %edi
 7244      00
 7245 5a00 B8000000 		movl	$0, %eax
 7245      00
 7246 5a05 E8000000 		call	printf
 7246      00
1552:final_with_print.c **** 						for (int i = 0; i < 4; ++i)
 7247              		.loc 1 1552 0 discriminator 3
 7248 5a0a 8385F0F2 		addl	$1, -3344(%rbp)
 7248      FFFF01
 7249              	.L362:
1552:final_with_print.c **** 						for (int i = 0; i < 4; ++i)
 7250              		.loc 1 1552 0 is_stmt 0 discriminator 1
 7251 5a11 83BDF0F2 		cmpl	$3, -3344(%rbp)
 7251      FFFF03
 7252 5a18 7ECF     		jle	.L363
 7253              	.LBE63:
1555:final_with_print.c **** 						}
1556:final_with_print.c **** 						printf("\n");
 7254              		.loc 1 1556 0 is_stmt 1
 7255 5a1a BF0A0000 		movl	$10, %edi
 7255      00
 7256 5a1f E8000000 		call	putchar
 7256      00
1557:final_with_print.c **** 						int encrypted_ack1_again1[32];
1558:final_with_print.c **** 						printf("%s\n", "Converting encrypted ack1 from uint8 to binary");
 7257              		.loc 1 1558 0
 7258 5a24 BF000000 		movl	$.LC176, %edi
 7258      00
 7259 5a29 E8000000 		call	puts
 7259      00
1559:final_with_print.c **** 						uint8ToBin(encrypted_ack1_again, encrypted_ack1_again1);
 7260              		.loc 1 1559 0
 7261 5a2e 488D9550 		leaq	-688(%rbp), %rdx
 7261      FDFFFF
 7262 5a35 488D45D0 		leaq	-48(%rbp), %rax
 7263 5a39 4889D6   		movq	%rdx, %rsi
 7264 5a3c 4889C7   		movq	%rax, %rdi
 7265 5a3f E8000000 		call	uint8ToBin
 7265      00
1560:final_with_print.c **** 						printf("%s\n", "Converted encrypted ack1 to binary and it is as ----");
 7266              		.loc 1 1560 0
 7267 5a44 BF000000 		movl	$.LC183, %edi
 7267      00
 7268 5a49 E8000000 		call	puts
 7268      00
 7269              	.LBB64:
1561:final_with_print.c **** 						for (int i = 0; i < 32; ++i)
 7270              		.loc 1 1561 0
 7271 5a4e C785F4F2 		movl	$0, -3340(%rbp)
 7271      FFFF0000 
 7271      0000
 7272 5a58 EB27     		jmp	.L364
 7273              	.L365:
1562:final_with_print.c **** 						{
1563:final_with_print.c **** 							printf("%d ", encrypted_ack1_again1[i]);
 7274              		.loc 1 1563 0 discriminator 3
 7275 5a5a 8B85F4F2 		movl	-3340(%rbp), %eax
 7275      FFFF
 7276 5a60 4898     		cltq
 7277 5a62 8B848550 		movl	-688(%rbp,%rax,4), %eax
 7277      FDFFFF
 7278 5a69 89C6     		movl	%eax, %esi
 7279 5a6b BF000000 		movl	$.LC10, %edi
 7279      00
 7280 5a70 B8000000 		movl	$0, %eax
 7280      00
 7281 5a75 E8000000 		call	printf
 7281      00
1561:final_with_print.c **** 						for (int i = 0; i < 32; ++i)
 7282              		.loc 1 1561 0 discriminator 3
 7283 5a7a 8385F4F2 		addl	$1, -3340(%rbp)
 7283      FFFF01
 7284              	.L364:
1561:final_with_print.c **** 						for (int i = 0; i < 32; ++i)
 7285              		.loc 1 1561 0 is_stmt 0 discriminator 1
 7286 5a81 83BDF4F2 		cmpl	$31, -3340(%rbp)
 7286      FFFF1F
 7287 5a88 7ED0     		jle	.L365
 7288              	.LBE64:
1564:final_with_print.c **** 						}
1565:final_with_print.c **** 						printf("\n");
 7289              		.loc 1 1565 0 is_stmt 1
 7290 5a8a BF0A0000 		movl	$10, %edi
 7290      00
 7291 5a8f E8000000 		call	putchar
 7291      00
1566:final_with_print.c **** 						int decrypted_ack1_again1[32];
1567:final_with_print.c **** 						printf("%s\n", "Decrypting the encrypted ack1 ");
 7292              		.loc 1 1567 0
 7293 5a94 BF000000 		movl	$.LC184, %edi
 7293      00
 7294 5a99 E8000000 		call	puts
 7294      00
1568:final_with_print.c **** 						decrypter(encrypted_ack1_again1, K, decrypted_ack1_again1);
 7295              		.loc 1 1568 0
 7296 5a9e 488D9560 		leaq	-416(%rbp), %rdx
 7296      FEFFFF
 7297 5aa5 488D8DD0 		leaq	-2608(%rbp), %rcx
 7297      F5FFFF
 7298 5aac 488D8550 		leaq	-688(%rbp), %rax
 7298      FDFFFF
 7299 5ab3 4889CE   		movq	%rcx, %rsi
 7300 5ab6 4889C7   		movq	%rax, %rdi
 7301 5ab9 E8000000 		call	decrypter
 7301      00
1569:final_with_print.c **** 						printf("%s\n", "Ack1 got decrpyted and is as ----");
 7302              		.loc 1 1569 0
 7303 5abe BF000000 		movl	$.LC185, %edi
 7303      00
 7304 5ac3 E8000000 		call	puts
 7304      00
 7305              	.LBB65:
1570:final_with_print.c **** 						for (int i = 0; i < 32; ++i)
 7306              		.loc 1 1570 0
 7307 5ac8 C785F8F2 		movl	$0, -3336(%rbp)
 7307      FFFF0000 
 7307      0000
 7308 5ad2 EB27     		jmp	.L366
 7309              	.L367:
1571:final_with_print.c **** 						{
1572:final_with_print.c **** 							printf("%d ", decrypted_ack1_again1[i]);
 7310              		.loc 1 1572 0 discriminator 3
 7311 5ad4 8B85F8F2 		movl	-3336(%rbp), %eax
 7311      FFFF
 7312 5ada 4898     		cltq
 7313 5adc 8B848560 		movl	-416(%rbp,%rax,4), %eax
 7313      FEFFFF
 7314 5ae3 89C6     		movl	%eax, %esi
 7315 5ae5 BF000000 		movl	$.LC10, %edi
 7315      00
 7316 5aea B8000000 		movl	$0, %eax
 7316      00
 7317 5aef E8000000 		call	printf
 7317      00
1570:final_with_print.c **** 						for (int i = 0; i < 32; ++i)
 7318              		.loc 1 1570 0 discriminator 3
 7319 5af4 8385F8F2 		addl	$1, -3336(%rbp)
 7319      FFFF01
 7320              	.L366:
1570:final_with_print.c **** 						for (int i = 0; i < 32; ++i)
 7321              		.loc 1 1570 0 is_stmt 0 discriminator 1
 7322 5afb 83BDF8F2 		cmpl	$31, -3336(%rbp)
 7322      FFFF1F
 7323 5b02 7ED0     		jle	.L367
 7324              	.LBE65:
1573:final_with_print.c **** 						}
1574:final_with_print.c **** 						printf("\n");
 7325              		.loc 1 1574 0 is_stmt 1
 7326 5b04 BF0A0000 		movl	$10, %edi
 7326      00
 7327 5b09 E8000000 		call	putchar
 7327      00
 7328              	.LBB66:
1575:final_with_print.c **** 						for(int i=0; i<32; i++)
 7329              		.loc 1 1575 0
 7330 5b0e C785FCF2 		movl	$0, -3332(%rbp)
 7330      FFFF0000 
 7330      0000
 7331 5b18 EB33     		jmp	.L368
 7332              	.L370:
1576:final_with_print.c **** 						{
1577:final_with_print.c **** 							if(decrypted_ack1_again1[i] != ack1[i])
 7333              		.loc 1 1577 0
 7334 5b1a 8B85FCF2 		movl	-3332(%rbp), %eax
 7334      FFFF
 7335 5b20 4898     		cltq
 7336 5b22 8B948560 		movl	-416(%rbp,%rax,4), %edx
 7336      FEFFFF
 7337 5b29 8B85FCF2 		movl	-3332(%rbp), %eax
 7337      FFFF
 7338 5b2f 4898     		cltq
 7339 5b31 8B848550 		movl	-2480(%rbp,%rax,4), %eax
 7339      F6FFFF
 7340 5b38 39C2     		cmpl	%eax, %edx
 7341 5b3a 740A     		je	.L369
1578:final_with_print.c **** 							{
1579:final_with_print.c **** 								ack_helper = 2;
 7342              		.loc 1 1579 0
 7343 5b3c C785E8F2 		movl	$2, -3352(%rbp)
 7343      FFFF0200 
 7343      0000
 7344              	.L369:
1575:final_with_print.c **** 						{
 7345              		.loc 1 1575 0 discriminator 2
 7346 5b46 8385FCF2 		addl	$1, -3332(%rbp)
 7346      FFFF01
 7347              	.L368:
1575:final_with_print.c **** 						{
 7348              		.loc 1 1575 0 is_stmt 0 discriminator 1
 7349 5b4d 83BDFCF2 		cmpl	$31, -3332(%rbp)
 7349      FFFF1F
 7350 5b54 7EC4     		jle	.L370
 7351 5b56 EB05     		jmp	.L346
 7352              	.L348:
 7353              	.LBE66:
 7354              	.LBE62:
 7355              	.LBE53:
 7356              	.LBE52:
 7357              	.LBE51:
1294:final_with_print.c **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 7358              		.loc 1 1294 0 is_stmt 1 discriminator 2
 7359 5b58 E9832300 		jmp	.L230
 7359      00
 7360              	.L346:
 7361              	.LBB112:
 7362              	.LBB108:
 7363              	.LBB104:
1580:final_with_print.c **** 							}
1581:final_with_print.c **** 						}
1582:final_with_print.c **** 
1583:final_with_print.c **** 					}
1584:final_with_print.c **** 
1585:final_with_print.c **** 					printf("%s\n", "----------------------H2.4 ended----------------------- ");
 7364              		.loc 1 1585 0
 7365 5b5d BF000000 		movl	$.LC186, %edi
 7365      00
 7366 5b62 E8000000 		call	puts
 7366      00
1586:final_with_print.c **** 
1587:final_with_print.c **** 					printf("%s\n", "-------------------------H2.5 started-------------------------");
 7367              		.loc 1 1587 0
 7368 5b67 BF000000 		movl	$.LC187, %edi
 7368      00
 7369 5b6c E8000000 		call	puts
 7369      00
1588:final_with_print.c **** 					
1589:final_with_print.c **** 					if(ack_helper == 2)
 7370              		.loc 1 1589 0
 7371 5b71 83BDE8F2 		cmpl	$2, -3352(%rbp)
 7371      FFFF02
 7372 5b78 7526     		jne	.L371
1590:final_with_print.c **** 					{
1591:final_with_print.c **** 						printf("%s\n", "Fails to receive encrypted ack1 ");
 7373              		.loc 1 1591 0
 7374 5b7a BF000000 		movl	$.LC188, %edi
 7374      00
 7375 5b7f E8000000 		call	puts
 7375      00
1592:final_with_print.c **** 						if(k == 63)
 7376              		.loc 1 1592 0
 7377 5b84 83BDC8F2 		cmpl	$63, -3384(%rbp)
 7377      FFFF3F
 7378 5b8b 0F85D122 		jne	.L521
 7378      0000
1593:final_with_print.c **** 						{
1594:final_with_print.c **** 							k = 0;
 7379              		.loc 1 1594 0
 7380 5b91 C785C8F2 		movl	$0, -3384(%rbp)
 7380      FFFF0000 
 7380      0000
1595:final_with_print.c **** 						}
1596:final_with_print.c **** 						continue;
 7381              		.loc 1 1596 0
 7382 5b9b E9C22200 		jmp	.L521
 7382      00
 7383              	.L371:
1597:final_with_print.c **** 					}
1598:final_with_print.c **** 
1599:final_with_print.c **** 					printf("%s\n", "-------------------------H2.5 ended-------------------------");
 7384              		.loc 1 1599 0
 7385 5ba0 BF000000 		movl	$.LC189, %edi
 7385      00
 7386 5ba5 E8000000 		call	puts
 7386      00
1600:final_with_print.c **** 
1601:final_with_print.c **** 					printf("%s\n", "-------------------------H3 starts--------------------------");
 7387              		.loc 1 1601 0
 7388 5baa BF000000 		movl	$.LC190, %edi
 7388      00
 7389 5baf E8000000 		call	puts
 7389      00
1602:final_with_print.c **** 
1603:final_with_print.c **** 					int encrypted_ack2[32];
1604:final_with_print.c **** 					printf("%s\n", "encrypting ack2 ");
 7390              		.loc 1 1604 0
 7391 5bb4 BF000000 		movl	$.LC191, %edi
 7391      00
 7392 5bb9 E8000000 		call	puts
 7392      00
1605:final_with_print.c **** 					encrypter(ack2, K, encrypted_ack2);
 7393              		.loc 1 1605 0
 7394 5bbe 488D95D0 		leaq	-1584(%rbp), %rdx
 7394      F9FFFF
 7395 5bc5 488D8DD0 		leaq	-2608(%rbp), %rcx
 7395      F5FFFF
 7396 5bcc 488D85D0 		leaq	-2352(%rbp), %rax
 7396      F6FFFF
 7397 5bd3 4889CE   		movq	%rcx, %rsi
 7398 5bd6 4889C7   		movq	%rax, %rdi
 7399 5bd9 E8000000 		call	encrypter
 7399      00
1606:final_with_print.c **** 					printf("%s\n", "Ack2 got encrypted and it is as -----");
 7400              		.loc 1 1606 0
 7401 5bde BF000000 		movl	$.LC192, %edi
 7401      00
 7402 5be3 E8000000 		call	puts
 7402      00
 7403              	.LBB67:
1607:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 7404              		.loc 1 1607 0
 7405 5be8 C78500F3 		movl	$0, -3328(%rbp)
 7405      FFFF0000 
 7405      0000
 7406 5bf2 EB27     		jmp	.L373
 7407              	.L374:
1608:final_with_print.c **** 					{
1609:final_with_print.c **** 						printf("%d ", encrypted_ack2[i]);
 7408              		.loc 1 1609 0 discriminator 3
 7409 5bf4 8B8500F3 		movl	-3328(%rbp), %eax
 7409      FFFF
 7410 5bfa 4898     		cltq
 7411 5bfc 8B8485D0 		movl	-1584(%rbp,%rax,4), %eax
 7411      F9FFFF
 7412 5c03 89C6     		movl	%eax, %esi
 7413 5c05 BF000000 		movl	$.LC10, %edi
 7413      00
 7414 5c0a B8000000 		movl	$0, %eax
 7414      00
 7415 5c0f E8000000 		call	printf
 7415      00
1607:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 7416              		.loc 1 1607 0 discriminator 3
 7417 5c14 838500F3 		addl	$1, -3328(%rbp)
 7417      FFFF01
 7418              	.L373:
1607:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 7419              		.loc 1 1607 0 is_stmt 0 discriminator 1
 7420 5c1b 83BD00F3 		cmpl	$31, -3328(%rbp)
 7420      FFFF1F
 7421 5c22 7ED0     		jle	.L374
 7422              	.LBE67:
1610:final_with_print.c **** 					}
1611:final_with_print.c **** 					printf("\n");
 7423              		.loc 1 1611 0 is_stmt 1
 7424 5c24 BF0A0000 		movl	$10, %edi
 7424      00
 7425 5c29 E8000000 		call	putchar
 7425      00
1612:final_with_print.c **** 					uint8 encrpyted_ack2_tosend[4];
1613:final_with_print.c **** 					printf("%s\n", "Converting encrypted ack2 from binary to uint8");
 7426              		.loc 1 1613 0
 7427 5c2e BF000000 		movl	$.LC193, %edi
 7427      00
 7428 5c33 E8000000 		call	puts
 7428      00
1614:final_with_print.c **** 					BinTouint8(encrpyted_ack2_tosend, encrypted_ack2);
 7429              		.loc 1 1614 0
 7430 5c38 488D95D0 		leaq	-1584(%rbp), %rdx
 7430      F9FFFF
 7431 5c3f 488D4590 		leaq	-112(%rbp), %rax
 7432 5c43 4889D6   		movq	%rdx, %rsi
 7433 5c46 4889C7   		movq	%rax, %rdi
 7434 5c49 E8000000 		call	BinTouint8
 7434      00
1615:final_with_print.c **** 					printf("%s\n", "Converted encrypted ack2 to uint8 and it is as -----");
 7435              		.loc 1 1615 0
 7436 5c4e BF000000 		movl	$.LC194, %edi
 7436      00
 7437 5c53 E8000000 		call	puts
 7437      00
 7438              	.LBB68:
1616:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 7439              		.loc 1 1616 0
 7440 5c58 C78504F3 		movl	$0, -3324(%rbp)
 7440      FFFF0000 
 7440      0000
 7441 5c62 EB28     		jmp	.L375
 7442              	.L376:
1617:final_with_print.c **** 					{
1618:final_with_print.c **** 						printf("%d ", encrpyted_ack2_tosend[i]);
 7443              		.loc 1 1618 0 discriminator 3
 7444 5c64 8B8504F3 		movl	-3324(%rbp), %eax
 7444      FFFF
 7445 5c6a 4898     		cltq
 7446 5c6c 0FB64405 		movzbl	-112(%rbp,%rax), %eax
 7446      90
 7447 5c71 0FB6C0   		movzbl	%al, %eax
 7448 5c74 89C6     		movl	%eax, %esi
 7449 5c76 BF000000 		movl	$.LC10, %edi
 7449      00
 7450 5c7b B8000000 		movl	$0, %eax
 7450      00
 7451 5c80 E8000000 		call	printf
 7451      00
1616:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 7452              		.loc 1 1616 0 discriminator 3
 7453 5c85 838504F3 		addl	$1, -3324(%rbp)
 7453      FFFF01
 7454              	.L375:
1616:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 7455              		.loc 1 1616 0 is_stmt 0 discriminator 1
 7456 5c8c 83BD04F3 		cmpl	$3, -3324(%rbp)
 7456      FFFF03
 7457 5c93 7ECF     		jle	.L376
 7458              	.LBE68:
1619:final_with_print.c **** 					}
1620:final_with_print.c **** 					printf("\n");
 7459              		.loc 1 1620 0 is_stmt 1
 7460 5c95 BF0A0000 		movl	$10, %edi
 7460      00
 7461 5c9a E8000000 		call	putchar
 7461      00
1621:final_with_print.c **** 					printf("%s\n", "Sending encrypted ack2 to fpga ");
 7462              		.loc 1 1621 0
 7463 5c9f BF000000 		movl	$.LC195, %edi
 7463      00
 7464 5ca4 E8000000 		call	puts
 7464      00
1622:final_with_print.c **** 					delay(del);
 7465              		.loc 1 1622 0
 7466 5ca9 8B85B0F3 		movl	-3152(%rbp), %eax
 7466      FFFF
 7467 5caf 89C7     		movl	%eax, %edi
 7468 5cb1 E8000000 		call	delay
 7468      00
1623:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &encrpyted_ack2_tosend[0], &error);
 7469              		.loc 1 1623 0
 7470 5cb6 8B85C8F2 		movl	-3384(%rbp), %eax
 7470      FFFF
 7471 5cbc 01C0     		addl	%eax, %eax
 7472 5cbe 83C001   		addl	$1, %eax
 7473 5cc1 0FB6F0   		movzbl	%al, %esi
 7474 5cc4 488B85E0 		movq	-3104(%rbp), %rax
 7474      F3FFFF
 7475 5ccb 488D8DE8 		leaq	-3096(%rbp), %rcx
 7475      F3FFFF
 7476 5cd2 488D5590 		leaq	-112(%rbp), %rdx
 7477 5cd6 4989C8   		movq	%rcx, %r8
 7478 5cd9 4889D1   		movq	%rdx, %rcx
 7479 5cdc BA010000 		movl	$1, %edx
 7479      00
 7480 5ce1 4889C7   		movq	%rax, %rdi
 7481 5ce4 E8000000 		call	flWriteChannel
 7481      00
 7482 5ce9 8985BCF2 		movl	%eax, -3396(%rbp)
 7482      FFFF
1624:final_with_print.c **** 					delay(del);
 7483              		.loc 1 1624 0
 7484 5cef 8B85B0F3 		movl	-3152(%rbp), %eax
 7484      FFFF
 7485 5cf5 89C7     		movl	%eax, %edi
 7486 5cf7 E8000000 		call	delay
 7486      00
1625:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &encrpyted_ack2_tosend[1], &error);
 7487              		.loc 1 1625 0
 7488 5cfc 8B85C8F2 		movl	-3384(%rbp), %eax
 7488      FFFF
 7489 5d02 01C0     		addl	%eax, %eax
 7490 5d04 83C001   		addl	$1, %eax
 7491 5d07 0FB6F0   		movzbl	%al, %esi
 7492 5d0a 488B85E0 		movq	-3104(%rbp), %rax
 7492      F3FFFF
 7493 5d11 488D8DE8 		leaq	-3096(%rbp), %rcx
 7493      F3FFFF
 7494 5d18 488D5590 		leaq	-112(%rbp), %rdx
 7495 5d1c 4883C201 		addq	$1, %rdx
 7496 5d20 4989C8   		movq	%rcx, %r8
 7497 5d23 4889D1   		movq	%rdx, %rcx
 7498 5d26 BA010000 		movl	$1, %edx
 7498      00
 7499 5d2b 4889C7   		movq	%rax, %rdi
 7500 5d2e E8000000 		call	flWriteChannel
 7500      00
 7501 5d33 8985BCF2 		movl	%eax, -3396(%rbp)
 7501      FFFF
1626:final_with_print.c **** 					delay(del);
 7502              		.loc 1 1626 0
 7503 5d39 8B85B0F3 		movl	-3152(%rbp), %eax
 7503      FFFF
 7504 5d3f 89C7     		movl	%eax, %edi
 7505 5d41 E8000000 		call	delay
 7505      00
1627:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &encrpyted_ack2_tosend[2], &error);
 7506              		.loc 1 1627 0
 7507 5d46 8B85C8F2 		movl	-3384(%rbp), %eax
 7507      FFFF
 7508 5d4c 01C0     		addl	%eax, %eax
 7509 5d4e 83C001   		addl	$1, %eax
 7510 5d51 0FB6F0   		movzbl	%al, %esi
 7511 5d54 488B85E0 		movq	-3104(%rbp), %rax
 7511      F3FFFF
 7512 5d5b 488D8DE8 		leaq	-3096(%rbp), %rcx
 7512      F3FFFF
 7513 5d62 488D5590 		leaq	-112(%rbp), %rdx
 7514 5d66 4883C202 		addq	$2, %rdx
 7515 5d6a 4989C8   		movq	%rcx, %r8
 7516 5d6d 4889D1   		movq	%rdx, %rcx
 7517 5d70 BA010000 		movl	$1, %edx
 7517      00
 7518 5d75 4889C7   		movq	%rax, %rdi
 7519 5d78 E8000000 		call	flWriteChannel
 7519      00
 7520 5d7d 8985BCF2 		movl	%eax, -3396(%rbp)
 7520      FFFF
1628:final_with_print.c **** 					delay(del);
 7521              		.loc 1 1628 0
 7522 5d83 8B85B0F3 		movl	-3152(%rbp), %eax
 7522      FFFF
 7523 5d89 89C7     		movl	%eax, %edi
 7524 5d8b E8000000 		call	delay
 7524      00
1629:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &encrpyted_ack2_tosend[3], &error);
 7525              		.loc 1 1629 0
 7526 5d90 8B85C8F2 		movl	-3384(%rbp), %eax
 7526      FFFF
 7527 5d96 01C0     		addl	%eax, %eax
 7528 5d98 83C001   		addl	$1, %eax
 7529 5d9b 0FB6F0   		movzbl	%al, %esi
 7530 5d9e 488B85E0 		movq	-3104(%rbp), %rax
 7530      F3FFFF
 7531 5da5 488D8DE8 		leaq	-3096(%rbp), %rcx
 7531      F3FFFF
 7532 5dac 488D5590 		leaq	-112(%rbp), %rdx
 7533 5db0 4883C203 		addq	$3, %rdx
 7534 5db4 4989C8   		movq	%rcx, %r8
 7535 5db7 4889D1   		movq	%rdx, %rcx
 7536 5dba BA010000 		movl	$1, %edx
 7536      00
 7537 5dbf 4889C7   		movq	%rax, %rdi
 7538 5dc2 E8000000 		call	flWriteChannel
 7538      00
 7539 5dc7 8985BCF2 		movl	%eax, -3396(%rbp)
 7539      FFFF
1630:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 7540              		.loc 1 1630 0
 7541 5dcd 83BDBCF2 		cmpl	$0, -3396(%rbp)
 7541      FFFF00
 7542 5dd4 740F     		je	.L377
 7543              		.loc 1 1630 0 is_stmt 0 discriminator 1
 7544 5dd6 C785B8F2 		movl	$1, -3400(%rbp)
 7544      FFFF0100 
 7544      0000
 7545 5de0 E9FB2000 		jmp	.L230
 7545      00
 7546              	.L377:
1631:final_with_print.c **** 					printf("%s\n", "Encrypted ack2 send successfully");
 7547              		.loc 1 1631 0 is_stmt 1
 7548 5de5 BF000000 		movl	$.LC196, %edi
 7548      00
 7549 5dea E8000000 		call	puts
 7549      00
1632:final_with_print.c **** 
1633:final_with_print.c **** 					printf("%s\n", "-------------------------H3 ended----------------------------");
 7550              		.loc 1 1633 0
 7551 5def BF000000 		movl	$.LC197, %edi
 7551      00
 7552 5df4 E8000000 		call	puts
 7552      00
1634:final_with_print.c **** 
1635:final_with_print.c **** 					printf("%s\n", "-------------------------H4 started--------------------------");
 7553              		.loc 1 1635 0
 7554 5df9 BF000000 		movl	$.LC198, %edi
 7554      00
 7555 5dfe E8000000 		call	puts
 7555      00
1636:final_with_print.c **** 
1637:final_with_print.c **** 					printf("%s\n", "Calculating x and y co_ordinates ------------------");
 7556              		.loc 1 1637 0
 7557 5e03 BF000000 		movl	$.LC199, %edi
 7557      00
 7558 5e08 E8000000 		call	puts
 7558      00
 7559              	.LBB69:
1638:final_with_print.c **** 
1639:final_with_print.c **** 					int co_ordinates[8];
1640:final_with_print.c **** 					for (int i = 0; i < 8; ++i)
 7560              		.loc 1 1640 0
 7561 5e0d C78508F3 		movl	$0, -3320(%rbp)
 7561      FFFF0000 
 7561      0000
 7562 5e17 EB28     		jmp	.L378
 7563              	.L379:
1641:final_with_print.c **** 					{
1642:final_with_print.c **** 						co_ordinates[i] = decrypted_pos[i+24];
 7564              		.loc 1 1642 0 discriminator 3
 7565 5e19 8B8508F3 		movl	-3320(%rbp), %eax
 7565      FFFF
 7566 5e1f 83C018   		addl	$24, %eax
 7567 5e22 4898     		cltq
 7568 5e24 8B9485D0 		movl	-2096(%rbp,%rax,4), %edx
 7568      F7FFFF
 7569 5e2b 8B8508F3 		movl	-3320(%rbp), %eax
 7569      FFFF
 7570 5e31 4898     		cltq
 7571 5e33 89948510 		movl	%edx, -2800(%rbp,%rax,4)
 7571      F5FFFF
1640:final_with_print.c **** 					{
 7572              		.loc 1 1640 0 discriminator 3
 7573 5e3a 838508F3 		addl	$1, -3320(%rbp)
 7573      FFFF01
 7574              	.L378:
1640:final_with_print.c **** 					{
 7575              		.loc 1 1640 0 is_stmt 0 discriminator 1
 7576 5e41 83BD08F3 		cmpl	$7, -3320(%rbp)
 7576      FFFF07
 7577 5e48 7ECF     		jle	.L379
 7578              	.LBE69:
1643:final_with_print.c **** 					}
1644:final_with_print.c **** 
1645:final_with_print.c **** 					int x_cord = 8*co_ordinates[3]+4*co_ordinates[2]+2*co_ordinates[1]+co_ordinates[0];
 7579              		.loc 1 1645 0 is_stmt 1
 7580 5e4a 8B851CF5 		movl	-2788(%rbp), %eax
 7580      FFFF
 7581 5e50 8D1400   		leal	(%rax,%rax), %edx
 7582 5e53 8B8518F5 		movl	-2792(%rbp), %eax
 7582      FFFF
 7583 5e59 01D0     		addl	%edx, %eax
 7584 5e5b 8D1400   		leal	(%rax,%rax), %edx
 7585 5e5e 8B8514F5 		movl	-2796(%rbp), %eax
 7585      FFFF
 7586 5e64 01D0     		addl	%edx, %eax
 7587 5e66 8D1400   		leal	(%rax,%rax), %edx
 7588 5e69 8B8510F5 		movl	-2800(%rbp), %eax
 7588      FFFF
 7589 5e6f 01D0     		addl	%edx, %eax
 7590 5e71 8985B4F3 		movl	%eax, -3148(%rbp)
 7590      FFFF
1646:final_with_print.c **** 					int y_cord = 8*co_ordinates[7]+4*co_ordinates[6]+2*co_ordinates[5]+co_ordinates[4];
 7591              		.loc 1 1646 0
 7592 5e77 8B852CF5 		movl	-2772(%rbp), %eax
 7592      FFFF
 7593 5e7d 8D1400   		leal	(%rax,%rax), %edx
 7594 5e80 8B8528F5 		movl	-2776(%rbp), %eax
 7594      FFFF
 7595 5e86 01D0     		addl	%edx, %eax
 7596 5e88 8D1400   		leal	(%rax,%rax), %edx
 7597 5e8b 8B8524F5 		movl	-2780(%rbp), %eax
 7597      FFFF
 7598 5e91 01D0     		addl	%edx, %eax
 7599 5e93 8D1400   		leal	(%rax,%rax), %edx
 7600 5e96 8B8520F5 		movl	-2784(%rbp), %eax
 7600      FFFF
 7601 5e9c 01D0     		addl	%edx, %eax
 7602 5e9e 8985B8F3 		movl	%eax, -3144(%rbp)
 7602      FFFF
1647:final_with_print.c **** 
1648:final_with_print.c **** 
1649:final_with_print.c **** 
1650:final_with_print.c **** 					printf("%s\n", "x and y co_ordinates calculated, they are as --");
 7603              		.loc 1 1650 0
 7604 5ea4 BF000000 		movl	$.LC200, %edi
 7604      00
 7605 5ea9 E8000000 		call	puts
 7605      00
1651:final_with_print.c **** 					printf("%d %d ", x_cord, y_cord);
 7606              		.loc 1 1651 0
 7607 5eae 8B95B8F3 		movl	-3144(%rbp), %edx
 7607      FFFF
 7608 5eb4 8B85B4F3 		movl	-3148(%rbp), %eax
 7608      FFFF
 7609 5eba 89C6     		movl	%eax, %esi
 7610 5ebc BF000000 		movl	$.LC201, %edi
 7610      00
 7611 5ec1 B8000000 		movl	$0, %eax
 7611      00
 7612 5ec6 E8000000 		call	printf
 7612      00
1652:final_with_print.c **** 					printf("\n");
 7613              		.loc 1 1652 0
 7614 5ecb BF0A0000 		movl	$10, %edi
 7614      00
 7615 5ed0 E8000000 		call	putchar
 7615      00
1653:final_with_print.c **** 					int final_arr[8][8];
1654:final_with_print.c **** 					FILE *fp = fopen("/home/shubham/Desktop/track_data.csv", "r");
 7616              		.loc 1 1654 0
 7617 5ed5 BE000000 		movl	$.LC6, %esi
 7617      00
 7618 5eda BF000000 		movl	$.LC7, %edi
 7618      00
 7619 5edf E8000000 		call	fopen
 7619      00
 7620 5ee4 488985D8 		movq	%rax, -2856(%rbp)
 7620      F4FFFF
1655:final_with_print.c **** 
1656:final_with_print.c **** 					print(x_cord,y_cord,final_arr, fp);
 7621              		.loc 1 1656 0
 7622 5eeb 488B8DD8 		movq	-2856(%rbp), %rcx
 7622      F4FFFF
 7623 5ef2 488D9560 		leaq	-416(%rbp), %rdx
 7623      FEFFFF
 7624 5ef9 8BB5B8F3 		movl	-3144(%rbp), %esi
 7624      FFFF
 7625 5eff 8B85B4F3 		movl	-3148(%rbp), %eax
 7625      FFFF
 7626 5f05 89C7     		movl	%eax, %edi
 7627 5f07 E8000000 		call	print
 7627      00
1657:final_with_print.c **** 
1658:final_with_print.c **** 					printf("%s\n", "Got the information for x and y co_ordinates, 64 bits filled");
 7628              		.loc 1 1658 0
 7629 5f0c BF000000 		movl	$.LC202, %edi
 7629      00
 7630 5f11 E8000000 		call	puts
 7630      00
1659:final_with_print.c **** 					printf("%s\n", "The final 64 bit array in decrypted form --");
 7631              		.loc 1 1659 0
 7632 5f16 BF000000 		movl	$.LC203, %edi
 7632      00
 7633 5f1b E8000000 		call	puts
 7633      00
 7634              	.LBB70:
1660:final_with_print.c **** 
1661:final_with_print.c **** 					for (int i = 0; i < 8; ++i)
 7635              		.loc 1 1661 0
 7636 5f20 C7850CF3 		movl	$0, -3316(%rbp)
 7636      FFFF0000 
 7636      0000
 7637 5f2a EB53     		jmp	.L380
 7638              	.L383:
 7639              	.LBB71:
1662:final_with_print.c **** 					{
1663:final_with_print.c **** 						for (int j = 0; j < 8; ++j)
 7640              		.loc 1 1663 0
 7641 5f2c C78510F3 		movl	$0, -3312(%rbp)
 7641      FFFF0000 
 7641      0000
 7642 5f36 EB37     		jmp	.L381
 7643              	.L382:
1664:final_with_print.c **** 						{
1665:final_with_print.c **** 							printf("%d ", final_arr[i][j]);
 7644              		.loc 1 1665 0 discriminator 3
 7645 5f38 8B8510F3 		movl	-3312(%rbp), %eax
 7645      FFFF
 7646 5f3e 4898     		cltq
 7647 5f40 8B950CF3 		movl	-3316(%rbp), %edx
 7647      FFFF
 7648 5f46 4863D2   		movslq	%edx, %rdx
 7649 5f49 48C1E203 		salq	$3, %rdx
 7650 5f4d 4801D0   		addq	%rdx, %rax
 7651 5f50 8B848560 		movl	-416(%rbp,%rax,4), %eax
 7651      FEFFFF
 7652 5f57 89C6     		movl	%eax, %esi
 7653 5f59 BF000000 		movl	$.LC10, %edi
 7653      00
 7654 5f5e B8000000 		movl	$0, %eax
 7654      00
 7655 5f63 E8000000 		call	printf
 7655      00
1663:final_with_print.c **** 						{
 7656              		.loc 1 1663 0 discriminator 3
 7657 5f68 838510F3 		addl	$1, -3312(%rbp)
 7657      FFFF01
 7658              	.L381:
1663:final_with_print.c **** 						{
 7659              		.loc 1 1663 0 is_stmt 0 discriminator 1
 7660 5f6f 83BD10F3 		cmpl	$7, -3312(%rbp)
 7660      FFFF07
 7661 5f76 7EC0     		jle	.L382
 7662              	.LBE71:
1661:final_with_print.c **** 					{
 7663              		.loc 1 1661 0 is_stmt 1 discriminator 2
 7664 5f78 83850CF3 		addl	$1, -3316(%rbp)
 7664      FFFF01
 7665              	.L380:
1661:final_with_print.c **** 					{
 7666              		.loc 1 1661 0 is_stmt 0 discriminator 1
 7667 5f7f 83BD0CF3 		cmpl	$7, -3316(%rbp)
 7667      FFFF07
 7668 5f86 7EA4     		jle	.L383
 7669              	.LBE70:
1666:final_with_print.c **** 						}
1667:final_with_print.c **** 					}
1668:final_with_print.c **** 
1669:final_with_print.c **** 					printf("\n");
 7670              		.loc 1 1669 0 is_stmt 1
 7671 5f88 BF0A0000 		movl	$10, %edi
 7671      00
 7672 5f8d E8000000 		call	putchar
 7672      00
1670:final_with_print.c **** 					printf("%s\n", "-------------------------H4 ended--------------------------");
 7673              		.loc 1 1670 0
 7674 5f92 BF000000 		movl	$.LC204, %edi
 7674      00
 7675 5f97 E8000000 		call	puts
 7675      00
1671:final_with_print.c **** 
1672:final_with_print.c **** 					printf("%s\n", "-------------------------H5 starts--------------------------");
 7676              		.loc 1 1672 0
 7677 5f9c BF000000 		movl	$.LC205, %edi
 7677      00
 7678 5fa1 E8000000 		call	puts
 7678      00
 7679              	.LBB72:
1673:final_with_print.c **** 
1674:final_with_print.c **** 					int p1[32], p2[32], bin1[32], bin2[32];
1675:final_with_print.c **** 
1676:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 7680              		.loc 1 1676 0
 7681 5fa6 C78514F3 		movl	$0, -3308(%rbp)
 7681      FFFF0000 
 7681      0000
 7682 5fb0 EB2D     		jmp	.L384
 7683              	.L385:
1677:final_with_print.c **** 					{
1678:final_with_print.c **** 						bin1[i] = 0;
 7684              		.loc 1 1678 0 discriminator 3
 7685 5fb2 8B8514F3 		movl	-3308(%rbp), %eax
 7685      FFFF
 7686 5fb8 4898     		cltq
 7687 5fba C7848550 		movl	$0, -1200(%rbp,%rax,4)
 7687      FBFFFF00 
 7687      000000
1679:final_with_print.c **** 						bin2[i] = 0;
 7688              		.loc 1 1679 0 discriminator 3
 7689 5fc5 8B8514F3 		movl	-3308(%rbp), %eax
 7689      FFFF
 7690 5fcb 4898     		cltq
 7691 5fcd C78485D0 		movl	$0, -1072(%rbp,%rax,4)
 7691      FBFFFF00 
 7691      000000
1676:final_with_print.c **** 					{
 7692              		.loc 1 1676 0 discriminator 3
 7693 5fd8 838514F3 		addl	$1, -3308(%rbp)
 7693      FFFF01
 7694              	.L384:
1676:final_with_print.c **** 					{
 7695              		.loc 1 1676 0 is_stmt 0 discriminator 1
 7696 5fdf 83BD14F3 		cmpl	$31, -3308(%rbp)
 7696      FFFF1F
 7697 5fe6 7ECA     		jle	.L385
 7698              	.LBE72:
1680:final_with_print.c **** 					}
1681:final_with_print.c **** 
1682:final_with_print.c **** 					int k1 = 0;
 7699              		.loc 1 1682 0 is_stmt 1
 7700 5fe8 C78518F3 		movl	$0, -3304(%rbp)
 7700      FFFF0000 
 7700      0000
 7701              	.LBB73:
1683:final_with_print.c **** 					for(int i=0; i<4; i++)
 7702              		.loc 1 1683 0
 7703 5ff2 C7851CF3 		movl	$0, -3300(%rbp)
 7703      FFFF0000 
 7703      0000
 7704 5ffc EB58     		jmp	.L386
 7705              	.L389:
 7706              	.LBB74:
1684:final_with_print.c **** 					{
1685:final_with_print.c **** 						for(int j=0; j<8; j++)
 7707              		.loc 1 1685 0
 7708 5ffe C78520F3 		movl	$0, -3296(%rbp)
 7708      FFFF0000 
 7708      0000
 7709 6008 EB3C     		jmp	.L387
 7710              	.L388:
1686:final_with_print.c **** 						{
1687:final_with_print.c **** 							p1[k1] = final_arr[i][j];
 7711              		.loc 1 1687 0 discriminator 3
 7712 600a 8B8520F3 		movl	-3296(%rbp), %eax
 7712      FFFF
 7713 6010 4898     		cltq
 7714 6012 8B951CF3 		movl	-3300(%rbp), %edx
 7714      FFFF
 7715 6018 4863D2   		movslq	%edx, %rdx
 7716 601b 48C1E203 		salq	$3, %rdx
 7717 601f 4801D0   		addq	%rdx, %rax
 7718 6022 8B948560 		movl	-416(%rbp,%rax,4), %edx
 7718      FEFFFF
 7719 6029 8B8518F3 		movl	-3304(%rbp), %eax
 7719      FFFF
 7720 602f 4898     		cltq
 7721 6031 89948550 		movl	%edx, -1456(%rbp,%rax,4)
 7721      FAFFFF
1688:final_with_print.c **** 							k1++;
 7722              		.loc 1 1688 0 discriminator 3
 7723 6038 838518F3 		addl	$1, -3304(%rbp)
 7723      FFFF01
1685:final_with_print.c **** 						{
 7724              		.loc 1 1685 0 discriminator 3
 7725 603f 838520F3 		addl	$1, -3296(%rbp)
 7725      FFFF01
 7726              	.L387:
1685:final_with_print.c **** 						{
 7727              		.loc 1 1685 0 is_stmt 0 discriminator 1
 7728 6046 83BD20F3 		cmpl	$7, -3296(%rbp)
 7728      FFFF07
 7729 604d 7EBB     		jle	.L388
 7730              	.LBE74:
1683:final_with_print.c **** 					{
 7731              		.loc 1 1683 0 is_stmt 1 discriminator 2
 7732 604f 83851CF3 		addl	$1, -3300(%rbp)
 7732      FFFF01
 7733              	.L386:
1683:final_with_print.c **** 					{
 7734              		.loc 1 1683 0 is_stmt 0 discriminator 1
 7735 6056 83BD1CF3 		cmpl	$3, -3300(%rbp)
 7735      FFFF03
 7736 605d 7E9F     		jle	.L389
 7737              	.LBE73:
1689:final_with_print.c **** 						}
1690:final_with_print.c **** 
1691:final_with_print.c **** 					}
1692:final_with_print.c **** 
1693:final_with_print.c **** 					int k2 = 0;
 7738              		.loc 1 1693 0 is_stmt 1
 7739 605f C78524F3 		movl	$0, -3292(%rbp)
 7739      FFFF0000 
 7739      0000
 7740              	.LBB75:
1694:final_with_print.c **** 					for(int i=4; i<8; i++){
 7741              		.loc 1 1694 0
 7742 6069 C78528F3 		movl	$4, -3288(%rbp)
 7742      FFFF0400 
 7742      0000
 7743 6073 EB58     		jmp	.L390
 7744              	.L393:
 7745              	.LBB76:
1695:final_with_print.c **** 						for(int j=0; j<8; j++)
 7746              		.loc 1 1695 0
 7747 6075 C7852CF3 		movl	$0, -3284(%rbp)
 7747      FFFF0000 
 7747      0000
 7748 607f EB3C     		jmp	.L391
 7749              	.L392:
1696:final_with_print.c **** 						{
1697:final_with_print.c **** 							p2[k2] = final_arr[i][j];
 7750              		.loc 1 1697 0 discriminator 3
 7751 6081 8B852CF3 		movl	-3284(%rbp), %eax
 7751      FFFF
 7752 6087 4898     		cltq
 7753 6089 8B9528F3 		movl	-3288(%rbp), %edx
 7753      FFFF
 7754 608f 4863D2   		movslq	%edx, %rdx
 7755 6092 48C1E203 		salq	$3, %rdx
 7756 6096 4801D0   		addq	%rdx, %rax
 7757 6099 8B948560 		movl	-416(%rbp,%rax,4), %edx
 7757      FEFFFF
 7758 60a0 8B8524F3 		movl	-3292(%rbp), %eax
 7758      FFFF
 7759 60a6 4898     		cltq
 7760 60a8 899485D0 		movl	%edx, -1328(%rbp,%rax,4)
 7760      FAFFFF
1698:final_with_print.c **** 							k2++;
 7761              		.loc 1 1698 0 discriminator 3
 7762 60af 838524F3 		addl	$1, -3292(%rbp)
 7762      FFFF01
1695:final_with_print.c **** 						for(int j=0; j<8; j++)
 7763              		.loc 1 1695 0 discriminator 3
 7764 60b6 83852CF3 		addl	$1, -3284(%rbp)
 7764      FFFF01
 7765              	.L391:
1695:final_with_print.c **** 						for(int j=0; j<8; j++)
 7766              		.loc 1 1695 0 is_stmt 0 discriminator 1
 7767 60bd 83BD2CF3 		cmpl	$7, -3284(%rbp)
 7767      FFFF07
 7768 60c4 7EBB     		jle	.L392
 7769              	.LBE76:
1694:final_with_print.c **** 						for(int j=0; j<8; j++)
 7770              		.loc 1 1694 0 is_stmt 1 discriminator 2
 7771 60c6 838528F3 		addl	$1, -3288(%rbp)
 7771      FFFF01
 7772              	.L390:
1694:final_with_print.c **** 						for(int j=0; j<8; j++)
 7773              		.loc 1 1694 0 is_stmt 0 discriminator 1
 7774 60cd 83BD28F3 		cmpl	$7, -3288(%rbp)
 7774      FFFF07
 7775 60d4 7E9F     		jle	.L393
 7776              	.LBE75:
1699:final_with_print.c **** 						}
1700:final_with_print.c **** 					}
1701:final_with_print.c **** 
1702:final_with_print.c **** 					printf("%s\n", "Encrypting first 32 bits of final array");
 7777              		.loc 1 1702 0 is_stmt 1
 7778 60d6 BF000000 		movl	$.LC206, %edi
 7778      00
 7779 60db E8000000 		call	puts
 7779      00
1703:final_with_print.c **** 					encrypter(p1, K, bin1);
 7780              		.loc 1 1703 0
 7781 60e0 488D9550 		leaq	-1200(%rbp), %rdx
 7781      FBFFFF
 7782 60e7 488D8DD0 		leaq	-2608(%rbp), %rcx
 7782      F5FFFF
 7783 60ee 488D8550 		leaq	-1456(%rbp), %rax
 7783      FAFFFF
 7784 60f5 4889CE   		movq	%rcx, %rsi
 7785 60f8 4889C7   		movq	%rax, %rdi
 7786 60fb E8000000 		call	encrypter
 7786      00
1704:final_with_print.c **** 					printf("%s\n", "First 32 bits got encrypted , they are as ----");
 7787              		.loc 1 1704 0
 7788 6100 BF000000 		movl	$.LC207, %edi
 7788      00
 7789 6105 E8000000 		call	puts
 7789      00
 7790              	.LBB77:
1705:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 7791              		.loc 1 1705 0
 7792 610a C78530F3 		movl	$0, -3280(%rbp)
 7792      FFFF0000 
 7792      0000
 7793 6114 EB27     		jmp	.L394
 7794              	.L395:
1706:final_with_print.c **** 					{
1707:final_with_print.c **** 						printf("%d ", bin1[i]);
 7795              		.loc 1 1707 0 discriminator 3
 7796 6116 8B8530F3 		movl	-3280(%rbp), %eax
 7796      FFFF
 7797 611c 4898     		cltq
 7798 611e 8B848550 		movl	-1200(%rbp,%rax,4), %eax
 7798      FBFFFF
 7799 6125 89C6     		movl	%eax, %esi
 7800 6127 BF000000 		movl	$.LC10, %edi
 7800      00
 7801 612c B8000000 		movl	$0, %eax
 7801      00
 7802 6131 E8000000 		call	printf
 7802      00
1705:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 7803              		.loc 1 1705 0 discriminator 3
 7804 6136 838530F3 		addl	$1, -3280(%rbp)
 7804      FFFF01
 7805              	.L394:
1705:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 7806              		.loc 1 1705 0 is_stmt 0 discriminator 1
 7807 613d 83BD30F3 		cmpl	$31, -3280(%rbp)
 7807      FFFF1F
 7808 6144 7ED0     		jle	.L395
 7809              	.LBE77:
1708:final_with_print.c **** 					}
1709:final_with_print.c **** 					printf("\n");
 7810              		.loc 1 1709 0 is_stmt 1
 7811 6146 BF0A0000 		movl	$10, %edi
 7811      00
 7812 614b E8000000 		call	putchar
 7812      00
1710:final_with_print.c **** 					uint8 first32_bitsTosend[4];
1711:final_with_print.c **** 					printf("%s\n", "Converting first 32 bits to uint8");
 7813              		.loc 1 1711 0
 7814 6150 BF000000 		movl	$.LC208, %edi
 7814      00
 7815 6155 E8000000 		call	puts
 7815      00
1712:final_with_print.c **** 					BinTouint8(first32_bitsTosend, bin1);
 7816              		.loc 1 1712 0
 7817 615a 488D9550 		leaq	-1200(%rbp), %rdx
 7817      FBFFFF
 7818 6161 488D45A0 		leaq	-96(%rbp), %rax
 7819 6165 4889D6   		movq	%rdx, %rsi
 7820 6168 4889C7   		movq	%rax, %rdi
 7821 616b E8000000 		call	BinTouint8
 7821      00
1713:final_with_print.c **** 					printf("%s\n", "First 32 bits got converted to uint8, they are as");
 7822              		.loc 1 1713 0
 7823 6170 BF000000 		movl	$.LC209, %edi
 7823      00
 7824 6175 E8000000 		call	puts
 7824      00
 7825              	.LBB78:
1714:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 7826              		.loc 1 1714 0
 7827 617a C78534F3 		movl	$0, -3276(%rbp)
 7827      FFFF0000 
 7827      0000
 7828 6184 EB28     		jmp	.L396
 7829              	.L397:
1715:final_with_print.c **** 					{
1716:final_with_print.c **** 						printf("%d ", first32_bitsTosend[i]);
 7830              		.loc 1 1716 0 discriminator 3
 7831 6186 8B8534F3 		movl	-3276(%rbp), %eax
 7831      FFFF
 7832 618c 4898     		cltq
 7833 618e 0FB64405 		movzbl	-96(%rbp,%rax), %eax
 7833      A0
 7834 6193 0FB6C0   		movzbl	%al, %eax
 7835 6196 89C6     		movl	%eax, %esi
 7836 6198 BF000000 		movl	$.LC10, %edi
 7836      00
 7837 619d B8000000 		movl	$0, %eax
 7837      00
 7838 61a2 E8000000 		call	printf
 7838      00
1714:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 7839              		.loc 1 1714 0 discriminator 3
 7840 61a7 838534F3 		addl	$1, -3276(%rbp)
 7840      FFFF01
 7841              	.L396:
1714:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 7842              		.loc 1 1714 0 is_stmt 0 discriminator 1
 7843 61ae 83BD34F3 		cmpl	$3, -3276(%rbp)
 7843      FFFF03
 7844 61b5 7ECF     		jle	.L397
 7845              	.LBE78:
1717:final_with_print.c **** 					}
1718:final_with_print.c **** 					printf("\n");
 7846              		.loc 1 1718 0 is_stmt 1
 7847 61b7 BF0A0000 		movl	$10, %edi
 7847      00
 7848 61bc E8000000 		call	putchar
 7848      00
1719:final_with_print.c **** 					printf("%s\n", "Writing on channel first 32 bits encrypted");
 7849              		.loc 1 1719 0
 7850 61c1 BF000000 		movl	$.LC210, %edi
 7850      00
 7851 61c6 E8000000 		call	puts
 7851      00
1720:final_with_print.c **** 					delay(del);
 7852              		.loc 1 1720 0
 7853 61cb 8B85B0F3 		movl	-3152(%rbp), %eax
 7853      FFFF
 7854 61d1 89C7     		movl	%eax, %edi
 7855 61d3 E8000000 		call	delay
 7855      00
1721:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &first32_bitsTosend[0], &error);
 7856              		.loc 1 1721 0
 7857 61d8 8B85C8F2 		movl	-3384(%rbp), %eax
 7857      FFFF
 7858 61de 01C0     		addl	%eax, %eax
 7859 61e0 83C001   		addl	$1, %eax
 7860 61e3 0FB6F0   		movzbl	%al, %esi
 7861 61e6 488B85E0 		movq	-3104(%rbp), %rax
 7861      F3FFFF
 7862 61ed 488D8DE8 		leaq	-3096(%rbp), %rcx
 7862      F3FFFF
 7863 61f4 488D55A0 		leaq	-96(%rbp), %rdx
 7864 61f8 4989C8   		movq	%rcx, %r8
 7865 61fb 4889D1   		movq	%rdx, %rcx
 7866 61fe BA010000 		movl	$1, %edx
 7866      00
 7867 6203 4889C7   		movq	%rax, %rdi
 7868 6206 E8000000 		call	flWriteChannel
 7868      00
 7869 620b 8985BCF2 		movl	%eax, -3396(%rbp)
 7869      FFFF
1722:final_with_print.c **** 					delay(del);
 7870              		.loc 1 1722 0
 7871 6211 8B85B0F3 		movl	-3152(%rbp), %eax
 7871      FFFF
 7872 6217 89C7     		movl	%eax, %edi
 7873 6219 E8000000 		call	delay
 7873      00
1723:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &first32_bitsTosend[1], &error);
 7874              		.loc 1 1723 0
 7875 621e 8B85C8F2 		movl	-3384(%rbp), %eax
 7875      FFFF
 7876 6224 01C0     		addl	%eax, %eax
 7877 6226 83C001   		addl	$1, %eax
 7878 6229 0FB6F0   		movzbl	%al, %esi
 7879 622c 488B85E0 		movq	-3104(%rbp), %rax
 7879      F3FFFF
 7880 6233 488D8DE8 		leaq	-3096(%rbp), %rcx
 7880      F3FFFF
 7881 623a 488D55A0 		leaq	-96(%rbp), %rdx
 7882 623e 4883C201 		addq	$1, %rdx
 7883 6242 4989C8   		movq	%rcx, %r8
 7884 6245 4889D1   		movq	%rdx, %rcx
 7885 6248 BA010000 		movl	$1, %edx
 7885      00
 7886 624d 4889C7   		movq	%rax, %rdi
 7887 6250 E8000000 		call	flWriteChannel
 7887      00
 7888 6255 8985BCF2 		movl	%eax, -3396(%rbp)
 7888      FFFF
1724:final_with_print.c **** 					delay(del);
 7889              		.loc 1 1724 0
 7890 625b 8B85B0F3 		movl	-3152(%rbp), %eax
 7890      FFFF
 7891 6261 89C7     		movl	%eax, %edi
 7892 6263 E8000000 		call	delay
 7892      00
1725:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &first32_bitsTosend[2], &error);
 7893              		.loc 1 1725 0
 7894 6268 8B85C8F2 		movl	-3384(%rbp), %eax
 7894      FFFF
 7895 626e 01C0     		addl	%eax, %eax
 7896 6270 83C001   		addl	$1, %eax
 7897 6273 0FB6F0   		movzbl	%al, %esi
 7898 6276 488B85E0 		movq	-3104(%rbp), %rax
 7898      F3FFFF
 7899 627d 488D8DE8 		leaq	-3096(%rbp), %rcx
 7899      F3FFFF
 7900 6284 488D55A0 		leaq	-96(%rbp), %rdx
 7901 6288 4883C202 		addq	$2, %rdx
 7902 628c 4989C8   		movq	%rcx, %r8
 7903 628f 4889D1   		movq	%rdx, %rcx
 7904 6292 BA010000 		movl	$1, %edx
 7904      00
 7905 6297 4889C7   		movq	%rax, %rdi
 7906 629a E8000000 		call	flWriteChannel
 7906      00
 7907 629f 8985BCF2 		movl	%eax, -3396(%rbp)
 7907      FFFF
1726:final_with_print.c **** 					delay(del);
 7908              		.loc 1 1726 0
 7909 62a5 8B85B0F3 		movl	-3152(%rbp), %eax
 7909      FFFF
 7910 62ab 89C7     		movl	%eax, %edi
 7911 62ad E8000000 		call	delay
 7911      00
1727:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &first32_bitsTosend[3], &error);
 7912              		.loc 1 1727 0
 7913 62b2 8B85C8F2 		movl	-3384(%rbp), %eax
 7913      FFFF
 7914 62b8 01C0     		addl	%eax, %eax
 7915 62ba 83C001   		addl	$1, %eax
 7916 62bd 0FB6F0   		movzbl	%al, %esi
 7917 62c0 488B85E0 		movq	-3104(%rbp), %rax
 7917      F3FFFF
 7918 62c7 488D8DE8 		leaq	-3096(%rbp), %rcx
 7918      F3FFFF
 7919 62ce 488D55A0 		leaq	-96(%rbp), %rdx
 7920 62d2 4883C203 		addq	$3, %rdx
 7921 62d6 4989C8   		movq	%rcx, %r8
 7922 62d9 4889D1   		movq	%rdx, %rcx
 7923 62dc BA010000 		movl	$1, %edx
 7923      00
 7924 62e1 4889C7   		movq	%rax, %rdi
 7925 62e4 E8000000 		call	flWriteChannel
 7925      00
 7926 62e9 8985BCF2 		movl	%eax, -3396(%rbp)
 7926      FFFF
1728:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 7927              		.loc 1 1728 0
 7928 62ef 83BDBCF2 		cmpl	$0, -3396(%rbp)
 7928      FFFF00
 7929 62f6 740F     		je	.L398
 7930              		.loc 1 1728 0 is_stmt 0 discriminator 1
 7931 62f8 C785B8F2 		movl	$1, -3400(%rbp)
 7931      FFFF0100 
 7931      0000
 7932 6302 E9D91B00 		jmp	.L230
 7932      00
 7933              	.L398:
1729:final_with_print.c **** 
1730:final_with_print.c **** 					printf("%s\n", "-----------------------------H5 ends------------------");
 7934              		.loc 1 1730 0 is_stmt 1
 7935 6307 BF000000 		movl	$.LC211, %edi
 7935      00
 7936 630c E8000000 		call	puts
 7936      00
1731:final_with_print.c **** 					printf("%s\n", "-----------------------------H6 starts------------------");
 7937              		.loc 1 1731 0
 7938 6311 BF000000 		movl	$.LC212, %edi
 7938      00
 7939 6316 E8000000 		call	puts
 7939      00
1732:final_with_print.c **** 
1733:final_with_print.c **** 					printf("%s\n", "Waiting for encrypted ack1 ");
 7940              		.loc 1 1733 0
 7941 631b BF000000 		movl	$.LC213, %edi
 7941      00
 7942 6320 E8000000 		call	puts
 7942      00
1734:final_with_print.c **** 					time_t startTime, endTime;
1735:final_with_print.c **** 					time(&startTime); 	
 7943              		.loc 1 1735 0
 7944 6325 488D85F8 		leaq	-3080(%rbp), %rax
 7944      F3FFFF
 7945 632c 4889C7   		movq	%rax, %rdi
 7946 632f E8000000 		call	time
 7946      00
1736:final_with_print.c **** 
1737:final_with_print.c **** 					printf("%s\n", "-----------------------------H7 starts------------------");
 7947              		.loc 1 1737 0
 7948 6334 BF000000 		movl	$.LC214, %edi
 7948      00
 7949 6339 E8000000 		call	puts
 7949      00
1738:final_with_print.c **** 
1739:final_with_print.c **** 					double diff;
1740:final_with_print.c **** 					int arb3 = 0;
 7950              		.loc 1 1740 0
 7951 633e C78538F3 		movl	$0, -3272(%rbp)
 7951      FFFF0000 
 7951      0000
1741:final_with_print.c **** 
1742:final_with_print.c **** 					int breaker = 0;
 7952              		.loc 1 1742 0
 7953 6348 C7853CF3 		movl	$0, -3268(%rbp)
 7953      FFFF0000 
 7953      0000
 7954              	.L426:
 7955              	.LBB79:
1743:final_with_print.c **** 					while(true)
1744:final_with_print.c **** 					{
1745:final_with_print.c **** 						time(&endTime);
 7956              		.loc 1 1745 0
 7957 6352 488D8500 		leaq	-3072(%rbp), %rax
 7957      F4FFFF
 7958 6359 4889C7   		movq	%rax, %rdi
 7959 635c E8000000 		call	time
 7959      00
1746:final_with_print.c **** 						diff = difftime(endTime, startTime);
 7960              		.loc 1 1746 0
 7961 6361 488B95F8 		movq	-3080(%rbp), %rdx
 7961      F3FFFF
 7962 6368 488B8500 		movq	-3072(%rbp), %rax
 7962      F4FFFF
 7963 636f 4889D6   		movq	%rdx, %rsi
 7964 6372 4889C7   		movq	%rax, %rdi
 7965 6375 E8000000 		call	difftime
 7965      00
 7966 637a 66480F7E 		movq	%xmm0, %rax
 7966      C0
 7967 637f 488985E0 		movq	%rax, -2848(%rbp)
 7967      F4FFFF
1747:final_with_print.c **** 						if(diff > 256)
 7968              		.loc 1 1747 0
 7969 6386 F20F1085 		movsd	-2848(%rbp), %xmm0
 7969      E0F4FFFF 
 7970 638e 660F2E05 		ucomisd	.LC215(%rip), %xmm0
 7970      00000000 
 7971 6396 7620     		jbe	.L517
1748:final_with_print.c **** 						{
1749:final_with_print.c **** 							printf("%s\n", "Going to H2, time exceeded 256 seconds");
 7972              		.loc 1 1749 0
 7973 6398 BF000000 		movl	$.LC216, %edi
 7973      00
 7974 639d E8000000 		call	puts
 7974      00
1750:final_with_print.c **** 							k = k-1;
 7975              		.loc 1 1750 0
 7976 63a2 83ADC8F2 		subl	$1, -3384(%rbp)
 7976      FFFF01
1751:final_with_print.c **** 							arb3 = 1;
 7977              		.loc 1 1751 0
 7978 63a9 C78538F3 		movl	$1, -3272(%rbp)
 7978      FFFF0100 
 7978      0000
1752:final_with_print.c **** 							break;
 7979              		.loc 1 1752 0
 7980 63b3 E90A0500 		jmp	.L401
 7980      00
 7981              	.L517:
1753:final_with_print.c **** 						}
1754:final_with_print.c **** 						int arb = 0;
 7982              		.loc 1 1754 0
 7983 63b8 C78540F3 		movl	$0, -3264(%rbp)
 7983      FFFF0000 
 7983      0000
1755:final_with_print.c **** 						uint8 encrypted_ack1_again2[4];
1756:final_with_print.c **** 						delay(del);
 7984              		.loc 1 1756 0
 7985 63c2 8B85B0F3 		movl	-3152(%rbp), %eax
 7985      FFFF
 7986 63c8 89C7     		movl	%eax, %edi
 7987 63ca E8000000 		call	delay
 7987      00
1757:final_with_print.c **** 						fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &encrypted_ack1_again2[0], &error);
 7988              		.loc 1 1757 0
 7989 63cf 8B85C8F2 		movl	-3384(%rbp), %eax
 7989      FFFF
 7990 63d5 01C0     		addl	%eax, %eax
 7991 63d7 0FB6F0   		movzbl	%al, %esi
 7992 63da 488B85E0 		movq	-3104(%rbp), %rax
 7992      F3FFFF
 7993 63e1 488D8DE8 		leaq	-3096(%rbp), %rcx
 7993      F3FFFF
 7994 63e8 488D55D0 		leaq	-48(%rbp), %rdx
 7995 63ec 4989C8   		movq	%rcx, %r8
 7996 63ef 4889D1   		movq	%rdx, %rcx
 7997 63f2 BA010000 		movl	$1, %edx
 7997      00
 7998 63f7 4889C7   		movq	%rax, %rdi
 7999 63fa E8000000 		call	flReadChannelAsyncSubmit
 7999      00
 8000 63ff 8985BCF2 		movl	%eax, -3396(%rbp)
 8000      FFFF
1758:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8001              		.loc 1 1758 0
 8002 6405 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8002      FFFF00
 8003 640c 740F     		je	.L402
 8004              		.loc 1 1758 0 is_stmt 0 discriminator 1
 8005 640e C785B8F2 		movl	$1, -3400(%rbp)
 8005      FFFF0100 
 8005      0000
 8006 6418 E9C31A00 		jmp	.L230
 8006      00
 8007              	.L402:
1759:final_with_print.c **** 						fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 8008              		.loc 1 1759 0 is_stmt 1
 8009 641d 488B85E0 		movq	-3104(%rbp), %rax
 8009      F3FFFF
 8010 6424 488DBDE8 		leaq	-3096(%rbp), %rdi
 8010      F3FFFF
 8011 642b 488D8DB4 		leaq	-3404(%rbp), %rcx
 8011      F2FFFF
 8012 6432 488D95B4 		leaq	-3404(%rbp), %rdx
 8012      F2FFFF
 8013 6439 488DB5F0 		leaq	-3088(%rbp), %rsi
 8013      F3FFFF
 8014 6440 4989F8   		movq	%rdi, %r8
 8015 6443 4889C7   		movq	%rax, %rdi
 8016 6446 E8000000 		call	flReadChannelAsyncAwait
 8016      00
 8017 644b 8985BCF2 		movl	%eax, -3396(%rbp)
 8017      FFFF
1760:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8018              		.loc 1 1760 0
 8019 6451 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8019      FFFF00
 8020 6458 740F     		je	.L404
 8021              		.loc 1 1760 0 is_stmt 0 discriminator 1
 8022 645a C785B8F2 		movl	$1, -3400(%rbp)
 8022      FFFF0100 
 8022      0000
 8023 6464 E9680400 		jmp	.L403
 8023      00
 8024              	.L404:
1761:final_with_print.c **** 						if(encrypted_ack1_again2[0] == reset) 
 8025              		.loc 1 1761 0 is_stmt 1
 8026 6469 0FB645D0 		movzbl	-48(%rbp), %eax
 8027 646d 3A85AFF2 		cmpb	-3409(%rbp), %al
 8027      FFFF
 8028 6473 751D     		jne	.L405
1762:final_with_print.c **** 							{
1763:final_with_print.c **** 								k--; 
 8029              		.loc 1 1763 0
 8030 6475 83ADC8F2 		subl	$1, -3384(%rbp)
 8030      FFFF01
1764:final_with_print.c **** 								breaker++; 
 8031              		.loc 1 1764 0
 8032 647c 83853CF3 		addl	$1, -3268(%rbp)
 8032      FFFF01
1765:final_with_print.c **** 							    printf("%s\n", "-------------------------RESET------------------------");
 8033              		.loc 1 1765 0
 8034 6483 BF000000 		movl	$.LC157, %edi
 8034      00
 8035 6488 E8000000 		call	puts
 8035      00
1766:final_with_print.c **** 								break;
 8036              		.loc 1 1766 0
 8037 648d E9300400 		jmp	.L401
 8037      00
 8038              	.L405:
1767:final_with_print.c **** 							}
1768:final_with_print.c **** 						delay(del);
 8039              		.loc 1 1768 0
 8040 6492 8B85B0F3 		movl	-3152(%rbp), %eax
 8040      FFFF
 8041 6498 89C7     		movl	%eax, %edi
 8042 649a E8000000 		call	delay
 8042      00
1769:final_with_print.c **** 						fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &encrypted_ack1_again2[1], &error);
 8043              		.loc 1 1769 0
 8044 649f 8B85C8F2 		movl	-3384(%rbp), %eax
 8044      FFFF
 8045 64a5 01C0     		addl	%eax, %eax
 8046 64a7 0FB6F0   		movzbl	%al, %esi
 8047 64aa 488B85E0 		movq	-3104(%rbp), %rax
 8047      F3FFFF
 8048 64b1 488D8DE8 		leaq	-3096(%rbp), %rcx
 8048      F3FFFF
 8049 64b8 488D55D0 		leaq	-48(%rbp), %rdx
 8050 64bc 4883C201 		addq	$1, %rdx
 8051 64c0 4989C8   		movq	%rcx, %r8
 8052 64c3 4889D1   		movq	%rdx, %rcx
 8053 64c6 BA010000 		movl	$1, %edx
 8053      00
 8054 64cb 4889C7   		movq	%rax, %rdi
 8055 64ce E8000000 		call	flReadChannelAsyncSubmit
 8055      00
 8056 64d3 8985BCF2 		movl	%eax, -3396(%rbp)
 8056      FFFF
1770:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8057              		.loc 1 1770 0
 8058 64d9 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8058      FFFF00
 8059 64e0 740F     		je	.L406
 8060              		.loc 1 1770 0 is_stmt 0 discriminator 1
 8061 64e2 C785B8F2 		movl	$1, -3400(%rbp)
 8061      FFFF0100 
 8061      0000
 8062 64ec E9E00300 		jmp	.L403
 8062      00
 8063              	.L406:
1771:final_with_print.c **** 						fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 8064              		.loc 1 1771 0 is_stmt 1
 8065 64f1 488B85E0 		movq	-3104(%rbp), %rax
 8065      F3FFFF
 8066 64f8 488DBDE8 		leaq	-3096(%rbp), %rdi
 8066      F3FFFF
 8067 64ff 488D8DB4 		leaq	-3404(%rbp), %rcx
 8067      F2FFFF
 8068 6506 488D95B4 		leaq	-3404(%rbp), %rdx
 8068      F2FFFF
 8069 650d 488DB5F0 		leaq	-3088(%rbp), %rsi
 8069      F3FFFF
 8070 6514 4989F8   		movq	%rdi, %r8
 8071 6517 4889C7   		movq	%rax, %rdi
 8072 651a E8000000 		call	flReadChannelAsyncAwait
 8072      00
 8073 651f 8985BCF2 		movl	%eax, -3396(%rbp)
 8073      FFFF
1772:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8074              		.loc 1 1772 0
 8075 6525 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8075      FFFF00
 8076 652c 740F     		je	.L407
 8077              		.loc 1 1772 0 is_stmt 0 discriminator 1
 8078 652e C785B8F2 		movl	$1, -3400(%rbp)
 8078      FFFF0100 
 8078      0000
 8079 6538 E9940300 		jmp	.L403
 8079      00
 8080              	.L407:
1773:final_with_print.c **** 						if(encrypted_ack1_again2[1] == reset) 
 8081              		.loc 1 1773 0 is_stmt 1
 8082 653d 0FB645D1 		movzbl	-47(%rbp), %eax
 8083 6541 3A85AFF2 		cmpb	-3409(%rbp), %al
 8083      FFFF
 8084 6547 751D     		jne	.L408
1774:final_with_print.c **** 							{
1775:final_with_print.c **** 								k--; 
 8085              		.loc 1 1775 0
 8086 6549 83ADC8F2 		subl	$1, -3384(%rbp)
 8086      FFFF01
1776:final_with_print.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 8087              		.loc 1 1776 0
 8088 6550 BF000000 		movl	$.LC157, %edi
 8088      00
 8089 6555 E8000000 		call	puts
 8089      00
1777:final_with_print.c **** 								breaker++; 
 8090              		.loc 1 1777 0
 8091 655a 83853CF3 		addl	$1, -3268(%rbp)
 8091      FFFF01
1778:final_with_print.c **** 								break;
 8092              		.loc 1 1778 0
 8093 6561 E95C0300 		jmp	.L401
 8093      00
 8094              	.L408:
1779:final_with_print.c **** 							}
1780:final_with_print.c **** 						delay(del);
 8095              		.loc 1 1780 0
 8096 6566 8B85B0F3 		movl	-3152(%rbp), %eax
 8096      FFFF
 8097 656c 89C7     		movl	%eax, %edi
 8098 656e E8000000 		call	delay
 8098      00
1781:final_with_print.c **** 						fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &encrypted_ack1_again2[2], &error);
 8099              		.loc 1 1781 0
 8100 6573 8B85C8F2 		movl	-3384(%rbp), %eax
 8100      FFFF
 8101 6579 01C0     		addl	%eax, %eax
 8102 657b 0FB6F0   		movzbl	%al, %esi
 8103 657e 488B85E0 		movq	-3104(%rbp), %rax
 8103      F3FFFF
 8104 6585 488D8DE8 		leaq	-3096(%rbp), %rcx
 8104      F3FFFF
 8105 658c 488D55D0 		leaq	-48(%rbp), %rdx
 8106 6590 4883C202 		addq	$2, %rdx
 8107 6594 4989C8   		movq	%rcx, %r8
 8108 6597 4889D1   		movq	%rdx, %rcx
 8109 659a BA010000 		movl	$1, %edx
 8109      00
 8110 659f 4889C7   		movq	%rax, %rdi
 8111 65a2 E8000000 		call	flReadChannelAsyncSubmit
 8111      00
 8112 65a7 8985BCF2 		movl	%eax, -3396(%rbp)
 8112      FFFF
1782:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8113              		.loc 1 1782 0
 8114 65ad 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8114      FFFF00
 8115 65b4 740F     		je	.L409
 8116              		.loc 1 1782 0 is_stmt 0 discriminator 1
 8117 65b6 C785B8F2 		movl	$1, -3400(%rbp)
 8117      FFFF0100 
 8117      0000
 8118 65c0 E90C0300 		jmp	.L403
 8118      00
 8119              	.L409:
1783:final_with_print.c **** 						fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 8120              		.loc 1 1783 0 is_stmt 1
 8121 65c5 488B85E0 		movq	-3104(%rbp), %rax
 8121      F3FFFF
 8122 65cc 488DBDE8 		leaq	-3096(%rbp), %rdi
 8122      F3FFFF
 8123 65d3 488D8DB4 		leaq	-3404(%rbp), %rcx
 8123      F2FFFF
 8124 65da 488D95B4 		leaq	-3404(%rbp), %rdx
 8124      F2FFFF
 8125 65e1 488DB5F0 		leaq	-3088(%rbp), %rsi
 8125      F3FFFF
 8126 65e8 4989F8   		movq	%rdi, %r8
 8127 65eb 4889C7   		movq	%rax, %rdi
 8128 65ee E8000000 		call	flReadChannelAsyncAwait
 8128      00
 8129 65f3 8985BCF2 		movl	%eax, -3396(%rbp)
 8129      FFFF
1784:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8130              		.loc 1 1784 0
 8131 65f9 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8131      FFFF00
 8132 6600 740F     		je	.L410
 8133              		.loc 1 1784 0 is_stmt 0 discriminator 1
 8134 6602 C785B8F2 		movl	$1, -3400(%rbp)
 8134      FFFF0100 
 8134      0000
 8135 660c E9C00200 		jmp	.L403
 8135      00
 8136              	.L410:
1785:final_with_print.c **** 						if(encrypted_ack1_again2[2] == reset) 
 8137              		.loc 1 1785 0 is_stmt 1
 8138 6611 0FB645D2 		movzbl	-46(%rbp), %eax
 8139 6615 3A85AFF2 		cmpb	-3409(%rbp), %al
 8139      FFFF
 8140 661b 751D     		jne	.L411
1786:final_with_print.c **** 							{
1787:final_with_print.c **** 								k--; 
 8141              		.loc 1 1787 0
 8142 661d 83ADC8F2 		subl	$1, -3384(%rbp)
 8142      FFFF01
1788:final_with_print.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 8143              		.loc 1 1788 0
 8144 6624 BF000000 		movl	$.LC157, %edi
 8144      00
 8145 6629 E8000000 		call	puts
 8145      00
1789:final_with_print.c **** 								breaker++;
 8146              		.loc 1 1789 0
 8147 662e 83853CF3 		addl	$1, -3268(%rbp)
 8147      FFFF01
1790:final_with_print.c **** 								break;
 8148              		.loc 1 1790 0
 8149 6635 E9880200 		jmp	.L401
 8149      00
 8150              	.L411:
1791:final_with_print.c **** 							}
1792:final_with_print.c **** 						delay(del);
 8151              		.loc 1 1792 0
 8152 663a 8B85B0F3 		movl	-3152(%rbp), %eax
 8152      FFFF
 8153 6640 89C7     		movl	%eax, %edi
 8154 6642 E8000000 		call	delay
 8154      00
1793:final_with_print.c **** 						fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &encrypted_ack1_again2[3], &error);
 8155              		.loc 1 1793 0
 8156 6647 8B85C8F2 		movl	-3384(%rbp), %eax
 8156      FFFF
 8157 664d 01C0     		addl	%eax, %eax
 8158 664f 0FB6F0   		movzbl	%al, %esi
 8159 6652 488B85E0 		movq	-3104(%rbp), %rax
 8159      F3FFFF
 8160 6659 488D8DE8 		leaq	-3096(%rbp), %rcx
 8160      F3FFFF
 8161 6660 488D55D0 		leaq	-48(%rbp), %rdx
 8162 6664 4883C203 		addq	$3, %rdx
 8163 6668 4989C8   		movq	%rcx, %r8
 8164 666b 4889D1   		movq	%rdx, %rcx
 8165 666e BA010000 		movl	$1, %edx
 8165      00
 8166 6673 4889C7   		movq	%rax, %rdi
 8167 6676 E8000000 		call	flReadChannelAsyncSubmit
 8167      00
 8168 667b 8985BCF2 		movl	%eax, -3396(%rbp)
 8168      FFFF
1794:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8169              		.loc 1 1794 0
 8170 6681 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8170      FFFF00
 8171 6688 740F     		je	.L412
 8172              		.loc 1 1794 0 is_stmt 0 discriminator 1
 8173 668a C785B8F2 		movl	$1, -3400(%rbp)
 8173      FFFF0100 
 8173      0000
 8174 6694 E9380200 		jmp	.L403
 8174      00
 8175              	.L412:
1795:final_with_print.c **** 						fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 8176              		.loc 1 1795 0 is_stmt 1
 8177 6699 488B85E0 		movq	-3104(%rbp), %rax
 8177      F3FFFF
 8178 66a0 488DBDE8 		leaq	-3096(%rbp), %rdi
 8178      F3FFFF
 8179 66a7 488D8DB4 		leaq	-3404(%rbp), %rcx
 8179      F2FFFF
 8180 66ae 488D95B4 		leaq	-3404(%rbp), %rdx
 8180      F2FFFF
 8181 66b5 488DB5F0 		leaq	-3088(%rbp), %rsi
 8181      F3FFFF
 8182 66bc 4989F8   		movq	%rdi, %r8
 8183 66bf 4889C7   		movq	%rax, %rdi
 8184 66c2 E8000000 		call	flReadChannelAsyncAwait
 8184      00
 8185 66c7 8985BCF2 		movl	%eax, -3396(%rbp)
 8185      FFFF
1796:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8186              		.loc 1 1796 0
 8187 66cd 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8187      FFFF00
 8188 66d4 740F     		je	.L413
 8189              		.loc 1 1796 0 is_stmt 0 discriminator 1
 8190 66d6 C785B8F2 		movl	$1, -3400(%rbp)
 8190      FFFF0100 
 8190      0000
 8191 66e0 E9EC0100 		jmp	.L403
 8191      00
 8192              	.L413:
1797:final_with_print.c **** 						if(encrypted_ack1_again2[3] == reset) 
 8193              		.loc 1 1797 0 is_stmt 1
 8194 66e5 0FB645D3 		movzbl	-45(%rbp), %eax
 8195 66e9 3A85AFF2 		cmpb	-3409(%rbp), %al
 8195      FFFF
 8196 66ef 751D     		jne	.L414
1798:final_with_print.c **** 							{
1799:final_with_print.c **** 								k--; 
 8197              		.loc 1 1799 0
 8198 66f1 83ADC8F2 		subl	$1, -3384(%rbp)
 8198      FFFF01
1800:final_with_print.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 8199              		.loc 1 1800 0
 8200 66f8 BF000000 		movl	$.LC157, %edi
 8200      00
 8201 66fd E8000000 		call	puts
 8201      00
1801:final_with_print.c **** 								breaker++; 
 8202              		.loc 1 1801 0
 8203 6702 83853CF3 		addl	$1, -3268(%rbp)
 8203      FFFF01
1802:final_with_print.c **** 								break;
 8204              		.loc 1 1802 0
 8205 6709 E9B40100 		jmp	.L401
 8205      00
 8206              	.L414:
1803:final_with_print.c **** 							}
1804:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8207              		.loc 1 1804 0
 8208 670e 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8208      FFFF00
 8209 6715 740F     		je	.L415
 8210              		.loc 1 1804 0 is_stmt 0 discriminator 1
 8211 6717 C785B8F2 		movl	$1, -3400(%rbp)
 8211      FFFF0100 
 8211      0000
 8212 6721 E9AB0100 		jmp	.L403
 8212      00
 8213              	.L415:
1805:final_with_print.c **** 						printf("%s\n", "Ack1 received successfully, not checked yet, it is as----");
 8214              		.loc 1 1805 0 is_stmt 1
 8215 6726 BF000000 		movl	$.LC217, %edi
 8215      00
 8216 672b E8000000 		call	puts
 8216      00
 8217              	.LBB80:
1806:final_with_print.c **** 						for (int i = 0; i < 4; ++i)
 8218              		.loc 1 1806 0
 8219 6730 C78544F3 		movl	$0, -3260(%rbp)
 8219      FFFF0000 
 8219      0000
 8220 673a EB28     		jmp	.L416
 8221              	.L417:
1807:final_with_print.c **** 						{
1808:final_with_print.c **** 							printf("%d ", encrypted_ack1_again2[i]);
 8222              		.loc 1 1808 0 discriminator 3
 8223 673c 8B8544F3 		movl	-3260(%rbp), %eax
 8223      FFFF
 8224 6742 4898     		cltq
 8225 6744 0FB64405 		movzbl	-48(%rbp,%rax), %eax
 8225      D0
 8226 6749 0FB6C0   		movzbl	%al, %eax
 8227 674c 89C6     		movl	%eax, %esi
 8228 674e BF000000 		movl	$.LC10, %edi
 8228      00
 8229 6753 B8000000 		movl	$0, %eax
 8229      00
 8230 6758 E8000000 		call	printf
 8230      00
1806:final_with_print.c **** 						for (int i = 0; i < 4; ++i)
 8231              		.loc 1 1806 0 discriminator 3
 8232 675d 838544F3 		addl	$1, -3260(%rbp)
 8232      FFFF01
 8233              	.L416:
1806:final_with_print.c **** 						for (int i = 0; i < 4; ++i)
 8234              		.loc 1 1806 0 is_stmt 0 discriminator 1
 8235 6764 83BD44F3 		cmpl	$3, -3260(%rbp)
 8235      FFFF03
 8236 676b 7ECF     		jle	.L417
 8237              	.LBE80:
1809:final_with_print.c **** 						}
1810:final_with_print.c **** 						printf("\n");
 8238              		.loc 1 1810 0 is_stmt 1
 8239 676d BF0A0000 		movl	$10, %edi
 8239      00
 8240 6772 E8000000 		call	putchar
 8240      00
1811:final_with_print.c **** 						int encrypted_ack1_again2_int[32];
1812:final_with_print.c **** 						printf("%s\n", "Converting encrypted ack1 from uint8 to binary");
 8241              		.loc 1 1812 0
 8242 6777 BF000000 		movl	$.LC176, %edi
 8242      00
 8243 677c E8000000 		call	puts
 8243      00
1813:final_with_print.c **** 						uint8ToBin(encrypted_ack1_again2, encrypted_ack1_again2_int);
 8244              		.loc 1 1813 0
 8245 6781 488D95D0 		leaq	-816(%rbp), %rdx
 8245      FCFFFF
 8246 6788 488D45D0 		leaq	-48(%rbp), %rax
 8247 678c 4889D6   		movq	%rdx, %rsi
 8248 678f 4889C7   		movq	%rax, %rdi
 8249 6792 E8000000 		call	uint8ToBin
 8249      00
1814:final_with_print.c **** 						printf("%s\n", "Converted encrypted ack1 from uint8 to binary , it is as --");
 8250              		.loc 1 1814 0
 8251 6797 BF000000 		movl	$.LC218, %edi
 8251      00
 8252 679c E8000000 		call	puts
 8252      00
 8253              	.LBB81:
1815:final_with_print.c **** 						for (int i = 0; i < 32; ++i)
 8254              		.loc 1 1815 0
 8255 67a1 C78548F3 		movl	$0, -3256(%rbp)
 8255      FFFF0000 
 8255      0000
 8256 67ab EB27     		jmp	.L418
 8257              	.L419:
1816:final_with_print.c **** 						{
1817:final_with_print.c **** 							printf("%d ", encrypted_ack1_again2_int[i]);
 8258              		.loc 1 1817 0 discriminator 3
 8259 67ad 8B8548F3 		movl	-3256(%rbp), %eax
 8259      FFFF
 8260 67b3 4898     		cltq
 8261 67b5 8B8485D0 		movl	-816(%rbp,%rax,4), %eax
 8261      FCFFFF
 8262 67bc 89C6     		movl	%eax, %esi
 8263 67be BF000000 		movl	$.LC10, %edi
 8263      00
 8264 67c3 B8000000 		movl	$0, %eax
 8264      00
 8265 67c8 E8000000 		call	printf
 8265      00
1815:final_with_print.c **** 						for (int i = 0; i < 32; ++i)
 8266              		.loc 1 1815 0 discriminator 3
 8267 67cd 838548F3 		addl	$1, -3256(%rbp)
 8267      FFFF01
 8268              	.L418:
1815:final_with_print.c **** 						for (int i = 0; i < 32; ++i)
 8269              		.loc 1 1815 0 is_stmt 0 discriminator 1
 8270 67d4 83BD48F3 		cmpl	$31, -3256(%rbp)
 8270      FFFF1F
 8271 67db 7ED0     		jle	.L419
 8272              	.LBE81:
1818:final_with_print.c **** 						}
1819:final_with_print.c **** 						printf("\n");
 8273              		.loc 1 1819 0 is_stmt 1
 8274 67dd BF0A0000 		movl	$10, %edi
 8274      00
 8275 67e2 E8000000 		call	putchar
 8275      00
1820:final_with_print.c **** 						int decrypted_ack1_again2_int[32];
1821:final_with_print.c **** 						printf("%s\n", "Decrypting the encrypted ack1");
 8276              		.loc 1 1821 0
 8277 67e7 BF000000 		movl	$.LC219, %edi
 8277      00
 8278 67ec E8000000 		call	puts
 8278      00
1822:final_with_print.c **** 						decrypter(encrypted_ack1_again2_int, K, decrypted_ack1_again2_int);
 8279              		.loc 1 1822 0
 8280 67f1 488D9550 		leaq	-688(%rbp), %rdx
 8280      FDFFFF
 8281 67f8 488D8DD0 		leaq	-2608(%rbp), %rcx
 8281      F5FFFF
 8282 67ff 488D85D0 		leaq	-816(%rbp), %rax
 8282      FCFFFF
 8283 6806 4889CE   		movq	%rcx, %rsi
 8284 6809 4889C7   		movq	%rax, %rdi
 8285 680c E8000000 		call	decrypter
 8285      00
1823:final_with_print.c **** 						printf("%s\n", "Encrypted ack1 decrypted successfully, it is as----");
 8286              		.loc 1 1823 0
 8287 6811 BF000000 		movl	$.LC220, %edi
 8287      00
 8288 6816 E8000000 		call	puts
 8288      00
 8289              	.LBB82:
1824:final_with_print.c **** 						for (int i = 0; i < 32; ++i)
 8290              		.loc 1 1824 0
 8291 681b C7854CF3 		movl	$0, -3252(%rbp)
 8291      FFFF0000 
 8291      0000
 8292 6825 EB27     		jmp	.L420
 8293              	.L421:
1825:final_with_print.c **** 						{
1826:final_with_print.c **** 							printf("%d ", decrypted_ack1_again2_int[i]);
 8294              		.loc 1 1826 0 discriminator 3
 8295 6827 8B854CF3 		movl	-3252(%rbp), %eax
 8295      FFFF
 8296 682d 4898     		cltq
 8297 682f 8B848550 		movl	-688(%rbp,%rax,4), %eax
 8297      FDFFFF
 8298 6836 89C6     		movl	%eax, %esi
 8299 6838 BF000000 		movl	$.LC10, %edi
 8299      00
 8300 683d B8000000 		movl	$0, %eax
 8300      00
 8301 6842 E8000000 		call	printf
 8301      00
1824:final_with_print.c **** 						for (int i = 0; i < 32; ++i)
 8302              		.loc 1 1824 0 discriminator 3
 8303 6847 83854CF3 		addl	$1, -3252(%rbp)
 8303      FFFF01
 8304              	.L420:
1824:final_with_print.c **** 						for (int i = 0; i < 32; ++i)
 8305              		.loc 1 1824 0 is_stmt 0 discriminator 1
 8306 684e 83BD4CF3 		cmpl	$31, -3252(%rbp)
 8306      FFFF1F
 8307 6855 7ED0     		jle	.L421
 8308              	.LBE82:
1827:final_with_print.c **** 						}
1828:final_with_print.c **** 						printf("\n");
 8309              		.loc 1 1828 0 is_stmt 1
 8310 6857 BF0A0000 		movl	$10, %edi
 8310      00
 8311 685c E8000000 		call	putchar
 8311      00
 8312              	.LBB83:
1829:final_with_print.c **** 						for(int i=0; i<32; i++)
 8313              		.loc 1 1829 0
 8314 6861 C78550F3 		movl	$0, -3248(%rbp)
 8314      FFFF0000 
 8314      0000
 8315 686b EB3D     		jmp	.L422
 8316              	.L424:
1830:final_with_print.c **** 						{
1831:final_with_print.c **** 							if(decrypted_ack1_again2_int[i] != ack1[i])
 8317              		.loc 1 1831 0
 8318 686d 8B8550F3 		movl	-3248(%rbp), %eax
 8318      FFFF
 8319 6873 4898     		cltq
 8320 6875 8B948550 		movl	-688(%rbp,%rax,4), %edx
 8320      FDFFFF
 8321 687c 8B8550F3 		movl	-3248(%rbp), %eax
 8321      FFFF
 8322 6882 4898     		cltq
 8323 6884 8B848550 		movl	-2480(%rbp,%rax,4), %eax
 8323      F6FFFF
 8324 688b 39C2     		cmpl	%eax, %edx
 8325 688d 7414     		je	.L423
1832:final_with_print.c **** 							{
1833:final_with_print.c **** 								arb = 1;
 8326              		.loc 1 1833 0
 8327 688f C78540F3 		movl	$1, -3264(%rbp)
 8327      FFFF0100 
 8327      0000
1834:final_with_print.c **** 								printf("%s\n", "Ack1 doesn't match");
 8328              		.loc 1 1834 0
 8329 6899 BF000000 		movl	$.LC221, %edi
 8329      00
 8330 689e E8000000 		call	puts
 8330      00
 8331              	.L423:
1829:final_with_print.c **** 						{
 8332              		.loc 1 1829 0 discriminator 2
 8333 68a3 838550F3 		addl	$1, -3248(%rbp)
 8333      FFFF01
 8334              	.L422:
1829:final_with_print.c **** 						{
 8335              		.loc 1 1829 0 is_stmt 0 discriminator 1
 8336 68aa 83BD50F3 		cmpl	$31, -3248(%rbp)
 8336      FFFF1F
 8337 68b1 7EBA     		jle	.L424
 8338              	.LBE83:
1835:final_with_print.c **** 
1836:final_with_print.c **** 							}
1837:final_with_print.c **** 						}
1838:final_with_print.c **** 						if(arb == 0)
 8339              		.loc 1 1838 0 is_stmt 1
 8340 68b3 83BD40F3 		cmpl	$0, -3264(%rbp)
 8340      FFFF00
 8341 68ba 7405     		je	.L522
 8342              	.LBE79:
1839:final_with_print.c **** 							break;
1840:final_with_print.c **** 					}
 8343              		.loc 1 1840 0
 8344 68bc E991FAFF 		jmp	.L426
 8344      FF
 8345              	.L522:
 8346              	.LBB84:
1839:final_with_print.c **** 							break;
 8347              		.loc 1 1839 0
 8348 68c1 90       		nop
 8349              	.L401:
 8350              	.LBE84:
1841:final_with_print.c **** 
1842:final_with_print.c **** 					if(breaker>=1) continue;
 8351              		.loc 1 1842 0
 8352 68c2 83BD3CF3 		cmpl	$0, -3268(%rbp)
 8352      FFFF00
 8353 68c9 0F8F9615 		jg	.L523
 8353      0000
 8354 68cf EB05     		jmp	.L518
 8355              	.L403:
 8356              	.LBE104:
 8357              	.LBE108:
 8358              	.LBE112:
1294:final_with_print.c **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 8359              		.loc 1 1294 0 discriminator 2
 8360 68d1 E90A1600 		jmp	.L230
 8360      00
 8361              	.L518:
 8362              	.LBB113:
 8363              	.LBB109:
 8364              	.LBB105:
1843:final_with_print.c **** 
1844:final_with_print.c **** 					if(arb3 == 1)
 8365              		.loc 1 1844 0
 8366 68d6 83BD38F3 		cmpl	$1, -3272(%rbp)
 8366      FFFF01
 8367 68dd 0F848515 		je	.L524
 8367      0000
1845:final_with_print.c **** 					{
1846:final_with_print.c **** 						continue;
1847:final_with_print.c **** 					}
1848:final_with_print.c **** 
1849:final_with_print.c **** 					printf("%s\n", "Ack1 match successfully");
 8368              		.loc 1 1849 0
 8369 68e3 BF000000 		movl	$.LC222, %edi
 8369      00
 8370 68e8 E8000000 		call	puts
 8370      00
1850:final_with_print.c **** 
1851:final_with_print.c **** 					printf("%s\n", "encrypting last 32 bits to send to fpga ");
 8371              		.loc 1 1851 0
 8372 68ed BF000000 		movl	$.LC223, %edi
 8372      00
 8373 68f2 E8000000 		call	puts
 8373      00
1852:final_with_print.c **** 
1853:final_with_print.c **** 					encrypter(p2, K, bin2);
 8374              		.loc 1 1853 0
 8375 68f7 488D95D0 		leaq	-1072(%rbp), %rdx
 8375      FBFFFF
 8376 68fe 488D8DD0 		leaq	-2608(%rbp), %rcx
 8376      F5FFFF
 8377 6905 488D85D0 		leaq	-1328(%rbp), %rax
 8377      FAFFFF
 8378 690c 4889CE   		movq	%rcx, %rsi
 8379 690f 4889C7   		movq	%rax, %rdi
 8380 6912 E8000000 		call	encrypter
 8380      00
1854:final_with_print.c **** 
1855:final_with_print.c **** 					printf("%s\n", "Last 32 bits got encrypted , they are as in binary form");
 8381              		.loc 1 1855 0
 8382 6917 BF000000 		movl	$.LC224, %edi
 8382      00
 8383 691c E8000000 		call	puts
 8383      00
 8384              	.LBB85:
1856:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 8385              		.loc 1 1856 0
 8386 6921 C78554F3 		movl	$0, -3244(%rbp)
 8386      FFFF0000 
 8386      0000
 8387 692b EB27     		jmp	.L430
 8388              	.L431:
1857:final_with_print.c **** 					{
1858:final_with_print.c **** 						printf("%d ", bin2[i]);
 8389              		.loc 1 1858 0 discriminator 3
 8390 692d 8B8554F3 		movl	-3244(%rbp), %eax
 8390      FFFF
 8391 6933 4898     		cltq
 8392 6935 8B8485D0 		movl	-1072(%rbp,%rax,4), %eax
 8392      FBFFFF
 8393 693c 89C6     		movl	%eax, %esi
 8394 693e BF000000 		movl	$.LC10, %edi
 8394      00
 8395 6943 B8000000 		movl	$0, %eax
 8395      00
 8396 6948 E8000000 		call	printf
 8396      00
1856:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 8397              		.loc 1 1856 0 discriminator 3
 8398 694d 838554F3 		addl	$1, -3244(%rbp)
 8398      FFFF01
 8399              	.L430:
1856:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 8400              		.loc 1 1856 0 is_stmt 0 discriminator 1
 8401 6954 83BD54F3 		cmpl	$31, -3244(%rbp)
 8401      FFFF1F
 8402 695b 7ED0     		jle	.L431
 8403              	.LBE85:
1859:final_with_print.c **** 					}
1860:final_with_print.c **** 
1861:final_with_print.c **** 					uint8 last32_bitsTosend[4];
1862:final_with_print.c **** 					printf("%s\n", "Converting last 32 bits to uint8");
 8404              		.loc 1 1862 0 is_stmt 1
 8405 695d BF000000 		movl	$.LC225, %edi
 8405      00
 8406 6962 E8000000 		call	puts
 8406      00
1863:final_with_print.c **** 					BinTouint8(last32_bitsTosend, bin2);
 8407              		.loc 1 1863 0
 8408 6967 488D95D0 		leaq	-1072(%rbp), %rdx
 8408      FBFFFF
 8409 696e 488D45B0 		leaq	-80(%rbp), %rax
 8410 6972 4889D6   		movq	%rdx, %rsi
 8411 6975 4889C7   		movq	%rax, %rdi
 8412 6978 E8000000 		call	BinTouint8
 8412      00
1864:final_with_print.c **** 					printf("%s\n", "Last 32 bits got converted to uint8, they are as");
 8413              		.loc 1 1864 0
 8414 697d BF000000 		movl	$.LC226, %edi
 8414      00
 8415 6982 E8000000 		call	puts
 8415      00
 8416              	.LBB86:
1865:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 8417              		.loc 1 1865 0
 8418 6987 C78558F3 		movl	$0, -3240(%rbp)
 8418      FFFF0000 
 8418      0000
 8419 6991 EB28     		jmp	.L432
 8420              	.L433:
1866:final_with_print.c **** 					{
1867:final_with_print.c **** 						printf("%d ", last32_bitsTosend[i]);
 8421              		.loc 1 1867 0 discriminator 3
 8422 6993 8B8558F3 		movl	-3240(%rbp), %eax
 8422      FFFF
 8423 6999 4898     		cltq
 8424 699b 0FB64405 		movzbl	-80(%rbp,%rax), %eax
 8424      B0
 8425 69a0 0FB6C0   		movzbl	%al, %eax
 8426 69a3 89C6     		movl	%eax, %esi
 8427 69a5 BF000000 		movl	$.LC10, %edi
 8427      00
 8428 69aa B8000000 		movl	$0, %eax
 8428      00
 8429 69af E8000000 		call	printf
 8429      00
1865:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 8430              		.loc 1 1865 0 discriminator 3
 8431 69b4 838558F3 		addl	$1, -3240(%rbp)
 8431      FFFF01
 8432              	.L432:
1865:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 8433              		.loc 1 1865 0 is_stmt 0 discriminator 1
 8434 69bb 83BD58F3 		cmpl	$3, -3240(%rbp)
 8434      FFFF03
 8435 69c2 7ECF     		jle	.L433
 8436              	.LBE86:
1868:final_with_print.c **** 					}
1869:final_with_print.c **** 					printf("\n");
 8437              		.loc 1 1869 0 is_stmt 1
 8438 69c4 BF0A0000 		movl	$10, %edi
 8438      00
 8439 69c9 E8000000 		call	putchar
 8439      00
1870:final_with_print.c **** 					printf("%s\n", "Writing on channel last 32 bits encrypted");
 8440              		.loc 1 1870 0
 8441 69ce BF000000 		movl	$.LC227, %edi
 8441      00
 8442 69d3 E8000000 		call	puts
 8442      00
1871:final_with_print.c **** 					delay(del);
 8443              		.loc 1 1871 0
 8444 69d8 8B85B0F3 		movl	-3152(%rbp), %eax
 8444      FFFF
 8445 69de 89C7     		movl	%eax, %edi
 8446 69e0 E8000000 		call	delay
 8446      00
1872:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &last32_bitsTosend[0], &error);
 8447              		.loc 1 1872 0
 8448 69e5 8B85C8F2 		movl	-3384(%rbp), %eax
 8448      FFFF
 8449 69eb 01C0     		addl	%eax, %eax
 8450 69ed 83C001   		addl	$1, %eax
 8451 69f0 0FB6F0   		movzbl	%al, %esi
 8452 69f3 488B85E0 		movq	-3104(%rbp), %rax
 8452      F3FFFF
 8453 69fa 488D8DE8 		leaq	-3096(%rbp), %rcx
 8453      F3FFFF
 8454 6a01 488D55B0 		leaq	-80(%rbp), %rdx
 8455 6a05 4989C8   		movq	%rcx, %r8
 8456 6a08 4889D1   		movq	%rdx, %rcx
 8457 6a0b BA010000 		movl	$1, %edx
 8457      00
 8458 6a10 4889C7   		movq	%rax, %rdi
 8459 6a13 E8000000 		call	flWriteChannel
 8459      00
 8460 6a18 8985BCF2 		movl	%eax, -3396(%rbp)
 8460      FFFF
1873:final_with_print.c **** 					delay(del);
 8461              		.loc 1 1873 0
 8462 6a1e 8B85B0F3 		movl	-3152(%rbp), %eax
 8462      FFFF
 8463 6a24 89C7     		movl	%eax, %edi
 8464 6a26 E8000000 		call	delay
 8464      00
1874:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &last32_bitsTosend[1], &error);
 8465              		.loc 1 1874 0
 8466 6a2b 8B85C8F2 		movl	-3384(%rbp), %eax
 8466      FFFF
 8467 6a31 01C0     		addl	%eax, %eax
 8468 6a33 83C001   		addl	$1, %eax
 8469 6a36 0FB6F0   		movzbl	%al, %esi
 8470 6a39 488B85E0 		movq	-3104(%rbp), %rax
 8470      F3FFFF
 8471 6a40 488D8DE8 		leaq	-3096(%rbp), %rcx
 8471      F3FFFF
 8472 6a47 488D55B0 		leaq	-80(%rbp), %rdx
 8473 6a4b 4883C201 		addq	$1, %rdx
 8474 6a4f 4989C8   		movq	%rcx, %r8
 8475 6a52 4889D1   		movq	%rdx, %rcx
 8476 6a55 BA010000 		movl	$1, %edx
 8476      00
 8477 6a5a 4889C7   		movq	%rax, %rdi
 8478 6a5d E8000000 		call	flWriteChannel
 8478      00
 8479 6a62 8985BCF2 		movl	%eax, -3396(%rbp)
 8479      FFFF
1875:final_with_print.c **** 					delay(del);
 8480              		.loc 1 1875 0
 8481 6a68 8B85B0F3 		movl	-3152(%rbp), %eax
 8481      FFFF
 8482 6a6e 89C7     		movl	%eax, %edi
 8483 6a70 E8000000 		call	delay
 8483      00
1876:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &last32_bitsTosend[2], &error);
 8484              		.loc 1 1876 0
 8485 6a75 8B85C8F2 		movl	-3384(%rbp), %eax
 8485      FFFF
 8486 6a7b 01C0     		addl	%eax, %eax
 8487 6a7d 83C001   		addl	$1, %eax
 8488 6a80 0FB6F0   		movzbl	%al, %esi
 8489 6a83 488B85E0 		movq	-3104(%rbp), %rax
 8489      F3FFFF
 8490 6a8a 488D8DE8 		leaq	-3096(%rbp), %rcx
 8490      F3FFFF
 8491 6a91 488D55B0 		leaq	-80(%rbp), %rdx
 8492 6a95 4883C202 		addq	$2, %rdx
 8493 6a99 4989C8   		movq	%rcx, %r8
 8494 6a9c 4889D1   		movq	%rdx, %rcx
 8495 6a9f BA010000 		movl	$1, %edx
 8495      00
 8496 6aa4 4889C7   		movq	%rax, %rdi
 8497 6aa7 E8000000 		call	flWriteChannel
 8497      00
 8498 6aac 8985BCF2 		movl	%eax, -3396(%rbp)
 8498      FFFF
1877:final_with_print.c **** 					delay(del);
 8499              		.loc 1 1877 0
 8500 6ab2 8B85B0F3 		movl	-3152(%rbp), %eax
 8500      FFFF
 8501 6ab8 89C7     		movl	%eax, %edi
 8502 6aba E8000000 		call	delay
 8502      00
1878:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &last32_bitsTosend[3], &error);
 8503              		.loc 1 1878 0
 8504 6abf 8B85C8F2 		movl	-3384(%rbp), %eax
 8504      FFFF
 8505 6ac5 01C0     		addl	%eax, %eax
 8506 6ac7 83C001   		addl	$1, %eax
 8507 6aca 0FB6F0   		movzbl	%al, %esi
 8508 6acd 488B85E0 		movq	-3104(%rbp), %rax
 8508      F3FFFF
 8509 6ad4 488D8DE8 		leaq	-3096(%rbp), %rcx
 8509      F3FFFF
 8510 6adb 488D55B0 		leaq	-80(%rbp), %rdx
 8511 6adf 4883C203 		addq	$3, %rdx
 8512 6ae3 4989C8   		movq	%rcx, %r8
 8513 6ae6 4889D1   		movq	%rdx, %rcx
 8514 6ae9 BA010000 		movl	$1, %edx
 8514      00
 8515 6aee 4889C7   		movq	%rax, %rdi
 8516 6af1 E8000000 		call	flWriteChannel
 8516      00
 8517 6af6 8985BCF2 		movl	%eax, -3396(%rbp)
 8517      FFFF
1879:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8518              		.loc 1 1879 0
 8519 6afc 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8519      FFFF00
 8520 6b03 740F     		je	.L434
 8521              		.loc 1 1879 0 is_stmt 0 discriminator 1
 8522 6b05 C785B8F2 		movl	$1, -3400(%rbp)
 8522      FFFF0100 
 8522      0000
 8523 6b0f E9CC1300 		jmp	.L230
 8523      00
 8524              	.L434:
1880:final_with_print.c **** 					printf("%s\n", "Successfully written last 32 bits");
 8525              		.loc 1 1880 0 is_stmt 1
 8526 6b14 BF000000 		movl	$.LC228, %edi
 8526      00
 8527 6b19 E8000000 		call	puts
 8527      00
1881:final_with_print.c **** 
1882:final_with_print.c **** 					printf("%s\n", "---------------------------------H7 ends---------------------");
 8528              		.loc 1 1882 0
 8529 6b1e BF000000 		movl	$.LC229, %edi
 8529      00
 8530 6b23 E8000000 		call	puts
 8530      00
1883:final_with_print.c **** 
1884:final_with_print.c **** 					time_t startTime2, endTime2;
1885:final_with_print.c **** 					double diff2;
1886:final_with_print.c **** 					time(&startTime2);
 8531              		.loc 1 1886 0
 8532 6b28 488D8508 		leaq	-3064(%rbp), %rax
 8532      F4FFFF
 8533 6b2f 4889C7   		movq	%rax, %rdi
 8534 6b32 E8000000 		call	time
 8534      00
1887:final_with_print.c **** 
1888:final_with_print.c **** 					int breaker2 = 0;
 8535              		.loc 1 1888 0
 8536 6b37 C7855CF3 		movl	$0, -3236(%rbp)
 8536      FFFF0000 
 8536      0000
 8537              	.L465:
 8538              	.LBB87:
1889:final_with_print.c **** 					while(true)
1890:final_with_print.c **** 					{
1891:final_with_print.c **** 						time(&endTime2);
 8539              		.loc 1 1891 0
 8540 6b41 488D8510 		leaq	-3056(%rbp), %rax
 8540      F4FFFF
 8541 6b48 4889C7   		movq	%rax, %rdi
 8542 6b4b E8000000 		call	time
 8542      00
1892:final_with_print.c **** 						diff2 = difftime(endTime2, startTime2);
 8543              		.loc 1 1892 0
 8544 6b50 488B9508 		movq	-3064(%rbp), %rdx
 8544      F4FFFF
 8545 6b57 488B8510 		movq	-3056(%rbp), %rax
 8545      F4FFFF
 8546 6b5e 4889D6   		movq	%rdx, %rsi
 8547 6b61 4889C7   		movq	%rax, %rdi
 8548 6b64 E8000000 		call	difftime
 8548      00
 8549 6b69 66480F7E 		movq	%xmm0, %rax
 8549      C0
 8550 6b6e 488985E8 		movq	%rax, -2840(%rbp)
 8550      F4FFFF
1893:final_with_print.c **** 						if(diff2 > 256)
 8551              		.loc 1 1893 0
 8552 6b75 F20F1085 		movsd	-2840(%rbp), %xmm0
 8552      E8F4FFFF 
 8553 6b7d 660F2E05 		ucomisd	.LC215(%rip), %xmm0
 8553      00000000 
 8554 6b85 7613     		jbe	.L519
1894:final_with_print.c **** 						{
1895:final_with_print.c **** 							printf("%s\n", "Going to H2, time exceeded 256 seconds");
 8555              		.loc 1 1895 0
 8556 6b87 BF000000 		movl	$.LC216, %edi
 8556      00
 8557 6b8c E8000000 		call	puts
 8557      00
1896:final_with_print.c **** 							k = k-1;
 8558              		.loc 1 1896 0
 8559 6b91 83ADC8F2 		subl	$1, -3384(%rbp)
 8559      FFFF01
 8560 6b98 EBA7     		jmp	.L465
 8561              	.L519:
1897:final_with_print.c **** 							continue;
1898:final_with_print.c **** 						}
1899:final_with_print.c **** 						int arb2 = 0;
 8562              		.loc 1 1899 0
 8563 6b9a C78560F3 		movl	$0, -3232(%rbp)
 8563      FFFF0000 
 8563      0000
1900:final_with_print.c **** 						uint8 encrypted_ack1_again3[4];
1901:final_with_print.c **** 						delay(del);
 8564              		.loc 1 1901 0
 8565 6ba4 8B85B0F3 		movl	-3152(%rbp), %eax
 8565      FFFF
 8566 6baa 89C7     		movl	%eax, %edi
 8567 6bac E8000000 		call	delay
 8567      00
1902:final_with_print.c **** 						fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &encrypted_ack1_again3[0], &error);
 8568              		.loc 1 1902 0
 8569 6bb1 8B85C8F2 		movl	-3384(%rbp), %eax
 8569      FFFF
 8570 6bb7 01C0     		addl	%eax, %eax
 8571 6bb9 0FB6F0   		movzbl	%al, %esi
 8572 6bbc 488B85E0 		movq	-3104(%rbp), %rax
 8572      F3FFFF
 8573 6bc3 488D8DE8 		leaq	-3096(%rbp), %rcx
 8573      F3FFFF
 8574 6bca 488D55D0 		leaq	-48(%rbp), %rdx
 8575 6bce 4989C8   		movq	%rcx, %r8
 8576 6bd1 4889D1   		movq	%rdx, %rcx
 8577 6bd4 BA010000 		movl	$1, %edx
 8577      00
 8578 6bd9 4889C7   		movq	%rax, %rdi
 8579 6bdc E8000000 		call	flReadChannelAsyncSubmit
 8579      00
 8580 6be1 8985BCF2 		movl	%eax, -3396(%rbp)
 8580      FFFF
1903:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8581              		.loc 1 1903 0
 8582 6be7 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8582      FFFF00
 8583 6bee 740F     		je	.L438
 8584              		.loc 1 1903 0 is_stmt 0 discriminator 1
 8585 6bf0 C785B8F2 		movl	$1, -3400(%rbp)
 8585      FFFF0100 
 8585      0000
 8586 6bfa E9E11200 		jmp	.L230
 8586      00
 8587              	.L438:
1904:final_with_print.c **** 						fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 8588              		.loc 1 1904 0 is_stmt 1
 8589 6bff 488B85E0 		movq	-3104(%rbp), %rax
 8589      F3FFFF
 8590 6c06 488DBDE8 		leaq	-3096(%rbp), %rdi
 8590      F3FFFF
 8591 6c0d 488D8DB4 		leaq	-3404(%rbp), %rcx
 8591      F2FFFF
 8592 6c14 488D95B4 		leaq	-3404(%rbp), %rdx
 8592      F2FFFF
 8593 6c1b 488DB5F0 		leaq	-3088(%rbp), %rsi
 8593      F3FFFF
 8594 6c22 4989F8   		movq	%rdi, %r8
 8595 6c25 4889C7   		movq	%rax, %rdi
 8596 6c28 E8000000 		call	flReadChannelAsyncAwait
 8596      00
 8597 6c2d 8985BCF2 		movl	%eax, -3396(%rbp)
 8597      FFFF
1905:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8598              		.loc 1 1905 0
 8599 6c33 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8599      FFFF00
 8600 6c3a 740F     		je	.L440
 8601              		.loc 1 1905 0 is_stmt 0 discriminator 1
 8602 6c3c C785B8F2 		movl	$1, -3400(%rbp)
 8602      FFFF0100 
 8602      0000
 8603 6c46 E9590400 		jmp	.L439
 8603      00
 8604              	.L440:
1906:final_with_print.c **** 						if(encrypted_ack1_again3[0] == reset) 
 8605              		.loc 1 1906 0 is_stmt 1
 8606 6c4b 0FB645D0 		movzbl	-48(%rbp), %eax
 8607 6c4f 3A85AFF2 		cmpb	-3409(%rbp), %al
 8607      FFFF
 8608 6c55 751D     		jne	.L441
1907:final_with_print.c **** 							{
1908:final_with_print.c **** 								k--; 
 8609              		.loc 1 1908 0
 8610 6c57 83ADC8F2 		subl	$1, -3384(%rbp)
 8610      FFFF01
1909:final_with_print.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 8611              		.loc 1 1909 0
 8612 6c5e BF000000 		movl	$.LC157, %edi
 8612      00
 8613 6c63 E8000000 		call	puts
 8613      00
1910:final_with_print.c **** 								breaker2++; 
 8614              		.loc 1 1910 0
 8615 6c68 83855CF3 		addl	$1, -3236(%rbp)
 8615      FFFF01
1911:final_with_print.c **** 								break;
 8616              		.loc 1 1911 0
 8617 6c6f E9350400 		jmp	.L442
 8617      00
 8618              	.L441:
1912:final_with_print.c **** 							}
1913:final_with_print.c **** 						delay(del);
 8619              		.loc 1 1913 0
 8620 6c74 8B85B0F3 		movl	-3152(%rbp), %eax
 8620      FFFF
 8621 6c7a 89C7     		movl	%eax, %edi
 8622 6c7c E8000000 		call	delay
 8622      00
1914:final_with_print.c **** 						fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &encrypted_ack1_again3[1], &error);
 8623              		.loc 1 1914 0
 8624 6c81 8B85C8F2 		movl	-3384(%rbp), %eax
 8624      FFFF
 8625 6c87 01C0     		addl	%eax, %eax
 8626 6c89 0FB6F0   		movzbl	%al, %esi
 8627 6c8c 488B85E0 		movq	-3104(%rbp), %rax
 8627      F3FFFF
 8628 6c93 488D8DE8 		leaq	-3096(%rbp), %rcx
 8628      F3FFFF
 8629 6c9a 488D55D0 		leaq	-48(%rbp), %rdx
 8630 6c9e 4883C201 		addq	$1, %rdx
 8631 6ca2 4989C8   		movq	%rcx, %r8
 8632 6ca5 4889D1   		movq	%rdx, %rcx
 8633 6ca8 BA010000 		movl	$1, %edx
 8633      00
 8634 6cad 4889C7   		movq	%rax, %rdi
 8635 6cb0 E8000000 		call	flReadChannelAsyncSubmit
 8635      00
 8636 6cb5 8985BCF2 		movl	%eax, -3396(%rbp)
 8636      FFFF
1915:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8637              		.loc 1 1915 0
 8638 6cbb 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8638      FFFF00
 8639 6cc2 740F     		je	.L443
 8640              		.loc 1 1915 0 is_stmt 0 discriminator 1
 8641 6cc4 C785B8F2 		movl	$1, -3400(%rbp)
 8641      FFFF0100 
 8641      0000
 8642 6cce E9D10300 		jmp	.L439
 8642      00
 8643              	.L443:
1916:final_with_print.c **** 						fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 8644              		.loc 1 1916 0 is_stmt 1
 8645 6cd3 488B85E0 		movq	-3104(%rbp), %rax
 8645      F3FFFF
 8646 6cda 488DBDE8 		leaq	-3096(%rbp), %rdi
 8646      F3FFFF
 8647 6ce1 488D8DB4 		leaq	-3404(%rbp), %rcx
 8647      F2FFFF
 8648 6ce8 488D95B4 		leaq	-3404(%rbp), %rdx
 8648      F2FFFF
 8649 6cef 488DB5F0 		leaq	-3088(%rbp), %rsi
 8649      F3FFFF
 8650 6cf6 4989F8   		movq	%rdi, %r8
 8651 6cf9 4889C7   		movq	%rax, %rdi
 8652 6cfc E8000000 		call	flReadChannelAsyncAwait
 8652      00
 8653 6d01 8985BCF2 		movl	%eax, -3396(%rbp)
 8653      FFFF
1917:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8654              		.loc 1 1917 0
 8655 6d07 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8655      FFFF00
 8656 6d0e 740F     		je	.L444
 8657              		.loc 1 1917 0 is_stmt 0 discriminator 1
 8658 6d10 C785B8F2 		movl	$1, -3400(%rbp)
 8658      FFFF0100 
 8658      0000
 8659 6d1a E9850300 		jmp	.L439
 8659      00
 8660              	.L444:
1918:final_with_print.c **** 						if(encrypted_ack1_again3[1] == reset) 
 8661              		.loc 1 1918 0 is_stmt 1
 8662 6d1f 0FB645D1 		movzbl	-47(%rbp), %eax
 8663 6d23 3A85AFF2 		cmpb	-3409(%rbp), %al
 8663      FFFF
 8664 6d29 751D     		jne	.L445
1919:final_with_print.c **** 							{
1920:final_with_print.c **** 								k--; 
 8665              		.loc 1 1920 0
 8666 6d2b 83ADC8F2 		subl	$1, -3384(%rbp)
 8666      FFFF01
1921:final_with_print.c **** 								breaker2++;
 8667              		.loc 1 1921 0
 8668 6d32 83855CF3 		addl	$1, -3236(%rbp)
 8668      FFFF01
1922:final_with_print.c **** 								printf("%s\n", "-------------------------RESET------------------------"); 
 8669              		.loc 1 1922 0
 8670 6d39 BF000000 		movl	$.LC157, %edi
 8670      00
 8671 6d3e E8000000 		call	puts
 8671      00
1923:final_with_print.c **** 								break;
 8672              		.loc 1 1923 0
 8673 6d43 E9610300 		jmp	.L442
 8673      00
 8674              	.L445:
1924:final_with_print.c **** 							}
1925:final_with_print.c **** 						delay(del);
 8675              		.loc 1 1925 0
 8676 6d48 8B85B0F3 		movl	-3152(%rbp), %eax
 8676      FFFF
 8677 6d4e 89C7     		movl	%eax, %edi
 8678 6d50 E8000000 		call	delay
 8678      00
1926:final_with_print.c **** 						fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &encrypted_ack1_again3[2], &error);
 8679              		.loc 1 1926 0
 8680 6d55 8B85C8F2 		movl	-3384(%rbp), %eax
 8680      FFFF
 8681 6d5b 01C0     		addl	%eax, %eax
 8682 6d5d 0FB6F0   		movzbl	%al, %esi
 8683 6d60 488B85E0 		movq	-3104(%rbp), %rax
 8683      F3FFFF
 8684 6d67 488D8DE8 		leaq	-3096(%rbp), %rcx
 8684      F3FFFF
 8685 6d6e 488D55D0 		leaq	-48(%rbp), %rdx
 8686 6d72 4883C202 		addq	$2, %rdx
 8687 6d76 4989C8   		movq	%rcx, %r8
 8688 6d79 4889D1   		movq	%rdx, %rcx
 8689 6d7c BA010000 		movl	$1, %edx
 8689      00
 8690 6d81 4889C7   		movq	%rax, %rdi
 8691 6d84 E8000000 		call	flReadChannelAsyncSubmit
 8691      00
 8692 6d89 8985BCF2 		movl	%eax, -3396(%rbp)
 8692      FFFF
1927:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8693              		.loc 1 1927 0
 8694 6d8f 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8694      FFFF00
 8695 6d96 740F     		je	.L446
 8696              		.loc 1 1927 0 is_stmt 0 discriminator 1
 8697 6d98 C785B8F2 		movl	$1, -3400(%rbp)
 8697      FFFF0100 
 8697      0000
 8698 6da2 E9FD0200 		jmp	.L439
 8698      00
 8699              	.L446:
1928:final_with_print.c **** 						fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 8700              		.loc 1 1928 0 is_stmt 1
 8701 6da7 488B85E0 		movq	-3104(%rbp), %rax
 8701      F3FFFF
 8702 6dae 488DBDE8 		leaq	-3096(%rbp), %rdi
 8702      F3FFFF
 8703 6db5 488D8DB4 		leaq	-3404(%rbp), %rcx
 8703      F2FFFF
 8704 6dbc 488D95B4 		leaq	-3404(%rbp), %rdx
 8704      F2FFFF
 8705 6dc3 488DB5F0 		leaq	-3088(%rbp), %rsi
 8705      F3FFFF
 8706 6dca 4989F8   		movq	%rdi, %r8
 8707 6dcd 4889C7   		movq	%rax, %rdi
 8708 6dd0 E8000000 		call	flReadChannelAsyncAwait
 8708      00
 8709 6dd5 8985BCF2 		movl	%eax, -3396(%rbp)
 8709      FFFF
1929:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8710              		.loc 1 1929 0
 8711 6ddb 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8711      FFFF00
 8712 6de2 740F     		je	.L447
 8713              		.loc 1 1929 0 is_stmt 0 discriminator 1
 8714 6de4 C785B8F2 		movl	$1, -3400(%rbp)
 8714      FFFF0100 
 8714      0000
 8715 6dee E9B10200 		jmp	.L439
 8715      00
 8716              	.L447:
1930:final_with_print.c **** 						if(encrypted_ack1_again3[2] == reset) 
 8717              		.loc 1 1930 0 is_stmt 1
 8718 6df3 0FB645D2 		movzbl	-46(%rbp), %eax
 8719 6df7 3A85AFF2 		cmpb	-3409(%rbp), %al
 8719      FFFF
 8720 6dfd 751D     		jne	.L448
1931:final_with_print.c **** 							{
1932:final_with_print.c **** 								k--; 
 8721              		.loc 1 1932 0
 8722 6dff 83ADC8F2 		subl	$1, -3384(%rbp)
 8722      FFFF01
1933:final_with_print.c **** 								breaker2++; 
 8723              		.loc 1 1933 0
 8724 6e06 83855CF3 		addl	$1, -3236(%rbp)
 8724      FFFF01
1934:final_with_print.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 8725              		.loc 1 1934 0
 8726 6e0d BF000000 		movl	$.LC157, %edi
 8726      00
 8727 6e12 E8000000 		call	puts
 8727      00
1935:final_with_print.c **** 								break;
 8728              		.loc 1 1935 0
 8729 6e17 E98D0200 		jmp	.L442
 8729      00
 8730              	.L448:
1936:final_with_print.c **** 							}
1937:final_with_print.c **** 						delay(del);
 8731              		.loc 1 1937 0
 8732 6e1c 8B85B0F3 		movl	-3152(%rbp), %eax
 8732      FFFF
 8733 6e22 89C7     		movl	%eax, %edi
 8734 6e24 E8000000 		call	delay
 8734      00
1938:final_with_print.c **** 						fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &encrypted_ack1_again3[3], &error);
 8735              		.loc 1 1938 0
 8736 6e29 8B85C8F2 		movl	-3384(%rbp), %eax
 8736      FFFF
 8737 6e2f 01C0     		addl	%eax, %eax
 8738 6e31 0FB6F0   		movzbl	%al, %esi
 8739 6e34 488B85E0 		movq	-3104(%rbp), %rax
 8739      F3FFFF
 8740 6e3b 488D8DE8 		leaq	-3096(%rbp), %rcx
 8740      F3FFFF
 8741 6e42 488D55D0 		leaq	-48(%rbp), %rdx
 8742 6e46 4883C203 		addq	$3, %rdx
 8743 6e4a 4989C8   		movq	%rcx, %r8
 8744 6e4d 4889D1   		movq	%rdx, %rcx
 8745 6e50 BA010000 		movl	$1, %edx
 8745      00
 8746 6e55 4889C7   		movq	%rax, %rdi
 8747 6e58 E8000000 		call	flReadChannelAsyncSubmit
 8747      00
 8748 6e5d 8985BCF2 		movl	%eax, -3396(%rbp)
 8748      FFFF
1939:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8749              		.loc 1 1939 0
 8750 6e63 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8750      FFFF00
 8751 6e6a 740F     		je	.L449
 8752              		.loc 1 1939 0 is_stmt 0 discriminator 1
 8753 6e6c C785B8F2 		movl	$1, -3400(%rbp)
 8753      FFFF0100 
 8753      0000
 8754 6e76 E9290200 		jmp	.L439
 8754      00
 8755              	.L449:
1940:final_with_print.c **** 						fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 8756              		.loc 1 1940 0 is_stmt 1
 8757 6e7b 488B85E0 		movq	-3104(%rbp), %rax
 8757      F3FFFF
 8758 6e82 488DBDE8 		leaq	-3096(%rbp), %rdi
 8758      F3FFFF
 8759 6e89 488D8DB4 		leaq	-3404(%rbp), %rcx
 8759      F2FFFF
 8760 6e90 488D95B4 		leaq	-3404(%rbp), %rdx
 8760      F2FFFF
 8761 6e97 488DB5F0 		leaq	-3088(%rbp), %rsi
 8761      F3FFFF
 8762 6e9e 4989F8   		movq	%rdi, %r8
 8763 6ea1 4889C7   		movq	%rax, %rdi
 8764 6ea4 E8000000 		call	flReadChannelAsyncAwait
 8764      00
 8765 6ea9 8985BCF2 		movl	%eax, -3396(%rbp)
 8765      FFFF
1941:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8766              		.loc 1 1941 0
 8767 6eaf 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8767      FFFF00
 8768 6eb6 740F     		je	.L450
 8769              		.loc 1 1941 0 is_stmt 0 discriminator 1
 8770 6eb8 C785B8F2 		movl	$1, -3400(%rbp)
 8770      FFFF0100 
 8770      0000
 8771 6ec2 E9DD0100 		jmp	.L439
 8771      00
 8772              	.L450:
1942:final_with_print.c **** 						if(encrypted_ack1_again3[3] == reset) 
 8773              		.loc 1 1942 0 is_stmt 1
 8774 6ec7 0FB645D3 		movzbl	-45(%rbp), %eax
 8775 6ecb 3A85AFF2 		cmpb	-3409(%rbp), %al
 8775      FFFF
 8776 6ed1 751D     		jne	.L451
1943:final_with_print.c **** 							{
1944:final_with_print.c **** 								k--; 
 8777              		.loc 1 1944 0
 8778 6ed3 83ADC8F2 		subl	$1, -3384(%rbp)
 8778      FFFF01
1945:final_with_print.c **** 								breaker2++;
 8779              		.loc 1 1945 0
 8780 6eda 83855CF3 		addl	$1, -3236(%rbp)
 8780      FFFF01
1946:final_with_print.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 8781              		.loc 1 1946 0
 8782 6ee1 BF000000 		movl	$.LC157, %edi
 8782      00
 8783 6ee6 E8000000 		call	puts
 8783      00
1947:final_with_print.c **** 								break;
 8784              		.loc 1 1947 0
 8785 6eeb E9B90100 		jmp	.L442
 8785      00
 8786              	.L451:
1948:final_with_print.c **** 							}
1949:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8787              		.loc 1 1949 0
 8788 6ef0 83BDBCF2 		cmpl	$0, -3396(%rbp)
 8788      FFFF00
 8789 6ef7 740F     		je	.L452
 8790              		.loc 1 1949 0 is_stmt 0 discriminator 1
 8791 6ef9 C785B8F2 		movl	$1, -3400(%rbp)
 8791      FFFF0100 
 8791      0000
 8792 6f03 E99C0100 		jmp	.L439
 8792      00
 8793              	.L452:
1950:final_with_print.c **** 						printf("%s\n", "Ack1 received successfully, not checked yet, it is as----");
 8794              		.loc 1 1950 0 is_stmt 1
 8795 6f08 BF000000 		movl	$.LC217, %edi
 8795      00
 8796 6f0d E8000000 		call	puts
 8796      00
 8797              	.LBB88:
1951:final_with_print.c **** 						for (int i = 0; i < 4; ++i)
 8798              		.loc 1 1951 0
 8799 6f12 C78564F3 		movl	$0, -3228(%rbp)
 8799      FFFF0000 
 8799      0000
 8800 6f1c EB28     		jmp	.L453
 8801              	.L454:
1952:final_with_print.c **** 						{
1953:final_with_print.c **** 							printf("%d ", encrypted_ack1_again3[i]);
 8802              		.loc 1 1953 0 discriminator 3
 8803 6f1e 8B8564F3 		movl	-3228(%rbp), %eax
 8803      FFFF
 8804 6f24 4898     		cltq
 8805 6f26 0FB64405 		movzbl	-48(%rbp,%rax), %eax
 8805      D0
 8806 6f2b 0FB6C0   		movzbl	%al, %eax
 8807 6f2e 89C6     		movl	%eax, %esi
 8808 6f30 BF000000 		movl	$.LC10, %edi
 8808      00
 8809 6f35 B8000000 		movl	$0, %eax
 8809      00
 8810 6f3a E8000000 		call	printf
 8810      00
1951:final_with_print.c **** 						for (int i = 0; i < 4; ++i)
 8811              		.loc 1 1951 0 discriminator 3
 8812 6f3f 838564F3 		addl	$1, -3228(%rbp)
 8812      FFFF01
 8813              	.L453:
1951:final_with_print.c **** 						for (int i = 0; i < 4; ++i)
 8814              		.loc 1 1951 0 is_stmt 0 discriminator 1
 8815 6f46 83BD64F3 		cmpl	$3, -3228(%rbp)
 8815      FFFF03
 8816 6f4d 7ECF     		jle	.L454
 8817              	.LBE88:
1954:final_with_print.c **** 						}
1955:final_with_print.c **** 						printf("\n");
 8818              		.loc 1 1955 0 is_stmt 1
 8819 6f4f BF0A0000 		movl	$10, %edi
 8819      00
 8820 6f54 E8000000 		call	putchar
 8820      00
1956:final_with_print.c **** 						int encrypted_ack1_again3_int[32];
1957:final_with_print.c **** 						printf("%s\n", "Converting encrypted ack1 from uint8 to binary");
 8821              		.loc 1 1957 0
 8822 6f59 BF000000 		movl	$.LC176, %edi
 8822      00
 8823 6f5e E8000000 		call	puts
 8823      00
1958:final_with_print.c **** 						uint8ToBin(encrypted_ack1_again3, encrypted_ack1_again3_int);
 8824              		.loc 1 1958 0
 8825 6f63 488D95D0 		leaq	-816(%rbp), %rdx
 8825      FCFFFF
 8826 6f6a 488D45D0 		leaq	-48(%rbp), %rax
 8827 6f6e 4889D6   		movq	%rdx, %rsi
 8828 6f71 4889C7   		movq	%rax, %rdi
 8829 6f74 E8000000 		call	uint8ToBin
 8829      00
1959:final_with_print.c **** 						printf("%s\n", "Converted encrypted ack1 from uint8 to binary , it is as --");
 8830              		.loc 1 1959 0
 8831 6f79 BF000000 		movl	$.LC218, %edi
 8831      00
 8832 6f7e E8000000 		call	puts
 8832      00
 8833              	.LBB89:
1960:final_with_print.c **** 						for (int i = 0; i < 32; ++i)
 8834              		.loc 1 1960 0
 8835 6f83 C78568F3 		movl	$0, -3224(%rbp)
 8835      FFFF0000 
 8835      0000
 8836 6f8d EB27     		jmp	.L455
 8837              	.L456:
1961:final_with_print.c **** 						{
1962:final_with_print.c **** 							printf("%d ", encrypted_ack1_again3_int[i]);
 8838              		.loc 1 1962 0 discriminator 3
 8839 6f8f 8B8568F3 		movl	-3224(%rbp), %eax
 8839      FFFF
 8840 6f95 4898     		cltq
 8841 6f97 8B8485D0 		movl	-816(%rbp,%rax,4), %eax
 8841      FCFFFF
 8842 6f9e 89C6     		movl	%eax, %esi
 8843 6fa0 BF000000 		movl	$.LC10, %edi
 8843      00
 8844 6fa5 B8000000 		movl	$0, %eax
 8844      00
 8845 6faa E8000000 		call	printf
 8845      00
1960:final_with_print.c **** 						for (int i = 0; i < 32; ++i)
 8846              		.loc 1 1960 0 discriminator 3
 8847 6faf 838568F3 		addl	$1, -3224(%rbp)
 8847      FFFF01
 8848              	.L455:
1960:final_with_print.c **** 						for (int i = 0; i < 32; ++i)
 8849              		.loc 1 1960 0 is_stmt 0 discriminator 1
 8850 6fb6 83BD68F3 		cmpl	$31, -3224(%rbp)
 8850      FFFF1F
 8851 6fbd 7ED0     		jle	.L456
 8852              	.LBE89:
1963:final_with_print.c **** 						}
1964:final_with_print.c **** 						printf("\n");
 8853              		.loc 1 1964 0 is_stmt 1
 8854 6fbf BF0A0000 		movl	$10, %edi
 8854      00
 8855 6fc4 E8000000 		call	putchar
 8855      00
1965:final_with_print.c **** 						int decrypted_ack1_again3_int[32];
1966:final_with_print.c **** 						printf("%s\n", "Decrypting the encrypted ack1");
 8856              		.loc 1 1966 0
 8857 6fc9 BF000000 		movl	$.LC219, %edi
 8857      00
 8858 6fce E8000000 		call	puts
 8858      00
1967:final_with_print.c **** 						decrypter(encrypted_ack1_again3_int, K, decrypted_ack1_again3_int);
 8859              		.loc 1 1967 0
 8860 6fd3 488D9550 		leaq	-688(%rbp), %rdx
 8860      FDFFFF
 8861 6fda 488D8DD0 		leaq	-2608(%rbp), %rcx
 8861      F5FFFF
 8862 6fe1 488D85D0 		leaq	-816(%rbp), %rax
 8862      FCFFFF
 8863 6fe8 4889CE   		movq	%rcx, %rsi
 8864 6feb 4889C7   		movq	%rax, %rdi
 8865 6fee E8000000 		call	decrypter
 8865      00
1968:final_with_print.c **** 						printf("%s\n", "Encrypted ack1 decrypted successfully, it is as----");
 8866              		.loc 1 1968 0
 8867 6ff3 BF000000 		movl	$.LC220, %edi
 8867      00
 8868 6ff8 E8000000 		call	puts
 8868      00
 8869              	.LBB90:
1969:final_with_print.c **** 						for (int i = 0; i < 32; ++i)
 8870              		.loc 1 1969 0
 8871 6ffd C7856CF3 		movl	$0, -3220(%rbp)
 8871      FFFF0000 
 8871      0000
 8872 7007 EB27     		jmp	.L457
 8873              	.L458:
1970:final_with_print.c **** 						{
1971:final_with_print.c **** 							printf("%d ", decrypted_ack1_again3_int[i]);
 8874              		.loc 1 1971 0 discriminator 3
 8875 7009 8B856CF3 		movl	-3220(%rbp), %eax
 8875      FFFF
 8876 700f 4898     		cltq
 8877 7011 8B848550 		movl	-688(%rbp,%rax,4), %eax
 8877      FDFFFF
 8878 7018 89C6     		movl	%eax, %esi
 8879 701a BF000000 		movl	$.LC10, %edi
 8879      00
 8880 701f B8000000 		movl	$0, %eax
 8880      00
 8881 7024 E8000000 		call	printf
 8881      00
1969:final_with_print.c **** 						for (int i = 0; i < 32; ++i)
 8882              		.loc 1 1969 0 discriminator 3
 8883 7029 83856CF3 		addl	$1, -3220(%rbp)
 8883      FFFF01
 8884              	.L457:
1969:final_with_print.c **** 						for (int i = 0; i < 32; ++i)
 8885              		.loc 1 1969 0 is_stmt 0 discriminator 1
 8886 7030 83BD6CF3 		cmpl	$31, -3220(%rbp)
 8886      FFFF1F
 8887 7037 7ED0     		jle	.L458
 8888              	.LBE90:
1972:final_with_print.c **** 						}
1973:final_with_print.c **** 						printf("\n");
 8889              		.loc 1 1973 0 is_stmt 1
 8890 7039 BF0A0000 		movl	$10, %edi
 8890      00
 8891 703e E8000000 		call	putchar
 8891      00
 8892              	.LBB91:
1974:final_with_print.c **** 						for(int i=0; i<32; i++)
 8893              		.loc 1 1974 0
 8894 7043 C78570F3 		movl	$0, -3216(%rbp)
 8894      FFFF0000 
 8894      0000
 8895 704d EB3D     		jmp	.L459
 8896              	.L461:
1975:final_with_print.c **** 						{
1976:final_with_print.c **** 							if(decrypted_ack1_again3_int[i] != ack1[i])
 8897              		.loc 1 1976 0
 8898 704f 8B8570F3 		movl	-3216(%rbp), %eax
 8898      FFFF
 8899 7055 4898     		cltq
 8900 7057 8B948550 		movl	-688(%rbp,%rax,4), %edx
 8900      FDFFFF
 8901 705e 8B8570F3 		movl	-3216(%rbp), %eax
 8901      FFFF
 8902 7064 4898     		cltq
 8903 7066 8B848550 		movl	-2480(%rbp,%rax,4), %eax
 8903      F6FFFF
 8904 706d 39C2     		cmpl	%eax, %edx
 8905 706f 7414     		je	.L460
1977:final_with_print.c **** 							{
1978:final_with_print.c **** 								arb2 = 1;
 8906              		.loc 1 1978 0
 8907 7071 C78560F3 		movl	$1, -3232(%rbp)
 8907      FFFF0100 
 8907      0000
1979:final_with_print.c **** 								printf("%s\n", "Ack1 doesn't match");
 8908              		.loc 1 1979 0
 8909 707b BF000000 		movl	$.LC221, %edi
 8909      00
 8910 7080 E8000000 		call	puts
 8910      00
 8911              	.L460:
1974:final_with_print.c **** 						{
 8912              		.loc 1 1974 0 discriminator 2
 8913 7085 838570F3 		addl	$1, -3216(%rbp)
 8913      FFFF01
 8914              	.L459:
1974:final_with_print.c **** 						{
 8915              		.loc 1 1974 0 is_stmt 0 discriminator 1
 8916 708c 83BD70F3 		cmpl	$31, -3216(%rbp)
 8916      FFFF1F
 8917 7093 7EBA     		jle	.L461
 8918              	.LBE91:
1980:final_with_print.c **** 
1981:final_with_print.c **** 							}
1982:final_with_print.c **** 						}
1983:final_with_print.c **** 						if(arb2 == 0)
 8919              		.loc 1 1983 0 is_stmt 1
 8920 7095 83BD60F3 		cmpl	$0, -3232(%rbp)
 8920      FFFF00
 8921 709c 0F859FFA 		jne	.L465
 8921      FFFF
1984:final_with_print.c **** 							break;
 8922              		.loc 1 1984 0
 8923 70a2 EB05     		jmp	.L442
 8924              	.L439:
 8925              	.LBE87:
 8926              	.LBE105:
 8927              	.LBE109:
 8928              	.LBE113:
1294:final_with_print.c **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 8929              		.loc 1 1294 0 discriminator 2
 8930 70a4 E9370E00 		jmp	.L230
 8930      00
 8931              	.L442:
 8932              	.LBB114:
 8933              	.LBB110:
 8934              	.LBB106:
1985:final_with_print.c **** 					}
1986:final_with_print.c **** 
1987:final_with_print.c **** 					if(breaker2 >= 1) continue;
 8935              		.loc 1 1987 0
 8936 70a9 83BD5CF3 		cmpl	$0, -3236(%rbp)
 8936      FFFF00
 8937 70b0 0F8FB50D 		jg	.L525
 8937      0000
1988:final_with_print.c **** 
1989:final_with_print.c **** 					printf("\n");
 8938              		.loc 1 1989 0
 8939 70b6 BF0A0000 		movl	$10, %edi
 8939      00
 8940 70bb E8000000 		call	putchar
 8940      00
1990:final_with_print.c **** 					int encrypted_ack2_again[32];
1991:final_with_print.c **** 					printf("%s\n", "Encrypting ack2 ");
 8941              		.loc 1 1991 0
 8942 70c0 BF000000 		movl	$.LC230, %edi
 8942      00
 8943 70c5 E8000000 		call	puts
 8943      00
1992:final_with_print.c **** 					encrypter(ack2, K, encrypted_ack2_again);
 8944              		.loc 1 1992 0
 8945 70ca 488D9550 		leaq	-944(%rbp), %rdx
 8945      FCFFFF
 8946 70d1 488D8DD0 		leaq	-2608(%rbp), %rcx
 8946      F5FFFF
 8947 70d8 488D85D0 		leaq	-2352(%rbp), %rax
 8947      F6FFFF
 8948 70df 4889CE   		movq	%rcx, %rsi
 8949 70e2 4889C7   		movq	%rax, %rdi
 8950 70e5 E8000000 		call	encrypter
 8950      00
1993:final_with_print.c **** 					printf("%s\n", "Encrypted ack2 is as follows  ----");
 8951              		.loc 1 1993 0
 8952 70ea BF000000 		movl	$.LC231, %edi
 8952      00
 8953 70ef E8000000 		call	puts
 8953      00
 8954              	.LBB92:
1994:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 8955              		.loc 1 1994 0
 8956 70f4 C78574F3 		movl	$0, -3212(%rbp)
 8956      FFFF0000 
 8956      0000
 8957 70fe EB27     		jmp	.L466
 8958              	.L467:
1995:final_with_print.c **** 					{
1996:final_with_print.c **** 						printf("%d ", encrypted_ack2_again[i]);
 8959              		.loc 1 1996 0 discriminator 3
 8960 7100 8B8574F3 		movl	-3212(%rbp), %eax
 8960      FFFF
 8961 7106 4898     		cltq
 8962 7108 8B848550 		movl	-944(%rbp,%rax,4), %eax
 8962      FCFFFF
 8963 710f 89C6     		movl	%eax, %esi
 8964 7111 BF000000 		movl	$.LC10, %edi
 8964      00
 8965 7116 B8000000 		movl	$0, %eax
 8965      00
 8966 711b E8000000 		call	printf
 8966      00
1994:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 8967              		.loc 1 1994 0 discriminator 3
 8968 7120 838574F3 		addl	$1, -3212(%rbp)
 8968      FFFF01
 8969              	.L466:
1994:final_with_print.c **** 					for (int i = 0; i < 32; ++i)
 8970              		.loc 1 1994 0 is_stmt 0 discriminator 1
 8971 7127 83BD74F3 		cmpl	$31, -3212(%rbp)
 8971      FFFF1F
 8972 712e 7ED0     		jle	.L467
 8973              	.LBE92:
1997:final_with_print.c **** 					}
1998:final_with_print.c **** 					printf("\n");
 8974              		.loc 1 1998 0 is_stmt 1
 8975 7130 BF0A0000 		movl	$10, %edi
 8975      00
 8976 7135 E8000000 		call	putchar
 8976      00
1999:final_with_print.c **** 					uint8 encrypted_ack2_again_uint8[4];
2000:final_with_print.c **** 					printf("%s\n", "Converting encrypted ack2 from binary to uint8");
 8977              		.loc 1 2000 0
 8978 713a BF000000 		movl	$.LC193, %edi
 8978      00
 8979 713f E8000000 		call	puts
 8979      00
2001:final_with_print.c **** 					BinTouint8(encrypted_ack2_again_uint8, encrypted_ack2_again);
 8980              		.loc 1 2001 0
 8981 7144 488D9550 		leaq	-944(%rbp), %rdx
 8981      FCFFFF
 8982 714b 488D45C0 		leaq	-64(%rbp), %rax
 8983 714f 4889D6   		movq	%rdx, %rsi
 8984 7152 4889C7   		movq	%rax, %rdi
 8985 7155 E8000000 		call	BinTouint8
 8985      00
2002:final_with_print.c **** 					printf("%s\n", "Converted encrypted ack2 to uint8, it is as follows");
 8986              		.loc 1 2002 0
 8987 715a BF000000 		movl	$.LC232, %edi
 8987      00
 8988 715f E8000000 		call	puts
 8988      00
 8989              	.LBB93:
2003:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 8990              		.loc 1 2003 0
 8991 7164 C78578F3 		movl	$0, -3208(%rbp)
 8991      FFFF0000 
 8991      0000
 8992 716e EB28     		jmp	.L468
 8993              	.L469:
2004:final_with_print.c **** 					{
2005:final_with_print.c **** 						printf("%d ", encrypted_ack2_again_uint8[i]);
 8994              		.loc 1 2005 0 discriminator 3
 8995 7170 8B8578F3 		movl	-3208(%rbp), %eax
 8995      FFFF
 8996 7176 4898     		cltq
 8997 7178 0FB64405 		movzbl	-64(%rbp,%rax), %eax
 8997      C0
 8998 717d 0FB6C0   		movzbl	%al, %eax
 8999 7180 89C6     		movl	%eax, %esi
 9000 7182 BF000000 		movl	$.LC10, %edi
 9000      00
 9001 7187 B8000000 		movl	$0, %eax
 9001      00
 9002 718c E8000000 		call	printf
 9002      00
2003:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 9003              		.loc 1 2003 0 discriminator 3
 9004 7191 838578F3 		addl	$1, -3208(%rbp)
 9004      FFFF01
 9005              	.L468:
2003:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 9006              		.loc 1 2003 0 is_stmt 0 discriminator 1
 9007 7198 83BD78F3 		cmpl	$3, -3208(%rbp)
 9007      FFFF03
 9008 719f 7ECF     		jle	.L469
 9009              	.LBE93:
2006:final_with_print.c **** 					}
2007:final_with_print.c **** 					printf("\n");
 9010              		.loc 1 2007 0 is_stmt 1
 9011 71a1 BF0A0000 		movl	$10, %edi
 9011      00
 9012 71a6 E8000000 		call	putchar
 9012      00
2008:final_with_print.c **** 					printf("%s\n", "Writing encrypted ack2 to channel");
 9013              		.loc 1 2008 0
 9014 71ab BF000000 		movl	$.LC233, %edi
 9014      00
 9015 71b0 E8000000 		call	puts
 9015      00
2009:final_with_print.c **** 					delay(del);
 9016              		.loc 1 2009 0
 9017 71b5 8B85B0F3 		movl	-3152(%rbp), %eax
 9017      FFFF
 9018 71bb 89C7     		movl	%eax, %edi
 9019 71bd E8000000 		call	delay
 9019      00
2010:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &encrypted_ack2_again_uint8[0], &error);
 9020              		.loc 1 2010 0
 9021 71c2 8B85C8F2 		movl	-3384(%rbp), %eax
 9021      FFFF
 9022 71c8 01C0     		addl	%eax, %eax
 9023 71ca 83C001   		addl	$1, %eax
 9024 71cd 0FB6F0   		movzbl	%al, %esi
 9025 71d0 488B85E0 		movq	-3104(%rbp), %rax
 9025      F3FFFF
 9026 71d7 488D8DE8 		leaq	-3096(%rbp), %rcx
 9026      F3FFFF
 9027 71de 488D55C0 		leaq	-64(%rbp), %rdx
 9028 71e2 4989C8   		movq	%rcx, %r8
 9029 71e5 4889D1   		movq	%rdx, %rcx
 9030 71e8 BA010000 		movl	$1, %edx
 9030      00
 9031 71ed 4889C7   		movq	%rax, %rdi
 9032 71f0 E8000000 		call	flWriteChannel
 9032      00
 9033 71f5 8985BCF2 		movl	%eax, -3396(%rbp)
 9033      FFFF
2011:final_with_print.c **** 					delay(del);
 9034              		.loc 1 2011 0
 9035 71fb 8B85B0F3 		movl	-3152(%rbp), %eax
 9035      FFFF
 9036 7201 89C7     		movl	%eax, %edi
 9037 7203 E8000000 		call	delay
 9037      00
2012:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &encrypted_ack2_again_uint8[1], &error);
 9038              		.loc 1 2012 0
 9039 7208 8B85C8F2 		movl	-3384(%rbp), %eax
 9039      FFFF
 9040 720e 01C0     		addl	%eax, %eax
 9041 7210 83C001   		addl	$1, %eax
 9042 7213 0FB6F0   		movzbl	%al, %esi
 9043 7216 488B85E0 		movq	-3104(%rbp), %rax
 9043      F3FFFF
 9044 721d 488D8DE8 		leaq	-3096(%rbp), %rcx
 9044      F3FFFF
 9045 7224 488D55C0 		leaq	-64(%rbp), %rdx
 9046 7228 4883C201 		addq	$1, %rdx
 9047 722c 4989C8   		movq	%rcx, %r8
 9048 722f 4889D1   		movq	%rdx, %rcx
 9049 7232 BA010000 		movl	$1, %edx
 9049      00
 9050 7237 4889C7   		movq	%rax, %rdi
 9051 723a E8000000 		call	flWriteChannel
 9051      00
 9052 723f 8985BCF2 		movl	%eax, -3396(%rbp)
 9052      FFFF
2013:final_with_print.c **** 					delay(del);
 9053              		.loc 1 2013 0
 9054 7245 8B85B0F3 		movl	-3152(%rbp), %eax
 9054      FFFF
 9055 724b 89C7     		movl	%eax, %edi
 9056 724d E8000000 		call	delay
 9056      00
2014:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &encrypted_ack2_again_uint8[2], &error);
 9057              		.loc 1 2014 0
 9058 7252 8B85C8F2 		movl	-3384(%rbp), %eax
 9058      FFFF
 9059 7258 01C0     		addl	%eax, %eax
 9060 725a 83C001   		addl	$1, %eax
 9061 725d 0FB6F0   		movzbl	%al, %esi
 9062 7260 488B85E0 		movq	-3104(%rbp), %rax
 9062      F3FFFF
 9063 7267 488D8DE8 		leaq	-3096(%rbp), %rcx
 9063      F3FFFF
 9064 726e 488D55C0 		leaq	-64(%rbp), %rdx
 9065 7272 4883C202 		addq	$2, %rdx
 9066 7276 4989C8   		movq	%rcx, %r8
 9067 7279 4889D1   		movq	%rdx, %rcx
 9068 727c BA010000 		movl	$1, %edx
 9068      00
 9069 7281 4889C7   		movq	%rax, %rdi
 9070 7284 E8000000 		call	flWriteChannel
 9070      00
 9071 7289 8985BCF2 		movl	%eax, -3396(%rbp)
 9071      FFFF
2015:final_with_print.c **** 					delay(del);
 9072              		.loc 1 2015 0
 9073 728f 8B85B0F3 		movl	-3152(%rbp), %eax
 9073      FFFF
 9074 7295 89C7     		movl	%eax, %edi
 9075 7297 E8000000 		call	delay
 9075      00
2016:final_with_print.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &encrypted_ack2_again_uint8[3], &error);
 9076              		.loc 1 2016 0
 9077 729c 8B85C8F2 		movl	-3384(%rbp), %eax
 9077      FFFF
 9078 72a2 01C0     		addl	%eax, %eax
 9079 72a4 83C001   		addl	$1, %eax
 9080 72a7 0FB6F0   		movzbl	%al, %esi
 9081 72aa 488B85E0 		movq	-3104(%rbp), %rax
 9081      F3FFFF
 9082 72b1 488D8DE8 		leaq	-3096(%rbp), %rcx
 9082      F3FFFF
 9083 72b8 488D55C0 		leaq	-64(%rbp), %rdx
 9084 72bc 4883C203 		addq	$3, %rdx
 9085 72c0 4989C8   		movq	%rcx, %r8
 9086 72c3 4889D1   		movq	%rdx, %rcx
 9087 72c6 BA010000 		movl	$1, %edx
 9087      00
 9088 72cb 4889C7   		movq	%rax, %rdi
 9089 72ce E8000000 		call	flWriteChannel
 9089      00
 9090 72d3 8985BCF2 		movl	%eax, -3396(%rbp)
 9090      FFFF
2017:final_with_print.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 9091              		.loc 1 2017 0
 9092 72d9 83BDBCF2 		cmpl	$0, -3396(%rbp)
 9092      FFFF00
 9093 72e0 740F     		je	.L470
 9094              		.loc 1 2017 0 is_stmt 0 discriminator 1
 9095 72e2 C785B8F2 		movl	$1, -3400(%rbp)
 9095      FFFF0100 
 9095      0000
 9096 72ec E9EF0B00 		jmp	.L230
 9096      00
 9097              	.L470:
2018:final_with_print.c **** 					printf("%s\n", "Written successfully encrypted ack2, the written data is --");
 9098              		.loc 1 2018 0 is_stmt 1
 9099 72f1 BF000000 		movl	$.LC234, %edi
 9099      00
 9100 72f6 E8000000 		call	puts
 9100      00
 9101              	.LBB94:
2019:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 9102              		.loc 1 2019 0
 9103 72fb C7857CF3 		movl	$0, -3204(%rbp)
 9103      FFFF0000 
 9103      0000
 9104 7305 EB28     		jmp	.L471
 9105              	.L472:
2020:final_with_print.c **** 					{
2021:final_with_print.c **** 						printf("%d ", encrypted_ack2_again_uint8[i]);
 9106              		.loc 1 2021 0 discriminator 3
 9107 7307 8B857CF3 		movl	-3204(%rbp), %eax
 9107      FFFF
 9108 730d 4898     		cltq
 9109 730f 0FB64405 		movzbl	-64(%rbp,%rax), %eax
 9109      C0
 9110 7314 0FB6C0   		movzbl	%al, %eax
 9111 7317 89C6     		movl	%eax, %esi
 9112 7319 BF000000 		movl	$.LC10, %edi
 9112      00
 9113 731e B8000000 		movl	$0, %eax
 9113      00
 9114 7323 E8000000 		call	printf
 9114      00
2019:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 9115              		.loc 1 2019 0 discriminator 3
 9116 7328 83857CF3 		addl	$1, -3204(%rbp)
 9116      FFFF01
 9117              	.L471:
2019:final_with_print.c **** 					for (int i = 0; i < 4; ++i)
 9118              		.loc 1 2019 0 is_stmt 0 discriminator 1
 9119 732f 83BD7CF3 		cmpl	$3, -3204(%rbp)
 9119      FFFF03
 9120 7336 7ECF     		jle	.L472
 9121              	.LBE94:
2022:final_with_print.c **** 					}
2023:final_with_print.c **** 
2024:final_with_print.c **** 		 			//////////////////////////////////////////////////////////////////////////////
2025:final_with_print.c **** 					printf("\n");
 9122              		.loc 1 2025 0 is_stmt 1
 9123 7338 BF0A0000 		movl	$10, %edi
 9123      00
 9124 733d E8000000 		call	putchar
 9124      00
2026:final_with_print.c **** 					printf("%s\n", "Receiving data to update CSV file");
 9125              		.loc 1 2026 0
 9126 7342 BF000000 		movl	$.LC235, %edi
 9126      00
 9127 7347 E8000000 		call	puts
 9127      00
2027:final_with_print.c **** 
2028:final_with_print.c **** 					int X[8] = {0,1,1,1,1,1,1,1};
 9128              		.loc 1 2028 0
 9129 734c C78530F5 		movl	$0, -2768(%rbp)
 9129      FFFF0000 
 9129      0000
 9130 7356 C78534F5 		movl	$1, -2764(%rbp)
 9130      FFFF0100 
 9130      0000
 9131 7360 C78538F5 		movl	$1, -2760(%rbp)
 9131      FFFF0100 
 9131      0000
 9132 736a C7853CF5 		movl	$1, -2756(%rbp)
 9132      FFFF0100 
 9132      0000
 9133 7374 C78540F5 		movl	$1, -2752(%rbp)
 9133      FFFF0100 
 9133      0000
 9134 737e C78544F5 		movl	$1, -2748(%rbp)
 9134      FFFF0100 
 9134      0000
 9135 7388 C78548F5 		movl	$1, -2744(%rbp)
 9135      FFFF0100 
 9135      0000
 9136 7392 C7854CF5 		movl	$1, -2740(%rbp)
 9136      FFFF0100 
 9136      0000
2029:final_with_print.c **** 					int decX = bitArrayToInt(X, 8);
 9137              		.loc 1 2029 0
 9138 739c 488D8530 		leaq	-2768(%rbp), %rax
 9138      F5FFFF
 9139 73a3 BE080000 		movl	$8, %esi
 9139      00
 9140 73a8 4889C7   		movq	%rax, %rdi
 9141 73ab E8000000 		call	bitArrayToInt
 9141      00
 9142 73b0 8985BCF3 		movl	%eax, -3140(%rbp)
 9142      FFFF
2030:final_with_print.c **** 					int Y[8] = {1,1,1,1,1,1,1,1};
 9143              		.loc 1 2030 0
 9144 73b6 C78550F5 		movl	$1, -2736(%rbp)
 9144      FFFF0100 
 9144      0000
 9145 73c0 C78554F5 		movl	$1, -2732(%rbp)
 9145      FFFF0100 
 9145      0000
 9146 73ca C78558F5 		movl	$1, -2728(%rbp)
 9146      FFFF0100 
 9146      0000
 9147 73d4 C7855CF5 		movl	$1, -2724(%rbp)
 9147      FFFF0100 
 9147      0000
 9148 73de C78560F5 		movl	$1, -2720(%rbp)
 9148      FFFF0100 
 9148      0000
 9149 73e8 C78564F5 		movl	$1, -2716(%rbp)
 9149      FFFF0100 
 9149      0000
 9150 73f2 C78568F5 		movl	$1, -2712(%rbp)
 9150      FFFF0100 
 9150      0000
 9151 73fc C7856CF5 		movl	$1, -2708(%rbp)
 9151      FFFF0100 
 9151      0000
2031:final_with_print.c **** 					int decY = bitArrayToInt(Y, 8);
 9152              		.loc 1 2031 0
 9153 7406 488D8550 		leaq	-2736(%rbp), %rax
 9153      F5FFFF
 9154 740d BE080000 		movl	$8, %esi
 9154      00
 9155 7412 4889C7   		movq	%rax, %rdi
 9156 7415 E8000000 		call	bitArrayToInt
 9156      00
 9157 741a 8985C0F3 		movl	%eax, -3136(%rbp)
 9157      FFFF
2032:final_with_print.c **** 
2033:final_with_print.c **** 					uint8 direct;
2034:final_with_print.c **** 					uint8 updaterFPGA[4];
2035:final_with_print.c **** 					int updatesFromFPGA[32];
2036:final_with_print.c **** 					int updatesForCSV[8];
2037:final_with_print.c **** 					int exists, ok, dir, nxt;
2038:final_with_print.c **** 					bool updateCSV=false;
 9158              		.loc 1 2038 0
 9159 7420 C685ACF2 		movb	$0, -3412(%rbp)
 9159      FFFF00
2039:final_with_print.c **** 
2040:final_with_print.c **** 					int cnt1 = 0;
 9160              		.loc 1 2040 0
 9161 7427 C78580F3 		movl	$0, -3200(%rbp)
 9161      FFFF0000 
 9161      0000
2041:final_with_print.c **** 					int cnt2 = 0;
 9162              		.loc 1 2041 0
 9163 7431 C78584F3 		movl	$0, -3196(%rbp)
 9163      FFFF0000 
 9163      0000
2042:final_with_print.c **** 
2043:final_with_print.c **** 					int breaker3 = 0;
 9164              		.loc 1 2043 0
 9165 743b C78588F3 		movl	$0, -3192(%rbp)
 9165      FFFF0000 
 9165      0000
 9166              	.L501:
 9167              	.LBB95:
2044:final_with_print.c **** 					while(1)
2045:final_with_print.c **** 					{	
2046:final_with_print.c **** 						printf("%s", "FPGA Count " );
 9168              		.loc 1 2046 0
 9169 7445 BE000000 		movl	$.LC236, %esi
 9169      00
 9170 744a BF000000 		movl	$.LC153, %edi
 9170      00
 9171 744f B8000000 		movl	$0, %eax
 9171      00
 9172 7454 E8000000 		call	printf
 9172      00
2047:final_with_print.c **** 						cnt1++;
 9173              		.loc 1 2047 0
 9174 7459 838580F3 		addl	$1, -3200(%rbp)
 9174      FFFF01
2048:final_with_print.c **** 						printf("%d\n", cnt1);
 9175              		.loc 1 2048 0
 9176 7460 8B8580F3 		movl	-3200(%rbp), %eax
 9176      FFFF
 9177 7466 89C6     		movl	%eax, %esi
 9178 7468 BF000000 		movl	$.LC154, %edi
 9178      00
 9179 746d B8000000 		movl	$0, %eax
 9179      00
 9180 7472 E8000000 		call	printf
 9180      00
2049:final_with_print.c **** 						printf("%s\n", "Receiving Controlling signal form FPGA ");
 9181              		.loc 1 2049 0
 9182 7477 BF000000 		movl	$.LC237, %edi
 9182      00
 9183 747c E8000000 		call	puts
 9183      00
2050:final_with_print.c **** 						delay(del);
 9184              		.loc 1 2050 0
 9185 7481 8B85B0F3 		movl	-3152(%rbp), %eax
 9185      FFFF
 9186 7487 89C7     		movl	%eax, %edi
 9187 7489 E8000000 		call	delay
 9187      00
2051:final_with_print.c **** 						fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &direct, &error);
 9188              		.loc 1 2051 0
 9189 748e 8B85C8F2 		movl	-3384(%rbp), %eax
 9189      FFFF
 9190 7494 01C0     		addl	%eax, %eax
 9191 7496 0FB6F0   		movzbl	%al, %esi
 9192 7499 488B85E0 		movq	-3104(%rbp), %rax
 9192      F3FFFF
 9193 74a0 488D8DE8 		leaq	-3096(%rbp), %rcx
 9193      F3FFFF
 9194 74a7 488D95A9 		leaq	-3415(%rbp), %rdx
 9194      F2FFFF
 9195 74ae 4989C8   		movq	%rcx, %r8
 9196 74b1 4889D1   		movq	%rdx, %rcx
 9197 74b4 BA010000 		movl	$1, %edx
 9197      00
 9198 74b9 4889C7   		movq	%rax, %rdi
 9199 74bc E8000000 		call	flReadChannelAsyncSubmit
 9199      00
 9200 74c1 8985BCF2 		movl	%eax, -3396(%rbp)
 9200      FFFF
2052:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 9201              		.loc 1 2052 0
 9202 74c7 83BDBCF2 		cmpl	$0, -3396(%rbp)
 9202      FFFF00
 9203 74ce 740F     		je	.L473
 9204              		.loc 1 2052 0 is_stmt 0 discriminator 1
 9205 74d0 C785B8F2 		movl	$1, -3400(%rbp)
 9205      FFFF0100 
 9205      0000
 9206 74da E9010A00 		jmp	.L230
 9206      00
 9207              	.L473:
2053:final_with_print.c **** 						fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 9208              		.loc 1 2053 0 is_stmt 1
 9209 74df 488B85E0 		movq	-3104(%rbp), %rax
 9209      F3FFFF
 9210 74e6 488DBDE8 		leaq	-3096(%rbp), %rdi
 9210      F3FFFF
 9211 74ed 488D8DB4 		leaq	-3404(%rbp), %rcx
 9211      F2FFFF
 9212 74f4 488D95B4 		leaq	-3404(%rbp), %rdx
 9212      F2FFFF
 9213 74fb 488DB5F0 		leaq	-3088(%rbp), %rsi
 9213      F3FFFF
 9214 7502 4989F8   		movq	%rdi, %r8
 9215 7505 4889C7   		movq	%rax, %rdi
 9216 7508 E8000000 		call	flReadChannelAsyncAwait
 9216      00
 9217 750d 8985BCF2 		movl	%eax, -3396(%rbp)
 9217      FFFF
2054:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 9218              		.loc 1 2054 0
 9219 7513 83BDBCF2 		cmpl	$0, -3396(%rbp)
 9219      FFFF00
 9220 751a 740F     		je	.L474
 9221              		.loc 1 2054 0 is_stmt 0 discriminator 1
 9222 751c C785B8F2 		movl	$1, -3400(%rbp)
 9222      FFFF0100 
 9222      0000
 9223 7526 E9B50900 		jmp	.L230
 9223      00
 9224              	.L474:
2055:final_with_print.c **** 						if(direct == reset) 
 9225              		.loc 1 2055 0 is_stmt 1
 9226 752b 0FB685A9 		movzbl	-3415(%rbp), %eax
 9226      F2FFFF
 9227 7532 3A85AFF2 		cmpb	-3409(%rbp), %al
 9227      FFFF
 9228 7538 751D     		jne	.L475
2056:final_with_print.c **** 							{
2057:final_with_print.c **** 								k--; 
 9229              		.loc 1 2057 0
 9230 753a 83ADC8F2 		subl	$1, -3384(%rbp)
 9230      FFFF01
2058:final_with_print.c **** 								breaker3++; 
 9231              		.loc 1 2058 0
 9232 7541 838588F3 		addl	$1, -3192(%rbp)
 9232      FFFF01
2059:final_with_print.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 9233              		.loc 1 2059 0
 9234 7548 BF000000 		movl	$.LC157, %edi
 9234      00
 9235 754d E8000000 		call	puts
 9235      00
2060:final_with_print.c **** 								break;
 9236              		.loc 1 2060 0
 9237 7552 E9600500 		jmp	.L476
 9237      00
 9238              	.L475:
2061:final_with_print.c **** 							}
2062:final_with_print.c **** 						printf("%s\n", "Controlling signal received from FPGA, it is-----");
 9239              		.loc 1 2062 0
 9240 7557 BF000000 		movl	$.LC238, %edi
 9240      00
 9241 755c E8000000 		call	puts
 9241      00
2063:final_with_print.c **** 						printf("%d\n", direct);
 9242              		.loc 1 2063 0
 9243 7561 0FB685A9 		movzbl	-3415(%rbp), %eax
 9243      F2FFFF
 9244 7568 0FB6C0   		movzbl	%al, %eax
 9245 756b 89C6     		movl	%eax, %esi
 9246 756d BF000000 		movl	$.LC154, %edi
 9246      00
 9247 7572 B8000000 		movl	$0, %eax
 9247      00
 9248 7577 E8000000 		call	printf
 9248      00
2064:final_with_print.c **** 						printf("%s\n", "Checking the controlling singal, whether it is to update CSV data or not");
 9249              		.loc 1 2064 0
 9250 757c BF000000 		movl	$.LC239, %edi
 9250      00
 9251 7581 E8000000 		call	puts
 9251      00
2065:final_with_print.c **** 						int director = (int)direct;
 9252              		.loc 1 2065 0
 9253 7586 0FB685A9 		movzbl	-3415(%rbp), %eax
 9253      F2FFFF
 9254 758d 0FB6C0   		movzbl	%al, %eax
 9255 7590 8985C4F3 		movl	%eax, -3132(%rbp)
 9255      FFFF
2066:final_with_print.c **** 						if(director==decX) break;
 9256              		.loc 1 2066 0
 9257 7596 8B85C4F3 		movl	-3132(%rbp), %eax
 9257      FFFF
 9258 759c 3B85BCF3 		cmpl	-3140(%rbp), %eax
 9258      FFFF
 9259 75a2 0F840E05 		je	.L526
 9259      0000
2067:final_with_print.c **** 						if(director==decY)
 9260              		.loc 1 2067 0
 9261 75a8 8B85C4F3 		movl	-3132(%rbp), %eax
 9261      FFFF
 9262 75ae 3B85C0F3 		cmpl	-3136(%rbp), %eax
 9262      FFFF
 9263 75b4 0F858BFE 		jne	.L501
 9263      FFFF
 9264              	.LBB96:
2068:final_with_print.c **** 						{	
2069:final_with_print.c **** 							updateCSV = true;
 9265              		.loc 1 2069 0
 9266 75ba C685ACF2 		movb	$1, -3412(%rbp)
 9266      FFFF01
2070:final_with_print.c **** 							printf("%s\n", "Controlling signal is to update the CSV data");
 9267              		.loc 1 2070 0
 9268 75c1 BF000000 		movl	$.LC240, %edi
 9268      00
 9269 75c6 E8000000 		call	puts
 9269      00
2071:final_with_print.c **** 							printf("%s\n", "Receiving encrypted data from the FPGA to update CSV");
 9270              		.loc 1 2071 0
 9271 75cb BF000000 		movl	$.LC241, %edi
 9271      00
 9272 75d0 E8000000 		call	puts
 9272      00
2072:final_with_print.c **** 							delay(del);
 9273              		.loc 1 2072 0
 9274 75d5 8B85B0F3 		movl	-3152(%rbp), %eax
 9274      FFFF
 9275 75db 89C7     		movl	%eax, %edi
 9276 75dd E8000000 		call	delay
 9276      00
2073:final_with_print.c **** 							fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &updaterFPGA[0], &error);
 9277              		.loc 1 2073 0
 9278 75e2 8B85C8F2 		movl	-3384(%rbp), %eax
 9278      FFFF
 9279 75e8 01C0     		addl	%eax, %eax
 9280 75ea 0FB6F0   		movzbl	%al, %esi
 9281 75ed 488B85E0 		movq	-3104(%rbp), %rax
 9281      F3FFFF
 9282 75f4 488D8DE8 		leaq	-3096(%rbp), %rcx
 9282      F3FFFF
 9283 75fb 488D55D0 		leaq	-48(%rbp), %rdx
 9284 75ff 4989C8   		movq	%rcx, %r8
 9285 7602 4889D1   		movq	%rdx, %rcx
 9286 7605 BA010000 		movl	$1, %edx
 9286      00
 9287 760a 4889C7   		movq	%rax, %rdi
 9288 760d E8000000 		call	flReadChannelAsyncSubmit
 9288      00
 9289 7612 8985BCF2 		movl	%eax, -3396(%rbp)
 9289      FFFF
2074:final_with_print.c **** 							CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 9290              		.loc 1 2074 0
 9291 7618 83BDBCF2 		cmpl	$0, -3396(%rbp)
 9291      FFFF00
 9292 761f 740F     		je	.L479
 9293              		.loc 1 2074 0 is_stmt 0 discriminator 1
 9294 7621 C785B8F2 		movl	$1, -3400(%rbp)
 9294      FFFF0100 
 9294      0000
 9295 762b E9B00800 		jmp	.L230
 9295      00
 9296              	.L479:
2075:final_with_print.c **** 							fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 9297              		.loc 1 2075 0 is_stmt 1
 9298 7630 488B85E0 		movq	-3104(%rbp), %rax
 9298      F3FFFF
 9299 7637 488DBDE8 		leaq	-3096(%rbp), %rdi
 9299      F3FFFF
 9300 763e 488D8DB4 		leaq	-3404(%rbp), %rcx
 9300      F2FFFF
 9301 7645 488D95B4 		leaq	-3404(%rbp), %rdx
 9301      F2FFFF
 9302 764c 488DB5F0 		leaq	-3088(%rbp), %rsi
 9302      F3FFFF
 9303 7653 4989F8   		movq	%rdi, %r8
 9304 7656 4889C7   		movq	%rax, %rdi
 9305 7659 E8000000 		call	flReadChannelAsyncAwait
 9305      00
 9306 765e 8985BCF2 		movl	%eax, -3396(%rbp)
 9306      FFFF
2076:final_with_print.c **** 							CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 9307              		.loc 1 2076 0
 9308 7664 83BDBCF2 		cmpl	$0, -3396(%rbp)
 9308      FFFF00
 9309 766b 740F     		je	.L481
 9310              		.loc 1 2076 0 is_stmt 0 discriminator 1
 9311 766d C785B8F2 		movl	$1, -3400(%rbp)
 9311      FFFF0100 
 9311      0000
 9312 7677 E9350400 		jmp	.L480
 9312      00
 9313              	.L481:
2077:final_with_print.c **** 							if(updaterFPGA[0] == reset) 
 9314              		.loc 1 2077 0 is_stmt 1
 9315 767c 0FB645D0 		movzbl	-48(%rbp), %eax
 9316 7680 3A85AFF2 		cmpb	-3409(%rbp), %al
 9316      FFFF
 9317 7686 751D     		jne	.L482
2078:final_with_print.c **** 							{
2079:final_with_print.c **** 								k--; 
 9318              		.loc 1 2079 0
 9319 7688 83ADC8F2 		subl	$1, -3384(%rbp)
 9319      FFFF01
2080:final_with_print.c **** 								breaker3++; 
 9320              		.loc 1 2080 0
 9321 768f 838588F3 		addl	$1, -3192(%rbp)
 9321      FFFF01
2081:final_with_print.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 9322              		.loc 1 2081 0
 9323 7696 BF000000 		movl	$.LC157, %edi
 9323      00
 9324 769b E8000000 		call	puts
 9324      00
2082:final_with_print.c **** 								break;
 9325              		.loc 1 2082 0
 9326 76a0 E9120400 		jmp	.L476
 9326      00
 9327              	.L482:
2083:final_with_print.c **** 							}
2084:final_with_print.c **** 							delay(del);
 9328              		.loc 1 2084 0
 9329 76a5 8B85B0F3 		movl	-3152(%rbp), %eax
 9329      FFFF
 9330 76ab 89C7     		movl	%eax, %edi
 9331 76ad E8000000 		call	delay
 9331      00
2085:final_with_print.c **** 							fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &updaterFPGA[1], &error);
 9332              		.loc 1 2085 0
 9333 76b2 8B85C8F2 		movl	-3384(%rbp), %eax
 9333      FFFF
 9334 76b8 01C0     		addl	%eax, %eax
 9335 76ba 0FB6F0   		movzbl	%al, %esi
 9336 76bd 488B85E0 		movq	-3104(%rbp), %rax
 9336      F3FFFF
 9337 76c4 488D8DE8 		leaq	-3096(%rbp), %rcx
 9337      F3FFFF
 9338 76cb 488D55D0 		leaq	-48(%rbp), %rdx
 9339 76cf 4883C201 		addq	$1, %rdx
 9340 76d3 4989C8   		movq	%rcx, %r8
 9341 76d6 4889D1   		movq	%rdx, %rcx
 9342 76d9 BA010000 		movl	$1, %edx
 9342      00
 9343 76de 4889C7   		movq	%rax, %rdi
 9344 76e1 E8000000 		call	flReadChannelAsyncSubmit
 9344      00
 9345 76e6 8985BCF2 		movl	%eax, -3396(%rbp)
 9345      FFFF
2086:final_with_print.c **** 							CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 9346              		.loc 1 2086 0
 9347 76ec 83BDBCF2 		cmpl	$0, -3396(%rbp)
 9347      FFFF00
 9348 76f3 740F     		je	.L484
 9349              		.loc 1 2086 0 is_stmt 0 discriminator 1
 9350 76f5 C785B8F2 		movl	$1, -3400(%rbp)
 9350      FFFF0100 
 9350      0000
 9351 76ff E9AD0300 		jmp	.L480
 9351      00
 9352              	.L484:
2087:final_with_print.c **** 							fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 9353              		.loc 1 2087 0 is_stmt 1
 9354 7704 488B85E0 		movq	-3104(%rbp), %rax
 9354      F3FFFF
 9355 770b 488DBDE8 		leaq	-3096(%rbp), %rdi
 9355      F3FFFF
 9356 7712 488D8DB4 		leaq	-3404(%rbp), %rcx
 9356      F2FFFF
 9357 7719 488D95B4 		leaq	-3404(%rbp), %rdx
 9357      F2FFFF
 9358 7720 488DB5F0 		leaq	-3088(%rbp), %rsi
 9358      F3FFFF
 9359 7727 4989F8   		movq	%rdi, %r8
 9360 772a 4889C7   		movq	%rax, %rdi
 9361 772d E8000000 		call	flReadChannelAsyncAwait
 9361      00
 9362 7732 8985BCF2 		movl	%eax, -3396(%rbp)
 9362      FFFF
2088:final_with_print.c **** 							CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 9363              		.loc 1 2088 0
 9364 7738 83BDBCF2 		cmpl	$0, -3396(%rbp)
 9364      FFFF00
 9365 773f 740F     		je	.L485
 9366              		.loc 1 2088 0 is_stmt 0 discriminator 1
 9367 7741 C785B8F2 		movl	$1, -3400(%rbp)
 9367      FFFF0100 
 9367      0000
 9368 774b E9610300 		jmp	.L480
 9368      00
 9369              	.L485:
2089:final_with_print.c **** 							if(updaterFPGA[1] == reset) 
 9370              		.loc 1 2089 0 is_stmt 1
 9371 7750 0FB645D1 		movzbl	-47(%rbp), %eax
 9372 7754 3A85AFF2 		cmpb	-3409(%rbp), %al
 9372      FFFF
 9373 775a 751D     		jne	.L486
2090:final_with_print.c **** 							{
2091:final_with_print.c **** 								k--; 
 9374              		.loc 1 2091 0
 9375 775c 83ADC8F2 		subl	$1, -3384(%rbp)
 9375      FFFF01
2092:final_with_print.c **** 								breaker3++; 
 9376              		.loc 1 2092 0
 9377 7763 838588F3 		addl	$1, -3192(%rbp)
 9377      FFFF01
2093:final_with_print.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 9378              		.loc 1 2093 0
 9379 776a BF000000 		movl	$.LC157, %edi
 9379      00
 9380 776f E8000000 		call	puts
 9380      00
2094:final_with_print.c **** 								break;
 9381              		.loc 1 2094 0
 9382 7774 E93E0300 		jmp	.L476
 9382      00
 9383              	.L486:
2095:final_with_print.c **** 							}
2096:final_with_print.c **** 							delay(del);
 9384              		.loc 1 2096 0
 9385 7779 8B85B0F3 		movl	-3152(%rbp), %eax
 9385      FFFF
 9386 777f 89C7     		movl	%eax, %edi
 9387 7781 E8000000 		call	delay
 9387      00
2097:final_with_print.c **** 							fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &updaterFPGA[2], &error);
 9388              		.loc 1 2097 0
 9389 7786 8B85C8F2 		movl	-3384(%rbp), %eax
 9389      FFFF
 9390 778c 01C0     		addl	%eax, %eax
 9391 778e 0FB6F0   		movzbl	%al, %esi
 9392 7791 488B85E0 		movq	-3104(%rbp), %rax
 9392      F3FFFF
 9393 7798 488D8DE8 		leaq	-3096(%rbp), %rcx
 9393      F3FFFF
 9394 779f 488D55D0 		leaq	-48(%rbp), %rdx
 9395 77a3 4883C202 		addq	$2, %rdx
 9396 77a7 4989C8   		movq	%rcx, %r8
 9397 77aa 4889D1   		movq	%rdx, %rcx
 9398 77ad BA010000 		movl	$1, %edx
 9398      00
 9399 77b2 4889C7   		movq	%rax, %rdi
 9400 77b5 E8000000 		call	flReadChannelAsyncSubmit
 9400      00
 9401 77ba 8985BCF2 		movl	%eax, -3396(%rbp)
 9401      FFFF
2098:final_with_print.c **** 							CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 9402              		.loc 1 2098 0
 9403 77c0 83BDBCF2 		cmpl	$0, -3396(%rbp)
 9403      FFFF00
 9404 77c7 740F     		je	.L487
 9405              		.loc 1 2098 0 is_stmt 0 discriminator 1
 9406 77c9 C785B8F2 		movl	$1, -3400(%rbp)
 9406      FFFF0100 
 9406      0000
 9407 77d3 E9D90200 		jmp	.L480
 9407      00
 9408              	.L487:
2099:final_with_print.c **** 							fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 9409              		.loc 1 2099 0 is_stmt 1
 9410 77d8 488B85E0 		movq	-3104(%rbp), %rax
 9410      F3FFFF
 9411 77df 488DBDE8 		leaq	-3096(%rbp), %rdi
 9411      F3FFFF
 9412 77e6 488D8DB4 		leaq	-3404(%rbp), %rcx
 9412      F2FFFF
 9413 77ed 488D95B4 		leaq	-3404(%rbp), %rdx
 9413      F2FFFF
 9414 77f4 488DB5F0 		leaq	-3088(%rbp), %rsi
 9414      F3FFFF
 9415 77fb 4989F8   		movq	%rdi, %r8
 9416 77fe 4889C7   		movq	%rax, %rdi
 9417 7801 E8000000 		call	flReadChannelAsyncAwait
 9417      00
 9418 7806 8985BCF2 		movl	%eax, -3396(%rbp)
 9418      FFFF
2100:final_with_print.c **** 							CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 9419              		.loc 1 2100 0
 9420 780c 83BDBCF2 		cmpl	$0, -3396(%rbp)
 9420      FFFF00
 9421 7813 740F     		je	.L488
 9422              		.loc 1 2100 0 is_stmt 0 discriminator 1
 9423 7815 C785B8F2 		movl	$1, -3400(%rbp)
 9423      FFFF0100 
 9423      0000
 9424 781f E98D0200 		jmp	.L480
 9424      00
 9425              	.L488:
2101:final_with_print.c **** 							if(updaterFPGA[2] == reset) 
 9426              		.loc 1 2101 0 is_stmt 1
 9427 7824 0FB645D2 		movzbl	-46(%rbp), %eax
 9428 7828 3A85AFF2 		cmpb	-3409(%rbp), %al
 9428      FFFF
 9429 782e 751D     		jne	.L489
2102:final_with_print.c **** 							{
2103:final_with_print.c **** 								k--; 
 9430              		.loc 1 2103 0
 9431 7830 83ADC8F2 		subl	$1, -3384(%rbp)
 9431      FFFF01
2104:final_with_print.c **** 								breaker3++; 
 9432              		.loc 1 2104 0
 9433 7837 838588F3 		addl	$1, -3192(%rbp)
 9433      FFFF01
2105:final_with_print.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 9434              		.loc 1 2105 0
 9435 783e BF000000 		movl	$.LC157, %edi
 9435      00
 9436 7843 E8000000 		call	puts
 9436      00
2106:final_with_print.c **** 								break;
 9437              		.loc 1 2106 0
 9438 7848 E96A0200 		jmp	.L476
 9438      00
 9439              	.L489:
2107:final_with_print.c **** 							}
2108:final_with_print.c **** 							delay(del);
 9440              		.loc 1 2108 0
 9441 784d 8B85B0F3 		movl	-3152(%rbp), %eax
 9441      FFFF
 9442 7853 89C7     		movl	%eax, %edi
 9443 7855 E8000000 		call	delay
 9443      00
2109:final_with_print.c **** 							fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &updaterFPGA[3], &error);
 9444              		.loc 1 2109 0
 9445 785a 8B85C8F2 		movl	-3384(%rbp), %eax
 9445      FFFF
 9446 7860 01C0     		addl	%eax, %eax
 9447 7862 0FB6F0   		movzbl	%al, %esi
 9448 7865 488B85E0 		movq	-3104(%rbp), %rax
 9448      F3FFFF
 9449 786c 488D8DE8 		leaq	-3096(%rbp), %rcx
 9449      F3FFFF
 9450 7873 488D55D0 		leaq	-48(%rbp), %rdx
 9451 7877 4883C203 		addq	$3, %rdx
 9452 787b 4989C8   		movq	%rcx, %r8
 9453 787e 4889D1   		movq	%rdx, %rcx
 9454 7881 BA010000 		movl	$1, %edx
 9454      00
 9455 7886 4889C7   		movq	%rax, %rdi
 9456 7889 E8000000 		call	flReadChannelAsyncSubmit
 9456      00
 9457 788e 8985BCF2 		movl	%eax, -3396(%rbp)
 9457      FFFF
2110:final_with_print.c **** 							CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 9458              		.loc 1 2110 0
 9459 7894 83BDBCF2 		cmpl	$0, -3396(%rbp)
 9459      FFFF00
 9460 789b 740F     		je	.L490
 9461              		.loc 1 2110 0 is_stmt 0 discriminator 1
 9462 789d C785B8F2 		movl	$1, -3400(%rbp)
 9462      FFFF0100 
 9462      0000
 9463 78a7 E9050200 		jmp	.L480
 9463      00
 9464              	.L490:
2111:final_with_print.c **** 							fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 9465              		.loc 1 2111 0 is_stmt 1
 9466 78ac 488B85E0 		movq	-3104(%rbp), %rax
 9466      F3FFFF
 9467 78b3 488DBDE8 		leaq	-3096(%rbp), %rdi
 9467      F3FFFF
 9468 78ba 488D8DB4 		leaq	-3404(%rbp), %rcx
 9468      F2FFFF
 9469 78c1 488D95B4 		leaq	-3404(%rbp), %rdx
 9469      F2FFFF
 9470 78c8 488DB5F0 		leaq	-3088(%rbp), %rsi
 9470      F3FFFF
 9471 78cf 4989F8   		movq	%rdi, %r8
 9472 78d2 4889C7   		movq	%rax, %rdi
 9473 78d5 E8000000 		call	flReadChannelAsyncAwait
 9473      00
 9474 78da 8985BCF2 		movl	%eax, -3396(%rbp)
 9474      FFFF
2112:final_with_print.c **** 							CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 9475              		.loc 1 2112 0
 9476 78e0 83BDBCF2 		cmpl	$0, -3396(%rbp)
 9476      FFFF00
 9477 78e7 740F     		je	.L491
 9478              		.loc 1 2112 0 is_stmt 0 discriminator 1
 9479 78e9 C785B8F2 		movl	$1, -3400(%rbp)
 9479      FFFF0100 
 9479      0000
 9480 78f3 E9B90100 		jmp	.L480
 9480      00
 9481              	.L491:
2113:final_with_print.c **** 							if(updaterFPGA[3] == reset) 
 9482              		.loc 1 2113 0 is_stmt 1
 9483 78f8 0FB645D3 		movzbl	-45(%rbp), %eax
 9484 78fc 3A85AFF2 		cmpb	-3409(%rbp), %al
 9484      FFFF
 9485 7902 751D     		jne	.L492
2114:final_with_print.c **** 							{
2115:final_with_print.c **** 								k--; 
 9486              		.loc 1 2115 0
 9487 7904 83ADC8F2 		subl	$1, -3384(%rbp)
 9487      FFFF01
2116:final_with_print.c **** 								breaker3++;
 9488              		.loc 1 2116 0
 9489 790b 838588F3 		addl	$1, -3192(%rbp)
 9489      FFFF01
2117:final_with_print.c **** 								printf("%s\n", "-------------------------RESET------------------------"); 
 9490              		.loc 1 2117 0
 9491 7912 BF000000 		movl	$.LC157, %edi
 9491      00
 9492 7917 E8000000 		call	puts
 9492      00
2118:final_with_print.c **** 								break;
 9493              		.loc 1 2118 0
 9494 791c E9960100 		jmp	.L476
 9494      00
 9495              	.L492:
2119:final_with_print.c **** 							}
2120:final_with_print.c **** 
2121:final_with_print.c **** 							printf("%s\n", "Encrypted Data received successfully from the FPGA, it is as in uint8 format
 9496              		.loc 1 2121 0
 9497 7921 BF000000 		movl	$.LC242, %edi
 9497      00
 9498 7926 E8000000 		call	puts
 9498      00
 9499              	.LBB97:
2122:final_with_print.c **** 							for (int i = 0; i < 4; ++i)
 9500              		.loc 1 2122 0
 9501 792b C7858CF3 		movl	$0, -3188(%rbp)
 9501      FFFF0000 
 9501      0000
 9502 7935 EB2D     		jmp	.L493
 9503              	.L494:
2123:final_with_print.c **** 							{
2124:final_with_print.c **** 								printf("%d ", updaterFPGA[3-i]);
 9504              		.loc 1 2124 0 discriminator 3
 9505 7937 B8030000 		movl	$3, %eax
 9505      00
 9506 793c 2B858CF3 		subl	-3188(%rbp), %eax
 9506      FFFF
 9507 7942 4898     		cltq
 9508 7944 0FB64405 		movzbl	-48(%rbp,%rax), %eax
 9508      D0
 9509 7949 0FB6C0   		movzbl	%al, %eax
 9510 794c 89C6     		movl	%eax, %esi
 9511 794e BF000000 		movl	$.LC10, %edi
 9511      00
 9512 7953 B8000000 		movl	$0, %eax
 9512      00
 9513 7958 E8000000 		call	printf
 9513      00
2122:final_with_print.c **** 							for (int i = 0; i < 4; ++i)
 9514              		.loc 1 2122 0 discriminator 3
 9515 795d 83858CF3 		addl	$1, -3188(%rbp)
 9515      FFFF01
 9516              	.L493:
2122:final_with_print.c **** 							for (int i = 0; i < 4; ++i)
 9517              		.loc 1 2122 0 is_stmt 0 discriminator 1
 9518 7964 83BD8CF3 		cmpl	$3, -3188(%rbp)
 9518      FFFF03
 9519 796b 7ECA     		jle	.L494
 9520              	.LBE97:
2125:final_with_print.c **** 							}
2126:final_with_print.c **** 							printf("\n");
 9521              		.loc 1 2126 0 is_stmt 1
 9522 796d BF0A0000 		movl	$10, %edi
 9522      00
 9523 7972 E8000000 		call	putchar
 9523      00
2127:final_with_print.c **** 
2128:final_with_print.c **** 							
2129:final_with_print.c **** 							printf("%s\n", "Converting uint8 data to binary");
 9524              		.loc 1 2129 0
 9525 7977 BF000000 		movl	$.LC243, %edi
 9525      00
 9526 797c E8000000 		call	puts
 9526      00
2130:final_with_print.c **** 							uint8ToBin(updaterFPGA, updatesFromFPGA);
 9527              		.loc 1 2130 0
 9528 7981 488D95D0 		leaq	-816(%rbp), %rdx
 9528      FCFFFF
 9529 7988 488D45D0 		leaq	-48(%rbp), %rax
 9530 798c 4889D6   		movq	%rdx, %rsi
 9531 798f 4889C7   		movq	%rax, %rdi
 9532 7992 E8000000 		call	uint8ToBin
 9532      00
2131:final_with_print.c **** 							printf("%s\n", "Converted uint8 data to binary, it is as-----");
 9533              		.loc 1 2131 0
 9534 7997 BF000000 		movl	$.LC244, %edi
 9534      00
 9535 799c E8000000 		call	puts
 9535      00
 9536              	.LBB98:
2132:final_with_print.c **** 
2133:final_with_print.c **** 							for (int i = 0; i < 32; ++i)
 9537              		.loc 1 2133 0
 9538 79a1 C78590F3 		movl	$0, -3184(%rbp)
 9538      FFFF0000 
 9538      0000
 9539 79ab EB2C     		jmp	.L495
 9540              	.L496:
2134:final_with_print.c **** 							{
2135:final_with_print.c **** 								printf("%d ", updatesFromFPGA[31-i]);
 9541              		.loc 1 2135 0 discriminator 3
 9542 79ad B81F0000 		movl	$31, %eax
 9542      00
 9543 79b2 2B8590F3 		subl	-3184(%rbp), %eax
 9543      FFFF
 9544 79b8 4898     		cltq
 9545 79ba 8B8485D0 		movl	-816(%rbp,%rax,4), %eax
 9545      FCFFFF
 9546 79c1 89C6     		movl	%eax, %esi
 9547 79c3 BF000000 		movl	$.LC10, %edi
 9547      00
 9548 79c8 B8000000 		movl	$0, %eax
 9548      00
 9549 79cd E8000000 		call	printf
 9549      00
2133:final_with_print.c **** 							{
 9550              		.loc 1 2133 0 discriminator 3
 9551 79d2 838590F3 		addl	$1, -3184(%rbp)
 9551      FFFF01
 9552              	.L495:
2133:final_with_print.c **** 							{
 9553              		.loc 1 2133 0 is_stmt 0 discriminator 1
 9554 79d9 83BD90F3 		cmpl	$31, -3184(%rbp)
 9554      FFFF1F
 9555 79e0 7ECB     		jle	.L496
 9556              	.LBE98:
2136:final_with_print.c **** 							}
2137:final_with_print.c **** 							printf("\n");
 9557              		.loc 1 2137 0 is_stmt 1
 9558 79e2 BF0A0000 		movl	$10, %edi
 9558      00
 9559 79e7 E8000000 		call	putchar
 9559      00
2138:final_with_print.c **** 							printf("%s\n", "Decrypting the data");
 9560              		.loc 1 2138 0
 9561 79ec BF000000 		movl	$.LC245, %edi
 9561      00
 9562 79f1 E8000000 		call	puts
 9562      00
2139:final_with_print.c **** 							int decryptedUpdates[32];
2140:final_with_print.c **** 							decrypter(updatesFromFPGA, K, decryptedUpdates);
 9563              		.loc 1 2140 0
 9564 79f6 488D9550 		leaq	-688(%rbp), %rdx
 9564      FDFFFF
 9565 79fd 488D8DD0 		leaq	-2608(%rbp), %rcx
 9565      F5FFFF
 9566 7a04 488D85D0 		leaq	-816(%rbp), %rax
 9566      FCFFFF
 9567 7a0b 4889CE   		movq	%rcx, %rsi
 9568 7a0e 4889C7   		movq	%rax, %rdi
 9569 7a11 E8000000 		call	decrypter
 9569      00
2141:final_with_print.c **** 							printf("%s\n", "Data decrypted successfully, it is as----");
 9570              		.loc 1 2141 0
 9571 7a16 BF000000 		movl	$.LC246, %edi
 9571      00
 9572 7a1b E8000000 		call	puts
 9572      00
 9573              	.LBB99:
2142:final_with_print.c **** 							for (int i = 0; i < 32; ++i)
 9574              		.loc 1 2142 0
 9575 7a20 C78594F3 		movl	$0, -3180(%rbp)
 9575      FFFF0000 
 9575      0000
 9576 7a2a EB2C     		jmp	.L497
 9577              	.L498:
2143:final_with_print.c **** 							{
2144:final_with_print.c **** 								printf("%d ", decryptedUpdates[31-i]);
 9578              		.loc 1 2144 0 discriminator 3
 9579 7a2c B81F0000 		movl	$31, %eax
 9579      00
 9580 7a31 2B8594F3 		subl	-3180(%rbp), %eax
 9580      FFFF
 9581 7a37 4898     		cltq
 9582 7a39 8B848550 		movl	-688(%rbp,%rax,4), %eax
 9582      FDFFFF
 9583 7a40 89C6     		movl	%eax, %esi
 9584 7a42 BF000000 		movl	$.LC10, %edi
 9584      00
 9585 7a47 B8000000 		movl	$0, %eax
 9585      00
 9586 7a4c E8000000 		call	printf
 9586      00
2142:final_with_print.c **** 							for (int i = 0; i < 32; ++i)
 9587              		.loc 1 2142 0 discriminator 3
 9588 7a51 838594F3 		addl	$1, -3180(%rbp)
 9588      FFFF01
 9589              	.L497:
2142:final_with_print.c **** 							for (int i = 0; i < 32; ++i)
 9590              		.loc 1 2142 0 is_stmt 0 discriminator 1
 9591 7a58 83BD94F3 		cmpl	$31, -3180(%rbp)
 9591      FFFF1F
 9592 7a5f 7ECB     		jle	.L498
 9593              	.LBE99:
2145:final_with_print.c **** 							}
2146:final_with_print.c **** 							printf("\n");
 9594              		.loc 1 2146 0 is_stmt 1
 9595 7a61 BF0A0000 		movl	$10, %edi
 9595      00
 9596 7a66 E8000000 		call	putchar
 9596      00
2147:final_with_print.c **** 							printf("%s\n", "Getting ready to update CSV");
 9597              		.loc 1 2147 0
 9598 7a6b BF000000 		movl	$.LC247, %edi
 9598      00
 9599 7a70 E8000000 		call	puts
 9599      00
 9600              	.LBB100:
2148:final_with_print.c **** 							
2149:final_with_print.c **** 							
2150:final_with_print.c **** 							for (int i = 0; i < 8; ++i)
 9601              		.loc 1 2150 0
 9602 7a75 C78598F3 		movl	$0, -3176(%rbp)
 9602      FFFF0000 
 9602      0000
 9603 7a7f EB25     		jmp	.L499
 9604              	.L500:
2151:final_with_print.c **** 								updatesForCSV[i] = decryptedUpdates[i];
 9605              		.loc 1 2151 0 discriminator 3
 9606 7a81 8B8598F3 		movl	-3176(%rbp), %eax
 9606      FFFF
 9607 7a87 4898     		cltq
 9608 7a89 8B948550 		movl	-688(%rbp,%rax,4), %edx
 9608      FDFFFF
 9609 7a90 8B8598F3 		movl	-3176(%rbp), %eax
 9609      FFFF
 9610 7a96 4898     		cltq
 9611 7a98 89948570 		movl	%edx, -2704(%rbp,%rax,4)
 9611      F5FFFF
2150:final_with_print.c **** 								updatesForCSV[i] = decryptedUpdates[i];
 9612              		.loc 1 2150 0 discriminator 3
 9613 7a9f 838598F3 		addl	$1, -3176(%rbp)
 9613      FFFF01
 9614              	.L499:
2150:final_with_print.c **** 								updatesForCSV[i] = decryptedUpdates[i];
 9615              		.loc 1 2150 0 is_stmt 0 discriminator 1
 9616 7aa6 83BD98F3 		cmpl	$7, -3176(%rbp)
 9616      FFFF07
 9617 7aad 7ED2     		jle	.L500
 9618              	.LBE100:
2152:final_with_print.c **** 
2153:final_with_print.c **** 							// exists = updatesForCSV[7];
2154:final_with_print.c **** 							// ok = updatesForCSV[6];
2155:final_with_print.c **** 							// dir = 4*updatesForCSV[5] + 2*updatesForCSV[4] + updatesForCSV[3];
2156:final_with_print.c **** 							// nxt = 4*updatesForCSV[2] + 2*updatesForCSV[1] + updatesForCSV[0];
2157:final_with_print.c **** 
2158:final_with_print.c **** 							// printf("%s\n", "The information received from FPGA");
2159:final_with_print.c **** 							// printf("%s ", "Track exists   ---->   ");
2160:final_with_print.c **** 							// printf("%d\n", exists);
2161:final_with_print.c **** 							// printf("%s ", "Track ok   ----->   ");
2162:final_with_print.c **** 							// printf("%d\n", ok);
2163:final_with_print.c **** 							// printf("%s ", "Direction   ----->   ");
2164:final_with_print.c **** 							// printf("%d\n", dir);
2165:final_with_print.c **** 							// printf("%s ", "Next signal   ------>    ");
2166:final_with_print.c **** 							// printf("%d\n", nxt);
2167:final_with_print.c **** 
2168:final_with_print.c **** 							// printf("%s\n", "Overwriting the CSV file with the updated information");
2169:final_with_print.c **** 							// writecsv(x_cord, y_cord, ok, dir, nxt);
2170:final_with_print.c **** 							// printf("%s\n", "CSV file overwritten successfully");
2171:final_with_print.c **** 							 break;
 9619              		.loc 1 2171 0 is_stmt 1
 9620 7aaf EB06     		jmp	.L476
 9621              	.L480:
 9622              	.LBE96:
 9623              	.LBE95:
 9624              	.LBE106:
 9625              	.LBE110:
 9626              	.LBE114:
1294:final_with_print.c **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 9627              		.loc 1 1294 0 discriminator 2
 9628 7ab1 E92A0400 		jmp	.L230
 9628      00
 9629              	.L526:
 9630              	.LBB115:
 9631              	.LBB111:
 9632              	.LBB107:
 9633              	.LBB101:
2066:final_with_print.c **** 						if(director==decY)
 9634              		.loc 1 2066 0
 9635 7ab6 90       		nop
 9636              	.L476:
 9637              	.LBE101:
2172:final_with_print.c **** 						}
2173:final_with_print.c **** 					}
2174:final_with_print.c **** 
2175:final_with_print.c **** 					if(breaker3 >= 1) continue;
 9638              		.loc 1 2175 0
 9639 7ab7 83BD88F3 		cmpl	$0, -3192(%rbp)
 9639      FFFF00
 9640 7abe 0F8FAA03 		jg	.L527
 9640      0000
2176:final_with_print.c **** 
2177:final_with_print.c **** 					printf("%s\n", "-------------------------UART PART----------------------------");
 9641              		.loc 1 2177 0
 9642 7ac4 BF000000 		movl	$.LC248, %edi
 9642      00
 9643 7ac9 E8000000 		call	puts
 9643      00
2178:final_with_print.c **** 					int Z[8] = {1,0,0,0,0,0,0,0};
 9644              		.loc 1 2178 0
 9645 7ace 48C78550 		movq	$0, -688(%rbp)
 9645      FDFFFF00 
 9645      000000
 9646 7ad9 48C78558 		movq	$0, -680(%rbp)
 9646      FDFFFF00 
 9646      000000
 9647 7ae4 48C78560 		movq	$0, -672(%rbp)
 9647      FDFFFF00 
 9647      000000
 9648 7aef 48C78568 		movq	$0, -664(%rbp)
 9648      FDFFFF00 
 9648      000000
 9649 7afa C78550FD 		movl	$1, -688(%rbp)
 9649      FFFF0100 
 9649      0000
2179:final_with_print.c **** 					//int W[8] = {0,0,0,0,0,0,0,0};
2180:final_with_print.c **** 					int decZ = bitArrayToInt(Z, 8);
 9650              		.loc 1 2180 0
 9651 7b04 488D8550 		leaq	-688(%rbp), %rax
 9651      FDFFFF
 9652 7b0b BE080000 		movl	$8, %esi
 9652      00
 9653 7b10 4889C7   		movq	%rax, %rdi
 9654 7b13 E8000000 		call	bitArrayToInt
 9654      00
 9655 7b18 8985C8F3 		movl	%eax, -3128(%rbp)
 9655      FFFF
2181:final_with_print.c **** 					//int decW = bitArrayToInt(W, 8);
2182:final_with_print.c **** 
2183:final_with_print.c **** 					uint8 direct2;
2184:final_with_print.c **** 					int breaker4 = 0;
 9656              		.loc 1 2184 0
 9657 7b1e C7859CF3 		movl	$0, -3172(%rbp)
 9657      FFFF0000 
 9657      0000
 9658              	.L508:
 9659              	.LBB102:
2185:final_with_print.c **** 
2186:final_with_print.c **** 					while(1)
2187:final_with_print.c **** 					{	
2188:final_with_print.c **** 						printf("%s", " UART Count " );
 9660              		.loc 1 2188 0
 9661 7b28 BE000000 		movl	$.LC249, %esi
 9661      00
 9662 7b2d BF000000 		movl	$.LC153, %edi
 9662      00
 9663 7b32 B8000000 		movl	$0, %eax
 9663      00
 9664 7b37 E8000000 		call	printf
 9664      00
2189:final_with_print.c **** 						cnt2++;
 9665              		.loc 1 2189 0
 9666 7b3c 838584F3 		addl	$1, -3196(%rbp)
 9666      FFFF01
2190:final_with_print.c **** 						printf("%d\n", cnt2);
 9667              		.loc 1 2190 0
 9668 7b43 8B8584F3 		movl	-3196(%rbp), %eax
 9668      FFFF
 9669 7b49 89C6     		movl	%eax, %esi
 9670 7b4b BF000000 		movl	$.LC154, %edi
 9670      00
 9671 7b50 B8000000 		movl	$0, %eax
 9671      00
 9672 7b55 E8000000 		call	printf
 9672      00
2191:final_with_print.c **** 						printf("%s\n", "Waiting for UART signal ");
 9673              		.loc 1 2191 0
 9674 7b5a BF000000 		movl	$.LC250, %edi
 9674      00
 9675 7b5f E8000000 		call	puts
 9675      00
2192:final_with_print.c **** 						delay(del);
 9676              		.loc 1 2192 0
 9677 7b64 8B85B0F3 		movl	-3152(%rbp), %eax
 9677      FFFF
 9678 7b6a 89C7     		movl	%eax, %edi
 9679 7b6c E8000000 		call	delay
 9679      00
2193:final_with_print.c **** 						fStatus = flReadChannelAsyncSubmit(handle, 2*k, 1, &direct2, &error);
 9680              		.loc 1 2193 0
 9681 7b71 8B85C8F2 		movl	-3384(%rbp), %eax
 9681      FFFF
 9682 7b77 01C0     		addl	%eax, %eax
 9683 7b79 0FB6F0   		movzbl	%al, %esi
 9684 7b7c 488B85E0 		movq	-3104(%rbp), %rax
 9684      F3FFFF
 9685 7b83 488D8DE8 		leaq	-3096(%rbp), %rcx
 9685      F3FFFF
 9686 7b8a 488D95AA 		leaq	-3414(%rbp), %rdx
 9686      F2FFFF
 9687 7b91 4989C8   		movq	%rcx, %r8
 9688 7b94 4889D1   		movq	%rdx, %rcx
 9689 7b97 BA010000 		movl	$1, %edx
 9689      00
 9690 7b9c 4889C7   		movq	%rax, %rdi
 9691 7b9f E8000000 		call	flReadChannelAsyncSubmit
 9691      00
 9692 7ba4 8985BCF2 		movl	%eax, -3396(%rbp)
 9692      FFFF
2194:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 9693              		.loc 1 2194 0
 9694 7baa 83BDBCF2 		cmpl	$0, -3396(%rbp)
 9694      FFFF00
 9695 7bb1 740F     		je	.L503
 9696              		.loc 1 2194 0 is_stmt 0 discriminator 1
 9697 7bb3 C785B8F2 		movl	$1, -3400(%rbp)
 9697      FFFF0100 
 9697      0000
 9698 7bbd E91E0300 		jmp	.L230
 9698      00
 9699              	.L503:
2195:final_with_print.c **** 						fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 9700              		.loc 1 2195 0 is_stmt 1
 9701 7bc2 488B85E0 		movq	-3104(%rbp), %rax
 9701      F3FFFF
 9702 7bc9 488DBDE8 		leaq	-3096(%rbp), %rdi
 9702      F3FFFF
 9703 7bd0 488D8DB4 		leaq	-3404(%rbp), %rcx
 9703      F2FFFF
 9704 7bd7 488D95B4 		leaq	-3404(%rbp), %rdx
 9704      F2FFFF
 9705 7bde 488DB5F0 		leaq	-3088(%rbp), %rsi
 9705      F3FFFF
 9706 7be5 4989F8   		movq	%rdi, %r8
 9707 7be8 4889C7   		movq	%rax, %rdi
 9708 7beb E8000000 		call	flReadChannelAsyncAwait
 9708      00
 9709 7bf0 8985BCF2 		movl	%eax, -3396(%rbp)
 9709      FFFF
2196:final_with_print.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 9710              		.loc 1 2196 0
 9711 7bf6 83BDBCF2 		cmpl	$0, -3396(%rbp)
 9711      FFFF00
 9712 7bfd 740F     		je	.L504
 9713              		.loc 1 2196 0 is_stmt 0 discriminator 1
 9714 7bff C785B8F2 		movl	$1, -3400(%rbp)
 9714      FFFF0100 
 9714      0000
 9715 7c09 E9D20200 		jmp	.L230
 9715      00
 9716              	.L504:
2197:final_with_print.c **** 						if(direct2 == reset) 
 9717              		.loc 1 2197 0 is_stmt 1
 9718 7c0e 0FB685AA 		movzbl	-3414(%rbp), %eax
 9718      F2FFFF
 9719 7c15 3A85AFF2 		cmpb	-3409(%rbp), %al
 9719      FFFF
 9720 7c1b 751A     		jne	.L505
2198:final_with_print.c **** 							{
2199:final_with_print.c **** 								k--; 
 9721              		.loc 1 2199 0
 9722 7c1d 83ADC8F2 		subl	$1, -3384(%rbp)
 9722      FFFF01
2200:final_with_print.c **** 								breaker4++; 
 9723              		.loc 1 2200 0
 9724 7c24 83859CF3 		addl	$1, -3172(%rbp)
 9724      FFFF01
2201:final_with_print.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 9725              		.loc 1 2201 0
 9726 7c2b BF000000 		movl	$.LC157, %edi
 9726      00
 9727 7c30 E8000000 		call	puts
 9727      00
2202:final_with_print.c **** 								break;
 9728              		.loc 1 2202 0
 9729 7c35 EB49     		jmp	.L506
 9730              	.L505:
2203:final_with_print.c **** 							}
2204:final_with_print.c **** 						printf("%s\n", "Controlling signal received from UART, it is-----");
 9731              		.loc 1 2204 0
 9732 7c37 BF000000 		movl	$.LC251, %edi
 9732      00
 9733 7c3c E8000000 		call	puts
 9733      00
2205:final_with_print.c **** 						printf("%d\n", direct2);
 9734              		.loc 1 2205 0
 9735 7c41 0FB685AA 		movzbl	-3414(%rbp), %eax
 9735      F2FFFF
 9736 7c48 0FB6C0   		movzbl	%al, %eax
 9737 7c4b 89C6     		movl	%eax, %esi
 9738 7c4d BF000000 		movl	$.LC154, %edi
 9738      00
 9739 7c52 B8000000 		movl	$0, %eax
 9739      00
 9740 7c57 E8000000 		call	printf
 9740      00
2206:final_with_print.c **** 						//printf("%s\n", "Checking the controlling singal, whether it is to update CSV data or not");
2207:final_with_print.c **** 						int director = (int)direct2;
 9741              		.loc 1 2207 0
 9742 7c5c 0FB685AA 		movzbl	-3414(%rbp), %eax
 9742      F2FFFF
 9743 7c63 0FB6C0   		movzbl	%al, %eax
 9744 7c66 8985CCF3 		movl	%eax, -3124(%rbp)
 9744      FFFF
2208:final_with_print.c **** 						if(director==decZ) break;
 9745              		.loc 1 2208 0
 9746 7c6c 8B85CCF3 		movl	-3124(%rbp), %eax
 9746      FFFF
 9747 7c72 3B85C8F3 		cmpl	-3128(%rbp), %eax
 9747      FFFF
 9748 7c78 7405     		je	.L528
 9749              	.LBE102:
2209:final_with_print.c **** 						// if(director==decW)
2210:final_with_print.c **** 						// {
2211:final_with_print.c **** 						// 	printf("%s\n", "Controlling signal is to update the CSV data");
2212:final_with_print.c **** 						// 	printf("%s\n", "Receiving encrypted data from the UART update CSV");
2213:final_with_print.c **** 						// 	delay(del);
2214:final_with_print.c **** 						// 	fStatus = flReadChannel(handle, 2*k, 1, &direct2, &error);
2215:final_with_print.c **** 						// 	if(direct2 == reset) 
2216:final_with_print.c **** 						// 	{
2217:final_with_print.c **** 						// 		k--; 
2218:final_with_print.c **** 						// 		breaker4++;
2219:final_with_print.c **** 						// 		printf("%s\n", "-------------------------RESET------------------------"); 
2220:final_with_print.c **** 						// 		break;
2221:final_with_print.c **** 						// 	}
2222:final_with_print.c **** 		 			// 		// delay(del);
2223:final_with_print.c **** 		 			// 		// fStatus = flReadChannel(handle, 2*k, 1, &updaterUART[1], &error);
2224:final_with_print.c **** 		 			// 		// delay(del);
2225:final_with_print.c **** 		 			// 		// fStatus = flReadChannel(handle, 2*k, 1, &updaterUART[2], &error);
2226:final_with_print.c **** 		 			// 		// delay(del);
2227:final_with_print.c **** 		 			// 		// fStatus = flReadChannel(handle, 2*k, 1, &updaterUART[3], &error);
2228:final_with_print.c **** 
2229:final_with_print.c **** 		 			// 		// printf("%s\n", "Encrypted Data received successfully from the UART, it is as in uint8
2230:final_with_print.c **** 		 			// 		// for (int i = 0; i < 4; ++i)
2231:final_with_print.c **** 		 			// 		// {
2232:final_with_print.c **** 		 			// 		// 	printf("%d ", updaterUART[i]);
2233:final_with_print.c **** 		 			// 		// }
2234:final_with_print.c **** 						// 	printf("%d\n", direct2);
2235:final_with_print.c **** 
2236:final_with_print.c **** 						// 	int updatesFromUART[8];
2237:final_with_print.c **** 						// 	printf("%s\n", "Converting uint8 data to binary");
2238:final_with_print.c **** 						// 	decToBinary(direct2, updatesFromUART, 8);
2239:final_with_print.c **** 						// 	printf("%s\n", "Converted uint8 data to binary, it is as-----");
2240:final_with_print.c **** 
2241:final_with_print.c **** 						// 	for (int i = 0; i < 8; ++i)
2242:final_with_print.c **** 						// 	{
2243:final_with_print.c **** 						// 		printf("%d ", updatesFromUART[7-i]);
2244:final_with_print.c **** 						// 	}
2245:final_with_print.c **** 						// 	printf("\n");
2246:final_with_print.c **** 		 			// 		// printf("%s\n", "Decrypting the data");
2247:final_with_print.c **** 		 			// 		// int decryptedUpdates[32];
2248:final_with_print.c **** 		 			// 		// decrypter(updatesFromUART, K, decryptedUpdates);
2249:final_with_print.c **** 		 			// 		// printf("%s\n", "Data decrypted successfully, it is as----");
2250:final_with_print.c **** 		 			// 		// for (int i = 0; i < 32; ++i)
2251:final_with_print.c **** 		 			// 		// {
2252:final_with_print.c **** 		 			// 		// 	printf("%d ", decryptedUpdates[i]);
2253:final_with_print.c **** 		 			// 		// }
2254:final_with_print.c **** 		 			// 		// printf("\n");
2255:final_with_print.c **** 						// 	printf("%s\n", "Getting ready to update CSV");
2256:final_with_print.c **** 		 			// 		// int updatesForCSV[8];
2257:final_with_print.c **** 						// 	int exists, ok, dir, nxt;
2258:final_with_print.c **** 		 			// 		// for (int i = 0; i < 8; ++i)
2259:final_with_print.c **** 		 			// 		// 	updatesForCSV[i] = decryptedUpdates[i];
2260:final_with_print.c **** 
2261:final_with_print.c **** 						// 	exists = updatesFromUART[7];
2262:final_with_print.c **** 						// 	ok = updatesFromUART[6];
2263:final_with_print.c **** 						// 	dir = 4*updatesFromUART[5] + 2*updatesFromUART[4] + updatesFromUART[3];
2264:final_with_print.c **** 						// 	nxt = 4*updatesFromUART[2] + 2*updatesFromUART[1] + updatesFromUART[0];
2265:final_with_print.c **** 
2266:final_with_print.c **** 						// 	printf("%s\n", "The information received from UART");
2267:final_with_print.c **** 						// 	printf("%s ", "Track exists   ---->   ");
2268:final_with_print.c **** 						// 	printf("%d\n", exists);
2269:final_with_print.c **** 						// 	printf("%s ", "Track ok   ----->   ");
2270:final_with_print.c **** 						// 	printf("%d\n", ok);
2271:final_with_print.c **** 						// 	printf("%s ", "Direction   ----->   ");
2272:final_with_print.c **** 						// 	printf("%d\n", dir);
2273:final_with_print.c **** 						// 	printf("%s ", "Next signal   ------>    ");
2274:final_with_print.c **** 						// 	printf("%d\n", nxt);
2275:final_with_print.c **** 
2276:final_with_print.c **** 						// 	printf("%s\n", "Overwriting the CSV file with the updated information");
2277:final_with_print.c **** 						// 	writecsv(x_cord, y_cord, ok, dir, nxt);
2278:final_with_print.c **** 						// 	printf("%s\n", "CSV file overwritten successfully");
2279:final_with_print.c **** 						// 	break;
2280:final_with_print.c **** 						// }
2281:final_with_print.c **** 					}
 9750              		.loc 1 2281 0
 9751 7c7a E9A9FEFF 		jmp	.L508
 9751      FF
 9752              	.L528:
 9753              	.LBB103:
2208:final_with_print.c **** 						if(director==decZ) break;
 9754              		.loc 1 2208 0
 9755 7c7f 90       		nop
 9756              	.L506:
 9757              	.LBE103:
2282:final_with_print.c **** 
2283:final_with_print.c **** 					if(breaker4 >= 1)
 9758              		.loc 1 2283 0
 9759 7c80 83BD9CF3 		cmpl	$0, -3172(%rbp)
 9759      FFFF00
 9760 7c87 0F8FE401 		jg	.L529
 9760      0000
2284:final_with_print.c **** 					{
2285:final_with_print.c **** 						continue;
2286:final_with_print.c **** 					}
2287:final_with_print.c **** 					
2288:final_with_print.c **** 					if(updateCSV==true){
 9761              		.loc 1 2288 0
 9762 7c8d 80BDACF2 		cmpb	$0, -3412(%rbp)
 9762      FFFF00
 9763 7c94 0F84AB01 		je	.L510
 9763      0000
2289:final_with_print.c **** 						exists = updatesForCSV[7];
 9764              		.loc 1 2289 0
 9765 7c9a 8B858CF5 		movl	-2676(%rbp), %eax
 9765      FFFF
 9766 7ca0 8985D0F3 		movl	%eax, -3120(%rbp)
 9766      FFFF
2290:final_with_print.c **** 						ok = updatesForCSV[6];
 9767              		.loc 1 2290 0
 9768 7ca6 8B8588F5 		movl	-2680(%rbp), %eax
 9768      FFFF
 9769 7cac 8985D4F3 		movl	%eax, -3116(%rbp)
 9769      FFFF
2291:final_with_print.c **** 						dir = 4*updatesForCSV[5] + 2*updatesForCSV[4] + updatesForCSV[3];
 9770              		.loc 1 2291 0
 9771 7cb2 8B8584F5 		movl	-2684(%rbp), %eax
 9771      FFFF
 9772 7cb8 8D1400   		leal	(%rax,%rax), %edx
 9773 7cbb 8B8580F5 		movl	-2688(%rbp), %eax
 9773      FFFF
 9774 7cc1 01D0     		addl	%edx, %eax
 9775 7cc3 8D1400   		leal	(%rax,%rax), %edx
 9776 7cc6 8B857CF5 		movl	-2692(%rbp), %eax
 9776      FFFF
 9777 7ccc 01D0     		addl	%edx, %eax
 9778 7cce 8985D8F3 		movl	%eax, -3112(%rbp)
 9778      FFFF
2292:final_with_print.c **** 						nxt = 4*updatesForCSV[2] + 2*updatesForCSV[1] + updatesForCSV[0];
 9779              		.loc 1 2292 0
 9780 7cd4 8B8578F5 		movl	-2696(%rbp), %eax
 9780      FFFF
 9781 7cda 8D1400   		leal	(%rax,%rax), %edx
 9782 7cdd 8B8574F5 		movl	-2700(%rbp), %eax
 9782      FFFF
 9783 7ce3 01D0     		addl	%edx, %eax
 9784 7ce5 8D1400   		leal	(%rax,%rax), %edx
 9785 7ce8 8B8570F5 		movl	-2704(%rbp), %eax
 9785      FFFF
 9786 7cee 01D0     		addl	%edx, %eax
 9787 7cf0 8985DCF3 		movl	%eax, -3108(%rbp)
 9787      FFFF
2293:final_with_print.c **** 
2294:final_with_print.c **** 						printf("%s\n", "The information received from FPGA");
 9788              		.loc 1 2294 0
 9789 7cf6 BF000000 		movl	$.LC252, %edi
 9789      00
 9790 7cfb E8000000 		call	puts
 9790      00
2295:final_with_print.c **** 						printf("%s", "The x_cord ----->");
 9791              		.loc 1 2295 0
 9792 7d00 BE000000 		movl	$.LC253, %esi
 9792      00
 9793 7d05 BF000000 		movl	$.LC153, %edi
 9793      00
 9794 7d0a B8000000 		movl	$0, %eax
 9794      00
 9795 7d0f E8000000 		call	printf
 9795      00
2296:final_with_print.c **** 						printf("%d\n", x_cord);
 9796              		.loc 1 2296 0
 9797 7d14 8B85B4F3 		movl	-3148(%rbp), %eax
 9797      FFFF
 9798 7d1a 89C6     		movl	%eax, %esi
 9799 7d1c BF000000 		movl	$.LC154, %edi
 9799      00
 9800 7d21 B8000000 		movl	$0, %eax
 9800      00
 9801 7d26 E8000000 		call	printf
 9801      00
2297:final_with_print.c **** 						printf("%s", "The y_cord ----->");
 9802              		.loc 1 2297 0
 9803 7d2b BE000000 		movl	$.LC254, %esi
 9803      00
 9804 7d30 BF000000 		movl	$.LC153, %edi
 9804      00
 9805 7d35 B8000000 		movl	$0, %eax
 9805      00
 9806 7d3a E8000000 		call	printf
 9806      00
2298:final_with_print.c **** 						printf("%d\n", y_cord);
 9807              		.loc 1 2298 0
 9808 7d3f 8B85B8F3 		movl	-3144(%rbp), %eax
 9808      FFFF
 9809 7d45 89C6     		movl	%eax, %esi
 9810 7d47 BF000000 		movl	$.LC154, %edi
 9810      00
 9811 7d4c B8000000 		movl	$0, %eax
 9811      00
 9812 7d51 E8000000 		call	printf
 9812      00
2299:final_with_print.c **** 						printf("%s ", "Track exists   ---->   ");
 9813              		.loc 1 2299 0
 9814 7d56 BE000000 		movl	$.LC255, %esi
 9814      00
 9815 7d5b BF000000 		movl	$.LC256, %edi
 9815      00
 9816 7d60 B8000000 		movl	$0, %eax
 9816      00
 9817 7d65 E8000000 		call	printf
 9817      00
2300:final_with_print.c **** 						printf("%d\n", exists);
 9818              		.loc 1 2300 0
 9819 7d6a 8B85D0F3 		movl	-3120(%rbp), %eax
 9819      FFFF
 9820 7d70 89C6     		movl	%eax, %esi
 9821 7d72 BF000000 		movl	$.LC154, %edi
 9821      00
 9822 7d77 B8000000 		movl	$0, %eax
 9822      00
 9823 7d7c E8000000 		call	printf
 9823      00
2301:final_with_print.c **** 						printf("%s ", "Track ok   ----->   ");
 9824              		.loc 1 2301 0
 9825 7d81 BE000000 		movl	$.LC257, %esi
 9825      00
 9826 7d86 BF000000 		movl	$.LC256, %edi
 9826      00
 9827 7d8b B8000000 		movl	$0, %eax
 9827      00
 9828 7d90 E8000000 		call	printf
 9828      00
2302:final_with_print.c **** 						printf("%d\n", ok);
 9829              		.loc 1 2302 0
 9830 7d95 8B85D4F3 		movl	-3116(%rbp), %eax
 9830      FFFF
 9831 7d9b 89C6     		movl	%eax, %esi
 9832 7d9d BF000000 		movl	$.LC154, %edi
 9832      00
 9833 7da2 B8000000 		movl	$0, %eax
 9833      00
 9834 7da7 E8000000 		call	printf
 9834      00
2303:final_with_print.c **** 						printf("%s ", "Direction   ----->   ");
 9835              		.loc 1 2303 0
 9836 7dac BE000000 		movl	$.LC258, %esi
 9836      00
 9837 7db1 BF000000 		movl	$.LC256, %edi
 9837      00
 9838 7db6 B8000000 		movl	$0, %eax
 9838      00
 9839 7dbb E8000000 		call	printf
 9839      00
2304:final_with_print.c **** 						printf("%d\n", dir);
 9840              		.loc 1 2304 0
 9841 7dc0 8B85D8F3 		movl	-3112(%rbp), %eax
 9841      FFFF
 9842 7dc6 89C6     		movl	%eax, %esi
 9843 7dc8 BF000000 		movl	$.LC154, %edi
 9843      00
 9844 7dcd B8000000 		movl	$0, %eax
 9844      00
 9845 7dd2 E8000000 		call	printf
 9845      00
2305:final_with_print.c **** 						printf("%s ", "Next signal   ------>    ");
 9846              		.loc 1 2305 0
 9847 7dd7 BE000000 		movl	$.LC259, %esi
 9847      00
 9848 7ddc BF000000 		movl	$.LC256, %edi
 9848      00
 9849 7de1 B8000000 		movl	$0, %eax
 9849      00
 9850 7de6 E8000000 		call	printf
 9850      00
2306:final_with_print.c **** 						printf("%d\n", nxt);
 9851              		.loc 1 2306 0
 9852 7deb 8B85DCF3 		movl	-3108(%rbp), %eax
 9852      FFFF
 9853 7df1 89C6     		movl	%eax, %esi
 9854 7df3 BF000000 		movl	$.LC154, %edi
 9854      00
 9855 7df8 B8000000 		movl	$0, %eax
 9855      00
 9856 7dfd E8000000 		call	printf
 9856      00
2307:final_with_print.c **** 						printf("%s\n", "Overwriting the CSV file with the updated information");
 9857              		.loc 1 2307 0
 9858 7e02 BF000000 		movl	$.LC260, %edi
 9858      00
 9859 7e07 E8000000 		call	puts
 9859      00
2308:final_with_print.c **** 						writecsv(x_cord, y_cord, ok, dir, nxt);
 9860              		.loc 1 2308 0
 9861 7e0c 8BBDDCF3 		movl	-3108(%rbp), %edi
 9861      FFFF
 9862 7e12 8B8DD8F3 		movl	-3112(%rbp), %ecx
 9862      FFFF
 9863 7e18 8B95D4F3 		movl	-3116(%rbp), %edx
 9863      FFFF
 9864 7e1e 8BB5B8F3 		movl	-3144(%rbp), %esi
 9864      FFFF
 9865 7e24 8B85B4F3 		movl	-3148(%rbp), %eax
 9865      FFFF
 9866 7e2a 4189F8   		movl	%edi, %r8d
 9867 7e2d 89C7     		movl	%eax, %edi
 9868 7e2f E8000000 		call	writecsv
 9868      00
2309:final_with_print.c **** 						printf("%s\n", "CSV file overwritten successfully");
 9869              		.loc 1 2309 0
 9870 7e34 BF000000 		movl	$.LC261, %edi
 9870      00
 9871 7e39 E8000000 		call	puts
 9871      00
2310:final_with_print.c **** 								
2311:final_with_print.c **** 			 			//delay(32000000);
2312:final_with_print.c **** 						
2313:final_with_print.c **** 						updateCSV=false;						
 9872              		.loc 1 2313 0
 9873 7e3e C685ACF2 		movb	$0, -3412(%rbp)
 9873      FFFF00
 9874              	.L510:
2314:final_with_print.c **** 					}
2315:final_with_print.c **** 					k = k-1;
 9875              		.loc 1 2315 0
 9876 7e45 83ADC8F2 		subl	$1, -3384(%rbp)
 9876      FFFF01
2316:final_with_print.c **** 					delay(5*del);
 9877              		.loc 1 2316 0
 9878 7e4c 8B95B0F3 		movl	-3152(%rbp), %edx
 9878      FFFF
 9879 7e52 89D0     		movl	%edx, %eax
 9880 7e54 C1E002   		sall	$2, %eax
 9881 7e57 01D0     		addl	%edx, %eax
 9882 7e59 89C7     		movl	%eax, %edi
 9883 7e5b E8000000 		call	delay
 9883      00
2317:final_with_print.c **** 					continue;
 9884              		.loc 1 2317 0
 9885 7e60 EB10     		jmp	.L305
 9886              	.L521:
1596:final_with_print.c **** 					}
 9887              		.loc 1 1596 0
 9888 7e62 90       		nop
 9889 7e63 EB0D     		jmp	.L305
 9890              	.L523:
1842:final_with_print.c **** 
 9891              		.loc 1 1842 0
 9892 7e65 90       		nop
 9893 7e66 EB0A     		jmp	.L305
 9894              	.L524:
1846:final_with_print.c **** 					}
 9895              		.loc 1 1846 0
 9896 7e68 90       		nop
 9897 7e69 EB07     		jmp	.L305
 9898              	.L525:
1987:final_with_print.c **** 
 9899              		.loc 1 1987 0
 9900 7e6b 90       		nop
 9901 7e6c EB04     		jmp	.L305
 9902              	.L527:
2175:final_with_print.c **** 
 9903              		.loc 1 2175 0
 9904 7e6e 90       		nop
 9905 7e6f EB01     		jmp	.L305
 9906              	.L529:
2285:final_with_print.c **** 					}
 9907              		.loc 1 2285 0
 9908 7e71 90       		nop
 9909              	.L305:
 9910              	.LBE107:
1309:final_with_print.c **** 				{	printf("%s","Channel = " );
 9911              		.loc 1 1309 0 discriminator 1
 9912 7e72 8385C8F2 		addl	$1, -3384(%rbp)
 9912      FFFF01
 9913              	.L300:
 9914 7e79 83BDC8F2 		cmpl	$63, -3384(%rbp)
 9914      FFFF3F
 9915 7e80 0F8EF5CB 		jle	.L511
 9915      FFFF
 9916 7e86 EB58     		jmp	.L230
 9917              	.L299:
 9918              	.LBE111:
 9919              	.LBE115:
2318:final_with_print.c **** 
2319:final_with_print.c **** 
2320:final_with_print.c **** 				}
2321:final_with_print.c **** 
2322:final_with_print.c **** 			} 
2323:final_with_print.c **** 			else 
2324:final_with_print.c **** 			{
2325:final_with_print.c **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n", vp
 9920              		.loc 1 2325 0
 9921 7e88 488B0500 		movq	stderr(%rip), %rax
 9921      000000
 9922 7e8f 488B95B8 		movq	-2888(%rbp), %rdx
 9922      F4FFFF
 9923 7e96 BE000000 		movl	$.LC148, %esi
 9923      00
 9924 7e9b 4889C7   		movq	%rax, %rdi
 9925 7e9e B8000000 		movl	$0, %eax
 9925      00
 9926 7ea3 E8000000 		call	fprintf
 9926      00
2326:final_with_print.c **** 				FAIL(FLP_ARGS, cleanup);
 9927              		.loc 1 2326 0
 9928 7ea8 C785B8F2 		movl	$12, -3400(%rbp)
 9928      FFFF0C00 
 9928      0000
 9929 7eb2 90       		nop
 9930 7eb3 EB2B     		jmp	.L230
 9931              	.L295:
 9932              	.LBE50:
2327:final_with_print.c **** 			}
2328:final_with_print.c **** 		} 
2329:final_with_print.c **** 		else 
2330:final_with_print.c **** 		{
2331:final_with_print.c **** 			fprintf(stderr, "Shell requested but device at %s does not support CommFPGA\n", vp);
 9933              		.loc 1 2331 0
 9934 7eb5 488B0500 		movq	stderr(%rip), %rax
 9934      000000
 9935 7ebc 488B95B8 		movq	-2888(%rbp), %rdx
 9935      F4FFFF
 9936 7ec3 BE000000 		movl	$.LC149, %esi
 9936      00
 9937 7ec8 4889C7   		movq	%rax, %rdi
 9938 7ecb B8000000 		movl	$0, %eax
 9938      00
 9939 7ed0 E8000000 		call	fprintf
 9939      00
2332:final_with_print.c **** 			FAIL(FLP_ARGS, cleanup);
 9940              		.loc 1 2332 0
 9941 7ed5 C785B8F2 		movl	$12, -3400(%rbp)
 9941      FFFF0C00 
 9941      0000
 9942 7edf 90       		nop
 9943              	.L230:
2333:final_with_print.c **** 		}
2334:final_with_print.c **** 
2335:final_with_print.c **** 
2336:final_with_print.c **** 	}
2337:final_with_print.c **** 
2338:final_with_print.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
2339:final_with_print.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
2340:final_with_print.c **** 
2341:final_with_print.c **** 	cleanup:
2342:final_with_print.c **** 	free((void*)line);
 9944              		.loc 1 2342 0
 9945 7ee0 488B8518 		movq	-3048(%rbp), %rax
 9945      F4FFFF
 9946 7ee7 4889C7   		movq	%rax, %rdi
 9947 7eea E8000000 		call	free
 9947      00
2343:final_with_print.c **** 	flClose(handle);
 9948              		.loc 1 2343 0
 9949 7eef 488B85E0 		movq	-3104(%rbp), %rax
 9949      F3FFFF
 9950 7ef6 4889C7   		movq	%rax, %rdi
 9951 7ef9 E8000000 		call	flClose
 9951      00
2344:final_with_print.c **** 	if ( error ) {
 9952              		.loc 1 2344 0
 9953 7efe 488B85E8 		movq	-3096(%rbp), %rax
 9953      F3FFFF
 9954 7f05 4885C0   		testq	%rax, %rax
 9955 7f08 742F     		je	.L512
2345:final_with_print.c **** 		fprintf(stderr, "%s\n", error);
 9956              		.loc 1 2345 0
 9957 7f0a 488B95E8 		movq	-3096(%rbp), %rdx
 9957      F3FFFF
 9958 7f11 488B0500 		movq	stderr(%rip), %rax
 9958      000000
 9959 7f18 BE000000 		movl	$.LC262, %esi
 9959      00
 9960 7f1d 4889C7   		movq	%rax, %rdi
 9961 7f20 B8000000 		movl	$0, %eax
 9961      00
 9962 7f25 E8000000 		call	fprintf
 9962      00
2346:final_with_print.c **** 		flFreeError(error);
 9963              		.loc 1 2346 0
 9964 7f2a 488B85E8 		movq	-3096(%rbp), %rax
 9964      F3FFFF
 9965 7f31 4889C7   		movq	%rax, %rdi
 9966 7f34 E8000000 		call	flFreeError
 9966      00
 9967              	.L512:
2347:final_with_print.c **** 	}
2348:final_with_print.c **** 	return retVal;
 9968              		.loc 1 2348 0
 9969 7f39 8B85B8F2 		movl	-3400(%rbp), %eax
 9969      FFFF
2349:final_with_print.c **** }
 9970              		.loc 1 2349 0
 9971 7f3f 488B5DE8 		movq	-24(%rbp), %rbx
 9972 7f43 6448331C 		xorq	%fs:40, %rbx
 9972      25280000 
 9972      00
 9973 7f4c 7405     		je	.L514
 9974 7f4e E8000000 		call	__stack_chk_fail
 9974      00
 9975              	.L514:
 9976 7f53 4881C468 		addq	$3432, %rsp
 9976      0D0000
 9977 7f5a 5B       		popq	%rbx
 9978 7f5b 5D       		popq	%rbp
 9979              		.cfi_def_cfa 7, 8
 9980 7f5c C3       		ret
 9981              		.cfi_endproc
 9982              	.LFE23:
 9984              		.section	.rodata
 9985 21a6 0000     		.align 8
 9986              	.LC29:
 9987 21a8 00000000 		.long	0
 9988 21ac 80842E41 		.long	1093567616
 9989              		.align 8
 9990              	.LC30:
 9991 21b0 00000000 		.long	0
 9992 21b4 00003041 		.long	1093664768
 9993              		.align 8
 9994              	.LC215:
 9995 21b8 00000000 		.long	0
 9996 21bc 00007040 		.long	1081081856
 9997              		.text
 9998              	.Letext0:
 9999              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 10000              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 10001              		.file 4 "/usr/include/stdio.h"
 10002              		.file 5 "/usr/include/libio.h"
 10003              		.file 6 "/usr/include/time.h"
 10004              		.file 7 "/home/shubham/20140524/makestuff/common/makestuff.h"
 10005              		.file 8 "/home/shubham/20140524/makestuff/libs/libfpgalink/libfpgalink.h"
 10006              		.file 9 "/home/shubham/20140524/makestuff/libs/libbuffer/libbuffer.h"
 10007              		.file 10 "/home/shubham/20140524/makestuff/libs/libargtable2/argtable2.h"
 10008              		.file 11 "/usr/include/x86_64-linux-gnu/bits/time.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 final_with_print.c
     /tmp/ccGL8Tyr.s:5      .bss:0000000000000000 ptr
     /tmp/ccGL8Tyr.s:5      .bss:0000000000000008 enableBenchmarking
     /tmp/ccGL8Tyr.s:10     .text:0000000000000000 delay
     /tmp/ccGL8Tyr.s:48     .text:000000000000002f myxor
     /tmp/ccGL8Tyr.s:109    .text:0000000000000091 bitArrayToInt
     /tmp/ccGL8Tyr.s:165    .text:00000000000000ee BinTouint8
     /tmp/ccGL8Tyr.s:287    .text:0000000000000281 decToBinary
     /tmp/ccGL8Tyr.s:424    .text:00000000000003c7 encrypter
     /tmp/ccGL8Tyr.s:687    .text:000000000000074b decrypter
     /tmp/ccGL8Tyr.s:971    .text:0000000000000b10 convert_to_binary
     /tmp/ccGL8Tyr.s:1045   .text:0000000000000b72 print
     /tmp/ccGL8Tyr.s:1592   .text:00000000000012f6 uint8ToBin
     /tmp/ccGL8Tyr.s:1687   .text:0000000000001388 writecsv
     /tmp/ccGL8Tyr.s:2123   .text:0000000000001971 isHexDigit
     /tmp/ccGL8Tyr.s:2172   .text:00000000000019af calcChecksum
     /tmp/ccGL8Tyr.s:2212   .text:00000000000019f0 getHexNibble
     /tmp/ccGL8Tyr.s:2280   .text:0000000000001a64 getHexByte
     /tmp/ccGL8Tyr.s:2376   .rodata:00000000000001a0 errMessages
     /tmp/ccGL8Tyr.s:2396   .text:0000000000001b08 doRead
     /tmp/ccGL8Tyr.s:2647   .text:0000000000001dba doWrite
     /tmp/ccGL8Tyr.s:2796   .text:0000000000001fae parseLine
     /tmp/ccGL8Tyr.s:4035   .data:0000000000000000 nibbles
     /tmp/ccGL8Tyr.s:4062   .text:000000000000305d asciiToBinary
     /tmp/ccGL8Tyr.s:4663   .text:00000000000030b8 main

UNDEFINED SYMBOLS
clock
__stack_chk_fail
stderr
fwrite
puts
__isoc99_fscanf
printf
fopen
putchar
fprintf
fclose
flReadChannelAsyncSubmit
errPrefix
flReadChannelAsyncAwait
fread
flWriteChannelAsync
flAwaitAsyncWrites
bufInitialise
__errno_location
strtoul
malloc
strncpy
free
gettimeofday
bufAppendConst
flReadChannel
flWriteChannel
flSelectConduit
dump
bufDestroy
fputc
arg_str0
arg_str1
arg_uint0
arg_lit0
arg_end
arg_nullcheck
arg_parse
stdout
arg_print_syntax
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadCustomFirmware
flLoadStandardFirmware
flSleep
fflush
flIsDeviceAvailable
flGetFirmwareVersion
flGetFirmwareID
strcmp
flFlashStandardFirmware
flFlashCustomFirmware
flSaveFirmware
flResetToggle
flIsNeroCapable
flIsCommCapable
flMultiBitPortAccess
sprintf
jtagScanChain
flProgram
flIsFPGARunning
sigRegisterHandler
sigIsRaised
readline
add_history
time
difftime
flClose
flFreeError
