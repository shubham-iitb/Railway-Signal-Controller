   1              		.file	"sig.c"
   2              		.text
   3              	.Ltext0:
   4              		.local	m_sigint
   5              		.comm	m_sigint,1,1
   6              		.globl	sigIsRaised
   8              	sigIsRaised:
   9              	.LFB4:
  10              		.file 1 "sig.c"
   1:sig.c         **** #include <makestuff.h>
   2:sig.c         **** #ifdef WIN32
   3:sig.c         **** 	#include <windows.h>
   4:sig.c         **** #else
   5:sig.c         **** 	#define _POSIX_SOURCE
   6:sig.c         **** 	#include <signal.h>
   7:sig.c         **** #endif
   8:sig.c         **** 
   9:sig.c         **** static bool m_sigint = false;
  10:sig.c         **** 
  11:sig.c         **** bool sigIsRaised(void) {
  11              		.loc 1 11 0
  12              		.cfi_startproc
  13 0000 55       		pushq	%rbp
  14              		.cfi_def_cfa_offset 16
  15              		.cfi_offset 6, -16
  16 0001 4889E5   		movq	%rsp, %rbp
  17              		.cfi_def_cfa_register 6
  12:sig.c         **** 	return m_sigint;
  18              		.loc 1 12 0
  19 0004 0FB60500 		movzbl	m_sigint(%rip), %eax
  19      000000
  13:sig.c         **** }
  20              		.loc 1 13 0
  21 000b 5D       		popq	%rbp
  22              		.cfi_def_cfa 7, 8
  23 000c C3       		ret
  24              		.cfi_endproc
  25              	.LFE4:
  28              	sigHandler:
  29              	.LFB5:
  14:sig.c         **** 
  15:sig.c         **** #ifdef WIN32
  16:sig.c         **** 	static BOOL sigHandler(DWORD signum) {
  17:sig.c         **** 		if ( signum == CTRL_C_EVENT ) {
  18:sig.c         **** 			m_sigint = true;
  19:sig.c         **** 			return TRUE;
  20:sig.c         **** 		}
  21:sig.c         **** 		return FALSE;
  22:sig.c         **** 	}
  23:sig.c         **** #else
  24:sig.c         **** 	static void sigHandler(int signum) {
  30              		.loc 1 24 0
  31              		.cfi_startproc
  32 000d 55       		pushq	%rbp
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 6, -16
  35 000e 4889E5   		movq	%rsp, %rbp
  36              		.cfi_def_cfa_register 6
  37 0011 897DFC   		movl	%edi, -4(%rbp)
  25:sig.c         **** 		(void)signum;
  26:sig.c         **** 		m_sigint = true;
  38              		.loc 1 26 0
  39 0014 C6050000 		movb	$1, m_sigint(%rip)
  39      000001
  27:sig.c         **** 	}
  40              		.loc 1 27 0
  41 001b 90       		nop
  42 001c 5D       		popq	%rbp
  43              		.cfi_def_cfa 7, 8
  44 001d C3       		ret
  45              		.cfi_endproc
  46              	.LFE5:
  48              		.globl	sigRegisterHandler
  50              	sigRegisterHandler:
  51              	.LFB6:
  28:sig.c         **** #endif
  29:sig.c         **** 
  30:sig.c         **** void sigRegisterHandler(void) {
  52              		.loc 1 30 0
  53              		.cfi_startproc
  54 001e 55       		pushq	%rbp
  55              		.cfi_def_cfa_offset 16
  56              		.cfi_offset 6, -16
  57 001f 4889E5   		movq	%rsp, %rbp
  58              		.cfi_def_cfa_register 6
  59 0022 4881EC40 		subq	$320, %rsp
  59      010000
  60              		.loc 1 30 0
  61 0029 64488B04 		movq	%fs:40, %rax
  61      25280000 
  61      00
  62 0032 488945F8 		movq	%rax, -8(%rbp)
  63 0036 31C0     		xorl	%eax, %eax
  31:sig.c         **** 	#ifdef WIN32
  32:sig.c         **** 		SetConsoleCtrlHandler((PHANDLER_ROUTINE)sigHandler, TRUE);
  33:sig.c         **** 	#else
  34:sig.c         **** 		struct sigaction newAction, oldAction;
  35:sig.c         **** 		newAction.sa_handler = sigHandler;
  64              		.loc 1 35 0
  65 0038 48C785C0 		movq	$sigHandler, -320(%rbp)
  65      FEFFFF00 
  65      000000
  36:sig.c         **** 		sigemptyset(&newAction.sa_mask);
  66              		.loc 1 36 0
  67 0043 488D85C0 		leaq	-320(%rbp), %rax
  67      FEFFFF
  68 004a 4883C008 		addq	$8, %rax
  69 004e 4889C7   		movq	%rax, %rdi
  70 0051 E8000000 		call	sigemptyset
  70      00
  37:sig.c         **** 		newAction.sa_flags = 0;
  71              		.loc 1 37 0
  72 0056 C78548FF 		movl	$0, -184(%rbp)
  72      FFFF0000 
  72      0000
  38:sig.c         **** 		sigaction(SIGINT, NULL, &oldAction);
  73              		.loc 1 38 0
  74 0060 488D8560 		leaq	-160(%rbp), %rax
  74      FFFFFF
  75 0067 4889C2   		movq	%rax, %rdx
  76 006a BE000000 		movl	$0, %esi
  76      00
  77 006f BF020000 		movl	$2, %edi
  77      00
  78 0074 E8000000 		call	sigaction
  78      00
  39:sig.c         **** 		if ( oldAction.sa_handler != SIG_IGN ) {
  79              		.loc 1 39 0
  80 0079 488B8560 		movq	-160(%rbp), %rax
  80      FFFFFF
  81 0080 4883F801 		cmpq	$1, %rax
  82 0084 7419     		je	.L7
  40:sig.c         **** 			sigaction(SIGINT, &newAction, NULL);
  83              		.loc 1 40 0
  84 0086 488D85C0 		leaq	-320(%rbp), %rax
  84      FEFFFF
  85 008d BA000000 		movl	$0, %edx
  85      00
  86 0092 4889C6   		movq	%rax, %rsi
  87 0095 BF020000 		movl	$2, %edi
  87      00
  88 009a E8000000 		call	sigaction
  88      00
  89              	.L7:
  41:sig.c         **** 		}
  42:sig.c         **** 	#endif
  43:sig.c         **** }
  90              		.loc 1 43 0
  91 009f 90       		nop
  92 00a0 488B45F8 		movq	-8(%rbp), %rax
  93 00a4 64483304 		xorq	%fs:40, %rax
  93      25280000 
  93      00
  94 00ad 7405     		je	.L6
  95 00af E8000000 		call	__stack_chk_fail
  95      00
  96              	.L6:
  97 00b4 C9       		leave
  98              		.cfi_def_cfa 7, 8
  99 00b5 C3       		ret
 100              		.cfi_endproc
 101              	.LFE6:
 103              	.Letext0:
 104              		.file 2 "/usr/include/x86_64-linux-gnu/bits/sigset.h"
 105              		.file 3 "/usr/include/signal.h"
 106              		.file 4 "/usr/include/x86_64-linux-gnu/bits/sigaction.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 sig.c
                             .bss:0000000000000000 m_sigint
     /tmp/ccJ7yR85.s:8      .text:0000000000000000 sigIsRaised
     /tmp/ccJ7yR85.s:28     .text:000000000000000d sigHandler
     /tmp/ccJ7yR85.s:50     .text:000000000000001e sigRegisterHandler

UNDEFINED SYMBOLS
sigemptyset
sigaction
__stack_chk_fail
