   1              		.file	"main_final_with_sync.c"
   2              		.text
   3              	.Ltext0:
   4              		.local	ptr
   5              		.comm	ptr,8,8
   6              		.local	enableBenchmarking
   7              		.comm	enableBenchmarking,1,1
   8              		.globl	delay
  10              	delay:
  11              	.LFB4:
  12              		.file 1 "main_final_with_sync.c"
   1:main_final_with_sync.c **** /* 
   2:main_final_with_sync.c ****  * Copyright (C) 2012-2014 Chris McClelland
   3:main_final_with_sync.c ****  *
   4:main_final_with_sync.c ****  * This program is free software: you can redistribute it and/or modify
   5:main_final_with_sync.c ****  * it under the terms of the GNU General Public License as published by
   6:main_final_with_sync.c ****  * the Free Software Foundation, either version 3 of the License, or
   7:main_final_with_sync.c ****  * (at your option) any later version.
   8:main_final_with_sync.c ****  *
   9:main_final_with_sync.c ****  * This program is distributed in the hope that it will be useful,
  10:main_final_with_sync.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:main_final_with_sync.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:main_final_with_sync.c ****  * GNU General Public License for more details.
  13:main_final_with_sync.c ****  *  
  14:main_final_with_sync.c ****  * You should have received a copy of the GNU General Public License
  15:main_final_with_sync.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:main_final_with_sync.c ****  */
  17:main_final_with_sync.c **** #include <stdio.h>
  18:main_final_with_sync.c **** #include <time.h>
  19:main_final_with_sync.c **** #include <stdlib.h>
  20:main_final_with_sync.c **** #include <string.h>
  21:main_final_with_sync.c **** #include <errno.h>
  22:main_final_with_sync.c **** #include <stdint.h>
  23:main_final_with_sync.c **** #include <makestuff.h>
  24:main_final_with_sync.c **** #include <libfpgalink.h>
  25:main_final_with_sync.c **** #include <libbuffer.h>
  26:main_final_with_sync.c **** #include <liberror.h>
  27:main_final_with_sync.c **** #include <libdump.h>
  28:main_final_with_sync.c **** #include <argtable2.h>
  29:main_final_with_sync.c **** #include <readline/readline.h>
  30:main_final_with_sync.c **** #include <readline/history.h>
  31:main_final_with_sync.c **** #ifdef WIN32
  32:main_final_with_sync.c **** #include <Windows.h>
  33:main_final_with_sync.c **** #else
  34:main_final_with_sync.c **** #include <sys/time.h>
  35:main_final_with_sync.c **** #endif
  36:main_final_with_sync.c **** 
  37:main_final_with_sync.c **** bool sigIsRaised(void);
  38:main_final_with_sync.c **** void sigRegisterHandler(void);
  39:main_final_with_sync.c **** 
  40:main_final_with_sync.c **** static const char *ptr;
  41:main_final_with_sync.c **** static bool enableBenchmarking = false;
  42:main_final_with_sync.c **** 
  43:main_final_with_sync.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  44:main_final_with_sync.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
  45:main_final_with_sync.c **** 
  46:main_final_with_sync.c **** void delay(unsigned int mseconds)
  47:main_final_with_sync.c **** {
  13              		.loc 1 47 0
  14              		.cfi_startproc
  15 0000 55       		pushq	%rbp
  16              		.cfi_def_cfa_offset 16
  17              		.cfi_offset 6, -16
  18 0001 4889E5   		movq	%rsp, %rbp
  19              		.cfi_def_cfa_register 6
  20 0004 53       		pushq	%rbx
  21 0005 4883EC28 		subq	$40, %rsp
  22              		.cfi_offset 3, -24
  23 0009 897DDC   		movl	%edi, -36(%rbp)
  48:main_final_with_sync.c **** 	clock_t goal = mseconds + clock();
  24              		.loc 1 48 0
  25 000c 8B5DDC   		movl	-36(%rbp), %ebx
  26 000f E8000000 		call	clock
  26      00
  27 0014 4801D8   		addq	%rbx, %rax
  28 0017 488945E8 		movq	%rax, -24(%rbp)
  49:main_final_with_sync.c **** 	while (goal > clock());
  29              		.loc 1 49 0
  30 001b 90       		nop
  31              	.L2:
  32              		.loc 1 49 0 is_stmt 0 discriminator 1
  33 001c E8000000 		call	clock
  33      00
  34 0021 483B45E8 		cmpq	-24(%rbp), %rax
  35 0025 7CF5     		jl	.L2
  50:main_final_with_sync.c **** }
  36              		.loc 1 50 0 is_stmt 1
  37 0027 90       		nop
  38 0028 4883C428 		addq	$40, %rsp
  39 002c 5B       		popq	%rbx
  40 002d 5D       		popq	%rbp
  41              		.cfi_def_cfa 7, 8
  42 002e C3       		ret
  43              		.cfi_endproc
  44              	.LFE4:
  46              		.globl	myxor
  48              	myxor:
  49              	.LFB5:
  51:main_final_with_sync.c **** 
  52:main_final_with_sync.c **** int myxor(int arr[])
  53:main_final_with_sync.c **** {
  50              		.loc 1 53 0
  51              		.cfi_startproc
  52 002f 55       		pushq	%rbp
  53              		.cfi_def_cfa_offset 16
  54              		.cfi_offset 6, -16
  55 0030 4889E5   		movq	%rsp, %rbp
  56              		.cfi_def_cfa_register 6
  57 0033 48897DE8 		movq	%rdi, -24(%rbp)
  54:main_final_with_sync.c **** 	int count = 0;
  58              		.loc 1 54 0
  59 0037 C745F800 		movl	$0, -8(%rbp)
  59      000000
  60              	.LBB2:
  55:main_final_with_sync.c **** 	for(int i=0; i<8; i++)
  61              		.loc 1 55 0
  62 003e C745FC00 		movl	$0, -4(%rbp)
  62      000000
  63 0045 EB23     		jmp	.L4
  64              	.L6:
  56:main_final_with_sync.c **** 		if(arr[i] == 1) count++;
  65              		.loc 1 56 0
  66 0047 8B45FC   		movl	-4(%rbp), %eax
  67 004a 4898     		cltq
  68 004c 488D1485 		leaq	0(,%rax,4), %rdx
  68      00000000 
  69 0054 488B45E8 		movq	-24(%rbp), %rax
  70 0058 4801D0   		addq	%rdx, %rax
  71 005b 8B00     		movl	(%rax), %eax
  72 005d 83F801   		cmpl	$1, %eax
  73 0060 7504     		jne	.L5
  74              		.loc 1 56 0 is_stmt 0 discriminator 1
  75 0062 8345F801 		addl	$1, -8(%rbp)
  76              	.L5:
  55:main_final_with_sync.c **** 	for(int i=0; i<8; i++)
  77              		.loc 1 55 0 is_stmt 1 discriminator 2
  78 0066 8345FC01 		addl	$1, -4(%rbp)
  79              	.L4:
  55:main_final_with_sync.c **** 	for(int i=0; i<8; i++)
  80              		.loc 1 55 0 is_stmt 0 discriminator 1
  81 006a 837DFC07 		cmpl	$7, -4(%rbp)
  82 006e 7ED7     		jle	.L6
  83              	.LBE2:
  57:main_final_with_sync.c **** 
  58:main_final_with_sync.c **** 	if(count%2 == 1) return 1;
  84              		.loc 1 58 0 is_stmt 1
  85 0070 8B45F8   		movl	-8(%rbp), %eax
  86 0073 99       		cltd
  87 0074 C1EA1F   		shrl	$31, %edx
  88 0077 01D0     		addl	%edx, %eax
  89 0079 83E001   		andl	$1, %eax
  90 007c 29D0     		subl	%edx, %eax
  91 007e 83F801   		cmpl	$1, %eax
  92 0081 7507     		jne	.L7
  93              		.loc 1 58 0 is_stmt 0 discriminator 1
  94 0083 B8010000 		movl	$1, %eax
  94      00
  95 0088 EB05     		jmp	.L8
  96              	.L7:
  59:main_final_with_sync.c **** 	else return 0;
  97              		.loc 1 59 0 is_stmt 1
  98 008a B8000000 		movl	$0, %eax
  98      00
  99              	.L8:
  60:main_final_with_sync.c **** }
 100              		.loc 1 60 0
 101 008f 5D       		popq	%rbp
 102              		.cfi_def_cfa 7, 8
 103 0090 C3       		ret
 104              		.cfi_endproc
 105              	.LFE5:
 107              		.globl	bitArrayToInt
 109              	bitArrayToInt:
 110              	.LFB6:
  61:main_final_with_sync.c **** 
  62:main_final_with_sync.c **** int bitArrayToInt(int arr[], int count)
  63:main_final_with_sync.c **** {
 111              		.loc 1 63 0
 112              		.cfi_startproc
 113 0091 55       		pushq	%rbp
 114              		.cfi_def_cfa_offset 16
 115              		.cfi_offset 6, -16
 116 0092 4889E5   		movq	%rsp, %rbp
 117              		.cfi_def_cfa_register 6
 118 0095 48897DE8 		movq	%rdi, -24(%rbp)
 119 0099 8975E4   		movl	%esi, -28(%rbp)
  64:main_final_with_sync.c **** 	int ret = 0;
 120              		.loc 1 64 0
 121 009c C745F400 		movl	$0, -12(%rbp)
 121      000000
 122              	.LBB3:
  65:main_final_with_sync.c **** 	int tmp;
  66:main_final_with_sync.c **** 	for (int i = 0; i < count; i++) {
 123              		.loc 1 66 0
 124 00a3 C745F800 		movl	$0, -8(%rbp)
 124      000000
 125 00aa EB35     		jmp	.L10
 126              	.L11:
  67:main_final_with_sync.c **** 		tmp = arr[count - i -1];
 127              		.loc 1 67 0 discriminator 3
 128 00ac 8B45E4   		movl	-28(%rbp), %eax
 129 00af 2B45F8   		subl	-8(%rbp), %eax
 130 00b2 4898     		cltq
 131 00b4 48C1E002 		salq	$2, %rax
 132 00b8 488D50FC 		leaq	-4(%rax), %rdx
 133 00bc 488B45E8 		movq	-24(%rbp), %rax
 134 00c0 4801D0   		addq	%rdx, %rax
 135 00c3 8B00     		movl	(%rax), %eax
 136 00c5 8945FC   		movl	%eax, -4(%rbp)
  68:main_final_with_sync.c **** 		ret |= tmp << (count - i - 1);
 137              		.loc 1 68 0 discriminator 3
 138 00c8 8B45E4   		movl	-28(%rbp), %eax
 139 00cb 2B45F8   		subl	-8(%rbp), %eax
 140 00ce 83E801   		subl	$1, %eax
 141 00d1 8B55FC   		movl	-4(%rbp), %edx
 142 00d4 89C1     		movl	%eax, %ecx
 143 00d6 D3E2     		sall	%cl, %edx
 144 00d8 89D0     		movl	%edx, %eax
 145 00da 0945F4   		orl	%eax, -12(%rbp)
  66:main_final_with_sync.c **** 		tmp = arr[count - i -1];
 146              		.loc 1 66 0 discriminator 3
 147 00dd 8345F801 		addl	$1, -8(%rbp)
 148              	.L10:
  66:main_final_with_sync.c **** 		tmp = arr[count - i -1];
 149              		.loc 1 66 0 is_stmt 0 discriminator 1
 150 00e1 8B45F8   		movl	-8(%rbp), %eax
 151 00e4 3B45E4   		cmpl	-28(%rbp), %eax
 152 00e7 7CC3     		jl	.L11
 153              	.LBE3:
  69:main_final_with_sync.c **** 	}
  70:main_final_with_sync.c **** 	return ret;
 154              		.loc 1 70 0 is_stmt 1
 155 00e9 8B45F4   		movl	-12(%rbp), %eax
  71:main_final_with_sync.c **** }
 156              		.loc 1 71 0
 157 00ec 5D       		popq	%rbp
 158              		.cfi_def_cfa 7, 8
 159 00ed C3       		ret
 160              		.cfi_endproc
 161              	.LFE6:
 163              		.globl	BinTouint8
 165              	BinTouint8:
 166              	.LFB7:
  72:main_final_with_sync.c **** 
  73:main_final_with_sync.c **** void BinTouint8(uint8 bin[], int arr[])
  74:main_final_with_sync.c **** {
 167              		.loc 1 74 0
 168              		.cfi_startproc
 169 00ee 55       		pushq	%rbp
 170              		.cfi_def_cfa_offset 16
 171              		.cfi_offset 6, -16
 172 00ef 4889E5   		movq	%rsp, %rbp
 173              		.cfi_def_cfa_register 6
 174 00f2 53       		pushq	%rbx
 175 00f3 4881ECB8 		subq	$184, %rsp
 175      000000
 176              		.cfi_offset 3, -24
 177 00fa 4889BD48 		movq	%rdi, -184(%rbp)
 177      FFFFFF
 178 0101 4889B540 		movq	%rsi, -192(%rbp)
 178      FFFFFF
 179              		.loc 1 74 0
 180 0108 64488B04 		movq	%fs:40, %rax
 180      25280000 
 180      00
 181 0111 488945E8 		movq	%rax, -24(%rbp)
 182 0115 31C0     		xorl	%eax, %eax
 183              	.LBB4:
  75:main_final_with_sync.c **** 	int arr0[8], arr1[8], arr2[8], arr3[8];
  76:main_final_with_sync.c **** 	for (int i = 0; i < 8; ++i)
 184              		.loc 1 76 0
 185 0117 C7855CFF 		movl	$0, -164(%rbp)
 185      FFFF0000 
 185      0000
 186 0121 E9B60000 		jmp	.L14
 186      00
 187              	.L15:
  77:main_final_with_sync.c **** 	{
  78:main_final_with_sync.c **** 		arr0[i] = arr[i];
 188              		.loc 1 78 0 discriminator 3
 189 0126 8B855CFF 		movl	-164(%rbp), %eax
 189      FFFF
 190 012c 4898     		cltq
 191 012e 488D1485 		leaq	0(,%rax,4), %rdx
 191      00000000 
 192 0136 488B8540 		movq	-192(%rbp), %rax
 192      FFFFFF
 193 013d 4801D0   		addq	%rdx, %rax
 194 0140 8B10     		movl	(%rax), %edx
 195 0142 8B855CFF 		movl	-164(%rbp), %eax
 195      FFFF
 196 0148 4898     		cltq
 197 014a 89948560 		movl	%edx, -160(%rbp,%rax,4)
 197      FFFFFF
  79:main_final_with_sync.c **** 		arr1[i] = arr[i+8];
 198              		.loc 1 79 0 discriminator 3
 199 0151 8B855CFF 		movl	-164(%rbp), %eax
 199      FFFF
 200 0157 4898     		cltq
 201 0159 4883C008 		addq	$8, %rax
 202 015d 488D1485 		leaq	0(,%rax,4), %rdx
 202      00000000 
 203 0165 488B8540 		movq	-192(%rbp), %rax
 203      FFFFFF
 204 016c 4801D0   		addq	%rdx, %rax
 205 016f 8B10     		movl	(%rax), %edx
 206 0171 8B855CFF 		movl	-164(%rbp), %eax
 206      FFFF
 207 0177 4898     		cltq
 208 0179 89548580 		movl	%edx, -128(%rbp,%rax,4)
  80:main_final_with_sync.c **** 		arr2[i] = arr[i+16];
 209              		.loc 1 80 0 discriminator 3
 210 017d 8B855CFF 		movl	-164(%rbp), %eax
 210      FFFF
 211 0183 4898     		cltq
 212 0185 4883C010 		addq	$16, %rax
 213 0189 488D1485 		leaq	0(,%rax,4), %rdx
 213      00000000 
 214 0191 488B8540 		movq	-192(%rbp), %rax
 214      FFFFFF
 215 0198 4801D0   		addq	%rdx, %rax
 216 019b 8B10     		movl	(%rax), %edx
 217 019d 8B855CFF 		movl	-164(%rbp), %eax
 217      FFFF
 218 01a3 4898     		cltq
 219 01a5 895485A0 		movl	%edx, -96(%rbp,%rax,4)
  81:main_final_with_sync.c **** 		arr3[i] = arr[i+24];
 220              		.loc 1 81 0 discriminator 3
 221 01a9 8B855CFF 		movl	-164(%rbp), %eax
 221      FFFF
 222 01af 4898     		cltq
 223 01b1 4883C018 		addq	$24, %rax
 224 01b5 488D1485 		leaq	0(,%rax,4), %rdx
 224      00000000 
 225 01bd 488B8540 		movq	-192(%rbp), %rax
 225      FFFFFF
 226 01c4 4801D0   		addq	%rdx, %rax
 227 01c7 8B10     		movl	(%rax), %edx
 228 01c9 8B855CFF 		movl	-164(%rbp), %eax
 228      FFFF
 229 01cf 4898     		cltq
 230 01d1 895485C0 		movl	%edx, -64(%rbp,%rax,4)
  76:main_final_with_sync.c **** 	{
 231              		.loc 1 76 0 discriminator 3
 232 01d5 83855CFF 		addl	$1, -164(%rbp)
 232      FFFF01
 233              	.L14:
  76:main_final_with_sync.c **** 	{
 234              		.loc 1 76 0 is_stmt 0 discriminator 1
 235 01dc 83BD5CFF 		cmpl	$7, -164(%rbp)
 235      FFFF07
 236 01e3 0F8E3DFF 		jle	.L15
 236      FFFF
 237              	.LBE4:
  82:main_final_with_sync.c **** 	}
  83:main_final_with_sync.c **** 	
  84:main_final_with_sync.c **** 	bin[0] = bitArrayToInt(arr0, 8);
 238              		.loc 1 84 0 is_stmt 1
 239 01e9 488D8560 		leaq	-160(%rbp), %rax
 239      FFFFFF
 240 01f0 BE080000 		movl	$8, %esi
 240      00
 241 01f5 4889C7   		movq	%rax, %rdi
 242 01f8 E8000000 		call	bitArrayToInt
 242      00
 243 01fd 89C2     		movl	%eax, %edx
 244 01ff 488B8548 		movq	-184(%rbp), %rax
 244      FFFFFF
 245 0206 8810     		movb	%dl, (%rax)
  85:main_final_with_sync.c **** 	bin[1] = bitArrayToInt(arr1, 8);
 246              		.loc 1 85 0
 247 0208 488B8548 		movq	-184(%rbp), %rax
 247      FFFFFF
 248 020f 488D5801 		leaq	1(%rax), %rbx
 249 0213 488D4580 		leaq	-128(%rbp), %rax
 250 0217 BE080000 		movl	$8, %esi
 250      00
 251 021c 4889C7   		movq	%rax, %rdi
 252 021f E8000000 		call	bitArrayToInt
 252      00
 253 0224 8803     		movb	%al, (%rbx)
  86:main_final_with_sync.c **** 	bin[2] = bitArrayToInt(arr2, 8);
 254              		.loc 1 86 0
 255 0226 488B8548 		movq	-184(%rbp), %rax
 255      FFFFFF
 256 022d 488D5802 		leaq	2(%rax), %rbx
 257 0231 488D45A0 		leaq	-96(%rbp), %rax
 258 0235 BE080000 		movl	$8, %esi
 258      00
 259 023a 4889C7   		movq	%rax, %rdi
 260 023d E8000000 		call	bitArrayToInt
 260      00
 261 0242 8803     		movb	%al, (%rbx)
  87:main_final_with_sync.c **** 	bin[3] = bitArrayToInt(arr3, 8);
 262              		.loc 1 87 0
 263 0244 488B8548 		movq	-184(%rbp), %rax
 263      FFFFFF
 264 024b 488D5803 		leaq	3(%rax), %rbx
 265 024f 488D45C0 		leaq	-64(%rbp), %rax
 266 0253 BE080000 		movl	$8, %esi
 266      00
 267 0258 4889C7   		movq	%rax, %rdi
 268 025b E8000000 		call	bitArrayToInt
 268      00
 269 0260 8803     		movb	%al, (%rbx)
  88:main_final_with_sync.c **** }
 270              		.loc 1 88 0
 271 0262 90       		nop
 272 0263 488B45E8 		movq	-24(%rbp), %rax
 273 0267 64483304 		xorq	%fs:40, %rax
 273      25280000 
 273      00
 274 0270 7405     		je	.L16
 275 0272 E8000000 		call	__stack_chk_fail
 275      00
 276              	.L16:
 277 0277 4881C4B8 		addq	$184, %rsp
 277      000000
 278 027e 5B       		popq	%rbx
 279 027f 5D       		popq	%rbp
 280              		.cfi_def_cfa 7, 8
 281 0280 C3       		ret
 282              		.cfi_endproc
 283              	.LFE7:
 285              		.globl	decToBinary
 287              	decToBinary:
 288              	.LFB8:
  89:main_final_with_sync.c **** 
  90:main_final_with_sync.c **** void decToBinary(int n, int arr[], int count)
  91:main_final_with_sync.c **** {
 289              		.loc 1 91 0
 290              		.cfi_startproc
 291 0281 55       		pushq	%rbp
 292              		.cfi_def_cfa_offset 16
 293              		.cfi_offset 6, -16
 294 0282 4889E5   		movq	%rsp, %rbp
 295              		.cfi_def_cfa_register 6
 296 0285 53       		pushq	%rbx
 297 0286 4883EC48 		subq	$72, %rsp
 298              		.cfi_offset 3, -24
 299 028a 897DBC   		movl	%edi, -68(%rbp)
 300 028d 488975B0 		movq	%rsi, -80(%rbp)
 301 0291 8955B8   		movl	%edx, -72(%rbp)
 302              		.loc 1 91 0
 303 0294 64488B04 		movq	%fs:40, %rax
 303      25280000 
 303      00
 304 029d 488945E8 		movq	%rax, -24(%rbp)
 305 02a1 31C0     		xorl	%eax, %eax
 306 02a3 4889E0   		movq	%rsp, %rax
 307 02a6 4889C6   		movq	%rax, %rsi
  92:main_final_with_sync.c **** 	int binaryNum[count];
 308              		.loc 1 92 0
 309 02a9 8B45B8   		movl	-72(%rbp), %eax
 310 02ac 4863D0   		movslq	%eax, %rdx
 311 02af 4883EA01 		subq	$1, %rdx
 312 02b3 488955D8 		movq	%rdx, -40(%rbp)
 313 02b7 4863D0   		movslq	%eax, %rdx
 314 02ba 4989D0   		movq	%rdx, %r8
 315 02bd 41B90000 		movl	$0, %r9d
 315      0000
 316 02c3 4863D0   		movslq	%eax, %rdx
 317 02c6 4889D1   		movq	%rdx, %rcx
 318 02c9 BB000000 		movl	$0, %ebx
 318      00
 319 02ce 4898     		cltq
 320 02d0 48C1E002 		salq	$2, %rax
 321 02d4 488D5003 		leaq	3(%rax), %rdx
 322 02d8 B8100000 		movl	$16, %eax
 322      00
 323 02dd 4883E801 		subq	$1, %rax
 324 02e1 4801D0   		addq	%rdx, %rax
 325 02e4 BB100000 		movl	$16, %ebx
 325      00
 326 02e9 BA000000 		movl	$0, %edx
 326      00
 327 02ee 48F7F3   		divq	%rbx
 328 02f1 486BC010 		imulq	$16, %rax, %rax
 329 02f5 4829C4   		subq	%rax, %rsp
 330 02f8 4889E0   		movq	%rsp, %rax
 331 02fb 4883C003 		addq	$3, %rax
 332 02ff 48C1E802 		shrq	$2, %rax
 333 0303 48C1E002 		salq	$2, %rax
 334 0307 488945E0 		movq	%rax, -32(%rbp)
 335              	.LBB5:
  93:main_final_with_sync.c **** 	for (int i = 0; i < count; ++i)
 336              		.loc 1 93 0
 337 030b C745CC00 		movl	$0, -52(%rbp)
 337      000000
 338 0312 EB15     		jmp	.L18
 339              	.L19:
  94:main_final_with_sync.c **** 		binaryNum[i] = 0;
 340              		.loc 1 94 0 discriminator 3
 341 0314 488B45E0 		movq	-32(%rbp), %rax
 342 0318 8B55CC   		movl	-52(%rbp), %edx
 343 031b 4863D2   		movslq	%edx, %rdx
 344 031e C7049000 		movl	$0, (%rax,%rdx,4)
 344      000000
  93:main_final_with_sync.c **** 	for (int i = 0; i < count; ++i)
 345              		.loc 1 93 0 discriminator 3
 346 0325 8345CC01 		addl	$1, -52(%rbp)
 347              	.L18:
  93:main_final_with_sync.c **** 	for (int i = 0; i < count; ++i)
 348              		.loc 1 93 0 is_stmt 0 discriminator 1
 349 0329 8B45CC   		movl	-52(%rbp), %eax
 350 032c 3B45B8   		cmpl	-72(%rbp), %eax
 351 032f 7CE3     		jl	.L19
 352              	.LBE5:
  95:main_final_with_sync.c **** 
  96:main_final_with_sync.c **** 	int i = 0;
 353              		.loc 1 96 0 is_stmt 1
 354 0331 C745D000 		movl	$0, -48(%rbp)
 354      000000
  97:main_final_with_sync.c **** 	while (n > 0) {
 355              		.loc 1 97 0
 356 0338 EB30     		jmp	.L20
 357              	.L21:
  98:main_final_with_sync.c **** 		binaryNum[i] = n % 2;
 358              		.loc 1 98 0
 359 033a 8B45BC   		movl	-68(%rbp), %eax
 360 033d 99       		cltd
 361 033e C1EA1F   		shrl	$31, %edx
 362 0341 01D0     		addl	%edx, %eax
 363 0343 83E001   		andl	$1, %eax
 364 0346 29D0     		subl	%edx, %eax
 365 0348 89C1     		movl	%eax, %ecx
 366 034a 488B45E0 		movq	-32(%rbp), %rax
 367 034e 8B55D0   		movl	-48(%rbp), %edx
 368 0351 4863D2   		movslq	%edx, %rdx
 369 0354 890C90   		movl	%ecx, (%rax,%rdx,4)
  99:main_final_with_sync.c **** 		n = n / 2;
 370              		.loc 1 99 0
 371 0357 8B45BC   		movl	-68(%rbp), %eax
 372 035a 89C2     		movl	%eax, %edx
 373 035c C1EA1F   		shrl	$31, %edx
 374 035f 01D0     		addl	%edx, %eax
 375 0361 D1F8     		sarl	%eax
 376 0363 8945BC   		movl	%eax, -68(%rbp)
 100:main_final_with_sync.c **** 		i++;
 377              		.loc 1 100 0
 378 0366 8345D001 		addl	$1, -48(%rbp)
 379              	.L20:
  97:main_final_with_sync.c **** 		binaryNum[i] = n % 2;
 380              		.loc 1 97 0
 381 036a 837DBC00 		cmpl	$0, -68(%rbp)
 382 036e 7FCA     		jg	.L21
 383              	.LBB6:
 101:main_final_with_sync.c **** 	}
 102:main_final_with_sync.c **** 
 103:main_final_with_sync.c ****     // printing binary array in reverse order
 104:main_final_with_sync.c **** 	for (int i=0; i<count; i++)
 384              		.loc 1 104 0
 385 0370 C745D400 		movl	$0, -44(%rbp)
 385      000000
 386 0377 EB28     		jmp	.L22
 387              	.L23:
 105:main_final_with_sync.c **** 		arr[i] = binaryNum[i];
 388              		.loc 1 105 0 discriminator 3
 389 0379 8B45D4   		movl	-44(%rbp), %eax
 390 037c 4898     		cltq
 391 037e 488D1485 		leaq	0(,%rax,4), %rdx
 391      00000000 
 392 0386 488B45B0 		movq	-80(%rbp), %rax
 393 038a 488D0C02 		leaq	(%rdx,%rax), %rcx
 394 038e 488B45E0 		movq	-32(%rbp), %rax
 395 0392 8B55D4   		movl	-44(%rbp), %edx
 396 0395 4863D2   		movslq	%edx, %rdx
 397 0398 8B0490   		movl	(%rax,%rdx,4), %eax
 398 039b 8901     		movl	%eax, (%rcx)
 104:main_final_with_sync.c **** 		arr[i] = binaryNum[i];
 399              		.loc 1 104 0 discriminator 3
 400 039d 8345D401 		addl	$1, -44(%rbp)
 401              	.L22:
 104:main_final_with_sync.c **** 		arr[i] = binaryNum[i];
 402              		.loc 1 104 0 is_stmt 0 discriminator 1
 403 03a1 8B45D4   		movl	-44(%rbp), %eax
 404 03a4 3B45B8   		cmpl	-72(%rbp), %eax
 405 03a7 7CD0     		jl	.L23
 406              	.LBE6:
 407 03a9 4889F4   		movq	%rsi, %rsp
 106:main_final_with_sync.c **** }
 408              		.loc 1 106 0 is_stmt 1
 409 03ac 90       		nop
 410 03ad 488B45E8 		movq	-24(%rbp), %rax
 411 03b1 64483304 		xorq	%fs:40, %rax
 411      25280000 
 411      00
 412 03ba 7405     		je	.L24
 413 03bc E8000000 		call	__stack_chk_fail
 413      00
 414              	.L24:
 415 03c1 488B5DF8 		movq	-8(%rbp), %rbx
 416 03c5 C9       		leave
 417              		.cfi_def_cfa 7, 8
 418 03c6 C3       		ret
 419              		.cfi_endproc
 420              	.LFE8:
 422              		.globl	encrypter
 424              	encrypter:
 425              	.LFB9:
 107:main_final_with_sync.c **** 
 108:main_final_with_sync.c **** void encrypter(int P[], int K[], int bin[])
 109:main_final_with_sync.c **** {
 426              		.loc 1 109 0
 427              		.cfi_startproc
 428 03c7 55       		pushq	%rbp
 429              		.cfi_def_cfa_offset 16
 430              		.cfi_offset 6, -16
 431 03c8 4889E5   		movq	%rsp, %rbp
 432              		.cfi_def_cfa_register 6
 433 03cb 4881EC60 		subq	$608, %rsp
 433      020000
 434 03d2 4889BDB8 		movq	%rdi, -584(%rbp)
 434      FDFFFF
 435 03d9 4889B5B0 		movq	%rsi, -592(%rbp)
 435      FDFFFF
 436 03e0 488995A8 		movq	%rdx, -600(%rbp)
 436      FDFFFF
 437              		.loc 1 109 0
 438 03e7 64488B04 		movq	%fs:40, %rax
 438      25280000 
 438      00
 439 03f0 488945F8 		movq	%rax, -8(%rbp)
 440 03f4 31C0     		xorl	%eax, %eax
 110:main_final_with_sync.c ****   //int plain_text[32];
 111:main_final_with_sync.c **** 	int key[32];
 112:main_final_with_sync.c **** 	int cipher_text[32];
 113:main_final_with_sync.c **** 	int T[4];
 114:main_final_with_sync.c **** 	int count1=0;
 441              		.loc 1 114 0
 442 03f6 C785C0FD 		movl	$0, -576(%rbp)
 442      FFFF0000 
 442      0000
 443              	.LBB7:
 115:main_final_with_sync.c **** 
 116:main_final_with_sync.c **** 	for (int i = 0; i < 32; ++i)
 444              		.loc 1 116 0
 445 0400 C785C4FD 		movl	$0, -572(%rbp)
 445      FFFF0000 
 445      0000
 446 040a E9850000 		jmp	.L26
 446      00
 447              	.L28:
 117:main_final_with_sync.c **** 	{
 118:main_final_with_sync.c **** 		cipher_text[i] = P[i];
 448              		.loc 1 118 0
 449 040f 8B85C4FD 		movl	-572(%rbp), %eax
 449      FFFF
 450 0415 4898     		cltq
 451 0417 488D1485 		leaq	0(,%rax,4), %rdx
 451      00000000 
 452 041f 488B85B8 		movq	-584(%rbp), %rax
 452      FDFFFF
 453 0426 4801D0   		addq	%rdx, %rax
 454 0429 8B10     		movl	(%rax), %edx
 455 042b 8B85C4FD 		movl	-572(%rbp), %eax
 455      FFFF
 456 0431 4898     		cltq
 457 0433 899485F0 		movl	%edx, -272(%rbp,%rax,4)
 457      FEFFFF
 119:main_final_with_sync.c **** 		key[i] = K[i];
 458              		.loc 1 119 0
 459 043a 8B85C4FD 		movl	-572(%rbp), %eax
 459      FFFF
 460 0440 4898     		cltq
 461 0442 488D1485 		leaq	0(,%rax,4), %rdx
 461      00000000 
 462 044a 488B85B0 		movq	-592(%rbp), %rax
 462      FDFFFF
 463 0451 4801D0   		addq	%rdx, %rax
 464 0454 8B10     		movl	(%rax), %edx
 465 0456 8B85C4FD 		movl	-572(%rbp), %eax
 465      FFFF
 466 045c 4898     		cltq
 467 045e 89948570 		movl	%edx, -400(%rbp,%rax,4)
 467      FEFFFF
 120:main_final_with_sync.c **** 		if(K[i] == 1) 
 468              		.loc 1 120 0
 469 0465 8B85C4FD 		movl	-572(%rbp), %eax
 469      FFFF
 470 046b 4898     		cltq
 471 046d 488D1485 		leaq	0(,%rax,4), %rdx
 471      00000000 
 472 0475 488B85B0 		movq	-592(%rbp), %rax
 472      FDFFFF
 473 047c 4801D0   		addq	%rdx, %rax
 474 047f 8B00     		movl	(%rax), %eax
 475 0481 83F801   		cmpl	$1, %eax
 476 0484 7507     		jne	.L27
 121:main_final_with_sync.c **** 			count1++;
 477              		.loc 1 121 0
 478 0486 8385C0FD 		addl	$1, -576(%rbp)
 478      FFFF01
 479              	.L27:
 116:main_final_with_sync.c **** 	{
 480              		.loc 1 116 0 discriminator 2
 481 048d 8385C4FD 		addl	$1, -572(%rbp)
 481      FFFF01
 482              	.L26:
 116:main_final_with_sync.c **** 	{
 483              		.loc 1 116 0 is_stmt 0 discriminator 1
 484 0494 83BDC4FD 		cmpl	$31, -572(%rbp)
 484      FFFF1F
 485 049b 0F8E6EFF 		jle	.L28
 485      FFFF
 486              	.LBE7:
 487              	.LBB8:
 122:main_final_with_sync.c **** 	}
 123:main_final_with_sync.c **** 
 124:main_final_with_sync.c **** 	int arr0[8];
 125:main_final_with_sync.c **** 	int arr1[8];
 126:main_final_with_sync.c **** 	int arr2[8];
 127:main_final_with_sync.c **** 	int arr3[8];
 128:main_final_with_sync.c **** 
 129:main_final_with_sync.c **** 	for(int i=0; i<8; i++)
 488              		.loc 1 129 0 is_stmt 1
 489 04a1 C785C8FD 		movl	$0, -568(%rbp)
 489      FFFF0000 
 489      0000
 490 04ab E9940000 		jmp	.L29
 490      00
 491              	.L30:
 130:main_final_with_sync.c **** 	{
 131:main_final_with_sync.c **** 		arr0[i] = key[4*i];
 492              		.loc 1 131 0 discriminator 3
 493 04b0 8B85C8FD 		movl	-568(%rbp), %eax
 493      FFFF
 494 04b6 C1E002   		sall	$2, %eax
 495 04b9 4898     		cltq
 496 04bb 8B948570 		movl	-400(%rbp,%rax,4), %edx
 496      FEFFFF
 497 04c2 8B85C8FD 		movl	-568(%rbp), %eax
 497      FFFF
 498 04c8 4898     		cltq
 499 04ca 899485F0 		movl	%edx, -528(%rbp,%rax,4)
 499      FDFFFF
 132:main_final_with_sync.c **** 		arr1[i] = key[4*i+1];
 500              		.loc 1 132 0 discriminator 3
 501 04d1 8B85C8FD 		movl	-568(%rbp), %eax
 501      FFFF
 502 04d7 C1E002   		sall	$2, %eax
 503 04da 83C001   		addl	$1, %eax
 504 04dd 4898     		cltq
 505 04df 8B948570 		movl	-400(%rbp,%rax,4), %edx
 505      FEFFFF
 506 04e6 8B85C8FD 		movl	-568(%rbp), %eax
 506      FFFF
 507 04ec 4898     		cltq
 508 04ee 89948510 		movl	%edx, -496(%rbp,%rax,4)
 508      FEFFFF
 133:main_final_with_sync.c **** 		arr2[i] = key[4*i+2];
 509              		.loc 1 133 0 discriminator 3
 510 04f5 8B85C8FD 		movl	-568(%rbp), %eax
 510      FFFF
 511 04fb C1E002   		sall	$2, %eax
 512 04fe 83C002   		addl	$2, %eax
 513 0501 4898     		cltq
 514 0503 8B948570 		movl	-400(%rbp,%rax,4), %edx
 514      FEFFFF
 515 050a 8B85C8FD 		movl	-568(%rbp), %eax
 515      FFFF
 516 0510 4898     		cltq
 517 0512 89948530 		movl	%edx, -464(%rbp,%rax,4)
 517      FEFFFF
 134:main_final_with_sync.c **** 		arr3[i] = key[4*i+3];
 518              		.loc 1 134 0 discriminator 3
 519 0519 8B85C8FD 		movl	-568(%rbp), %eax
 519      FFFF
 520 051f C1E002   		sall	$2, %eax
 521 0522 83C003   		addl	$3, %eax
 522 0525 4898     		cltq
 523 0527 8B948570 		movl	-400(%rbp,%rax,4), %edx
 523      FEFFFF
 524 052e 8B85C8FD 		movl	-568(%rbp), %eax
 524      FFFF
 525 0534 4898     		cltq
 526 0536 89948550 		movl	%edx, -432(%rbp,%rax,4)
 526      FEFFFF
 129:main_final_with_sync.c **** 	{
 527              		.loc 1 129 0 discriminator 3
 528 053d 8385C8FD 		addl	$1, -568(%rbp)
 528      FFFF01
 529              	.L29:
 129:main_final_with_sync.c **** 	{
 530              		.loc 1 129 0 is_stmt 0 discriminator 1
 531 0544 83BDC8FD 		cmpl	$7, -568(%rbp)
 531      FFFF07
 532 054b 0F8E5FFF 		jle	.L30
 532      FFFF
 533              	.LBE8:
 135:main_final_with_sync.c **** 	}
 136:main_final_with_sync.c **** 
 137:main_final_with_sync.c **** 	T[0] = myxor(arr0);
 534              		.loc 1 137 0 is_stmt 1
 535 0551 488D85F0 		leaq	-528(%rbp), %rax
 535      FDFFFF
 536 0558 4889C7   		movq	%rax, %rdi
 537 055b E8000000 		call	myxor
 537      00
 538 0560 8985E0FD 		movl	%eax, -544(%rbp)
 538      FFFF
 138:main_final_with_sync.c **** 	T[1] = myxor(arr1);
 539              		.loc 1 138 0
 540 0566 488D8510 		leaq	-496(%rbp), %rax
 540      FEFFFF
 541 056d 4889C7   		movq	%rax, %rdi
 542 0570 E8000000 		call	myxor
 542      00
 543 0575 8985E4FD 		movl	%eax, -540(%rbp)
 543      FFFF
 139:main_final_with_sync.c **** 	T[2] = myxor(arr2);
 544              		.loc 1 139 0
 545 057b 488D8530 		leaq	-464(%rbp), %rax
 545      FEFFFF
 546 0582 4889C7   		movq	%rax, %rdi
 547 0585 E8000000 		call	myxor
 547      00
 548 058a 8985E8FD 		movl	%eax, -536(%rbp)
 548      FFFF
 140:main_final_with_sync.c **** 	T[3] = myxor(arr3);
 549              		.loc 1 140 0
 550 0590 488D8550 		leaq	-432(%rbp), %rax
 550      FEFFFF
 551 0597 4889C7   		movq	%rax, %rdi
 552 059a E8000000 		call	myxor
 552      00
 553 059f 8985ECFD 		movl	%eax, -532(%rbp)
 553      FFFF
 141:main_final_with_sync.c **** 
 142:main_final_with_sync.c **** 	int T32[32];
 143:main_final_with_sync.c **** 	int dec = bitArrayToInt(T, 4);
 554              		.loc 1 143 0
 555 05a5 488D85E0 		leaq	-544(%rbp), %rax
 555      FDFFFF
 556 05ac BE040000 		movl	$4, %esi
 556      00
 557 05b1 4889C7   		movq	%rax, %rdi
 558 05b4 E8000000 		call	bitArrayToInt
 558      00
 559 05b9 8985CCFD 		movl	%eax, -564(%rbp)
 559      FFFF
 560              	.LBB9:
 144:main_final_with_sync.c **** 
 145:main_final_with_sync.c **** 	for (int i = 0; i < count1; ++i)
 561              		.loc 1 145 0
 562 05bf C785D0FD 		movl	$0, -560(%rbp)
 562      FFFF0000 
 562      0000
 563 05c9 E90D0100 		jmp	.L31
 563      00
 564              	.L37:
 565              	.LBB10:
 146:main_final_with_sync.c **** 	{ 
 147:main_final_with_sync.c **** 		for (int j = 0; j < 8; j++)
 566              		.loc 1 147 0
 567 05ce C785D4FD 		movl	$0, -556(%rbp)
 567      FFFF0000 
 567      0000
 568 05d8 EB70     		jmp	.L32
 569              	.L33:
 148:main_final_with_sync.c **** 		{
 149:main_final_with_sync.c **** 			T32[4*j] = T[0];
 570              		.loc 1 149 0 discriminator 3
 571 05da 8B85D4FD 		movl	-556(%rbp), %eax
 571      FFFF
 572 05e0 C1E002   		sall	$2, %eax
 573 05e3 8B95E0FD 		movl	-544(%rbp), %edx
 573      FFFF
 574 05e9 4898     		cltq
 575 05eb 89948570 		movl	%edx, -144(%rbp,%rax,4)
 575      FFFFFF
 150:main_final_with_sync.c **** 			T32[4*j+1] = T[1];
 576              		.loc 1 150 0 discriminator 3
 577 05f2 8B85D4FD 		movl	-556(%rbp), %eax
 577      FFFF
 578 05f8 C1E002   		sall	$2, %eax
 579 05fb 83C001   		addl	$1, %eax
 580 05fe 8B95E4FD 		movl	-540(%rbp), %edx
 580      FFFF
 581 0604 4898     		cltq
 582 0606 89948570 		movl	%edx, -144(%rbp,%rax,4)
 582      FFFFFF
 151:main_final_with_sync.c **** 			T32[4*j+2] = T[2];
 583              		.loc 1 151 0 discriminator 3
 584 060d 8B85D4FD 		movl	-556(%rbp), %eax
 584      FFFF
 585 0613 C1E002   		sall	$2, %eax
 586 0616 83C002   		addl	$2, %eax
 587 0619 8B95E8FD 		movl	-536(%rbp), %edx
 587      FFFF
 588 061f 4898     		cltq
 589 0621 89948570 		movl	%edx, -144(%rbp,%rax,4)
 589      FFFFFF
 152:main_final_with_sync.c **** 			T32[4*j+3] = T[3];
 590              		.loc 1 152 0 discriminator 3
 591 0628 8B85D4FD 		movl	-556(%rbp), %eax
 591      FFFF
 592 062e C1E002   		sall	$2, %eax
 593 0631 83C003   		addl	$3, %eax
 594 0634 8B95ECFD 		movl	-532(%rbp), %edx
 594      FFFF
 595 063a 4898     		cltq
 596 063c 89948570 		movl	%edx, -144(%rbp,%rax,4)
 596      FFFFFF
 147:main_final_with_sync.c **** 		{
 597              		.loc 1 147 0 discriminator 3
 598 0643 8385D4FD 		addl	$1, -556(%rbp)
 598      FFFF01
 599              	.L32:
 147:main_final_with_sync.c **** 		{
 600              		.loc 1 147 0 is_stmt 0 discriminator 1
 601 064a 83BDD4FD 		cmpl	$7, -556(%rbp)
 601      FFFF07
 602 0651 7E87     		jle	.L33
 603              	.LBE10:
 604              	.LBB11:
 153:main_final_with_sync.c **** 		}
 154:main_final_with_sync.c **** 
 155:main_final_with_sync.c **** 		for (int j = 0; j < 32; ++j)
 605              		.loc 1 155 0 is_stmt 1
 606 0653 C785D8FD 		movl	$0, -552(%rbp)
 606      FFFF0000 
 606      0000
 607 065d EB36     		jmp	.L34
 608              	.L35:
 156:main_final_with_sync.c **** 			cipher_text[j] = cipher_text[j] ^ T32[j];
 609              		.loc 1 156 0 discriminator 3
 610 065f 8B85D8FD 		movl	-552(%rbp), %eax
 610      FFFF
 611 0665 4898     		cltq
 612 0667 8B9485F0 		movl	-272(%rbp,%rax,4), %edx
 612      FEFFFF
 613 066e 8B85D8FD 		movl	-552(%rbp), %eax
 613      FFFF
 614 0674 4898     		cltq
 615 0676 8B848570 		movl	-144(%rbp,%rax,4), %eax
 615      FFFFFF
 616 067d 31C2     		xorl	%eax, %edx
 617 067f 8B85D8FD 		movl	-552(%rbp), %eax
 617      FFFF
 618 0685 4898     		cltq
 619 0687 899485F0 		movl	%edx, -272(%rbp,%rax,4)
 619      FEFFFF
 155:main_final_with_sync.c **** 			cipher_text[j] = cipher_text[j] ^ T32[j];
 620              		.loc 1 155 0 discriminator 3
 621 068e 8385D8FD 		addl	$1, -552(%rbp)
 621      FFFF01
 622              	.L34:
 155:main_final_with_sync.c **** 			cipher_text[j] = cipher_text[j] ^ T32[j];
 623              		.loc 1 155 0 is_stmt 0 discriminator 1
 624 0695 83BDD8FD 		cmpl	$31, -552(%rbp)
 624      FFFF1F
 625 069c 7EC1     		jle	.L35
 626              	.LBE11:
 157:main_final_with_sync.c **** 
 158:main_final_with_sync.c ****     // for (int j = 0; j < 32; ++j)
 159:main_final_with_sync.c ****     //  printf("%d", cipher_text[j]);
 160:main_final_with_sync.c ****     // printf("\n");
 161:main_final_with_sync.c **** 
 162:main_final_with_sync.c **** 		dec++;
 627              		.loc 1 162 0 is_stmt 1
 628 069e 8385CCFD 		addl	$1, -564(%rbp)
 628      FFFF01
 163:main_final_with_sync.c **** 		if(dec==16) dec = 0;
 629              		.loc 1 163 0
 630 06a5 83BDCCFD 		cmpl	$16, -564(%rbp)
 630      FFFF10
 631 06ac 750A     		jne	.L36
 632              		.loc 1 163 0 is_stmt 0 discriminator 1
 633 06ae C785CCFD 		movl	$0, -564(%rbp)
 633      FFFF0000 
 633      0000
 634              	.L36:
 164:main_final_with_sync.c **** 		decToBinary(dec, T, 4);
 635              		.loc 1 164 0 is_stmt 1 discriminator 2
 636 06b8 488D8DE0 		leaq	-544(%rbp), %rcx
 636      FDFFFF
 637 06bf 8B85CCFD 		movl	-564(%rbp), %eax
 637      FFFF
 638 06c5 BA040000 		movl	$4, %edx
 638      00
 639 06ca 4889CE   		movq	%rcx, %rsi
 640 06cd 89C7     		movl	%eax, %edi
 641 06cf E8000000 		call	decToBinary
 641      00
 145:main_final_with_sync.c **** 	{ 
 642              		.loc 1 145 0 discriminator 2
 643 06d4 8385D0FD 		addl	$1, -560(%rbp)
 643      FFFF01
 644              	.L31:
 145:main_final_with_sync.c **** 	{ 
 645              		.loc 1 145 0 is_stmt 0 discriminator 1
 646 06db 8B85D0FD 		movl	-560(%rbp), %eax
 646      FFFF
 647 06e1 3B85C0FD 		cmpl	-576(%rbp), %eax
 647      FFFF
 648 06e7 0F8CE1FE 		jl	.L37
 648      FFFF
 649              	.LBE9:
 650              	.LBB12:
 165:main_final_with_sync.c **** 	}
 166:main_final_with_sync.c **** 
 167:main_final_with_sync.c **** 	for (int i = 0; i < 32; ++i)
 651              		.loc 1 167 0 is_stmt 1
 652 06ed C785DCFD 		movl	$0, -548(%rbp)
 652      FFFF0000 
 652      0000
 653 06f7 EB32     		jmp	.L38
 654              	.L39:
 168:main_final_with_sync.c **** 		bin[i] = cipher_text[i];
 655              		.loc 1 168 0 discriminator 3
 656 06f9 8B85DCFD 		movl	-548(%rbp), %eax
 656      FFFF
 657 06ff 4898     		cltq
 658 0701 488D1485 		leaq	0(,%rax,4), %rdx
 658      00000000 
 659 0709 488B85A8 		movq	-600(%rbp), %rax
 659      FDFFFF
 660 0710 4801C2   		addq	%rax, %rdx
 661 0713 8B85DCFD 		movl	-548(%rbp), %eax
 661      FFFF
 662 0719 4898     		cltq
 663 071b 8B8485F0 		movl	-272(%rbp,%rax,4), %eax
 663      FEFFFF
 664 0722 8902     		movl	%eax, (%rdx)
 167:main_final_with_sync.c **** 		bin[i] = cipher_text[i];
 665              		.loc 1 167 0 discriminator 3
 666 0724 8385DCFD 		addl	$1, -548(%rbp)
 666      FFFF01
 667              	.L38:
 167:main_final_with_sync.c **** 		bin[i] = cipher_text[i];
 668              		.loc 1 167 0 is_stmt 0 discriminator 1
 669 072b 83BDDCFD 		cmpl	$31, -548(%rbp)
 669      FFFF1F
 670 0732 7EC5     		jle	.L39
 671              	.LBE12:
 169:main_final_with_sync.c **** }
 672              		.loc 1 169 0 is_stmt 1
 673 0734 90       		nop
 674 0735 488B45F8 		movq	-8(%rbp), %rax
 675 0739 64483304 		xorq	%fs:40, %rax
 675      25280000 
 675      00
 676 0742 7405     		je	.L40
 677 0744 E8000000 		call	__stack_chk_fail
 677      00
 678              	.L40:
 679 0749 C9       		leave
 680              		.cfi_def_cfa 7, 8
 681 074a C3       		ret
 682              		.cfi_endproc
 683              	.LFE9:
 685              		.globl	decrypter
 687              	decrypter:
 688              	.LFB10:
 170:main_final_with_sync.c **** 
 171:main_final_with_sync.c **** void decrypter(int P[], int K[], int bin[])
 172:main_final_with_sync.c **** {
 689              		.loc 1 172 0
 690              		.cfi_startproc
 691 074b 55       		pushq	%rbp
 692              		.cfi_def_cfa_offset 16
 693              		.cfi_offset 6, -16
 694 074c 4889E5   		movq	%rsp, %rbp
 695              		.cfi_def_cfa_register 6
 696 074f 4881EC60 		subq	$608, %rsp
 696      020000
 697 0756 4889BDB8 		movq	%rdi, -584(%rbp)
 697      FDFFFF
 698 075d 4889B5B0 		movq	%rsi, -592(%rbp)
 698      FDFFFF
 699 0764 488995A8 		movq	%rdx, -600(%rbp)
 699      FDFFFF
 700              		.loc 1 172 0
 701 076b 64488B04 		movq	%fs:40, %rax
 701      25280000 
 701      00
 702 0774 488945F8 		movq	%rax, -8(%rbp)
 703 0778 31C0     		xorl	%eax, %eax
 173:main_final_with_sync.c ****   //int plain_text[32];
 174:main_final_with_sync.c **** 	int key[32];
 175:main_final_with_sync.c **** 	int cipher_text[32];
 176:main_final_with_sync.c **** 	int T[4];
 177:main_final_with_sync.c **** 	int count1=0;
 704              		.loc 1 177 0
 705 077a C785C0FD 		movl	$0, -576(%rbp)
 705      FFFF0000 
 705      0000
 706              	.LBB13:
 178:main_final_with_sync.c **** 
 179:main_final_with_sync.c **** 	for (int i = 0; i < 32; ++i)
 707              		.loc 1 179 0
 708 0784 C785C4FD 		movl	$0, -572(%rbp)
 708      FFFF0000 
 708      0000
 709 078e E9840000 		jmp	.L42
 709      00
 710              	.L44:
 180:main_final_with_sync.c **** 	{
 181:main_final_with_sync.c **** 		cipher_text[i] = P[i];
 711              		.loc 1 181 0
 712 0793 8B85C4FD 		movl	-572(%rbp), %eax
 712      FFFF
 713 0799 4898     		cltq
 714 079b 488D1485 		leaq	0(,%rax,4), %rdx
 714      00000000 
 715 07a3 488B85B8 		movq	-584(%rbp), %rax
 715      FDFFFF
 716 07aa 4801D0   		addq	%rdx, %rax
 717 07ad 8B10     		movl	(%rax), %edx
 718 07af 8B85C4FD 		movl	-572(%rbp), %eax
 718      FFFF
 719 07b5 4898     		cltq
 720 07b7 899485F0 		movl	%edx, -272(%rbp,%rax,4)
 720      FEFFFF
 182:main_final_with_sync.c **** 		key[i] = K[i];
 721              		.loc 1 182 0
 722 07be 8B85C4FD 		movl	-572(%rbp), %eax
 722      FFFF
 723 07c4 4898     		cltq
 724 07c6 488D1485 		leaq	0(,%rax,4), %rdx
 724      00000000 
 725 07ce 488B85B0 		movq	-592(%rbp), %rax
 725      FDFFFF
 726 07d5 4801D0   		addq	%rdx, %rax
 727 07d8 8B10     		movl	(%rax), %edx
 728 07da 8B85C4FD 		movl	-572(%rbp), %eax
 728      FFFF
 729 07e0 4898     		cltq
 730 07e2 89948570 		movl	%edx, -400(%rbp,%rax,4)
 730      FEFFFF
 183:main_final_with_sync.c **** 		if(K[i] == 0) 
 731              		.loc 1 183 0
 732 07e9 8B85C4FD 		movl	-572(%rbp), %eax
 732      FFFF
 733 07ef 4898     		cltq
 734 07f1 488D1485 		leaq	0(,%rax,4), %rdx
 734      00000000 
 735 07f9 488B85B0 		movq	-592(%rbp), %rax
 735      FDFFFF
 736 0800 4801D0   		addq	%rdx, %rax
 737 0803 8B00     		movl	(%rax), %eax
 738 0805 85C0     		testl	%eax, %eax
 739 0807 7507     		jne	.L43
 184:main_final_with_sync.c **** 			count1++;
 740              		.loc 1 184 0
 741 0809 8385C0FD 		addl	$1, -576(%rbp)
 741      FFFF01
 742              	.L43:
 179:main_final_with_sync.c **** 	{
 743              		.loc 1 179 0 discriminator 2
 744 0810 8385C4FD 		addl	$1, -572(%rbp)
 744      FFFF01
 745              	.L42:
 179:main_final_with_sync.c **** 	{
 746              		.loc 1 179 0 is_stmt 0 discriminator 1
 747 0817 83BDC4FD 		cmpl	$31, -572(%rbp)
 747      FFFF1F
 748 081e 0F8E6FFF 		jle	.L44
 748      FFFF
 749              	.LBE13:
 750              	.LBB14:
 185:main_final_with_sync.c **** 	}
 186:main_final_with_sync.c **** 
 187:main_final_with_sync.c **** 	int arr0[8];
 188:main_final_with_sync.c **** 	int arr1[8];
 189:main_final_with_sync.c **** 	int arr2[8];
 190:main_final_with_sync.c **** 	int arr3[8];
 191:main_final_with_sync.c **** 
 192:main_final_with_sync.c **** 	for(int i=0; i<8; i++)
 751              		.loc 1 192 0 is_stmt 1
 752 0824 C785C8FD 		movl	$0, -568(%rbp)
 752      FFFF0000 
 752      0000
 753 082e E9940000 		jmp	.L45
 753      00
 754              	.L46:
 193:main_final_with_sync.c **** 	{
 194:main_final_with_sync.c **** 		arr0[i] = key[4*i];
 755              		.loc 1 194 0 discriminator 3
 756 0833 8B85C8FD 		movl	-568(%rbp), %eax
 756      FFFF
 757 0839 C1E002   		sall	$2, %eax
 758 083c 4898     		cltq
 759 083e 8B948570 		movl	-400(%rbp,%rax,4), %edx
 759      FEFFFF
 760 0845 8B85C8FD 		movl	-568(%rbp), %eax
 760      FFFF
 761 084b 4898     		cltq
 762 084d 899485F0 		movl	%edx, -528(%rbp,%rax,4)
 762      FDFFFF
 195:main_final_with_sync.c **** 		arr1[i] = key[4*i+1];
 763              		.loc 1 195 0 discriminator 3
 764 0854 8B85C8FD 		movl	-568(%rbp), %eax
 764      FFFF
 765 085a C1E002   		sall	$2, %eax
 766 085d 83C001   		addl	$1, %eax
 767 0860 4898     		cltq
 768 0862 8B948570 		movl	-400(%rbp,%rax,4), %edx
 768      FEFFFF
 769 0869 8B85C8FD 		movl	-568(%rbp), %eax
 769      FFFF
 770 086f 4898     		cltq
 771 0871 89948510 		movl	%edx, -496(%rbp,%rax,4)
 771      FEFFFF
 196:main_final_with_sync.c **** 		arr2[i] = key[4*i+2];
 772              		.loc 1 196 0 discriminator 3
 773 0878 8B85C8FD 		movl	-568(%rbp), %eax
 773      FFFF
 774 087e C1E002   		sall	$2, %eax
 775 0881 83C002   		addl	$2, %eax
 776 0884 4898     		cltq
 777 0886 8B948570 		movl	-400(%rbp,%rax,4), %edx
 777      FEFFFF
 778 088d 8B85C8FD 		movl	-568(%rbp), %eax
 778      FFFF
 779 0893 4898     		cltq
 780 0895 89948530 		movl	%edx, -464(%rbp,%rax,4)
 780      FEFFFF
 197:main_final_with_sync.c **** 		arr3[i] = key[4*i+3];
 781              		.loc 1 197 0 discriminator 3
 782 089c 8B85C8FD 		movl	-568(%rbp), %eax
 782      FFFF
 783 08a2 C1E002   		sall	$2, %eax
 784 08a5 83C003   		addl	$3, %eax
 785 08a8 4898     		cltq
 786 08aa 8B948570 		movl	-400(%rbp,%rax,4), %edx
 786      FEFFFF
 787 08b1 8B85C8FD 		movl	-568(%rbp), %eax
 787      FFFF
 788 08b7 4898     		cltq
 789 08b9 89948550 		movl	%edx, -432(%rbp,%rax,4)
 789      FEFFFF
 192:main_final_with_sync.c **** 	{
 790              		.loc 1 192 0 discriminator 3
 791 08c0 8385C8FD 		addl	$1, -568(%rbp)
 791      FFFF01
 792              	.L45:
 192:main_final_with_sync.c **** 	{
 793              		.loc 1 192 0 is_stmt 0 discriminator 1
 794 08c7 83BDC8FD 		cmpl	$7, -568(%rbp)
 794      FFFF07
 795 08ce 0F8E5FFF 		jle	.L46
 795      FFFF
 796              	.LBE14:
 198:main_final_with_sync.c **** 	}
 199:main_final_with_sync.c **** 
 200:main_final_with_sync.c **** 	T[0] = myxor(arr0);
 797              		.loc 1 200 0 is_stmt 1
 798 08d4 488D85F0 		leaq	-528(%rbp), %rax
 798      FDFFFF
 799 08db 4889C7   		movq	%rax, %rdi
 800 08de E8000000 		call	myxor
 800      00
 801 08e3 8985E0FD 		movl	%eax, -544(%rbp)
 801      FFFF
 201:main_final_with_sync.c **** 	T[1] = myxor(arr1);
 802              		.loc 1 201 0
 803 08e9 488D8510 		leaq	-496(%rbp), %rax
 803      FEFFFF
 804 08f0 4889C7   		movq	%rax, %rdi
 805 08f3 E8000000 		call	myxor
 805      00
 806 08f8 8985E4FD 		movl	%eax, -540(%rbp)
 806      FFFF
 202:main_final_with_sync.c **** 	T[2] = myxor(arr2);
 807              		.loc 1 202 0
 808 08fe 488D8530 		leaq	-464(%rbp), %rax
 808      FEFFFF
 809 0905 4889C7   		movq	%rax, %rdi
 810 0908 E8000000 		call	myxor
 810      00
 811 090d 8985E8FD 		movl	%eax, -536(%rbp)
 811      FFFF
 203:main_final_with_sync.c **** 	T[3] = myxor(arr3);
 812              		.loc 1 203 0
 813 0913 488D8550 		leaq	-432(%rbp), %rax
 813      FEFFFF
 814 091a 4889C7   		movq	%rax, %rdi
 815 091d E8000000 		call	myxor
 815      00
 816 0922 8985ECFD 		movl	%eax, -532(%rbp)
 816      FFFF
 204:main_final_with_sync.c **** 
 205:main_final_with_sync.c **** 	int T32[32];
 206:main_final_with_sync.c **** 	int dec = bitArrayToInt(T, 4);
 817              		.loc 1 206 0
 818 0928 488D85E0 		leaq	-544(%rbp), %rax
 818      FDFFFF
 819 092f BE040000 		movl	$4, %esi
 819      00
 820 0934 4889C7   		movq	%rax, %rdi
 821 0937 E8000000 		call	bitArrayToInt
 821      00
 822 093c 8985CCFD 		movl	%eax, -564(%rbp)
 822      FFFF
 207:main_final_with_sync.c **** 	dec = (dec+15)%16;
 823              		.loc 1 207 0
 824 0942 8B85CCFD 		movl	-564(%rbp), %eax
 824      FFFF
 825 0948 8D500F   		leal	15(%rax), %edx
 826 094b 89D0     		movl	%edx, %eax
 827 094d C1F81F   		sarl	$31, %eax
 828 0950 C1E81C   		shrl	$28, %eax
 829 0953 01C2     		addl	%eax, %edx
 830 0955 83E20F   		andl	$15, %edx
 831 0958 29C2     		subl	%eax, %edx
 832 095a 89D0     		movl	%edx, %eax
 833 095c 8985CCFD 		movl	%eax, -564(%rbp)
 833      FFFF
 208:main_final_with_sync.c **** 	decToBinary(dec, T, 4);
 834              		.loc 1 208 0
 835 0962 488D8DE0 		leaq	-544(%rbp), %rcx
 835      FDFFFF
 836 0969 8B85CCFD 		movl	-564(%rbp), %eax
 836      FFFF
 837 096f BA040000 		movl	$4, %edx
 837      00
 838 0974 4889CE   		movq	%rcx, %rsi
 839 0977 89C7     		movl	%eax, %edi
 840 0979 E8000000 		call	decToBinary
 840      00
 841              	.LBB15:
 209:main_final_with_sync.c **** 
 210:main_final_with_sync.c **** 	for (int i = 0; i < count1; ++i)
 842              		.loc 1 210 0
 843 097e C785D0FD 		movl	$0, -560(%rbp)
 843      FFFF0000 
 843      0000
 844 0988 E9130100 		jmp	.L47
 844      00
 845              	.L52:
 846              	.LBB16:
 211:main_final_with_sync.c **** 	{ 
 212:main_final_with_sync.c **** 		for (int j = 0; j < 8; j++)
 847              		.loc 1 212 0
 848 098d C785D4FD 		movl	$0, -556(%rbp)
 848      FFFF0000 
 848      0000
 849 0997 EB70     		jmp	.L48
 850              	.L49:
 213:main_final_with_sync.c **** 		{
 214:main_final_with_sync.c **** 			T32[4*j] = T[0];
 851              		.loc 1 214 0 discriminator 3
 852 0999 8B85D4FD 		movl	-556(%rbp), %eax
 852      FFFF
 853 099f C1E002   		sall	$2, %eax
 854 09a2 8B95E0FD 		movl	-544(%rbp), %edx
 854      FFFF
 855 09a8 4898     		cltq
 856 09aa 89948570 		movl	%edx, -144(%rbp,%rax,4)
 856      FFFFFF
 215:main_final_with_sync.c **** 			T32[4*j+1] = T[1];
 857              		.loc 1 215 0 discriminator 3
 858 09b1 8B85D4FD 		movl	-556(%rbp), %eax
 858      FFFF
 859 09b7 C1E002   		sall	$2, %eax
 860 09ba 83C001   		addl	$1, %eax
 861 09bd 8B95E4FD 		movl	-540(%rbp), %edx
 861      FFFF
 862 09c3 4898     		cltq
 863 09c5 89948570 		movl	%edx, -144(%rbp,%rax,4)
 863      FFFFFF
 216:main_final_with_sync.c **** 			T32[4*j+2] = T[2];
 864              		.loc 1 216 0 discriminator 3
 865 09cc 8B85D4FD 		movl	-556(%rbp), %eax
 865      FFFF
 866 09d2 C1E002   		sall	$2, %eax
 867 09d5 83C002   		addl	$2, %eax
 868 09d8 8B95E8FD 		movl	-536(%rbp), %edx
 868      FFFF
 869 09de 4898     		cltq
 870 09e0 89948570 		movl	%edx, -144(%rbp,%rax,4)
 870      FFFFFF
 217:main_final_with_sync.c **** 			T32[4*j+3] = T[3];
 871              		.loc 1 217 0 discriminator 3
 872 09e7 8B85D4FD 		movl	-556(%rbp), %eax
 872      FFFF
 873 09ed C1E002   		sall	$2, %eax
 874 09f0 83C003   		addl	$3, %eax
 875 09f3 8B95ECFD 		movl	-532(%rbp), %edx
 875      FFFF
 876 09f9 4898     		cltq
 877 09fb 89948570 		movl	%edx, -144(%rbp,%rax,4)
 877      FFFFFF
 212:main_final_with_sync.c **** 		{
 878              		.loc 1 212 0 discriminator 3
 879 0a02 8385D4FD 		addl	$1, -556(%rbp)
 879      FFFF01
 880              	.L48:
 212:main_final_with_sync.c **** 		{
 881              		.loc 1 212 0 is_stmt 0 discriminator 1
 882 0a09 83BDD4FD 		cmpl	$7, -556(%rbp)
 882      FFFF07
 883 0a10 7E87     		jle	.L49
 884              	.LBE16:
 885              	.LBB17:
 218:main_final_with_sync.c **** 		}
 219:main_final_with_sync.c **** 
 220:main_final_with_sync.c **** 		for (int j = 0; j < 32; ++j)
 886              		.loc 1 220 0 is_stmt 1
 887 0a12 C785D8FD 		movl	$0, -552(%rbp)
 887      FFFF0000 
 887      0000
 888 0a1c EB36     		jmp	.L50
 889              	.L51:
 221:main_final_with_sync.c **** 			cipher_text[j] = cipher_text[j] ^ T32[j];
 890              		.loc 1 221 0 discriminator 3
 891 0a1e 8B85D8FD 		movl	-552(%rbp), %eax
 891      FFFF
 892 0a24 4898     		cltq
 893 0a26 8B9485F0 		movl	-272(%rbp,%rax,4), %edx
 893      FEFFFF
 894 0a2d 8B85D8FD 		movl	-552(%rbp), %eax
 894      FFFF
 895 0a33 4898     		cltq
 896 0a35 8B848570 		movl	-144(%rbp,%rax,4), %eax
 896      FFFFFF
 897 0a3c 31C2     		xorl	%eax, %edx
 898 0a3e 8B85D8FD 		movl	-552(%rbp), %eax
 898      FFFF
 899 0a44 4898     		cltq
 900 0a46 899485F0 		movl	%edx, -272(%rbp,%rax,4)
 900      FEFFFF
 220:main_final_with_sync.c **** 			cipher_text[j] = cipher_text[j] ^ T32[j];
 901              		.loc 1 220 0 discriminator 3
 902 0a4d 8385D8FD 		addl	$1, -552(%rbp)
 902      FFFF01
 903              	.L50:
 220:main_final_with_sync.c **** 			cipher_text[j] = cipher_text[j] ^ T32[j];
 904              		.loc 1 220 0 is_stmt 0 discriminator 1
 905 0a54 83BDD8FD 		cmpl	$31, -552(%rbp)
 905      FFFF1F
 906 0a5b 7EC1     		jle	.L51
 907              	.LBE17:
 222:main_final_with_sync.c **** 
 223:main_final_with_sync.c **** 		dec=(dec+15)%16;
 908              		.loc 1 223 0 is_stmt 1 discriminator 2
 909 0a5d 8B85CCFD 		movl	-564(%rbp), %eax
 909      FFFF
 910 0a63 8D500F   		leal	15(%rax), %edx
 911 0a66 89D0     		movl	%edx, %eax
 912 0a68 C1F81F   		sarl	$31, %eax
 913 0a6b C1E81C   		shrl	$28, %eax
 914 0a6e 01C2     		addl	%eax, %edx
 915 0a70 83E20F   		andl	$15, %edx
 916 0a73 29C2     		subl	%eax, %edx
 917 0a75 89D0     		movl	%edx, %eax
 918 0a77 8985CCFD 		movl	%eax, -564(%rbp)
 918      FFFF
 224:main_final_with_sync.c **** 		decToBinary(dec, T, 4);
 919              		.loc 1 224 0 discriminator 2
 920 0a7d 488D8DE0 		leaq	-544(%rbp), %rcx
 920      FDFFFF
 921 0a84 8B85CCFD 		movl	-564(%rbp), %eax
 921      FFFF
 922 0a8a BA040000 		movl	$4, %edx
 922      00
 923 0a8f 4889CE   		movq	%rcx, %rsi
 924 0a92 89C7     		movl	%eax, %edi
 925 0a94 E8000000 		call	decToBinary
 925      00
 210:main_final_with_sync.c **** 	{ 
 926              		.loc 1 210 0 discriminator 2
 927 0a99 8385D0FD 		addl	$1, -560(%rbp)
 927      FFFF01
 928              	.L47:
 210:main_final_with_sync.c **** 	{ 
 929              		.loc 1 210 0 is_stmt 0 discriminator 1
 930 0aa0 8B85D0FD 		movl	-560(%rbp), %eax
 930      FFFF
 931 0aa6 3B85C0FD 		cmpl	-576(%rbp), %eax
 931      FFFF
 932 0aac 0F8CDBFE 		jl	.L52
 932      FFFF
 933              	.LBE15:
 934              	.LBB18:
 225:main_final_with_sync.c **** 	}
 226:main_final_with_sync.c **** 
 227:main_final_with_sync.c **** 	for (int i = 0; i < 32; ++i)
 935              		.loc 1 227 0 is_stmt 1
 936 0ab2 C785DCFD 		movl	$0, -548(%rbp)
 936      FFFF0000 
 936      0000
 937 0abc EB32     		jmp	.L53
 938              	.L54:
 228:main_final_with_sync.c **** 		bin[i] = cipher_text[i];
 939              		.loc 1 228 0 discriminator 3
 940 0abe 8B85DCFD 		movl	-548(%rbp), %eax
 940      FFFF
 941 0ac4 4898     		cltq
 942 0ac6 488D1485 		leaq	0(,%rax,4), %rdx
 942      00000000 
 943 0ace 488B85A8 		movq	-600(%rbp), %rax
 943      FDFFFF
 944 0ad5 4801C2   		addq	%rax, %rdx
 945 0ad8 8B85DCFD 		movl	-548(%rbp), %eax
 945      FFFF
 946 0ade 4898     		cltq
 947 0ae0 8B8485F0 		movl	-272(%rbp,%rax,4), %eax
 947      FEFFFF
 948 0ae7 8902     		movl	%eax, (%rdx)
 227:main_final_with_sync.c **** 		bin[i] = cipher_text[i];
 949              		.loc 1 227 0 discriminator 3
 950 0ae9 8385DCFD 		addl	$1, -548(%rbp)
 950      FFFF01
 951              	.L53:
 227:main_final_with_sync.c **** 		bin[i] = cipher_text[i];
 952              		.loc 1 227 0 is_stmt 0 discriminator 1
 953 0af0 83BDDCFD 		cmpl	$31, -548(%rbp)
 953      FFFF1F
 954 0af7 7EC5     		jle	.L54
 955              	.LBE18:
 229:main_final_with_sync.c **** }
 956              		.loc 1 229 0 is_stmt 1
 957 0af9 90       		nop
 958 0afa 488B45F8 		movq	-8(%rbp), %rax
 959 0afe 64483304 		xorq	%fs:40, %rax
 959      25280000 
 959      00
 960 0b07 7405     		je	.L55
 961 0b09 E8000000 		call	__stack_chk_fail
 961      00
 962              	.L55:
 963 0b0e C9       		leave
 964              		.cfi_def_cfa 7, 8
 965 0b0f C3       		ret
 966              		.cfi_endproc
 967              	.LFE10:
 969              		.globl	convert_to_binary
 971              	convert_to_binary:
 972              	.LFB11:
 230:main_final_with_sync.c **** 
 231:main_final_with_sync.c **** 
 232:main_final_with_sync.c **** void convert_to_binary(int co_ordinates[8], unsigned int* buff)
 233:main_final_with_sync.c **** {  
 973              		.loc 1 233 0
 974              		.cfi_startproc
 975 0b10 55       		pushq	%rbp
 976              		.cfi_def_cfa_offset 16
 977              		.cfi_offset 6, -16
 978 0b11 4889E5   		movq	%rsp, %rbp
 979              		.cfi_def_cfa_register 6
 980 0b14 48897DE8 		movq	%rdi, -24(%rbp)
 981 0b18 488975E0 		movq	%rsi, -32(%rbp)
 234:main_final_with_sync.c **** 	int arb = 0;
 982              		.loc 1 234 0
 983 0b1c C745FC00 		movl	$0, -4(%rbp)
 983      000000
 235:main_final_with_sync.c **** 	int i = 7;
 984              		.loc 1 235 0
 985 0b23 C745F807 		movl	$7, -8(%rbp)
 985      000000
 236:main_final_with_sync.c **** 	while(buff[0]!=0)
 986              		.loc 1 236 0
 987 0b2a EB39     		jmp	.L57
 988              	.L58:
 237:main_final_with_sync.c **** 	{  //printf("%s\n", "Running");
 238:main_final_with_sync.c **** arb = buff[0] % 2;
 989              		.loc 1 238 0
 990 0b2c 488B45E0 		movq	-32(%rbp), %rax
 991 0b30 8B00     		movl	(%rax), %eax
 992 0b32 83E001   		andl	$1, %eax
 993 0b35 8945FC   		movl	%eax, -4(%rbp)
 239:main_final_with_sync.c **** buff[0] = buff[0]/2;
 994              		.loc 1 239 0
 995 0b38 488B45E0 		movq	-32(%rbp), %rax
 996 0b3c 8B00     		movl	(%rax), %eax
 997 0b3e D1E8     		shrl	%eax
 998 0b40 89C2     		movl	%eax, %edx
 999 0b42 488B45E0 		movq	-32(%rbp), %rax
 1000 0b46 8910     		movl	%edx, (%rax)
 240:main_final_with_sync.c **** co_ordinates[i] = arb;
 1001              		.loc 1 240 0
 1002 0b48 8B45F8   		movl	-8(%rbp), %eax
 1003 0b4b 4898     		cltq
 1004 0b4d 488D1485 		leaq	0(,%rax,4), %rdx
 1004      00000000 
 1005 0b55 488B45E8 		movq	-24(%rbp), %rax
 1006 0b59 4801C2   		addq	%rax, %rdx
 1007 0b5c 8B45FC   		movl	-4(%rbp), %eax
 1008 0b5f 8902     		movl	%eax, (%rdx)
 241:main_final_with_sync.c **** i--;	
 1009              		.loc 1 241 0
 1010 0b61 836DF801 		subl	$1, -8(%rbp)
 1011              	.L57:
 236:main_final_with_sync.c **** 	{  //printf("%s\n", "Running");
 1012              		.loc 1 236 0
 1013 0b65 488B45E0 		movq	-32(%rbp), %rax
 1014 0b69 8B00     		movl	(%rax), %eax
 1015 0b6b 85C0     		testl	%eax, %eax
 1016 0b6d 75BD     		jne	.L58
 242:main_final_with_sync.c **** }
 243:main_final_with_sync.c **** }
 1017              		.loc 1 243 0
 1018 0b6f 90       		nop
 1019 0b70 5D       		popq	%rbp
 1020              		.cfi_def_cfa 7, 8
 1021 0b71 C3       		ret
 1022              		.cfi_endproc
 1023              	.LFE11:
 1025              		.section	.rodata
 1026              	.LC1:
 1027 0000 4572726F 		.string	"Error, not Running"
 1027      722C206E 
 1027      6F742052 
 1027      756E6E69 
 1027      6E6700
 1028              	.LC2:
 1029 0013 54686520 		.string	"The x and y"
 1029      7820616E 
 1029      64207900 
 1030              	.LC3:
 1031 001f 2025642C 		.string	" %d,%d,%d,%d,%d"
 1031      25642C25 
 1031      642C2564 
 1031      2C256400 
 1032 002f 00       		.align 16
 1033              	.LC0:
 1034 0030 303030   		.ascii	"000"
 1035 0033 303031   		.ascii	"001"
 1036 0036 303130   		.ascii	"010"
 1037 0039 303131   		.ascii	"011"
 1038 003c 313030   		.ascii	"100"
 1039 003f 313031   		.ascii	"101"
 1040 0042 313130   		.ascii	"110"
 1041 0045 313131   		.ascii	"111"
 1042              		.text
 1043              		.globl	print
 1045              	print:
 1046              	.LFB12:
 244:main_final_with_sync.c **** 
 245:main_final_with_sync.c **** void print(int x_cord, int y_cord, int final_arr[8][8], FILE * fp)
 246:main_final_with_sync.c **** {
 1047              		.loc 1 246 0
 1048              		.cfi_startproc
 1049 0b72 55       		pushq	%rbp
 1050              		.cfi_def_cfa_offset 16
 1051              		.cfi_offset 6, -16
 1052 0b73 4889E5   		movq	%rsp, %rbp
 1053              		.cfi_def_cfa_register 6
 1054 0b76 4881EC20 		subq	$288, %rsp
 1054      010000
 1055 0b7d 89BDFCFE 		movl	%edi, -260(%rbp)
 1055      FFFF
 1056 0b83 89B5F8FE 		movl	%esi, -264(%rbp)
 1056      FFFF
 1057 0b89 488995F0 		movq	%rdx, -272(%rbp)
 1057      FEFFFF
 1058 0b90 48898DE8 		movq	%rcx, -280(%rbp)
 1058      FEFFFF
 1059              		.loc 1 246 0
 1060 0b97 64488B04 		movq	%fs:40, %rax
 1060      25280000 
 1060      00
 1061 0ba0 488945F8 		movq	%rax, -8(%rbp)
 1062 0ba4 31C0     		xorl	%eax, %eax
 247:main_final_with_sync.c **** 
 248:main_final_with_sync.c **** 	int arr[8][5];
 249:main_final_with_sync.c **** 	int count = 0;
 1063              		.loc 1 249 0
 1064 0ba6 C78514FF 		movl	$0, -236(%rbp)
 1064      FFFF0000 
 1064      0000
 250:main_final_with_sync.c **** 	//printf("%s\n", "The x and y ");
 251:main_final_with_sync.c **** 
 252:main_final_with_sync.c **** 	char conversion[8][3] = {"000","001","010","011","100","101","110","111"};
 1065              		.loc 1 252 0
 1066 0bb0 488B0500 		movq	.LC0(%rip), %rax
 1066      000000
 1067 0bb7 48898530 		movq	%rax, -208(%rbp)
 1067      FFFFFF
 1068 0bbe 488B0500 		movq	.LC0+8(%rip), %rax
 1068      000000
 1069 0bc5 48898538 		movq	%rax, -200(%rbp)
 1069      FFFFFF
 1070 0bcc 488B0500 		movq	.LC0+16(%rip), %rax
 1070      000000
 1071 0bd3 48898540 		movq	%rax, -192(%rbp)
 1071      FFFFFF
 1072              	.LBB19:
 253:main_final_with_sync.c **** 
 254:main_final_with_sync.c **** 	for (int i = 0; i < 8; i++)
 1073              		.loc 1 254 0
 1074 0bda C78518FF 		movl	$0, -232(%rbp)
 1074      FFFF0000 
 1074      0000
 1075 0be4 E9E50000 		jmp	.L60
 1075      00
 1076              	.L61:
 255:main_final_with_sync.c **** 	{
 256:main_final_with_sync.c **** 		arr[i][0] = -1;
 1077              		.loc 1 256 0 discriminator 3
 1078 0be9 8B8518FF 		movl	-232(%rbp), %eax
 1078      FFFF
 1079 0bef 4863D0   		movslq	%eax, %rdx
 1080 0bf2 4889D0   		movq	%rdx, %rax
 1081 0bf5 48C1E002 		salq	$2, %rax
 1082 0bf9 4801D0   		addq	%rdx, %rax
 1083 0bfc 48C1E002 		salq	$2, %rax
 1084 0c00 4801E8   		addq	%rbp, %rax
 1085 0c03 482DB000 		subq	$176, %rax
 1085      0000
 1086 0c09 C700FFFF 		movl	$-1, (%rax)
 1086      FFFF
 257:main_final_with_sync.c **** 		arr[i][1] = -1;
 1087              		.loc 1 257 0 discriminator 3
 1088 0c0f 8B8518FF 		movl	-232(%rbp), %eax
 1088      FFFF
 1089 0c15 4863D0   		movslq	%eax, %rdx
 1090 0c18 4889D0   		movq	%rdx, %rax
 1091 0c1b 48C1E002 		salq	$2, %rax
 1092 0c1f 4801D0   		addq	%rdx, %rax
 1093 0c22 48C1E002 		salq	$2, %rax
 1094 0c26 4801E8   		addq	%rbp, %rax
 1095 0c29 482DAC00 		subq	$172, %rax
 1095      0000
 1096 0c2f C700FFFF 		movl	$-1, (%rax)
 1096      FFFF
 258:main_final_with_sync.c **** 		arr[i][2] = -1;
 1097              		.loc 1 258 0 discriminator 3
 1098 0c35 8B8518FF 		movl	-232(%rbp), %eax
 1098      FFFF
 1099 0c3b 4863D0   		movslq	%eax, %rdx
 1100 0c3e 4889D0   		movq	%rdx, %rax
 1101 0c41 48C1E002 		salq	$2, %rax
 1102 0c45 4801D0   		addq	%rdx, %rax
 1103 0c48 48C1E002 		salq	$2, %rax
 1104 0c4c 4801E8   		addq	%rbp, %rax
 1105 0c4f 482DA800 		subq	$168, %rax
 1105      0000
 1106 0c55 C700FFFF 		movl	$-1, (%rax)
 1106      FFFF
 259:main_final_with_sync.c **** 		arr[i][3] = -1;
 1107              		.loc 1 259 0 discriminator 3
 1108 0c5b 8B8518FF 		movl	-232(%rbp), %eax
 1108      FFFF
 1109 0c61 4863D0   		movslq	%eax, %rdx
 1110 0c64 4889D0   		movq	%rdx, %rax
 1111 0c67 48C1E002 		salq	$2, %rax
 1112 0c6b 4801D0   		addq	%rdx, %rax
 1113 0c6e 48C1E002 		salq	$2, %rax
 1114 0c72 4801E8   		addq	%rbp, %rax
 1115 0c75 482DA400 		subq	$164, %rax
 1115      0000
 1116 0c7b C700FFFF 		movl	$-1, (%rax)
 1116      FFFF
 260:main_final_with_sync.c **** 		arr[i][4] = -1;
 1117              		.loc 1 260 0 discriminator 3
 1118 0c81 8B8518FF 		movl	-232(%rbp), %eax
 1118      FFFF
 1119 0c87 4863D0   		movslq	%eax, %rdx
 1120 0c8a 4889D0   		movq	%rdx, %rax
 1121 0c8d 48C1E002 		salq	$2, %rax
 1122 0c91 4801D0   		addq	%rdx, %rax
 1123 0c94 48C1E002 		salq	$2, %rax
 1124 0c98 4801E8   		addq	%rbp, %rax
 1125 0c9b 482DA000 		subq	$160, %rax
 1125      0000
 1126 0ca1 C700FFFF 		movl	$-1, (%rax)
 1126      FFFF
 261:main_final_with_sync.c **** 		final_arr[i][7] = -1;
 1127              		.loc 1 261 0 discriminator 3
 1128 0ca7 8B8518FF 		movl	-232(%rbp), %eax
 1128      FFFF
 1129 0cad 4898     		cltq
 1130 0caf 48C1E005 		salq	$5, %rax
 1131 0cb3 4889C2   		movq	%rax, %rdx
 1132 0cb6 488B85F0 		movq	-272(%rbp), %rax
 1132      FEFFFF
 1133 0cbd 4801D0   		addq	%rdx, %rax
 1134 0cc0 C7401CFF 		movl	$-1, 28(%rax)
 1134      FFFFFF
 254:main_final_with_sync.c **** 	{
 1135              		.loc 1 254 0 discriminator 3
 1136 0cc7 838518FF 		addl	$1, -232(%rbp)
 1136      FFFF01
 1137              	.L60:
 254:main_final_with_sync.c **** 	{
 1138              		.loc 1 254 0 is_stmt 0 discriminator 1
 1139 0cce 83BD18FF 		cmpl	$7, -232(%rbp)
 1139      FFFF07
 1140 0cd5 0F8E0EFF 		jle	.L61
 1140      FFFF
 1141              	.LBE19:
 262:main_final_with_sync.c **** 	}
 263:main_final_with_sync.c **** 
 264:main_final_with_sync.c **** 	if(fp == NULL)
 1142              		.loc 1 264 0 is_stmt 1
 1143 0cdb 4883BDE8 		cmpq	$0, -280(%rbp)
 1143      FEFFFF00 
 1144 0ce3 751E     		jne	.L62
 265:main_final_with_sync.c **** 	{
 266:main_final_with_sync.c **** 		fprintf(stderr, "Error, not Running" );
 1145              		.loc 1 266 0
 1146 0ce5 488B0500 		movq	stderr(%rip), %rax
 1146      000000
 1147 0cec 4889C1   		movq	%rax, %rcx
 1148 0cef BA120000 		movl	$18, %edx
 1148      00
 1149 0cf4 BE010000 		movl	$1, %esi
 1149      00
 1150 0cf9 BF000000 		movl	$.LC1, %edi
 1150      00
 1151 0cfe E8000000 		call	fwrite
 1151      00
 1152              	.L62:
 267:main_final_with_sync.c **** 	}
 268:main_final_with_sync.c **** 	int a,b,c,d,e;
 269:main_final_with_sync.c **** 	printf("%s\n", "The x and y");
 1153              		.loc 1 269 0
 1154 0d03 BF000000 		movl	$.LC2, %edi
 1154      00
 1155 0d08 E8000000 		call	puts
 1155      00
 270:main_final_with_sync.c **** 	while (fscanf(fp, " %d,%d,%d,%d,%d", &a, &b,&c,&d,&e) == 5) {
 1156              		.loc 1 270 0
 1157 0d0d E9F50000 		jmp	.L63
 1157      00
 1158              	.L64:
 271:main_final_with_sync.c **** 
 272:main_final_with_sync.c **** 		if(a==x_cord && b==y_cord)
 1159              		.loc 1 272 0
 1160 0d12 8B8500FF 		movl	-256(%rbp), %eax
 1160      FFFF
 1161 0d18 3B85FCFE 		cmpl	-260(%rbp), %eax
 1161      FFFF
 1162 0d1e 0F85E300 		jne	.L63
 1162      0000
 1163              		.loc 1 272 0 is_stmt 0 discriminator 1
 1164 0d24 8B8504FF 		movl	-252(%rbp), %eax
 1164      FFFF
 1165 0d2a 3B85F8FE 		cmpl	-264(%rbp), %eax
 1165      FFFF
 1166 0d30 0F85D100 		jne	.L63
 1166      0000
 273:main_final_with_sync.c **** 		{
 274:main_final_with_sync.c **** 			arr[c][0] = x_cord;
 1167              		.loc 1 274 0 is_stmt 1
 1168 0d36 8B8508FF 		movl	-248(%rbp), %eax
 1168      FFFF
 1169 0d3c 4863D0   		movslq	%eax, %rdx
 1170 0d3f 4889D0   		movq	%rdx, %rax
 1171 0d42 48C1E002 		salq	$2, %rax
 1172 0d46 4801D0   		addq	%rdx, %rax
 1173 0d49 48C1E002 		salq	$2, %rax
 1174 0d4d 4801E8   		addq	%rbp, %rax
 1175 0d50 488D9050 		leaq	-176(%rax), %rdx
 1175      FFFFFF
 1176 0d57 8B85FCFE 		movl	-260(%rbp), %eax
 1176      FFFF
 1177 0d5d 8902     		movl	%eax, (%rdx)
 275:main_final_with_sync.c **** 			arr[c][1] = y_cord;
 1178              		.loc 1 275 0
 1179 0d5f 8B8508FF 		movl	-248(%rbp), %eax
 1179      FFFF
 1180 0d65 4863D0   		movslq	%eax, %rdx
 1181 0d68 4889D0   		movq	%rdx, %rax
 1182 0d6b 48C1E002 		salq	$2, %rax
 1183 0d6f 4801D0   		addq	%rdx, %rax
 1184 0d72 48C1E002 		salq	$2, %rax
 1185 0d76 4801E8   		addq	%rbp, %rax
 1186 0d79 488D9054 		leaq	-172(%rax), %rdx
 1186      FFFFFF
 1187 0d80 8B85F8FE 		movl	-264(%rbp), %eax
 1187      FFFF
 1188 0d86 8902     		movl	%eax, (%rdx)
 276:main_final_with_sync.c **** 			arr[c][2] = c;
 1189              		.loc 1 276 0
 1190 0d88 8B8508FF 		movl	-248(%rbp), %eax
 1190      FFFF
 1191 0d8e 8B8D08FF 		movl	-248(%rbp), %ecx
 1191      FFFF
 1192 0d94 4863D0   		movslq	%eax, %rdx
 1193 0d97 4889D0   		movq	%rdx, %rax
 1194 0d9a 48C1E002 		salq	$2, %rax
 1195 0d9e 4801D0   		addq	%rdx, %rax
 1196 0da1 48C1E002 		salq	$2, %rax
 1197 0da5 4801E8   		addq	%rbp, %rax
 1198 0da8 482DA800 		subq	$168, %rax
 1198      0000
 1199 0dae 8908     		movl	%ecx, (%rax)
 277:main_final_with_sync.c **** 			arr[c][3] = d;
 1200              		.loc 1 277 0
 1201 0db0 8B8508FF 		movl	-248(%rbp), %eax
 1201      FFFF
 1202 0db6 8B8D0CFF 		movl	-244(%rbp), %ecx
 1202      FFFF
 1203 0dbc 4863D0   		movslq	%eax, %rdx
 1204 0dbf 4889D0   		movq	%rdx, %rax
 1205 0dc2 48C1E002 		salq	$2, %rax
 1206 0dc6 4801D0   		addq	%rdx, %rax
 1207 0dc9 48C1E002 		salq	$2, %rax
 1208 0dcd 4801E8   		addq	%rbp, %rax
 1209 0dd0 482DA400 		subq	$164, %rax
 1209      0000
 1210 0dd6 8908     		movl	%ecx, (%rax)
 278:main_final_with_sync.c **** 			arr[c][4] = e;
 1211              		.loc 1 278 0
 1212 0dd8 8B8508FF 		movl	-248(%rbp), %eax
 1212      FFFF
 1213 0dde 8B8D10FF 		movl	-240(%rbp), %ecx
 1213      FFFF
 1214 0de4 4863D0   		movslq	%eax, %rdx
 1215 0de7 4889D0   		movq	%rdx, %rax
 1216 0dea 48C1E002 		salq	$2, %rax
 1217 0dee 4801D0   		addq	%rdx, %rax
 1218 0df1 48C1E002 		salq	$2, %rax
 1219 0df5 4801E8   		addq	%rbp, %rax
 1220 0df8 482DA000 		subq	$160, %rax
 1220      0000
 1221 0dfe 8908     		movl	%ecx, (%rax)
 279:main_final_with_sync.c **** 			count++;
 1222              		.loc 1 279 0
 1223 0e00 838514FF 		addl	$1, -236(%rbp)
 1223      FFFF01
 1224              	.L63:
 270:main_final_with_sync.c **** 
 1225              		.loc 1 270 0
 1226 0e07 4C8D850C 		leaq	-244(%rbp), %r8
 1226      FFFFFF
 1227 0e0e 488DBD08 		leaq	-248(%rbp), %rdi
 1227      FFFFFF
 1228 0e15 488D8D04 		leaq	-252(%rbp), %rcx
 1228      FFFFFF
 1229 0e1c 488D9500 		leaq	-256(%rbp), %rdx
 1229      FFFFFF
 1230 0e23 488B85E8 		movq	-280(%rbp), %rax
 1230      FEFFFF
 1231 0e2a 4883EC08 		subq	$8, %rsp
 1232 0e2e 488DB510 		leaq	-240(%rbp), %rsi
 1232      FFFFFF
 1233 0e35 56       		pushq	%rsi
 1234 0e36 4D89C1   		movq	%r8, %r9
 1235 0e39 4989F8   		movq	%rdi, %r8
 1236 0e3c BE000000 		movl	$.LC3, %esi
 1236      00
 1237 0e41 4889C7   		movq	%rax, %rdi
 1238 0e44 B8000000 		movl	$0, %eax
 1238      00
 1239 0e49 E8000000 		call	__isoc99_fscanf
 1239      00
 1240 0e4e 4883C410 		addq	$16, %rsp
 1241 0e52 83F805   		cmpl	$5, %eax
 1242 0e55 0F84B7FE 		je	.L64
 1242      FFFF
 1243              	.LBB20:
 280:main_final_with_sync.c **** 
 281:main_final_with_sync.c **** 		}
 282:main_final_with_sync.c **** 
 283:main_final_with_sync.c **** 	}
 284:main_final_with_sync.c **** 
 285:main_final_with_sync.c **** 	for (int i = 0; i < 8; i++)
 1244              		.loc 1 285 0
 1245 0e5b C7851CFF 		movl	$0, -228(%rbp)
 1245      FFFF0000 
 1245      0000
 1246 0e65 E9C50100 		jmp	.L65
 1246      00
 1247              	.L67:
 286:main_final_with_sync.c **** 	{
 287:main_final_with_sync.c **** 		if(arr[i][0] == -1 && arr[i][1] == -1 && arr[i][2] == -1 && arr[i][3] == -1 && arr[i][4] == -1)
 1248              		.loc 1 287 0
 1249 0e6a 8B851CFF 		movl	-228(%rbp), %eax
 1249      FFFF
 1250 0e70 4863D0   		movslq	%eax, %rdx
 1251 0e73 4889D0   		movq	%rdx, %rax
 1252 0e76 48C1E002 		salq	$2, %rax
 1253 0e7a 4801D0   		addq	%rdx, %rax
 1254 0e7d 48C1E002 		salq	$2, %rax
 1255 0e81 4801E8   		addq	%rbp, %rax
 1256 0e84 482DB000 		subq	$176, %rax
 1256      0000
 1257 0e8a 8B00     		movl	(%rax), %eax
 1258 0e8c 83F8FF   		cmpl	$-1, %eax
 1259 0e8f 0F859301 		jne	.L66
 1259      0000
 1260              		.loc 1 287 0 is_stmt 0 discriminator 1
 1261 0e95 8B851CFF 		movl	-228(%rbp), %eax
 1261      FFFF
 1262 0e9b 4863D0   		movslq	%eax, %rdx
 1263 0e9e 4889D0   		movq	%rdx, %rax
 1264 0ea1 48C1E002 		salq	$2, %rax
 1265 0ea5 4801D0   		addq	%rdx, %rax
 1266 0ea8 48C1E002 		salq	$2, %rax
 1267 0eac 4801E8   		addq	%rbp, %rax
 1268 0eaf 482DAC00 		subq	$172, %rax
 1268      0000
 1269 0eb5 8B00     		movl	(%rax), %eax
 1270 0eb7 83F8FF   		cmpl	$-1, %eax
 1271 0eba 0F856801 		jne	.L66
 1271      0000
 1272              		.loc 1 287 0 discriminator 2
 1273 0ec0 8B851CFF 		movl	-228(%rbp), %eax
 1273      FFFF
 1274 0ec6 4863D0   		movslq	%eax, %rdx
 1275 0ec9 4889D0   		movq	%rdx, %rax
 1276 0ecc 48C1E002 		salq	$2, %rax
 1277 0ed0 4801D0   		addq	%rdx, %rax
 1278 0ed3 48C1E002 		salq	$2, %rax
 1279 0ed7 4801E8   		addq	%rbp, %rax
 1280 0eda 482DA800 		subq	$168, %rax
 1280      0000
 1281 0ee0 8B00     		movl	(%rax), %eax
 1282 0ee2 83F8FF   		cmpl	$-1, %eax
 1283 0ee5 0F853D01 		jne	.L66
 1283      0000
 1284              		.loc 1 287 0 discriminator 3
 1285 0eeb 8B851CFF 		movl	-228(%rbp), %eax
 1285      FFFF
 1286 0ef1 4863D0   		movslq	%eax, %rdx
 1287 0ef4 4889D0   		movq	%rdx, %rax
 1288 0ef7 48C1E002 		salq	$2, %rax
 1289 0efb 4801D0   		addq	%rdx, %rax
 1290 0efe 48C1E002 		salq	$2, %rax
 1291 0f02 4801E8   		addq	%rbp, %rax
 1292 0f05 482DA400 		subq	$164, %rax
 1292      0000
 1293 0f0b 8B00     		movl	(%rax), %eax
 1294 0f0d 83F8FF   		cmpl	$-1, %eax
 1295 0f10 0F851201 		jne	.L66
 1295      0000
 1296              		.loc 1 287 0 discriminator 4
 1297 0f16 8B851CFF 		movl	-228(%rbp), %eax
 1297      FFFF
 1298 0f1c 4863D0   		movslq	%eax, %rdx
 1299 0f1f 4889D0   		movq	%rdx, %rax
 1300 0f22 48C1E002 		salq	$2, %rax
 1301 0f26 4801D0   		addq	%rdx, %rax
 1302 0f29 48C1E002 		salq	$2, %rax
 1303 0f2d 4801E8   		addq	%rbp, %rax
 1304 0f30 482DA000 		subq	$160, %rax
 1304      0000
 1305 0f36 8B00     		movl	(%rax), %eax
 1306 0f38 83F8FF   		cmpl	$-1, %eax
 1307 0f3b 0F85E700 		jne	.L66
 1307      0000
 288:main_final_with_sync.c **** 		{
 289:main_final_with_sync.c **** 			arr[i][0] = x_cord;
 1308              		.loc 1 289 0 is_stmt 1
 1309 0f41 8B851CFF 		movl	-228(%rbp), %eax
 1309      FFFF
 1310 0f47 4863D0   		movslq	%eax, %rdx
 1311 0f4a 4889D0   		movq	%rdx, %rax
 1312 0f4d 48C1E002 		salq	$2, %rax
 1313 0f51 4801D0   		addq	%rdx, %rax
 1314 0f54 48C1E002 		salq	$2, %rax
 1315 0f58 4801E8   		addq	%rbp, %rax
 1316 0f5b 488D9050 		leaq	-176(%rax), %rdx
 1316      FFFFFF
 1317 0f62 8B85FCFE 		movl	-260(%rbp), %eax
 1317      FFFF
 1318 0f68 8902     		movl	%eax, (%rdx)
 290:main_final_with_sync.c **** 			arr[i][1] = y_cord;
 1319              		.loc 1 290 0
 1320 0f6a 8B851CFF 		movl	-228(%rbp), %eax
 1320      FFFF
 1321 0f70 4863D0   		movslq	%eax, %rdx
 1322 0f73 4889D0   		movq	%rdx, %rax
 1323 0f76 48C1E002 		salq	$2, %rax
 1324 0f7a 4801D0   		addq	%rdx, %rax
 1325 0f7d 48C1E002 		salq	$2, %rax
 1326 0f81 4801E8   		addq	%rbp, %rax
 1327 0f84 488D9054 		leaq	-172(%rax), %rdx
 1327      FFFFFF
 1328 0f8b 8B85F8FE 		movl	-264(%rbp), %eax
 1328      FFFF
 1329 0f91 8902     		movl	%eax, (%rdx)
 291:main_final_with_sync.c **** 			arr[i][2] = i;
 1330              		.loc 1 291 0
 1331 0f93 8B851CFF 		movl	-228(%rbp), %eax
 1331      FFFF
 1332 0f99 4863D0   		movslq	%eax, %rdx
 1333 0f9c 4889D0   		movq	%rdx, %rax
 1334 0f9f 48C1E002 		salq	$2, %rax
 1335 0fa3 4801D0   		addq	%rdx, %rax
 1336 0fa6 48C1E002 		salq	$2, %rax
 1337 0faa 4801E8   		addq	%rbp, %rax
 1338 0fad 488D9058 		leaq	-168(%rax), %rdx
 1338      FFFFFF
 1339 0fb4 8B851CFF 		movl	-228(%rbp), %eax
 1339      FFFF
 1340 0fba 8902     		movl	%eax, (%rdx)
 292:main_final_with_sync.c **** 			arr[i][3] = 0;
 1341              		.loc 1 292 0
 1342 0fbc 8B851CFF 		movl	-228(%rbp), %eax
 1342      FFFF
 1343 0fc2 4863D0   		movslq	%eax, %rdx
 1344 0fc5 4889D0   		movq	%rdx, %rax
 1345 0fc8 48C1E002 		salq	$2, %rax
 1346 0fcc 4801D0   		addq	%rdx, %rax
 1347 0fcf 48C1E002 		salq	$2, %rax
 1348 0fd3 4801E8   		addq	%rbp, %rax
 1349 0fd6 482DA400 		subq	$164, %rax
 1349      0000
 1350 0fdc C7000000 		movl	$0, (%rax)
 1350      0000
 293:main_final_with_sync.c **** 			arr[i][4] = 0;
 1351              		.loc 1 293 0
 1352 0fe2 8B851CFF 		movl	-228(%rbp), %eax
 1352      FFFF
 1353 0fe8 4863D0   		movslq	%eax, %rdx
 1354 0feb 4889D0   		movq	%rdx, %rax
 1355 0fee 48C1E002 		salq	$2, %rax
 1356 0ff2 4801D0   		addq	%rdx, %rax
 1357 0ff5 48C1E002 		salq	$2, %rax
 1358 0ff9 4801E8   		addq	%rbp, %rax
 1359 0ffc 482DA000 		subq	$160, %rax
 1359      0000
 1360 1002 C7000000 		movl	$0, (%rax)
 1360      0000
 294:main_final_with_sync.c **** 			final_arr[i][7] = 0;
 1361              		.loc 1 294 0
 1362 1008 8B851CFF 		movl	-228(%rbp), %eax
 1362      FFFF
 1363 100e 4898     		cltq
 1364 1010 48C1E005 		salq	$5, %rax
 1365 1014 4889C2   		movq	%rax, %rdx
 1366 1017 488B85F0 		movq	-272(%rbp), %rax
 1366      FEFFFF
 1367 101e 4801D0   		addq	%rdx, %rax
 1368 1021 C7401C00 		movl	$0, 28(%rax)
 1368      000000
 1369              	.L66:
 285:main_final_with_sync.c **** 	{
 1370              		.loc 1 285 0 discriminator 2
 1371 1028 83851CFF 		addl	$1, -228(%rbp)
 1371      FFFF01
 1372              	.L65:
 285:main_final_with_sync.c **** 	{
 1373              		.loc 1 285 0 is_stmt 0 discriminator 1
 1374 102f 83BD1CFF 		cmpl	$7, -228(%rbp)
 1374      FFFF07
 1375 1036 0F8E2EFE 		jle	.L67
 1375      FFFF
 1376              	.LBE20:
 1377              	.LBB21:
 295:main_final_with_sync.c **** 		}
 296:main_final_with_sync.c **** 	}
 297:main_final_with_sync.c **** 
 298:main_final_with_sync.c **** 	for (int i = 0; i < 8; i++)
 1378              		.loc 1 298 0 is_stmt 1
 1379 103c C78520FF 		movl	$0, -224(%rbp)
 1379      FFFF0000 
 1379      0000
 1380 1046 E9870200 		jmp	.L68
 1380      00
 1381              	.L71:
 1382              	.LBB22:
 299:main_final_with_sync.c **** 	{
 300:main_final_with_sync.c **** 		int next_signal = arr[i][4];
 1383              		.loc 1 300 0
 1384 104b 8B8520FF 		movl	-224(%rbp), %eax
 1384      FFFF
 1385 1051 4863D0   		movslq	%eax, %rdx
 1386 1054 4889D0   		movq	%rdx, %rax
 1387 1057 48C1E002 		salq	$2, %rax
 1388 105b 4801D0   		addq	%rdx, %rax
 1389 105e 48C1E002 		salq	$2, %rax
 1390 1062 4801E8   		addq	%rbp, %rax
 1391 1065 482DA000 		subq	$160, %rax
 1391      0000
 1392 106b 8B00     		movl	(%rax), %eax
 1393 106d 898524FF 		movl	%eax, -220(%rbp)
 1393      FFFF
 301:main_final_with_sync.c **** 		int track_ok = arr[i][3];
 1394              		.loc 1 301 0
 1395 1073 8B8520FF 		movl	-224(%rbp), %eax
 1395      FFFF
 1396 1079 4863D0   		movslq	%eax, %rdx
 1397 107c 4889D0   		movq	%rdx, %rax
 1398 107f 48C1E002 		salq	$2, %rax
 1399 1083 4801D0   		addq	%rdx, %rax
 1400 1086 48C1E002 		salq	$2, %rax
 1401 108a 4801E8   		addq	%rbp, %rax
 1402 108d 482DA400 		subq	$164, %rax
 1402      0000
 1403 1093 8B00     		movl	(%rax), %eax
 1404 1095 898528FF 		movl	%eax, -216(%rbp)
 1404      FFFF
 302:main_final_with_sync.c **** 		int direction = arr[i][2];
 1405              		.loc 1 302 0
 1406 109b 8B8520FF 		movl	-224(%rbp), %eax
 1406      FFFF
 1407 10a1 4863D0   		movslq	%eax, %rdx
 1408 10a4 4889D0   		movq	%rdx, %rax
 1409 10a7 48C1E002 		salq	$2, %rax
 1410 10ab 4801D0   		addq	%rdx, %rax
 1411 10ae 48C1E002 		salq	$2, %rax
 1412 10b2 4801E8   		addq	%rbp, %rax
 1413 10b5 482DA800 		subq	$168, %rax
 1413      0000
 1414 10bb 8B00     		movl	(%rax), %eax
 1415 10bd 89852CFF 		movl	%eax, -212(%rbp)
 1415      FFFF
 303:main_final_with_sync.c **** 
 304:main_final_with_sync.c **** 		final_arr[i][0] = conversion[next_signal][2] -48;
 1416              		.loc 1 304 0
 1417 10c3 8B8520FF 		movl	-224(%rbp), %eax
 1417      FFFF
 1418 10c9 4898     		cltq
 1419 10cb 48C1E005 		salq	$5, %rax
 1420 10cf 4889C2   		movq	%rax, %rdx
 1421 10d2 488B85F0 		movq	-272(%rbp), %rax
 1421      FEFFFF
 1422 10d9 488D0C02 		leaq	(%rdx,%rax), %rcx
 1423 10dd 8B8524FF 		movl	-220(%rbp), %eax
 1423      FFFF
 1424 10e3 4863D0   		movslq	%eax, %rdx
 1425 10e6 4889D0   		movq	%rdx, %rax
 1426 10e9 4801C0   		addq	%rax, %rax
 1427 10ec 4801D0   		addq	%rdx, %rax
 1428 10ef 4801E8   		addq	%rbp, %rax
 1429 10f2 482DCE00 		subq	$206, %rax
 1429      0000
 1430 10f8 0FB600   		movzbl	(%rax), %eax
 1431 10fb 0FBEC0   		movsbl	%al, %eax
 1432 10fe 83E830   		subl	$48, %eax
 1433 1101 8901     		movl	%eax, (%rcx)
 305:main_final_with_sync.c **** 		final_arr[i][1] = conversion[next_signal][1] -48;
 1434              		.loc 1 305 0
 1435 1103 8B8520FF 		movl	-224(%rbp), %eax
 1435      FFFF
 1436 1109 4898     		cltq
 1437 110b 48C1E005 		salq	$5, %rax
 1438 110f 4889C2   		movq	%rax, %rdx
 1439 1112 488B85F0 		movq	-272(%rbp), %rax
 1439      FEFFFF
 1440 1119 488D0C02 		leaq	(%rdx,%rax), %rcx
 1441 111d 8B8524FF 		movl	-220(%rbp), %eax
 1441      FFFF
 1442 1123 4863D0   		movslq	%eax, %rdx
 1443 1126 4889D0   		movq	%rdx, %rax
 1444 1129 4801C0   		addq	%rax, %rax
 1445 112c 4801D0   		addq	%rdx, %rax
 1446 112f 4801E8   		addq	%rbp, %rax
 1447 1132 482DCF00 		subq	$207, %rax
 1447      0000
 1448 1138 0FB600   		movzbl	(%rax), %eax
 1449 113b 0FBEC0   		movsbl	%al, %eax
 1450 113e 83E830   		subl	$48, %eax
 1451 1141 894104   		movl	%eax, 4(%rcx)
 306:main_final_with_sync.c **** 		final_arr[i][2] = conversion[next_signal][0] -48;
 1452              		.loc 1 306 0
 1453 1144 8B8520FF 		movl	-224(%rbp), %eax
 1453      FFFF
 1454 114a 4898     		cltq
 1455 114c 48C1E005 		salq	$5, %rax
 1456 1150 4889C2   		movq	%rax, %rdx
 1457 1153 488B85F0 		movq	-272(%rbp), %rax
 1457      FEFFFF
 1458 115a 488D0C02 		leaq	(%rdx,%rax), %rcx
 1459 115e 8B8524FF 		movl	-220(%rbp), %eax
 1459      FFFF
 1460 1164 4863D0   		movslq	%eax, %rdx
 1461 1167 4889D0   		movq	%rdx, %rax
 1462 116a 4801C0   		addq	%rax, %rax
 1463 116d 4801D0   		addq	%rdx, %rax
 1464 1170 4801E8   		addq	%rbp, %rax
 1465 1173 482DD000 		subq	$208, %rax
 1465      0000
 1466 1179 0FB600   		movzbl	(%rax), %eax
 1467 117c 0FBEC0   		movsbl	%al, %eax
 1468 117f 83E830   		subl	$48, %eax
 1469 1182 894108   		movl	%eax, 8(%rcx)
 307:main_final_with_sync.c **** 
 308:main_final_with_sync.c **** 		final_arr[i][3] = conversion[direction][2] -48;
 1470              		.loc 1 308 0
 1471 1185 8B8520FF 		movl	-224(%rbp), %eax
 1471      FFFF
 1472 118b 4898     		cltq
 1473 118d 48C1E005 		salq	$5, %rax
 1474 1191 4889C2   		movq	%rax, %rdx
 1475 1194 488B85F0 		movq	-272(%rbp), %rax
 1475      FEFFFF
 1476 119b 488D0C02 		leaq	(%rdx,%rax), %rcx
 1477 119f 8B852CFF 		movl	-212(%rbp), %eax
 1477      FFFF
 1478 11a5 4863D0   		movslq	%eax, %rdx
 1479 11a8 4889D0   		movq	%rdx, %rax
 1480 11ab 4801C0   		addq	%rax, %rax
 1481 11ae 4801D0   		addq	%rdx, %rax
 1482 11b1 4801E8   		addq	%rbp, %rax
 1483 11b4 482DCE00 		subq	$206, %rax
 1483      0000
 1484 11ba 0FB600   		movzbl	(%rax), %eax
 1485 11bd 0FBEC0   		movsbl	%al, %eax
 1486 11c0 83E830   		subl	$48, %eax
 1487 11c3 89410C   		movl	%eax, 12(%rcx)
 309:main_final_with_sync.c **** 		final_arr[i][4] = conversion[direction][1] -48;
 1488              		.loc 1 309 0
 1489 11c6 8B8520FF 		movl	-224(%rbp), %eax
 1489      FFFF
 1490 11cc 4898     		cltq
 1491 11ce 48C1E005 		salq	$5, %rax
 1492 11d2 4889C2   		movq	%rax, %rdx
 1493 11d5 488B85F0 		movq	-272(%rbp), %rax
 1493      FEFFFF
 1494 11dc 488D0C02 		leaq	(%rdx,%rax), %rcx
 1495 11e0 8B852CFF 		movl	-212(%rbp), %eax
 1495      FFFF
 1496 11e6 4863D0   		movslq	%eax, %rdx
 1497 11e9 4889D0   		movq	%rdx, %rax
 1498 11ec 4801C0   		addq	%rax, %rax
 1499 11ef 4801D0   		addq	%rdx, %rax
 1500 11f2 4801E8   		addq	%rbp, %rax
 1501 11f5 482DCF00 		subq	$207, %rax
 1501      0000
 1502 11fb 0FB600   		movzbl	(%rax), %eax
 1503 11fe 0FBEC0   		movsbl	%al, %eax
 1504 1201 83E830   		subl	$48, %eax
 1505 1204 894110   		movl	%eax, 16(%rcx)
 310:main_final_with_sync.c **** 		final_arr[i][5] = conversion[direction][0] -48;
 1506              		.loc 1 310 0
 1507 1207 8B8520FF 		movl	-224(%rbp), %eax
 1507      FFFF
 1508 120d 4898     		cltq
 1509 120f 48C1E005 		salq	$5, %rax
 1510 1213 4889C2   		movq	%rax, %rdx
 1511 1216 488B85F0 		movq	-272(%rbp), %rax
 1511      FEFFFF
 1512 121d 488D0C02 		leaq	(%rdx,%rax), %rcx
 1513 1221 8B852CFF 		movl	-212(%rbp), %eax
 1513      FFFF
 1514 1227 4863D0   		movslq	%eax, %rdx
 1515 122a 4889D0   		movq	%rdx, %rax
 1516 122d 4801C0   		addq	%rax, %rax
 1517 1230 4801D0   		addq	%rdx, %rax
 1518 1233 4801E8   		addq	%rbp, %rax
 1519 1236 482DD000 		subq	$208, %rax
 1519      0000
 1520 123c 0FB600   		movzbl	(%rax), %eax
 1521 123f 0FBEC0   		movsbl	%al, %eax
 1522 1242 83E830   		subl	$48, %eax
 1523 1245 894114   		movl	%eax, 20(%rcx)
 311:main_final_with_sync.c **** 
 312:main_final_with_sync.c **** 		final_arr[i][6] = track_ok;
 1524              		.loc 1 312 0
 1525 1248 8B8520FF 		movl	-224(%rbp), %eax
 1525      FFFF
 1526 124e 4898     		cltq
 1527 1250 48C1E005 		salq	$5, %rax
 1528 1254 4889C2   		movq	%rax, %rdx
 1529 1257 488B85F0 		movq	-272(%rbp), %rax
 1529      FEFFFF
 1530 125e 4801C2   		addq	%rax, %rdx
 1531 1261 8B8528FF 		movl	-216(%rbp), %eax
 1531      FFFF
 1532 1267 894218   		movl	%eax, 24(%rdx)
 313:main_final_with_sync.c **** 
 314:main_final_with_sync.c **** 		if(final_arr[i][7] != 0 || final_arr[i][7] == -1)
 1533              		.loc 1 314 0
 1534 126a 8B8520FF 		movl	-224(%rbp), %eax
 1534      FFFF
 1535 1270 4898     		cltq
 1536 1272 48C1E005 		salq	$5, %rax
 1537 1276 4889C2   		movq	%rax, %rdx
 1538 1279 488B85F0 		movq	-272(%rbp), %rax
 1538      FEFFFF
 1539 1280 4801D0   		addq	%rdx, %rax
 1540 1283 8B401C   		movl	28(%rax), %eax
 1541 1286 85C0     		testl	%eax, %eax
 1542 1288 7521     		jne	.L69
 1543              		.loc 1 314 0 is_stmt 0 discriminator 1
 1544 128a 8B8520FF 		movl	-224(%rbp), %eax
 1544      FFFF
 1545 1290 4898     		cltq
 1546 1292 48C1E005 		salq	$5, %rax
 1547 1296 4889C2   		movq	%rax, %rdx
 1548 1299 488B85F0 		movq	-272(%rbp), %rax
 1548      FEFFFF
 1549 12a0 4801D0   		addq	%rdx, %rax
 1550 12a3 8B401C   		movl	28(%rax), %eax
 1551 12a6 83F8FF   		cmpl	$-1, %eax
 1552 12a9 7520     		jne	.L70
 1553              	.L69:
 315:main_final_with_sync.c **** 		{
 316:main_final_with_sync.c **** 			final_arr[i][7] = 1;
 1554              		.loc 1 316 0 is_stmt 1
 1555 12ab 8B8520FF 		movl	-224(%rbp), %eax
 1555      FFFF
 1556 12b1 4898     		cltq
 1557 12b3 48C1E005 		salq	$5, %rax
 1558 12b7 4889C2   		movq	%rax, %rdx
 1559 12ba 488B85F0 		movq	-272(%rbp), %rax
 1559      FEFFFF
 1560 12c1 4801D0   		addq	%rdx, %rax
 1561 12c4 C7401C01 		movl	$1, 28(%rax)
 1561      000000
 1562              	.L70:
 1563              	.LBE22:
 298:main_final_with_sync.c **** 	{
 1564              		.loc 1 298 0 discriminator 2
 1565 12cb 838520FF 		addl	$1, -224(%rbp)
 1565      FFFF01
 1566              	.L68:
 298:main_final_with_sync.c **** 	{
 1567              		.loc 1 298 0 is_stmt 0 discriminator 1
 1568 12d2 83BD20FF 		cmpl	$7, -224(%rbp)
 1568      FFFF07
 1569 12d9 0F8E6CFD 		jle	.L71
 1569      FFFF
 1570              	.LBE21:
 317:main_final_with_sync.c **** 		}
 318:main_final_with_sync.c **** 	}
 319:main_final_with_sync.c **** 
 320:main_final_with_sync.c **** }
 1571              		.loc 1 320 0 is_stmt 1
 1572 12df 90       		nop
 1573 12e0 488B45F8 		movq	-8(%rbp), %rax
 1574 12e4 64483304 		xorq	%fs:40, %rax
 1574      25280000 
 1574      00
 1575 12ed 7405     		je	.L72
 1576 12ef E8000000 		call	__stack_chk_fail
 1576      00
 1577              	.L72:
 1578 12f4 C9       		leave
 1579              		.cfi_def_cfa 7, 8
 1580 12f5 C3       		ret
 1581              		.cfi_endproc
 1582              	.LFE12:
 1584              		.section	.rodata
 1585              	.LC4:
 1586 0048 75696E74 		.string	"uint8"
 1586      3800
 1587              	.LC5:
 1588 004e 25730A20 		.string	"%s\n "
 1588      00
 1589              		.text
 1590              		.globl	uint8ToBin
 1592              	uint8ToBin:
 1593              	.LFB13:
 321:main_final_with_sync.c **** 
 322:main_final_with_sync.c **** void uint8ToBin(uint8 arr[], int rec[])
 323:main_final_with_sync.c **** {
 1594              		.loc 1 323 0
 1595              		.cfi_startproc
 1596 12f6 55       		pushq	%rbp
 1597              		.cfi_def_cfa_offset 16
 1598              		.cfi_offset 6, -16
 1599 12f7 4889E5   		movq	%rsp, %rbp
 1600              		.cfi_def_cfa_register 6
 1601 12fa 4883EC20 		subq	$32, %rsp
 1602 12fe 48897DE8 		movq	%rdi, -24(%rbp)
 1603 1302 488975E0 		movq	%rsi, -32(%rbp)
 324:main_final_with_sync.c **** 	printf("%s\n ", "uint8");
 1604              		.loc 1 324 0
 1605 1306 BE000000 		movl	$.LC4, %esi
 1605      00
 1606 130b BF000000 		movl	$.LC5, %edi
 1606      00
 1607 1310 B8000000 		movl	$0, %eax
 1607      00
 1608 1315 E8000000 		call	printf
 1608      00
 1609              	.LBB23:
 325:main_final_with_sync.c **** 
 326:main_final_with_sync.c **** 	for (int i = 0; i < 4; ++i)
 1610              		.loc 1 326 0
 1611 131a C745F800 		movl	$0, -8(%rbp)
 1611      000000
 1612 1321 EB5C     		jmp	.L74
 1613              	.L77:
 1614              	.LBB24:
 327:main_final_with_sync.c **** 	{
 328:main_final_with_sync.c **** 		uint8 tempssss= arr[i];
 1615              		.loc 1 328 0
 1616 1323 8B45F8   		movl	-8(%rbp), %eax
 1617 1326 4863D0   		movslq	%eax, %rdx
 1618 1329 488B45E8 		movq	-24(%rbp), %rax
 1619 132d 4801D0   		addq	%rdx, %rax
 1620 1330 0FB600   		movzbl	(%rax), %eax
 1621 1333 8845F7   		movb	%al, -9(%rbp)
 1622              	.LBB25:
 329:main_final_with_sync.c **** 		for(int k=0;k<8;k++)
 1623              		.loc 1 329 0
 1624 1336 C745FC00 		movl	$0, -4(%rbp)
 1624      000000
 1625 133d EB36     		jmp	.L75
 1626              	.L76:
 330:main_final_with_sync.c **** 		{
 331:main_final_with_sync.c **** 			rec[8*i+k] =(int) (tempssss % 2);
 1627              		.loc 1 331 0 discriminator 3
 1628 133f 8B45F8   		movl	-8(%rbp), %eax
 1629 1342 8D14C500 		leal	0(,%rax,8), %edx
 1629      000000
 1630 1349 8B45FC   		movl	-4(%rbp), %eax
 1631 134c 01D0     		addl	%edx, %eax
 1632 134e 4898     		cltq
 1633 1350 488D1485 		leaq	0(,%rax,4), %rdx
 1633      00000000 
 1634 1358 488B45E0 		movq	-32(%rbp), %rax
 1635 135c 4801D0   		addq	%rdx, %rax
 1636 135f 0FB655F7 		movzbl	-9(%rbp), %edx
 1637 1363 83E201   		andl	$1, %edx
 1638 1366 8910     		movl	%edx, (%rax)
 332:main_final_with_sync.c **** 			tempssss = tempssss/2;
 1639              		.loc 1 332 0 discriminator 3
 1640 1368 0FB645F7 		movzbl	-9(%rbp), %eax
 1641 136c D0E8     		shrb	%al
 1642 136e 8845F7   		movb	%al, -9(%rbp)
 329:main_final_with_sync.c **** 		for(int k=0;k<8;k++)
 1643              		.loc 1 329 0 discriminator 3
 1644 1371 8345FC01 		addl	$1, -4(%rbp)
 1645              	.L75:
 329:main_final_with_sync.c **** 		for(int k=0;k<8;k++)
 1646              		.loc 1 329 0 is_stmt 0 discriminator 1
 1647 1375 837DFC07 		cmpl	$7, -4(%rbp)
 1648 1379 7EC4     		jle	.L76
 1649              	.LBE25:
 1650              	.LBE24:
 326:main_final_with_sync.c **** 	{
 1651              		.loc 1 326 0 is_stmt 1 discriminator 2
 1652 137b 8345F801 		addl	$1, -8(%rbp)
 1653              	.L74:
 326:main_final_with_sync.c **** 	{
 1654              		.loc 1 326 0 is_stmt 0 discriminator 1
 1655 137f 837DF803 		cmpl	$3, -8(%rbp)
 1656 1383 7E9E     		jle	.L77
 1657              	.LBE23:
 333:main_final_with_sync.c **** 		}
 334:main_final_with_sync.c **** 	}
 335:main_final_with_sync.c **** }
 1658              		.loc 1 335 0 is_stmt 1
 1659 1385 90       		nop
 1660 1386 C9       		leave
 1661              		.cfi_def_cfa 7, 8
 1662 1387 C3       		ret
 1663              		.cfi_endproc
 1664              	.LFE13:
 1666              		.section	.rodata
 1667              	.LC6:
 1668 0053 7200     		.string	"r"
 1669 0055 000000   		.align 8
 1670              	.LC7:
 1671 0058 2F686F6D 		.string	"/home/shubham/Desktop/track_data.csv"
 1671      652F7368 
 1671      75626861 
 1671      6D2F4465 
 1671      736B746F 
 1672              	.LC8:
 1673 007d 25642C25 		.string	"%d,%d,%d,%d,%d"
 1673      642C2564 
 1673      2C25642C 
 1673      256400
 1674              	.LC9:
 1675 008c 45786973 		.string	"Existing track_data"
 1675      74696E67 
 1675      20747261 
 1675      636B5F64 
 1675      61746100 
 1676              	.LC10:
 1677 00a0 25642000 		.string	"%d "
 1678              	.LC11:
 1679 00a4 7700     		.string	"w"
 1680              	.LC12:
 1681 00a6 25642C25 		.string	"%d,%d,%d,%d,%d\n"
 1681      642C2564 
 1681      2C25642C 
 1681      25640A00 
 1682              	.LC13:
 1683 00b6 55706461 		.string	"Updated track_data"
 1683      74656420 
 1683      74726163 
 1683      6B5F6461 
 1683      746100
 1684              		.text
 1685              		.globl	writecsv
 1687              	writecsv:
 1688              	.LFB14:
 336:main_final_with_sync.c **** 
 337:main_final_with_sync.c **** void writecsv(int x_cord, int y_cord, int ok, int direction, int next)
 338:main_final_with_sync.c **** {
 1689              		.loc 1 338 0
 1690              		.cfi_startproc
 1691 1388 55       		pushq	%rbp
 1692              		.cfi_def_cfa_offset 16
 1693              		.cfi_offset 6, -16
 1694 1389 4889E5   		movq	%rsp, %rbp
 1695              		.cfi_def_cfa_register 6
 1696 138c 4881EC50 		subq	$2128, %rsp
 1696      080000
 1697 1393 89BDCCF7 		movl	%edi, -2100(%rbp)
 1697      FFFF
 1698 1399 89B5C8F7 		movl	%esi, -2104(%rbp)
 1698      FFFF
 1699 139f 8995C4F7 		movl	%edx, -2108(%rbp)
 1699      FFFF
 1700 13a5 898DC0F7 		movl	%ecx, -2112(%rbp)
 1700      FFFF
 1701 13ab 448985BC 		movl	%r8d, -2116(%rbp)
 1701      F7FFFF
 1702              		.loc 1 338 0
 1703 13b2 64488B04 		movq	%fs:40, %rax
 1703      25280000 
 1703      00
 1704 13bb 488945F8 		movq	%rax, -8(%rbp)
 1705 13bf 31C0     		xorl	%eax, %eax
 339:main_final_with_sync.c **** 	FILE *fp1 = fopen("/home/shubham/Desktop/track_data.csv", "r");
 1706              		.loc 1 339 0
 1707 13c1 BE000000 		movl	$.LC6, %esi
 1707      00
 1708 13c6 BF000000 		movl	$.LC7, %edi
 1708      00
 1709 13cb E8000000 		call	fopen
 1709      00
 1710 13d0 48898510 		movq	%rax, -2032(%rbp)
 1710      F8FFFF
 340:main_final_with_sync.c **** 	int mat[100][5];
 341:main_final_with_sync.c **** 	//int temp;
 342:main_final_with_sync.c **** 	int i =0;
 1711              		.loc 1 342 0
 1712 13d7 C785ECF7 		movl	$0, -2068(%rbp)
 1712      FFFF0000 
 1712      0000
 343:main_final_with_sync.c **** 	int a,b,c,d,e;
 344:main_final_with_sync.c **** 	while (fscanf(fp1, "%d,%d,%d,%d,%d", &a, &b,&c,&d,&e) == 5)
 1713              		.loc 1 344 0
 1714 13e1 E9CF0000 		jmp	.L79
 1714      00
 1715              	.L80:
 345:main_final_with_sync.c **** 	{
 346:main_final_with_sync.c **** 
 347:main_final_with_sync.c **** 		mat[i][4] = a;
 1716              		.loc 1 347 0
 1717 13e6 8B8DD8F7 		movl	-2088(%rbp), %ecx
 1717      FFFF
 1718 13ec 8B85ECF7 		movl	-2068(%rbp), %eax
 1718      FFFF
 1719 13f2 4863D0   		movslq	%eax, %rdx
 1720 13f5 4889D0   		movq	%rdx, %rax
 1721 13f8 48C1E002 		salq	$2, %rax
 1722 13fc 4801D0   		addq	%rdx, %rax
 1723 13ff 48C1E002 		salq	$2, %rax
 1724 1403 4801E8   		addq	%rbp, %rax
 1725 1406 482DD007 		subq	$2000, %rax
 1725      0000
 1726 140c 8908     		movl	%ecx, (%rax)
 348:main_final_with_sync.c **** 		mat[i][3] = b;
 1727              		.loc 1 348 0
 1728 140e 8B8DDCF7 		movl	-2084(%rbp), %ecx
 1728      FFFF
 1729 1414 8B85ECF7 		movl	-2068(%rbp), %eax
 1729      FFFF
 1730 141a 4863D0   		movslq	%eax, %rdx
 1731 141d 4889D0   		movq	%rdx, %rax
 1732 1420 48C1E002 		salq	$2, %rax
 1733 1424 4801D0   		addq	%rdx, %rax
 1734 1427 48C1E002 		salq	$2, %rax
 1735 142b 4801E8   		addq	%rbp, %rax
 1736 142e 482DD407 		subq	$2004, %rax
 1736      0000
 1737 1434 8908     		movl	%ecx, (%rax)
 349:main_final_with_sync.c **** 		mat[i][2] = c;
 1738              		.loc 1 349 0
 1739 1436 8B8DE0F7 		movl	-2080(%rbp), %ecx
 1739      FFFF
 1740 143c 8B85ECF7 		movl	-2068(%rbp), %eax
 1740      FFFF
 1741 1442 4863D0   		movslq	%eax, %rdx
 1742 1445 4889D0   		movq	%rdx, %rax
 1743 1448 48C1E002 		salq	$2, %rax
 1744 144c 4801D0   		addq	%rdx, %rax
 1745 144f 48C1E002 		salq	$2, %rax
 1746 1453 4801E8   		addq	%rbp, %rax
 1747 1456 482DD807 		subq	$2008, %rax
 1747      0000
 1748 145c 8908     		movl	%ecx, (%rax)
 350:main_final_with_sync.c **** 		mat[i][1] = d;
 1749              		.loc 1 350 0
 1750 145e 8B8DE4F7 		movl	-2076(%rbp), %ecx
 1750      FFFF
 1751 1464 8B85ECF7 		movl	-2068(%rbp), %eax
 1751      FFFF
 1752 146a 4863D0   		movslq	%eax, %rdx
 1753 146d 4889D0   		movq	%rdx, %rax
 1754 1470 48C1E002 		salq	$2, %rax
 1755 1474 4801D0   		addq	%rdx, %rax
 1756 1477 48C1E002 		salq	$2, %rax
 1757 147b 4801E8   		addq	%rbp, %rax
 1758 147e 482DDC07 		subq	$2012, %rax
 1758      0000
 1759 1484 8908     		movl	%ecx, (%rax)
 351:main_final_with_sync.c **** 		mat[i][0] = e;
 1760              		.loc 1 351 0
 1761 1486 8B8DE8F7 		movl	-2072(%rbp), %ecx
 1761      FFFF
 1762 148c 8B85ECF7 		movl	-2068(%rbp), %eax
 1762      FFFF
 1763 1492 4863D0   		movslq	%eax, %rdx
 1764 1495 4889D0   		movq	%rdx, %rax
 1765 1498 48C1E002 		salq	$2, %rax
 1766 149c 4801D0   		addq	%rdx, %rax
 1767 149f 48C1E002 		salq	$2, %rax
 1768 14a3 4801E8   		addq	%rbp, %rax
 1769 14a6 482DE007 		subq	$2016, %rax
 1769      0000
 1770 14ac 8908     		movl	%ecx, (%rax)
 352:main_final_with_sync.c **** 		i++; 
 1771              		.loc 1 352 0
 1772 14ae 8385ECF7 		addl	$1, -2068(%rbp)
 1772      FFFF01
 1773              	.L79:
 344:main_final_with_sync.c **** 	{
 1774              		.loc 1 344 0
 1775 14b5 4C8D85E4 		leaq	-2076(%rbp), %r8
 1775      F7FFFF
 1776 14bc 488DBDE0 		leaq	-2080(%rbp), %rdi
 1776      F7FFFF
 1777 14c3 488D8DDC 		leaq	-2084(%rbp), %rcx
 1777      F7FFFF
 1778 14ca 488D95D8 		leaq	-2088(%rbp), %rdx
 1778      F7FFFF
 1779 14d1 488B8510 		movq	-2032(%rbp), %rax
 1779      F8FFFF
 1780 14d8 4883EC08 		subq	$8, %rsp
 1781 14dc 488DB5E8 		leaq	-2072(%rbp), %rsi
 1781      F7FFFF
 1782 14e3 56       		pushq	%rsi
 1783 14e4 4D89C1   		movq	%r8, %r9
 1784 14e7 4989F8   		movq	%rdi, %r8
 1785 14ea BE000000 		movl	$.LC8, %esi
 1785      00
 1786 14ef 4889C7   		movq	%rax, %rdi
 1787 14f2 B8000000 		movl	$0, %eax
 1787      00
 1788 14f7 E8000000 		call	__isoc99_fscanf
 1788      00
 1789 14fc 4883C410 		addq	$16, %rsp
 1790 1500 83F805   		cmpl	$5, %eax
 1791 1503 0F84DDFE 		je	.L80
 1791      FFFF
 353:main_final_with_sync.c **** 	}
 354:main_final_with_sync.c **** 
 355:main_final_with_sync.c **** 	int len = i;
 1792              		.loc 1 355 0
 1793 1509 8B85ECF7 		movl	-2068(%rbp), %eax
 1793      FFFF
 1794 150f 8985F0F7 		movl	%eax, -2064(%rbp)
 1794      FFFF
 356:main_final_with_sync.c **** 
 357:main_final_with_sync.c **** 	printf("%s\n", "Existing track_data");
 1795              		.loc 1 357 0
 1796 1515 BF000000 		movl	$.LC9, %edi
 1796      00
 1797 151a E8000000 		call	puts
 1797      00
 1798              	.LBB26:
 358:main_final_with_sync.c **** 	for(int i=0;i<len;i++)
 1799              		.loc 1 358 0
 1800 151f C785F4F7 		movl	$0, -2060(%rbp)
 1800      FFFF0000 
 1800      0000
 1801 1529 EB69     		jmp	.L81
 1802              	.L84:
 1803              	.LBB27:
 359:main_final_with_sync.c **** 	{
 360:main_final_with_sync.c **** 		for(int j=0;j<5;j++)
 1804              		.loc 1 360 0
 1805 152b C785F8F7 		movl	$0, -2056(%rbp)
 1805      FFFF0000 
 1805      0000
 1806 1535 EB43     		jmp	.L82
 1807              	.L83:
 361:main_final_with_sync.c **** 		{
 362:main_final_with_sync.c **** 			printf("%d ", mat[i][4-j]);
 1808              		.loc 1 362 0 discriminator 3
 1809 1537 B8040000 		movl	$4, %eax
 1809      00
 1810 153c 2B85F8F7 		subl	-2056(%rbp), %eax
 1810      FFFF
 1811 1542 4863C8   		movslq	%eax, %rcx
 1812 1545 8B85F4F7 		movl	-2060(%rbp), %eax
 1812      FFFF
 1813 154b 4863D0   		movslq	%eax, %rdx
 1814 154e 4889D0   		movq	%rdx, %rax
 1815 1551 48C1E002 		salq	$2, %rax
 1816 1555 4801D0   		addq	%rdx, %rax
 1817 1558 4801C8   		addq	%rcx, %rax
 1818 155b 8B848520 		movl	-2016(%rbp,%rax,4), %eax
 1818      F8FFFF
 1819 1562 89C6     		movl	%eax, %esi
 1820 1564 BF000000 		movl	$.LC10, %edi
 1820      00
 1821 1569 B8000000 		movl	$0, %eax
 1821      00
 1822 156e E8000000 		call	printf
 1822      00
 360:main_final_with_sync.c **** 		{
 1823              		.loc 1 360 0 discriminator 3
 1824 1573 8385F8F7 		addl	$1, -2056(%rbp)
 1824      FFFF01
 1825              	.L82:
 360:main_final_with_sync.c **** 		{
 1826              		.loc 1 360 0 is_stmt 0 discriminator 1
 1827 157a 83BDF8F7 		cmpl	$4, -2056(%rbp)
 1827      FFFF04
 1828 1581 7EB4     		jle	.L83
 1829              	.LBE27:
 363:main_final_with_sync.c **** 		}
 364:main_final_with_sync.c **** 		printf("\n");
 1830              		.loc 1 364 0 is_stmt 1 discriminator 2
 1831 1583 BF0A0000 		movl	$10, %edi
 1831      00
 1832 1588 E8000000 		call	putchar
 1832      00
 358:main_final_with_sync.c **** 	{
 1833              		.loc 1 358 0 discriminator 2
 1834 158d 8385F4F7 		addl	$1, -2060(%rbp)
 1834      FFFF01
 1835              	.L81:
 358:main_final_with_sync.c **** 	{
 1836              		.loc 1 358 0 is_stmt 0 discriminator 1
 1837 1594 8B85F4F7 		movl	-2060(%rbp), %eax
 1837      FFFF
 1838 159a 3B85F0F7 		cmpl	-2064(%rbp), %eax
 1838      FFFF
 1839 15a0 7C89     		jl	.L84
 1840              	.LBE26:
 365:main_final_with_sync.c **** 	}
 366:main_final_with_sync.c **** 
 367:main_final_with_sync.c **** 	printf("\n");
 1841              		.loc 1 367 0 is_stmt 1
 1842 15a2 BF0A0000 		movl	$10, %edi
 1842      00
 1843 15a7 E8000000 		call	putchar
 1843      00
 368:main_final_with_sync.c **** 	FILE *fp2 = fopen("/home/shubham/Desktop/track_data.csv", "w");
 1844              		.loc 1 368 0
 1845 15ac BE000000 		movl	$.LC11, %esi
 1845      00
 1846 15b1 BF000000 		movl	$.LC7, %edi
 1846      00
 1847 15b6 E8000000 		call	fopen
 1847      00
 1848 15bb 48898518 		movq	%rax, -2024(%rbp)
 1848      F8FFFF
 369:main_final_with_sync.c **** 	
 370:main_final_with_sync.c **** 	int counter = 0;
 1849              		.loc 1 370 0
 1850 15c2 C785FCF7 		movl	$0, -2052(%rbp)
 1850      FFFF0000 
 1850      0000
 1851              	.LBB28:
 371:main_final_with_sync.c **** 	for (int i = 0; i < len; ++i)
 1852              		.loc 1 371 0
 1853 15cc C78500F8 		movl	$0, -2048(%rbp)
 1853      FFFF0000 
 1853      0000
 1854 15d6 E9E60000 		jmp	.L85
 1854      00
 1855              	.L87:
 372:main_final_with_sync.c **** 	{
 373:main_final_with_sync.c **** 		if(mat[i][4] == x_cord && mat[i][3] == y_cord && mat[i][2] == direction)
 1856              		.loc 1 373 0
 1857 15db 8B8500F8 		movl	-2048(%rbp), %eax
 1857      FFFF
 1858 15e1 4863D0   		movslq	%eax, %rdx
 1859 15e4 4889D0   		movq	%rdx, %rax
 1860 15e7 48C1E002 		salq	$2, %rax
 1861 15eb 4801D0   		addq	%rdx, %rax
 1862 15ee 48C1E002 		salq	$2, %rax
 1863 15f2 4801E8   		addq	%rbp, %rax
 1864 15f5 482DD007 		subq	$2000, %rax
 1864      0000
 1865 15fb 8B00     		movl	(%rax), %eax
 1866 15fd 3B85CCF7 		cmpl	-2100(%rbp), %eax
 1866      FFFF
 1867 1603 0F85B100 		jne	.L86
 1867      0000
 1868              		.loc 1 373 0 is_stmt 0 discriminator 1
 1869 1609 8B8500F8 		movl	-2048(%rbp), %eax
 1869      FFFF
 1870 160f 4863D0   		movslq	%eax, %rdx
 1871 1612 4889D0   		movq	%rdx, %rax
 1872 1615 48C1E002 		salq	$2, %rax
 1873 1619 4801D0   		addq	%rdx, %rax
 1874 161c 48C1E002 		salq	$2, %rax
 1875 1620 4801E8   		addq	%rbp, %rax
 1876 1623 482DD407 		subq	$2004, %rax
 1876      0000
 1877 1629 8B00     		movl	(%rax), %eax
 1878 162b 3B85C8F7 		cmpl	-2104(%rbp), %eax
 1878      FFFF
 1879 1631 0F858300 		jne	.L86
 1879      0000
 1880              		.loc 1 373 0 discriminator 2
 1881 1637 8B8500F8 		movl	-2048(%rbp), %eax
 1881      FFFF
 1882 163d 4863D0   		movslq	%eax, %rdx
 1883 1640 4889D0   		movq	%rdx, %rax
 1884 1643 48C1E002 		salq	$2, %rax
 1885 1647 4801D0   		addq	%rdx, %rax
 1886 164a 48C1E002 		salq	$2, %rax
 1887 164e 4801E8   		addq	%rbp, %rax
 1888 1651 482DD807 		subq	$2008, %rax
 1888      0000
 1889 1657 8B00     		movl	(%rax), %eax
 1890 1659 3B85C0F7 		cmpl	-2112(%rbp), %eax
 1890      FFFF
 1891 165f 7559     		jne	.L86
 374:main_final_with_sync.c **** 		{
 375:main_final_with_sync.c **** 			mat[i][1] = ok;
 1892              		.loc 1 375 0 is_stmt 1
 1893 1661 8B8500F8 		movl	-2048(%rbp), %eax
 1893      FFFF
 1894 1667 4863D0   		movslq	%eax, %rdx
 1895 166a 4889D0   		movq	%rdx, %rax
 1896 166d 48C1E002 		salq	$2, %rax
 1897 1671 4801D0   		addq	%rdx, %rax
 1898 1674 48C1E002 		salq	$2, %rax
 1899 1678 4801E8   		addq	%rbp, %rax
 1900 167b 488D9024 		leaq	-2012(%rax), %rdx
 1900      F8FFFF
 1901 1682 8B85C4F7 		movl	-2108(%rbp), %eax
 1901      FFFF
 1902 1688 8902     		movl	%eax, (%rdx)
 376:main_final_with_sync.c **** 			mat[i][0] = next;
 1903              		.loc 1 376 0
 1904 168a 8B8500F8 		movl	-2048(%rbp), %eax
 1904      FFFF
 1905 1690 4863D0   		movslq	%eax, %rdx
 1906 1693 4889D0   		movq	%rdx, %rax
 1907 1696 48C1E002 		salq	$2, %rax
 1908 169a 4801D0   		addq	%rdx, %rax
 1909 169d 48C1E002 		salq	$2, %rax
 1910 16a1 4801E8   		addq	%rbp, %rax
 1911 16a4 488D9020 		leaq	-2016(%rax), %rdx
 1911      F8FFFF
 1912 16ab 8B85BCF7 		movl	-2116(%rbp), %eax
 1912      FFFF
 1913 16b1 8902     		movl	%eax, (%rdx)
 377:main_final_with_sync.c **** 			counter++;
 1914              		.loc 1 377 0
 1915 16b3 8385FCF7 		addl	$1, -2052(%rbp)
 1915      FFFF01
 1916              	.L86:
 371:main_final_with_sync.c **** 	{
 1917              		.loc 1 371 0 discriminator 2
 1918 16ba 838500F8 		addl	$1, -2048(%rbp)
 1918      FFFF01
 1919              	.L85:
 371:main_final_with_sync.c **** 	{
 1920              		.loc 1 371 0 is_stmt 0 discriminator 1
 1921 16c1 8B8500F8 		movl	-2048(%rbp), %eax
 1921      FFFF
 1922 16c7 3B85F0F7 		cmpl	-2064(%rbp), %eax
 1922      FFFF
 1923 16cd 0F8C08FF 		jl	.L87
 1923      FFFF
 1924              	.LBE28:
 378:main_final_with_sync.c **** 		}
 379:main_final_with_sync.c **** 	}
 380:main_final_with_sync.c **** 
 381:main_final_with_sync.c **** 	if(counter == 0)
 1925              		.loc 1 381 0 is_stmt 1
 1926 16d3 83BDFCF7 		cmpl	$0, -2052(%rbp)
 1926      FFFF00
 1927 16da 0F85D400 		jne	.L88
 1927      0000
 382:main_final_with_sync.c **** 	{
 383:main_final_with_sync.c **** 		mat[len][4] = x_cord;
 1928              		.loc 1 383 0
 1929 16e0 8B85F0F7 		movl	-2064(%rbp), %eax
 1929      FFFF
 1930 16e6 4863D0   		movslq	%eax, %rdx
 1931 16e9 4889D0   		movq	%rdx, %rax
 1932 16ec 48C1E002 		salq	$2, %rax
 1933 16f0 4801D0   		addq	%rdx, %rax
 1934 16f3 48C1E002 		salq	$2, %rax
 1935 16f7 4801E8   		addq	%rbp, %rax
 1936 16fa 488D9030 		leaq	-2000(%rax), %rdx
 1936      F8FFFF
 1937 1701 8B85CCF7 		movl	-2100(%rbp), %eax
 1937      FFFF
 1938 1707 8902     		movl	%eax, (%rdx)
 384:main_final_with_sync.c **** 		mat[len][3] = y_cord;
 1939              		.loc 1 384 0
 1940 1709 8B85F0F7 		movl	-2064(%rbp), %eax
 1940      FFFF
 1941 170f 4863D0   		movslq	%eax, %rdx
 1942 1712 4889D0   		movq	%rdx, %rax
 1943 1715 48C1E002 		salq	$2, %rax
 1944 1719 4801D0   		addq	%rdx, %rax
 1945 171c 48C1E002 		salq	$2, %rax
 1946 1720 4801E8   		addq	%rbp, %rax
 1947 1723 488D902C 		leaq	-2004(%rax), %rdx
 1947      F8FFFF
 1948 172a 8B85C8F7 		movl	-2104(%rbp), %eax
 1948      FFFF
 1949 1730 8902     		movl	%eax, (%rdx)
 385:main_final_with_sync.c **** 		mat[len][2] = direction;
 1950              		.loc 1 385 0
 1951 1732 8B85F0F7 		movl	-2064(%rbp), %eax
 1951      FFFF
 1952 1738 4863D0   		movslq	%eax, %rdx
 1953 173b 4889D0   		movq	%rdx, %rax
 1954 173e 48C1E002 		salq	$2, %rax
 1955 1742 4801D0   		addq	%rdx, %rax
 1956 1745 48C1E002 		salq	$2, %rax
 1957 1749 4801E8   		addq	%rbp, %rax
 1958 174c 488D9028 		leaq	-2008(%rax), %rdx
 1958      F8FFFF
 1959 1753 8B85C0F7 		movl	-2112(%rbp), %eax
 1959      FFFF
 1960 1759 8902     		movl	%eax, (%rdx)
 386:main_final_with_sync.c **** 		mat[len][1] = ok;
 1961              		.loc 1 386 0
 1962 175b 8B85F0F7 		movl	-2064(%rbp), %eax
 1962      FFFF
 1963 1761 4863D0   		movslq	%eax, %rdx
 1964 1764 4889D0   		movq	%rdx, %rax
 1965 1767 48C1E002 		salq	$2, %rax
 1966 176b 4801D0   		addq	%rdx, %rax
 1967 176e 48C1E002 		salq	$2, %rax
 1968 1772 4801E8   		addq	%rbp, %rax
 1969 1775 488D9024 		leaq	-2012(%rax), %rdx
 1969      F8FFFF
 1970 177c 8B85C4F7 		movl	-2108(%rbp), %eax
 1970      FFFF
 1971 1782 8902     		movl	%eax, (%rdx)
 387:main_final_with_sync.c **** 		mat[len][0] = next;
 1972              		.loc 1 387 0
 1973 1784 8B85F0F7 		movl	-2064(%rbp), %eax
 1973      FFFF
 1974 178a 4863D0   		movslq	%eax, %rdx
 1975 178d 4889D0   		movq	%rdx, %rax
 1976 1790 48C1E002 		salq	$2, %rax
 1977 1794 4801D0   		addq	%rdx, %rax
 1978 1797 48C1E002 		salq	$2, %rax
 1979 179b 4801E8   		addq	%rbp, %rax
 1980 179e 488D9020 		leaq	-2016(%rax), %rdx
 1980      F8FFFF
 1981 17a5 8B85BCF7 		movl	-2116(%rbp), %eax
 1981      FFFF
 1982 17ab 8902     		movl	%eax, (%rdx)
 388:main_final_with_sync.c **** 		len++;
 1983              		.loc 1 388 0
 1984 17ad 8385F0F7 		addl	$1, -2064(%rbp)
 1984      FFFF01
 1985              	.L88:
 1986              	.LBB29:
 389:main_final_with_sync.c **** 	}
 390:main_final_with_sync.c **** 
 391:main_final_with_sync.c **** 	for (int i = 0; i < len; ++i)
 1987              		.loc 1 391 0
 1988 17b4 C78504F8 		movl	$0, -2044(%rbp)
 1988      FFFF0000 
 1988      0000
 1989 17be E9DA0000 		jmp	.L89
 1989      00
 1990              	.L90:
 392:main_final_with_sync.c **** 	{
 393:main_final_with_sync.c **** 		fprintf(fp2, "%d,%d,%d,%d,%d\n", mat[i][4], mat[i][3], mat[i][2], mat[i][1], mat[i][0]);
 1991              		.loc 1 393 0 discriminator 3
 1992 17c3 8B8504F8 		movl	-2044(%rbp), %eax
 1992      FFFF
 1993 17c9 4863D0   		movslq	%eax, %rdx
 1994 17cc 4889D0   		movq	%rdx, %rax
 1995 17cf 48C1E002 		salq	$2, %rax
 1996 17d3 4801D0   		addq	%rdx, %rax
 1997 17d6 48C1E002 		salq	$2, %rax
 1998 17da 4801E8   		addq	%rbp, %rax
 1999 17dd 482DE007 		subq	$2016, %rax
 1999      0000
 2000 17e3 8B30     		movl	(%rax), %esi
 2001 17e5 8B8504F8 		movl	-2044(%rbp), %eax
 2001      FFFF
 2002 17eb 4863D0   		movslq	%eax, %rdx
 2003 17ee 4889D0   		movq	%rdx, %rax
 2004 17f1 48C1E002 		salq	$2, %rax
 2005 17f5 4801D0   		addq	%rdx, %rax
 2006 17f8 48C1E002 		salq	$2, %rax
 2007 17fc 4801E8   		addq	%rbp, %rax
 2008 17ff 482DDC07 		subq	$2012, %rax
 2008      0000
 2009 1805 448B00   		movl	(%rax), %r8d
 2010 1808 8B8504F8 		movl	-2044(%rbp), %eax
 2010      FFFF
 2011 180e 4863D0   		movslq	%eax, %rdx
 2012 1811 4889D0   		movq	%rdx, %rax
 2013 1814 48C1E002 		salq	$2, %rax
 2014 1818 4801D0   		addq	%rdx, %rax
 2015 181b 48C1E002 		salq	$2, %rax
 2016 181f 4801E8   		addq	%rbp, %rax
 2017 1822 482DD807 		subq	$2008, %rax
 2017      0000
 2018 1828 8B38     		movl	(%rax), %edi
 2019 182a 8B8504F8 		movl	-2044(%rbp), %eax
 2019      FFFF
 2020 1830 4863D0   		movslq	%eax, %rdx
 2021 1833 4889D0   		movq	%rdx, %rax
 2022 1836 48C1E002 		salq	$2, %rax
 2023 183a 4801D0   		addq	%rdx, %rax
 2024 183d 48C1E002 		salq	$2, %rax
 2025 1841 4801E8   		addq	%rbp, %rax
 2026 1844 482DD407 		subq	$2004, %rax
 2026      0000
 2027 184a 8B08     		movl	(%rax), %ecx
 2028 184c 8B8504F8 		movl	-2044(%rbp), %eax
 2028      FFFF
 2029 1852 4863D0   		movslq	%eax, %rdx
 2030 1855 4889D0   		movq	%rdx, %rax
 2031 1858 48C1E002 		salq	$2, %rax
 2032 185c 4801D0   		addq	%rdx, %rax
 2033 185f 48C1E002 		salq	$2, %rax
 2034 1863 4801E8   		addq	%rbp, %rax
 2035 1866 482DD007 		subq	$2000, %rax
 2035      0000
 2036 186c 8B10     		movl	(%rax), %edx
 2037 186e 488B8518 		movq	-2024(%rbp), %rax
 2037      F8FFFF
 2038 1875 4883EC08 		subq	$8, %rsp
 2039 1879 56       		pushq	%rsi
 2040 187a 4589C1   		movl	%r8d, %r9d
 2041 187d 4189F8   		movl	%edi, %r8d
 2042 1880 BE000000 		movl	$.LC12, %esi
 2042      00
 2043 1885 4889C7   		movq	%rax, %rdi
 2044 1888 B8000000 		movl	$0, %eax
 2044      00
 2045 188d E8000000 		call	fprintf
 2045      00
 2046 1892 4883C410 		addq	$16, %rsp
 391:main_final_with_sync.c **** 	{
 2047              		.loc 1 391 0 discriminator 3
 2048 1896 838504F8 		addl	$1, -2044(%rbp)
 2048      FFFF01
 2049              	.L89:
 391:main_final_with_sync.c **** 	{
 2050              		.loc 1 391 0 is_stmt 0 discriminator 1
 2051 189d 8B8504F8 		movl	-2044(%rbp), %eax
 2051      FFFF
 2052 18a3 3B85F0F7 		cmpl	-2064(%rbp), %eax
 2052      FFFF
 2053 18a9 0F8C14FF 		jl	.L90
 2053      FFFF
 2054              	.LBE29:
 394:main_final_with_sync.c **** 	}
 395:main_final_with_sync.c **** 
 396:main_final_with_sync.c **** 	printf("%s\n", "Updated track_data");
 2055              		.loc 1 396 0 is_stmt 1
 2056 18af BF000000 		movl	$.LC13, %edi
 2056      00
 2057 18b4 E8000000 		call	puts
 2057      00
 2058              	.LBB30:
 397:main_final_with_sync.c **** 	for(int i=0;i<len;i++)
 2059              		.loc 1 397 0
 2060 18b9 C78508F8 		movl	$0, -2040(%rbp)
 2060      FFFF0000 
 2060      0000
 2061 18c3 EB69     		jmp	.L91
 2062              	.L94:
 2063              	.LBB31:
 398:main_final_with_sync.c **** 	{
 399:main_final_with_sync.c **** 		for(int j=0;j<5;j++)
 2064              		.loc 1 399 0
 2065 18c5 C7850CF8 		movl	$0, -2036(%rbp)
 2065      FFFF0000 
 2065      0000
 2066 18cf EB43     		jmp	.L92
 2067              	.L93:
 400:main_final_with_sync.c **** 		{
 401:main_final_with_sync.c **** 			printf("%d ", mat[i][4-j]);
 2068              		.loc 1 401 0 discriminator 3
 2069 18d1 B8040000 		movl	$4, %eax
 2069      00
 2070 18d6 2B850CF8 		subl	-2036(%rbp), %eax
 2070      FFFF
 2071 18dc 4863C8   		movslq	%eax, %rcx
 2072 18df 8B8508F8 		movl	-2040(%rbp), %eax
 2072      FFFF
 2073 18e5 4863D0   		movslq	%eax, %rdx
 2074 18e8 4889D0   		movq	%rdx, %rax
 2075 18eb 48C1E002 		salq	$2, %rax
 2076 18ef 4801D0   		addq	%rdx, %rax
 2077 18f2 4801C8   		addq	%rcx, %rax
 2078 18f5 8B848520 		movl	-2016(%rbp,%rax,4), %eax
 2078      F8FFFF
 2079 18fc 89C6     		movl	%eax, %esi
 2080 18fe BF000000 		movl	$.LC10, %edi
 2080      00
 2081 1903 B8000000 		movl	$0, %eax
 2081      00
 2082 1908 E8000000 		call	printf
 2082      00
 399:main_final_with_sync.c **** 		{
 2083              		.loc 1 399 0 discriminator 3
 2084 190d 83850CF8 		addl	$1, -2036(%rbp)
 2084      FFFF01
 2085              	.L92:
 399:main_final_with_sync.c **** 		{
 2086              		.loc 1 399 0 is_stmt 0 discriminator 1
 2087 1914 83BD0CF8 		cmpl	$4, -2036(%rbp)
 2087      FFFF04
 2088 191b 7EB4     		jle	.L93
 2089              	.LBE31:
 402:main_final_with_sync.c **** 		}
 403:main_final_with_sync.c **** 		printf("\n");
 2090              		.loc 1 403 0 is_stmt 1 discriminator 2
 2091 191d BF0A0000 		movl	$10, %edi
 2091      00
 2092 1922 E8000000 		call	putchar
 2092      00
 397:main_final_with_sync.c **** 	{
 2093              		.loc 1 397 0 discriminator 2
 2094 1927 838508F8 		addl	$1, -2040(%rbp)
 2094      FFFF01
 2095              	.L91:
 397:main_final_with_sync.c **** 	{
 2096              		.loc 1 397 0 is_stmt 0 discriminator 1
 2097 192e 8B8508F8 		movl	-2040(%rbp), %eax
 2097      FFFF
 2098 1934 3B85F0F7 		cmpl	-2064(%rbp), %eax
 2098      FFFF
 2099 193a 7C89     		jl	.L94
 2100              	.LBE30:
 404:main_final_with_sync.c **** 	}
 405:main_final_with_sync.c **** 	fclose(fp1);
 2101              		.loc 1 405 0 is_stmt 1
 2102 193c 488B8510 		movq	-2032(%rbp), %rax
 2102      F8FFFF
 2103 1943 4889C7   		movq	%rax, %rdi
 2104 1946 E8000000 		call	fclose
 2104      00
 406:main_final_with_sync.c **** 	fclose(fp2);
 2105              		.loc 1 406 0
 2106 194b 488B8518 		movq	-2024(%rbp), %rax
 2106      F8FFFF
 2107 1952 4889C7   		movq	%rax, %rdi
 2108 1955 E8000000 		call	fclose
 2108      00
 407:main_final_with_sync.c **** }
 2109              		.loc 1 407 0
 2110 195a 90       		nop
 2111 195b 488B45F8 		movq	-8(%rbp), %rax
 2112 195f 64483304 		xorq	%fs:40, %rax
 2112      25280000 
 2112      00
 2113 1968 7405     		je	.L95
 2114 196a E8000000 		call	__stack_chk_fail
 2114      00
 2115              	.L95:
 2116 196f C9       		leave
 2117              		.cfi_def_cfa 7, 8
 2118 1970 C3       		ret
 2119              		.cfi_endproc
 2120              	.LFE14:
 2123              	isHexDigit:
 2124              	.LFB15:
 408:main_final_with_sync.c **** 
 409:main_final_with_sync.c **** 
 410:main_final_with_sync.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
 411:main_final_with_sync.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
 412:main_final_with_sync.c **** 
 413:main_final_with_sync.c **** 
 414:main_final_with_sync.c **** static bool isHexDigit(char ch) {
 2125              		.loc 1 414 0
 2126              		.cfi_startproc
 2127 1971 55       		pushq	%rbp
 2128              		.cfi_def_cfa_offset 16
 2129              		.cfi_offset 6, -16
 2130 1972 4889E5   		movq	%rsp, %rbp
 2131              		.cfi_def_cfa_register 6
 2132 1975 89F8     		movl	%edi, %eax
 2133 1977 8845FC   		movb	%al, -4(%rbp)
 415:main_final_with_sync.c **** 	return
 416:main_final_with_sync.c **** 	(ch >= '0' && ch <= '9') ||
 417:main_final_with_sync.c **** 	(ch >= 'a' && ch <= 'f') ||
 2134              		.loc 1 417 0
 2135 197a 807DFC2F 		cmpb	$47, -4(%rbp)
 2136 197e 7E06     		jle	.L97
 416:main_final_with_sync.c **** 	(ch >= 'a' && ch <= 'f') ||
 2137              		.loc 1 416 0
 2138 1980 807DFC39 		cmpb	$57, -4(%rbp)
 2139 1984 7E18     		jle	.L98
 2140              	.L97:
 416:main_final_with_sync.c **** 	(ch >= 'a' && ch <= 'f') ||
 2141              		.loc 1 416 0 is_stmt 0 discriminator 1
 2142 1986 807DFC60 		cmpb	$96, -4(%rbp)
 2143 198a 7E06     		jle	.L99
 2144              		.loc 1 417 0 is_stmt 1
 2145 198c 807DFC66 		cmpb	$102, -4(%rbp)
 2146 1990 7E0C     		jle	.L98
 2147              	.L99:
 2148              		.loc 1 417 0 is_stmt 0 discriminator 2
 2149 1992 807DFC40 		cmpb	$64, -4(%rbp)
 2150 1996 7E0D     		jle	.L100
 418:main_final_with_sync.c **** 	(ch >= 'A' && ch <= 'F');
 2151              		.loc 1 418 0 is_stmt 1
 2152 1998 807DFC46 		cmpb	$70, -4(%rbp)
 2153 199c 7F07     		jg	.L100
 2154              	.L98:
 417:main_final_with_sync.c **** 	(ch >= 'A' && ch <= 'F');
 2155              		.loc 1 417 0 discriminator 1
 2156 199e B8010000 		movl	$1, %eax
 2156      00
 2157 19a3 EB05     		jmp	.L101
 2158              	.L100:
 417:main_final_with_sync.c **** 	(ch >= 'A' && ch <= 'F');
 2159              		.loc 1 417 0 is_stmt 0 discriminator 3
 2160 19a5 B8000000 		movl	$0, %eax
 2160      00
 2161              	.L101:
 416:main_final_with_sync.c **** 	(ch >= 'a' && ch <= 'f') ||
 2162              		.loc 1 416 0 is_stmt 1
 2163 19aa 83E001   		andl	$1, %eax
 419:main_final_with_sync.c **** }
 2164              		.loc 1 419 0
 2165 19ad 5D       		popq	%rbp
 2166              		.cfi_def_cfa 7, 8
 2167 19ae C3       		ret
 2168              		.cfi_endproc
 2169              	.LFE15:
 2172              	calcChecksum:
 2173              	.LFB16:
 420:main_final_with_sync.c **** 
 421:main_final_with_sync.c **** static uint16 calcChecksum(const uint8 *data, size_t length) {
 2174              		.loc 1 421 0
 2175              		.cfi_startproc
 2176 19af 55       		pushq	%rbp
 2177              		.cfi_def_cfa_offset 16
 2178              		.cfi_offset 6, -16
 2179 19b0 4889E5   		movq	%rsp, %rbp
 2180              		.cfi_def_cfa_register 6
 2181 19b3 48897DE8 		movq	%rdi, -24(%rbp)
 2182 19b7 488975E0 		movq	%rsi, -32(%rbp)
 422:main_final_with_sync.c **** 	uint16 cksum = 0x0000;
 2183              		.loc 1 422 0
 2184 19bb 66C745FE 		movw	$0, -2(%rbp)
 2184      0000
 423:main_final_with_sync.c **** 	while ( length-- ) {
 2185              		.loc 1 423 0
 2186 19c1 EB16     		jmp	.L104
 2187              	.L105:
 424:main_final_with_sync.c **** 		cksum = (uint16)(cksum + *data++);
 2188              		.loc 1 424 0
 2189 19c3 488B45E8 		movq	-24(%rbp), %rax
 2190 19c7 488D5001 		leaq	1(%rax), %rdx
 2191 19cb 488955E8 		movq	%rdx, -24(%rbp)
 2192 19cf 0FB600   		movzbl	(%rax), %eax
 2193 19d2 0FB6C0   		movzbl	%al, %eax
 2194 19d5 660145FE 		addw	%ax, -2(%rbp)
 2195              	.L104:
 423:main_final_with_sync.c **** 	while ( length-- ) {
 2196              		.loc 1 423 0
 2197 19d9 488B45E0 		movq	-32(%rbp), %rax
 2198 19dd 488D50FF 		leaq	-1(%rax), %rdx
 2199 19e1 488955E0 		movq	%rdx, -32(%rbp)
 2200 19e5 4885C0   		testq	%rax, %rax
 2201 19e8 75D9     		jne	.L105
 425:main_final_with_sync.c **** 	}
 426:main_final_with_sync.c **** 	return cksum;
 2202              		.loc 1 426 0
 2203 19ea 0FB745FE 		movzwl	-2(%rbp), %eax
 427:main_final_with_sync.c **** }
 2204              		.loc 1 427 0
 2205 19ee 5D       		popq	%rbp
 2206              		.cfi_def_cfa 7, 8
 2207 19ef C3       		ret
 2208              		.cfi_endproc
 2209              	.LFE16:
 2212              	getHexNibble:
 2213              	.LFB17:
 428:main_final_with_sync.c **** 
 429:main_final_with_sync.c **** static bool getHexNibble(char hexDigit, uint8 *nibble) {
 2214              		.loc 1 429 0
 2215              		.cfi_startproc
 2216 19f0 55       		pushq	%rbp
 2217              		.cfi_def_cfa_offset 16
 2218              		.cfi_offset 6, -16
 2219 19f1 4889E5   		movq	%rsp, %rbp
 2220              		.cfi_def_cfa_register 6
 2221 19f4 89F8     		movl	%edi, %eax
 2222 19f6 488975F0 		movq	%rsi, -16(%rbp)
 2223 19fa 8845FC   		movb	%al, -4(%rbp)
 430:main_final_with_sync.c **** 	if ( hexDigit >= '0' && hexDigit <= '9' ) {
 2224              		.loc 1 430 0
 2225 19fd 807DFC2F 		cmpb	$47, -4(%rbp)
 2226 1a01 7E1A     		jle	.L108
 2227              		.loc 1 430 0 is_stmt 0 discriminator 1
 2228 1a03 807DFC39 		cmpb	$57, -4(%rbp)
 2229 1a07 7F14     		jg	.L108
 431:main_final_with_sync.c **** 		*nibble = (uint8)(hexDigit - '0');
 2230              		.loc 1 431 0 is_stmt 1
 2231 1a09 0FB645FC 		movzbl	-4(%rbp), %eax
 2232 1a0d 8D50D0   		leal	-48(%rax), %edx
 2233 1a10 488B45F0 		movq	-16(%rbp), %rax
 2234 1a14 8810     		movb	%dl, (%rax)
 432:main_final_with_sync.c **** 		return false;
 2235              		.loc 1 432 0
 2236 1a16 B8000000 		movl	$0, %eax
 2236      00
 2237 1a1b EB45     		jmp	.L109
 2238              	.L108:
 433:main_final_with_sync.c **** 	} else if ( hexDigit >= 'a' && hexDigit <= 'f' ) {
 2239              		.loc 1 433 0
 2240 1a1d 807DFC60 		cmpb	$96, -4(%rbp)
 2241 1a21 7E1A     		jle	.L110
 2242              		.loc 1 433 0 is_stmt 0 discriminator 1
 2243 1a23 807DFC66 		cmpb	$102, -4(%rbp)
 2244 1a27 7F14     		jg	.L110
 434:main_final_with_sync.c **** 		*nibble = (uint8)(hexDigit - 'a' + 10);
 2245              		.loc 1 434 0 is_stmt 1
 2246 1a29 0FB645FC 		movzbl	-4(%rbp), %eax
 2247 1a2d 8D50A9   		leal	-87(%rax), %edx
 2248 1a30 488B45F0 		movq	-16(%rbp), %rax
 2249 1a34 8810     		movb	%dl, (%rax)
 435:main_final_with_sync.c **** 		return false;
 2250              		.loc 1 435 0
 2251 1a36 B8000000 		movl	$0, %eax
 2251      00
 2252 1a3b EB25     		jmp	.L109
 2253              	.L110:
 436:main_final_with_sync.c **** 	} else if ( hexDigit >= 'A' && hexDigit <= 'F' ) {
 2254              		.loc 1 436 0
 2255 1a3d 807DFC40 		cmpb	$64, -4(%rbp)
 2256 1a41 7E1A     		jle	.L111
 2257              		.loc 1 436 0 is_stmt 0 discriminator 1
 2258 1a43 807DFC46 		cmpb	$70, -4(%rbp)
 2259 1a47 7F14     		jg	.L111
 437:main_final_with_sync.c **** 		*nibble = (uint8)(hexDigit - 'A' + 10);
 2260              		.loc 1 437 0 is_stmt 1
 2261 1a49 0FB645FC 		movzbl	-4(%rbp), %eax
 2262 1a4d 8D50C9   		leal	-55(%rax), %edx
 2263 1a50 488B45F0 		movq	-16(%rbp), %rax
 2264 1a54 8810     		movb	%dl, (%rax)
 438:main_final_with_sync.c **** 		return false;
 2265              		.loc 1 438 0
 2266 1a56 B8000000 		movl	$0, %eax
 2266      00
 2267 1a5b EB05     		jmp	.L109
 2268              	.L111:
 439:main_final_with_sync.c **** 	} else {
 440:main_final_with_sync.c **** 		return true;
 2269              		.loc 1 440 0
 2270 1a5d B8010000 		movl	$1, %eax
 2270      00
 2271              	.L109:
 441:main_final_with_sync.c **** 	}
 442:main_final_with_sync.c **** }
 2272              		.loc 1 442 0
 2273 1a62 5D       		popq	%rbp
 2274              		.cfi_def_cfa 7, 8
 2275 1a63 C3       		ret
 2276              		.cfi_endproc
 2277              	.LFE17:
 2280              	getHexByte:
 2281              	.LFB18:
 443:main_final_with_sync.c **** 
 444:main_final_with_sync.c **** static int getHexByte(uint8 *byte) {
 2282              		.loc 1 444 0
 2283              		.cfi_startproc
 2284 1a64 55       		pushq	%rbp
 2285              		.cfi_def_cfa_offset 16
 2286              		.cfi_offset 6, -16
 2287 1a65 4889E5   		movq	%rsp, %rbp
 2288              		.cfi_def_cfa_register 6
 2289 1a68 4883EC20 		subq	$32, %rsp
 2290 1a6c 48897DE8 		movq	%rdi, -24(%rbp)
 2291              		.loc 1 444 0
 2292 1a70 64488B04 		movq	%fs:40, %rax
 2292      25280000 
 2292      00
 2293 1a79 488945F8 		movq	%rax, -8(%rbp)
 2294 1a7d 31C0     		xorl	%eax, %eax
 445:main_final_with_sync.c **** 	uint8 upperNibble;
 446:main_final_with_sync.c **** 	uint8 lowerNibble;
 447:main_final_with_sync.c **** 	if ( !getHexNibble(ptr[0], &upperNibble) && !getHexNibble(ptr[1], &lowerNibble) ) {
 2295              		.loc 1 447 0
 2296 1a7f 488B0500 		movq	ptr(%rip), %rax
 2296      000000
 2297 1a86 0FB600   		movzbl	(%rax), %eax
 2298 1a89 0FBEC0   		movsbl	%al, %eax
 2299 1a8c 488D55F6 		leaq	-10(%rbp), %rdx
 2300 1a90 4889D6   		movq	%rdx, %rsi
 2301 1a93 89C7     		movl	%eax, %edi
 2302 1a95 E856FFFF 		call	getHexNibble
 2302      FF
 2303 1a9a 83F001   		xorl	$1, %eax
 2304 1a9d 84C0     		testb	%al, %al
 2305 1a9f 744C     		je	.L113
 2306              		.loc 1 447 0 is_stmt 0 discriminator 1
 2307 1aa1 488B0500 		movq	ptr(%rip), %rax
 2307      000000
 2308 1aa8 4883C001 		addq	$1, %rax
 2309 1aac 0FB600   		movzbl	(%rax), %eax
 2310 1aaf 0FBEC0   		movsbl	%al, %eax
 2311 1ab2 488D55F7 		leaq	-9(%rbp), %rdx
 2312 1ab6 4889D6   		movq	%rdx, %rsi
 2313 1ab9 89C7     		movl	%eax, %edi
 2314 1abb E830FFFF 		call	getHexNibble
 2314      FF
 2315 1ac0 83F001   		xorl	$1, %eax
 2316 1ac3 84C0     		testb	%al, %al
 2317 1ac5 7426     		je	.L113
 448:main_final_with_sync.c **** 		*byte = (uint8)((upperNibble << 4) | lowerNibble);
 2318              		.loc 1 448 0 is_stmt 1
 2319 1ac7 0FB645F6 		movzbl	-10(%rbp), %eax
 2320 1acb 0FB6C0   		movzbl	%al, %eax
 2321 1ace C1E004   		sall	$4, %eax
 2322 1ad1 89C2     		movl	%eax, %edx
 2323 1ad3 0FB645F7 		movzbl	-9(%rbp), %eax
 2324 1ad7 09D0     		orl	%edx, %eax
 2325 1ad9 89C2     		movl	%eax, %edx
 2326 1adb 488B45E8 		movq	-24(%rbp), %rax
 2327 1adf 8810     		movb	%dl, (%rax)
 449:main_final_with_sync.c **** 		byte += 2;
 2328              		.loc 1 449 0
 2329 1ae1 488345E8 		addq	$2, -24(%rbp)
 2329      02
 450:main_final_with_sync.c **** 		return 0;
 2330              		.loc 1 450 0
 2331 1ae6 B8000000 		movl	$0, %eax
 2331      00
 2332 1aeb EB05     		jmp	.L115
 2333              	.L113:
 451:main_final_with_sync.c **** 	} else {
 452:main_final_with_sync.c **** 		return 1;
 2334              		.loc 1 452 0
 2335 1aed B8010000 		movl	$1, %eax
 2335      00
 2336              	.L115:
 453:main_final_with_sync.c **** 	}
 454:main_final_with_sync.c **** }
 2337              		.loc 1 454 0 discriminator 1
 2338 1af2 488B4DF8 		movq	-8(%rbp), %rcx
 2339 1af6 6448330C 		xorq	%fs:40, %rcx
 2339      25280000 
 2339      00
 2340 1aff 7405     		je	.L116
 2341              		.loc 1 454 0 is_stmt 0
 2342 1b01 E8000000 		call	__stack_chk_fail
 2342      00
 2343              	.L116:
 2344 1b06 C9       		leave
 2345              		.cfi_def_cfa 7, 8
 2346 1b07 C3       		ret
 2347              		.cfi_endproc
 2348              	.LFE18:
 2350              		.section	.rodata
 2351              	.LC14:
 2352 00c9 556E7061 		.string	"Unparseable hex number"
 2352      72736561 
 2352      626C6520 
 2352      68657820 
 2352      6E756D62 
 2353              	.LC15:
 2354 00e0 4368616E 		.string	"Channel out of range"
 2354      6E656C20 
 2354      6F757420 
 2354      6F662072 
 2354      616E6765 
 2355              	.LC16:
 2356 00f5 436F6E64 		.string	"Conduit out of range"
 2356      75697420 
 2356      6F757420 
 2356      6F662072 
 2356      616E6765 
 2357              	.LC17:
 2358 010a 496C6C65 		.string	"Illegal character"
 2358      67616C20 
 2358      63686172 
 2358      61637465 
 2358      7200
 2359              	.LC18:
 2360 011c 556E7465 		.string	"Unterminated string"
 2360      726D696E 
 2360      61746564 
 2360      20737472 
 2360      696E6700 
 2361              	.LC19:
 2362 0130 4E6F206D 		.string	"No memory"
 2362      656D6F72 
 2362      7900
 2363              	.LC20:
 2364 013a 456D7074 		.string	"Empty string"
 2364      79207374 
 2364      72696E67 
 2364      00
 2365              	.LC21:
 2366 0147 4F646420 		.string	"Odd number of digits"
 2366      6E756D62 
 2366      6572206F 
 2366      66206469 
 2366      67697473 
 2367              	.LC22:
 2368 015c 43616E6E 		.string	"Cannot load file"
 2368      6F74206C 
 2368      6F616420 
 2368      66696C65 
 2368      00
 2369              	.LC23:
 2370 016d 43616E6E 		.string	"Cannot save file"
 2370      6F742073 
 2370      61766520 
 2370      66696C65 
 2370      00
 2371              	.LC24:
 2372 017e 42616420 		.string	"Bad arguments"
 2372      61726775 
 2372      6D656E74 
 2372      7300
 2373 018c 00000000 		.align 32
 2373      00000000 
 2373      00000000 
 2373      00000000 
 2373      00000000 
 2376              	errMessages:
 2377 01a0 00000000 		.quad	0
 2377      00000000 
 2378 01a8 00000000 		.quad	0
 2378      00000000 
 2379 01b0 00000000 		.quad	.LC14
 2379      00000000 
 2380 01b8 00000000 		.quad	.LC15
 2380      00000000 
 2381 01c0 00000000 		.quad	.LC16
 2381      00000000 
 2382 01c8 00000000 		.quad	.LC17
 2382      00000000 
 2383 01d0 00000000 		.quad	.LC18
 2383      00000000 
 2384 01d8 00000000 		.quad	.LC19
 2384      00000000 
 2385 01e0 00000000 		.quad	.LC20
 2385      00000000 
 2386 01e8 00000000 		.quad	.LC21
 2386      00000000 
 2387 01f0 00000000 		.quad	.LC22
 2387      00000000 
 2388 01f8 00000000 		.quad	.LC23
 2388      00000000 
 2389 0200 00000000 		.quad	.LC24
 2389      00000000 
 2390              	.LC25:
 2391 0208 646F5265 		.string	"doRead()"
 2391      61642829 
 2391      00
 2392              	.LC26:
 2393 0211 4261666F 		.string	"Bafoon"
 2393      6F6E00
 2394              		.text
 2396              	doRead:
 2397              	.LFB19:
 455:main_final_with_sync.c **** 
 456:main_final_with_sync.c **** static const char *const errMessages[] = {
 457:main_final_with_sync.c **** 	NULL,
 458:main_final_with_sync.c **** 	NULL,
 459:main_final_with_sync.c **** 	"Unparseable hex number",
 460:main_final_with_sync.c **** 	"Channel out of range",
 461:main_final_with_sync.c **** 	"Conduit out of range",
 462:main_final_with_sync.c **** 	"Illegal character",
 463:main_final_with_sync.c **** 	"Unterminated string",
 464:main_final_with_sync.c **** 	"No memory",
 465:main_final_with_sync.c **** 	"Empty string",
 466:main_final_with_sync.c **** 	"Odd number of digits",
 467:main_final_with_sync.c **** 	"Cannot load file",
 468:main_final_with_sync.c **** 	"Cannot save file",
 469:main_final_with_sync.c **** 	"Bad arguments"
 470:main_final_with_sync.c **** };
 471:main_final_with_sync.c **** 
 472:main_final_with_sync.c **** typedef enum {
 473:main_final_with_sync.c **** 	FLP_SUCCESS,
 474:main_final_with_sync.c **** 	FLP_LIBERR,
 475:main_final_with_sync.c **** 	FLP_BAD_HEX,
 476:main_final_with_sync.c **** 	FLP_CHAN_RANGE,
 477:main_final_with_sync.c **** 	FLP_CONDUIT_RANGE,
 478:main_final_with_sync.c **** 	FLP_ILL_CHAR,
 479:main_final_with_sync.c **** 	FLP_UNTERM_STRING,
 480:main_final_with_sync.c **** 	FLP_NO_MEMORY,
 481:main_final_with_sync.c **** 	FLP_EMPTY_STRING,
 482:main_final_with_sync.c **** 	FLP_ODD_DIGITS,
 483:main_final_with_sync.c **** 	FLP_CANNOT_LOAD,
 484:main_final_with_sync.c **** 	FLP_CANNOT_SAVE,
 485:main_final_with_sync.c **** 	FLP_ARGS
 486:main_final_with_sync.c **** } ReturnCode;
 487:main_final_with_sync.c **** 
 488:main_final_with_sync.c **** static ReturnCode doRead(
 489:main_final_with_sync.c **** 	struct FLContext *handle, uint8 chan, uint32 length, FILE *destFile, uint16 *checksum,
 490:main_final_with_sync.c **** 	const char **error)
 491:main_final_with_sync.c **** {
 2398              		.loc 1 491 0 is_stmt 1
 2399              		.cfi_startproc
 2400 1b08 55       		pushq	%rbp
 2401              		.cfi_def_cfa_offset 16
 2402              		.cfi_offset 6, -16
 2403 1b09 4889E5   		movq	%rsp, %rbp
 2404              		.cfi_def_cfa_register 6
 2405 1b0c 4883EC60 		subq	$96, %rsp
 2406 1b10 48897DC8 		movq	%rdi, -56(%rbp)
 2407 1b14 89F0     		movl	%esi, %eax
 2408 1b16 8955C0   		movl	%edx, -64(%rbp)
 2409 1b19 48894DB8 		movq	%rcx, -72(%rbp)
 2410 1b1d 4C8945B0 		movq	%r8, -80(%rbp)
 2411 1b21 4C894DA8 		movq	%r9, -88(%rbp)
 2412 1b25 8845C4   		movb	%al, -60(%rbp)
 2413              		.loc 1 491 0
 2414 1b28 64488B04 		movq	%fs:40, %rax
 2414      25280000 
 2414      00
 2415 1b31 488945F8 		movq	%rax, -8(%rbp)
 2416 1b35 31C0     		xorl	%eax, %eax
 492:main_final_with_sync.c **** 	ReturnCode retVal = FLP_SUCCESS;
 2417              		.loc 1 492 0
 2418 1b37 C745D800 		movl	$0, -40(%rbp)
 2418      000000
 493:main_final_with_sync.c **** 	uint32 bytesWritten;
 494:main_final_with_sync.c **** 	FLStatus fStatus;
 495:main_final_with_sync.c **** 	uint32 chunkSize;
 496:main_final_with_sync.c **** 	const uint8 *recvData;
 497:main_final_with_sync.c **** 	uint32 actualLength;
 498:main_final_with_sync.c **** 	const uint8 *ptr;
 499:main_final_with_sync.c **** 	uint16 csVal = 0x0000;
 2419              		.loc 1 499 0
 2420 1b3e 66C745D2 		movw	$0, -46(%rbp)
 2420      0000
 500:main_final_with_sync.c **** 	#define READ_MAX 65536
 501:main_final_with_sync.c **** 
 502:main_final_with_sync.c **** 	// Read first chunk
 503:main_final_with_sync.c **** 	chunkSize = length >= READ_MAX ? READ_MAX : length;
 2421              		.loc 1 503 0
 2422 1b44 B8000001 		movl	$65536, %eax
 2422      00
 2423 1b49 817DC000 		cmpl	$65536, -64(%rbp)
 2423      000100
 2424 1b50 0F4645C0 		cmovbe	-64(%rbp), %eax
 2425 1b54 8945DC   		movl	%eax, -36(%rbp)
 504:main_final_with_sync.c **** 	fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 2426              		.loc 1 504 0
 2427 1b57 0FB675C4 		movzbl	-60(%rbp), %esi
 2428 1b5b 488B4DA8 		movq	-88(%rbp), %rcx
 2429 1b5f 8B55DC   		movl	-36(%rbp), %edx
 2430 1b62 488B45C8 		movq	-56(%rbp), %rax
 2431 1b66 4989C8   		movq	%rcx, %r8
 2432 1b69 B9000000 		movl	$0, %ecx
 2432      00
 2433 1b6e 4889C7   		movq	%rax, %rdi
 2434 1b71 E8000000 		call	flReadChannelAsyncSubmit
 2434      00
 2435 1b76 8945E0   		movl	%eax, -32(%rbp)
 505:main_final_with_sync.c **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 2436              		.loc 1 505 0
 2437 1b79 837DE000 		cmpl	$0, -32(%rbp)
 2438 1b7d 741D     		je	.L118
 2439              		.loc 1 505 0 is_stmt 0 discriminator 1
 2440 1b7f 488B45A8 		movq	-88(%rbp), %rax
 2441 1b83 BE000000 		movl	$.LC25, %esi
 2441      00
 2442 1b88 4889C7   		movq	%rax, %rdi
 2443 1b8b E8000000 		call	errPrefix
 2443      00
 2444 1b90 C745D801 		movl	$1, -40(%rbp)
 2444      000000
 2445 1b97 E9050200 		jmp	.L119
 2445      00
 2446              	.L118:
 506:main_final_with_sync.c **** 	length = length - chunkSize;
 2447              		.loc 1 506 0 is_stmt 1
 2448 1b9c 8B45DC   		movl	-36(%rbp), %eax
 2449 1b9f 2945C0   		subl	%eax, -64(%rbp)
 507:main_final_with_sync.c **** 
 508:main_final_with_sync.c **** 	while ( length ) {
 2450              		.loc 1 508 0
 2451 1ba2 E9280100 		jmp	.L120
 2451      00
 2452              	.L126:
 509:main_final_with_sync.c **** 		// Read chunk N
 510:main_final_with_sync.c **** 		chunkSize = length >= READ_MAX ? READ_MAX : length;
 2453              		.loc 1 510 0
 2454 1ba7 B8000001 		movl	$65536, %eax
 2454      00
 2455 1bac 817DC000 		cmpl	$65536, -64(%rbp)
 2455      000100
 2456 1bb3 0F4645C0 		cmovbe	-64(%rbp), %eax
 2457 1bb7 8945DC   		movl	%eax, -36(%rbp)
 511:main_final_with_sync.c **** 		fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 2458              		.loc 1 511 0
 2459 1bba 0FB675C4 		movzbl	-60(%rbp), %esi
 2460 1bbe 488B4DA8 		movq	-88(%rbp), %rcx
 2461 1bc2 8B55DC   		movl	-36(%rbp), %edx
 2462 1bc5 488B45C8 		movq	-56(%rbp), %rax
 2463 1bc9 4989C8   		movq	%rcx, %r8
 2464 1bcc B9000000 		movl	$0, %ecx
 2464      00
 2465 1bd1 4889C7   		movq	%rax, %rdi
 2466 1bd4 E8000000 		call	flReadChannelAsyncSubmit
 2466      00
 2467 1bd9 8945E0   		movl	%eax, -32(%rbp)
 512:main_final_with_sync.c **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 2468              		.loc 1 512 0
 2469 1bdc 837DE000 		cmpl	$0, -32(%rbp)
 2470 1be0 741D     		je	.L121
 2471              		.loc 1 512 0 is_stmt 0 discriminator 1
 2472 1be2 488B45A8 		movq	-88(%rbp), %rax
 2473 1be6 BE000000 		movl	$.LC25, %esi
 2473      00
 2474 1beb 4889C7   		movq	%rax, %rdi
 2475 1bee E8000000 		call	errPrefix
 2475      00
 2476 1bf3 C745D801 		movl	$1, -40(%rbp)
 2476      000000
 2477 1bfa E9A20100 		jmp	.L119
 2477      00
 2478              	.L121:
 513:main_final_with_sync.c **** 		length = length - chunkSize;
 2479              		.loc 1 513 0 is_stmt 1
 2480 1bff 8B45DC   		movl	-36(%rbp), %eax
 2481 1c02 2945C0   		subl	%eax, -64(%rbp)
 514:main_final_with_sync.c **** 		printf("Bafoon\n");
 2482              		.loc 1 514 0
 2483 1c05 BF000000 		movl	$.LC26, %edi
 2483      00
 2484 1c0a E8000000 		call	puts
 2484      00
 515:main_final_with_sync.c **** 		
 516:main_final_with_sync.c **** 		// Await chunk N-1
 517:main_final_with_sync.c **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 2485              		.loc 1 517 0
 2486 1c0f 488B7DA8 		movq	-88(%rbp), %rdi
 2487 1c13 488D4DD4 		leaq	-44(%rbp), %rcx
 2488 1c17 488D55D4 		leaq	-44(%rbp), %rdx
 2489 1c1b 488D75E8 		leaq	-24(%rbp), %rsi
 2490 1c1f 488B45C8 		movq	-56(%rbp), %rax
 2491 1c23 4989F8   		movq	%rdi, %r8
 2492 1c26 4889C7   		movq	%rax, %rdi
 2493 1c29 E8000000 		call	flReadChannelAsyncAwait
 2493      00
 2494 1c2e 8945E0   		movl	%eax, -32(%rbp)
 518:main_final_with_sync.c **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 2495              		.loc 1 518 0
 2496 1c31 837DE000 		cmpl	$0, -32(%rbp)
 2497 1c35 741D     		je	.L122
 2498              		.loc 1 518 0 is_stmt 0 discriminator 1
 2499 1c37 488B45A8 		movq	-88(%rbp), %rax
 2500 1c3b BE000000 		movl	$.LC25, %esi
 2500      00
 2501 1c40 4889C7   		movq	%rax, %rdi
 2502 1c43 E8000000 		call	errPrefix
 2502      00
 2503 1c48 C745D801 		movl	$1, -40(%rbp)
 2503      000000
 2504 1c4f E94D0100 		jmp	.L119
 2504      00
 2505              	.L122:
 519:main_final_with_sync.c **** 
 520:main_final_with_sync.c **** 		// Write chunk N-1 to file
 521:main_final_with_sync.c **** 		bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 2506              		.loc 1 521 0 is_stmt 1
 2507 1c54 8B45D4   		movl	-44(%rbp), %eax
 2508 1c57 89C6     		movl	%eax, %esi
 2509 1c59 488B45E8 		movq	-24(%rbp), %rax
 2510 1c5d 488B55B8 		movq	-72(%rbp), %rdx
 2511 1c61 4889D1   		movq	%rdx, %rcx
 2512 1c64 4889F2   		movq	%rsi, %rdx
 2513 1c67 BE010000 		movl	$1, %esi
 2513      00
 2514 1c6c 4889C7   		movq	%rax, %rdi
 2515 1c6f E8000000 		call	fwrite
 2515      00
 2516 1c74 8945E4   		movl	%eax, -28(%rbp)
 522:main_final_with_sync.c **** 		CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 2517              		.loc 1 522 0
 2518 1c77 8B45D4   		movl	-44(%rbp), %eax
 2519 1c7a 3945E4   		cmpl	%eax, -28(%rbp)
 2520 1c7d 741D     		je	.L123
 2521              		.loc 1 522 0 is_stmt 0 discriminator 1
 2522 1c7f 488B45A8 		movq	-88(%rbp), %rax
 2523 1c83 BE000000 		movl	$.LC25, %esi
 2523      00
 2524 1c88 4889C7   		movq	%rax, %rdi
 2525 1c8b E8000000 		call	errPrefix
 2525      00
 2526 1c90 C745D80B 		movl	$11, -40(%rbp)
 2526      000000
 2527 1c97 E9050100 		jmp	.L119
 2527      00
 2528              	.L123:
 523:main_final_with_sync.c **** 
 524:main_final_with_sync.c **** 		// Checksum chunk N-1
 525:main_final_with_sync.c **** 		chunkSize = actualLength;
 2529              		.loc 1 525 0 is_stmt 1
 2530 1c9c 8B45D4   		movl	-44(%rbp), %eax
 2531 1c9f 8945DC   		movl	%eax, -36(%rbp)
 526:main_final_with_sync.c **** 		ptr = recvData;
 2532              		.loc 1 526 0
 2533 1ca2 488B45E8 		movq	-24(%rbp), %rax
 2534 1ca6 488945F0 		movq	%rax, -16(%rbp)
 527:main_final_with_sync.c **** 		while ( chunkSize-- ) {
 2535              		.loc 1 527 0
 2536 1caa EB16     		jmp	.L124
 2537              	.L125:
 528:main_final_with_sync.c **** 			csVal = (uint16)(csVal + *ptr++);
 2538              		.loc 1 528 0
 2539 1cac 488B45F0 		movq	-16(%rbp), %rax
 2540 1cb0 488D5001 		leaq	1(%rax), %rdx
 2541 1cb4 488955F0 		movq	%rdx, -16(%rbp)
 2542 1cb8 0FB600   		movzbl	(%rax), %eax
 2543 1cbb 0FB6C0   		movzbl	%al, %eax
 2544 1cbe 660145D2 		addw	%ax, -46(%rbp)
 2545              	.L124:
 527:main_final_with_sync.c **** 		while ( chunkSize-- ) {
 2546              		.loc 1 527 0
 2547 1cc2 8B45DC   		movl	-36(%rbp), %eax
 2548 1cc5 8D50FF   		leal	-1(%rax), %edx
 2549 1cc8 8955DC   		movl	%edx, -36(%rbp)
 2550 1ccb 85C0     		testl	%eax, %eax
 2551 1ccd 75DD     		jne	.L125
 2552              	.L120:
 508:main_final_with_sync.c **** 		// Read chunk N
 2553              		.loc 1 508 0
 2554 1ccf 837DC000 		cmpl	$0, -64(%rbp)
 2555 1cd3 0F85CEFE 		jne	.L126
 2555      FFFF
 529:main_final_with_sync.c **** 		}
 530:main_final_with_sync.c **** 	}
 531:main_final_with_sync.c **** 
 532:main_final_with_sync.c **** 	// Await last chunk
 533:main_final_with_sync.c **** 	fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 2556              		.loc 1 533 0
 2557 1cd9 488B7DA8 		movq	-88(%rbp), %rdi
 2558 1cdd 488D4DD4 		leaq	-44(%rbp), %rcx
 2559 1ce1 488D55D4 		leaq	-44(%rbp), %rdx
 2560 1ce5 488D75E8 		leaq	-24(%rbp), %rsi
 2561 1ce9 488B45C8 		movq	-56(%rbp), %rax
 2562 1ced 4989F8   		movq	%rdi, %r8
 2563 1cf0 4889C7   		movq	%rax, %rdi
 2564 1cf3 E8000000 		call	flReadChannelAsyncAwait
 2564      00
 2565 1cf8 8945E0   		movl	%eax, -32(%rbp)
 534:main_final_with_sync.c **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 2566              		.loc 1 534 0
 2567 1cfb 837DE000 		cmpl	$0, -32(%rbp)
 2568 1cff 741D     		je	.L127
 2569              		.loc 1 534 0 is_stmt 0 discriminator 1
 2570 1d01 488B45A8 		movq	-88(%rbp), %rax
 2571 1d05 BE000000 		movl	$.LC25, %esi
 2571      00
 2572 1d0a 4889C7   		movq	%rax, %rdi
 2573 1d0d E8000000 		call	errPrefix
 2573      00
 2574 1d12 C745D801 		movl	$1, -40(%rbp)
 2574      000000
 2575 1d19 E9830000 		jmp	.L119
 2575      00
 2576              	.L127:
 535:main_final_with_sync.c **** 	
 536:main_final_with_sync.c **** 	// Write last chunk to file
 537:main_final_with_sync.c **** 	bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 2577              		.loc 1 537 0 is_stmt 1
 2578 1d1e 8B45D4   		movl	-44(%rbp), %eax
 2579 1d21 89C6     		movl	%eax, %esi
 2580 1d23 488B45E8 		movq	-24(%rbp), %rax
 2581 1d27 488B55B8 		movq	-72(%rbp), %rdx
 2582 1d2b 4889D1   		movq	%rdx, %rcx
 2583 1d2e 4889F2   		movq	%rsi, %rdx
 2584 1d31 BE010000 		movl	$1, %esi
 2584      00
 2585 1d36 4889C7   		movq	%rax, %rdi
 2586 1d39 E8000000 		call	fwrite
 2586      00
 2587 1d3e 8945E4   		movl	%eax, -28(%rbp)
 538:main_final_with_sync.c **** 	CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 2588              		.loc 1 538 0
 2589 1d41 8B45D4   		movl	-44(%rbp), %eax
 2590 1d44 3945E4   		cmpl	%eax, -28(%rbp)
 2591 1d47 741A     		je	.L128
 2592              		.loc 1 538 0 is_stmt 0 discriminator 1
 2593 1d49 488B45A8 		movq	-88(%rbp), %rax
 2594 1d4d BE000000 		movl	$.LC25, %esi
 2594      00
 2595 1d52 4889C7   		movq	%rax, %rdi
 2596 1d55 E8000000 		call	errPrefix
 2596      00
 2597 1d5a C745D80B 		movl	$11, -40(%rbp)
 2597      000000
 2598 1d61 EB3E     		jmp	.L119
 2599              	.L128:
 539:main_final_with_sync.c **** 
 540:main_final_with_sync.c **** 	// Checksum last chunk
 541:main_final_with_sync.c **** 	chunkSize = actualLength;
 2600              		.loc 1 541 0 is_stmt 1
 2601 1d63 8B45D4   		movl	-44(%rbp), %eax
 2602 1d66 8945DC   		movl	%eax, -36(%rbp)
 542:main_final_with_sync.c **** 	ptr = recvData;
 2603              		.loc 1 542 0
 2604 1d69 488B45E8 		movq	-24(%rbp), %rax
 2605 1d6d 488945F0 		movq	%rax, -16(%rbp)
 543:main_final_with_sync.c **** 	while ( chunkSize-- ) {
 2606              		.loc 1 543 0
 2607 1d71 EB16     		jmp	.L129
 2608              	.L130:
 544:main_final_with_sync.c **** 		csVal = (uint16)(csVal + *ptr++);
 2609              		.loc 1 544 0
 2610 1d73 488B45F0 		movq	-16(%rbp), %rax
 2611 1d77 488D5001 		leaq	1(%rax), %rdx
 2612 1d7b 488955F0 		movq	%rdx, -16(%rbp)
 2613 1d7f 0FB600   		movzbl	(%rax), %eax
 2614 1d82 0FB6C0   		movzbl	%al, %eax
 2615 1d85 660145D2 		addw	%ax, -46(%rbp)
 2616              	.L129:
 543:main_final_with_sync.c **** 	while ( chunkSize-- ) {
 2617              		.loc 1 543 0
 2618 1d89 8B45DC   		movl	-36(%rbp), %eax
 2619 1d8c 8D50FF   		leal	-1(%rax), %edx
 2620 1d8f 8955DC   		movl	%edx, -36(%rbp)
 2621 1d92 85C0     		testl	%eax, %eax
 2622 1d94 75DD     		jne	.L130
 545:main_final_with_sync.c **** 	}
 546:main_final_with_sync.c **** 	
 547:main_final_with_sync.c **** 	// Return checksum to caller
 548:main_final_with_sync.c **** 	*checksum = csVal;
 2623              		.loc 1 548 0
 2624 1d96 488B45B0 		movq	-80(%rbp), %rax
 2625 1d9a 0FB755D2 		movzwl	-46(%rbp), %edx
 2626 1d9e 668910   		movw	%dx, (%rax)
 2627              	.L119:
 549:main_final_with_sync.c **** 	cleanup:
 550:main_final_with_sync.c **** 	return retVal;
 2628              		.loc 1 550 0
 2629 1da1 8B45D8   		movl	-40(%rbp), %eax
 551:main_final_with_sync.c **** }
 2630              		.loc 1 551 0
 2631 1da4 488B4DF8 		movq	-8(%rbp), %rcx
 2632 1da8 6448330C 		xorq	%fs:40, %rcx
 2632      25280000 
 2632      00
 2633 1db1 7405     		je	.L132
 2634 1db3 E8000000 		call	__stack_chk_fail
 2634      00
 2635              	.L132:
 2636 1db8 C9       		leave
 2637              		.cfi_def_cfa 7, 8
 2638 1db9 C3       		ret
 2639              		.cfi_endproc
 2640              	.LFE19:
 2642              		.section	.rodata
 2643              	.LC27:
 2644 0218 646F5772 		.string	"doWrite()"
 2644      69746528 
 2644      2900
 2645              		.text
 2647              	doWrite:
 2648              	.LFB20:
 552:main_final_with_sync.c **** 
 553:main_final_with_sync.c **** static ReturnCode doWrite(
 554:main_final_with_sync.c **** 	struct FLContext *handle, uint8 chan, FILE *srcFile, size_t *length, uint16 *checksum,
 555:main_final_with_sync.c **** 	const char **error)
 556:main_final_with_sync.c **** {
 2649              		.loc 1 556 0
 2650              		.cfi_startproc
 2651 1dba 55       		pushq	%rbp
 2652              		.cfi_def_cfa_offset 16
 2653              		.cfi_offset 6, -16
 2654 1dbb 4889E5   		movq	%rsp, %rbp
 2655              		.cfi_def_cfa_register 6
 2656 1dbe 4881EC70 		subq	$65648, %rsp
 2656      000100
 2657 1dc5 4889BDB8 		movq	%rdi, -65608(%rbp)
 2657      FFFEFF
 2658 1dcc 89F0     		movl	%esi, %eax
 2659 1dce 488995A8 		movq	%rdx, -65624(%rbp)
 2659      FFFEFF
 2660 1dd5 48898DA0 		movq	%rcx, -65632(%rbp)
 2660      FFFEFF
 2661 1ddc 4C898598 		movq	%r8, -65640(%rbp)
 2661      FFFEFF
 2662 1de3 4C898D90 		movq	%r9, -65648(%rbp)
 2662      FFFEFF
 2663 1dea 8885B4FF 		movb	%al, -65612(%rbp)
 2663      FEFF
 2664              		.loc 1 556 0
 2665 1df0 64488B04 		movq	%fs:40, %rax
 2665      25280000 
 2665      00
 2666 1df9 488945F8 		movq	%rax, -8(%rbp)
 2667 1dfd 31C0     		xorl	%eax, %eax
 557:main_final_with_sync.c **** 	ReturnCode retVal = FLP_SUCCESS;
 2668              		.loc 1 557 0
 2669 1dff C785C8FF 		movl	$0, -65592(%rbp)
 2669      FEFF0000 
 2669      0000
 558:main_final_with_sync.c **** 	size_t bytesRead, i;
 559:main_final_with_sync.c **** 	FLStatus fStatus;
 560:main_final_with_sync.c **** 	const uint8 *ptr;
 561:main_final_with_sync.c **** 	uint16 csVal = 0x0000;
 2670              		.loc 1 561 0
 2671 1e09 66C785C6 		movw	$0, -65594(%rbp)
 2671      FFFEFF00 
 2671      00
 562:main_final_with_sync.c **** 	size_t lenVal = 0;
 2672              		.loc 1 562 0
 2673 1e12 48C785E0 		movq	$0, -65568(%rbp)
 2673      FFFEFF00 
 2673      000000
 2674              	.L139:
 563:main_final_with_sync.c **** 	#define WRITE_MAX (65536 - 5)
 564:main_final_with_sync.c **** 	uint8 buffer[WRITE_MAX];
 565:main_final_with_sync.c **** 
 566:main_final_with_sync.c **** 	do {
 567:main_final_with_sync.c **** 		// Read Nth chunk
 568:main_final_with_sync.c **** 		bytesRead = fread(buffer, 1, WRITE_MAX, srcFile);
 2675              		.loc 1 568 0
 2676 1e1d 488B95A8 		movq	-65624(%rbp), %rdx
 2676      FFFEFF
 2677 1e24 488D85F0 		leaq	-65552(%rbp), %rax
 2677      FFFEFF
 2678 1e2b 4889D1   		movq	%rdx, %rcx
 2679 1e2e BAFBFF00 		movl	$65531, %edx
 2679      00
 2680 1e33 BE010000 		movl	$1, %esi
 2680      00
 2681 1e38 4889C7   		movq	%rax, %rdi
 2682 1e3b E8000000 		call	fread
 2682      00
 2683 1e40 488985E8 		movq	%rax, -65560(%rbp)
 2683      FFFEFF
 569:main_final_with_sync.c **** 		if ( bytesRead ) {
 2684              		.loc 1 569 0
 2685 1e47 4883BDE8 		cmpq	$0, -65560(%rbp)
 2685      FFFEFF00 
 2686 1e4f 0F84C200 		je	.L134
 2686      0000
 570:main_final_with_sync.c **** 			// Update running total
 571:main_final_with_sync.c **** 			lenVal = lenVal + bytesRead;
 2687              		.loc 1 571 0
 2688 1e55 488B85E8 		movq	-65560(%rbp), %rax
 2688      FFFEFF
 2689 1e5c 480185E0 		addq	%rax, -65568(%rbp)
 2689      FFFEFF
 572:main_final_with_sync.c **** 
 573:main_final_with_sync.c **** 			// Submit Nth chunk
 574:main_final_with_sync.c **** 			fStatus = flWriteChannelAsync(handle, chan, bytesRead, buffer, error);
 2690              		.loc 1 574 0
 2691 1e63 0FB6B5B4 		movzbl	-65612(%rbp), %esi
 2691      FFFEFF
 2692 1e6a 488BBD90 		movq	-65648(%rbp), %rdi
 2692      FFFEFF
 2693 1e71 488D8DF0 		leaq	-65552(%rbp), %rcx
 2693      FFFEFF
 2694 1e78 488B95E8 		movq	-65560(%rbp), %rdx
 2694      FFFEFF
 2695 1e7f 488B85B8 		movq	-65608(%rbp), %rax
 2695      FFFEFF
 2696 1e86 4989F8   		movq	%rdi, %r8
 2697 1e89 4889C7   		movq	%rax, %rdi
 2698 1e8c E8000000 		call	flWriteChannelAsync
 2698      00
 2699 1e91 8985CCFF 		movl	%eax, -65588(%rbp)
 2699      FEFF
 575:main_final_with_sync.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 2700              		.loc 1 575 0
 2701 1e97 83BDCCFF 		cmpl	$0, -65588(%rbp)
 2701      FEFF00
 2702 1e9e 7423     		je	.L135
 2703              		.loc 1 575 0 is_stmt 0 discriminator 1
 2704 1ea0 488B8590 		movq	-65648(%rbp), %rax
 2704      FFFEFF
 2705 1ea7 BE000000 		movl	$.LC27, %esi
 2705      00
 2706 1eac 4889C7   		movq	%rax, %rdi
 2707 1eaf E8000000 		call	errPrefix
 2707      00
 2708 1eb4 C785C8FF 		movl	$1, -65592(%rbp)
 2708      FEFF0100 
 2708      0000
 2709 1ebe E9CF0000 		jmp	.L136
 2709      00
 2710              	.L135:
 576:main_final_with_sync.c **** 
 577:main_final_with_sync.c **** 			// Checksum Nth chunk
 578:main_final_with_sync.c **** 			i = bytesRead;
 2711              		.loc 1 578 0 is_stmt 1
 2712 1ec3 488B85E8 		movq	-65560(%rbp), %rax
 2712      FFFEFF
 2713 1eca 488985D0 		movq	%rax, -65584(%rbp)
 2713      FFFEFF
 579:main_final_with_sync.c **** 			ptr = buffer;
 2714              		.loc 1 579 0
 2715 1ed1 488D85F0 		leaq	-65552(%rbp), %rax
 2715      FFFEFF
 2716 1ed8 488985D8 		movq	%rax, -65576(%rbp)
 2716      FFFEFF
 580:main_final_with_sync.c **** 			while ( i-- ) {
 2717              		.loc 1 580 0
 2718 1edf EB1F     		jmp	.L137
 2719              	.L138:
 581:main_final_with_sync.c **** 				csVal = (uint16)(csVal + *ptr++);
 2720              		.loc 1 581 0
 2721 1ee1 488B85D8 		movq	-65576(%rbp), %rax
 2721      FFFEFF
 2722 1ee8 488D5001 		leaq	1(%rax), %rdx
 2723 1eec 488995D8 		movq	%rdx, -65576(%rbp)
 2723      FFFEFF
 2724 1ef3 0FB600   		movzbl	(%rax), %eax
 2725 1ef6 0FB6C0   		movzbl	%al, %eax
 2726 1ef9 660185C6 		addw	%ax, -65594(%rbp)
 2726      FFFEFF
 2727              	.L137:
 580:main_final_with_sync.c **** 			while ( i-- ) {
 2728              		.loc 1 580 0
 2729 1f00 488B85D0 		movq	-65584(%rbp), %rax
 2729      FFFEFF
 2730 1f07 488D50FF 		leaq	-1(%rax), %rdx
 2731 1f0b 488995D0 		movq	%rdx, -65584(%rbp)
 2731      FFFEFF
 2732 1f12 4885C0   		testq	%rax, %rax
 2733 1f15 75CA     		jne	.L138
 2734              	.L134:
 582:main_final_with_sync.c **** 			}
 583:main_final_with_sync.c **** 		}
 584:main_final_with_sync.c **** 	} while ( bytesRead == WRITE_MAX );
 2735              		.loc 1 584 0
 2736 1f17 4881BDE8 		cmpq	$65531, -65560(%rbp)
 2736      FFFEFFFB 
 2736      FF0000
 2737 1f22 0F84F5FE 		je	.L139
 2737      FFFF
 585:main_final_with_sync.c **** 
 586:main_final_with_sync.c **** 	// Wait for writes to be received. This is optional, but it's only fair if we're benchmarking to
 587:main_final_with_sync.c **** 	// actually wait for the work to be completed.
 588:main_final_with_sync.c **** 	fStatus = flAwaitAsyncWrites(handle, error);
 2738              		.loc 1 588 0
 2739 1f28 488B9590 		movq	-65648(%rbp), %rdx
 2739      FFFEFF
 2740 1f2f 488B85B8 		movq	-65608(%rbp), %rax
 2740      FFFEFF
 2741 1f36 4889D6   		movq	%rdx, %rsi
 2742 1f39 4889C7   		movq	%rax, %rdi
 2743 1f3c E8000000 		call	flAwaitAsyncWrites
 2743      00
 2744 1f41 8985CCFF 		movl	%eax, -65588(%rbp)
 2744      FEFF
 589:main_final_with_sync.c **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 2745              		.loc 1 589 0
 2746 1f47 83BDCCFF 		cmpl	$0, -65588(%rbp)
 2746      FEFF00
 2747 1f4e 7420     		je	.L140
 2748              		.loc 1 589 0 is_stmt 0 discriminator 1
 2749 1f50 488B8590 		movq	-65648(%rbp), %rax
 2749      FFFEFF
 2750 1f57 BE000000 		movl	$.LC27, %esi
 2750      00
 2751 1f5c 4889C7   		movq	%rax, %rdi
 2752 1f5f E8000000 		call	errPrefix
 2752      00
 2753 1f64 C785C8FF 		movl	$1, -65592(%rbp)
 2753      FEFF0100 
 2753      0000
 2754 1f6e EB22     		jmp	.L136
 2755              	.L140:
 590:main_final_with_sync.c **** 
 591:main_final_with_sync.c **** 	// Return checksum & length to caller
 592:main_final_with_sync.c **** 	*checksum = csVal;
 2756              		.loc 1 592 0 is_stmt 1
 2757 1f70 488B8598 		movq	-65640(%rbp), %rax
 2757      FFFEFF
 2758 1f77 0FB795C6 		movzwl	-65594(%rbp), %edx
 2758      FFFEFF
 2759 1f7e 668910   		movw	%dx, (%rax)
 593:main_final_with_sync.c **** 	*length = lenVal;
 2760              		.loc 1 593 0
 2761 1f81 488B85A0 		movq	-65632(%rbp), %rax
 2761      FFFEFF
 2762 1f88 488B95E0 		movq	-65568(%rbp), %rdx
 2762      FFFEFF
 2763 1f8f 488910   		movq	%rdx, (%rax)
 2764              	.L136:
 594:main_final_with_sync.c **** 	cleanup:
 595:main_final_with_sync.c **** 	return retVal;
 2765              		.loc 1 595 0
 2766 1f92 8B85C8FF 		movl	-65592(%rbp), %eax
 2766      FEFF
 596:main_final_with_sync.c **** }
 2767              		.loc 1 596 0
 2768 1f98 488B4DF8 		movq	-8(%rbp), %rcx
 2769 1f9c 6448330C 		xorq	%fs:40, %rcx
 2769      25280000 
 2769      00
 2770 1fa5 7405     		je	.L142
 2771 1fa7 E8000000 		call	__stack_chk_fail
 2771      00
 2772              	.L142:
 2773 1fac C9       		leave
 2774              		.cfi_def_cfa 7, 8
 2775 1fad C3       		ret
 2776              		.cfi_endproc
 2777              	.LFE20:
 2779              		.section	.rodata
 2780              	.LC28:
 2781 0222 776200   		.string	"wb"
 2782 0225 000000   		.align 8
 2783              	.LC31:
 2784 0228 52656164 		.string	"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n"
 2784      20256420 
 2784      62797465 
 2784      73202863 
 2784      6865636B 
 2785              	.LC32:
 2786 0265 726200   		.string	"rb"
 2787              		.align 8
 2788              	.LC33:
 2789 0268 57726F74 		.string	"Wrote %zu bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n"
 2789      6520257A 
 2789      75206279 
 2789      74657320 
 2789      28636865 
 2790              	.LC34:
 2791 02a6 25732061 		.string	"%s at column %d\n  %s\n  "
 2791      7420636F 
 2791      6C756D6E 
 2791      2025640A 
 2791      20202573 
 2792              	.LC35:
 2793 02be 5E0A00   		.string	"^\n"
 2794              		.text
 2796              	parseLine:
 2797              	.LFB21:
 597:main_final_with_sync.c **** 
 598:main_final_with_sync.c **** static int parseLine(struct FLContext *handle, const char *line, const char **error) {
 2798              		.loc 1 598 0
 2799              		.cfi_startproc
 2800 1fae 55       		pushq	%rbp
 2801              		.cfi_def_cfa_offset 16
 2802              		.cfi_offset 6, -16
 2803 1faf 4889E5   		movq	%rsp, %rbp
 2804              		.cfi_def_cfa_register 6
 2805 1fb2 4881EC10 		subq	$272, %rsp
 2805      010000
 2806 1fb9 4889BD08 		movq	%rdi, -248(%rbp)
 2806      FFFFFF
 2807 1fc0 4889B500 		movq	%rsi, -256(%rbp)
 2807      FFFFFF
 2808 1fc7 488995F8 		movq	%rdx, -264(%rbp)
 2808      FEFFFF
 2809              		.loc 1 598 0
 2810 1fce 64488B04 		movq	%fs:40, %rax
 2810      25280000 
 2810      00
 2811 1fd7 488945F8 		movq	%rax, -8(%rbp)
 2812 1fdb 31C0     		xorl	%eax, %eax
 599:main_final_with_sync.c **** 	ReturnCode retVal = FLP_SUCCESS, status;
 2813              		.loc 1 599 0
 2814 1fdd C78514FF 		movl	$0, -236(%rbp)
 2814      FFFF0000 
 2814      0000
 600:main_final_with_sync.c **** 	FLStatus fStatus;
 601:main_final_with_sync.c **** 	struct Buffer dataFromFPGA = {0,};
 2815              		.loc 1 601 0
 2816 1fe7 48C745D0 		movq	$0, -48(%rbp)
 2816      00000000 
 2817 1fef 48C745D8 		movq	$0, -40(%rbp)
 2817      00000000 
 2818 1ff7 48C745E0 		movq	$0, -32(%rbp)
 2818      00000000 
 2819 1fff 48C745E8 		movq	$0, -24(%rbp)
 2819      00000000 
 602:main_final_with_sync.c **** 	BufferStatus bStatus;
 603:main_final_with_sync.c **** 	uint8 *data = NULL;
 2820              		.loc 1 603 0
 2821 2007 48C78548 		movq	$0, -184(%rbp)
 2821      FFFFFF00 
 2821      000000
 604:main_final_with_sync.c **** 	char *fileName = NULL;
 2822              		.loc 1 604 0
 2823 2012 48C78550 		movq	$0, -176(%rbp)
 2823      FFFFFF00 
 2823      000000
 605:main_final_with_sync.c **** 	FILE *file = NULL;
 2824              		.loc 1 605 0
 2825 201d 48C78558 		movq	$0, -168(%rbp)
 2825      FFFFFF00 
 2825      000000
 606:main_final_with_sync.c **** 	double totalTime, speed;
 607:main_final_with_sync.c **** 	#ifdef WIN32
 608:main_final_with_sync.c **** 	LARGE_INTEGER tvStart, tvEnd, freq;
 609:main_final_with_sync.c **** 	DWORD_PTR mask = 1;
 610:main_final_with_sync.c **** 	SetThreadAffinityMask(GetCurrentThread(), mask);
 611:main_final_with_sync.c **** 	QueryPerformanceFrequency(&freq);
 612:main_final_with_sync.c **** 	#else
 613:main_final_with_sync.c **** 	struct timeval tvStart, tvEnd;
 614:main_final_with_sync.c **** 	long long startTime, endTime;
 615:main_final_with_sync.c **** 	#endif
 616:main_final_with_sync.c **** 	bStatus = bufInitialise(&dataFromFPGA, 1024, 0x00, error);
 2826              		.loc 1 616 0
 2827 2028 488B95F8 		movq	-264(%rbp), %rdx
 2827      FEFFFF
 2828 202f 488D45D0 		leaq	-48(%rbp), %rax
 2829 2033 4889D1   		movq	%rdx, %rcx
 2830 2036 BA000000 		movl	$0, %edx
 2830      00
 2831 203b BE000400 		movl	$1024, %esi
 2831      00
 2832 2040 4889C7   		movq	%rax, %rdi
 2833 2043 E8000000 		call	bufInitialise
 2833      00
 2834 2048 898520FF 		movl	%eax, -224(%rbp)
 2834      FFFF
 617:main_final_with_sync.c **** 	CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 2835              		.loc 1 617 0
 2836 204e 83BD20FF 		cmpl	$0, -224(%rbp)
 2836      FFFF00
 2837 2055 740F     		je	.L144
 2838              		.loc 1 617 0 is_stmt 0 discriminator 1
 2839 2057 C78514FF 		movl	$1, -236(%rbp)
 2839      FFFF0100 
 2839      0000
 2840 2061 E9E40E00 		jmp	.L145
 2840      00
 2841              	.L144:
 618:main_final_with_sync.c **** 	ptr = line;
 2842              		.loc 1 618 0 is_stmt 1
 2843 2066 488B8500 		movq	-256(%rbp), %rax
 2843      FFFFFF
 2844 206d 48890500 		movq	%rax, ptr(%rip)
 2844      000000
 619:main_final_with_sync.c **** 	do {
 620:main_final_with_sync.c **** 		while ( *ptr == ';' ) {
 2845              		.loc 1 620 0
 2846 2074 EB12     		jmp	.L146
 2847              	.L147:
 621:main_final_with_sync.c **** 			ptr++;
 2848              		.loc 1 621 0
 2849 2076 488B0500 		movq	ptr(%rip), %rax
 2849      000000
 2850 207d 4883C001 		addq	$1, %rax
 2851 2081 48890500 		movq	%rax, ptr(%rip)
 2851      000000
 2852              	.L146:
 620:main_final_with_sync.c **** 			ptr++;
 2853              		.loc 1 620 0
 2854 2088 488B0500 		movq	ptr(%rip), %rax
 2854      000000
 2855 208f 0FB600   		movzbl	(%rax), %eax
 2856 2092 3C3B     		cmpb	$59, %al
 2857 2094 74E0     		je	.L147
 622:main_final_with_sync.c **** 		}
 623:main_final_with_sync.c **** 		switch ( *ptr ) {
 2858              		.loc 1 623 0
 2859 2096 488B0500 		movq	ptr(%rip), %rax
 2859      000000
 2860 209d 0FB600   		movzbl	(%rax), %eax
 2861 20a0 0FBEC0   		movsbl	%al, %eax
 2862 20a3 83F872   		cmpl	$114, %eax
 2863 20a6 7417     		je	.L149
 2864 20a8 83F877   		cmpl	$119, %eax
 2865 20ab 0F84C306 		je	.L150
 2865      0000
 2866 20b1 83F82B   		cmpl	$43, %eax
 2867 20b4 0F84530D 		je	.L151
 2867      0000
 2868 20ba E93A0E00 		jmp	.L221
 2868      00
 2869              	.L149:
 2870              	.LBB32:
 624:main_final_with_sync.c **** 			case 'r':{
 625:main_final_with_sync.c **** 				uint32 chan;
 626:main_final_with_sync.c **** 				uint32 length = 1;
 2871              		.loc 1 626 0
 2872 20bf C78518FF 		movl	$1, -232(%rbp)
 2872      FFFF0100 
 2872      0000
 627:main_final_with_sync.c **** 				char *end;
 628:main_final_with_sync.c **** 				ptr++;
 2873              		.loc 1 628 0
 2874 20c9 488B0500 		movq	ptr(%rip), %rax
 2874      000000
 2875 20d0 4883C001 		addq	$1, %rax
 2876 20d4 48890500 		movq	%rax, ptr(%rip)
 2876      000000
 629:main_final_with_sync.c **** 
 630:main_final_with_sync.c **** 			// Get the channel to be read:
 631:main_final_with_sync.c **** 				errno = 0;
 2877              		.loc 1 631 0
 2878 20db E8000000 		call	__errno_location
 2878      00
 2879 20e0 C7000000 		movl	$0, (%rax)
 2879      0000
 632:main_final_with_sync.c **** 				chan = (uint32)strtoul(ptr, &end, 16);
 2880              		.loc 1 632 0
 2881 20e6 488B0500 		movq	ptr(%rip), %rax
 2881      000000
 2882 20ed 488D8D40 		leaq	-192(%rbp), %rcx
 2882      FFFFFF
 2883 20f4 BA100000 		movl	$16, %edx
 2883      00
 2884 20f9 4889CE   		movq	%rcx, %rsi
 2885 20fc 4889C7   		movq	%rax, %rdi
 2886 20ff E8000000 		call	strtoul
 2886      00
 2887 2104 898530FF 		movl	%eax, -208(%rbp)
 2887      FFFF
 633:main_final_with_sync.c **** 				CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 2888              		.loc 1 633 0
 2889 210a E8000000 		call	__errno_location
 2889      00
 2890 210f 8B00     		movl	(%rax), %eax
 2891 2111 85C0     		testl	%eax, %eax
 2892 2113 740F     		je	.L152
 2893              		.loc 1 633 0 is_stmt 0 discriminator 1
 2894 2115 C78514FF 		movl	$2, -236(%rbp)
 2894      FFFF0200 
 2894      0000
 2895 211f E9260E00 		jmp	.L145
 2895      00
 2896              	.L152:
 634:main_final_with_sync.c **** 
 635:main_final_with_sync.c **** 			// Ensure that it's 0-127
 636:main_final_with_sync.c **** 				CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 2897              		.loc 1 636 0 is_stmt 1
 2898 2124 83BD30FF 		cmpl	$127, -208(%rbp)
 2898      FFFF7F
 2899 212b 760F     		jbe	.L154
 2900              		.loc 1 636 0 is_stmt 0 discriminator 1
 2901 212d C78514FF 		movl	$3, -236(%rbp)
 2901      FFFF0300 
 2901      0000
 2902 2137 E90E0E00 		jmp	.L145
 2902      00
 2903              	.L154:
 637:main_final_with_sync.c **** 				ptr = end;
 2904              		.loc 1 637 0 is_stmt 1
 2905 213c 488B8540 		movq	-192(%rbp), %rax
 2905      FFFFFF
 2906 2143 48890500 		movq	%rax, ptr(%rip)
 2906      000000
 638:main_final_with_sync.c **** 
 639:main_final_with_sync.c **** 			// Only three valid chars at this point:
 640:main_final_with_sync.c **** 				CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 2907              		.loc 1 640 0
 2908 214a 488B0500 		movq	ptr(%rip), %rax
 2908      000000
 2909 2151 0FB600   		movzbl	(%rax), %eax
 2910 2154 84C0     		testb	%al, %al
 2911 2156 742B     		je	.L155
 2912              		.loc 1 640 0 is_stmt 0 discriminator 1
 2913 2158 488B0500 		movq	ptr(%rip), %rax
 2913      000000
 2914 215f 0FB600   		movzbl	(%rax), %eax
 2915 2162 3C3B     		cmpb	$59, %al
 2916 2164 741D     		je	.L155
 2917              		.loc 1 640 0 discriminator 2
 2918 2166 488B0500 		movq	ptr(%rip), %rax
 2918      000000
 2919 216d 0FB600   		movzbl	(%rax), %eax
 2920 2170 3C20     		cmpb	$32, %al
 2921 2172 740F     		je	.L155
 2922              		.loc 1 640 0 discriminator 3
 2923 2174 C78514FF 		movl	$5, -236(%rbp)
 2923      FFFF0500 
 2923      0000
 2924 217e E9C70D00 		jmp	.L145
 2924      00
 2925              	.L155:
 641:main_final_with_sync.c **** 
 642:main_final_with_sync.c **** 				if ( *ptr == ' ' ) {
 2926              		.loc 1 642 0 is_stmt 1
 2927 2183 488B0500 		movq	ptr(%rip), %rax
 2927      000000
 2928 218a 0FB600   		movzbl	(%rax), %eax
 2929 218d 3C20     		cmpb	$32, %al
 2930 218f 0F851D02 		jne	.L156
 2930      0000
 643:main_final_with_sync.c **** 					ptr++;
 2931              		.loc 1 643 0
 2932 2195 488B0500 		movq	ptr(%rip), %rax
 2932      000000
 2933 219c 4883C001 		addq	$1, %rax
 2934 21a0 48890500 		movq	%rax, ptr(%rip)
 2934      000000
 644:main_final_with_sync.c **** 
 645:main_final_with_sync.c **** 				// Get the read count:
 646:main_final_with_sync.c **** 					errno = 0;
 2935              		.loc 1 646 0
 2936 21a7 E8000000 		call	__errno_location
 2936      00
 2937 21ac C7000000 		movl	$0, (%rax)
 2937      0000
 647:main_final_with_sync.c **** 					length = (uint32)strtoul(ptr, &end, 16);
 2938              		.loc 1 647 0
 2939 21b2 488B0500 		movq	ptr(%rip), %rax
 2939      000000
 2940 21b9 488D8D40 		leaq	-192(%rbp), %rcx
 2940      FFFFFF
 2941 21c0 BA100000 		movl	$16, %edx
 2941      00
 2942 21c5 4889CE   		movq	%rcx, %rsi
 2943 21c8 4889C7   		movq	%rax, %rdi
 2944 21cb E8000000 		call	strtoul
 2944      00
 2945 21d0 898518FF 		movl	%eax, -232(%rbp)
 2945      FFFF
 648:main_final_with_sync.c **** 					CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 2946              		.loc 1 648 0
 2947 21d6 E8000000 		call	__errno_location
 2947      00
 2948 21db 8B00     		movl	(%rax), %eax
 2949 21dd 85C0     		testl	%eax, %eax
 2950 21df 740F     		je	.L157
 2951              		.loc 1 648 0 is_stmt 0 discriminator 1
 2952 21e1 C78514FF 		movl	$2, -236(%rbp)
 2952      FFFF0200 
 2952      0000
 2953 21eb E95A0D00 		jmp	.L145
 2953      00
 2954              	.L157:
 649:main_final_with_sync.c **** 					ptr = end;
 2955              		.loc 1 649 0 is_stmt 1
 2956 21f0 488B8540 		movq	-192(%rbp), %rax
 2956      FFFFFF
 2957 21f7 48890500 		movq	%rax, ptr(%rip)
 2957      000000
 650:main_final_with_sync.c **** 
 651:main_final_with_sync.c **** 				// Only three valid chars at this point:
 652:main_final_with_sync.c **** 					CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 2958              		.loc 1 652 0
 2959 21fe 488B0500 		movq	ptr(%rip), %rax
 2959      000000
 2960 2205 0FB600   		movzbl	(%rax), %eax
 2961 2208 84C0     		testb	%al, %al
 2962 220a 742B     		je	.L158
 2963              		.loc 1 652 0 is_stmt 0 discriminator 1
 2964 220c 488B0500 		movq	ptr(%rip), %rax
 2964      000000
 2965 2213 0FB600   		movzbl	(%rax), %eax
 2966 2216 3C3B     		cmpb	$59, %al
 2967 2218 741D     		je	.L158
 2968              		.loc 1 652 0 discriminator 2
 2969 221a 488B0500 		movq	ptr(%rip), %rax
 2969      000000
 2970 2221 0FB600   		movzbl	(%rax), %eax
 2971 2224 3C20     		cmpb	$32, %al
 2972 2226 740F     		je	.L158
 2973              		.loc 1 652 0 discriminator 3
 2974 2228 C78514FF 		movl	$5, -236(%rbp)
 2974      FFFF0500 
 2974      0000
 2975 2232 E9130D00 		jmp	.L145
 2975      00
 2976              	.L158:
 653:main_final_with_sync.c **** 					if ( *ptr == ' ' ) {
 2977              		.loc 1 653 0 is_stmt 1
 2978 2237 488B0500 		movq	ptr(%rip), %rax
 2978      000000
 2979 223e 0FB600   		movzbl	(%rax), %eax
 2980 2241 3C20     		cmpb	$32, %al
 2981 2243 0F856901 		jne	.L156
 2981      0000
 2982              	.LBB33:
 654:main_final_with_sync.c **** 						const char *p;
 655:main_final_with_sync.c **** 						const char quoteChar = *++ptr;
 2983              		.loc 1 655 0
 2984 2249 488B0500 		movq	ptr(%rip), %rax
 2984      000000
 2985 2250 4883C001 		addq	$1, %rax
 2986 2254 48890500 		movq	%rax, ptr(%rip)
 2986      000000
 2987 225b 488B0500 		movq	ptr(%rip), %rax
 2987      000000
 2988 2262 0FB600   		movzbl	(%rax), %eax
 2989 2265 888511FF 		movb	%al, -239(%rbp)
 2989      FFFF
 656:main_final_with_sync.c **** 						CHECK_STATUS(
 2990              		.loc 1 656 0
 2991 226b 80BD11FF 		cmpb	$34, -239(%rbp)
 2991      FFFF22
 2992 2272 7418     		je	.L159
 2993              		.loc 1 656 0 is_stmt 0 discriminator 1
 2994 2274 80BD11FF 		cmpb	$39, -239(%rbp)
 2994      FFFF27
 2995 227b 740F     		je	.L159
 2996              		.loc 1 656 0 discriminator 2
 2997 227d C78514FF 		movl	$5, -236(%rbp)
 2997      FFFF0500 
 2997      0000
 2998 2287 E9BE0C00 		jmp	.L145
 2998      00
 2999              	.L159:
 657:main_final_with_sync.c **** 							(quoteChar != '"' && quoteChar != '\''),
 658:main_final_with_sync.c **** 							FLP_ILL_CHAR, cleanup);
 659:main_final_with_sync.c **** 
 660:main_final_with_sync.c **** 					// Get the file to write bytes to:
 661:main_final_with_sync.c **** 						ptr++;
 3000              		.loc 1 661 0 is_stmt 1
 3001 228c 488B0500 		movq	ptr(%rip), %rax
 3001      000000
 3002 2293 4883C001 		addq	$1, %rax
 3003 2297 48890500 		movq	%rax, ptr(%rip)
 3003      000000
 662:main_final_with_sync.c **** 						p = ptr;
 3004              		.loc 1 662 0
 3005 229e 488B0500 		movq	ptr(%rip), %rax
 3005      000000
 3006 22a5 48898560 		movq	%rax, -160(%rbp)
 3006      FFFFFF
 663:main_final_with_sync.c **** 						while ( *p != quoteChar && *p != '\0' ) {
 3007              		.loc 1 663 0
 3008 22ac EB08     		jmp	.L160
 3009              	.L162:
 664:main_final_with_sync.c **** 							p++;
 3010              		.loc 1 664 0
 3011 22ae 48838560 		addq	$1, -160(%rbp)
 3011      FFFFFF01 
 3012              	.L160:
 663:main_final_with_sync.c **** 						while ( *p != quoteChar && *p != '\0' ) {
 3013              		.loc 1 663 0
 3014 22b6 488B8560 		movq	-160(%rbp), %rax
 3014      FFFFFF
 3015 22bd 0FB600   		movzbl	(%rax), %eax
 3016 22c0 3A8511FF 		cmpb	-239(%rbp), %al
 3016      FFFF
 3017 22c6 740E     		je	.L161
 663:main_final_with_sync.c **** 						while ( *p != quoteChar && *p != '\0' ) {
 3018              		.loc 1 663 0 is_stmt 0 discriminator 1
 3019 22c8 488B8560 		movq	-160(%rbp), %rax
 3019      FFFFFF
 3020 22cf 0FB600   		movzbl	(%rax), %eax
 3021 22d2 84C0     		testb	%al, %al
 3022 22d4 75D8     		jne	.L162
 3023              	.L161:
 665:main_final_with_sync.c **** 						}
 666:main_final_with_sync.c **** 						CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 3024              		.loc 1 666 0 is_stmt 1
 3025 22d6 488B8560 		movq	-160(%rbp), %rax
 3025      FFFFFF
 3026 22dd 0FB600   		movzbl	(%rax), %eax
 3027 22e0 84C0     		testb	%al, %al
 3028 22e2 750F     		jne	.L163
 3029              		.loc 1 666 0 is_stmt 0 discriminator 1
 3030 22e4 C78514FF 		movl	$6, -236(%rbp)
 3030      FFFF0600 
 3030      0000
 3031 22ee E9570C00 		jmp	.L145
 3031      00
 3032              	.L163:
 667:main_final_with_sync.c **** 						fileName = malloc((size_t)(p - ptr + 1));
 3033              		.loc 1 667 0 is_stmt 1
 3034 22f3 488B8560 		movq	-160(%rbp), %rax
 3034      FFFFFF
 3035 22fa 488B1500 		movq	ptr(%rip), %rdx
 3035      000000
 3036 2301 4829D0   		subq	%rdx, %rax
 3037 2304 4883C001 		addq	$1, %rax
 3038 2308 4889C7   		movq	%rax, %rdi
 3039 230b E8000000 		call	malloc
 3039      00
 3040 2310 48898550 		movq	%rax, -176(%rbp)
 3040      FFFFFF
 668:main_final_with_sync.c **** 						CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 3041              		.loc 1 668 0
 3042 2317 4883BD50 		cmpq	$0, -176(%rbp)
 3042      FFFFFF00 
 3043 231f 750F     		jne	.L164
 3044              		.loc 1 668 0 is_stmt 0 discriminator 1
 3045 2321 C78514FF 		movl	$7, -236(%rbp)
 3045      FFFF0700 
 3045      0000
 3046 232b E91A0C00 		jmp	.L145
 3046      00
 3047              	.L164:
 669:main_final_with_sync.c **** 						CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 3048              		.loc 1 669 0 is_stmt 1
 3049 2330 488B8560 		movq	-160(%rbp), %rax
 3049      FFFFFF
 3050 2337 488B1500 		movq	ptr(%rip), %rdx
 3050      000000
 3051 233e 4839D0   		cmpq	%rdx, %rax
 3052 2341 750F     		jne	.L165
 3053              		.loc 1 669 0 is_stmt 0 discriminator 1
 3054 2343 C78514FF 		movl	$8, -236(%rbp)
 3054      FFFF0800 
 3054      0000
 3055 234d E9F80B00 		jmp	.L145
 3055      00
 3056              	.L165:
 670:main_final_with_sync.c **** 						strncpy(fileName, ptr, (size_t)(p - ptr));
 3057              		.loc 1 670 0 is_stmt 1
 3058 2352 488B8560 		movq	-160(%rbp), %rax
 3058      FFFFFF
 3059 2359 488B1500 		movq	ptr(%rip), %rdx
 3059      000000
 3060 2360 4829D0   		subq	%rdx, %rax
 3061 2363 4889C2   		movq	%rax, %rdx
 3062 2366 488B0D00 		movq	ptr(%rip), %rcx
 3062      000000
 3063 236d 488B8550 		movq	-176(%rbp), %rax
 3063      FFFFFF
 3064 2374 4889CE   		movq	%rcx, %rsi
 3065 2377 4889C7   		movq	%rax, %rdi
 3066 237a E8000000 		call	strncpy
 3066      00
 671:main_final_with_sync.c **** 						fileName[p - ptr] = '\0';
 3067              		.loc 1 671 0
 3068 237f 488B8560 		movq	-160(%rbp), %rax
 3068      FFFFFF
 3069 2386 488B1500 		movq	ptr(%rip), %rdx
 3069      000000
 3070 238d 4829D0   		subq	%rdx, %rax
 3071 2390 4889C2   		movq	%rax, %rdx
 3072 2393 488B8550 		movq	-176(%rbp), %rax
 3072      FFFFFF
 3073 239a 4801D0   		addq	%rdx, %rax
 3074 239d C60000   		movb	$0, (%rax)
 672:main_final_with_sync.c **** 						ptr = p + 1;
 3075              		.loc 1 672 0
 3076 23a0 488B8560 		movq	-160(%rbp), %rax
 3076      FFFFFF
 3077 23a7 4883C001 		addq	$1, %rax
 3078 23ab 48890500 		movq	%rax, ptr(%rip)
 3078      000000
 3079              	.L156:
 3080              	.LBE33:
 673:main_final_with_sync.c **** 					}
 674:main_final_with_sync.c **** 				}
 675:main_final_with_sync.c **** 				if ( fileName ) {
 3081              		.loc 1 675 0
 3082 23b2 4883BD50 		cmpq	$0, -176(%rbp)
 3082      FFFFFF00 
 3083 23ba 0F84EA01 		je	.L166
 3083      0000
 3084              	.LBB34:
 676:main_final_with_sync.c **** 					uint16 checksum = 0x0000;
 3085              		.loc 1 676 0
 3086 23c0 66C78538 		movw	$0, -200(%rbp)
 3086      FFFFFF00 
 3086      00
 677:main_final_with_sync.c **** 
 678:main_final_with_sync.c **** 				// Open file for writing
 679:main_final_with_sync.c **** 					file = fopen(fileName, "wb");
 3087              		.loc 1 679 0
 3088 23c9 488B8550 		movq	-176(%rbp), %rax
 3088      FFFFFF
 3089 23d0 BE000000 		movl	$.LC28, %esi
 3089      00
 3090 23d5 4889C7   		movq	%rax, %rdi
 3091 23d8 E8000000 		call	fopen
 3091      00
 3092 23dd 48898558 		movq	%rax, -168(%rbp)
 3092      FFFFFF
 680:main_final_with_sync.c **** 					CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 3093              		.loc 1 680 0
 3094 23e4 4883BD58 		cmpq	$0, -168(%rbp)
 3094      FFFFFF00 
 3095 23ec 750F     		jne	.L167
 3096              		.loc 1 680 0 is_stmt 0 discriminator 1
 3097 23ee C78514FF 		movl	$11, -236(%rbp)
 3097      FFFF0B00 
 3097      0000
 3098 23f8 E94D0B00 		jmp	.L145
 3098      00
 3099              	.L167:
 681:main_final_with_sync.c **** 					free(fileName);
 3100              		.loc 1 681 0 is_stmt 1
 3101 23fd 488B8550 		movq	-176(%rbp), %rax
 3101      FFFFFF
 3102 2404 4889C7   		movq	%rax, %rdi
 3103 2407 E8000000 		call	free
 3103      00
 682:main_final_with_sync.c **** 					fileName = NULL;
 3104              		.loc 1 682 0
 3105 240c 48C78550 		movq	$0, -176(%rbp)
 3105      FFFFFF00 
 3105      000000
 683:main_final_with_sync.c **** 					
 684:main_final_with_sync.c **** 				#ifdef WIN32
 685:main_final_with_sync.c **** 					QueryPerformanceCounter(&tvStart);
 686:main_final_with_sync.c **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 687:main_final_with_sync.c **** 					QueryPerformanceCounter(&tvEnd);
 688:main_final_with_sync.c **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 689:main_final_with_sync.c **** 					totalTime /= freq.QuadPart;
 690:main_final_with_sync.c **** 					speed = (double)length / (1024*1024*totalTime);
 691:main_final_with_sync.c **** 				#else
 692:main_final_with_sync.c **** 					gettimeofday(&tvStart, NULL);
 3106              		.loc 1 692 0
 3107 2417 488D45B0 		leaq	-80(%rbp), %rax
 3108 241b BE000000 		movl	$0, %esi
 3108      00
 3109 2420 4889C7   		movq	%rax, %rdi
 3110 2423 E8000000 		call	gettimeofday
 3110      00
 693:main_final_with_sync.c **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 3111              		.loc 1 693 0
 3112 2428 8B8530FF 		movl	-208(%rbp), %eax
 3112      FFFF
 3113 242e 0FB6F0   		movzbl	%al, %esi
 3114 2431 4C8B85F8 		movq	-264(%rbp), %r8
 3114      FEFFFF
 3115 2438 488DBD38 		leaq	-200(%rbp), %rdi
 3115      FFFFFF
 3116 243f 488B8D58 		movq	-168(%rbp), %rcx
 3116      FFFFFF
 3117 2446 8B9518FF 		movl	-232(%rbp), %edx
 3117      FFFF
 3118 244c 488B8508 		movq	-248(%rbp), %rax
 3118      FFFFFF
 3119 2453 4D89C1   		movq	%r8, %r9
 3120 2456 4989F8   		movq	%rdi, %r8
 3121 2459 4889C7   		movq	%rax, %rdi
 3122 245c E8A7F6FF 		call	doRead
 3122      FF
 3123 2461 898528FF 		movl	%eax, -216(%rbp)
 3123      FFFF
 694:main_final_with_sync.c **** 					gettimeofday(&tvEnd, NULL);
 3124              		.loc 1 694 0
 3125 2467 488D45C0 		leaq	-64(%rbp), %rax
 3126 246b BE000000 		movl	$0, %esi
 3126      00
 3127 2470 4889C7   		movq	%rax, %rdi
 3128 2473 E8000000 		call	gettimeofday
 3128      00
 695:main_final_with_sync.c **** 					startTime = tvStart.tv_sec;
 3129              		.loc 1 695 0
 3130 2478 488B45B0 		movq	-80(%rbp), %rax
 3131 247c 48894588 		movq	%rax, -120(%rbp)
 696:main_final_with_sync.c **** 					startTime *= 1000000;
 3132              		.loc 1 696 0
 3133 2480 488B4588 		movq	-120(%rbp), %rax
 3134 2484 4869C040 		imulq	$1000000, %rax, %rax
 3134      420F00
 3135 248b 48894588 		movq	%rax, -120(%rbp)
 697:main_final_with_sync.c **** 					startTime += tvStart.tv_usec;
 3136              		.loc 1 697 0
 3137 248f 488B45B8 		movq	-72(%rbp), %rax
 3138 2493 48014588 		addq	%rax, -120(%rbp)
 698:main_final_with_sync.c **** 					endTime = tvEnd.tv_sec;
 3139              		.loc 1 698 0
 3140 2497 488B45C0 		movq	-64(%rbp), %rax
 3141 249b 48894590 		movq	%rax, -112(%rbp)
 699:main_final_with_sync.c **** 					endTime *= 1000000;
 3142              		.loc 1 699 0
 3143 249f 488B4590 		movq	-112(%rbp), %rax
 3144 24a3 4869C040 		imulq	$1000000, %rax, %rax
 3144      420F00
 3145 24aa 48894590 		movq	%rax, -112(%rbp)
 700:main_final_with_sync.c **** 					endTime += tvEnd.tv_usec;
 3146              		.loc 1 700 0
 3147 24ae 488B45C8 		movq	-56(%rbp), %rax
 3148 24b2 48014590 		addq	%rax, -112(%rbp)
 701:main_final_with_sync.c **** 					totalTime = (double)(endTime - startTime);
 3149              		.loc 1 701 0
 3150 24b6 488B4590 		movq	-112(%rbp), %rax
 3151 24ba 482B4588 		subq	-120(%rbp), %rax
 3152 24be 660FEFC0 		pxor	%xmm0, %xmm0
 3153 24c2 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 3153      C0
 3154 24c7 F20F1145 		movsd	%xmm0, -104(%rbp)
 3154      98
 702:main_final_with_sync.c **** 					totalTime /= 1000000;  // convert from uS to S.
 3155              		.loc 1 702 0
 3156 24cc F20F1045 		movsd	-104(%rbp), %xmm0
 3156      98
 3157 24d1 F20F100D 		movsd	.LC29(%rip), %xmm1
 3157      00000000 
 3158 24d9 F20F5EC1 		divsd	%xmm1, %xmm0
 3159 24dd F20F1145 		movsd	%xmm0, -104(%rbp)
 3159      98
 703:main_final_with_sync.c **** 					speed = (double)length / (1024*1024*totalTime);
 3160              		.loc 1 703 0
 3161 24e2 8B8518FF 		movl	-232(%rbp), %eax
 3161      FFFF
 3162 24e8 4885C0   		testq	%rax, %rax
 3163 24eb 780B     		js	.L169
 3164 24ed 660FEFC0 		pxor	%xmm0, %xmm0
 3165 24f1 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 3165      C0
 3166 24f6 EB19     		jmp	.L170
 3167              	.L169:
 3168 24f8 4889C2   		movq	%rax, %rdx
 3169 24fb 48D1EA   		shrq	%rdx
 3170 24fe 83E001   		andl	$1, %eax
 3171 2501 4809C2   		orq	%rax, %rdx
 3172 2504 660FEFC0 		pxor	%xmm0, %xmm0
 3173 2508 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 3173      C2
 3174 250d F20F58C0 		addsd	%xmm0, %xmm0
 3175              	.L170:
 3176 2511 F20F1055 		movsd	-104(%rbp), %xmm2
 3176      98
 3177 2516 F20F100D 		movsd	.LC30(%rip), %xmm1
 3177      00000000 
 3178 251e F20F59CA 		mulsd	%xmm2, %xmm1
 3179 2522 F20F5EC1 		divsd	%xmm1, %xmm0
 3180 2526 F20F1145 		movsd	%xmm0, -96(%rbp)
 3180      A0
 704:main_final_with_sync.c **** 				#endif
 705:main_final_with_sync.c **** 					if ( enableBenchmarking ) {
 3181              		.loc 1 705 0
 3182 252b 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 3182      000000
 3183 2532 84C0     		testb	%al, %al
 3184 2534 743A     		je	.L171
 706:main_final_with_sync.c **** 						printf(
 3185              		.loc 1 706 0
 3186 2536 0FB78538 		movzwl	-200(%rbp), %eax
 3186      FFFFFF
 3187 253d 0FB7D0   		movzwl	%ax, %edx
 3188 2540 488B75A0 		movq	-96(%rbp), %rsi
 3189 2544 8B8D30FF 		movl	-208(%rbp), %ecx
 3189      FFFF
 3190 254a 8B8518FF 		movl	-232(%rbp), %eax
 3190      FFFF
 3191 2550 4889B5F0 		movq	%rsi, -272(%rbp)
 3191      FEFFFF
 3192 2557 F20F1085 		movsd	-272(%rbp), %xmm0
 3192      F0FEFFFF 
 3193 255f 89C6     		movl	%eax, %esi
 3194 2561 BF000000 		movl	$.LC31, %edi
 3194      00
 3195 2566 B8010000 		movl	$1, %eax
 3195      00
 3196 256b E8000000 		call	printf
 3196      00
 3197              	.L171:
 707:main_final_with_sync.c **** 							"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 708:main_final_with_sync.c **** 							length, checksum, chan, speed);
 709:main_final_with_sync.c **** 					}
 710:main_final_with_sync.c **** 					CHECK_STATUS(status, status, cleanup);
 3198              		.loc 1 710 0
 3199 2570 83BD28FF 		cmpl	$0, -216(%rbp)
 3199      FFFF00
 3200 2577 7412     		je	.L172
 3201              		.loc 1 710 0 is_stmt 0 discriminator 1
 3202 2579 8B8528FF 		movl	-216(%rbp), %eax
 3202      FFFF
 3203 257f 898514FF 		movl	%eax, -236(%rbp)
 3203      FFFF
 3204 2585 90       		nop
 3205              	.LBE34:
 633:main_final_with_sync.c **** 
 3206              		.loc 1 633 0 is_stmt 1 discriminator 1
 3207 2586 E9BF0900 		jmp	.L145
 3207      00
 3208              	.L172:
 3209              	.LBB35:
 711:main_final_with_sync.c **** 
 712:main_final_with_sync.c **** 				// Close the file
 713:main_final_with_sync.c **** 					fclose(file);
 3210              		.loc 1 713 0
 3211 258b 488B8558 		movq	-168(%rbp), %rax
 3211      FFFFFF
 3212 2592 4889C7   		movq	%rax, %rdi
 3213 2595 E8000000 		call	fclose
 3213      00
 714:main_final_with_sync.c **** 					file = NULL;
 3214              		.loc 1 714 0
 3215 259a 48C78558 		movq	$0, -168(%rbp)
 3215      FFFFFF00 
 3215      000000
 3216              	.LBE35:
 715:main_final_with_sync.c **** 				} else {
 716:main_final_with_sync.c **** 					size_t oldLength = dataFromFPGA.length;
 717:main_final_with_sync.c **** 					bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 718:main_final_with_sync.c **** 					CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 719:main_final_with_sync.c **** 				#ifdef WIN32
 720:main_final_with_sync.c **** 					QueryPerformanceCounter(&tvStart);
 721:main_final_with_sync.c **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 722:main_final_with_sync.c **** 					QueryPerformanceCounter(&tvEnd);
 723:main_final_with_sync.c **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 724:main_final_with_sync.c **** 					totalTime /= freq.QuadPart;
 725:main_final_with_sync.c **** 					speed = (double)length / (1024*1024*totalTime);
 726:main_final_with_sync.c **** 				#else
 727:main_final_with_sync.c **** 					gettimeofday(&tvStart, NULL);
 728:main_final_with_sync.c **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 729:main_final_with_sync.c **** 					gettimeofday(&tvEnd, NULL);
 730:main_final_with_sync.c **** 					startTime = tvStart.tv_sec;
 731:main_final_with_sync.c **** 					startTime *= 1000000;
 732:main_final_with_sync.c **** 					startTime += tvStart.tv_usec;
 733:main_final_with_sync.c **** 					endTime = tvEnd.tv_sec;
 734:main_final_with_sync.c **** 					endTime *= 1000000;
 735:main_final_with_sync.c **** 					endTime += tvEnd.tv_usec;
 736:main_final_with_sync.c **** 					totalTime = (double)(endTime - startTime);
 737:main_final_with_sync.c **** 					totalTime /= 1000000;  // convert from uS to S.
 738:main_final_with_sync.c **** 					speed = (double)length / (1024*1024*totalTime);
 739:main_final_with_sync.c **** 				#endif
 740:main_final_with_sync.c **** 					if ( enableBenchmarking ) {
 741:main_final_with_sync.c **** 						printf(
 742:main_final_with_sync.c **** 							"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 743:main_final_with_sync.c **** 							length, calcChecksum(dataFromFPGA.data + oldLength, length), chan, speed);
 744:main_final_with_sync.c **** 					}
 745:main_final_with_sync.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 746:main_final_with_sync.c **** 				}
 747:main_final_with_sync.c **** 				break;
 3217              		.loc 1 747 0
 3218 25a5 E95B0900 		jmp	.L222
 3218      00
 3219              	.L166:
 3220              	.LBB36:
 716:main_final_with_sync.c **** 					bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 3221              		.loc 1 716 0
 3222 25aa 488B45D8 		movq	-40(%rbp), %rax
 3223 25ae 488945A8 		movq	%rax, -88(%rbp)
 717:main_final_with_sync.c **** 					CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 3224              		.loc 1 717 0
 3225 25b2 8B9518FF 		movl	-232(%rbp), %edx
 3225      FFFF
 3226 25b8 488B8DF8 		movq	-264(%rbp), %rcx
 3226      FEFFFF
 3227 25bf 488D45D0 		leaq	-48(%rbp), %rax
 3228 25c3 BE000000 		movl	$0, %esi
 3228      00
 3229 25c8 4889C7   		movq	%rax, %rdi
 3230 25cb E8000000 		call	bufAppendConst
 3230      00
 3231 25d0 898520FF 		movl	%eax, -224(%rbp)
 3231      FFFF
 718:main_final_with_sync.c **** 				#ifdef WIN32
 3232              		.loc 1 718 0
 3233 25d6 83BD20FF 		cmpl	$0, -224(%rbp)
 3233      FFFF00
 3234 25dd 740F     		je	.L174
 718:main_final_with_sync.c **** 				#ifdef WIN32
 3235              		.loc 1 718 0 is_stmt 0 discriminator 1
 3236 25df C78514FF 		movl	$1, -236(%rbp)
 3236      FFFF0100 
 3236      0000
 3237 25e9 E95C0900 		jmp	.L145
 3237      00
 3238              	.L174:
 727:main_final_with_sync.c **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 3239              		.loc 1 727 0 is_stmt 1
 3240 25ee 488D45B0 		leaq	-80(%rbp), %rax
 3241 25f2 BE000000 		movl	$0, %esi
 3241      00
 3242 25f7 4889C7   		movq	%rax, %rdi
 3243 25fa E8000000 		call	gettimeofday
 3243      00
 728:main_final_with_sync.c **** 					gettimeofday(&tvEnd, NULL);
 3244              		.loc 1 728 0
 3245 25ff 488B55D0 		movq	-48(%rbp), %rdx
 3246 2603 488B45A8 		movq	-88(%rbp), %rax
 3247 2607 488D0C02 		leaq	(%rdx,%rax), %rcx
 3248 260b 8B9518FF 		movl	-232(%rbp), %edx
 3248      FFFF
 3249 2611 8B8530FF 		movl	-208(%rbp), %eax
 3249      FFFF
 3250 2617 0FB6F0   		movzbl	%al, %esi
 3251 261a 488BBDF8 		movq	-264(%rbp), %rdi
 3251      FEFFFF
 3252 2621 488B8508 		movq	-248(%rbp), %rax
 3252      FFFFFF
 3253 2628 4989F8   		movq	%rdi, %r8
 3254 262b 4889C7   		movq	%rax, %rdi
 3255 262e E8000000 		call	flReadChannel
 3255      00
 3256 2633 898524FF 		movl	%eax, -220(%rbp)
 3256      FFFF
 729:main_final_with_sync.c **** 					startTime = tvStart.tv_sec;
 3257              		.loc 1 729 0
 3258 2639 488D45C0 		leaq	-64(%rbp), %rax
 3259 263d BE000000 		movl	$0, %esi
 3259      00
 3260 2642 4889C7   		movq	%rax, %rdi
 3261 2645 E8000000 		call	gettimeofday
 3261      00
 730:main_final_with_sync.c **** 					startTime *= 1000000;
 3262              		.loc 1 730 0
 3263 264a 488B45B0 		movq	-80(%rbp), %rax
 3264 264e 48894588 		movq	%rax, -120(%rbp)
 731:main_final_with_sync.c **** 					startTime += tvStart.tv_usec;
 3265              		.loc 1 731 0
 3266 2652 488B4588 		movq	-120(%rbp), %rax
 3267 2656 4869C040 		imulq	$1000000, %rax, %rax
 3267      420F00
 3268 265d 48894588 		movq	%rax, -120(%rbp)
 732:main_final_with_sync.c **** 					endTime = tvEnd.tv_sec;
 3269              		.loc 1 732 0
 3270 2661 488B45B8 		movq	-72(%rbp), %rax
 3271 2665 48014588 		addq	%rax, -120(%rbp)
 733:main_final_with_sync.c **** 					endTime *= 1000000;
 3272              		.loc 1 733 0
 3273 2669 488B45C0 		movq	-64(%rbp), %rax
 3274 266d 48894590 		movq	%rax, -112(%rbp)
 734:main_final_with_sync.c **** 					endTime += tvEnd.tv_usec;
 3275              		.loc 1 734 0
 3276 2671 488B4590 		movq	-112(%rbp), %rax
 3277 2675 4869C040 		imulq	$1000000, %rax, %rax
 3277      420F00
 3278 267c 48894590 		movq	%rax, -112(%rbp)
 735:main_final_with_sync.c **** 					totalTime = (double)(endTime - startTime);
 3279              		.loc 1 735 0
 3280 2680 488B45C8 		movq	-56(%rbp), %rax
 3281 2684 48014590 		addq	%rax, -112(%rbp)
 736:main_final_with_sync.c **** 					totalTime /= 1000000;  // convert from uS to S.
 3282              		.loc 1 736 0
 3283 2688 488B4590 		movq	-112(%rbp), %rax
 3284 268c 482B4588 		subq	-120(%rbp), %rax
 3285 2690 660FEFC0 		pxor	%xmm0, %xmm0
 3286 2694 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 3286      C0
 3287 2699 F20F1145 		movsd	%xmm0, -104(%rbp)
 3287      98
 737:main_final_with_sync.c **** 					speed = (double)length / (1024*1024*totalTime);
 3288              		.loc 1 737 0
 3289 269e F20F1045 		movsd	-104(%rbp), %xmm0
 3289      98
 3290 26a3 F20F100D 		movsd	.LC29(%rip), %xmm1
 3290      00000000 
 3291 26ab F20F5EC1 		divsd	%xmm1, %xmm0
 3292 26af F20F1145 		movsd	%xmm0, -104(%rbp)
 3292      98
 738:main_final_with_sync.c **** 				#endif
 3293              		.loc 1 738 0
 3294 26b4 8B8518FF 		movl	-232(%rbp), %eax
 3294      FFFF
 3295 26ba 4885C0   		testq	%rax, %rax
 3296 26bd 780B     		js	.L175
 3297 26bf 660FEFC0 		pxor	%xmm0, %xmm0
 3298 26c3 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 3298      C0
 3299 26c8 EB19     		jmp	.L176
 3300              	.L175:
 3301 26ca 4889C2   		movq	%rax, %rdx
 3302 26cd 48D1EA   		shrq	%rdx
 3303 26d0 83E001   		andl	$1, %eax
 3304 26d3 4809C2   		orq	%rax, %rdx
 3305 26d6 660FEFC0 		pxor	%xmm0, %xmm0
 3306 26da F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 3306      C2
 3307 26df F20F58C0 		addsd	%xmm0, %xmm0
 3308              	.L176:
 3309 26e3 F20F1055 		movsd	-104(%rbp), %xmm2
 3309      98
 3310 26e8 F20F100D 		movsd	.LC30(%rip), %xmm1
 3310      00000000 
 3311 26f0 F20F59CA 		mulsd	%xmm2, %xmm1
 3312 26f4 F20F5EC1 		divsd	%xmm1, %xmm0
 3313 26f8 F20F1145 		movsd	%xmm0, -96(%rbp)
 3313      A0
 740:main_final_with_sync.c **** 						printf(
 3314              		.loc 1 740 0
 3315 26fd 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 3315      000000
 3316 2704 84C0     		testb	%al, %al
 3317 2706 744F     		je	.L177
 743:main_final_with_sync.c **** 					}
 3318              		.loc 1 743 0
 3319 2708 8B8518FF 		movl	-232(%rbp), %eax
 3319      FFFF
 3320 270e 488B4DD0 		movq	-48(%rbp), %rcx
 3321 2712 488B55A8 		movq	-88(%rbp), %rdx
 3322 2716 4801CA   		addq	%rcx, %rdx
 3323 2719 4889C6   		movq	%rax, %rsi
 3324 271c 4889D7   		movq	%rdx, %rdi
 3325 271f E88BF2FF 		call	calcChecksum
 3325      FF
 741:main_final_with_sync.c **** 							"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 3326              		.loc 1 741 0
 3327 2724 0FB7D0   		movzwl	%ax, %edx
 3328 2727 488B75A0 		movq	-96(%rbp), %rsi
 3329 272b 8B8D30FF 		movl	-208(%rbp), %ecx
 3329      FFFF
 3330 2731 8B8518FF 		movl	-232(%rbp), %eax
 3330      FFFF
 3331 2737 4889B5F0 		movq	%rsi, -272(%rbp)
 3331      FEFFFF
 3332 273e F20F1085 		movsd	-272(%rbp), %xmm0
 3332      F0FEFFFF 
 3333 2746 89C6     		movl	%eax, %esi
 3334 2748 BF000000 		movl	$.LC31, %edi
 3334      00
 3335 274d B8010000 		movl	$1, %eax
 3335      00
 3336 2752 E8000000 		call	printf
 3336      00
 3337              	.L177:
 745:main_final_with_sync.c **** 				}
 3338              		.loc 1 745 0
 3339 2757 83BD24FF 		cmpl	$0, -220(%rbp)
 3339      FFFF00
 3340 275e 0F84A107 		je	.L222
 3340      0000
 745:main_final_with_sync.c **** 				}
 3341              		.loc 1 745 0 is_stmt 0 discriminator 1
 3342 2764 C78514FF 		movl	$1, -236(%rbp)
 3342      FFFF0100 
 3342      0000
 3343 276e 90       		nop
 3344 276f E9D60700 		jmp	.L145
 3344      00
 3345              	.L150:
 3346              	.LBE36:
 3347              	.LBE32:
 3348              	.LBB37:
 748:main_final_with_sync.c **** 			}
 749:main_final_with_sync.c **** 			case 'w':{
 750:main_final_with_sync.c **** 				unsigned long int chan;
 751:main_final_with_sync.c **** 				size_t length = 1, i;
 3349              		.loc 1 751 0 is_stmt 1
 3350 2774 48C78538 		movq	$1, -200(%rbp)
 3350      FFFFFF01 
 3350      000000
 752:main_final_with_sync.c **** 				char *end, ch;
 753:main_final_with_sync.c **** 				const char *p;
 754:main_final_with_sync.c **** 				ptr++;
 3351              		.loc 1 754 0
 3352 277f 488B0500 		movq	ptr(%rip), %rax
 3352      000000
 3353 2786 4883C001 		addq	$1, %rax
 3354 278a 48890500 		movq	%rax, ptr(%rip)
 3354      000000
 755:main_final_with_sync.c **** 
 756:main_final_with_sync.c **** 			// Get the channel to be written:
 757:main_final_with_sync.c **** 				errno = 0;
 3355              		.loc 1 757 0
 3356 2791 E8000000 		call	__errno_location
 3356      00
 3357 2796 C7000000 		movl	$0, (%rax)
 3357      0000
 758:main_final_with_sync.c **** 				chan = strtoul(ptr, &end, 16);
 3358              		.loc 1 758 0
 3359 279c 488B0500 		movq	ptr(%rip), %rax
 3359      000000
 3360 27a3 488D8D40 		leaq	-192(%rbp), %rcx
 3360      FFFFFF
 3361 27aa BA100000 		movl	$16, %edx
 3361      00
 3362 27af 4889CE   		movq	%rcx, %rsi
 3363 27b2 4889C7   		movq	%rax, %rdi
 3364 27b5 E8000000 		call	strtoul
 3364      00
 3365 27ba 48894580 		movq	%rax, -128(%rbp)
 759:main_final_with_sync.c **** 				CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 3366              		.loc 1 759 0
 3367 27be E8000000 		call	__errno_location
 3367      00
 3368 27c3 8B00     		movl	(%rax), %eax
 3369 27c5 85C0     		testl	%eax, %eax
 3370 27c7 740F     		je	.L179
 3371              		.loc 1 759 0 is_stmt 0 discriminator 1
 3372 27c9 C78514FF 		movl	$2, -236(%rbp)
 3372      FFFF0200 
 3372      0000
 3373 27d3 E9720700 		jmp	.L145
 3373      00
 3374              	.L179:
 760:main_final_with_sync.c **** 
 761:main_final_with_sync.c **** 			// Ensure that it's 0-127
 762:main_final_with_sync.c **** 				CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 3375              		.loc 1 762 0 is_stmt 1
 3376 27d8 48837D80 		cmpq	$127, -128(%rbp)
 3376      7F
 3377 27dd 760F     		jbe	.L181
 3378              		.loc 1 762 0 is_stmt 0 discriminator 1
 3379 27df C78514FF 		movl	$3, -236(%rbp)
 3379      FFFF0300 
 3379      0000
 3380 27e9 E95C0700 		jmp	.L145
 3380      00
 3381              	.L181:
 763:main_final_with_sync.c **** 				ptr = end;
 3382              		.loc 1 763 0 is_stmt 1
 3383 27ee 488B8540 		movq	-192(%rbp), %rax
 3383      FFFFFF
 3384 27f5 48890500 		movq	%rax, ptr(%rip)
 3384      000000
 764:main_final_with_sync.c **** 
 765:main_final_with_sync.c **** 			// There must be a space now:
 766:main_final_with_sync.c **** 				CHECK_STATUS(*ptr != ' ', FLP_ILL_CHAR, cleanup);
 3385              		.loc 1 766 0
 3386 27fc 488B0500 		movq	ptr(%rip), %rax
 3386      000000
 3387 2803 0FB600   		movzbl	(%rax), %eax
 3388 2806 3C20     		cmpb	$32, %al
 3389 2808 740F     		je	.L182
 3390              		.loc 1 766 0 is_stmt 0 discriminator 1
 3391 280a C78514FF 		movl	$5, -236(%rbp)
 3391      FFFF0500 
 3391      0000
 3392 2814 E9310700 		jmp	.L145
 3392      00
 3393              	.L182:
 767:main_final_with_sync.c **** 
 768:main_final_with_sync.c **** 			// Now either a quote or a hex digit
 769:main_final_with_sync.c **** 				ch = *++ptr;
 3394              		.loc 1 769 0 is_stmt 1
 3395 2819 488B0500 		movq	ptr(%rip), %rax
 3395      000000
 3396 2820 4883C001 		addq	$1, %rax
 3397 2824 48890500 		movq	%rax, ptr(%rip)
 3397      000000
 3398 282b 488B0500 		movq	ptr(%rip), %rax
 3398      000000
 3399 2832 0FB600   		movzbl	(%rax), %eax
 3400 2835 888510FF 		movb	%al, -240(%rbp)
 3400      FFFF
 770:main_final_with_sync.c **** 				if ( ch == '"' || ch == '\'' ) {
 3401              		.loc 1 770 0
 3402 283b 80BD10FF 		cmpb	$34, -240(%rbp)
 3402      FFFF22
 3403 2842 740D     		je	.L183
 3404              		.loc 1 770 0 is_stmt 0 discriminator 1
 3405 2844 80BD10FF 		cmpb	$39, -240(%rbp)
 3405      FFFF27
 3406 284b 0F851203 		jne	.L184
 3406      0000
 3407              	.L183:
 3408              	.LBB38:
 771:main_final_with_sync.c **** 					uint16 checksum = 0x0000;
 3409              		.loc 1 771 0 is_stmt 1
 3410 2851 66C78512 		movw	$0, -238(%rbp)
 3410      FFFFFF00 
 3410      00
 772:main_final_with_sync.c **** 
 773:main_final_with_sync.c **** 				// Get the file to read bytes from:
 774:main_final_with_sync.c **** 					ptr++;
 3411              		.loc 1 774 0
 3412 285a 488B0500 		movq	ptr(%rip), %rax
 3412      000000
 3413 2861 4883C001 		addq	$1, %rax
 3414 2865 48890500 		movq	%rax, ptr(%rip)
 3414      000000
 775:main_final_with_sync.c **** 					p = ptr;
 3415              		.loc 1 775 0
 3416 286c 488B0500 		movq	ptr(%rip), %rax
 3416      000000
 3417 2873 48898570 		movq	%rax, -144(%rbp)
 3417      FFFFFF
 776:main_final_with_sync.c **** 					while ( *p != ch && *p != '\0' ) {
 3418              		.loc 1 776 0
 3419 287a EB08     		jmp	.L185
 3420              	.L187:
 777:main_final_with_sync.c **** 						p++;
 3421              		.loc 1 777 0
 3422 287c 48838570 		addq	$1, -144(%rbp)
 3422      FFFFFF01 
 3423              	.L185:
 776:main_final_with_sync.c **** 					while ( *p != ch && *p != '\0' ) {
 3424              		.loc 1 776 0
 3425 2884 488B8570 		movq	-144(%rbp), %rax
 3425      FFFFFF
 3426 288b 0FB600   		movzbl	(%rax), %eax
 3427 288e 3A8510FF 		cmpb	-240(%rbp), %al
 3427      FFFF
 3428 2894 740E     		je	.L186
 776:main_final_with_sync.c **** 					while ( *p != ch && *p != '\0' ) {
 3429              		.loc 1 776 0 is_stmt 0 discriminator 1
 3430 2896 488B8570 		movq	-144(%rbp), %rax
 3430      FFFFFF
 3431 289d 0FB600   		movzbl	(%rax), %eax
 3432 28a0 84C0     		testb	%al, %al
 3433 28a2 75D8     		jne	.L187
 3434              	.L186:
 778:main_final_with_sync.c **** 					}
 779:main_final_with_sync.c **** 					CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 3435              		.loc 1 779 0 is_stmt 1
 3436 28a4 488B8570 		movq	-144(%rbp), %rax
 3436      FFFFFF
 3437 28ab 0FB600   		movzbl	(%rax), %eax
 3438 28ae 84C0     		testb	%al, %al
 3439 28b0 750F     		jne	.L188
 3440              		.loc 1 779 0 is_stmt 0 discriminator 1
 3441 28b2 C78514FF 		movl	$6, -236(%rbp)
 3441      FFFF0600 
 3441      0000
 3442 28bc E9890600 		jmp	.L145
 3442      00
 3443              	.L188:
 780:main_final_with_sync.c **** 					fileName = malloc((size_t)(p - ptr + 1));
 3444              		.loc 1 780 0 is_stmt 1
 3445 28c1 488B8570 		movq	-144(%rbp), %rax
 3445      FFFFFF
 3446 28c8 488B1500 		movq	ptr(%rip), %rdx
 3446      000000
 3447 28cf 4829D0   		subq	%rdx, %rax
 3448 28d2 4883C001 		addq	$1, %rax
 3449 28d6 4889C7   		movq	%rax, %rdi
 3450 28d9 E8000000 		call	malloc
 3450      00
 3451 28de 48898550 		movq	%rax, -176(%rbp)
 3451      FFFFFF
 781:main_final_with_sync.c **** 					CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 3452              		.loc 1 781 0
 3453 28e5 4883BD50 		cmpq	$0, -176(%rbp)
 3453      FFFFFF00 
 3454 28ed 750F     		jne	.L190
 3455              		.loc 1 781 0 is_stmt 0 discriminator 1
 3456 28ef C78514FF 		movl	$7, -236(%rbp)
 3456      FFFF0700 
 3456      0000
 3457 28f9 E9600200 		jmp	.L189
 3457      00
 3458              	.L190:
 782:main_final_with_sync.c **** 					CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 3459              		.loc 1 782 0 is_stmt 1
 3460 28fe 488B8570 		movq	-144(%rbp), %rax
 3460      FFFFFF
 3461 2905 488B1500 		movq	ptr(%rip), %rdx
 3461      000000
 3462 290c 4839D0   		cmpq	%rdx, %rax
 3463 290f 750F     		jne	.L191
 3464              		.loc 1 782 0 is_stmt 0 discriminator 1
 3465 2911 C78514FF 		movl	$8, -236(%rbp)
 3465      FFFF0800 
 3465      0000
 3466 291b E93E0200 		jmp	.L189
 3466      00
 3467              	.L191:
 783:main_final_with_sync.c **** 					strncpy(fileName, ptr, (size_t)(p - ptr));
 3468              		.loc 1 783 0 is_stmt 1
 3469 2920 488B8570 		movq	-144(%rbp), %rax
 3469      FFFFFF
 3470 2927 488B1500 		movq	ptr(%rip), %rdx
 3470      000000
 3471 292e 4829D0   		subq	%rdx, %rax
 3472 2931 4889C2   		movq	%rax, %rdx
 3473 2934 488B0D00 		movq	ptr(%rip), %rcx
 3473      000000
 3474 293b 488B8550 		movq	-176(%rbp), %rax
 3474      FFFFFF
 3475 2942 4889CE   		movq	%rcx, %rsi
 3476 2945 4889C7   		movq	%rax, %rdi
 3477 2948 E8000000 		call	strncpy
 3477      00
 784:main_final_with_sync.c **** 					fileName[p - ptr] = '\0';
 3478              		.loc 1 784 0
 3479 294d 488B8570 		movq	-144(%rbp), %rax
 3479      FFFFFF
 3480 2954 488B1500 		movq	ptr(%rip), %rdx
 3480      000000
 3481 295b 4829D0   		subq	%rdx, %rax
 3482 295e 4889C2   		movq	%rax, %rdx
 3483 2961 488B8550 		movq	-176(%rbp), %rax
 3483      FFFFFF
 3484 2968 4801D0   		addq	%rdx, %rax
 3485 296b C60000   		movb	$0, (%rax)
 785:main_final_with_sync.c **** 				ptr = p + 1;  // skip over closing quote
 3486              		.loc 1 785 0
 3487 296e 488B8570 		movq	-144(%rbp), %rax
 3487      FFFFFF
 3488 2975 4883C001 		addq	$1, %rax
 3489 2979 48890500 		movq	%rax, ptr(%rip)
 3489      000000
 786:main_final_with_sync.c **** 
 787:main_final_with_sync.c **** 				// Open file for reading
 788:main_final_with_sync.c **** 				file = fopen(fileName, "rb");
 3490              		.loc 1 788 0
 3491 2980 488B8550 		movq	-176(%rbp), %rax
 3491      FFFFFF
 3492 2987 BE000000 		movl	$.LC32, %esi
 3492      00
 3493 298c 4889C7   		movq	%rax, %rdi
 3494 298f E8000000 		call	fopen
 3494      00
 3495 2994 48898558 		movq	%rax, -168(%rbp)
 3495      FFFFFF
 789:main_final_with_sync.c **** 				CHECK_STATUS(!file, FLP_CANNOT_LOAD, cleanup);
 3496              		.loc 1 789 0
 3497 299b 4883BD58 		cmpq	$0, -168(%rbp)
 3497      FFFFFF00 
 3498 29a3 750F     		jne	.L192
 3499              		.loc 1 789 0 is_stmt 0 discriminator 1
 3500 29a5 C78514FF 		movl	$10, -236(%rbp)
 3500      FFFF0A00 
 3500      0000
 3501 29af E9AA0100 		jmp	.L189
 3501      00
 3502              	.L192:
 790:main_final_with_sync.c **** 				free(fileName);
 3503              		.loc 1 790 0 is_stmt 1
 3504 29b4 488B8550 		movq	-176(%rbp), %rax
 3504      FFFFFF
 3505 29bb 4889C7   		movq	%rax, %rdi
 3506 29be E8000000 		call	free
 3506      00
 791:main_final_with_sync.c **** 				fileName = NULL;
 3507              		.loc 1 791 0
 3508 29c3 48C78550 		movq	$0, -176(%rbp)
 3508      FFFFFF00 
 3508      000000
 792:main_final_with_sync.c **** 				
 793:main_final_with_sync.c **** 				#ifdef WIN32
 794:main_final_with_sync.c **** 				QueryPerformanceCounter(&tvStart);
 795:main_final_with_sync.c **** 				status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 796:main_final_with_sync.c **** 				QueryPerformanceCounter(&tvEnd);
 797:main_final_with_sync.c **** 				totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 798:main_final_with_sync.c **** 				totalTime /= freq.QuadPart;
 799:main_final_with_sync.c **** 				speed = (double)length / (1024*1024*totalTime);
 800:main_final_with_sync.c **** 				#else
 801:main_final_with_sync.c **** 				gettimeofday(&tvStart, NULL);
 3509              		.loc 1 801 0
 3510 29ce 488D45B0 		leaq	-80(%rbp), %rax
 3511 29d2 BE000000 		movl	$0, %esi
 3511      00
 3512 29d7 4889C7   		movq	%rax, %rdi
 3513 29da E8000000 		call	gettimeofday
 3513      00
 802:main_final_with_sync.c **** 				status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 3514              		.loc 1 802 0
 3515 29df 488B4580 		movq	-128(%rbp), %rax
 3516 29e3 0FB6F0   		movzbl	%al, %esi
 3517 29e6 4C8B85F8 		movq	-264(%rbp), %r8
 3517      FEFFFF
 3518 29ed 488DBD12 		leaq	-238(%rbp), %rdi
 3518      FFFFFF
 3519 29f4 488D8D38 		leaq	-200(%rbp), %rcx
 3519      FFFFFF
 3520 29fb 488B9558 		movq	-168(%rbp), %rdx
 3520      FFFFFF
 3521 2a02 488B8508 		movq	-248(%rbp), %rax
 3521      FFFFFF
 3522 2a09 4D89C1   		movq	%r8, %r9
 3523 2a0c 4989F8   		movq	%rdi, %r8
 3524 2a0f 4889C7   		movq	%rax, %rdi
 3525 2a12 E8A3F3FF 		call	doWrite
 3525      FF
 3526 2a17 898528FF 		movl	%eax, -216(%rbp)
 3526      FFFF
 803:main_final_with_sync.c **** 				gettimeofday(&tvEnd, NULL);
 3527              		.loc 1 803 0
 3528 2a1d 488D45C0 		leaq	-64(%rbp), %rax
 3529 2a21 BE000000 		movl	$0, %esi
 3529      00
 3530 2a26 4889C7   		movq	%rax, %rdi
 3531 2a29 E8000000 		call	gettimeofday
 3531      00
 804:main_final_with_sync.c **** 				startTime = tvStart.tv_sec;
 3532              		.loc 1 804 0
 3533 2a2e 488B45B0 		movq	-80(%rbp), %rax
 3534 2a32 48894588 		movq	%rax, -120(%rbp)
 805:main_final_with_sync.c **** 				startTime *= 1000000;
 3535              		.loc 1 805 0
 3536 2a36 488B4588 		movq	-120(%rbp), %rax
 3537 2a3a 4869C040 		imulq	$1000000, %rax, %rax
 3537      420F00
 3538 2a41 48894588 		movq	%rax, -120(%rbp)
 806:main_final_with_sync.c **** 				startTime += tvStart.tv_usec;
 3539              		.loc 1 806 0
 3540 2a45 488B45B8 		movq	-72(%rbp), %rax
 3541 2a49 48014588 		addq	%rax, -120(%rbp)
 807:main_final_with_sync.c **** 				endTime = tvEnd.tv_sec;
 3542              		.loc 1 807 0
 3543 2a4d 488B45C0 		movq	-64(%rbp), %rax
 3544 2a51 48894590 		movq	%rax, -112(%rbp)
 808:main_final_with_sync.c **** 				endTime *= 1000000;
 3545              		.loc 1 808 0
 3546 2a55 488B4590 		movq	-112(%rbp), %rax
 3547 2a59 4869C040 		imulq	$1000000, %rax, %rax
 3547      420F00
 3548 2a60 48894590 		movq	%rax, -112(%rbp)
 809:main_final_with_sync.c **** 				endTime += tvEnd.tv_usec;
 3549              		.loc 1 809 0
 3550 2a64 488B45C8 		movq	-56(%rbp), %rax
 3551 2a68 48014590 		addq	%rax, -112(%rbp)
 810:main_final_with_sync.c **** 				totalTime = (double)(endTime - startTime);
 3552              		.loc 1 810 0
 3553 2a6c 488B4590 		movq	-112(%rbp), %rax
 3554 2a70 482B4588 		subq	-120(%rbp), %rax
 3555 2a74 660FEFC0 		pxor	%xmm0, %xmm0
 3556 2a78 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 3556      C0
 3557 2a7d F20F1145 		movsd	%xmm0, -104(%rbp)
 3557      98
 811:main_final_with_sync.c **** 					totalTime /= 1000000;  // convert from uS to S.
 3558              		.loc 1 811 0
 3559 2a82 F20F1045 		movsd	-104(%rbp), %xmm0
 3559      98
 3560 2a87 F20F100D 		movsd	.LC29(%rip), %xmm1
 3560      00000000 
 3561 2a8f F20F5EC1 		divsd	%xmm1, %xmm0
 3562 2a93 F20F1145 		movsd	%xmm0, -104(%rbp)
 3562      98
 812:main_final_with_sync.c **** 					speed = (double)length / (1024*1024*totalTime);
 3563              		.loc 1 812 0
 3564 2a98 488B8538 		movq	-200(%rbp), %rax
 3564      FFFFFF
 3565 2a9f 4885C0   		testq	%rax, %rax
 3566 2aa2 780B     		js	.L193
 3567 2aa4 660FEFC0 		pxor	%xmm0, %xmm0
 3568 2aa8 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 3568      C0
 3569 2aad EB19     		jmp	.L194
 3570              	.L193:
 3571 2aaf 4889C2   		movq	%rax, %rdx
 3572 2ab2 48D1EA   		shrq	%rdx
 3573 2ab5 83E001   		andl	$1, %eax
 3574 2ab8 4809C2   		orq	%rax, %rdx
 3575 2abb 660FEFC0 		pxor	%xmm0, %xmm0
 3576 2abf F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 3576      C2
 3577 2ac4 F20F58C0 		addsd	%xmm0, %xmm0
 3578              	.L194:
 3579 2ac8 F20F1055 		movsd	-104(%rbp), %xmm2
 3579      98
 3580 2acd F20F100D 		movsd	.LC30(%rip), %xmm1
 3580      00000000 
 3581 2ad5 F20F59CA 		mulsd	%xmm2, %xmm1
 3582 2ad9 F20F5EC1 		divsd	%xmm1, %xmm0
 3583 2add F20F1145 		movsd	%xmm0, -96(%rbp)
 3583      A0
 813:main_final_with_sync.c **** 				#endif
 814:main_final_with_sync.c **** 					if ( enableBenchmarking ) {
 3584              		.loc 1 814 0
 3585 2ae2 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 3585      000000
 3586 2ae9 84C0     		testb	%al, %al
 3587 2aeb 743A     		je	.L195
 815:main_final_with_sync.c **** 						printf(
 3588              		.loc 1 815 0
 3589 2aed 0FB78512 		movzwl	-238(%rbp), %eax
 3589      FFFFFF
 3590 2af4 0FB7D0   		movzwl	%ax, %edx
 3591 2af7 488B8538 		movq	-200(%rbp), %rax
 3591      FFFFFF
 3592 2afe 488B75A0 		movq	-96(%rbp), %rsi
 3593 2b02 488B4D80 		movq	-128(%rbp), %rcx
 3594 2b06 4889B5F0 		movq	%rsi, -272(%rbp)
 3594      FEFFFF
 3595 2b0d F20F1085 		movsd	-272(%rbp), %xmm0
 3595      F0FEFFFF 
 3596 2b15 4889C6   		movq	%rax, %rsi
 3597 2b18 BF000000 		movl	$.LC33, %edi
 3597      00
 3598 2b1d B8010000 		movl	$1, %eax
 3598      00
 3599 2b22 E8000000 		call	printf
 3599      00
 3600              	.L195:
 816:main_final_with_sync.c **** 							"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 817:main_final_with_sync.c **** 							length, checksum, chan, speed);
 818:main_final_with_sync.c **** 					}
 819:main_final_with_sync.c **** 					CHECK_STATUS(status, status, cleanup);
 3601              		.loc 1 819 0
 3602 2b27 83BD28FF 		cmpl	$0, -216(%rbp)
 3602      FFFF00
 3603 2b2e 740E     		je	.L196
 3604              		.loc 1 819 0 is_stmt 0 discriminator 1
 3605 2b30 8B8528FF 		movl	-216(%rbp), %eax
 3605      FFFF
 3606 2b36 898514FF 		movl	%eax, -236(%rbp)
 3606      FFFF
 3607 2b3c EB20     		jmp	.L189
 3608              	.L196:
 820:main_final_with_sync.c **** 
 821:main_final_with_sync.c **** 				// Close the file
 822:main_final_with_sync.c **** 					fclose(file);
 3609              		.loc 1 822 0 is_stmt 1
 3610 2b3e 488B8558 		movq	-168(%rbp), %rax
 3610      FFFFFF
 3611 2b45 4889C7   		movq	%rax, %rdi
 3612 2b48 E8000000 		call	fclose
 3612      00
 823:main_final_with_sync.c **** 					file = NULL;
 3613              		.loc 1 823 0
 3614 2b4d 48C78558 		movq	$0, -168(%rbp)
 3614      FFFFFF00 
 3614      000000
 3615              	.LBE38:
 770:main_final_with_sync.c **** 					uint16 checksum = 0x0000;
 3616              		.loc 1 770 0
 3617 2b58 90       		nop
 3618 2b59 E9AB0300 		jmp	.L178
 3618      00
 3619              	.L189:
 759:main_final_with_sync.c **** 
 3620              		.loc 1 759 0 discriminator 2
 3621 2b5e E9E70300 		jmp	.L145
 3621      00
 3622              	.L184:
 824:main_final_with_sync.c **** 				} else if ( isHexDigit(ch) ) {
 3623              		.loc 1 824 0
 3624 2b63 0FBE8510 		movsbl	-240(%rbp), %eax
 3624      FFFFFF
 3625 2b6a 89C7     		movl	%eax, %edi
 3626 2b6c E800EEFF 		call	isHexDigit
 3626      FF
 3627 2b71 84C0     		testb	%al, %al
 3628 2b73 0F848402 		je	.L198
 3628      0000
 3629              	.LBB39:
 825:main_final_with_sync.c **** 				// Read a sequence of hex bytes to write
 826:main_final_with_sync.c **** 					uint8 *dataPtr;
 827:main_final_with_sync.c **** 					p = ptr + 1;
 3630              		.loc 1 827 0
 3631 2b79 488B0500 		movq	ptr(%rip), %rax
 3631      000000
 3632 2b80 4883C001 		addq	$1, %rax
 3633 2b84 48898570 		movq	%rax, -144(%rbp)
 3633      FFFFFF
 828:main_final_with_sync.c **** 					while ( isHexDigit(*p) ) {
 3634              		.loc 1 828 0
 3635 2b8b EB08     		jmp	.L199
 3636              	.L200:
 829:main_final_with_sync.c **** 						p++;
 3637              		.loc 1 829 0
 3638 2b8d 48838570 		addq	$1, -144(%rbp)
 3638      FFFFFF01 
 3639              	.L199:
 828:main_final_with_sync.c **** 					while ( isHexDigit(*p) ) {
 3640              		.loc 1 828 0
 3641 2b95 488B8570 		movq	-144(%rbp), %rax
 3641      FFFFFF
 3642 2b9c 0FB600   		movzbl	(%rax), %eax
 3643 2b9f 0FBEC0   		movsbl	%al, %eax
 3644 2ba2 89C7     		movl	%eax, %edi
 3645 2ba4 E8C8EDFF 		call	isHexDigit
 3645      FF
 3646 2ba9 84C0     		testb	%al, %al
 3647 2bab 75E0     		jne	.L200
 830:main_final_with_sync.c **** 					}
 831:main_final_with_sync.c **** 					CHECK_STATUS((p - ptr) & 1, FLP_ODD_DIGITS, cleanup);
 3648              		.loc 1 831 0
 3649 2bad 488B8570 		movq	-144(%rbp), %rax
 3649      FFFFFF
 3650 2bb4 488B1500 		movq	ptr(%rip), %rdx
 3650      000000
 3651 2bbb 4829D0   		subq	%rdx, %rax
 3652 2bbe 83E001   		andl	$1, %eax
 3653 2bc1 4885C0   		testq	%rax, %rax
 3654 2bc4 740F     		je	.L201
 3655              		.loc 1 831 0 is_stmt 0 discriminator 1
 3656 2bc6 C78514FF 		movl	$9, -236(%rbp)
 3656      FFFF0900 
 3656      0000
 3657 2bd0 E9750300 		jmp	.L145
 3657      00
 3658              	.L201:
 832:main_final_with_sync.c **** 					length = (size_t)(p - ptr) / 2;
 3659              		.loc 1 832 0 is_stmt 1
 3660 2bd5 488B8570 		movq	-144(%rbp), %rax
 3660      FFFFFF
 3661 2bdc 488B1500 		movq	ptr(%rip), %rdx
 3661      000000
 3662 2be3 4829D0   		subq	%rdx, %rax
 3663 2be6 48D1E8   		shrq	%rax
 3664 2be9 48898538 		movq	%rax, -200(%rbp)
 3664      FFFFFF
 833:main_final_with_sync.c **** 					data = malloc(length);
 3665              		.loc 1 833 0
 3666 2bf0 488B8538 		movq	-200(%rbp), %rax
 3666      FFFFFF
 3667 2bf7 4889C7   		movq	%rax, %rdi
 3668 2bfa E8000000 		call	malloc
 3668      00
 3669 2bff 48898548 		movq	%rax, -184(%rbp)
 3669      FFFFFF
 834:main_final_with_sync.c **** 					dataPtr = data;
 3670              		.loc 1 834 0
 3671 2c06 488B8548 		movq	-184(%rbp), %rax
 3671      FFFFFF
 3672 2c0d 48898578 		movq	%rax, -136(%rbp)
 3672      FFFFFF
 835:main_final_with_sync.c **** 					for ( i = 0; i < length; i++ ) {
 3673              		.loc 1 835 0
 3674 2c14 48C78568 		movq	$0, -152(%rbp)
 3674      FFFFFF00 
 3674      000000
 3675 2c1f EB34     		jmp	.L202
 3676              	.L203:
 836:main_final_with_sync.c **** 						getHexByte(dataPtr++);
 3677              		.loc 1 836 0 discriminator 3
 3678 2c21 488B8578 		movq	-136(%rbp), %rax
 3678      FFFFFF
 3679 2c28 488D5001 		leaq	1(%rax), %rdx
 3680 2c2c 48899578 		movq	%rdx, -136(%rbp)
 3680      FFFFFF
 3681 2c33 4889C7   		movq	%rax, %rdi
 3682 2c36 E829EEFF 		call	getHexByte
 3682      FF
 837:main_final_with_sync.c **** 						ptr += 2;
 3683              		.loc 1 837 0 discriminator 3
 3684 2c3b 488B0500 		movq	ptr(%rip), %rax
 3684      000000
 3685 2c42 4883C002 		addq	$2, %rax
 3686 2c46 48890500 		movq	%rax, ptr(%rip)
 3686      000000
 835:main_final_with_sync.c **** 					for ( i = 0; i < length; i++ ) {
 3687              		.loc 1 835 0 discriminator 3
 3688 2c4d 48838568 		addq	$1, -152(%rbp)
 3688      FFFFFF01 
 3689              	.L202:
 835:main_final_with_sync.c **** 					for ( i = 0; i < length; i++ ) {
 3690              		.loc 1 835 0 is_stmt 0 discriminator 1
 3691 2c55 488B8538 		movq	-200(%rbp), %rax
 3691      FFFFFF
 3692 2c5c 48398568 		cmpq	%rax, -152(%rbp)
 3692      FFFFFF
 3693 2c63 72BC     		jb	.L203
 838:main_final_with_sync.c **** 					}
 839:main_final_with_sync.c **** 				#ifdef WIN32
 840:main_final_with_sync.c **** 					QueryPerformanceCounter(&tvStart);
 841:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 842:main_final_with_sync.c **** 					QueryPerformanceCounter(&tvEnd);
 843:main_final_with_sync.c **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 844:main_final_with_sync.c **** 					totalTime /= freq.QuadPart;
 845:main_final_with_sync.c **** 					speed = (double)length / (1024*1024*totalTime);
 846:main_final_with_sync.c **** 				#else
 847:main_final_with_sync.c **** 					gettimeofday(&tvStart, NULL);
 3694              		.loc 1 847 0 is_stmt 1
 3695 2c65 488D45B0 		leaq	-80(%rbp), %rax
 3696 2c69 BE000000 		movl	$0, %esi
 3696      00
 3697 2c6e 4889C7   		movq	%rax, %rdi
 3698 2c71 E8000000 		call	gettimeofday
 3698      00
 848:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 3699              		.loc 1 848 0
 3700 2c76 488B9538 		movq	-200(%rbp), %rdx
 3700      FFFFFF
 3701 2c7d 488B4580 		movq	-128(%rbp), %rax
 3702 2c81 0FB6F0   		movzbl	%al, %esi
 3703 2c84 488BBDF8 		movq	-264(%rbp), %rdi
 3703      FEFFFF
 3704 2c8b 488B8D48 		movq	-184(%rbp), %rcx
 3704      FFFFFF
 3705 2c92 488B8508 		movq	-248(%rbp), %rax
 3705      FFFFFF
 3706 2c99 4989F8   		movq	%rdi, %r8
 3707 2c9c 4889C7   		movq	%rax, %rdi
 3708 2c9f E8000000 		call	flWriteChannel
 3708      00
 3709 2ca4 898524FF 		movl	%eax, -220(%rbp)
 3709      FFFF
 849:main_final_with_sync.c **** 					gettimeofday(&tvEnd, NULL);
 3710              		.loc 1 849 0
 3711 2caa 488D45C0 		leaq	-64(%rbp), %rax
 3712 2cae BE000000 		movl	$0, %esi
 3712      00
 3713 2cb3 4889C7   		movq	%rax, %rdi
 3714 2cb6 E8000000 		call	gettimeofday
 3714      00
 850:main_final_with_sync.c **** 					startTime = tvStart.tv_sec;
 3715              		.loc 1 850 0
 3716 2cbb 488B45B0 		movq	-80(%rbp), %rax
 3717 2cbf 48894588 		movq	%rax, -120(%rbp)
 851:main_final_with_sync.c **** 					startTime *= 1000000;
 3718              		.loc 1 851 0
 3719 2cc3 488B4588 		movq	-120(%rbp), %rax
 3720 2cc7 4869C040 		imulq	$1000000, %rax, %rax
 3720      420F00
 3721 2cce 48894588 		movq	%rax, -120(%rbp)
 852:main_final_with_sync.c **** 					startTime += tvStart.tv_usec;
 3722              		.loc 1 852 0
 3723 2cd2 488B45B8 		movq	-72(%rbp), %rax
 3724 2cd6 48014588 		addq	%rax, -120(%rbp)
 853:main_final_with_sync.c **** 					endTime = tvEnd.tv_sec;
 3725              		.loc 1 853 0
 3726 2cda 488B45C0 		movq	-64(%rbp), %rax
 3727 2cde 48894590 		movq	%rax, -112(%rbp)
 854:main_final_with_sync.c **** 					endTime *= 1000000;
 3728              		.loc 1 854 0
 3729 2ce2 488B4590 		movq	-112(%rbp), %rax
 3730 2ce6 4869C040 		imulq	$1000000, %rax, %rax
 3730      420F00
 3731 2ced 48894590 		movq	%rax, -112(%rbp)
 855:main_final_with_sync.c **** 					endTime += tvEnd.tv_usec;
 3732              		.loc 1 855 0
 3733 2cf1 488B45C8 		movq	-56(%rbp), %rax
 3734 2cf5 48014590 		addq	%rax, -112(%rbp)
 856:main_final_with_sync.c **** 					totalTime = (double)(endTime - startTime);
 3735              		.loc 1 856 0
 3736 2cf9 488B4590 		movq	-112(%rbp), %rax
 3737 2cfd 482B4588 		subq	-120(%rbp), %rax
 3738 2d01 660FEFC0 		pxor	%xmm0, %xmm0
 3739 2d05 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 3739      C0
 3740 2d0a F20F1145 		movsd	%xmm0, -104(%rbp)
 3740      98
 857:main_final_with_sync.c **** 					totalTime /= 1000000;  // convert from uS to S.
 3741              		.loc 1 857 0
 3742 2d0f F20F1045 		movsd	-104(%rbp), %xmm0
 3742      98
 3743 2d14 F20F100D 		movsd	.LC29(%rip), %xmm1
 3743      00000000 
 3744 2d1c F20F5EC1 		divsd	%xmm1, %xmm0
 3745 2d20 F20F1145 		movsd	%xmm0, -104(%rbp)
 3745      98
 858:main_final_with_sync.c **** 					speed = (double)length / (1024*1024*totalTime);
 3746              		.loc 1 858 0
 3747 2d25 488B8538 		movq	-200(%rbp), %rax
 3747      FFFFFF
 3748 2d2c 4885C0   		testq	%rax, %rax
 3749 2d2f 780B     		js	.L204
 3750 2d31 660FEFC0 		pxor	%xmm0, %xmm0
 3751 2d35 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 3751      C0
 3752 2d3a EB19     		jmp	.L205
 3753              	.L204:
 3754 2d3c 4889C2   		movq	%rax, %rdx
 3755 2d3f 48D1EA   		shrq	%rdx
 3756 2d42 83E001   		andl	$1, %eax
 3757 2d45 4809C2   		orq	%rax, %rdx
 3758 2d48 660FEFC0 		pxor	%xmm0, %xmm0
 3759 2d4c F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 3759      C2
 3760 2d51 F20F58C0 		addsd	%xmm0, %xmm0
 3761              	.L205:
 3762 2d55 F20F1055 		movsd	-104(%rbp), %xmm2
 3762      98
 3763 2d5a F20F100D 		movsd	.LC30(%rip), %xmm1
 3763      00000000 
 3764 2d62 F20F59CA 		mulsd	%xmm2, %xmm1
 3765 2d66 F20F5EC1 		divsd	%xmm1, %xmm0
 3766 2d6a F20F1145 		movsd	%xmm0, -96(%rbp)
 3766      A0
 859:main_final_with_sync.c **** 				#endif
 860:main_final_with_sync.c **** 					if ( enableBenchmarking ) {
 3767              		.loc 1 860 0
 3768 2d6f 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 3768      000000
 3769 2d76 84C0     		testb	%al, %al
 3770 2d78 744C     		je	.L206
 861:main_final_with_sync.c **** 						printf(
 862:main_final_with_sync.c **** 							"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 863:main_final_with_sync.c **** 							length, calcChecksum(data, length), chan, speed);
 3771              		.loc 1 863 0
 3772 2d7a 488B9538 		movq	-200(%rbp), %rdx
 3772      FFFFFF
 3773 2d81 488B8548 		movq	-184(%rbp), %rax
 3773      FFFFFF
 3774 2d88 4889D6   		movq	%rdx, %rsi
 3775 2d8b 4889C7   		movq	%rax, %rdi
 3776 2d8e E81CECFF 		call	calcChecksum
 3776      FF
 861:main_final_with_sync.c **** 						printf(
 3777              		.loc 1 861 0
 3778 2d93 0FB7D0   		movzwl	%ax, %edx
 3779 2d96 488B8538 		movq	-200(%rbp), %rax
 3779      FFFFFF
 3780 2d9d 488B75A0 		movq	-96(%rbp), %rsi
 3781 2da1 488B4D80 		movq	-128(%rbp), %rcx
 3782 2da5 4889B5F0 		movq	%rsi, -272(%rbp)
 3782      FEFFFF
 3783 2dac F20F1085 		movsd	-272(%rbp), %xmm0
 3783      F0FEFFFF 
 3784 2db4 4889C6   		movq	%rax, %rsi
 3785 2db7 BF000000 		movl	$.LC33, %edi
 3785      00
 3786 2dbc B8010000 		movl	$1, %eax
 3786      00
 3787 2dc1 E8000000 		call	printf
 3787      00
 3788              	.L206:
 864:main_final_with_sync.c **** 					}
 865:main_final_with_sync.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3789              		.loc 1 865 0
 3790 2dc6 83BD24FF 		cmpl	$0, -220(%rbp)
 3790      FFFF00
 3791 2dcd 740F     		je	.L207
 3792              		.loc 1 865 0 is_stmt 0 discriminator 1
 3793 2dcf C78514FF 		movl	$1, -236(%rbp)
 3793      FFFF0100 
 3793      0000
 3794 2dd9 E96C0100 		jmp	.L145
 3794      00
 3795              	.L207:
 866:main_final_with_sync.c **** 					free(data);
 3796              		.loc 1 866 0 is_stmt 1
 3797 2dde 488B8548 		movq	-184(%rbp), %rax
 3797      FFFFFF
 3798 2de5 4889C7   		movq	%rax, %rdi
 3799 2de8 E8000000 		call	free
 3799      00
 867:main_final_with_sync.c **** 					data = NULL;
 3800              		.loc 1 867 0
 3801 2ded 48C78548 		movq	$0, -184(%rbp)
 3801      FFFFFF00 
 3801      000000
 3802              	.LBE39:
 868:main_final_with_sync.c **** 				} else {
 869:main_final_with_sync.c **** 					FAIL(FLP_ILL_CHAR, cleanup);
 870:main_final_with_sync.c **** 				}
 871:main_final_with_sync.c **** 				break;
 3803              		.loc 1 871 0
 3804 2df8 E90C0100 		jmp	.L178
 3804      00
 3805              	.L198:
 869:main_final_with_sync.c **** 				}
 3806              		.loc 1 869 0
 3807 2dfd C78514FF 		movl	$5, -236(%rbp)
 3807      FFFF0500 
 3807      0000
 3808 2e07 90       		nop
 3809 2e08 E93D0100 		jmp	.L145
 3809      00
 3810              	.L151:
 3811              	.LBE37:
 3812              	.LBB40:
 872:main_final_with_sync.c **** 			}
 873:main_final_with_sync.c **** 			case '+':{
 874:main_final_with_sync.c **** 				uint32 conduit;
 875:main_final_with_sync.c **** 				char *end;
 876:main_final_with_sync.c **** 				ptr++;
 3813              		.loc 1 876 0
 3814 2e0d 488B0500 		movq	ptr(%rip), %rax
 3814      000000
 3815 2e14 4883C001 		addq	$1, %rax
 3816 2e18 48890500 		movq	%rax, ptr(%rip)
 3816      000000
 877:main_final_with_sync.c **** 
 878:main_final_with_sync.c **** 			// Get the conduit
 879:main_final_with_sync.c **** 				errno = 0;
 3817              		.loc 1 879 0
 3818 2e1f E8000000 		call	__errno_location
 3818      00
 3819 2e24 C7000000 		movl	$0, (%rax)
 3819      0000
 880:main_final_with_sync.c **** 				conduit = (uint32)strtoul(ptr, &end, 16);
 3820              		.loc 1 880 0
 3821 2e2a 488B0500 		movq	ptr(%rip), %rax
 3821      000000
 3822 2e31 488D8D40 		leaq	-192(%rbp), %rcx
 3822      FFFFFF
 3823 2e38 BA100000 		movl	$16, %edx
 3823      00
 3824 2e3d 4889CE   		movq	%rcx, %rsi
 3825 2e40 4889C7   		movq	%rax, %rdi
 3826 2e43 E8000000 		call	strtoul
 3826      00
 3827 2e48 89852CFF 		movl	%eax, -212(%rbp)
 3827      FFFF
 881:main_final_with_sync.c **** 				CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 3828              		.loc 1 881 0
 3829 2e4e E8000000 		call	__errno_location
 3829      00
 3830 2e53 8B00     		movl	(%rax), %eax
 3831 2e55 85C0     		testl	%eax, %eax
 3832 2e57 740F     		je	.L208
 3833              		.loc 1 881 0 is_stmt 0 discriminator 1
 3834 2e59 C78514FF 		movl	$2, -236(%rbp)
 3834      FFFF0200 
 3834      0000
 3835 2e63 E9E20000 		jmp	.L145
 3835      00
 3836              	.L208:
 882:main_final_with_sync.c **** 
 883:main_final_with_sync.c **** 			// Ensure that it's 0-127
 884:main_final_with_sync.c **** 				CHECK_STATUS(conduit > 255, FLP_CONDUIT_RANGE, cleanup);
 3837              		.loc 1 884 0 is_stmt 1
 3838 2e68 81BD2CFF 		cmpl	$255, -212(%rbp)
 3838      FFFFFF00 
 3838      0000
 3839 2e72 760F     		jbe	.L210
 3840              		.loc 1 884 0 is_stmt 0 discriminator 1
 3841 2e74 C78514FF 		movl	$4, -236(%rbp)
 3841      FFFF0400 
 3841      0000
 3842 2e7e E9C70000 		jmp	.L145
 3842      00
 3843              	.L210:
 885:main_final_with_sync.c **** 				ptr = end;
 3844              		.loc 1 885 0 is_stmt 1
 3845 2e83 488B8540 		movq	-192(%rbp), %rax
 3845      FFFFFF
 3846 2e8a 48890500 		movq	%rax, ptr(%rip)
 3846      000000
 886:main_final_with_sync.c **** 
 887:main_final_with_sync.c **** 			// Only two valid chars at this point:
 888:main_final_with_sync.c **** 				CHECK_STATUS(*ptr != '\0' && *ptr != ';', FLP_ILL_CHAR, cleanup);
 3847              		.loc 1 888 0
 3848 2e91 488B0500 		movq	ptr(%rip), %rax
 3848      000000
 3849 2e98 0FB600   		movzbl	(%rax), %eax
 3850 2e9b 84C0     		testb	%al, %al
 3851 2e9d 741D     		je	.L211
 3852              		.loc 1 888 0 is_stmt 0 discriminator 1
 3853 2e9f 488B0500 		movq	ptr(%rip), %rax
 3853      000000
 3854 2ea6 0FB600   		movzbl	(%rax), %eax
 3855 2ea9 3C3B     		cmpb	$59, %al
 3856 2eab 740F     		je	.L211
 3857              		.loc 1 888 0 discriminator 2
 3858 2ead C78514FF 		movl	$5, -236(%rbp)
 3858      FFFF0500 
 3858      0000
 3859 2eb7 E98E0000 		jmp	.L145
 3859      00
 3860              	.L211:
 889:main_final_with_sync.c **** 
 890:main_final_with_sync.c **** 				fStatus = flSelectConduit(handle, (uint8)conduit, error);
 3861              		.loc 1 890 0 is_stmt 1
 3862 2ebc 8B852CFF 		movl	-212(%rbp), %eax
 3862      FFFF
 3863 2ec2 0FB6C8   		movzbl	%al, %ecx
 3864 2ec5 488B95F8 		movq	-264(%rbp), %rdx
 3864      FEFFFF
 3865 2ecc 488B8508 		movq	-248(%rbp), %rax
 3865      FFFFFF
 3866 2ed3 89CE     		movl	%ecx, %esi
 3867 2ed5 4889C7   		movq	%rax, %rdi
 3868 2ed8 E8000000 		call	flSelectConduit
 3868      00
 3869 2edd 898524FF 		movl	%eax, -220(%rbp)
 3869      FFFF
 891:main_final_with_sync.c **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3870              		.loc 1 891 0
 3871 2ee3 83BD24FF 		cmpl	$0, -220(%rbp)
 3871      FFFF00
 3872 2eea 741C     		je	.L223
 3873              		.loc 1 891 0 is_stmt 0 discriminator 1
 3874 2eec C78514FF 		movl	$1, -236(%rbp)
 3874      FFFF0100 
 3874      0000
 3875 2ef6 90       		nop
 3876 2ef7 EB51     		jmp	.L145
 3877              	.L221:
 3878              	.LBE40:
 892:main_final_with_sync.c **** 				break;
 893:main_final_with_sync.c **** 			}
 894:main_final_with_sync.c **** 			default:
 895:main_final_with_sync.c **** 			FAIL(FLP_ILL_CHAR, cleanup);
 3879              		.loc 1 895 0 is_stmt 1
 3880 2ef9 C78514FF 		movl	$5, -236(%rbp)
 3880      FFFF0500 
 3880      0000
 3881 2f03 EB45     		jmp	.L145
 3882              	.L222:
 3883              	.LBB41:
 747:main_final_with_sync.c **** 			}
 3884              		.loc 1 747 0
 3885 2f05 90       		nop
 3886 2f06 EB01     		jmp	.L178
 3887              	.L223:
 3888              	.LBE41:
 3889              	.LBB42:
 892:main_final_with_sync.c **** 				break;
 3890              		.loc 1 892 0
 3891 2f08 90       		nop
 3892              	.L178:
 3893              	.LBE42:
 896:main_final_with_sync.c **** 		}
 897:main_final_with_sync.c **** 	} while ( *ptr == ';' );
 3894              		.loc 1 897 0
 3895 2f09 488B0500 		movq	ptr(%rip), %rax
 3895      000000
 3896 2f10 0FB600   		movzbl	(%rax), %eax
 3897 2f13 3C3B     		cmpb	$59, %al
 3898 2f15 0F846DF1 		je	.L146
 3898      FFFF
 898:main_final_with_sync.c **** 	CHECK_STATUS(*ptr != '\0', FLP_ILL_CHAR, cleanup);
 3899              		.loc 1 898 0
 3900 2f1b 488B0500 		movq	ptr(%rip), %rax
 3900      000000
 3901 2f22 0FB600   		movzbl	(%rax), %eax
 3902 2f25 84C0     		testb	%al, %al
 3903 2f27 740C     		je	.L214
 3904              		.loc 1 898 0 is_stmt 0 discriminator 1
 3905 2f29 C78514FF 		movl	$5, -236(%rbp)
 3905      FFFF0500 
 3905      0000
 3906 2f33 EB15     		jmp	.L145
 3907              	.L214:
 899:main_final_with_sync.c **** 
 900:main_final_with_sync.c **** 	dump(0x00000000, dataFromFPGA.data, dataFromFPGA.length);
 3908              		.loc 1 900 0 is_stmt 1
 3909 2f35 488B55D8 		movq	-40(%rbp), %rdx
 3910 2f39 488B45D0 		movq	-48(%rbp), %rax
 3911 2f3d 4889C6   		movq	%rax, %rsi
 3912 2f40 BF000000 		movl	$0, %edi
 3912      00
 3913 2f45 E8000000 		call	dump
 3913      00
 3914              	.L145:
 901:main_final_with_sync.c **** 
 902:main_final_with_sync.c **** 	cleanup:
 903:main_final_with_sync.c **** 	bufDestroy(&dataFromFPGA);
 3915              		.loc 1 903 0
 3916 2f4a 488D45D0 		leaq	-48(%rbp), %rax
 3917 2f4e 4889C7   		movq	%rax, %rdi
 3918 2f51 E8000000 		call	bufDestroy
 3918      00
 904:main_final_with_sync.c **** 	if ( file ) {
 3919              		.loc 1 904 0
 3920 2f56 4883BD58 		cmpq	$0, -168(%rbp)
 3920      FFFFFF00 
 3921 2f5e 740F     		je	.L215
 905:main_final_with_sync.c **** 		fclose(file);
 3922              		.loc 1 905 0
 3923 2f60 488B8558 		movq	-168(%rbp), %rax
 3923      FFFFFF
 3924 2f67 4889C7   		movq	%rax, %rdi
 3925 2f6a E8000000 		call	fclose
 3925      00
 3926              	.L215:
 906:main_final_with_sync.c **** 	}
 907:main_final_with_sync.c **** 	free(fileName);
 3927              		.loc 1 907 0
 3928 2f6f 488B8550 		movq	-176(%rbp), %rax
 3928      FFFFFF
 3929 2f76 4889C7   		movq	%rax, %rdi
 3930 2f79 E8000000 		call	free
 3930      00
 908:main_final_with_sync.c **** 	free(data);
 3931              		.loc 1 908 0
 3932 2f7e 488B8548 		movq	-184(%rbp), %rax
 3932      FFFFFF
 3933 2f85 4889C7   		movq	%rax, %rdi
 3934 2f88 E8000000 		call	free
 3934      00
 909:main_final_with_sync.c **** 	if ( retVal > FLP_LIBERR ) {
 3935              		.loc 1 909 0
 3936 2f8d 83BD14FF 		cmpl	$1, -236(%rbp)
 3936      FFFF01
 3937 2f94 0F86A700 		jbe	.L216
 3937      0000
 3938              	.LBB43:
 910:main_final_with_sync.c **** 		const int column = (int)(ptr - line);
 3939              		.loc 1 910 0
 3940 2f9a 488B0500 		movq	ptr(%rip), %rax
 3940      000000
 3941 2fa1 4889C2   		movq	%rax, %rdx
 3942 2fa4 488B8500 		movq	-256(%rbp), %rax
 3942      FFFFFF
 3943 2fab 4829C2   		subq	%rax, %rdx
 3944 2fae 4889D0   		movq	%rdx, %rax
 3945 2fb1 898534FF 		movl	%eax, -204(%rbp)
 3945      FFFF
 911:main_final_with_sync.c **** 		int i;
 912:main_final_with_sync.c **** 		fprintf(stderr, "%s at column %d\n  %s\n  ", errMessages[retVal], column, line);
 3946              		.loc 1 912 0
 3947 2fb7 8B8514FF 		movl	-236(%rbp), %eax
 3947      FFFF
 3948 2fbd 488B14C5 		movq	errMessages(,%rax,8), %rdx
 3948      00000000 
 3949 2fc5 488B0500 		movq	stderr(%rip), %rax
 3949      000000
 3950 2fcc 488BB500 		movq	-256(%rbp), %rsi
 3950      FFFFFF
 3951 2fd3 8B8D34FF 		movl	-204(%rbp), %ecx
 3951      FFFF
 3952 2fd9 4989F0   		movq	%rsi, %r8
 3953 2fdc BE000000 		movl	$.LC34, %esi
 3953      00
 3954 2fe1 4889C7   		movq	%rax, %rdi
 3955 2fe4 B8000000 		movl	$0, %eax
 3955      00
 3956 2fe9 E8000000 		call	fprintf
 3956      00
 913:main_final_with_sync.c **** 		for ( i = 0; i < column; i++ ) {
 3957              		.loc 1 913 0
 3958 2fee C7851CFF 		movl	$0, -228(%rbp)
 3958      FFFF0000 
 3958      0000
 3959 2ff8 EB1B     		jmp	.L217
 3960              	.L218:
 914:main_final_with_sync.c **** 			fprintf(stderr, " ");
 3961              		.loc 1 914 0 discriminator 3
 3962 2ffa 488B0500 		movq	stderr(%rip), %rax
 3962      000000
 3963 3001 4889C6   		movq	%rax, %rsi
 3964 3004 BF200000 		movl	$32, %edi
 3964      00
 3965 3009 E8000000 		call	fputc
 3965      00
 913:main_final_with_sync.c **** 		for ( i = 0; i < column; i++ ) {
 3966              		.loc 1 913 0 discriminator 3
 3967 300e 83851CFF 		addl	$1, -228(%rbp)
 3967      FFFF01
 3968              	.L217:
 913:main_final_with_sync.c **** 		for ( i = 0; i < column; i++ ) {
 3969              		.loc 1 913 0 is_stmt 0 discriminator 1
 3970 3015 8B851CFF 		movl	-228(%rbp), %eax
 3970      FFFF
 3971 301b 3B8534FF 		cmpl	-204(%rbp), %eax
 3971      FFFF
 3972 3021 7CD7     		jl	.L218
 915:main_final_with_sync.c **** 		}
 916:main_final_with_sync.c **** 		fprintf(stderr, "^\n");
 3973              		.loc 1 916 0 is_stmt 1
 3974 3023 488B0500 		movq	stderr(%rip), %rax
 3974      000000
 3975 302a 4889C1   		movq	%rax, %rcx
 3976 302d BA020000 		movl	$2, %edx
 3976      00
 3977 3032 BE010000 		movl	$1, %esi
 3977      00
 3978 3037 BF000000 		movl	$.LC35, %edi
 3978      00
 3979 303c E8000000 		call	fwrite
 3979      00
 3980              	.L216:
 3981              	.LBE43:
 917:main_final_with_sync.c **** 	}
 918:main_final_with_sync.c **** 	return retVal;
 3982              		.loc 1 918 0
 3983 3041 8B8514FF 		movl	-236(%rbp), %eax
 3983      FFFF
 919:main_final_with_sync.c **** }
 3984              		.loc 1 919 0
 3985 3047 488B4DF8 		movq	-8(%rbp), %rcx
 3986 304b 6448330C 		xorq	%fs:40, %rcx
 3986      25280000 
 3986      00
 3987 3054 7405     		je	.L220
 3988 3056 E8000000 		call	__stack_chk_fail
 3988      00
 3989              	.L220:
 3990 305b C9       		leave
 3991              		.cfi_def_cfa 7, 8
 3992 305c C3       		ret
 3993              		.cfi_endproc
 3994              	.LFE21:
 3996              		.section	.rodata
 3997              	.LC36:
 3998 02c1 30303030 		.string	"0000"
 3998      00
 3999              	.LC37:
 4000 02c6 30303031 		.string	"0001"
 4000      00
 4001              	.LC38:
 4002 02cb 30303130 		.string	"0010"
 4002      00
 4003              	.LC39:
 4004 02d0 30303131 		.string	"0011"
 4004      00
 4005              	.LC40:
 4006 02d5 30313030 		.string	"0100"
 4006      00
 4007              	.LC41:
 4008 02da 30313031 		.string	"0101"
 4008      00
 4009              	.LC42:
 4010 02df 30313130 		.string	"0110"
 4010      00
 4011              	.LC43:
 4012 02e4 30313131 		.string	"0111"
 4012      00
 4013              	.LC44:
 4014 02e9 31303030 		.string	"1000"
 4014      00
 4015              	.LC45:
 4016 02ee 31303031 		.string	"1001"
 4016      00
 4017              	.LC46:
 4018 02f3 58585858 		.string	"XXXX"
 4018      00
 4019              	.LC47:
 4020 02f8 31303130 		.string	"1010"
 4020      00
 4021              	.LC48:
 4022 02fd 31303131 		.string	"1011"
 4022      00
 4023              	.LC49:
 4024 0302 31313030 		.string	"1100"
 4024      00
 4025              	.LC50:
 4026 0307 31313031 		.string	"1101"
 4026      00
 4027              	.LC51:
 4028 030c 31313130 		.string	"1110"
 4028      00
 4029              	.LC52:
 4030 0311 31313131 		.string	"1111"
 4030      00
 4031              		.data
 4032              		.align 32
 4035              	nibbles:
 4036 0000 00000000 		.quad	.LC36
 4036      00000000 
 4037 0008 00000000 		.quad	.LC37
 4037      00000000 
 4038 0010 00000000 		.quad	.LC38
 4038      00000000 
 4039 0018 00000000 		.quad	.LC39
 4039      00000000 
 4040 0020 00000000 		.quad	.LC40
 4040      00000000 
 4041 0028 00000000 		.quad	.LC41
 4041      00000000 
 4042 0030 00000000 		.quad	.LC42
 4042      00000000 
 4043 0038 00000000 		.quad	.LC43
 4043      00000000 
 4044 0040 00000000 		.quad	.LC44
 4044      00000000 
 4045 0048 00000000 		.quad	.LC45
 4045      00000000 
 4046 0050 00000000 		.quad	.LC46
 4046      00000000 
 4047 0058 00000000 		.quad	.LC46
 4047      00000000 
 4048 0060 00000000 		.quad	.LC46
 4048      00000000 
 4049 0068 00000000 		.quad	.LC46
 4049      00000000 
 4050 0070 00000000 		.quad	.LC46
 4050      00000000 
 4051 0078 00000000 		.quad	.LC46
 4051      00000000 
 4052 0080 00000000 		.quad	.LC46
 4052      00000000 
 4053 0088 00000000 		.quad	.LC47
 4053      00000000 
 4054 0090 00000000 		.quad	.LC48
 4054      00000000 
 4055 0098 00000000 		.quad	.LC49
 4055      00000000 
 4056 00a0 00000000 		.quad	.LC50
 4056      00000000 
 4057 00a8 00000000 		.quad	.LC51
 4057      00000000 
 4058 00b0 00000000 		.quad	.LC52
 4058      00000000 
 4059              		.text
 4060              		.globl	asciiToBinary
 4062              	asciiToBinary:
 4063              	.LFB22:
 920:main_final_with_sync.c **** 
 921:main_final_with_sync.c **** static const char *nibbles[] = {
 922:main_final_with_sync.c **** 	"0000",  // '0'
 923:main_final_with_sync.c **** 	"0001",  // '1'
 924:main_final_with_sync.c **** 	"0010",  // '2'
 925:main_final_with_sync.c **** 	"0011",  // '3'
 926:main_final_with_sync.c **** 	"0100",  // '4'
 927:main_final_with_sync.c **** 	"0101",  // '5'
 928:main_final_with_sync.c **** 	"0110",  // '6'
 929:main_final_with_sync.c **** 	"0111",  // '7'
 930:main_final_with_sync.c **** 	"1000",  // '8'
 931:main_final_with_sync.c **** 	"1001",  // '9'
 932:main_final_with_sync.c **** 
 933:main_final_with_sync.c **** 	"XXXX",  // ':'
 934:main_final_with_sync.c **** 	"XXXX",  // ';'
 935:main_final_with_sync.c **** 	"XXXX",  // '<'
 936:main_final_with_sync.c **** 	"XXXX",  // '='
 937:main_final_with_sync.c **** 	"XXXX",  // '>'
 938:main_final_with_sync.c **** 	"XXXX",  // '?'
 939:main_final_with_sync.c **** 	"XXXX",  // '@'
 940:main_final_with_sync.c **** 
 941:main_final_with_sync.c **** 	"1010",  // 'A'
 942:main_final_with_sync.c **** 	"1011",  // 'B'
 943:main_final_with_sync.c **** 	"1100",  // 'C'
 944:main_final_with_sync.c **** 	"1101",  // 'D'
 945:main_final_with_sync.c **** 	"1110",  // 'E'
 946:main_final_with_sync.c **** 	"1111"   // 'F'
 947:main_final_with_sync.c **** };
 948:main_final_with_sync.c **** 
 949:main_final_with_sync.c **** ////////////////////////////////////////////////////////////////////////
 950:main_final_with_sync.c **** int asciiToBinary(int input) {
 4064              		.loc 1 950 0
 4065              		.cfi_startproc
 4066 305d 55       		pushq	%rbp
 4067              		.cfi_def_cfa_offset 16
 4068              		.cfi_offset 6, -16
 4069 305e 4889E5   		movq	%rsp, %rbp
 4070              		.cfi_def_cfa_register 6
 4071 3061 897DEC   		movl	%edi, -20(%rbp)
 951:main_final_with_sync.c **** 	int result = 0, i = 1, remainder;
 4072              		.loc 1 951 0
 4073 3064 C745F400 		movl	$0, -12(%rbp)
 4073      000000
 4074 306b C745F801 		movl	$1, -8(%rbp)
 4074      000000
 952:main_final_with_sync.c **** 
 953:main_final_with_sync.c ****         /* convert decimal to binary format */
 954:main_final_with_sync.c **** 	while (input > 0) {
 4075              		.loc 1 954 0
 4076 3072 EB39     		jmp	.L225
 4077              	.L226:
 955:main_final_with_sync.c **** 		remainder = input % 2;
 4078              		.loc 1 955 0
 4079 3074 8B45EC   		movl	-20(%rbp), %eax
 4080 3077 99       		cltd
 4081 3078 C1EA1F   		shrl	$31, %edx
 4082 307b 01D0     		addl	%edx, %eax
 4083 307d 83E001   		andl	$1, %eax
 4084 3080 29D0     		subl	%edx, %eax
 4085 3082 8945FC   		movl	%eax, -4(%rbp)
 956:main_final_with_sync.c **** 		result = result + (i * remainder);
 4086              		.loc 1 956 0
 4087 3085 8B45F8   		movl	-8(%rbp), %eax
 4088 3088 0FAF45FC 		imull	-4(%rbp), %eax
 4089 308c 0145F4   		addl	%eax, -12(%rbp)
 957:main_final_with_sync.c **** 		input = input / 2;
 4090              		.loc 1 957 0
 4091 308f 8B45EC   		movl	-20(%rbp), %eax
 4092 3092 89C2     		movl	%eax, %edx
 4093 3094 C1EA1F   		shrl	$31, %edx
 4094 3097 01D0     		addl	%edx, %eax
 4095 3099 D1F8     		sarl	%eax
 4096 309b 8945EC   		movl	%eax, -20(%rbp)
 958:main_final_with_sync.c **** 		i = i * 10;
 4097              		.loc 1 958 0
 4098 309e 8B55F8   		movl	-8(%rbp), %edx
 4099 30a1 89D0     		movl	%edx, %eax
 4100 30a3 C1E002   		sall	$2, %eax
 4101 30a6 01D0     		addl	%edx, %eax
 4102 30a8 01C0     		addl	%eax, %eax
 4103 30aa 8945F8   		movl	%eax, -8(%rbp)
 4104              	.L225:
 954:main_final_with_sync.c **** 		remainder = input % 2;
 4105              		.loc 1 954 0
 4106 30ad 837DEC00 		cmpl	$0, -20(%rbp)
 4107 30b1 7FC1     		jg	.L226
 959:main_final_with_sync.c **** 	}
 960:main_final_with_sync.c **** 
 961:main_final_with_sync.c ****         /* print the resultant binary value */
 962:main_final_with_sync.c **** 	return(result);
 4108              		.loc 1 962 0
 4109 30b3 8B45F4   		movl	-12(%rbp), %eax
 963:main_final_with_sync.c **** }
 4110              		.loc 1 963 0
 4111 30b6 5D       		popq	%rbp
 4112              		.cfi_def_cfa 7, 8
 4113 30b7 C3       		ret
 4114              		.cfi_endproc
 4115              	.LFE22:
 4117              		.section	.rodata
 4118 0316 0000     		.align 8
 4119              	.LC53:
 4120 0318 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 4120      20202020 
 4120      20202020 
 4120      76656E64 
 4120      6F722049 
 4121              	.LC54:
 4122 034d 3C564944 		.string	"<VID:PID>"
 4122      3A504944 
 4122      3E00
 4123              	.LC55:
 4124 0357 69767000 		.string	"ivp"
 4125              	.LC56:
 4126 035b 6900     		.string	"i"
 4127 035d 000000   		.align 8
 4128              	.LC57:
 4129 0360 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 4129      20202056 
 4129      49442C20 
 4129      50494420 
 4129      616E6420 
 4130              	.LC58:
 4131 0395 3C564944 		.string	"<VID:PID[:DID]>"
 4131      3A504944 
 4131      5B3A4449 
 4131      445D3E00 
 4132              	.LC59:
 4133 03a5 767000   		.string	"vp"
 4134              	.LC60:
 4135 03a8 7600     		.string	"v"
 4136 03aa 00000000 		.align 8
 4136      0000
 4137              	.LC61:
 4138 03b0 20202020 		.string	"        firmware to RAM-load (or use std fw)"
 4138      20202020 
 4138      6669726D 
 4138      77617265 
 4138      20746F20 
 4139              	.LC62:
 4140 03dd 3C666972 		.string	"<firmware.hex>"
 4140      6D776172 
 4140      652E6865 
 4140      783E00
 4141              	.LC63:
 4142 03ec 667700   		.string	"fw"
 4143              	.LC64:
 4144 03ef 6600     		.string	"f"
 4145 03f1 00000000 		.align 8
 4145      000000
 4146              	.LC65:
 4147 03f8 20726561 		.string	" read/write digital ports (e.g B13+,C1-,B2?)"
 4147      642F7772 
 4147      69746520 
 4147      64696769 
 4147      74616C20 
 4148              	.LC66:
 4149 0425 3C626974 		.string	"<bitCfg[,bitCfg]*>"
 4149      4366675B 
 4149      2C626974 
 4149      4366675D 
 4149      2A3E00
 4150              	.LC67:
 4151 0438 706F7274 		.string	"ports"
 4151      7300
 4152              	.LC68:
 4153 043e 6400     		.string	"d"
 4154              	.LC69:
 4155 0440 20202020 		.string	"         query the JTAG chain"
 4155      20202020 
 4155      20717565 
 4155      72792074 
 4155      6865204A 
 4156              	.LC70:
 4157 045e 3C6A7461 		.string	"<jtagBits>"
 4157      67426974 
 4157      733E00
 4158              	.LC71:
 4159 0469 71756572 		.string	"query"
 4159      7900
 4160              	.LC72:
 4161 046f 7100     		.string	"q"
 4162              	.LC73:
 4163 0471 20202020 		.string	"         program a device"
 4163      20202020 
 4163      2070726F 
 4163      6772616D 
 4163      20612064 
 4164              	.LC74:
 4165 048b 3C636F6E 		.string	"<config>"
 4165      6669673E 
 4165      00
 4166              	.LC75:
 4167 0494 70726F67 		.string	"program"
 4167      72616D00 
 4168              	.LC76:
 4169 049c 7000     		.string	"p"
 4170 049e 0000     		.align 8
 4171              	.LC77:
 4172 04a0 20202020 		.string	"        which comm conduit to choose (default 0x01)"
 4172      20202020 
 4172      77686963 
 4172      6820636F 
 4172      6D6D2063 
 4173              	.LC78:
 4174 04d4 3C636F6E 		.string	"<conduit>"
 4174      64756974 
 4174      3E00
 4175              	.LC79:
 4176 04de 636F6E64 		.string	"conduit"
 4176      75697400 
 4177              	.LC80:
 4178 04e6 6300     		.string	"c"
 4179              		.align 8
 4180              	.LC81:
 4181 04e8 20202020 		.string	"    a series of CommFPGA actions"
 4181      61207365 
 4181      72696573 
 4181      206F6620 
 4181      436F6D6D 
 4182              	.LC82:
 4183 0509 3C616374 		.string	"<actionString>"
 4183      696F6E53 
 4183      7472696E 
 4183      673E00
 4184              	.LC83:
 4185 0518 61637469 		.string	"action"
 4185      6F6E00
 4186              	.LC84:
 4187 051f 6100     		.string	"a"
 4188 0521 00000000 		.align 8
 4188      000000
 4189              	.LC85:
 4190 0528 20202020 		.string	"                 some other stuff"
 4190      20202020 
 4190      20202020 
 4190      20202020 
 4190      20736F6D 
 4191              	.LC86:
 4192 054a 736F6D65 		.string	"some stuff"
 4192      20737475 
 4192      666600
 4193              	.LC87:
 4194 0555 7A00     		.string	"z"
 4195 0557 00       		.align 8
 4196              	.LC88:
 4197 0558 20202020 		.string	"                    start up an interactive CommFPGA session"
 4197      20202020 
 4197      20202020 
 4197      20202020 
 4197      20202020 
 4198              	.LC89:
 4199 0595 7368656C 		.string	"shell"
 4199      6C00
 4200              	.LC90:
 4201 059b 7300     		.string	"s"
 4202 059d 000000   		.align 8
 4203              	.LC91:
 4204 05a0 20202020 		.string	"                enable benchmarking & chefcksumming"
 4204      20202020 
 4204      20202020 
 4204      20202020 
 4204      656E6162 
 4205              	.LC92:
 4206 05d4 62656E63 		.string	"benchmark"
 4206      686D6172 
 4206      6B00
 4207              	.LC93:
 4208 05de 6200     		.string	"b"
 4209              		.align 8
 4210              	.LC94:
 4211 05e0 20202020 		.string	"                    reset the bulk endpoints"
 4211      20202020 
 4211      20202020 
 4211      20202020 
 4211      20202020 
 4212              	.LC95:
 4213 060d 72657365 		.string	"reset"
 4213      7400
 4214 0613 00000000 		.align 8
 4214      00
 4215              	.LC96:
 4216 0618 20202077 		.string	"   write data from channel ch to file"
 4216      72697465 
 4216      20646174 
 4216      61206672 
 4216      6F6D2063 
 4217              	.LC97:
 4218 063e 3C63683A 		.string	"<ch:file.bin>"
 4218      66696C65 
 4218      2E62696E 
 4218      3E00
 4219              	.LC98:
 4220 064c 64756D70 		.string	"dumploop"
 4220      6C6F6F70 
 4220      00
 4221              	.LC99:
 4222 0655 6C00     		.string	"l"
 4223 0657 00       		.align 8
 4224              	.LC100:
 4225 0658 20202020 		.string	"                     print this help and exit"
 4225      20202020 
 4225      20202020 
 4225      20202020 
 4225      20202020 
 4226              	.LC101:
 4227 0686 68656C70 		.string	"help"
 4227      00
 4228              	.LC102:
 4229 068b 6800     		.string	"h"
 4230 068d 000000   		.align 8
 4231              	.LC103:
 4232 0690 20202077 		.string	"   write firmware to FX2's EEPROM (!!)"
 4232      72697465 
 4232      20666972 
 4232      6D776172 
 4232      6520746F 
 4233              	.LC104:
 4234 06b7 3C737464 		.string	"<std|fw.hex|fw.iic>"
 4234      7C66772E 
 4234      6865787C 
 4234      66772E69 
 4234      69633E00 
 4235              	.LC105:
 4236 06cb 65657072 		.string	"eeprom"
 4236      6F6D00
 4237 06d2 00000000 		.align 8
 4237      0000
 4238              	.LC106:
 4239 06d8 20202020 		.string	"     backup FX2's EEPROM (e.g 128:fw.iic)\n"
 4239      20626163 
 4239      6B757020 
 4239      46583227 
 4239      73204545 
 4240              	.LC107:
 4241 0703 3C6B6269 		.string	"<kbitSize:fw.iic>"
 4241      7453697A 
 4241      653A6677 
 4241      2E696963 
 4241      3E00
 4242              	.LC108:
 4243 0715 6261636B 		.string	"backup"
 4243      757000
 4244              	.LC109:
 4245 071c 666C636C 		.string	"flcli"
 4245      6900
 4246              	.LC110:
 4247 0722 25733A20 		.string	"%s: insufficient memory\n"
 4247      696E7375 
 4247      66666963 
 4247      69656E74 
 4247      206D656D 
 4248 073b 00000000 		.align 8
 4248      00
 4249              	.LC111:
 4250 0740 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s"
 4250      4C696E6B 
 4250      20436F6D 
 4250      6D616E64 
 4250      2D4C696E 
 4251              	.LC112:
 4252 0794 0A00     		.string	"\n"
 4253 0796 0000     		.align 8
 4254              	.LC113:
 4255 0798 0A496E74 		.string	"\nInteract with an FPGALink device.\n"
 4255      65726163 
 4255      74207769 
 4255      74682061 
 4255      6E204650 
 4256              	.LC114:
 4257 07bc 2020252D 		.string	"  %-10s %s\n"
 4257      31307320 
 4257      25730A00 
 4258              		.align 8
 4259              	.LC115:
 4260 07c8 54727920 		.string	"Try '%s --help' for more information.\n"
 4260      27257320 
 4260      2D2D6865 
 4260      6C702720 
 4260      666F7220 
 4261 07ef 00       		.align 8
 4262              	.LC116:
 4263 07f0 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 4263      6D707469 
 4263      6E672074 
 4263      6F206F70 
 4263      656E2063 
 4264              	.LC117:
 4265 0828 4C6F6164 		.string	"Loading firmware into %s...\n"
 4265      696E6720 
 4265      6669726D 
 4265      77617265 
 4265      20696E74 
 4266              	.LC118:
 4267 0845 41776169 		.string	"Awaiting renumeration"
 4267      74696E67 
 4267      2072656E 
 4267      756D6572 
 4267      6174696F 
 4268 085b 00000000 		.align 8
 4268      00
 4269              	.LC119:
 4270 0860 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 4270      4C696E6B 
 4270      20646576 
 4270      69636520 
 4270      64696420 
 4271 0893 00000000 		.align 8
 4271      00
 4272              	.LC120:
 4273 0898 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 4273      6D707469 
 4273      6E672074 
 4273      6F206F70 
 4273      656E2063 
 4274 08d5 000000   		.align 8
 4275              	.LC121:
 4276 08d8 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 4276      64206E6F 
 4276      74206F70 
 4276      656E2046 
 4276      5047414C 
 4277 0922 00000000 		.align 8
 4277      0000
 4278              	.LC122:
 4279 0928 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 4279      65637465 
 4279      6420746F 
 4279      20465047 
 4279      414C696E 
 4280              	.LC123:
 4281 0977 73746400 		.string	"std"
 4282 097b 00000000 		.align 8
 4282      00
 4283              	.LC124:
 4284 0980 57726974 		.string	"Writing the standard FPGALink firmware to the FX2's EEPROM..."
 4284      696E6720 
 4284      74686520 
 4284      7374616E 
 4284      64617264 
 4285 09be 0000     		.align 8
 4286              	.LC125:
 4287 09c0 57726974 		.string	"Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n"
 4287      696E6720 
 4287      63757374 
 4287      6F6D2046 
 4287      5047414C 
 4288 0a01 00000000 		.align 8
 4288      000000
 4289              	.LC126:
 4290 0a08 25733A20 		.string	"%s: invalid argument to option --backup=<kbitSize:fw.iic>\n"
 4290      696E7661 
 4290      6C696420 
 4290      61726775 
 4290      6D656E74 
 4291 0a43 00000000 		.align 8
 4291      00
 4292              	.LC127:
 4293 0a48 53617669 		.string	"Saving a backup of %d kbit from the FX2's EEPROM to %s...\n"
 4293      6E672061 
 4293      20626163 
 4293      6B757020 
 4293      6F662025 
 4294              	.LC128:
 4295 0a83 436F6E66 		.string	"Configuring ports..."
 4295      69677572 
 4295      696E6720 
 4295      706F7274 
 4295      732E2E2E 
 4296              	.LC129:
 4297 0a98 25303858 		.string	"%08X"
 4297      00
 4298 0a9d 000000   		.align 8
 4299              	.LC130:
 4300 0aa0 52656164 		.string	"Readback:   28   24   20   16    12    8    4    0\n          %s"
 4300      6261636B 
 4300      3A202020 
 4300      32382020 
 4300      20323420 
 4301              	.LC131:
 4302 0ae0 20257300 		.string	" %s"
 4303              	.LC132:
 4304 0ae4 20202573 		.string	"  %s"
 4304      00
 4305              	.LC133:
 4306 0ae9 2025730A 		.string	" %s\n"
 4306      00
 4307 0aee 0000     		.align 8
 4308              	.LC134:
 4309 0af0 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain, yielding:\n"
 4309      46504741 
 4309      4C696E6B 
 4309      20646576 
 4309      69636520 
 4310              	.LC135:
 4311 0b2d 20203078 		.string	"  0x%08X\n"
 4311      25303858 
 4311      0A00
 4312 0b37 00       		.align 8
 4313              	.LC136:
 4314 0b38 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\n"
 4314      46504741 
 4314      4C696E6B 
 4314      20646576 
 4314      69636520 
 4315              		.align 8
 4316              	.LC137:
 4317 0b90 4A544147 		.string	"JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n"
 4317      20636861 
 4317      696E2073 
 4317      63616E20 
 4317      72657175 
 4318              	.LC138:
 4319 0bdf 50726F67 		.string	"Programming device..."
 4319      72616D6D 
 4319      696E6720 
 4319      64657669 
 4319      63652E2E 
 4320 0bf5 000000   		.align 8
 4321              	.LC139:
 4322 0bf8 50726F67 		.string	"Program operation requested but device at %s does not support NeroProg\n"
 4322      72616D20 
 4322      6F706572 
 4322      6174696F 
 4322      6E207265 
 4323              		.align 8
 4324              	.LC140:
 4325 0c40 45786563 		.string	"Executing CommFPGA actions on FPGALink device %s...\n"
 4325      7574696E 
 4325      6720436F 
 4325      6D6D4650 
 4325      47412061 
 4326 0c75 000000   		.align 8
 4327              	.LC141:
 4328 0c78 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 4328      46504741 
 4328      4C696E6B 
 4328      20646576 
 4328      69636520 
 4329 0cc4 00000000 		.align 8
 4330              	.LC142:
 4331 0cc8 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 4331      6F6E2072 
 4331      65717565 
 4331      73746564 
 4331      20627574 
 4332 0d05 000000   		.align 8
 4333              	.LC143:
 4334 0d08 25733A20 		.string	"%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n"
 4334      696E7661 
 4334      6C696420 
 4334      61726775 
 4334      6D656E74 
 4335 0d44 00000000 		.align 8
 4336              	.LC144:
 4337 0d48 436F7079 		.string	"Copying from channel %lu to %s"
 4337      696E6720 
 4337      66726F6D 
 4337      20636861 
 4337      6E6E656C 
 4338              	.LC145:
 4339 0d67 0A436175 		.string	"\nCaught SIGINT, quitting..."
 4339      67687420 
 4339      53494749 
 4339      4E542C20 
 4339      71756974 
 4340 0d83 00000000 		.align 8
 4340      00
 4341              	.LC146:
 4342 0d88 0A456E74 		.string	"\nEntering CommFPGA command-line mode:"
 4342      6572696E 
 4342      6720436F 
 4342      6D6D4650 
 4342      47412063 
 4343              	.LC147:
 4344 0dae 3E2000   		.string	"> "
 4345 0db1 00000000 		.align 8
 4345      000000
 4346              	.LC148:
 4347 0db8 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n"
 4347      46504741 
 4347      4C696E6B 
 4347      20646576 
 4347      69636520 
 4348 0e01 00000000 		.align 8
 4348      000000
 4349              	.LC149:
 4350 0e08 5368656C 		.string	"Shell requested but device at %s does not support CommFPGA\n"
 4350      6C207265 
 4350      71756573 
 4350      74656420 
 4350      62757420 
 4351              	.LC150:
 4352 0e44 48656C6C 		.string	"Hello "
 4352      6F2000
 4353              	.LC151:
 4354 0e4b 48656C6C 		.string	"Helloghjkl "
 4354      6F67686A 
 4354      6B6C2000 
 4355              	.LC152:
 4356 0e57 4368616E 		.string	"Channel = "
 4356      6E656C20 
 4356      3D2000
 4357              	.LC153:
 4358 0e62 257300   		.string	"%s"
 4359              	.LC154:
 4360 0e65 25640A00 		.string	"%d\n"
 4361 0e69 00000000 		.align 8
 4361      000000
 4362              	.LC155:
 4363 0e70 2D2D2D2D 		.string	"----------------------H2.1 started----------------------- "
 4363      2D2D2D2D 
 4363      2D2D2D2D 
 4363      2D2D2D2D 
 4363      2D2D2D2D 
 4364 0eab 00000000 		.align 8
 4364      00
 4365              	.LC156:
 4366 0eb0 57616974 		.string	"Waiting for encrypted co_ordinates"
 4366      696E6720 
 4366      666F7220 
 4366      656E6372 
 4366      79707465 
 4367 0ed3 00000000 		.align 8
 4367      00
 4368              	.LC157:
 4369 0ed8 2D2D2D2D 		.string	"-------------------------RESET------------------------"
 4369      2D2D2D2D 
 4369      2D2D2D2D 
 4369      2D2D2D2D 
 4369      2D2D2D2D 
 4370 0f0f 00       		.align 8
 4371              	.LC158:
 4372 0f10 476F7420 		.string	"Got the encrypted co_ordinates, they are as in uint8 form --"
 4372      74686520 
 4372      656E6372 
 4372      79707465 
 4372      6420636F 
 4373 0f4d 000000   		.align 8
 4374              	.LC159:
 4375 0f50 656E6372 		.string	"encrypted_pos is converted to binary"
 4375      79707465 
 4375      645F706F 
 4375      73206973 
 4375      20636F6E 
 4376              	.LC160:
 4377 0f75 54686520 		.string	"The encrypted_pos are as --"
 4377      656E6372 
 4377      79707465 
 4377      645F706F 
 4377      73206172 
 4378 0f91 00000000 		.align 8
 4378      000000
 4379              	.LC161:
 4380 0f98 54686520 		.string	"The decrypted pos in binary form are as --"
 4380      64656372 
 4380      79707465 
 4380      6420706F 
 4380      7320696E 
 4381 0fc3 00000000 		.align 8
 4381      00
 4382              	.LC162:
 4383 0fc8 2D2D2D2D 		.string	"----------------------H2.1 ended----------------------- "
 4383      2D2D2D2D 
 4383      2D2D2D2D 
 4383      2D2D2D2D 
 4383      2D2D2D2D 
 4384 1001 00000000 		.align 8
 4384      000000
 4385              	.LC163:
 4386 1008 2D2D2D2D 		.string	"----------------------H2.2 started----------------------- "
 4386      2D2D2D2D 
 4386      2D2D2D2D 
 4386      2D2D2D2D 
 4386      2D2D2D2D 
 4387 1043 00000000 		.align 8
 4387      00
 4388              	.LC164:
 4389 1048 54686520 		.string	"The co_ordinates are re-encrypted in binary form"
 4389      636F5F6F 
 4389      7264696E 
 4389      61746573 
 4389      20617265 
 4390 1079 00000000 		.align 8
 4390      000000
 4391              	.LC165:
 4392 1080 54686520 		.string	"The re-encrypted co_ords are as follows"
 4392      72652D65 
 4392      6E637279 
 4392      70746564 
 4392      20636F5F 
 4393              		.align 8
 4394              	.LC166:
 4395 10a8 436F6E76 		.string	"Converting the re-encrypted data in binary to uint8 form"
 4395      65727469 
 4395      6E672074 
 4395      68652072 
 4395      652D656E 
 4396 10e1 00000000 		.align 8
 4396      000000
 4397              	.LC167:
 4398 10e8 50726570 		.string	"Preparing to send the encrypted co_ordinates "
 4398      6172696E 
 4398      6720746F 
 4398      2073656E 
 4398      64207468 
 4399 1116 0000     		.align 8
 4400              	.LC168:
 4401 1118 53756363 		.string	"Successfully send the encrypted co_ordinates in uint8 form"
 4401      65737366 
 4401      756C6C79 
 4401      2073656E 
 4401      64207468 
 4402 1153 00000000 		.align 8
 4402      00
 4403              	.LC169:
 4404 1158 2D2D2D2D 		.string	"----------------------H2.2 ended----------------------- "
 4404      2D2D2D2D 
 4404      2D2D2D2D 
 4404      2D2D2D2D 
 4404      2D2D2D2D 
 4405 1191 00000000 		.align 8
 4405      000000
 4406              	.LC170:
 4407 1198 2D2D2D2D 		.string	"----------------------H2.3 started----------------------- "
 4407      2D2D2D2D 
 4407      2D2D2D2D 
 4407      2D2D2D2D 
 4407      2D2D2D2D 
 4408 11d3 00000000 		.align 8
 4408      00
 4409              	.LC171:
 4410 11d8 57616974 		.string	"Waiting to get Ack1 from the fpga controller"
 4410      696E6720 
 4410      746F2067 
 4410      65742041 
 4410      636B3120 
 4411 1205 000000   		.align 8
 4412              	.LC172:
 4413 1208 46697273 		.string	"First ack1 received successfully"
 4413      74206163 
 4413      6B312072 
 4413      65636569 
 4413      76656420 
 4414 1229 00000000 		.align 8
 4414      000000
 4415              	.LC173:
 4416 1230 54686520 		.string	"The first ack1 is ----- in uint8 form"
 4416      66697273 
 4416      74206163 
 4416      6B312069 
 4416      73202D2D 
 4417 1256 0000     		.align 8
 4418              	.LC174:
 4419 1258 2D2D2D2D 		.string	"----------------------H2.3 ended----------------------- "
 4419      2D2D2D2D 
 4419      2D2D2D2D 
 4419      2D2D2D2D 
 4419      2D2D2D2D 
 4420 1291 00000000 		.align 8
 4420      000000
 4421              	.LC175:
 4422 1298 2D2D2D2D 		.string	"----------------------H2.4 started----------------------- "
 4422      2D2D2D2D 
 4422      2D2D2D2D 
 4422      2D2D2D2D 
 4422      2D2D2D2D 
 4423 12d3 00000000 		.align 8
 4423      00
 4424              	.LC176:
 4425 12d8 436F6E76 		.string	"Converting encrypted ack1 from uint8 to binary"
 4425      65727469 
 4425      6E672065 
 4425      6E637279 
 4425      70746564 
 4426 1307 00       		.align 8
 4427              	.LC177:
 4428 1308 54686520 		.string	"The encrypted ack1 is as follows in binary form --"
 4428      656E6372 
 4428      79707465 
 4428      64206163 
 4428      6B312069 
 4429 133b 00000000 		.align 8
 4429      00
 4430              	.LC178:
 4431 1340 54686520 		.string	"The decrypted ack1 in binary is as follows --"
 4431      64656372 
 4431      79707465 
 4431      64206163 
 4431      6B312069 
 4432 136e 0000     		.align 8
 4433              	.LC179:
 4434 1370 43686563 		.string	"Checking if this ack1 is equal to the original ack1 "
 4434      6B696E67 
 4434      20696620 
 4434      74686973 
 4434      2061636B 
 4435 13a5 000000   		.align 8
 4436              	.LC180:
 4437 13a8 41636B31 		.string	"Ack1 received doesn't match with the original one"
 4437      20726563 
 4437      65697665 
 4437      6420646F 
 4437      65736E27 
 4438              	.LC181:
 4439 13da 52656164 		.string	"Reading the channel 2i again "
 4439      696E6720 
 4439      74686520 
 4439      6368616E 
 4439      6E656C20 
 4440              		.align 8
 4441              	.LC182:
 4442 13f8 47657420 		.string	"Get the encrypted ack1 again successfully ---"
 4442      74686520 
 4442      656E6372 
 4442      79707465 
 4442      64206163 
 4443 1426 0000     		.align 8
 4444              	.LC183:
 4445 1428 436F6E76 		.string	"Converted encrypted ack1 to binary and it is as ----"
 4445      65727465 
 4445      6420656E 
 4445      63727970 
 4445      74656420 
 4446 145d 000000   		.align 8
 4447              	.LC184:
 4448 1460 44656372 		.string	"Decrypting the encrypted ack1 "
 4448      79707469 
 4448      6E672074 
 4448      68652065 
 4448      6E637279 
 4449 147f 00       		.align 8
 4450              	.LC185:
 4451 1480 41636B31 		.string	"Ack1 got decrpyted and is as ----"
 4451      20676F74 
 4451      20646563 
 4451      72707974 
 4451      65642061 
 4452 14a2 00000000 		.align 8
 4452      0000
 4453              	.LC186:
 4454 14a8 2D2D2D2D 		.string	"----------------------H2.4 ended----------------------- "
 4454      2D2D2D2D 
 4454      2D2D2D2D 
 4454      2D2D2D2D 
 4454      2D2D2D2D 
 4455 14e1 00000000 		.align 8
 4455      000000
 4456              	.LC187:
 4457 14e8 2D2D2D2D 		.string	"-------------------------H2.5 started-------------------------"
 4457      2D2D2D2D 
 4457      2D2D2D2D 
 4457      2D2D2D2D 
 4457      2D2D2D2D 
 4458 1527 00       		.align 8
 4459              	.LC188:
 4460 1528 4661696C 		.string	"Fails to receive encrypted ack1 "
 4460      7320746F 
 4460      20726563 
 4460      65697665 
 4460      20656E63 
 4461              	.LC189:
 4462 1549 4661696C 		.string	"Fail Count = "
 4462      20436F75 
 4462      6E74203D 
 4462      2000
 4463 1557 00       		.align 8
 4464              	.LC190:
 4465 1558 2D2D2D2D 		.string	"-------------------------H2.5 ended-------------------------"
 4465      2D2D2D2D 
 4465      2D2D2D2D 
 4465      2D2D2D2D 
 4465      2D2D2D2D 
 4466 1595 000000   		.align 8
 4467              	.LC191:
 4468 1598 2D2D2D2D 		.string	"-------------------------H3 starts--------------------------"
 4468      2D2D2D2D 
 4468      2D2D2D2D 
 4468      2D2D2D2D 
 4468      2D2D2D2D 
 4469              	.LC192:
 4470 15d5 656E6372 		.string	"encrypting ack2 "
 4470      79707469 
 4470      6E672061 
 4470      636B3220 
 4470      00
 4471 15e6 0000     		.align 8
 4472              	.LC193:
 4473 15e8 41636B32 		.string	"Ack2 got encrypted and it is as -----"
 4473      20676F74 
 4473      20656E63 
 4473      72797074 
 4473      65642061 
 4474 160e 0000     		.align 8
 4475              	.LC194:
 4476 1610 436F6E76 		.string	"Converting encrypted ack2 from binary to uint8"
 4476      65727469 
 4476      6E672065 
 4476      6E637279 
 4476      70746564 
 4477 163f 00       		.align 8
 4478              	.LC195:
 4479 1640 436F6E76 		.string	"Converted encrypted ack2 to uint8 and it is as -----"
 4479      65727465 
 4479      6420656E 
 4479      63727970 
 4479      74656420 
 4480 1675 000000   		.align 8
 4481              	.LC196:
 4482 1678 53656E64 		.string	"Sending encrypted ack2 to fpga "
 4482      696E6720 
 4482      656E6372 
 4482      79707465 
 4482      64206163 
 4483              		.align 8
 4484              	.LC197:
 4485 1698 456E6372 		.string	"Encrypted ack2 send successfully"
 4485      79707465 
 4485      64206163 
 4485      6B322073 
 4485      656E6420 
 4486 16b9 00000000 		.align 8
 4486      000000
 4487              	.LC198:
 4488 16c0 2D2D2D2D 		.string	"-------------------------H3 ended----------------------------"
 4488      2D2D2D2D 
 4488      2D2D2D2D 
 4488      2D2D2D2D 
 4488      2D2D2D2D 
 4489 16fe 0000     		.align 8
 4490              	.LC199:
 4491 1700 2D2D2D2D 		.string	"-------------------------H4 started--------------------------"
 4491      2D2D2D2D 
 4491      2D2D2D2D 
 4491      2D2D2D2D 
 4491      2D2D2D2D 
 4492 173e 0000     		.align 8
 4493              	.LC200:
 4494 1740 43616C63 		.string	"Calculating x and y co_ordinates ------------------"
 4494      756C6174 
 4494      696E6720 
 4494      7820616E 
 4494      64207920 
 4495 1774 00000000 		.align 8
 4496              	.LC201:
 4497 1778 7820616E 		.string	"x and y co_ordinates calculated, they are as --"
 4497      64207920 
 4497      636F5F6F 
 4497      7264696E 
 4497      61746573 
 4498              	.LC202:
 4499 17a8 25642025 		.string	"%d %d "
 4499      642000
 4500 17af 00       		.align 8
 4501              	.LC203:
 4502 17b0 476F7420 		.string	"Got the information for x and y co_ordinates, 64 bits filled"
 4502      74686520 
 4502      696E666F 
 4502      726D6174 
 4502      696F6E20 
 4503 17ed 000000   		.align 8
 4504              	.LC204:
 4505 17f0 54686520 		.string	"The final 64 bit array in decrypted form --"
 4505      66696E61 
 4505      6C203634 
 4505      20626974 
 4505      20617272 
 4506 181c 00000000 		.align 8
 4507              	.LC205:
 4508 1820 2D2D2D2D 		.string	"-------------------------H4 ended--------------------------"
 4508      2D2D2D2D 
 4508      2D2D2D2D 
 4508      2D2D2D2D 
 4508      2D2D2D2D 
 4509 185c 00000000 		.align 8
 4510              	.LC206:
 4511 1860 2D2D2D2D 		.string	"-------------------------H5 starts--------------------------"
 4511      2D2D2D2D 
 4511      2D2D2D2D 
 4511      2D2D2D2D 
 4511      2D2D2D2D 
 4512 189d 000000   		.align 8
 4513              	.LC207:
 4514 18a0 456E6372 		.string	"Encrypting first 32 bits of final array"
 4514      79707469 
 4514      6E672066 
 4514      69727374 
 4514      20333220 
 4515              		.align 8
 4516              	.LC208:
 4517 18c8 46697273 		.string	"First 32 bits got encrypted , they are as ----"
 4517      74203332 
 4517      20626974 
 4517      7320676F 
 4517      7420656E 
 4518 18f7 00       		.align 8
 4519              	.LC209:
 4520 18f8 436F6E76 		.string	"Converting first 32 bits to uint8"
 4520      65727469 
 4520      6E672066 
 4520      69727374 
 4520      20333220 
 4521 191a 00000000 		.align 8
 4521      0000
 4522              	.LC210:
 4523 1920 46697273 		.string	"First 32 bits got converted to uint8, they are as"
 4523      74203332 
 4523      20626974 
 4523      7320676F 
 4523      7420636F 
 4524 1952 00000000 		.align 8
 4524      0000
 4525              	.LC211:
 4526 1958 57726974 		.string	"Writing on channel first 32 bits encrypted"
 4526      696E6720 
 4526      6F6E2063 
 4526      68616E6E 
 4526      656C2066 
 4527 1983 00000000 		.align 8
 4527      00
 4528              	.LC212:
 4529 1988 2D2D2D2D 		.string	"-----------------------------H5 ends------------------"
 4529      2D2D2D2D 
 4529      2D2D2D2D 
 4529      2D2D2D2D 
 4529      2D2D2D2D 
 4530 19bf 00       		.align 8
 4531              	.LC213:
 4532 19c0 2D2D2D2D 		.string	"-----------------------------H6 starts------------------"
 4532      2D2D2D2D 
 4532      2D2D2D2D 
 4532      2D2D2D2D 
 4532      2D2D2D2D 
 4533              	.LC214:
 4534 19f9 57616974 		.string	"Waiting for encrypted ack1 "
 4534      696E6720 
 4534      666F7220 
 4534      656E6372 
 4534      79707465 
 4535 1a15 000000   		.align 8
 4536              	.LC215:
 4537 1a18 2D2D2D2D 		.string	"-----------------------------H7 starts------------------"
 4537      2D2D2D2D 
 4537      2D2D2D2D 
 4537      2D2D2D2D 
 4537      2D2D2D2D 
 4538 1a51 00000000 		.align 8
 4538      000000
 4539              	.LC217:
 4540 1a58 476F696E 		.string	"Going to H2, time exceeded 256 seconds"
 4540      6720746F 
 4540      2048322C 
 4540      2074696D 
 4540      65206578 
 4541 1a7f 00       		.align 8
 4542              	.LC218:
 4543 1a80 41636B31 		.string	"Ack1 received successfully, not checked yet, it is as----"
 4543      20726563 
 4543      65697665 
 4543      64207375 
 4543      63636573 
 4544 1aba 00000000 		.align 8
 4544      0000
 4545              	.LC219:
 4546 1ac0 436F6E76 		.string	"Converted encrypted ack1 from uint8 to binary , it is as --"
 4546      65727465 
 4546      6420656E 
 4546      63727970 
 4546      74656420 
 4547              	.LC220:
 4548 1afc 44656372 		.string	"Decrypting the encrypted ack1"
 4548      79707469 
 4548      6E672074 
 4548      68652065 
 4548      6E637279 
 4549 1b1a 00000000 		.align 8
 4549      0000
 4550              	.LC221:
 4551 1b20 456E6372 		.string	"Encrypted ack1 decrypted successfully, it is as----"
 4551      79707465 
 4551      64206163 
 4551      6B312064 
 4551      65637279 
 4552              	.LC222:
 4553 1b54 41636B31 		.string	"Ack1 doesn't match"
 4553      20646F65 
 4553      736E2774 
 4553      206D6174 
 4553      636800
 4554              	.LC223:
 4555 1b67 41636B31 		.string	"Ack1 match successfully"
 4555      206D6174 
 4555      63682073 
 4555      75636365 
 4555      73736675 
 4556 1b7f 00       		.align 8
 4557              	.LC224:
 4558 1b80 656E6372 		.string	"encrypting last 32 bits to send to fpga "
 4558      79707469 
 4558      6E67206C 
 4558      61737420 
 4558      33322062 
 4559 1ba9 00000000 		.align 8
 4559      000000
 4560              	.LC225:
 4561 1bb0 4C617374 		.string	"Last 32 bits got encrypted , they are as in binary form"
 4561      20333220 
 4561      62697473 
 4561      20676F74 
 4561      20656E63 
 4562              		.align 8
 4563              	.LC226:
 4564 1be8 436F6E76 		.string	"Converting last 32 bits to uint8"
 4564      65727469 
 4564      6E67206C 
 4564      61737420 
 4564      33322062 
 4565 1c09 00000000 		.align 8
 4565      000000
 4566              	.LC227:
 4567 1c10 4C617374 		.string	"Last 32 bits got converted to uint8, they are as"
 4567      20333220 
 4567      62697473 
 4567      20676F74 
 4567      20636F6E 
 4568 1c41 00000000 		.align 8
 4568      000000
 4569              	.LC228:
 4570 1c48 57726974 		.string	"Writing on channel last 32 bits encrypted"
 4570      696E6720 
 4570      6F6E2063 
 4570      68616E6E 
 4570      656C206C 
 4571 1c72 00000000 		.align 8
 4571      0000
 4572              	.LC229:
 4573 1c78 53756363 		.string	"Successfully written last 32 bits"
 4573      65737366 
 4573      756C6C79 
 4573      20777269 
 4573      7474656E 
 4574 1c9a 00000000 		.align 8
 4574      0000
 4575              	.LC230:
 4576 1ca0 2D2D2D2D 		.string	"---------------------------------H7 ends---------------------"
 4576      2D2D2D2D 
 4576      2D2D2D2D 
 4576      2D2D2D2D 
 4576      2D2D2D2D 
 4577              	.LC231:
 4578 1cde 456E6372 		.string	"Encrypting ack2 "
 4578      79707469 
 4578      6E672061 
 4578      636B3220 
 4578      00
 4579 1cef 00       		.align 8
 4580              	.LC232:
 4581 1cf0 456E6372 		.string	"Encrypted ack2 is as follows  ----"
 4581      79707465 
 4581      64206163 
 4581      6B322069 
 4581      73206173 
 4582 1d13 00000000 		.align 8
 4582      00
 4583              	.LC233:
 4584 1d18 436F6E76 		.string	"Converted encrypted ack2 to uint8, it is as follows"
 4584      65727465 
 4584      6420656E 
 4584      63727970 
 4584      74656420 
 4585 1d4c 00000000 		.align 8
 4586              	.LC234:
 4587 1d50 57726974 		.string	"Writing encrypted ack2 to channel"
 4587      696E6720 
 4587      656E6372 
 4587      79707465 
 4587      64206163 
 4588 1d72 00000000 		.align 8
 4588      0000
 4589              	.LC235:
 4590 1d78 57726974 		.string	"Written successfully encrypted ack2, the written data is --"
 4590      74656E20 
 4590      73756363 
 4590      65737366 
 4590      756C6C79 
 4591 1db4 00000000 		.align 8
 4592              	.LC236:
 4593 1db8 52656365 		.string	"Receiving data to update CSV file"
 4593      6976696E 
 4593      67206461 
 4593      74612074 
 4593      6F207570 
 4594              	.LC237:
 4595 1dda 46504741 		.string	"FPGA Count "
 4595      20436F75 
 4595      6E742000 
 4596 1de6 0000     		.align 8
 4597              	.LC238:
 4598 1de8 52656365 		.string	"Receiving Controlling signal form FPGA "
 4598      6976696E 
 4598      6720436F 
 4598      6E74726F 
 4598      6C6C696E 
 4599              		.align 8
 4600              	.LC239:
 4601 1e10 436F6E74 		.string	"Controlling signal received from FPGA, it is-----"
 4601      726F6C6C 
 4601      696E6720 
 4601      7369676E 
 4601      616C2072 
 4602 1e42 00000000 		.align 8
 4602      0000
 4603              	.LC240:
 4604 1e48 43686563 		.string	"Checking the controlling singal, whether it is to update CSV data or not"
 4604      6B696E67 
 4604      20746865 
 4604      20636F6E 
 4604      74726F6C 
 4605 1e91 00000000 		.align 8
 4605      000000
 4606              	.LC241:
 4607 1e98 436F6E74 		.string	"Controlling signal is to update the CSV data"
 4607      726F6C6C 
 4607      696E6720 
 4607      7369676E 
 4607      616C2069 
 4608 1ec5 000000   		.align 8
 4609              	.LC242:
 4610 1ec8 52656365 		.string	"Receiving encrypted data from the FPGA to update CSV"
 4610      6976696E 
 4610      6720656E 
 4610      63727970 
 4610      74656420 
 4611 1efd 000000   		.align 8
 4612              	.LC243:
 4613 1f00 456E6372 		.string	"Encrypted Data received successfully from the FPGA, it is as in uint8 format-----"
 4613      79707465 
 4613      64204461 
 4613      74612072 
 4613      65636569 
 4614 1f52 00000000 		.align 8
 4614      0000
 4615              	.LC244:
 4616 1f58 436F6E76 		.string	"Converting uint8 data to binary"
 4616      65727469 
 4616      6E672075 
 4616      696E7438 
 4616      20646174 
 4617              		.align 8
 4618              	.LC245:
 4619 1f78 436F6E76 		.string	"Converted uint8 data to binary, it is as-----"
 4619      65727465 
 4619      64207569 
 4619      6E743820 
 4619      64617461 
 4620              	.LC246:
 4621 1fa6 44656372 		.string	"Decrypting the data"
 4621      79707469 
 4621      6E672074 
 4621      68652064 
 4621      61746100 
 4622 1fba 00000000 		.align 8
 4622      0000
 4623              	.LC247:
 4624 1fc0 44617461 		.string	"Data decrypted successfully, it is as----"
 4624      20646563 
 4624      72797074 
 4624      65642073 
 4624      75636365 
 4625              	.LC248:
 4626 1fea 47657474 		.string	"Getting ready to update CSV"
 4626      696E6720 
 4626      72656164 
 4626      7920746F 
 4626      20757064 
 4627 2006 0000     		.align 8
 4628              	.LC249:
 4629 2008 2D2D2D2D 		.string	"-------------------------UART PART----------------------------"
 4629      2D2D2D2D 
 4629      2D2D2D2D 
 4629      2D2D2D2D 
 4629      2D2D2D2D 
 4630              	.LC250:
 4631 2047 20554152 		.string	" UART Count "
 4631      5420436F 
 4631      756E7420 
 4631      00
 4632              	.LC251:
 4633 2054 57616974 		.string	"Waiting for UART signal "
 4633      696E6720 
 4633      666F7220 
 4633      55415254 
 4633      20736967 
 4634 206d 000000   		.align 8
 4635              	.LC252:
 4636 2070 436F6E74 		.string	"Controlling signal received from UART, it is-----"
 4636      726F6C6C 
 4636      696E6720 
 4636      7369676E 
 4636      616C2072 
 4637 20a2 00000000 		.align 8
 4637      0000
 4638              	.LC253:
 4639 20a8 54686520 		.string	"The information received from FPGA"
 4639      696E666F 
 4639      726D6174 
 4639      696F6E20 
 4639      72656365 
 4640              	.LC254:
 4641 20cb 54686520 		.string	"The x_cord ----->"
 4641      785F636F 
 4641      7264202D 
 4641      2D2D2D2D 
 4641      3E00
 4642              	.LC255:
 4643 20dd 54686520 		.string	"The y_cord ----->"
 4643      795F636F 
 4643      7264202D 
 4643      2D2D2D2D 
 4643      3E00
 4644              	.LC256:
 4645 20ef 54726163 		.string	"Track exists   ---->   "
 4645      6B206578 
 4645      69737473 
 4645      2020202D 
 4645      2D2D2D3E 
 4646              	.LC257:
 4647 2107 25732000 		.string	"%s "
 4648              	.LC258:
 4649 210b 54726163 		.string	"Track ok   ----->   "
 4649      6B206F6B 
 4649      2020202D 
 4649      2D2D2D2D 
 4649      3E202020 
 4650              	.LC259:
 4651 2120 44697265 		.string	"Direction   ----->   "
 4651      6374696F 
 4651      6E202020 
 4651      2D2D2D2D 
 4651      2D3E2020 
 4652              	.LC260:
 4653 2136 4E657874 		.string	"Next signal   ------>    "
 4653      20736967 
 4653      6E616C20 
 4653      20202D2D 
 4653      2D2D2D2D 
 4654              		.align 8
 4655              	.LC261:
 4656 2150 4F766572 		.string	"Overwriting the CSV file with the updated information"
 4656      77726974 
 4656      696E6720 
 4656      74686520 
 4656      43535620 
 4657 2186 0000     		.align 8
 4658              	.LC262:
 4659 2188 43535620 		.string	"CSV file overwritten successfully"
 4659      66696C65 
 4659      206F7665 
 4659      72777269 
 4659      7474656E 
 4660              	.LC263:
 4661 21aa 25730A00 		.string	"%s\n"
 4662              		.text
 4663              		.globl	main
 4665              	main:
 4666              	.LFB23:
 964:main_final_with_sync.c **** 
 965:main_final_with_sync.c **** // void decToBinary(int n, int arr[], int count)
 966:main_final_with_sync.c **** // {
 967:main_final_with_sync.c **** //     int binaryNum[count];
 968:main_final_with_sync.c **** //     for (int i = 0; i < count; ++i)
 969:main_final_with_sync.c **** //       binaryNum[i] = 0;
 970:main_final_with_sync.c **** 
 971:main_final_with_sync.c **** //     int i = 0;
 972:main_final_with_sync.c **** //     while (n > 0) {
 973:main_final_with_sync.c **** //         binaryNum[i] = n % 2;
 974:main_final_with_sync.c **** //         n = n / 2;
 975:main_final_with_sync.c **** //         i++;
 976:main_final_with_sync.c **** //     }
 977:main_final_with_sync.c **** 
 978:main_final_with_sync.c **** //      for (int i=0; i<count; i++)
 979:main_final_with_sync.c **** //         arr[i] = binaryNum[i];
 980:main_final_with_sync.c **** // }
 981:main_final_with_sync.c **** 
 982:main_final_with_sync.c **** //////////////////////////////////////////////////////////////////////////////////
 983:main_final_with_sync.c **** 
 984:main_final_with_sync.c **** 
 985:main_final_with_sync.c **** int main(int argc, char *argv[]) {
 4667              		.loc 1 985 0
 4668              		.cfi_startproc
 4669 30b8 55       		pushq	%rbp
 4670              		.cfi_def_cfa_offset 16
 4671              		.cfi_offset 6, -16
 4672 30b9 4889E5   		movq	%rsp, %rbp
 4673              		.cfi_def_cfa_register 6
 4674 30bc 53       		pushq	%rbx
 4675 30bd 4881EC58 		subq	$3416, %rsp
 4675      0D0000
 4676              		.cfi_offset 3, -24
 4677 30c4 89BDACF2 		movl	%edi, -3412(%rbp)
 4677      FFFF
 4678 30ca 4889B5A0 		movq	%rsi, -3424(%rbp)
 4678      F2FFFF
 4679              		.loc 1 985 0
 4680 30d1 64488B04 		movq	%fs:40, %rax
 4680      25280000 
 4680      00
 4681 30da 488945E8 		movq	%rax, -24(%rbp)
 4682 30de 31C0     		xorl	%eax, %eax
 986:main_final_with_sync.c **** 	ReturnCode retVal = FLP_SUCCESS, pStatus;
 4683              		.loc 1 986 0
 4684 30e0 C785BCF2 		movl	$0, -3396(%rbp)
 4684      FFFF0000 
 4684      0000
 987:main_final_with_sync.c **** 	struct arg_str *ivpOpt = arg_str0("i", "ivp", "<VID:PID>", "            vendor ID and product ID (
 4685              		.loc 1 987 0
 4686 30ea B9000000 		movl	$.LC53, %ecx
 4686      00
 4687 30ef BA000000 		movl	$.LC54, %edx
 4687      00
 4688 30f4 BE000000 		movl	$.LC55, %esi
 4688      00
 4689 30f9 BF000000 		movl	$.LC56, %edi
 4689      00
 4690 30fe E8000000 		call	arg_str0
 4690      00
 4691 3103 48898520 		movq	%rax, -3040(%rbp)
 4691      F4FFFF
 988:main_final_with_sync.c **** 	struct arg_str *vpOpt = arg_str1("v", "vp", "<VID:PID[:DID]>", "       VID, PID and opt. dev ID (e
 4692              		.loc 1 988 0
 4693 310a B9000000 		movl	$.LC57, %ecx
 4693      00
 4694 310f BA000000 		movl	$.LC58, %edx
 4694      00
 4695 3114 BE000000 		movl	$.LC59, %esi
 4695      00
 4696 3119 BF000000 		movl	$.LC60, %edi
 4696      00
 4697 311e E8000000 		call	arg_str1
 4697      00
 4698 3123 48898528 		movq	%rax, -3032(%rbp)
 4698      F4FFFF
 989:main_final_with_sync.c **** 	struct arg_str *fwOpt = arg_str0("f", "fw", "<firmware.hex>", "        firmware to RAM-load (or us
 4699              		.loc 1 989 0
 4700 312a B9000000 		movl	$.LC61, %ecx
 4700      00
 4701 312f BA000000 		movl	$.LC62, %edx
 4701      00
 4702 3134 BE000000 		movl	$.LC63, %esi
 4702      00
 4703 3139 BF000000 		movl	$.LC64, %edi
 4703      00
 4704 313e E8000000 		call	arg_str0
 4704      00
 4705 3143 48898530 		movq	%rax, -3024(%rbp)
 4705      F4FFFF
 990:main_final_with_sync.c **** 	struct arg_str *portOpt = arg_str0("d", "ports", "<bitCfg[,bitCfg]*>", " read/write digital ports 
 4706              		.loc 1 990 0
 4707 314a B9000000 		movl	$.LC65, %ecx
 4707      00
 4708 314f BA000000 		movl	$.LC66, %edx
 4708      00
 4709 3154 BE000000 		movl	$.LC67, %esi
 4709      00
 4710 3159 BF000000 		movl	$.LC68, %edi
 4710      00
 4711 315e E8000000 		call	arg_str0
 4711      00
 4712 3163 48898538 		movq	%rax, -3016(%rbp)
 4712      F4FFFF
 991:main_final_with_sync.c **** 	struct arg_str *queryOpt = arg_str0("q", "query", "<jtagBits>", "         query the JTAG chain");
 4713              		.loc 1 991 0
 4714 316a B9000000 		movl	$.LC69, %ecx
 4714      00
 4715 316f BA000000 		movl	$.LC70, %edx
 4715      00
 4716 3174 BE000000 		movl	$.LC71, %esi
 4716      00
 4717 3179 BF000000 		movl	$.LC72, %edi
 4717      00
 4718 317e E8000000 		call	arg_str0
 4718      00
 4719 3183 48898540 		movq	%rax, -3008(%rbp)
 4719      F4FFFF
 992:main_final_with_sync.c **** 	struct arg_str *progOpt = arg_str0("p", "program", "<config>", "         program a device");
 4720              		.loc 1 992 0
 4721 318a B9000000 		movl	$.LC73, %ecx
 4721      00
 4722 318f BA000000 		movl	$.LC74, %edx
 4722      00
 4723 3194 BE000000 		movl	$.LC75, %esi
 4723      00
 4724 3199 BF000000 		movl	$.LC76, %edi
 4724      00
 4725 319e E8000000 		call	arg_str0
 4725      00
 4726 31a3 48898548 		movq	%rax, -3000(%rbp)
 4726      F4FFFF
 993:main_final_with_sync.c **** 	struct arg_uint *conOpt = arg_uint0("c", "conduit", "<conduit>", "        which comm conduit to ch
 4727              		.loc 1 993 0
 4728 31aa B9000000 		movl	$.LC77, %ecx
 4728      00
 4729 31af BA000000 		movl	$.LC78, %edx
 4729      00
 4730 31b4 BE000000 		movl	$.LC79, %esi
 4730      00
 4731 31b9 BF000000 		movl	$.LC80, %edi
 4731      00
 4732 31be E8000000 		call	arg_uint0
 4732      00
 4733 31c3 48898550 		movq	%rax, -2992(%rbp)
 4733      F4FFFF
 994:main_final_with_sync.c **** 	struct arg_str *actOpt = arg_str0("a", "action", "<actionString>", "    a series of CommFPGA actio
 4734              		.loc 1 994 0
 4735 31ca B9000000 		movl	$.LC81, %ecx
 4735      00
 4736 31cf BA000000 		movl	$.LC82, %edx
 4736      00
 4737 31d4 BE000000 		movl	$.LC83, %esi
 4737      00
 4738 31d9 BF000000 		movl	$.LC84, %edi
 4738      00
 4739 31de E8000000 		call	arg_str0
 4739      00
 4740 31e3 48898558 		movq	%rax, -2984(%rbp)
 4740      F4FFFF
 995:main_final_with_sync.c **** 	struct arg_lit *doworkOpt = arg_lit0("z", "some stuff" ,"                 some other stuff");
 4741              		.loc 1 995 0
 4742 31ea BA000000 		movl	$.LC85, %edx
 4742      00
 4743 31ef BE000000 		movl	$.LC86, %esi
 4743      00
 4744 31f4 BF000000 		movl	$.LC87, %edi
 4744      00
 4745 31f9 E8000000 		call	arg_lit0
 4745      00
 4746 31fe 48898560 		movq	%rax, -2976(%rbp)
 4746      F4FFFF
 996:main_final_with_sync.c **** 	struct arg_lit *shellOpt  = arg_lit0("s", "shell", "                    start up an interactive Co
 4747              		.loc 1 996 0
 4748 3205 BA000000 		movl	$.LC88, %edx
 4748      00
 4749 320a BE000000 		movl	$.LC89, %esi
 4749      00
 4750 320f BF000000 		movl	$.LC90, %edi
 4750      00
 4751 3214 E8000000 		call	arg_lit0
 4751      00
 4752 3219 48898568 		movq	%rax, -2968(%rbp)
 4752      F4FFFF
 997:main_final_with_sync.c **** 	struct arg_lit *benOpt  = arg_lit0("b", "benchmark", "                enable benchmarking & chefck
 4753              		.loc 1 997 0
 4754 3220 BA000000 		movl	$.LC91, %edx
 4754      00
 4755 3225 BE000000 		movl	$.LC92, %esi
 4755      00
 4756 322a BF000000 		movl	$.LC93, %edi
 4756      00
 4757 322f E8000000 		call	arg_lit0
 4757      00
 4758 3234 48898570 		movq	%rax, -2960(%rbp)
 4758      F4FFFF
 998:main_final_with_sync.c **** 	struct arg_lit *rstOpt  = arg_lit0("r", "reset", "                    reset the bulk endpoints");
 4759              		.loc 1 998 0
 4760 323b BA000000 		movl	$.LC94, %edx
 4760      00
 4761 3240 BE000000 		movl	$.LC95, %esi
 4761      00
 4762 3245 BF000000 		movl	$.LC6, %edi
 4762      00
 4763 324a E8000000 		call	arg_lit0
 4763      00
 4764 324f 48898578 		movq	%rax, -2952(%rbp)
 4764      F4FFFF
 999:main_final_with_sync.c **** 	struct arg_str *dumpOpt = arg_str0("l", "dumploop", "<ch:file.bin>", "   write data from channel c
 4765              		.loc 1 999 0
 4766 3256 B9000000 		movl	$.LC96, %ecx
 4766      00
 4767 325b BA000000 		movl	$.LC97, %edx
 4767      00
 4768 3260 BE000000 		movl	$.LC98, %esi
 4768      00
 4769 3265 BF000000 		movl	$.LC99, %edi
 4769      00
 4770 326a E8000000 		call	arg_str0
 4770      00
 4771 326f 48898580 		movq	%rax, -2944(%rbp)
 4771      F4FFFF
1000:main_final_with_sync.c **** 	struct arg_lit *helpOpt  = arg_lit0("h", "help", "                     print this help and exit");
 4772              		.loc 1 1000 0
 4773 3276 BA000000 		movl	$.LC100, %edx
 4773      00
 4774 327b BE000000 		movl	$.LC101, %esi
 4774      00
 4775 3280 BF000000 		movl	$.LC102, %edi
 4775      00
 4776 3285 E8000000 		call	arg_lit0
 4776      00
 4777 328a 48898588 		movq	%rax, -2936(%rbp)
 4777      F4FFFF
1001:main_final_with_sync.c **** 	struct arg_str *eepromOpt  = arg_str0(NULL, "eeprom", "<std|fw.hex|fw.iic>", "   write firmware to
 4778              		.loc 1 1001 0
 4779 3291 B9000000 		movl	$.LC103, %ecx
 4779      00
 4780 3296 BA000000 		movl	$.LC104, %edx
 4780      00
 4781 329b BE000000 		movl	$.LC105, %esi
 4781      00
 4782 32a0 BF000000 		movl	$0, %edi
 4782      00
 4783 32a5 E8000000 		call	arg_str0
 4783      00
 4784 32aa 48898590 		movq	%rax, -2928(%rbp)
 4784      F4FFFF
1002:main_final_with_sync.c **** 	struct arg_str *backupOpt  = arg_str0(NULL, "backup", "<kbitSize:fw.iic>", "     backup FX2's EEPR
 4785              		.loc 1 1002 0
 4786 32b1 B9000000 		movl	$.LC106, %ecx
 4786      00
 4787 32b6 BA000000 		movl	$.LC107, %edx
 4787      00
 4788 32bb BE000000 		movl	$.LC108, %esi
 4788      00
 4789 32c0 BF000000 		movl	$0, %edi
 4789      00
 4790 32c5 E8000000 		call	arg_str0
 4790      00
 4791 32ca 48898598 		movq	%rax, -2920(%rbp)
 4791      F4FFFF
1003:main_final_with_sync.c **** 	////////////////////////////////////////////////////////////////////////////////////
1004:main_final_with_sync.c ****     ////////////////////////////////////////////////////////////////////////////////////
1005:main_final_with_sync.c **** 	struct arg_end *endOpt   = arg_end(20);
 4792              		.loc 1 1005 0
 4793 32d1 BF140000 		movl	$20, %edi
 4793      00
 4794 32d6 E8000000 		call	arg_end
 4794      00
 4795 32db 488985A0 		movq	%rax, -2912(%rbp)
 4795      F4FFFF
1006:main_final_with_sync.c **** 
1007:main_final_with_sync.c **** 
1008:main_final_with_sync.c **** 
1009:main_final_with_sync.c **** 
1010:main_final_with_sync.c **** 	void *argTable[] = {
 4796              		.loc 1 1010 0
 4797 32e2 488B8520 		movq	-3040(%rbp), %rax
 4797      F4FFFF
 4798 32e9 488985D0 		movq	%rax, -560(%rbp)
 4798      FDFFFF
 4799 32f0 488B8528 		movq	-3032(%rbp), %rax
 4799      F4FFFF
 4800 32f7 488985D8 		movq	%rax, -552(%rbp)
 4800      FDFFFF
 4801 32fe 488B8530 		movq	-3024(%rbp), %rax
 4801      F4FFFF
 4802 3305 488985E0 		movq	%rax, -544(%rbp)
 4802      FDFFFF
 4803 330c 488B8538 		movq	-3016(%rbp), %rax
 4803      F4FFFF
 4804 3313 488985E8 		movq	%rax, -536(%rbp)
 4804      FDFFFF
 4805 331a 488B8540 		movq	-3008(%rbp), %rax
 4805      F4FFFF
 4806 3321 488985F0 		movq	%rax, -528(%rbp)
 4806      FDFFFF
 4807 3328 488B8548 		movq	-3000(%rbp), %rax
 4807      F4FFFF
 4808 332f 488985F8 		movq	%rax, -520(%rbp)
 4808      FDFFFF
 4809 3336 488B8550 		movq	-2992(%rbp), %rax
 4809      F4FFFF
 4810 333d 48898500 		movq	%rax, -512(%rbp)
 4810      FEFFFF
 4811 3344 488B8558 		movq	-2984(%rbp), %rax
 4811      F4FFFF
 4812 334b 48898508 		movq	%rax, -504(%rbp)
 4812      FEFFFF
 4813 3352 488B8568 		movq	-2968(%rbp), %rax
 4813      F4FFFF
 4814 3359 48898510 		movq	%rax, -496(%rbp)
 4814      FEFFFF
 4815 3360 488B8570 		movq	-2960(%rbp), %rax
 4815      F4FFFF
 4816 3367 48898518 		movq	%rax, -488(%rbp)
 4816      FEFFFF
 4817 336e 488B8578 		movq	-2952(%rbp), %rax
 4817      F4FFFF
 4818 3375 48898520 		movq	%rax, -480(%rbp)
 4818      FEFFFF
 4819 337c 488B8580 		movq	-2944(%rbp), %rax
 4819      F4FFFF
 4820 3383 48898528 		movq	%rax, -472(%rbp)
 4820      FEFFFF
 4821 338a 488B8588 		movq	-2936(%rbp), %rax
 4821      F4FFFF
 4822 3391 48898530 		movq	%rax, -464(%rbp)
 4822      FEFFFF
 4823 3398 488B8590 		movq	-2928(%rbp), %rax
 4823      F4FFFF
 4824 339f 48898538 		movq	%rax, -456(%rbp)
 4824      FEFFFF
 4825 33a6 488B8598 		movq	-2920(%rbp), %rax
 4825      F4FFFF
 4826 33ad 48898540 		movq	%rax, -448(%rbp)
 4826      FEFFFF
 4827 33b4 488B8560 		movq	-2976(%rbp), %rax
 4827      F4FFFF
 4828 33bb 48898548 		movq	%rax, -440(%rbp)
 4828      FEFFFF
 4829 33c2 488B85A0 		movq	-2912(%rbp), %rax
 4829      F4FFFF
 4830 33c9 48898550 		movq	%rax, -432(%rbp)
 4830      FEFFFF
1011:main_final_with_sync.c **** 		ivpOpt, vpOpt, fwOpt, portOpt, queryOpt, progOpt, conOpt, actOpt,
1012:main_final_with_sync.c **** 		shellOpt, benOpt, rstOpt, dumpOpt, helpOpt, eepromOpt, backupOpt, doworkOpt, endOpt
1013:main_final_with_sync.c **** 	};
1014:main_final_with_sync.c **** 	const char *progName = "flcli";
 4831              		.loc 1 1014 0
 4832 33d0 48C785A8 		movq	$.LC109, -2904(%rbp)
 4832      F4FFFF00 
 4832      000000
1015:main_final_with_sync.c **** 	int numErrors;
1016:main_final_with_sync.c **** 	struct FLContext *handle = NULL;
 4833              		.loc 1 1016 0
 4834 33db 48C785E8 		movq	$0, -3096(%rbp)
 4834      F3FFFF00 
 4834      000000
1017:main_final_with_sync.c **** 	FLStatus fStatus;
1018:main_final_with_sync.c **** 	const char *error = NULL;
 4835              		.loc 1 1018 0
 4836 33e6 48C785F0 		movq	$0, -3088(%rbp)
 4836      F3FFFF00 
 4836      000000
1019:main_final_with_sync.c **** 	const char *ivp = NULL;
 4837              		.loc 1 1019 0
 4838 33f1 48C785B0 		movq	$0, -2896(%rbp)
 4838      F4FFFF00 
 4838      000000
1020:main_final_with_sync.c **** 	const char *vp = NULL;
 4839              		.loc 1 1020 0
 4840 33fc 48C785B8 		movq	$0, -2888(%rbp)
 4840      F4FFFF00 
 4840      000000
1021:main_final_with_sync.c **** 	bool isNeroCapable, isCommCapable;
1022:main_final_with_sync.c **** 	uint32 numDevices, scanChain[16], i;
1023:main_final_with_sync.c **** 	const char *line = NULL;
 4841              		.loc 1 1023 0
 4842 3407 48C78518 		movq	$0, -3048(%rbp)
 4842      F4FFFF00 
 4842      000000
1024:main_final_with_sync.c **** 	uint8 conduit = 0x01;
 4843              		.loc 1 1024 0
 4844 3412 C685B3F2 		movb	$1, -3405(%rbp)
 4844      FFFF01
1025:main_final_with_sync.c **** 
1026:main_final_with_sync.c **** 	if ( arg_nullcheck(argTable) != 0 ) {
 4845              		.loc 1 1026 0
 4846 3419 488D85D0 		leaq	-560(%rbp), %rax
 4846      FDFFFF
 4847 3420 4889C7   		movq	%rax, %rdi
 4848 3423 E8000000 		call	arg_nullcheck
 4848      00
 4849 3428 85C0     		testl	%eax, %eax
 4850 342a 742F     		je	.L229
1027:main_final_with_sync.c **** 		fprintf(stderr, "%s: insufficient memory\n", progName);
 4851              		.loc 1 1027 0
 4852 342c 488B0500 		movq	stderr(%rip), %rax
 4852      000000
 4853 3433 488B95A8 		movq	-2904(%rbp), %rdx
 4853      F4FFFF
 4854 343a BE000000 		movl	$.LC110, %esi
 4854      00
 4855 343f 4889C7   		movq	%rax, %rdi
 4856 3442 B8000000 		movl	$0, %eax
 4856      00
 4857 3447 E8000000 		call	fprintf
 4857      00
1028:main_final_with_sync.c **** 		FAIL(1, cleanup);
 4858              		.loc 1 1028 0
 4859 344c C785BCF2 		movl	$1, -3396(%rbp)
 4859      FFFF0100 
 4859      0000
 4860 3456 E9BD4000 		jmp	.L230
 4860      00
 4861              	.L229:
1029:main_final_with_sync.c **** 	}
1030:main_final_with_sync.c **** 
1031:main_final_with_sync.c **** 	numErrors = arg_parse(argc, argv, argTable);
 4862              		.loc 1 1031 0
 4863 345b 488D95D0 		leaq	-560(%rbp), %rdx
 4863      FDFFFF
 4864 3462 488B8DA0 		movq	-3424(%rbp), %rcx
 4864      F2FFFF
 4865 3469 8B85ACF2 		movl	-3412(%rbp), %eax
 4865      FFFF
 4866 346f 4889CE   		movq	%rcx, %rsi
 4867 3472 89C7     		movl	%eax, %edi
 4868 3474 E8000000 		call	arg_parse
 4868      00
 4869 3479 8985A8F3 		movl	%eax, -3160(%rbp)
 4869      FFFF
1032:main_final_with_sync.c **** 
1033:main_final_with_sync.c **** 	if ( helpOpt->count > 0 ) {
 4870              		.loc 1 1033 0
 4871 347f 488B8588 		movq	-2936(%rbp), %rax
 4871      F4FFFF
 4872 3486 8B4060   		movl	96(%rax), %eax
 4873 3489 85C0     		testl	%eax, %eax
 4874 348b 7E6E     		jle	.L231
1034:main_final_with_sync.c **** 		printf("FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s", p
 4875              		.loc 1 1034 0
 4876 348d 488B85A8 		movq	-2904(%rbp), %rax
 4876      F4FFFF
 4877 3494 4889C6   		movq	%rax, %rsi
 4878 3497 BF000000 		movl	$.LC111, %edi
 4878      00
 4879 349c B8000000 		movl	$0, %eax
 4879      00
 4880 34a1 E8000000 		call	printf
 4880      00
1035:main_final_with_sync.c **** 		arg_print_syntax(stdout, argTable, "\n");
 4881              		.loc 1 1035 0
 4882 34a6 488B0500 		movq	stdout(%rip), %rax
 4882      000000
 4883 34ad 488D8DD0 		leaq	-560(%rbp), %rcx
 4883      FDFFFF
 4884 34b4 BA000000 		movl	$.LC112, %edx
 4884      00
 4885 34b9 4889CE   		movq	%rcx, %rsi
 4886 34bc 4889C7   		movq	%rax, %rdi
 4887 34bf E8000000 		call	arg_print_syntax
 4887      00
1036:main_final_with_sync.c **** 		printf("\nInteract with an FPGALink device.\n\n");
 4888              		.loc 1 1036 0
 4889 34c4 BF000000 		movl	$.LC113, %edi
 4889      00
 4890 34c9 E8000000 		call	puts
 4890      00
1037:main_final_with_sync.c **** 		arg_print_glossary(stdout, argTable,"  %-10s %s\n");
 4891              		.loc 1 1037 0
 4892 34ce 488B0500 		movq	stdout(%rip), %rax
 4892      000000
 4893 34d5 488D8DD0 		leaq	-560(%rbp), %rcx
 4893      FDFFFF
 4894 34dc BA000000 		movl	$.LC114, %edx
 4894      00
 4895 34e1 4889CE   		movq	%rcx, %rsi
 4896 34e4 4889C7   		movq	%rax, %rdi
 4897 34e7 E8000000 		call	arg_print_glossary
 4897      00
1038:main_final_with_sync.c **** 		FAIL(FLP_SUCCESS, cleanup);
 4898              		.loc 1 1038 0
 4899 34ec C785BCF2 		movl	$0, -3396(%rbp)
 4899      FFFF0000 
 4899      0000
 4900 34f6 E91D4000 		jmp	.L230
 4900      00
 4901              	.L231:
1039:main_final_with_sync.c **** 	}
1040:main_final_with_sync.c **** 
1041:main_final_with_sync.c **** 	if ( numErrors > 0 ) {
 4902              		.loc 1 1041 0
 4903 34fb 83BDA8F3 		cmpl	$0, -3160(%rbp)
 4903      FFFF00
 4904 3502 7E4F     		jle	.L232
1042:main_final_with_sync.c **** 		arg_print_errors(stdout, endOpt, progName);
 4905              		.loc 1 1042 0
 4906 3504 488B0500 		movq	stdout(%rip), %rax
 4906      000000
 4907 350b 488B95A8 		movq	-2904(%rbp), %rdx
 4907      F4FFFF
 4908 3512 488B8DA0 		movq	-2912(%rbp), %rcx
 4908      F4FFFF
 4909 3519 4889CE   		movq	%rcx, %rsi
 4910 351c 4889C7   		movq	%rax, %rdi
 4911 351f E8000000 		call	arg_print_errors
 4911      00
1043:main_final_with_sync.c **** 		fprintf(stderr, "Try '%s --help' for more information.\n", progName);
 4912              		.loc 1 1043 0
 4913 3524 488B0500 		movq	stderr(%rip), %rax
 4913      000000
 4914 352b 488B95A8 		movq	-2904(%rbp), %rdx
 4914      F4FFFF
 4915 3532 BE000000 		movl	$.LC115, %esi
 4915      00
 4916 3537 4889C7   		movq	%rax, %rdi
 4917 353a B8000000 		movl	$0, %eax
 4917      00
 4918 353f E8000000 		call	fprintf
 4918      00
1044:main_final_with_sync.c **** 		FAIL(FLP_ARGS, cleanup);
 4919              		.loc 1 1044 0
 4920 3544 C785BCF2 		movl	$12, -3396(%rbp)
 4920      FFFF0C00 
 4920      0000
 4921 354e E9C53F00 		jmp	.L230
 4921      00
 4922              	.L232:
1045:main_final_with_sync.c **** 	}
1046:main_final_with_sync.c **** 
1047:main_final_with_sync.c **** 	fStatus = flInitialise(0, &error);
 4923              		.loc 1 1047 0
 4924 3553 488D85F0 		leaq	-3088(%rbp), %rax
 4924      F3FFFF
 4925 355a 4889C6   		movq	%rax, %rsi
 4926 355d BF000000 		movl	$0, %edi
 4926      00
 4927 3562 E8000000 		call	flInitialise
 4927      00
 4928 3567 8985C0F2 		movl	%eax, -3392(%rbp)
 4928      FFFF
1048:main_final_with_sync.c **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4929              		.loc 1 1048 0
 4930 356d 83BDC0F2 		cmpl	$0, -3392(%rbp)
 4930      FFFF00
 4931 3574 740F     		je	.L233
 4932              		.loc 1 1048 0 is_stmt 0 discriminator 1
 4933 3576 C785BCF2 		movl	$1, -3396(%rbp)
 4933      FFFF0100 
 4933      0000
 4934 3580 E9933F00 		jmp	.L230
 4934      00
 4935              	.L233:
1049:main_final_with_sync.c **** 
1050:main_final_with_sync.c **** 	vp = vpOpt->sval[0];
 4936              		.loc 1 1050 0 is_stmt 1
 4937 3585 488B8528 		movq	-3032(%rbp), %rax
 4937      F4FFFF
 4938 358c 488B4068 		movq	104(%rax), %rax
 4939 3590 488B00   		movq	(%rax), %rax
 4940 3593 488985B8 		movq	%rax, -2888(%rbp)
 4940      F4FFFF
1051:main_final_with_sync.c **** 
1052:main_final_with_sync.c **** 	printf("Attempting to open connection to FPGALink device %s...\n", vp);
 4941              		.loc 1 1052 0
 4942 359a 488B85B8 		movq	-2888(%rbp), %rax
 4942      F4FFFF
 4943 35a1 4889C6   		movq	%rax, %rsi
 4944 35a4 BF000000 		movl	$.LC116, %edi
 4944      00
 4945 35a9 B8000000 		movl	$0, %eax
 4945      00
 4946 35ae E8000000 		call	printf
 4946      00
1053:main_final_with_sync.c **** 	fStatus = flOpen(vp, &handle, NULL);
 4947              		.loc 1 1053 0
 4948 35b3 488D8DE8 		leaq	-3096(%rbp), %rcx
 4948      F3FFFF
 4949 35ba 488B85B8 		movq	-2888(%rbp), %rax
 4949      F4FFFF
 4950 35c1 BA000000 		movl	$0, %edx
 4950      00
 4951 35c6 4889CE   		movq	%rcx, %rsi
 4952 35c9 4889C7   		movq	%rax, %rdi
 4953 35cc E8000000 		call	flOpen
 4953      00
 4954 35d1 8985C0F2 		movl	%eax, -3392(%rbp)
 4954      FFFF
1054:main_final_with_sync.c **** 	if ( fStatus ) {
 4955              		.loc 1 1054 0
 4956 35d7 83BDC0F2 		cmpl	$0, -3392(%rbp)
 4956      FFFF00
 4957 35de 0F842502 		je	.L234
 4957      0000
1055:main_final_with_sync.c **** 		if ( ivpOpt->count ) {
 4958              		.loc 1 1055 0
 4959 35e4 488B8520 		movq	-3040(%rbp), %rax
 4959      F4FFFF
 4960 35eb 8B4060   		movl	96(%rax), %eax
 4961 35ee 85C0     		testl	%eax, %eax
 4962 35f0 0F84E401 		je	.L235
 4962      0000
 4963              	.LBB44:
1056:main_final_with_sync.c **** 			int count = 60;
 4964              		.loc 1 1056 0
 4965 35f6 C785C8F2 		movl	$60, -3384(%rbp)
 4965      FFFF3C00 
 4965      0000
1057:main_final_with_sync.c **** 			uint8 flag;
1058:main_final_with_sync.c **** 			ivp = ivpOpt->sval[0];
 4966              		.loc 1 1058 0
 4967 3600 488B8520 		movq	-3040(%rbp), %rax
 4967      F4FFFF
 4968 3607 488B4068 		movq	104(%rax), %rax
 4969 360b 488B00   		movq	(%rax), %rax
 4970 360e 488985B0 		movq	%rax, -2896(%rbp)
 4970      F4FFFF
1059:main_final_with_sync.c **** 			printf("Loading firmware into %s...\n", ivp);
 4971              		.loc 1 1059 0
 4972 3615 488B85B0 		movq	-2896(%rbp), %rax
 4972      F4FFFF
 4973 361c 4889C6   		movq	%rax, %rsi
 4974 361f BF000000 		movl	$.LC117, %edi
 4974      00
 4975 3624 B8000000 		movl	$0, %eax
 4975      00
 4976 3629 E8000000 		call	printf
 4976      00
1060:main_final_with_sync.c **** 			if ( fwOpt->count ) {
 4977              		.loc 1 1060 0
 4978 362e 488B8530 		movq	-3024(%rbp), %rax
 4978      F4FFFF
 4979 3635 8B4060   		movl	96(%rax), %eax
 4980 3638 85C0     		testl	%eax, %eax
 4981 363a 742F     		je	.L236
1061:main_final_with_sync.c **** 				fStatus = flLoadCustomFirmware(ivp, fwOpt->sval[0], &error);
 4982              		.loc 1 1061 0
 4983 363c 488B8530 		movq	-3024(%rbp), %rax
 4983      F4FFFF
 4984 3643 488B4068 		movq	104(%rax), %rax
 4985 3647 488B08   		movq	(%rax), %rcx
 4986 364a 488D95F0 		leaq	-3088(%rbp), %rdx
 4986      F3FFFF
 4987 3651 488B85B0 		movq	-2896(%rbp), %rax
 4987      F4FFFF
 4988 3658 4889CE   		movq	%rcx, %rsi
 4989 365b 4889C7   		movq	%rax, %rdi
 4990 365e E8000000 		call	flLoadCustomFirmware
 4990      00
 4991 3663 8985C0F2 		movl	%eax, -3392(%rbp)
 4991      FFFF
 4992 3669 EB26     		jmp	.L237
 4993              	.L236:
1062:main_final_with_sync.c **** 			} else {
1063:main_final_with_sync.c **** 				fStatus = flLoadStandardFirmware(ivp, vp, &error);
 4994              		.loc 1 1063 0
 4995 366b 488D95F0 		leaq	-3088(%rbp), %rdx
 4995      F3FFFF
 4996 3672 488B8DB8 		movq	-2888(%rbp), %rcx
 4996      F4FFFF
 4997 3679 488B85B0 		movq	-2896(%rbp), %rax
 4997      F4FFFF
 4998 3680 4889CE   		movq	%rcx, %rsi
 4999 3683 4889C7   		movq	%rax, %rdi
 5000 3686 E8000000 		call	flLoadStandardFirmware
 5000      00
 5001 368b 8985C0F2 		movl	%eax, -3392(%rbp)
 5001      FFFF
 5002              	.L237:
1064:main_final_with_sync.c **** 			}
1065:main_final_with_sync.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5003              		.loc 1 1065 0
 5004 3691 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5004      FFFF00
 5005 3698 740F     		je	.L238
 5006              		.loc 1 1065 0 is_stmt 0 discriminator 1
 5007 369a C785BCF2 		movl	$1, -3396(%rbp)
 5007      FFFF0100 
 5007      0000
 5008 36a4 E96F3E00 		jmp	.L230
 5008      00
 5009              	.L238:
1066:main_final_with_sync.c **** 			
1067:main_final_with_sync.c **** 			printf("Awaiting renumeration");
 5010              		.loc 1 1067 0 is_stmt 1
 5011 36a9 BF000000 		movl	$.LC118, %edi
 5011      00
 5012 36ae B8000000 		movl	$0, %eax
 5012      00
 5013 36b3 E8000000 		call	printf
 5013      00
1068:main_final_with_sync.c **** 			flSleep(1000);
 5014              		.loc 1 1068 0
 5015 36b8 BFE80300 		movl	$1000, %edi
 5015      00
 5016 36bd E8000000 		call	flSleep
 5016      00
 5017              	.L242:
1069:main_final_with_sync.c **** 			do {
1070:main_final_with_sync.c **** 				printf(".");
 5018              		.loc 1 1070 0
 5019 36c2 BF2E0000 		movl	$46, %edi
 5019      00
 5020 36c7 E8000000 		call	putchar
 5020      00
1071:main_final_with_sync.c **** 				fflush(stdout);
 5021              		.loc 1 1071 0
 5022 36cc 488B0500 		movq	stdout(%rip), %rax
 5022      000000
 5023 36d3 4889C7   		movq	%rax, %rdi
 5024 36d6 E8000000 		call	fflush
 5024      00
1072:main_final_with_sync.c **** 				fStatus = flIsDeviceAvailable(vp, &flag, &error);
 5025              		.loc 1 1072 0
 5026 36db 488D95F0 		leaq	-3088(%rbp), %rdx
 5026      F3FFFF
 5027 36e2 488D8D10 		leaq	-3056(%rbp), %rcx
 5027      F4FFFF
 5028 36e9 488B85B8 		movq	-2888(%rbp), %rax
 5028      F4FFFF
 5029 36f0 4889CE   		movq	%rcx, %rsi
 5030 36f3 4889C7   		movq	%rax, %rdi
 5031 36f6 E8000000 		call	flIsDeviceAvailable
 5031      00
 5032 36fb 8985C0F2 		movl	%eax, -3392(%rbp)
 5032      FFFF
1073:main_final_with_sync.c **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5033              		.loc 1 1073 0
 5034 3701 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5034      FFFF00
 5035 3708 740F     		je	.L240
 5036              		.loc 1 1073 0 is_stmt 0 discriminator 1
 5037 370a C785BCF2 		movl	$1, -3396(%rbp)
 5037      FFFF0100 
 5037      0000
 5038 3714 E9FF3D00 		jmp	.L230
 5038      00
 5039              	.L240:
1074:main_final_with_sync.c **** 				flSleep(250);
 5040              		.loc 1 1074 0 is_stmt 1
 5041 3719 BFFA0000 		movl	$250, %edi
 5041      00
 5042 371e E8000000 		call	flSleep
 5042      00
1075:main_final_with_sync.c **** 				count--;
 5043              		.loc 1 1075 0
 5044 3723 83ADC8F2 		subl	$1, -3384(%rbp)
 5044      FFFF01
1076:main_final_with_sync.c **** 			} while ( !flag && count );
 5045              		.loc 1 1076 0
 5046 372a 0FB68510 		movzbl	-3056(%rbp), %eax
 5046      F4FFFF
 5047 3731 84C0     		testb	%al, %al
 5048 3733 7509     		jne	.L241
 5049              		.loc 1 1076 0 is_stmt 0 discriminator 1
 5050 3735 83BDC8F2 		cmpl	$0, -3384(%rbp)
 5050      FFFF00
 5051 373c 7584     		jne	.L242
 5052              	.L241:
1077:main_final_with_sync.c **** 			printf("\n");
 5053              		.loc 1 1077 0 is_stmt 1
 5054 373e BF0A0000 		movl	$10, %edi
 5054      00
 5055 3743 E8000000 		call	putchar
 5055      00
1078:main_final_with_sync.c **** 			if ( !flag ) {
 5056              		.loc 1 1078 0
 5057 3748 0FB68510 		movzbl	-3056(%rbp), %eax
 5057      F4FFFF
 5058 374f 84C0     		testb	%al, %al
 5059 3751 752F     		jne	.L243
1079:main_final_with_sync.c **** 				fprintf(stderr, "FPGALink device did not renumerate properly as %s\n", vp);
 5060              		.loc 1 1079 0
 5061 3753 488B0500 		movq	stderr(%rip), %rax
 5061      000000
 5062 375a 488B95B8 		movq	-2888(%rbp), %rdx
 5062      F4FFFF
 5063 3761 BE000000 		movl	$.LC119, %esi
 5063      00
 5064 3766 4889C7   		movq	%rax, %rdi
 5065 3769 B8000000 		movl	$0, %eax
 5065      00
 5066 376e E8000000 		call	fprintf
 5066      00
1080:main_final_with_sync.c **** 				FAIL(FLP_LIBERR, cleanup);
 5067              		.loc 1 1080 0
 5068 3773 C785BCF2 		movl	$1, -3396(%rbp)
 5068      FFFF0100 
 5068      0000
 5069 377d E9963D00 		jmp	.L230
 5069      00
 5070              	.L243:
1081:main_final_with_sync.c **** 			}
1082:main_final_with_sync.c **** 
1083:main_final_with_sync.c **** 			printf("Attempting to open connection to FPGLink device %s again...\n", vp);
 5071              		.loc 1 1083 0
 5072 3782 488B85B8 		movq	-2888(%rbp), %rax
 5072      F4FFFF
 5073 3789 4889C6   		movq	%rax, %rsi
 5074 378c BF000000 		movl	$.LC120, %edi
 5074      00
 5075 3791 B8000000 		movl	$0, %eax
 5075      00
 5076 3796 E8000000 		call	printf
 5076      00
1084:main_final_with_sync.c **** 			fStatus = flOpen(vp, &handle, &error);
 5077              		.loc 1 1084 0
 5078 379b 488D95F0 		leaq	-3088(%rbp), %rdx
 5078      F3FFFF
 5079 37a2 488D8DE8 		leaq	-3096(%rbp), %rcx
 5079      F3FFFF
 5080 37a9 488B85B8 		movq	-2888(%rbp), %rax
 5080      F4FFFF
 5081 37b0 4889CE   		movq	%rcx, %rsi
 5082 37b3 4889C7   		movq	%rax, %rdi
 5083 37b6 E8000000 		call	flOpen
 5083      00
 5084 37bb 8985C0F2 		movl	%eax, -3392(%rbp)
 5084      FFFF
1085:main_final_with_sync.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5085              		.loc 1 1085 0
 5086 37c1 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5086      FFFF00
 5087 37c8 743F     		je	.L234
 5088              		.loc 1 1085 0 is_stmt 0 discriminator 1
 5089 37ca C785BCF2 		movl	$1, -3396(%rbp)
 5089      FFFF0100 
 5089      0000
 5090 37d4 90       		nop
 5091 37d5 E93E3D00 		jmp	.L230
 5091      00
 5092              	.L235:
 5093              	.LBE44:
1086:main_final_with_sync.c **** 		} else {
1087:main_final_with_sync.c **** 			fprintf(stderr, "Could not open FPGALink device at %s and no initial VID:PID was supplied\n", vp
 5094              		.loc 1 1087 0 is_stmt 1
 5095 37da 488B0500 		movq	stderr(%rip), %rax
 5095      000000
 5096 37e1 488B95B8 		movq	-2888(%rbp), %rdx
 5096      F4FFFF
 5097 37e8 BE000000 		movl	$.LC121, %esi
 5097      00
 5098 37ed 4889C7   		movq	%rax, %rdi
 5099 37f0 B8000000 		movl	$0, %eax
 5099      00
 5100 37f5 E8000000 		call	fprintf
 5100      00
1088:main_final_with_sync.c **** 			FAIL(FLP_ARGS, cleanup);
 5101              		.loc 1 1088 0
 5102 37fa C785BCF2 		movl	$12, -3396(%rbp)
 5102      FFFF0C00 
 5102      0000
 5103 3804 E90F3D00 		jmp	.L230
 5103      00
 5104              	.L234:
1089:main_final_with_sync.c **** 		}
1090:main_final_with_sync.c **** 	}
1091:main_final_with_sync.c **** 
1092:main_final_with_sync.c **** 	printf(
 5105              		.loc 1 1092 0
 5106 3809 488B85E8 		movq	-3096(%rbp), %rax
 5106      F3FFFF
 5107 3810 4889C7   		movq	%rax, %rdi
 5108 3813 E8000000 		call	flGetFirmwareVersion
 5108      00
 5109 3818 89C3     		movl	%eax, %ebx
1093:main_final_with_sync.c **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
1094:main_final_with_sync.c **** 		vp, flGetFirmwareID(handle), flGetFirmwareVersion(handle)
 5110              		.loc 1 1094 0
 5111 381a 488B85E8 		movq	-3096(%rbp), %rax
 5111      F3FFFF
 5112 3821 4889C7   		movq	%rax, %rdi
 5113 3824 E8000000 		call	flGetFirmwareID
 5113      00
1092:main_final_with_sync.c **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 5114              		.loc 1 1092 0
 5115 3829 0FB7D0   		movzwl	%ax, %edx
 5116 382c 488B85B8 		movq	-2888(%rbp), %rax
 5116      F4FFFF
 5117 3833 89D9     		movl	%ebx, %ecx
 5118 3835 4889C6   		movq	%rax, %rsi
 5119 3838 BF000000 		movl	$.LC122, %edi
 5119      00
 5120 383d B8000000 		movl	$0, %eax
 5120      00
 5121 3842 E8000000 		call	printf
 5121      00
1095:main_final_with_sync.c **** 		);
1096:main_final_with_sync.c **** 
1097:main_final_with_sync.c **** 	if ( eepromOpt->count ) {
 5122              		.loc 1 1097 0
 5123 3847 488B8590 		movq	-2928(%rbp), %rax
 5123      F4FFFF
 5124 384e 8B4060   		movl	96(%rax), %eax
 5125 3851 85C0     		testl	%eax, %eax
 5126 3853 0F84B600 		je	.L245
 5126      0000
1098:main_final_with_sync.c **** 		if ( !strcmp("std", eepromOpt->sval[0]) ) {
 5127              		.loc 1 1098 0
 5128 3859 488B8590 		movq	-2928(%rbp), %rax
 5128      F4FFFF
 5129 3860 488B4068 		movq	104(%rax), %rax
 5130 3864 488B00   		movq	(%rax), %rax
 5131 3867 4889C6   		movq	%rax, %rsi
 5132 386a BF000000 		movl	$.LC123, %edi
 5132      00
 5133 386f E8000000 		call	strcmp
 5133      00
 5134 3874 85C0     		testl	%eax, %eax
 5135 3876 7532     		jne	.L246
1099:main_final_with_sync.c **** 			printf("Writing the standard FPGALink firmware to the FX2's EEPROM...\n");
 5136              		.loc 1 1099 0
 5137 3878 BF000000 		movl	$.LC124, %edi
 5137      00
 5138 387d E8000000 		call	puts
 5138      00
1100:main_final_with_sync.c **** 			fStatus = flFlashStandardFirmware(handle, vp, &error);
 5139              		.loc 1 1100 0
 5140 3882 488B85E8 		movq	-3096(%rbp), %rax
 5140      F3FFFF
 5141 3889 488D95F0 		leaq	-3088(%rbp), %rdx
 5141      F3FFFF
 5142 3890 488B8DB8 		movq	-2888(%rbp), %rcx
 5142      F4FFFF
 5143 3897 4889CE   		movq	%rcx, %rsi
 5144 389a 4889C7   		movq	%rax, %rdi
 5145 389d E8000000 		call	flFlashStandardFirmware
 5145      00
 5146 38a2 8985C0F2 		movl	%eax, -3392(%rbp)
 5146      FFFF
 5147 38a8 EB4D     		jmp	.L247
 5148              	.L246:
1101:main_final_with_sync.c **** 		} else {
1102:main_final_with_sync.c **** 			printf("Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n", eepromOpt->sval[0]);
 5149              		.loc 1 1102 0
 5150 38aa 488B8590 		movq	-2928(%rbp), %rax
 5150      F4FFFF
 5151 38b1 488B4068 		movq	104(%rax), %rax
 5152 38b5 488B00   		movq	(%rax), %rax
 5153 38b8 4889C6   		movq	%rax, %rsi
 5154 38bb BF000000 		movl	$.LC125, %edi
 5154      00
 5155 38c0 B8000000 		movl	$0, %eax
 5155      00
 5156 38c5 E8000000 		call	printf
 5156      00
1103:main_final_with_sync.c **** 			fStatus = flFlashCustomFirmware(handle, eepromOpt->sval[0], &error);
 5157              		.loc 1 1103 0
 5158 38ca 488B8590 		movq	-2928(%rbp), %rax
 5158      F4FFFF
 5159 38d1 488B4068 		movq	104(%rax), %rax
 5160 38d5 488B08   		movq	(%rax), %rcx
 5161 38d8 488B85E8 		movq	-3096(%rbp), %rax
 5161      F3FFFF
 5162 38df 488D95F0 		leaq	-3088(%rbp), %rdx
 5162      F3FFFF
 5163 38e6 4889CE   		movq	%rcx, %rsi
 5164 38e9 4889C7   		movq	%rax, %rdi
 5165 38ec E8000000 		call	flFlashCustomFirmware
 5165      00
 5166 38f1 8985C0F2 		movl	%eax, -3392(%rbp)
 5166      FFFF
 5167              	.L247:
1104:main_final_with_sync.c **** 		}
1105:main_final_with_sync.c **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5168              		.loc 1 1105 0
 5169 38f7 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5169      FFFF00
 5170 38fe 740F     		je	.L245
 5171              		.loc 1 1105 0 is_stmt 0 discriminator 1
 5172 3900 C785BCF2 		movl	$1, -3396(%rbp)
 5172      FFFF0100 
 5172      0000
 5173 390a E9093C00 		jmp	.L230
 5173      00
 5174              	.L245:
1106:main_final_with_sync.c **** 	}
1107:main_final_with_sync.c **** 
1108:main_final_with_sync.c **** 	if ( backupOpt->count ) {
 5175              		.loc 1 1108 0 is_stmt 1
 5176 390f 488B8598 		movq	-2920(%rbp), %rax
 5176      F4FFFF
 5177 3916 8B4060   		movl	96(%rax), %eax
 5178 3919 85C0     		testl	%eax, %eax
 5179 391b 0F84DA00 		je	.L248
 5179      0000
 5180              	.LBB45:
1109:main_final_with_sync.c **** 		const char *fileName;
1110:main_final_with_sync.c **** 		const uint32 kbitSize = strtoul(backupOpt->sval[0], (char**)&fileName, 0);
 5181              		.loc 1 1110 0
 5182 3921 488B8598 		movq	-2920(%rbp), %rax
 5182      F4FFFF
 5183 3928 488B4068 		movq	104(%rax), %rax
 5184 392c 488B00   		movq	(%rax), %rax
 5185 392f 488D8D10 		leaq	-3056(%rbp), %rcx
 5185      F4FFFF
 5186 3936 BA000000 		movl	$0, %edx
 5186      00
 5187 393b 4889CE   		movq	%rcx, %rsi
 5188 393e 4889C7   		movq	%rax, %rdi
 5189 3941 E8000000 		call	strtoul
 5189      00
 5190 3946 8985ACF3 		movl	%eax, -3156(%rbp)
 5190      FFFF
1111:main_final_with_sync.c **** 		if ( *fileName != ':' ) {
 5191              		.loc 1 1111 0
 5192 394c 488B8510 		movq	-3056(%rbp), %rax
 5192      F4FFFF
 5193 3953 0FB600   		movzbl	(%rax), %eax
 5194 3956 3C3A     		cmpb	$58, %al
 5195 3958 742F     		je	.L249
1112:main_final_with_sync.c **** 			fprintf(stderr, "%s: invalid argument to option --backup=<kbitSize:fw.iic>\n", progName);
 5196              		.loc 1 1112 0
 5197 395a 488B0500 		movq	stderr(%rip), %rax
 5197      000000
 5198 3961 488B95A8 		movq	-2904(%rbp), %rdx
 5198      F4FFFF
 5199 3968 BE000000 		movl	$.LC126, %esi
 5199      00
 5200 396d 4889C7   		movq	%rax, %rdi
 5201 3970 B8000000 		movl	$0, %eax
 5201      00
 5202 3975 E8000000 		call	fprintf
 5202      00
1113:main_final_with_sync.c **** 			FAIL(FLP_ARGS, cleanup);
 5203              		.loc 1 1113 0
 5204 397a C785BCF2 		movl	$12, -3396(%rbp)
 5204      FFFF0C00 
 5204      0000
 5205 3984 E98F3B00 		jmp	.L230
 5205      00
 5206              	.L249:
1114:main_final_with_sync.c **** 		}
1115:main_final_with_sync.c **** 		fileName++;
 5207              		.loc 1 1115 0
 5208 3989 488B8510 		movq	-3056(%rbp), %rax
 5208      F4FFFF
 5209 3990 4883C001 		addq	$1, %rax
 5210 3994 48898510 		movq	%rax, -3056(%rbp)
 5210      F4FFFF
1116:main_final_with_sync.c **** 		printf("Saving a backup of %d kbit from the FX2's EEPROM to %s...\n", kbitSize, fileName);
 5211              		.loc 1 1116 0
 5212 399b 488B9510 		movq	-3056(%rbp), %rdx
 5212      F4FFFF
 5213 39a2 8B85ACF3 		movl	-3156(%rbp), %eax
 5213      FFFF
 5214 39a8 89C6     		movl	%eax, %esi
 5215 39aa BF000000 		movl	$.LC127, %edi
 5215      00
 5216 39af B8000000 		movl	$0, %eax
 5216      00
 5217 39b4 E8000000 		call	printf
 5217      00
1117:main_final_with_sync.c **** 		fStatus = flSaveFirmware(handle, kbitSize, fileName, &error);
 5218              		.loc 1 1117 0
 5219 39b9 488B9510 		movq	-3056(%rbp), %rdx
 5219      F4FFFF
 5220 39c0 488B85E8 		movq	-3096(%rbp), %rax
 5220      F3FFFF
 5221 39c7 488D8DF0 		leaq	-3088(%rbp), %rcx
 5221      F3FFFF
 5222 39ce 8BB5ACF3 		movl	-3156(%rbp), %esi
 5222      FFFF
 5223 39d4 4889C7   		movq	%rax, %rdi
 5224 39d7 E8000000 		call	flSaveFirmware
 5224      00
 5225 39dc 8985C0F2 		movl	%eax, -3392(%rbp)
 5225      FFFF
1118:main_final_with_sync.c **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5226              		.loc 1 1118 0
 5227 39e2 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5227      FFFF00
 5228 39e9 7410     		je	.L248
 5229              		.loc 1 1118 0 is_stmt 0 discriminator 1
 5230 39eb C785BCF2 		movl	$1, -3396(%rbp)
 5230      FFFF0100 
 5230      0000
 5231 39f5 90       		nop
 5232 39f6 E91D3B00 		jmp	.L230
 5232      00
 5233              	.L248:
 5234              	.LBE45:
1119:main_final_with_sync.c **** 	}
1120:main_final_with_sync.c **** 
1121:main_final_with_sync.c **** 	if ( rstOpt->count ) {
 5235              		.loc 1 1121 0 is_stmt 1
 5236 39fb 488B8578 		movq	-2952(%rbp), %rax
 5236      F4FFFF
 5237 3a02 8B4060   		movl	96(%rax), %eax
 5238 3a05 85C0     		testl	%eax, %eax
 5239 3a07 7437     		je	.L252
1122:main_final_with_sync.c **** 		// Reset the bulk endpoints (only needed in some virtualised environments)
1123:main_final_with_sync.c **** 		fStatus = flResetToggle(handle, &error);
 5240              		.loc 1 1123 0
 5241 3a09 488B85E8 		movq	-3096(%rbp), %rax
 5241      F3FFFF
 5242 3a10 488D95F0 		leaq	-3088(%rbp), %rdx
 5242      F3FFFF
 5243 3a17 4889D6   		movq	%rdx, %rsi
 5244 3a1a 4889C7   		movq	%rax, %rdi
 5245 3a1d E8000000 		call	flResetToggle
 5245      00
 5246 3a22 8985C0F2 		movl	%eax, -3392(%rbp)
 5246      FFFF
1124:main_final_with_sync.c **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5247              		.loc 1 1124 0
 5248 3a28 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5248      FFFF00
 5249 3a2f 740F     		je	.L252
 5250              		.loc 1 1124 0 is_stmt 0 discriminator 1
 5251 3a31 C785BCF2 		movl	$1, -3396(%rbp)
 5251      FFFF0100 
 5251      0000
 5252 3a3b E9D83A00 		jmp	.L230
 5252      00
 5253              	.L252:
1125:main_final_with_sync.c **** 	}
1126:main_final_with_sync.c **** 
1127:main_final_with_sync.c **** 	if ( conOpt->count ) {
 5254              		.loc 1 1127 0 is_stmt 1
 5255 3a40 488B8550 		movq	-2992(%rbp), %rax
 5255      F4FFFF
 5256 3a47 8B4060   		movl	96(%rax), %eax
 5257 3a4a 85C0     		testl	%eax, %eax
 5258 3a4c 7413     		je	.L253
1128:main_final_with_sync.c **** 		conduit = (uint8)conOpt->ival[0];
 5259              		.loc 1 1128 0
 5260 3a4e 488B8550 		movq	-2992(%rbp), %rax
 5260      F4FFFF
 5261 3a55 488B4068 		movq	104(%rax), %rax
 5262 3a59 8B00     		movl	(%rax), %eax
 5263 3a5b 8885B3F2 		movb	%al, -3405(%rbp)
 5263      FFFF
 5264              	.L253:
1129:main_final_with_sync.c **** 	}
1130:main_final_with_sync.c **** 
1131:main_final_with_sync.c **** 	isNeroCapable = flIsNeroCapable(handle);
 5265              		.loc 1 1131 0
 5266 3a61 488B85E8 		movq	-3096(%rbp), %rax
 5266      F3FFFF
 5267 3a68 4889C7   		movq	%rax, %rdi
 5268 3a6b E8000000 		call	flIsNeroCapable
 5268      00
 5269 3a70 84C0     		testb	%al, %al
 5270 3a72 0F95C0   		setne	%al
 5271 3a75 8885B5F2 		movb	%al, -3403(%rbp)
 5271      FFFF
1132:main_final_with_sync.c **** 	isCommCapable = flIsCommCapable(handle, conduit);
 5272              		.loc 1 1132 0
 5273 3a7b 0FB695B3 		movzbl	-3405(%rbp), %edx
 5273      F2FFFF
 5274 3a82 488B85E8 		movq	-3096(%rbp), %rax
 5274      F3FFFF
 5275 3a89 89D6     		movl	%edx, %esi
 5276 3a8b 4889C7   		movq	%rax, %rdi
 5277 3a8e E8000000 		call	flIsCommCapable
 5277      00
 5278 3a93 84C0     		testb	%al, %al
 5279 3a95 0F95C0   		setne	%al
 5280 3a98 8885B6F2 		movb	%al, -3402(%rbp)
 5280      FFFF
1133:main_final_with_sync.c **** 
1134:main_final_with_sync.c **** 	if ( portOpt->count ) {
 5281              		.loc 1 1134 0
 5282 3a9e 488B8538 		movq	-3016(%rbp), %rax
 5282      F4FFFF
 5283 3aa5 8B4060   		movl	96(%rax), %eax
 5284 3aa8 85C0     		testl	%eax, %eax
 5285 3aaa 0F843C02 		je	.L254
 5285      0000
 5286              	.LBB46:
1135:main_final_with_sync.c **** 		uint32 readState;
1136:main_final_with_sync.c **** 		char hex[9];
1137:main_final_with_sync.c **** 		const uint8 *p = (const uint8 *)hex;
 5287              		.loc 1 1137 0
 5288 3ab0 488D45D0 		leaq	-48(%rbp), %rax
 5289 3ab4 488985C0 		movq	%rax, -2880(%rbp)
 5289      F4FFFF
1138:main_final_with_sync.c **** 		printf("Configuring ports...\n");
 5290              		.loc 1 1138 0
 5291 3abb BF000000 		movl	$.LC128, %edi
 5291      00
 5292 3ac0 E8000000 		call	puts
 5292      00
1139:main_final_with_sync.c **** 		fStatus = flMultiBitPortAccess(handle, portOpt->sval[0], &readState, &error);
 5293              		.loc 1 1139 0
 5294 3ac5 488B8538 		movq	-3016(%rbp), %rax
 5294      F4FFFF
 5295 3acc 488B4068 		movq	104(%rax), %rax
 5296 3ad0 488B30   		movq	(%rax), %rsi
 5297 3ad3 488B85E8 		movq	-3096(%rbp), %rax
 5297      F3FFFF
 5298 3ada 488D8DF0 		leaq	-3088(%rbp), %rcx
 5298      F3FFFF
 5299 3ae1 488D9510 		leaq	-3056(%rbp), %rdx
 5299      F4FFFF
 5300 3ae8 4889C7   		movq	%rax, %rdi
 5301 3aeb E8000000 		call	flMultiBitPortAccess
 5301      00
 5302 3af0 8985C0F2 		movl	%eax, -3392(%rbp)
 5302      FFFF
1140:main_final_with_sync.c **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5303              		.loc 1 1140 0
 5304 3af6 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5304      FFFF00
 5305 3afd 740F     		je	.L255
 5306              		.loc 1 1140 0 is_stmt 0 discriminator 1
 5307 3aff C785BCF2 		movl	$1, -3396(%rbp)
 5307      FFFF0100 
 5307      0000
 5308 3b09 E90A3A00 		jmp	.L230
 5308      00
 5309              	.L255:
1141:main_final_with_sync.c **** 		sprintf(hex, "%08X", readState);
 5310              		.loc 1 1141 0 is_stmt 1
 5311 3b0e 8B9510F4 		movl	-3056(%rbp), %edx
 5311      FFFF
 5312 3b14 488D45D0 		leaq	-48(%rbp), %rax
 5313 3b18 BE000000 		movl	$.LC129, %esi
 5313      00
 5314 3b1d 4889C7   		movq	%rax, %rdi
 5315 3b20 B8000000 		movl	$0, %eax
 5315      00
 5316 3b25 E8000000 		call	sprintf
 5316      00
1142:main_final_with_sync.c **** 		printf("Readback:   28   24   20   16    12    8    4    0\n          %s", nibbles[*p++ - '0']);
 5317              		.loc 1 1142 0
 5318 3b2a 488B85C0 		movq	-2880(%rbp), %rax
 5318      F4FFFF
 5319 3b31 488D5001 		leaq	1(%rax), %rdx
 5320 3b35 488995C0 		movq	%rdx, -2880(%rbp)
 5320      F4FFFF
 5321 3b3c 0FB600   		movzbl	(%rax), %eax
 5322 3b3f 0FB6C0   		movzbl	%al, %eax
 5323 3b42 83E830   		subl	$48, %eax
 5324 3b45 4898     		cltq
 5325 3b47 488B04C5 		movq	nibbles(,%rax,8), %rax
 5325      00000000 
 5326 3b4f 4889C6   		movq	%rax, %rsi
 5327 3b52 BF000000 		movl	$.LC130, %edi
 5327      00
 5328 3b57 B8000000 		movl	$0, %eax
 5328      00
 5329 3b5c E8000000 		call	printf
 5329      00
1143:main_final_with_sync.c **** 		printf(" %s", nibbles[*p++ - '0']);
 5330              		.loc 1 1143 0
 5331 3b61 488B85C0 		movq	-2880(%rbp), %rax
 5331      F4FFFF
 5332 3b68 488D5001 		leaq	1(%rax), %rdx
 5333 3b6c 488995C0 		movq	%rdx, -2880(%rbp)
 5333      F4FFFF
 5334 3b73 0FB600   		movzbl	(%rax), %eax
 5335 3b76 0FB6C0   		movzbl	%al, %eax
 5336 3b79 83E830   		subl	$48, %eax
 5337 3b7c 4898     		cltq
 5338 3b7e 488B04C5 		movq	nibbles(,%rax,8), %rax
 5338      00000000 
 5339 3b86 4889C6   		movq	%rax, %rsi
 5340 3b89 BF000000 		movl	$.LC131, %edi
 5340      00
 5341 3b8e B8000000 		movl	$0, %eax
 5341      00
 5342 3b93 E8000000 		call	printf
 5342      00
1144:main_final_with_sync.c **** 		printf(" %s", nibbles[*p++ - '0']);
 5343              		.loc 1 1144 0
 5344 3b98 488B85C0 		movq	-2880(%rbp), %rax
 5344      F4FFFF
 5345 3b9f 488D5001 		leaq	1(%rax), %rdx
 5346 3ba3 488995C0 		movq	%rdx, -2880(%rbp)
 5346      F4FFFF
 5347 3baa 0FB600   		movzbl	(%rax), %eax
 5348 3bad 0FB6C0   		movzbl	%al, %eax
 5349 3bb0 83E830   		subl	$48, %eax
 5350 3bb3 4898     		cltq
 5351 3bb5 488B04C5 		movq	nibbles(,%rax,8), %rax
 5351      00000000 
 5352 3bbd 4889C6   		movq	%rax, %rsi
 5353 3bc0 BF000000 		movl	$.LC131, %edi
 5353      00
 5354 3bc5 B8000000 		movl	$0, %eax
 5354      00
 5355 3bca E8000000 		call	printf
 5355      00
1145:main_final_with_sync.c **** 		printf(" %s", nibbles[*p++ - '0']);
 5356              		.loc 1 1145 0
 5357 3bcf 488B85C0 		movq	-2880(%rbp), %rax
 5357      F4FFFF
 5358 3bd6 488D5001 		leaq	1(%rax), %rdx
 5359 3bda 488995C0 		movq	%rdx, -2880(%rbp)
 5359      F4FFFF
 5360 3be1 0FB600   		movzbl	(%rax), %eax
 5361 3be4 0FB6C0   		movzbl	%al, %eax
 5362 3be7 83E830   		subl	$48, %eax
 5363 3bea 4898     		cltq
 5364 3bec 488B04C5 		movq	nibbles(,%rax,8), %rax
 5364      00000000 
 5365 3bf4 4889C6   		movq	%rax, %rsi
 5366 3bf7 BF000000 		movl	$.LC131, %edi
 5366      00
 5367 3bfc B8000000 		movl	$0, %eax
 5367      00
 5368 3c01 E8000000 		call	printf
 5368      00
1146:main_final_with_sync.c **** 		printf("  %s", nibbles[*p++ - '0']);
 5369              		.loc 1 1146 0
 5370 3c06 488B85C0 		movq	-2880(%rbp), %rax
 5370      F4FFFF
 5371 3c0d 488D5001 		leaq	1(%rax), %rdx
 5372 3c11 488995C0 		movq	%rdx, -2880(%rbp)
 5372      F4FFFF
 5373 3c18 0FB600   		movzbl	(%rax), %eax
 5374 3c1b 0FB6C0   		movzbl	%al, %eax
 5375 3c1e 83E830   		subl	$48, %eax
 5376 3c21 4898     		cltq
 5377 3c23 488B04C5 		movq	nibbles(,%rax,8), %rax
 5377      00000000 
 5378 3c2b 4889C6   		movq	%rax, %rsi
 5379 3c2e BF000000 		movl	$.LC132, %edi
 5379      00
 5380 3c33 B8000000 		movl	$0, %eax
 5380      00
 5381 3c38 E8000000 		call	printf
 5381      00
1147:main_final_with_sync.c **** 		printf(" %s", nibbles[*p++ - '0']);
 5382              		.loc 1 1147 0
 5383 3c3d 488B85C0 		movq	-2880(%rbp), %rax
 5383      F4FFFF
 5384 3c44 488D5001 		leaq	1(%rax), %rdx
 5385 3c48 488995C0 		movq	%rdx, -2880(%rbp)
 5385      F4FFFF
 5386 3c4f 0FB600   		movzbl	(%rax), %eax
 5387 3c52 0FB6C0   		movzbl	%al, %eax
 5388 3c55 83E830   		subl	$48, %eax
 5389 3c58 4898     		cltq
 5390 3c5a 488B04C5 		movq	nibbles(,%rax,8), %rax
 5390      00000000 
 5391 3c62 4889C6   		movq	%rax, %rsi
 5392 3c65 BF000000 		movl	$.LC131, %edi
 5392      00
 5393 3c6a B8000000 		movl	$0, %eax
 5393      00
 5394 3c6f E8000000 		call	printf
 5394      00
1148:main_final_with_sync.c **** 		printf(" %s", nibbles[*p++ - '0']);
 5395              		.loc 1 1148 0
 5396 3c74 488B85C0 		movq	-2880(%rbp), %rax
 5396      F4FFFF
 5397 3c7b 488D5001 		leaq	1(%rax), %rdx
 5398 3c7f 488995C0 		movq	%rdx, -2880(%rbp)
 5398      F4FFFF
 5399 3c86 0FB600   		movzbl	(%rax), %eax
 5400 3c89 0FB6C0   		movzbl	%al, %eax
 5401 3c8c 83E830   		subl	$48, %eax
 5402 3c8f 4898     		cltq
 5403 3c91 488B04C5 		movq	nibbles(,%rax,8), %rax
 5403      00000000 
 5404 3c99 4889C6   		movq	%rax, %rsi
 5405 3c9c BF000000 		movl	$.LC131, %edi
 5405      00
 5406 3ca1 B8000000 		movl	$0, %eax
 5406      00
 5407 3ca6 E8000000 		call	printf
 5407      00
1149:main_final_with_sync.c **** 		printf(" %s\n", nibbles[*p++ - '0']);
 5408              		.loc 1 1149 0
 5409 3cab 488B85C0 		movq	-2880(%rbp), %rax
 5409      F4FFFF
 5410 3cb2 488D5001 		leaq	1(%rax), %rdx
 5411 3cb6 488995C0 		movq	%rdx, -2880(%rbp)
 5411      F4FFFF
 5412 3cbd 0FB600   		movzbl	(%rax), %eax
 5413 3cc0 0FB6C0   		movzbl	%al, %eax
 5414 3cc3 83E830   		subl	$48, %eax
 5415 3cc6 4898     		cltq
 5416 3cc8 488B04C5 		movq	nibbles(,%rax,8), %rax
 5416      00000000 
 5417 3cd0 4889C6   		movq	%rax, %rsi
 5418 3cd3 BF000000 		movl	$.LC133, %edi
 5418      00
 5419 3cd8 B8000000 		movl	$0, %eax
 5419      00
 5420 3cdd E8000000 		call	printf
 5420      00
1150:main_final_with_sync.c **** 		flSleep(100);
 5421              		.loc 1 1150 0
 5422 3ce2 BF640000 		movl	$100, %edi
 5422      00
 5423 3ce7 E8000000 		call	flSleep
 5423      00
 5424              	.L254:
 5425              	.LBE46:
1151:main_final_with_sync.c **** 	}
1152:main_final_with_sync.c **** 
1153:main_final_with_sync.c **** 	if ( queryOpt->count ) {
 5426              		.loc 1 1153 0
 5427 3cec 488B8540 		movq	-3008(%rbp), %rax
 5427      F4FFFF
 5428 3cf3 8B4060   		movl	96(%rax), %eax
 5429 3cf6 85C0     		testl	%eax, %eax
 5430 3cf8 0F844D01 		je	.L256
 5430      0000
1154:main_final_with_sync.c **** 		if ( isNeroCapable ) {
 5431              		.loc 1 1154 0
 5432 3cfe 80BDB5F2 		cmpb	$0, -3403(%rbp)
 5432      FFFF00
 5433 3d05 0F841101 		je	.L257
 5433      0000
1155:main_final_with_sync.c **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 5434              		.loc 1 1155 0
 5435 3d0b 488B85E8 		movq	-3096(%rbp), %rax
 5435      F3FFFF
 5436 3d12 488D95F0 		leaq	-3088(%rbp), %rdx
 5436      F3FFFF
 5437 3d19 BE000000 		movl	$0, %esi
 5437      00
 5438 3d1e 4889C7   		movq	%rax, %rdi
 5439 3d21 E8000000 		call	flSelectConduit
 5439      00
 5440 3d26 8985C0F2 		movl	%eax, -3392(%rbp)
 5440      FFFF
1156:main_final_with_sync.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5441              		.loc 1 1156 0
 5442 3d2c 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5442      FFFF00
 5443 3d33 740F     		je	.L258
 5444              		.loc 1 1156 0 is_stmt 0 discriminator 1
 5445 3d35 C785BCF2 		movl	$1, -3396(%rbp)
 5445      FFFF0100 
 5445      0000
 5446 3d3f E9D43700 		jmp	.L230
 5446      00
 5447              	.L258:
1157:main_final_with_sync.c **** 			fStatus = jtagScanChain(handle, queryOpt->sval[0], &numDevices, scanChain, 16, &error);
 5448              		.loc 1 1157 0 is_stmt 1
 5449 3d44 488B8540 		movq	-3008(%rbp), %rax
 5449      F4FFFF
 5450 3d4b 488B4068 		movq	104(%rax), %rax
 5451 3d4f 488B30   		movq	(%rax), %rsi
 5452 3d52 488B85E8 		movq	-3096(%rbp), %rax
 5452      F3FFFF
 5453 3d59 488DBDF0 		leaq	-3088(%rbp), %rdi
 5453      F3FFFF
 5454 3d60 488D8D90 		leaq	-2672(%rbp), %rcx
 5454      F5FFFF
 5455 3d67 488D95B8 		leaq	-3400(%rbp), %rdx
 5455      F2FFFF
 5456 3d6e 4989F9   		movq	%rdi, %r9
 5457 3d71 41B81000 		movl	$16, %r8d
 5457      0000
 5458 3d77 4889C7   		movq	%rax, %rdi
 5459 3d7a E8000000 		call	jtagScanChain
 5459      00
 5460 3d7f 8985C0F2 		movl	%eax, -3392(%rbp)
 5460      FFFF
1158:main_final_with_sync.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5461              		.loc 1 1158 0
 5462 3d85 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5462      FFFF00
 5463 3d8c 740F     		je	.L259
 5464              		.loc 1 1158 0 is_stmt 0 discriminator 1
 5465 3d8e C785BCF2 		movl	$1, -3396(%rbp)
 5465      FFFF0100 
 5465      0000
 5466 3d98 E97B3700 		jmp	.L230
 5466      00
 5467              	.L259:
1159:main_final_with_sync.c **** 			if ( numDevices ) {
 5468              		.loc 1 1159 0 is_stmt 1
 5469 3d9d 8B85B8F2 		movl	-3400(%rbp), %eax
 5469      FFFF
 5470 3da3 85C0     		testl	%eax, %eax
 5471 3da5 745A     		je	.L260
1160:main_final_with_sync.c **** 				printf("The FPGALink device at %s scanned its JTAG chain, yielding:\n", vp);
 5472              		.loc 1 1160 0
 5473 3da7 488B85B8 		movq	-2888(%rbp), %rax
 5473      F4FFFF
 5474 3dae 4889C6   		movq	%rax, %rsi
 5475 3db1 BF000000 		movl	$.LC134, %edi
 5475      00
 5476 3db6 B8000000 		movl	$0, %eax
 5476      00
 5477 3dbb E8000000 		call	printf
 5477      00
1161:main_final_with_sync.c **** 				for ( i = 0; i < numDevices; i++ ) {
 5478              		.loc 1 1161 0
 5479 3dc0 C785C4F2 		movl	$0, -3388(%rbp)
 5479      FFFF0000 
 5479      0000
 5480 3dca EB25     		jmp	.L261
 5481              	.L262:
1162:main_final_with_sync.c **** 					printf("  0x%08X\n", scanChain[i]);
 5482              		.loc 1 1162 0 discriminator 3
 5483 3dcc 8B85C4F2 		movl	-3388(%rbp), %eax
 5483      FFFF
 5484 3dd2 8B848590 		movl	-2672(%rbp,%rax,4), %eax
 5484      F5FFFF
 5485 3dd9 89C6     		movl	%eax, %esi
 5486 3ddb BF000000 		movl	$.LC135, %edi
 5486      00
 5487 3de0 B8000000 		movl	$0, %eax
 5487      00
 5488 3de5 E8000000 		call	printf
 5488      00
1161:main_final_with_sync.c **** 				for ( i = 0; i < numDevices; i++ ) {
 5489              		.loc 1 1161 0 discriminator 3
 5490 3dea 8385C4F2 		addl	$1, -3388(%rbp)
 5490      FFFF01
 5491              	.L261:
1161:main_final_with_sync.c **** 				for ( i = 0; i < numDevices; i++ ) {
 5492              		.loc 1 1161 0 is_stmt 0 discriminator 1
 5493 3df1 8B85B8F2 		movl	-3400(%rbp), %eax
 5493      FFFF
 5494 3df7 3985C4F2 		cmpl	%eax, -3388(%rbp)
 5494      FFFF
 5495 3dfd 72CD     		jb	.L262
 5496 3dff EB4A     		jmp	.L256
 5497              	.L260:
1163:main_final_with_sync.c **** 				}
1164:main_final_with_sync.c **** 			} else {
1165:main_final_with_sync.c **** 				printf("The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\
 5498              		.loc 1 1165 0 is_stmt 1
 5499 3e01 488B85B8 		movq	-2888(%rbp), %rax
 5499      F4FFFF
 5500 3e08 4889C6   		movq	%rax, %rsi
 5501 3e0b BF000000 		movl	$.LC136, %edi
 5501      00
 5502 3e10 B8000000 		movl	$0, %eax
 5502      00
 5503 3e15 E8000000 		call	printf
 5503      00
 5504 3e1a EB2F     		jmp	.L256
 5505              	.L257:
1166:main_final_with_sync.c **** 			}
1167:main_final_with_sync.c **** 		} else {
1168:main_final_with_sync.c **** 			fprintf(stderr, "JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n
 5506              		.loc 1 1168 0
 5507 3e1c 488B0500 		movq	stderr(%rip), %rax
 5507      000000
 5508 3e23 488B95B8 		movq	-2888(%rbp), %rdx
 5508      F4FFFF
 5509 3e2a BE000000 		movl	$.LC137, %esi
 5509      00
 5510 3e2f 4889C7   		movq	%rax, %rdi
 5511 3e32 B8000000 		movl	$0, %eax
 5511      00
 5512 3e37 E8000000 		call	fprintf
 5512      00
1169:main_final_with_sync.c **** 			FAIL(FLP_ARGS, cleanup);
 5513              		.loc 1 1169 0
 5514 3e3c C785BCF2 		movl	$12, -3396(%rbp)
 5514      FFFF0C00 
 5514      0000
 5515 3e46 E9CD3600 		jmp	.L230
 5515      00
 5516              	.L256:
1170:main_final_with_sync.c **** 		}
1171:main_final_with_sync.c **** 	}
1172:main_final_with_sync.c **** 
1173:main_final_with_sync.c **** 	if ( progOpt->count ) {
 5517              		.loc 1 1173 0
 5518 3e4b 488B8548 		movq	-3000(%rbp), %rax
 5518      F4FFFF
 5519 3e52 8B4060   		movl	96(%rax), %eax
 5520 3e55 85C0     		testl	%eax, %eax
 5521 3e57 0F84C900 		je	.L264
 5521      0000
1174:main_final_with_sync.c **** 		printf("Programming device...\n");
 5522              		.loc 1 1174 0
 5523 3e5d BF000000 		movl	$.LC138, %edi
 5523      00
 5524 3e62 E8000000 		call	puts
 5524      00
1175:main_final_with_sync.c **** 		if ( isNeroCapable ) {
 5525              		.loc 1 1175 0
 5526 3e67 80BDB5F2 		cmpb	$0, -3403(%rbp)
 5526      FFFF00
 5527 3e6e 0F848300 		je	.L265
 5527      0000
1176:main_final_with_sync.c **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 5528              		.loc 1 1176 0
 5529 3e74 488B85E8 		movq	-3096(%rbp), %rax
 5529      F3FFFF
 5530 3e7b 488D95F0 		leaq	-3088(%rbp), %rdx
 5530      F3FFFF
 5531 3e82 BE000000 		movl	$0, %esi
 5531      00
 5532 3e87 4889C7   		movq	%rax, %rdi
 5533 3e8a E8000000 		call	flSelectConduit
 5533      00
 5534 3e8f 8985C0F2 		movl	%eax, -3392(%rbp)
 5534      FFFF
1177:main_final_with_sync.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5535              		.loc 1 1177 0
 5536 3e95 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5536      FFFF00
 5537 3e9c 740F     		je	.L266
 5538              		.loc 1 1177 0 is_stmt 0 discriminator 1
 5539 3e9e C785BCF2 		movl	$1, -3396(%rbp)
 5539      FFFF0100 
 5539      0000
 5540 3ea8 E96B3600 		jmp	.L230
 5540      00
 5541              	.L266:
1178:main_final_with_sync.c **** 			fStatus = flProgram(handle, progOpt->sval[0], NULL, &error);
 5542              		.loc 1 1178 0 is_stmt 1
 5543 3ead 488B8548 		movq	-3000(%rbp), %rax
 5543      F4FFFF
 5544 3eb4 488B4068 		movq	104(%rax), %rax
 5545 3eb8 488B30   		movq	(%rax), %rsi
 5546 3ebb 488B85E8 		movq	-3096(%rbp), %rax
 5546      F3FFFF
 5547 3ec2 488D95F0 		leaq	-3088(%rbp), %rdx
 5547      F3FFFF
 5548 3ec9 4889D1   		movq	%rdx, %rcx
 5549 3ecc BA000000 		movl	$0, %edx
 5549      00
 5550 3ed1 4889C7   		movq	%rax, %rdi
 5551 3ed4 E8000000 		call	flProgram
 5551      00
 5552 3ed9 8985C0F2 		movl	%eax, -3392(%rbp)
 5552      FFFF
1179:main_final_with_sync.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5553              		.loc 1 1179 0
 5554 3edf 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5554      FFFF00
 5555 3ee6 743E     		je	.L264
 5556              		.loc 1 1179 0 is_stmt 0 discriminator 1
 5557 3ee8 C785BCF2 		movl	$1, -3396(%rbp)
 5557      FFFF0100 
 5557      0000
 5558 3ef2 E9213600 		jmp	.L230
 5558      00
 5559              	.L265:
1180:main_final_with_sync.c **** 		} else {
1181:main_final_with_sync.c **** 			fprintf(stderr, "Program operation requested but device at %s does not support NeroProg\n", vp);
 5560              		.loc 1 1181 0 is_stmt 1
 5561 3ef7 488B0500 		movq	stderr(%rip), %rax
 5561      000000
 5562 3efe 488B95B8 		movq	-2888(%rbp), %rdx
 5562      F4FFFF
 5563 3f05 BE000000 		movl	$.LC139, %esi
 5563      00
 5564 3f0a 4889C7   		movq	%rax, %rdi
 5565 3f0d B8000000 		movl	$0, %eax
 5565      00
 5566 3f12 E8000000 		call	fprintf
 5566      00
1182:main_final_with_sync.c **** 			FAIL(FLP_ARGS, cleanup);
 5567              		.loc 1 1182 0
 5568 3f17 C785BCF2 		movl	$12, -3396(%rbp)
 5568      FFFF0C00 
 5568      0000
 5569 3f21 E9F23500 		jmp	.L230
 5569      00
 5570              	.L264:
1183:main_final_with_sync.c **** 		}
1184:main_final_with_sync.c **** 	}
1185:main_final_with_sync.c **** 
1186:main_final_with_sync.c **** 	if ( benOpt->count ) {
 5571              		.loc 1 1186 0
 5572 3f26 488B8570 		movq	-2960(%rbp), %rax
 5572      F4FFFF
 5573 3f2d 8B4060   		movl	96(%rax), %eax
 5574 3f30 85C0     		testl	%eax, %eax
 5575 3f32 7407     		je	.L267
1187:main_final_with_sync.c **** 		enableBenchmarking = true;
 5576              		.loc 1 1187 0
 5577 3f34 C6050000 		movb	$1, enableBenchmarking(%rip)
 5577      000001
 5578              	.L267:
1188:main_final_with_sync.c **** 	}
1189:main_final_with_sync.c **** 	
1190:main_final_with_sync.c **** 	if ( actOpt->count ) {
 5579              		.loc 1 1190 0
 5580 3f3b 488B8558 		movq	-2984(%rbp), %rax
 5580      F4FFFF
 5581 3f42 8B4060   		movl	96(%rax), %eax
 5582 3f45 85C0     		testl	%eax, %eax
 5583 3f47 0F845201 		je	.L268
 5583      0000
1191:main_final_with_sync.c **** 		printf("Executing CommFPGA actions on FPGALink device %s...\n", vp);
 5584              		.loc 1 1191 0
 5585 3f4d 488B85B8 		movq	-2888(%rbp), %rax
 5585      F4FFFF
 5586 3f54 4889C6   		movq	%rax, %rsi
 5587 3f57 BF000000 		movl	$.LC140, %edi
 5587      00
 5588 3f5c B8000000 		movl	$0, %eax
 5588      00
 5589 3f61 E8000000 		call	printf
 5589      00
1192:main_final_with_sync.c **** 		if ( isCommCapable ) {
 5590              		.loc 1 1192 0
 5591 3f66 80BDB6F2 		cmpb	$0, -3402(%rbp)
 5591      FFFF00
 5592 3f6d 0F84FD00 		je	.L269
 5592      0000
 5593              	.LBB47:
1193:main_final_with_sync.c **** 			uint8 isRunning;
1194:main_final_with_sync.c **** 			fStatus = flSelectConduit(handle, conduit, &error);
 5594              		.loc 1 1194 0
 5595 3f73 0FB68DB3 		movzbl	-3405(%rbp), %ecx
 5595      F2FFFF
 5596 3f7a 488B85E8 		movq	-3096(%rbp), %rax
 5596      F3FFFF
 5597 3f81 488D95F0 		leaq	-3088(%rbp), %rdx
 5597      F3FFFF
 5598 3f88 89CE     		movl	%ecx, %esi
 5599 3f8a 4889C7   		movq	%rax, %rdi
 5600 3f8d E8000000 		call	flSelectConduit
 5600      00
 5601 3f92 8985C0F2 		movl	%eax, -3392(%rbp)
 5601      FFFF
1195:main_final_with_sync.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5602              		.loc 1 1195 0
 5603 3f98 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5603      FFFF00
 5604 3f9f 740F     		je	.L270
 5605              		.loc 1 1195 0 is_stmt 0 discriminator 1
 5606 3fa1 C785BCF2 		movl	$1, -3396(%rbp)
 5606      FFFF0100 
 5606      0000
 5607 3fab E9683500 		jmp	.L230
 5607      00
 5608              	.L270:
1196:main_final_with_sync.c **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 5609              		.loc 1 1196 0 is_stmt 1
 5610 3fb0 488B85E8 		movq	-3096(%rbp), %rax
 5610      F3FFFF
 5611 3fb7 488D95F0 		leaq	-3088(%rbp), %rdx
 5611      F3FFFF
 5612 3fbe 488D8D10 		leaq	-3056(%rbp), %rcx
 5612      F4FFFF
 5613 3fc5 4889CE   		movq	%rcx, %rsi
 5614 3fc8 4889C7   		movq	%rax, %rdi
 5615 3fcb E8000000 		call	flIsFPGARunning
 5615      00
 5616 3fd0 8985C0F2 		movl	%eax, -3392(%rbp)
 5616      FFFF
1197:main_final_with_sync.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5617              		.loc 1 1197 0
 5618 3fd6 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5618      FFFF00
 5619 3fdd 740F     		je	.L272
 5620              		.loc 1 1197 0 is_stmt 0 discriminator 1
 5621 3fdf C785BCF2 		movl	$1, -3396(%rbp)
 5621      FFFF0100 
 5621      0000
 5622 3fe9 E92A3500 		jmp	.L230
 5622      00
 5623              	.L272:
1198:main_final_with_sync.c **** 			if ( isRunning ) {
 5624              		.loc 1 1198 0 is_stmt 1
 5625 3fee 0FB68510 		movzbl	-3056(%rbp), %eax
 5625      F4FFFF
 5626 3ff5 84C0     		testb	%al, %al
 5627 3ff7 7447     		je	.L273
1199:main_final_with_sync.c **** 				pStatus = parseLine(handle, actOpt->sval[0], &error);
 5628              		.loc 1 1199 0
 5629 3ff9 488B8558 		movq	-2984(%rbp), %rax
 5629      F4FFFF
 5630 4000 488B4068 		movq	104(%rax), %rax
 5631 4004 488B08   		movq	(%rax), %rcx
 5632 4007 488B85E8 		movq	-3096(%rbp), %rax
 5632      F3FFFF
 5633 400e 488D95F0 		leaq	-3088(%rbp), %rdx
 5633      F3FFFF
 5634 4015 4889CE   		movq	%rcx, %rsi
 5635 4018 4889C7   		movq	%rax, %rdi
 5636 401b E88EDFFF 		call	parseLine
 5636      FF
 5637 4020 8985B0F3 		movl	%eax, -3152(%rbp)
 5637      FFFF
1200:main_final_with_sync.c **** 				CHECK_STATUS(pStatus, pStatus, cleanup);
 5638              		.loc 1 1200 0
 5639 4026 83BDB0F3 		cmpl	$0, -3152(%rbp)
 5639      FFFF00
 5640 402d 7470     		je	.L268
 5641              		.loc 1 1200 0 is_stmt 0 discriminator 1
 5642 402f 8B85B0F3 		movl	-3152(%rbp), %eax
 5642      FFFF
 5643 4035 8985BCF2 		movl	%eax, -3396(%rbp)
 5643      FFFF
 5644 403b E9D83400 		jmp	.L230
 5644      00
 5645              	.L273:
1201:main_final_with_sync.c **** 			} else {
1202:main_final_with_sync.c **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n",
 5646              		.loc 1 1202 0 is_stmt 1
 5647 4040 488B0500 		movq	stderr(%rip), %rax
 5647      000000
 5648 4047 488B95B8 		movq	-2888(%rbp), %rdx
 5648      F4FFFF
 5649 404e BE000000 		movl	$.LC141, %esi
 5649      00
 5650 4053 4889C7   		movq	%rax, %rdi
 5651 4056 B8000000 		movl	$0, %eax
 5651      00
 5652 405b E8000000 		call	fprintf
 5652      00
1203:main_final_with_sync.c **** 				FAIL(FLP_ARGS, cleanup);
 5653              		.loc 1 1203 0
 5654 4060 C785BCF2 		movl	$12, -3396(%rbp)
 5654      FFFF0C00 
 5654      0000
 5655 406a 90       		nop
 5656 406b E9A83400 		jmp	.L230
 5656      00
 5657              	.L269:
 5658              	.LBE47:
1204:main_final_with_sync.c **** 			}
1205:main_final_with_sync.c **** 		} else {
1206:main_final_with_sync.c **** 			fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 5659              		.loc 1 1206 0
 5660 4070 488B0500 		movq	stderr(%rip), %rax
 5660      000000
 5661 4077 488B95B8 		movq	-2888(%rbp), %rdx
 5661      F4FFFF
 5662 407e BE000000 		movl	$.LC142, %esi
 5662      00
 5663 4083 4889C7   		movq	%rax, %rdi
 5664 4086 B8000000 		movl	$0, %eax
 5664      00
 5665 408b E8000000 		call	fprintf
 5665      00
1207:main_final_with_sync.c **** 			FAIL(FLP_ARGS, cleanup);
 5666              		.loc 1 1207 0
 5667 4090 C785BCF2 		movl	$12, -3396(%rbp)
 5667      FFFF0C00 
 5667      0000
 5668 409a E9793400 		jmp	.L230
 5668      00
 5669              	.L268:
1208:main_final_with_sync.c **** 		}
1209:main_final_with_sync.c **** 	}
1210:main_final_with_sync.c **** 
1211:main_final_with_sync.c **** 	if ( dumpOpt->count ) {
 5670              		.loc 1 1211 0
 5671 409f 488B8580 		movq	-2944(%rbp), %rax
 5671      F4FFFF
 5672 40a6 8B4060   		movl	96(%rax), %eax
 5673 40a9 85C0     		testl	%eax, %eax
 5674 40ab 0F84D002 		je	.L275
 5674      0000
 5675              	.LBB48:
1212:main_final_with_sync.c **** 		const char *fileName;
1213:main_final_with_sync.c **** 		unsigned long chan = strtoul(dumpOpt->sval[0], (char**)&fileName, 10);
 5676              		.loc 1 1213 0
 5677 40b1 488B8580 		movq	-2944(%rbp), %rax
 5677      F4FFFF
 5678 40b8 488B4068 		movq	104(%rax), %rax
 5679 40bc 488B00   		movq	(%rax), %rax
 5680 40bf 488D8D08 		leaq	-3064(%rbp), %rcx
 5680      F4FFFF
 5681 40c6 BA0A0000 		movl	$10, %edx
 5681      00
 5682 40cb 4889CE   		movq	%rcx, %rsi
 5683 40ce 4889C7   		movq	%rax, %rdi
 5684 40d1 E8000000 		call	strtoul
 5684      00
 5685 40d6 488985C8 		movq	%rax, -2872(%rbp)
 5685      F4FFFF
1214:main_final_with_sync.c **** 		FILE *file = NULL;
 5686              		.loc 1 1214 0
 5687 40dd 48C785D0 		movq	$0, -2864(%rbp)
 5687      F4FFFF00 
 5687      000000
1215:main_final_with_sync.c **** 		const uint8 *recvData;
1216:main_final_with_sync.c **** 		uint32 actualLength;
1217:main_final_with_sync.c **** 		if ( *fileName != ':' ) {
 5688              		.loc 1 1217 0
 5689 40e8 488B8508 		movq	-3064(%rbp), %rax
 5689      F4FFFF
 5690 40ef 0FB600   		movzbl	(%rax), %eax
 5691 40f2 3C3A     		cmpb	$58, %al
 5692 40f4 742F     		je	.L276
1218:main_final_with_sync.c **** 			fprintf(stderr, "%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n", progName);
 5693              		.loc 1 1218 0
 5694 40f6 488B0500 		movq	stderr(%rip), %rax
 5694      000000
 5695 40fd 488B95A8 		movq	-2904(%rbp), %rdx
 5695      F4FFFF
 5696 4104 BE000000 		movl	$.LC143, %esi
 5696      00
 5697 4109 4889C7   		movq	%rax, %rdi
 5698 410c B8000000 		movl	$0, %eax
 5698      00
 5699 4111 E8000000 		call	fprintf
 5699      00
1219:main_final_with_sync.c **** 			FAIL(FLP_ARGS, cleanup);
 5700              		.loc 1 1219 0
 5701 4116 C785BCF2 		movl	$12, -3396(%rbp)
 5701      FFFF0C00 
 5701      0000
 5702 4120 E9F33300 		jmp	.L230
 5702      00
 5703              	.L276:
1220:main_final_with_sync.c **** 		}
1221:main_final_with_sync.c **** 		fileName++;
 5704              		.loc 1 1221 0
 5705 4125 488B8508 		movq	-3064(%rbp), %rax
 5705      F4FFFF
 5706 412c 4883C001 		addq	$1, %rax
 5707 4130 48898508 		movq	%rax, -3064(%rbp)
 5707      F4FFFF
1222:main_final_with_sync.c **** 		printf("Copying from channel %lu to %s", chan, fileName);
 5708              		.loc 1 1222 0
 5709 4137 488B9508 		movq	-3064(%rbp), %rdx
 5709      F4FFFF
 5710 413e 488B85C8 		movq	-2872(%rbp), %rax
 5710      F4FFFF
 5711 4145 4889C6   		movq	%rax, %rsi
 5712 4148 BF000000 		movl	$.LC144, %edi
 5712      00
 5713 414d B8000000 		movl	$0, %eax
 5713      00
 5714 4152 E8000000 		call	printf
 5714      00
1223:main_final_with_sync.c **** 		file = fopen(fileName, "wb");
 5715              		.loc 1 1223 0
 5716 4157 488B8508 		movq	-3064(%rbp), %rax
 5716      F4FFFF
 5717 415e BE000000 		movl	$.LC28, %esi
 5717      00
 5718 4163 4889C7   		movq	%rax, %rdi
 5719 4166 E8000000 		call	fopen
 5719      00
 5720 416b 488985D0 		movq	%rax, -2864(%rbp)
 5720      F4FFFF
1224:main_final_with_sync.c **** 		CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 5721              		.loc 1 1224 0
 5722 4172 4883BDD0 		cmpq	$0, -2864(%rbp)
 5722      F4FFFF00 
 5723 417a 750F     		jne	.L278
 5724              		.loc 1 1224 0 is_stmt 0 discriminator 1
 5725 417c C785BCF2 		movl	$11, -3396(%rbp)
 5725      FFFF0B00 
 5725      0000
 5726 4186 E98D3300 		jmp	.L230
 5726      00
 5727              	.L278:
1225:main_final_with_sync.c **** 		sigRegisterHandler();
 5728              		.loc 1 1225 0 is_stmt 1
 5729 418b E8000000 		call	sigRegisterHandler
 5729      00
1226:main_final_with_sync.c **** 		fStatus = flSelectConduit(handle, conduit, &error);
 5730              		.loc 1 1226 0
 5731 4190 0FB68DB3 		movzbl	-3405(%rbp), %ecx
 5731      F2FFFF
 5732 4197 488B85E8 		movq	-3096(%rbp), %rax
 5732      F3FFFF
 5733 419e 488D95F0 		leaq	-3088(%rbp), %rdx
 5733      F3FFFF
 5734 41a5 89CE     		movl	%ecx, %esi
 5735 41a7 4889C7   		movq	%rax, %rdi
 5736 41aa E8000000 		call	flSelectConduit
 5736      00
 5737 41af 8985C0F2 		movl	%eax, -3392(%rbp)
 5737      FFFF
1227:main_final_with_sync.c **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5738              		.loc 1 1227 0
 5739 41b5 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5739      FFFF00
 5740 41bc 740F     		je	.L279
 5741              		.loc 1 1227 0 is_stmt 0 discriminator 1
 5742 41be C785BCF2 		movl	$1, -3396(%rbp)
 5742      FFFF0100 
 5742      0000
 5743 41c8 E94B3300 		jmp	.L230
 5743      00
 5744              	.L279:
1228:main_final_with_sync.c **** 		fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 5745              		.loc 1 1228 0 is_stmt 1
 5746 41cd 488B85C8 		movq	-2872(%rbp), %rax
 5746      F4FFFF
 5747 41d4 0FB6F0   		movzbl	%al, %esi
 5748 41d7 488B85E8 		movq	-3096(%rbp), %rax
 5748      F3FFFF
 5749 41de 488D95F0 		leaq	-3088(%rbp), %rdx
 5749      F3FFFF
 5750 41e5 4989D0   		movq	%rdx, %r8
 5751 41e8 B9000000 		movl	$0, %ecx
 5751      00
 5752 41ed BA005800 		movl	$22528, %edx
 5752      00
 5753 41f2 4889C7   		movq	%rax, %rdi
 5754 41f5 E8000000 		call	flReadChannelAsyncSubmit
 5754      00
 5755 41fa 8985C0F2 		movl	%eax, -3392(%rbp)
 5755      FFFF
1229:main_final_with_sync.c **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5756              		.loc 1 1229 0
 5757 4200 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5757      FFFF00
 5758 4207 740F     		je	.L280
 5759              		.loc 1 1229 0 is_stmt 0 discriminator 1
 5760 4209 C785BCF2 		movl	$1, -3396(%rbp)
 5760      FFFF0100 
 5760      0000
 5761 4213 E9003300 		jmp	.L230
 5761      00
 5762              	.L280:
1230:main_final_with_sync.c **** 		do {
1231:main_final_with_sync.c **** 			fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 5763              		.loc 1 1231 0 is_stmt 1
 5764 4218 488B85C8 		movq	-2872(%rbp), %rax
 5764      F4FFFF
 5765 421f 0FB6F0   		movzbl	%al, %esi
 5766 4222 488B85E8 		movq	-3096(%rbp), %rax
 5766      F3FFFF
 5767 4229 488D95F0 		leaq	-3088(%rbp), %rdx
 5767      F3FFFF
 5768 4230 4989D0   		movq	%rdx, %r8
 5769 4233 B9000000 		movl	$0, %ecx
 5769      00
 5770 4238 BA005800 		movl	$22528, %edx
 5770      00
 5771 423d 4889C7   		movq	%rax, %rdi
 5772 4240 E8000000 		call	flReadChannelAsyncSubmit
 5772      00
 5773 4245 8985C0F2 		movl	%eax, -3392(%rbp)
 5773      FFFF
1232:main_final_with_sync.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5774              		.loc 1 1232 0
 5775 424b 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5775      FFFF00
 5776 4252 740F     		je	.L281
 5777              		.loc 1 1232 0 is_stmt 0 discriminator 1
 5778 4254 C785BCF2 		movl	$1, -3396(%rbp)
 5778      FFFF0100 
 5778      0000
 5779 425e E9B53200 		jmp	.L230
 5779      00
 5780              	.L281:
1233:main_final_with_sync.c **** 			fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 5781              		.loc 1 1233 0 is_stmt 1
 5782 4263 488B85E8 		movq	-3096(%rbp), %rax
 5782      F3FFFF
 5783 426a 488DBDF0 		leaq	-3088(%rbp), %rdi
 5783      F3FFFF
 5784 4271 488D8D00 		leaq	-3072(%rbp), %rcx
 5784      F4FFFF
 5785 4278 488D9500 		leaq	-3072(%rbp), %rdx
 5785      F4FFFF
 5786 427f 488DB510 		leaq	-3056(%rbp), %rsi
 5786      F4FFFF
 5787 4286 4989F8   		movq	%rdi, %r8
 5788 4289 4889C7   		movq	%rax, %rdi
 5789 428c E8000000 		call	flReadChannelAsyncAwait
 5789      00
 5790 4291 8985C0F2 		movl	%eax, -3392(%rbp)
 5790      FFFF
1234:main_final_with_sync.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5791              		.loc 1 1234 0
 5792 4297 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5792      FFFF00
 5793 429e 740F     		je	.L282
 5794              		.loc 1 1234 0 is_stmt 0 discriminator 1
 5795 42a0 C785BCF2 		movl	$1, -3396(%rbp)
 5795      FFFF0100 
 5795      0000
 5796 42aa E9693200 		jmp	.L230
 5796      00
 5797              	.L282:
1235:main_final_with_sync.c **** 			fwrite(recvData, 1, actualLength, file);
 5798              		.loc 1 1235 0 is_stmt 1
 5799 42af 8B8500F4 		movl	-3072(%rbp), %eax
 5799      FFFF
 5800 42b5 89C6     		movl	%eax, %esi
 5801 42b7 488B8510 		movq	-3056(%rbp), %rax
 5801      F4FFFF
 5802 42be 488B95D0 		movq	-2864(%rbp), %rdx
 5802      F4FFFF
 5803 42c5 4889D1   		movq	%rdx, %rcx
 5804 42c8 4889F2   		movq	%rsi, %rdx
 5805 42cb BE010000 		movl	$1, %esi
 5805      00
 5806 42d0 4889C7   		movq	%rax, %rdi
 5807 42d3 E8000000 		call	fwrite
 5807      00
1236:main_final_with_sync.c **** 			printf(".");
 5808              		.loc 1 1236 0
 5809 42d8 BF2E0000 		movl	$46, %edi
 5809      00
 5810 42dd E8000000 		call	putchar
 5810      00
1237:main_final_with_sync.c **** 		} while ( !sigIsRaised() );
 5811              		.loc 1 1237 0
 5812 42e2 E8000000 		call	sigIsRaised
 5812      00
 5813 42e7 83F001   		xorl	$1, %eax
 5814 42ea 84C0     		testb	%al, %al
 5815 42ec 0F8526FF 		jne	.L280
 5815      FFFF
1238:main_final_with_sync.c **** 		printf("\nCaught SIGINT, quitting...\n");
 5816              		.loc 1 1238 0
 5817 42f2 BF000000 		movl	$.LC145, %edi
 5817      00
 5818 42f7 E8000000 		call	puts
 5818      00
1239:main_final_with_sync.c **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 5819              		.loc 1 1239 0
 5820 42fc 488B85E8 		movq	-3096(%rbp), %rax
 5820      F3FFFF
 5821 4303 488DBDF0 		leaq	-3088(%rbp), %rdi
 5821      F3FFFF
 5822 430a 488D8D00 		leaq	-3072(%rbp), %rcx
 5822      F4FFFF
 5823 4311 488D9500 		leaq	-3072(%rbp), %rdx
 5823      F4FFFF
 5824 4318 488DB510 		leaq	-3056(%rbp), %rsi
 5824      F4FFFF
 5825 431f 4989F8   		movq	%rdi, %r8
 5826 4322 4889C7   		movq	%rax, %rdi
 5827 4325 E8000000 		call	flReadChannelAsyncAwait
 5827      00
 5828 432a 8985C0F2 		movl	%eax, -3392(%rbp)
 5828      FFFF
1240:main_final_with_sync.c **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5829              		.loc 1 1240 0
 5830 4330 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5830      FFFF00
 5831 4337 7410     		je	.L283
 5832              		.loc 1 1240 0 is_stmt 0 discriminator 1
 5833 4339 C785BCF2 		movl	$1, -3396(%rbp)
 5833      FFFF0100 
 5833      0000
 5834 4343 90       		nop
 5835 4344 E9CF3100 		jmp	.L230
 5835      00
 5836              	.L283:
1241:main_final_with_sync.c **** 		fwrite(recvData, 1, actualLength, file);
 5837              		.loc 1 1241 0 is_stmt 1
 5838 4349 8B8500F4 		movl	-3072(%rbp), %eax
 5838      FFFF
 5839 434f 89C6     		movl	%eax, %esi
 5840 4351 488B8510 		movq	-3056(%rbp), %rax
 5840      F4FFFF
 5841 4358 488B95D0 		movq	-2864(%rbp), %rdx
 5841      F4FFFF
 5842 435f 4889D1   		movq	%rdx, %rcx
 5843 4362 4889F2   		movq	%rsi, %rdx
 5844 4365 BE010000 		movl	$1, %esi
 5844      00
 5845 436a 4889C7   		movq	%rax, %rdi
 5846 436d E8000000 		call	fwrite
 5846      00
1242:main_final_with_sync.c **** 		fclose(file);
 5847              		.loc 1 1242 0
 5848 4372 488B85D0 		movq	-2864(%rbp), %rax
 5848      F4FFFF
 5849 4379 4889C7   		movq	%rax, %rdi
 5850 437c E8000000 		call	fclose
 5850      00
 5851              	.L275:
 5852              	.LBE48:
1243:main_final_with_sync.c **** 	}
1244:main_final_with_sync.c **** 
1245:main_final_with_sync.c **** 	if ( shellOpt->count ) 
 5853              		.loc 1 1245 0
 5854 4381 488B8568 		movq	-2968(%rbp), %rax
 5854      F4FFFF
 5855 4388 8B4060   		movl	96(%rax), %eax
 5856 438b 85C0     		testl	%eax, %eax
 5857 438d 0F84CB01 		je	.L284
 5857      0000
1246:main_final_with_sync.c **** 	{
1247:main_final_with_sync.c **** 		printf("\nEntering CommFPGA command-line mode:\n");
 5858              		.loc 1 1247 0
 5859 4393 BF000000 		movl	$.LC146, %edi
 5859      00
 5860 4398 E8000000 		call	puts
 5860      00
1248:main_final_with_sync.c **** 		if ( isCommCapable ) {
 5861              		.loc 1 1248 0
 5862 439d 80BDB6F2 		cmpb	$0, -3402(%rbp)
 5862      FFFF00
 5863 43a4 0F848501 		je	.L285
 5863      0000
 5864              	.LBB49:
1249:main_final_with_sync.c **** 			uint8 isRunning;
1250:main_final_with_sync.c **** 			fStatus = flSelectConduit(handle, conduit, &error);
 5865              		.loc 1 1250 0
 5866 43aa 0FB68DB3 		movzbl	-3405(%rbp), %ecx
 5866      F2FFFF
 5867 43b1 488B85E8 		movq	-3096(%rbp), %rax
 5867      F3FFFF
 5868 43b8 488D95F0 		leaq	-3088(%rbp), %rdx
 5868      F3FFFF
 5869 43bf 89CE     		movl	%ecx, %esi
 5870 43c1 4889C7   		movq	%rax, %rdi
 5871 43c4 E8000000 		call	flSelectConduit
 5871      00
 5872 43c9 8985C0F2 		movl	%eax, -3392(%rbp)
 5872      FFFF
1251:main_final_with_sync.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5873              		.loc 1 1251 0
 5874 43cf 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5874      FFFF00
 5875 43d6 740F     		je	.L286
 5876              		.loc 1 1251 0 is_stmt 0 discriminator 1
 5877 43d8 C785BCF2 		movl	$1, -3396(%rbp)
 5877      FFFF0100 
 5877      0000
 5878 43e2 E9313100 		jmp	.L230
 5878      00
 5879              	.L286:
1252:main_final_with_sync.c **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 5880              		.loc 1 1252 0 is_stmt 1
 5881 43e7 488B85E8 		movq	-3096(%rbp), %rax
 5881      F3FFFF
 5882 43ee 488D95F0 		leaq	-3088(%rbp), %rdx
 5882      F3FFFF
 5883 43f5 488D8D10 		leaq	-3056(%rbp), %rcx
 5883      F4FFFF
 5884 43fc 4889CE   		movq	%rcx, %rsi
 5885 43ff 4889C7   		movq	%rax, %rdi
 5886 4402 E8000000 		call	flIsFPGARunning
 5886      00
 5887 4407 8985C0F2 		movl	%eax, -3392(%rbp)
 5887      FFFF
1253:main_final_with_sync.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5888              		.loc 1 1253 0
 5889 440d 83BDC0F2 		cmpl	$0, -3392(%rbp)
 5889      FFFF00
 5890 4414 740F     		je	.L288
 5891              		.loc 1 1253 0 is_stmt 0 discriminator 1
 5892 4416 C785BCF2 		movl	$1, -3396(%rbp)
 5892      FFFF0100 
 5892      0000
 5893 4420 E9F33000 		jmp	.L230
 5893      00
 5894              	.L288:
1254:main_final_with_sync.c **** 			if ( isRunning ) {
 5895              		.loc 1 1254 0 is_stmt 1
 5896 4425 0FB68510 		movzbl	-3056(%rbp), %eax
 5896      F4FFFF
 5897 442c 84C0     		testb	%al, %al
 5898 442e 0F84CB00 		je	.L289
 5898      0000
 5899              	.L291:
1255:main_final_with_sync.c **** 				do {
1256:main_final_with_sync.c **** 					do {
1257:main_final_with_sync.c **** 						line = readline("> ");
 5900              		.loc 1 1257 0 discriminator 2
 5901 4434 BF000000 		movl	$.LC147, %edi
 5901      00
 5902 4439 E8000000 		call	readline
 5902      00
 5903 443e 48898518 		movq	%rax, -3048(%rbp)
 5903      F4FFFF
1258:main_final_with_sync.c **** 					} while ( line && !line[0] );
 5904              		.loc 1 1258 0 discriminator 2
 5905 4445 4883BD18 		cmpq	$0, -3048(%rbp)
 5905      F4FFFF00 
 5906 444d 740E     		je	.L290
 5907              		.loc 1 1258 0 is_stmt 0 discriminator 1
 5908 444f 488B8518 		movq	-3048(%rbp), %rax
 5908      F4FFFF
 5909 4456 0FB600   		movzbl	(%rax), %eax
 5910 4459 84C0     		testb	%al, %al
 5911 445b 74D7     		je	.L291
 5912              	.L290:
1259:main_final_with_sync.c **** 					if ( line && line[0] && line[0] != 'q' ) {
 5913              		.loc 1 1259 0 is_stmt 1
 5914 445d 4883BD18 		cmpq	$0, -3048(%rbp)
 5914      F4FFFF00 
 5915 4465 747A     		je	.L292
 5916              		.loc 1 1259 0 is_stmt 0 discriminator 1
 5917 4467 488B8518 		movq	-3048(%rbp), %rax
 5917      F4FFFF
 5918 446e 0FB600   		movzbl	(%rax), %eax
 5919 4471 84C0     		testb	%al, %al
 5920 4473 746C     		je	.L292
 5921              		.loc 1 1259 0 discriminator 2
 5922 4475 488B8518 		movq	-3048(%rbp), %rax
 5922      F4FFFF
 5923 447c 0FB600   		movzbl	(%rax), %eax
 5924 447f 3C71     		cmpb	$113, %al
 5925 4481 745E     		je	.L292
1260:main_final_with_sync.c **** 						add_history(line);
 5926              		.loc 1 1260 0 is_stmt 1
 5927 4483 488B8518 		movq	-3048(%rbp), %rax
 5927      F4FFFF
 5928 448a 4889C7   		movq	%rax, %rdi
 5929 448d E8000000 		call	add_history
 5929      00
1261:main_final_with_sync.c **** 						pStatus = parseLine(handle, line, &error);
 5930              		.loc 1 1261 0
 5931 4492 488B85E8 		movq	-3096(%rbp), %rax
 5931      F3FFFF
 5932 4499 488D95F0 		leaq	-3088(%rbp), %rdx
 5932      F3FFFF
 5933 44a0 488B8D18 		movq	-3048(%rbp), %rcx
 5933      F4FFFF
 5934 44a7 4889CE   		movq	%rcx, %rsi
 5935 44aa 4889C7   		movq	%rax, %rdi
 5936 44ad E8FCDAFF 		call	parseLine
 5936      FF
 5937 44b2 8985B0F3 		movl	%eax, -3152(%rbp)
 5937      FFFF
1262:main_final_with_sync.c **** 						CHECK_STATUS(pStatus, pStatus, cleanup);
 5938              		.loc 1 1262 0
 5939 44b8 83BDB0F3 		cmpl	$0, -3152(%rbp)
 5939      FFFF00
 5940 44bf 7411     		je	.L293
 5941              		.loc 1 1262 0 is_stmt 0 discriminator 1
 5942 44c1 8B85B0F3 		movl	-3152(%rbp), %eax
 5942      FFFF
 5943 44c7 8985BCF2 		movl	%eax, -3396(%rbp)
 5943      FFFF
 5944 44cd E9463000 		jmp	.L230
 5944      00
 5945              	.L293:
1263:main_final_with_sync.c **** 						free((void*)line);
 5946              		.loc 1 1263 0 is_stmt 1
 5947 44d2 488B8518 		movq	-3048(%rbp), %rax
 5947      F4FFFF
 5948 44d9 4889C7   		movq	%rax, %rdi
 5949 44dc E8000000 		call	free
 5949      00
 5950              	.L292:
1264:main_final_with_sync.c **** 					}
1265:main_final_with_sync.c **** 				} while ( line && line[0] != 'q' );
 5951              		.loc 1 1265 0
 5952 44e1 4883BD18 		cmpq	$0, -3048(%rbp)
 5952      F4FFFF00 
 5953 44e9 7473     		je	.L284
 5954              		.loc 1 1265 0 is_stmt 0 discriminator 1
 5955 44eb 488B8518 		movq	-3048(%rbp), %rax
 5955      F4FFFF
 5956 44f2 0FB600   		movzbl	(%rax), %eax
 5957 44f5 3C71     		cmpb	$113, %al
 5958 44f7 0F8537FF 		jne	.L291
 5958      FFFF
 5959 44fd EB5F     		jmp	.L284
 5960              	.L289:
1266:main_final_with_sync.c **** 			} else {
1267:main_final_with_sync.c **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n", vp
 5961              		.loc 1 1267 0 is_stmt 1
 5962 44ff 488B0500 		movq	stderr(%rip), %rax
 5962      000000
 5963 4506 488B95B8 		movq	-2888(%rbp), %rdx
 5963      F4FFFF
 5964 450d BE000000 		movl	$.LC148, %esi
 5964      00
 5965 4512 4889C7   		movq	%rax, %rdi
 5966 4515 B8000000 		movl	$0, %eax
 5966      00
 5967 451a E8000000 		call	fprintf
 5967      00
1268:main_final_with_sync.c **** 				FAIL(FLP_ARGS, cleanup);
 5968              		.loc 1 1268 0
 5969 451f C785BCF2 		movl	$12, -3396(%rbp)
 5969      FFFF0C00 
 5969      0000
 5970 4529 90       		nop
 5971 452a E9E92F00 		jmp	.L230
 5971      00
 5972              	.L285:
 5973              	.LBE49:
1269:main_final_with_sync.c **** 			}
1270:main_final_with_sync.c **** 		} else {
1271:main_final_with_sync.c **** 			fprintf(stderr, "Shell requested but device at %s does not support CommFPGA\n", vp);
 5974              		.loc 1 1271 0
 5975 452f 488B0500 		movq	stderr(%rip), %rax
 5975      000000
 5976 4536 488B95B8 		movq	-2888(%rbp), %rdx
 5976      F4FFFF
 5977 453d BE000000 		movl	$.LC149, %esi
 5977      00
 5978 4542 4889C7   		movq	%rax, %rdi
 5979 4545 B8000000 		movl	$0, %eax
 5979      00
 5980 454a E8000000 		call	fprintf
 5980      00
1272:main_final_with_sync.c **** 			FAIL(FLP_ARGS, cleanup);
 5981              		.loc 1 1272 0
 5982 454f C785BCF2 		movl	$12, -3396(%rbp)
 5982      FFFF0C00 
 5982      0000
 5983 4559 E9BA2F00 		jmp	.L230
 5983      00
 5984              	.L284:
1273:main_final_with_sync.c **** 		}
1274:main_final_with_sync.c **** 	}
1275:main_final_with_sync.c **** 
1276:main_final_with_sync.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
1277:main_final_with_sync.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
1278:main_final_with_sync.c **** 	if (doworkOpt->count) 
 5985              		.loc 1 1278 0
 5986 455e 488B8560 		movq	-2976(%rbp), %rax
 5986      F4FFFF
 5987 4565 8B4060   		movl	96(%rax), %eax
 5988 4568 85C0     		testl	%eax, %eax
 5989 456a 0F84A82F 		je	.L230
 5989      0000
1279:main_final_with_sync.c **** 	{
1280:main_final_with_sync.c **** 		printf("%s\n", "Hello ");
 5990              		.loc 1 1280 0
 5991 4570 BF000000 		movl	$.LC150, %edi
 5991      00
 5992 4575 E8000000 		call	puts
 5992      00
1281:main_final_with_sync.c **** 		//int my_read_channel = 0;
1282:main_final_with_sync.c **** 		//uint8 my_write_channel = 0x01;
1283:main_final_with_sync.c **** 		//uint32 my_time_out = 0x00000002;
1284:main_final_with_sync.c **** 		//uint32 my_count = 0x0004;
1285:main_final_with_sync.c **** 		//uint32 *buf;
1286:main_final_with_sync.c **** 		// uint8 buf[4];
1287:main_final_with_sync.c **** 		// uint8 Ack1[4]={221,221,221,221};
1288:main_final_with_sync.c **** 		// uint8 Ack2[4]={187,187,187,187};
1289:main_final_with_sync.c **** 		printf("%s\n", "Helloghjkl ");
 5993              		.loc 1 1289 0
 5994 457a BF000000 		movl	$.LC151, %edi
 5994      00
 5995 457f E8000000 		call	puts
 5995      00
1290:main_final_with_sync.c **** 		if ( isCommCapable ) 
 5996              		.loc 1 1290 0
 5997 4584 80BDB6F2 		cmpb	$0, -3402(%rbp)
 5997      FFFF00
 5998 458b 0F845C2F 		je	.L295
 5998      0000
 5999              	.LBB50:
1291:main_final_with_sync.c **** 		{
1292:main_final_with_sync.c **** 			uint8 isRunning;
1293:main_final_with_sync.c **** 			fStatus = flSelectConduit(handle, conduit, &error);
 6000              		.loc 1 1293 0
 6001 4591 0FB68DB3 		movzbl	-3405(%rbp), %ecx
 6001      F2FFFF
 6002 4598 488B85E8 		movq	-3096(%rbp), %rax
 6002      F3FFFF
 6003 459f 488D95F0 		leaq	-3088(%rbp), %rdx
 6003      F3FFFF
 6004 45a6 89CE     		movl	%ecx, %esi
 6005 45a8 4889C7   		movq	%rax, %rdi
 6006 45ab E8000000 		call	flSelectConduit
 6006      00
 6007 45b0 8985C0F2 		movl	%eax, -3392(%rbp)
 6007      FFFF
1294:main_final_with_sync.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6008              		.loc 1 1294 0
 6009 45b6 83BDC0F2 		cmpl	$0, -3392(%rbp)
 6009      FFFF00
 6010 45bd 740F     		je	.L296
 6011              		.loc 1 1294 0 is_stmt 0 discriminator 1
 6012 45bf C785BCF2 		movl	$1, -3396(%rbp)
 6012      FFFF0100 
 6012      0000
 6013 45c9 E94A2F00 		jmp	.L230
 6013      00
 6014              	.L296:
1295:main_final_with_sync.c **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 6015              		.loc 1 1295 0 is_stmt 1
 6016 45ce 488B85E8 		movq	-3096(%rbp), %rax
 6016      F3FFFF
 6017 45d5 488D95F0 		leaq	-3088(%rbp), %rdx
 6017      F3FFFF
 6018 45dc 488D8DB0 		leaq	-3408(%rbp), %rcx
 6018      F2FFFF
 6019 45e3 4889CE   		movq	%rcx, %rsi
 6020 45e6 4889C7   		movq	%rax, %rdi
 6021 45e9 E8000000 		call	flIsFPGARunning
 6021      00
 6022 45ee 8985C0F2 		movl	%eax, -3392(%rbp)
 6022      FFFF
1296:main_final_with_sync.c **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6023              		.loc 1 1296 0
 6024 45f4 83BDC0F2 		cmpl	$0, -3392(%rbp)
 6024      FFFF00
 6025 45fb 740F     		je	.L298
 6026              		.loc 1 1296 0 is_stmt 0 discriminator 1
 6027 45fd C785BCF2 		movl	$1, -3396(%rbp)
 6027      FFFF0100 
 6027      0000
 6028 4607 E90C2F00 		jmp	.L230
 6028      00
 6029              	.L298:
1297:main_final_with_sync.c **** 			if ( isRunning ) 
 6030              		.loc 1 1297 0 is_stmt 1
 6031 460c 0FB685B0 		movzbl	-3408(%rbp), %eax
 6031      F2FFFF
 6032 4613 84C0     		testb	%al, %al
 6033 4615 0F84A52E 		je	.L299
 6033      0000
 6034              	.LBB51:
1298:main_final_with_sync.c **** 			{
1299:main_final_with_sync.c **** 				int K[32] = {0,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,1,1,0,1,0};
 6035              		.loc 1 1299 0
 6036 461b C785D0F5 		movl	$0, -2608(%rbp)
 6036      FFFF0000 
 6036      0000
 6037 4625 C785D4F5 		movl	$1, -2604(%rbp)
 6037      FFFF0100 
 6037      0000
 6038 462f C785D8F5 		movl	$0, -2600(%rbp)
 6038      FFFF0000 
 6038      0000
 6039 4639 C785DCF5 		movl	$0, -2596(%rbp)
 6039      FFFF0000 
 6039      0000
 6040 4643 C785E0F5 		movl	$1, -2592(%rbp)
 6040      FFFF0100 
 6040      0000
 6041 464d C785E4F5 		movl	$1, -2588(%rbp)
 6041      FFFF0100 
 6041      0000
 6042 4657 C785E8F5 		movl	$1, -2584(%rbp)
 6042      FFFF0100 
 6042      0000
 6043 4661 C785ECF5 		movl	$1, -2580(%rbp)
 6043      FFFF0100 
 6043      0000
 6044 466b C785F0F5 		movl	$1, -2576(%rbp)
 6044      FFFF0100 
 6044      0000
 6045 4675 C785F4F5 		movl	$1, -2572(%rbp)
 6045      FFFF0100 
 6045      0000
 6046 467f C785F8F5 		movl	$1, -2568(%rbp)
 6046      FFFF0100 
 6046      0000
 6047 4689 C785FCF5 		movl	$1, -2564(%rbp)
 6047      FFFF0100 
 6047      0000
 6048 4693 C78500F6 		movl	$0, -2560(%rbp)
 6048      FFFF0000 
 6048      0000
 6049 469d C78504F6 		movl	$0, -2556(%rbp)
 6049      FFFF0000 
 6049      0000
 6050 46a7 C78508F6 		movl	$0, -2552(%rbp)
 6050      FFFF0000 
 6050      0000
 6051 46b1 C7850CF6 		movl	$0, -2548(%rbp)
 6051      FFFF0000 
 6051      0000
 6052 46bb C78510F6 		movl	$0, -2544(%rbp)
 6052      FFFF0000 
 6052      0000
 6053 46c5 C78514F6 		movl	$0, -2540(%rbp)
 6053      FFFF0000 
 6053      0000
 6054 46cf C78518F6 		movl	$1, -2536(%rbp)
 6054      FFFF0100 
 6054      0000
 6055 46d9 C7851CF6 		movl	$1, -2532(%rbp)
 6055      FFFF0100 
 6055      0000
 6056 46e3 C78520F6 		movl	$1, -2528(%rbp)
 6056      FFFF0100 
 6056      0000
 6057 46ed C78524F6 		movl	$0, -2524(%rbp)
 6057      FFFF0000 
 6057      0000
 6058 46f7 C78528F6 		movl	$1, -2520(%rbp)
 6058      FFFF0100 
 6058      0000
 6059 4701 C7852CF6 		movl	$0, -2516(%rbp)
 6059      FFFF0000 
 6059      0000
 6060 470b C78530F6 		movl	$1, -2512(%rbp)
 6060      FFFF0100 
 6060      0000
 6061 4715 C78534F6 		movl	$0, -2508(%rbp)
 6061      FFFF0000 
 6061      0000
 6062 471f C78538F6 		movl	$1, -2504(%rbp)
 6062      FFFF0100 
 6062      0000
 6063 4729 C7853CF6 		movl	$1, -2500(%rbp)
 6063      FFFF0100 
 6063      0000
 6064 4733 C78540F6 		movl	$1, -2496(%rbp)
 6064      FFFF0100 
 6064      0000
 6065 473d C78544F6 		movl	$0, -2492(%rbp)
 6065      FFFF0000 
 6065      0000
 6066 4747 C78548F6 		movl	$1, -2488(%rbp)
 6066      FFFF0100 
 6066      0000
 6067 4751 C7854CF6 		movl	$0, -2484(%rbp)
 6067      FFFF0000 
 6067      0000
1300:main_final_with_sync.c **** 				int ack1[32] = {0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1};
 6068              		.loc 1 1300 0
 6069 475b C78550F6 		movl	$0, -2480(%rbp)
 6069      FFFF0000 
 6069      0000
 6070 4765 C78554F6 		movl	$1, -2476(%rbp)
 6070      FFFF0100 
 6070      0000
 6071 476f C78558F6 		movl	$0, -2472(%rbp)
 6071      FFFF0000 
 6071      0000
 6072 4779 C7855CF6 		movl	$1, -2468(%rbp)
 6072      FFFF0100 
 6072      0000
 6073 4783 C78560F6 		movl	$0, -2464(%rbp)
 6073      FFFF0000 
 6073      0000
 6074 478d C78564F6 		movl	$1, -2460(%rbp)
 6074      FFFF0100 
 6074      0000
 6075 4797 C78568F6 		movl	$0, -2456(%rbp)
 6075      FFFF0000 
 6075      0000
 6076 47a1 C7856CF6 		movl	$1, -2452(%rbp)
 6076      FFFF0100 
 6076      0000
 6077 47ab C78570F6 		movl	$0, -2448(%rbp)
 6077      FFFF0000 
 6077      0000
 6078 47b5 C78574F6 		movl	$1, -2444(%rbp)
 6078      FFFF0100 
 6078      0000
 6079 47bf C78578F6 		movl	$0, -2440(%rbp)
 6079      FFFF0000 
 6079      0000
 6080 47c9 C7857CF6 		movl	$1, -2436(%rbp)
 6080      FFFF0100 
 6080      0000
 6081 47d3 C78580F6 		movl	$0, -2432(%rbp)
 6081      FFFF0000 
 6081      0000
 6082 47dd C78584F6 		movl	$1, -2428(%rbp)
 6082      FFFF0100 
 6082      0000
 6083 47e7 C78588F6 		movl	$0, -2424(%rbp)
 6083      FFFF0000 
 6083      0000
 6084 47f1 C7858CF6 		movl	$1, -2420(%rbp)
 6084      FFFF0100 
 6084      0000
 6085 47fb C78590F6 		movl	$0, -2416(%rbp)
 6085      FFFF0000 
 6085      0000
 6086 4805 C78594F6 		movl	$1, -2412(%rbp)
 6086      FFFF0100 
 6086      0000
 6087 480f C78598F6 		movl	$0, -2408(%rbp)
 6087      FFFF0000 
 6087      0000
 6088 4819 C7859CF6 		movl	$1, -2404(%rbp)
 6088      FFFF0100 
 6088      0000
 6089 4823 C785A0F6 		movl	$0, -2400(%rbp)
 6089      FFFF0000 
 6089      0000
 6090 482d C785A4F6 		movl	$1, -2396(%rbp)
 6090      FFFF0100 
 6090      0000
 6091 4837 C785A8F6 		movl	$0, -2392(%rbp)
 6091      FFFF0000 
 6091      0000
 6092 4841 C785ACF6 		movl	$1, -2388(%rbp)
 6092      FFFF0100 
 6092      0000
 6093 484b C785B0F6 		movl	$0, -2384(%rbp)
 6093      FFFF0000 
 6093      0000
 6094 4855 C785B4F6 		movl	$1, -2380(%rbp)
 6094      FFFF0100 
 6094      0000
 6095 485f C785B8F6 		movl	$0, -2376(%rbp)
 6095      FFFF0000 
 6095      0000
 6096 4869 C785BCF6 		movl	$1, -2372(%rbp)
 6096      FFFF0100 
 6096      0000
 6097 4873 C785C0F6 		movl	$0, -2368(%rbp)
 6097      FFFF0000 
 6097      0000
 6098 487d C785C4F6 		movl	$1, -2364(%rbp)
 6098      FFFF0100 
 6098      0000
 6099 4887 C785C8F6 		movl	$0, -2360(%rbp)
 6099      FFFF0000 
 6099      0000
 6100 4891 C785CCF6 		movl	$1, -2356(%rbp)
 6100      FFFF0100 
 6100      0000
1301:main_final_with_sync.c **** 				int ack2[32] = {0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1};
 6101              		.loc 1 1301 0
 6102 489b C785D0F6 		movl	$0, -2352(%rbp)
 6102      FFFF0000 
 6102      0000
 6103 48a5 C785D4F6 		movl	$0, -2348(%rbp)
 6103      FFFF0000 
 6103      0000
 6104 48af C785D8F6 		movl	$1, -2344(%rbp)
 6104      FFFF0100 
 6104      0000
 6105 48b9 C785DCF6 		movl	$1, -2340(%rbp)
 6105      FFFF0100 
 6105      0000
 6106 48c3 C785E0F6 		movl	$0, -2336(%rbp)
 6106      FFFF0000 
 6106      0000
 6107 48cd C785E4F6 		movl	$0, -2332(%rbp)
 6107      FFFF0000 
 6107      0000
 6108 48d7 C785E8F6 		movl	$1, -2328(%rbp)
 6108      FFFF0100 
 6108      0000
 6109 48e1 C785ECF6 		movl	$1, -2324(%rbp)
 6109      FFFF0100 
 6109      0000
 6110 48eb C785F0F6 		movl	$0, -2320(%rbp)
 6110      FFFF0000 
 6110      0000
 6111 48f5 C785F4F6 		movl	$0, -2316(%rbp)
 6111      FFFF0000 
 6111      0000
 6112 48ff C785F8F6 		movl	$1, -2312(%rbp)
 6112      FFFF0100 
 6112      0000
 6113 4909 C785FCF6 		movl	$1, -2308(%rbp)
 6113      FFFF0100 
 6113      0000
 6114 4913 C78500F7 		movl	$0, -2304(%rbp)
 6114      FFFF0000 
 6114      0000
 6115 491d C78504F7 		movl	$0, -2300(%rbp)
 6115      FFFF0000 
 6115      0000
 6116 4927 C78508F7 		movl	$1, -2296(%rbp)
 6116      FFFF0100 
 6116      0000
 6117 4931 C7850CF7 		movl	$1, -2292(%rbp)
 6117      FFFF0100 
 6117      0000
 6118 493b C78510F7 		movl	$0, -2288(%rbp)
 6118      FFFF0000 
 6118      0000
 6119 4945 C78514F7 		movl	$0, -2284(%rbp)
 6119      FFFF0000 
 6119      0000
 6120 494f C78518F7 		movl	$1, -2280(%rbp)
 6120      FFFF0100 
 6120      0000
 6121 4959 C7851CF7 		movl	$1, -2276(%rbp)
 6121      FFFF0100 
 6121      0000
 6122 4963 C78520F7 		movl	$0, -2272(%rbp)
 6122      FFFF0000 
 6122      0000
 6123 496d C78524F7 		movl	$0, -2268(%rbp)
 6123      FFFF0000 
 6123      0000
 6124 4977 C78528F7 		movl	$1, -2264(%rbp)
 6124      FFFF0100 
 6124      0000
 6125 4981 C7852CF7 		movl	$1, -2260(%rbp)
 6125      FFFF0100 
 6125      0000
 6126 498b C78530F7 		movl	$0, -2256(%rbp)
 6126      FFFF0000 
 6126      0000
 6127 4995 C78534F7 		movl	$0, -2252(%rbp)
 6127      FFFF0000 
 6127      0000
 6128 499f C78538F7 		movl	$1, -2248(%rbp)
 6128      FFFF0100 
 6128      0000
 6129 49a9 C7853CF7 		movl	$1, -2244(%rbp)
 6129      FFFF0100 
 6129      0000
 6130 49b3 C78540F7 		movl	$0, -2240(%rbp)
 6130      FFFF0000 
 6130      0000
 6131 49bd C78544F7 		movl	$0, -2236(%rbp)
 6131      FFFF0000 
 6131      0000
 6132 49c7 C78548F7 		movl	$1, -2232(%rbp)
 6132      FFFF0100 
 6132      0000
 6133 49d1 C7854CF7 		movl	$1, -2228(%rbp)
 6133      FFFF0100 
 6133      0000
1302:main_final_with_sync.c **** 				int reset_bytes[8] = {0,0,0,1,1,0,0,0};
 6134              		.loc 1 1302 0
 6135 49db C785F0F4 		movl	$0, -2832(%rbp)
 6135      FFFF0000 
 6135      0000
 6136 49e5 C785F4F4 		movl	$0, -2828(%rbp)
 6136      FFFF0000 
 6136      0000
 6137 49ef C785F8F4 		movl	$0, -2824(%rbp)
 6137      FFFF0000 
 6137      0000
 6138 49f9 C785FCF4 		movl	$1, -2820(%rbp)
 6138      FFFF0100 
 6138      0000
 6139 4a03 C78500F5 		movl	$1, -2816(%rbp)
 6139      FFFF0100 
 6139      0000
 6140 4a0d C78504F5 		movl	$0, -2812(%rbp)
 6140      FFFF0000 
 6140      0000
 6141 4a17 C78508F5 		movl	$0, -2808(%rbp)
 6141      FFFF0000 
 6141      0000
 6142 4a21 C7850CF5 		movl	$0, -2804(%rbp)
 6142      FFFF0000 
 6142      0000
1303:main_final_with_sync.c **** 				int reset_int = bitArrayToInt(reset_bytes,8);
 6143              		.loc 1 1303 0
 6144 4a2b 488D85F0 		leaq	-2832(%rbp), %rax
 6144      F4FFFF
 6145 4a32 BE080000 		movl	$8, %esi
 6145      00
 6146 4a37 4889C7   		movq	%rax, %rdi
 6147 4a3a E8000000 		call	bitArrayToInt
 6147      00
 6148 4a3f 8985B4F3 		movl	%eax, -3148(%rbp)
 6148      FFFF
1304:main_final_with_sync.c **** 				int fail_count = 0;
 6149              		.loc 1 1304 0
 6150 4a45 C785CCF2 		movl	$0, -3380(%rbp)
 6150      FFFF0000 
 6150      0000
1305:main_final_with_sync.c **** 				uint8 reset = (uint8)reset_int;
 6151              		.loc 1 1305 0
 6152 4a4f 8B85B4F3 		movl	-3148(%rbp), %eax
 6152      FFFF
 6153 4a55 8885B7F2 		movb	%al, -3401(%rbp)
 6153      FFFF
1306:main_final_with_sync.c **** 				int del = 1000;
 6154              		.loc 1 1306 0
 6155 4a5b C785B8F3 		movl	$1000, -3144(%rbp)
 6155      FFFFE803 
 6155      0000
 6156              	.LBB52:
1307:main_final_with_sync.c **** 				for (int k = 0; k < 64; ++k)
 6157              		.loc 1 1307 0
 6158 4a65 C785D0F2 		movl	$0, -3376(%rbp)
 6158      FFFF0000 
 6158      0000
 6159 4a6f E93D2A00 		jmp	.L300
 6159      00
 6160              	.L454:
 6161              	.LBB53:
1308:main_final_with_sync.c **** 				{	printf("%s","Channel = " );
 6162              		.loc 1 1308 0
 6163 4a74 BE000000 		movl	$.LC152, %esi
 6163      00
 6164 4a79 BF000000 		movl	$.LC153, %edi
 6164      00
 6165 4a7e B8000000 		movl	$0, %eax
 6165      00
 6166 4a83 E8000000 		call	printf
 6166      00
1309:main_final_with_sync.c **** 					printf("%d\n",2*k );
 6167              		.loc 1 1309 0
 6168 4a88 8B85D0F2 		movl	-3376(%rbp), %eax
 6168      FFFF
 6169 4a8e 01C0     		addl	%eax, %eax
 6170 4a90 89C6     		movl	%eax, %esi
 6171 4a92 BF000000 		movl	$.LC154, %edi
 6171      00
 6172 4a97 B8000000 		movl	$0, %eax
 6172      00
 6173 4a9c E8000000 		call	printf
 6173      00
1310:main_final_with_sync.c **** 					uint8 get_encrypted_coord[4];
1311:main_final_with_sync.c **** 					printf("%s\n", "----------------------H2.1 started----------------------- ");
 6174              		.loc 1 1311 0
 6175 4aa1 BF000000 		movl	$.LC155, %edi
 6175      00
 6176 4aa6 E8000000 		call	puts
 6176      00
1312:main_final_with_sync.c **** 					printf("%s\n", "Waiting for encrypted co_ordinates");
 6177              		.loc 1 1312 0
 6178 4aab BF000000 		movl	$.LC156, %edi
 6178      00
 6179 4ab0 E8000000 		call	puts
 6179      00
1313:main_final_with_sync.c **** 
1314:main_final_with_sync.c **** 					delay(del * 1000);
 6180              		.loc 1 1314 0
 6181 4ab5 8B85B8F3 		movl	-3144(%rbp), %eax
 6181      FFFF
 6182 4abb 69C0E803 		imull	$1000, %eax, %eax
 6182      0000
 6183 4ac1 89C7     		movl	%eax, %edi
 6184 4ac3 E8000000 		call	delay
 6184      00
1315:main_final_with_sync.c **** 					fStatus = flReadChannel(handle, 2*k, 1, &get_encrypted_coord[0], &error);
 6185              		.loc 1 1315 0
 6186 4ac8 8B85D0F2 		movl	-3376(%rbp), %eax
 6186      FFFF
 6187 4ace 01C0     		addl	%eax, %eax
 6188 4ad0 0FB6F0   		movzbl	%al, %esi
 6189 4ad3 488B85E8 		movq	-3096(%rbp), %rax
 6189      F3FFFF
 6190 4ada 488D8DF0 		leaq	-3088(%rbp), %rcx
 6190      F3FFFF
 6191 4ae1 488D9560 		leaq	-160(%rbp), %rdx
 6191      FFFFFF
 6192 4ae8 4989C8   		movq	%rcx, %r8
 6193 4aeb 4889D1   		movq	%rdx, %rcx
 6194 4aee BA010000 		movl	$1, %edx
 6194      00
 6195 4af3 4889C7   		movq	%rax, %rdi
 6196 4af6 E8000000 		call	flReadChannel
 6196      00
 6197 4afb 8985C0F2 		movl	%eax, -3392(%rbp)
 6197      FFFF
1316:main_final_with_sync.c **** 					fail_count++;
 6198              		.loc 1 1316 0
 6199 4b01 8385CCF2 		addl	$1, -3380(%rbp)
 6199      FFFF01
1317:main_final_with_sync.c **** 					if(get_encrypted_coord[0] == reset) 
 6200              		.loc 1 1317 0
 6201 4b08 0FB68560 		movzbl	-160(%rbp), %eax
 6201      FFFFFF
 6202 4b0f 3A85B7F2 		cmpb	-3401(%rbp), %al
 6202      FFFF
 6203 4b15 7516     		jne	.L301
1318:main_final_with_sync.c **** 						{
1319:main_final_with_sync.c **** 							k--; 
 6204              		.loc 1 1319 0
 6205 4b17 83ADD0F2 		subl	$1, -3376(%rbp)
 6205      FFFF01
1320:main_final_with_sync.c **** 							printf("%s\n", "-------------------------RESET------------------------");
 6206              		.loc 1 1320 0
 6207 4b1e BF000000 		movl	$.LC157, %edi
 6207      00
 6208 4b23 E8000000 		call	puts
 6208      00
1321:main_final_with_sync.c **** 							continue;
 6209              		.loc 1 1321 0
 6210 4b28 E97D2900 		jmp	.L302
 6210      00
 6211              	.L301:
1322:main_final_with_sync.c **** 						}
1323:main_final_with_sync.c **** 					delay(del);
 6212              		.loc 1 1323 0
 6213 4b2d 8B85B8F3 		movl	-3144(%rbp), %eax
 6213      FFFF
 6214 4b33 89C7     		movl	%eax, %edi
 6215 4b35 E8000000 		call	delay
 6215      00
1324:main_final_with_sync.c **** 					fStatus = flReadChannel(handle, 2*k, 1, &get_encrypted_coord[1], &error);
 6216              		.loc 1 1324 0
 6217 4b3a 8B85D0F2 		movl	-3376(%rbp), %eax
 6217      FFFF
 6218 4b40 01C0     		addl	%eax, %eax
 6219 4b42 0FB6F0   		movzbl	%al, %esi
 6220 4b45 488B85E8 		movq	-3096(%rbp), %rax
 6220      F3FFFF
 6221 4b4c 488D8DF0 		leaq	-3088(%rbp), %rcx
 6221      F3FFFF
 6222 4b53 488D9560 		leaq	-160(%rbp), %rdx
 6222      FFFFFF
 6223 4b5a 4883C201 		addq	$1, %rdx
 6224 4b5e 4989C8   		movq	%rcx, %r8
 6225 4b61 4889D1   		movq	%rdx, %rcx
 6226 4b64 BA010000 		movl	$1, %edx
 6226      00
 6227 4b69 4889C7   		movq	%rax, %rdi
 6228 4b6c E8000000 		call	flReadChannel
 6228      00
 6229 4b71 8985C0F2 		movl	%eax, -3392(%rbp)
 6229      FFFF
1325:main_final_with_sync.c **** 					fail_count++;
 6230              		.loc 1 1325 0
 6231 4b77 8385CCF2 		addl	$1, -3380(%rbp)
 6231      FFFF01
1326:main_final_with_sync.c **** 					if(get_encrypted_coord[1] == reset) 
 6232              		.loc 1 1326 0
 6233 4b7e 0FB68561 		movzbl	-159(%rbp), %eax
 6233      FFFFFF
 6234 4b85 3A85B7F2 		cmpb	-3401(%rbp), %al
 6234      FFFF
 6235 4b8b 7516     		jne	.L303
1327:main_final_with_sync.c **** 						{
1328:main_final_with_sync.c **** 							k--; 
 6236              		.loc 1 1328 0
 6237 4b8d 83ADD0F2 		subl	$1, -3376(%rbp)
 6237      FFFF01
1329:main_final_with_sync.c **** 							printf("%s\n", "-------------------------RESET------------------------");							
 6238              		.loc 1 1329 0
 6239 4b94 BF000000 		movl	$.LC157, %edi
 6239      00
 6240 4b99 E8000000 		call	puts
 6240      00
1330:main_final_with_sync.c **** 							continue;
 6241              		.loc 1 1330 0
 6242 4b9e E9072900 		jmp	.L302
 6242      00
 6243              	.L303:
1331:main_final_with_sync.c **** 						}
1332:main_final_with_sync.c **** 					delay(del);
 6244              		.loc 1 1332 0
 6245 4ba3 8B85B8F3 		movl	-3144(%rbp), %eax
 6245      FFFF
 6246 4ba9 89C7     		movl	%eax, %edi
 6247 4bab E8000000 		call	delay
 6247      00
1333:main_final_with_sync.c **** 					fStatus = flReadChannel(handle, 2*k, 1, &get_encrypted_coord[2], &error);
 6248              		.loc 1 1333 0
 6249 4bb0 8B85D0F2 		movl	-3376(%rbp), %eax
 6249      FFFF
 6250 4bb6 01C0     		addl	%eax, %eax
 6251 4bb8 0FB6F0   		movzbl	%al, %esi
 6252 4bbb 488B85E8 		movq	-3096(%rbp), %rax
 6252      F3FFFF
 6253 4bc2 488D8DF0 		leaq	-3088(%rbp), %rcx
 6253      F3FFFF
 6254 4bc9 488D9560 		leaq	-160(%rbp), %rdx
 6254      FFFFFF
 6255 4bd0 4883C202 		addq	$2, %rdx
 6256 4bd4 4989C8   		movq	%rcx, %r8
 6257 4bd7 4889D1   		movq	%rdx, %rcx
 6258 4bda BA010000 		movl	$1, %edx
 6258      00
 6259 4bdf 4889C7   		movq	%rax, %rdi
 6260 4be2 E8000000 		call	flReadChannel
 6260      00
 6261 4be7 8985C0F2 		movl	%eax, -3392(%rbp)
 6261      FFFF
1334:main_final_with_sync.c **** 					fail_count++;
 6262              		.loc 1 1334 0
 6263 4bed 8385CCF2 		addl	$1, -3380(%rbp)
 6263      FFFF01
1335:main_final_with_sync.c **** 					if(get_encrypted_coord[2] == reset) 
 6264              		.loc 1 1335 0
 6265 4bf4 0FB68562 		movzbl	-158(%rbp), %eax
 6265      FFFFFF
 6266 4bfb 3A85B7F2 		cmpb	-3401(%rbp), %al
 6266      FFFF
 6267 4c01 7516     		jne	.L304
1336:main_final_with_sync.c **** 						{
1337:main_final_with_sync.c **** 							k--; 
 6268              		.loc 1 1337 0
 6269 4c03 83ADD0F2 		subl	$1, -3376(%rbp)
 6269      FFFF01
1338:main_final_with_sync.c **** 							printf("%s\n", "-------------------------RESET------------------------");							
 6270              		.loc 1 1338 0
 6271 4c0a BF000000 		movl	$.LC157, %edi
 6271      00
 6272 4c0f E8000000 		call	puts
 6272      00
1339:main_final_with_sync.c **** 							continue;
 6273              		.loc 1 1339 0
 6274 4c14 E9912800 		jmp	.L302
 6274      00
 6275              	.L304:
1340:main_final_with_sync.c **** 						}
1341:main_final_with_sync.c **** 					delay(del);
 6276              		.loc 1 1341 0
 6277 4c19 8B85B8F3 		movl	-3144(%rbp), %eax
 6277      FFFF
 6278 4c1f 89C7     		movl	%eax, %edi
 6279 4c21 E8000000 		call	delay
 6279      00
1342:main_final_with_sync.c **** 					fStatus = flReadChannel(handle, 2*k, 1, &get_encrypted_coord[3], &error);
 6280              		.loc 1 1342 0
 6281 4c26 8B85D0F2 		movl	-3376(%rbp), %eax
 6281      FFFF
 6282 4c2c 01C0     		addl	%eax, %eax
 6283 4c2e 0FB6F0   		movzbl	%al, %esi
 6284 4c31 488B85E8 		movq	-3096(%rbp), %rax
 6284      F3FFFF
 6285 4c38 488D8DF0 		leaq	-3088(%rbp), %rcx
 6285      F3FFFF
 6286 4c3f 488D9560 		leaq	-160(%rbp), %rdx
 6286      FFFFFF
 6287 4c46 4883C203 		addq	$3, %rdx
 6288 4c4a 4989C8   		movq	%rcx, %r8
 6289 4c4d 4889D1   		movq	%rdx, %rcx
 6290 4c50 BA010000 		movl	$1, %edx
 6290      00
 6291 4c55 4889C7   		movq	%rax, %rdi
 6292 4c58 E8000000 		call	flReadChannel
 6292      00
 6293 4c5d 8985C0F2 		movl	%eax, -3392(%rbp)
 6293      FFFF
1343:main_final_with_sync.c **** 					fail_count++;
 6294              		.loc 1 1343 0
 6295 4c63 8385CCF2 		addl	$1, -3380(%rbp)
 6295      FFFF01
1344:main_final_with_sync.c **** 					if(get_encrypted_coord[3] == reset) 
 6296              		.loc 1 1344 0
 6297 4c6a 0FB68563 		movzbl	-157(%rbp), %eax
 6297      FFFFFF
 6298 4c71 3A85B7F2 		cmpb	-3401(%rbp), %al
 6298      FFFF
 6299 4c77 7516     		jne	.L305
1345:main_final_with_sync.c **** 						{
1346:main_final_with_sync.c **** 							k--; 
 6300              		.loc 1 1346 0
 6301 4c79 83ADD0F2 		subl	$1, -3376(%rbp)
 6301      FFFF01
1347:main_final_with_sync.c **** 							printf("%s\n", "-------------------------RESET------------------------");
 6302              		.loc 1 1347 0
 6303 4c80 BF000000 		movl	$.LC157, %edi
 6303      00
 6304 4c85 E8000000 		call	puts
 6304      00
1348:main_final_with_sync.c **** 							continue;
 6305              		.loc 1 1348 0
 6306 4c8a E91B2800 		jmp	.L302
 6306      00
 6307              	.L305:
1349:main_final_with_sync.c **** 						}
1350:main_final_with_sync.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6308              		.loc 1 1350 0
 6309 4c8f 83BDC0F2 		cmpl	$0, -3392(%rbp)
 6309      FFFF00
 6310 4c96 740F     		je	.L306
 6311              		.loc 1 1350 0 is_stmt 0 discriminator 1
 6312 4c98 C785BCF2 		movl	$1, -3396(%rbp)
 6312      FFFF0100 
 6312      0000
 6313 4ca2 E9712800 		jmp	.L230
 6313      00
 6314              	.L306:
1351:main_final_with_sync.c **** 
1352:main_final_with_sync.c **** 					printf("%s\n", "Got the encrypted co_ordinates, they are as in uint8 form --");
 6315              		.loc 1 1352 0 is_stmt 1
 6316 4ca7 BF000000 		movl	$.LC158, %edi
 6316      00
 6317 4cac E8000000 		call	puts
 6317      00
 6318              	.LBB54:
1353:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 6319              		.loc 1 1353 0
 6320 4cb1 C785D4F2 		movl	$0, -3372(%rbp)
 6320      FFFF0000 
 6320      0000
 6321 4cbb EB2B     		jmp	.L308
 6322              	.L309:
1354:main_final_with_sync.c **** 					{
1355:main_final_with_sync.c **** 						printf("%d ", get_encrypted_coord[i]);
 6323              		.loc 1 1355 0 discriminator 3
 6324 4cbd 8B85D4F2 		movl	-3372(%rbp), %eax
 6324      FFFF
 6325 4cc3 4898     		cltq
 6326 4cc5 0FB68405 		movzbl	-160(%rbp,%rax), %eax
 6326      60FFFFFF 
 6327 4ccd 0FB6C0   		movzbl	%al, %eax
 6328 4cd0 89C6     		movl	%eax, %esi
 6329 4cd2 BF000000 		movl	$.LC10, %edi
 6329      00
 6330 4cd7 B8000000 		movl	$0, %eax
 6330      00
 6331 4cdc E8000000 		call	printf
 6331      00
1353:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 6332              		.loc 1 1353 0 discriminator 3
 6333 4ce1 8385D4F2 		addl	$1, -3372(%rbp)
 6333      FFFF01
 6334              	.L308:
1353:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 6335              		.loc 1 1353 0 is_stmt 0 discriminator 1
 6336 4ce8 83BDD4F2 		cmpl	$3, -3372(%rbp)
 6336      FFFF03
 6337 4cef 7ECC     		jle	.L309
 6338              	.LBE54:
1356:main_final_with_sync.c **** 					}
1357:main_final_with_sync.c **** 					printf("\n");
 6339              		.loc 1 1357 0 is_stmt 1
 6340 4cf1 BF0A0000 		movl	$10, %edi
 6340      00
 6341 4cf6 E8000000 		call	putchar
 6341      00
1358:main_final_with_sync.c **** 					int encrypted_pos[32];
1359:main_final_with_sync.c **** 					uint8ToBin(get_encrypted_coord, encrypted_pos);
 6342              		.loc 1 1359 0
 6343 4cfb 488D9550 		leaq	-2224(%rbp), %rdx
 6343      F7FFFF
 6344 4d02 488D8560 		leaq	-160(%rbp), %rax
 6344      FFFFFF
 6345 4d09 4889D6   		movq	%rdx, %rsi
 6346 4d0c 4889C7   		movq	%rax, %rdi
 6347 4d0f E8000000 		call	uint8ToBin
 6347      00
1360:main_final_with_sync.c **** 					printf("%s\n", "encrypted_pos is converted to binary");
 6348              		.loc 1 1360 0
 6349 4d14 BF000000 		movl	$.LC159, %edi
 6349      00
 6350 4d19 E8000000 		call	puts
 6350      00
1361:main_final_with_sync.c **** 					printf("%s\n", "The encrypted_pos are as --");
 6351              		.loc 1 1361 0
 6352 4d1e BF000000 		movl	$.LC160, %edi
 6352      00
 6353 4d23 E8000000 		call	puts
 6353      00
 6354              	.LBB55:
1362:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 6355              		.loc 1 1362 0
 6356 4d28 C785D8F2 		movl	$0, -3368(%rbp)
 6356      FFFF0000 
 6356      0000
 6357 4d32 EB27     		jmp	.L310
 6358              	.L311:
1363:main_final_with_sync.c **** 					{
1364:main_final_with_sync.c **** 						printf("%d ", encrypted_pos[i]);
 6359              		.loc 1 1364 0 discriminator 3
 6360 4d34 8B85D8F2 		movl	-3368(%rbp), %eax
 6360      FFFF
 6361 4d3a 4898     		cltq
 6362 4d3c 8B848550 		movl	-2224(%rbp,%rax,4), %eax
 6362      F7FFFF
 6363 4d43 89C6     		movl	%eax, %esi
 6364 4d45 BF000000 		movl	$.LC10, %edi
 6364      00
 6365 4d4a B8000000 		movl	$0, %eax
 6365      00
 6366 4d4f E8000000 		call	printf
 6366      00
1362:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 6367              		.loc 1 1362 0 discriminator 3
 6368 4d54 8385D8F2 		addl	$1, -3368(%rbp)
 6368      FFFF01
 6369              	.L310:
1362:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 6370              		.loc 1 1362 0 is_stmt 0 discriminator 1
 6371 4d5b 83BDD8F2 		cmpl	$31, -3368(%rbp)
 6371      FFFF1F
 6372 4d62 7ED0     		jle	.L311
 6373              	.LBE55:
1365:main_final_with_sync.c **** 					}
1366:main_final_with_sync.c **** 					printf("\n");
 6374              		.loc 1 1366 0 is_stmt 1
 6375 4d64 BF0A0000 		movl	$10, %edi
 6375      00
 6376 4d69 E8000000 		call	putchar
 6376      00
1367:main_final_with_sync.c **** 					int decrypted_pos[32];
1368:main_final_with_sync.c **** 					decrypter(encrypted_pos, K, decrypted_pos);
 6377              		.loc 1 1368 0
 6378 4d6e 488D95D0 		leaq	-2096(%rbp), %rdx
 6378      F7FFFF
 6379 4d75 488D8DD0 		leaq	-2608(%rbp), %rcx
 6379      F5FFFF
 6380 4d7c 488D8550 		leaq	-2224(%rbp), %rax
 6380      F7FFFF
 6381 4d83 4889CE   		movq	%rcx, %rsi
 6382 4d86 4889C7   		movq	%rax, %rdi
 6383 4d89 E8000000 		call	decrypter
 6383      00
1369:main_final_with_sync.c **** 					printf("%s\n", "The decrypted pos in binary form are as --");
 6384              		.loc 1 1369 0
 6385 4d8e BF000000 		movl	$.LC161, %edi
 6385      00
 6386 4d93 E8000000 		call	puts
 6386      00
 6387              	.LBB56:
1370:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 6388              		.loc 1 1370 0
 6389 4d98 C785DCF2 		movl	$0, -3364(%rbp)
 6389      FFFF0000 
 6389      0000
 6390 4da2 EB27     		jmp	.L312
 6391              	.L313:
1371:main_final_with_sync.c **** 					{
1372:main_final_with_sync.c **** 						printf("%d ", decrypted_pos[i]);
 6392              		.loc 1 1372 0 discriminator 3
 6393 4da4 8B85DCF2 		movl	-3364(%rbp), %eax
 6393      FFFF
 6394 4daa 4898     		cltq
 6395 4dac 8B8485D0 		movl	-2096(%rbp,%rax,4), %eax
 6395      F7FFFF
 6396 4db3 89C6     		movl	%eax, %esi
 6397 4db5 BF000000 		movl	$.LC10, %edi
 6397      00
 6398 4dba B8000000 		movl	$0, %eax
 6398      00
 6399 4dbf E8000000 		call	printf
 6399      00
1370:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 6400              		.loc 1 1370 0 discriminator 3
 6401 4dc4 8385DCF2 		addl	$1, -3364(%rbp)
 6401      FFFF01
 6402              	.L312:
1370:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 6403              		.loc 1 1370 0 is_stmt 0 discriminator 1
 6404 4dcb 83BDDCF2 		cmpl	$31, -3364(%rbp)
 6404      FFFF1F
 6405 4dd2 7ED0     		jle	.L313
 6406              	.LBE56:
1373:main_final_with_sync.c **** 					}
1374:main_final_with_sync.c **** 					printf("\n");
 6407              		.loc 1 1374 0 is_stmt 1
 6408 4dd4 BF0A0000 		movl	$10, %edi
 6408      00
 6409 4dd9 E8000000 		call	putchar
 6409      00
1375:main_final_with_sync.c **** 					printf("%s\n", "----------------------H2.1 ended----------------------- ");
 6410              		.loc 1 1375 0
 6411 4dde BF000000 		movl	$.LC162, %edi
 6411      00
 6412 4de3 E8000000 		call	puts
 6412      00
1376:main_final_with_sync.c **** 					printf("%s\n", "----------------------H2.2 started----------------------- ");
 6413              		.loc 1 1376 0
 6414 4de8 BF000000 		movl	$.LC163, %edi
 6414      00
 6415 4ded E8000000 		call	puts
 6415      00
1377:main_final_with_sync.c **** 					
1378:main_final_with_sync.c **** 					int encrypted_pos2[32];
1379:main_final_with_sync.c **** 					encrypter(decrypted_pos, K, encrypted_pos2);
 6416              		.loc 1 1379 0
 6417 4df2 488D9550 		leaq	-1968(%rbp), %rdx
 6417      F8FFFF
 6418 4df9 488D8DD0 		leaq	-2608(%rbp), %rcx
 6418      F5FFFF
 6419 4e00 488D85D0 		leaq	-2096(%rbp), %rax
 6419      F7FFFF
 6420 4e07 4889CE   		movq	%rcx, %rsi
 6421 4e0a 4889C7   		movq	%rax, %rdi
 6422 4e0d E8000000 		call	encrypter
 6422      00
1380:main_final_with_sync.c **** 					printf("%s\n", "The co_ordinates are re-encrypted in binary form");
 6423              		.loc 1 1380 0
 6424 4e12 BF000000 		movl	$.LC164, %edi
 6424      00
 6425 4e17 E8000000 		call	puts
 6425      00
1381:main_final_with_sync.c **** 					printf("%s\n", "The re-encrypted co_ords are as follows");
 6426              		.loc 1 1381 0
 6427 4e1c BF000000 		movl	$.LC165, %edi
 6427      00
 6428 4e21 E8000000 		call	puts
 6428      00
 6429              	.LBB57:
1382:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 6430              		.loc 1 1382 0
 6431 4e26 C785E0F2 		movl	$0, -3360(%rbp)
 6431      FFFF0000 
 6431      0000
 6432 4e30 EB27     		jmp	.L314
 6433              	.L315:
1383:main_final_with_sync.c **** 					{
1384:main_final_with_sync.c **** 						printf("%d ", encrypted_pos2[i]);
 6434              		.loc 1 1384 0 discriminator 3
 6435 4e32 8B85E0F2 		movl	-3360(%rbp), %eax
 6435      FFFF
 6436 4e38 4898     		cltq
 6437 4e3a 8B848550 		movl	-1968(%rbp,%rax,4), %eax
 6437      F8FFFF
 6438 4e41 89C6     		movl	%eax, %esi
 6439 4e43 BF000000 		movl	$.LC10, %edi
 6439      00
 6440 4e48 B8000000 		movl	$0, %eax
 6440      00
 6441 4e4d E8000000 		call	printf
 6441      00
1382:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 6442              		.loc 1 1382 0 discriminator 3
 6443 4e52 8385E0F2 		addl	$1, -3360(%rbp)
 6443      FFFF01
 6444              	.L314:
1382:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 6445              		.loc 1 1382 0 is_stmt 0 discriminator 1
 6446 4e59 83BDE0F2 		cmpl	$31, -3360(%rbp)
 6446      FFFF1F
 6447 4e60 7ED0     		jle	.L315
 6448              	.LBE57:
1385:main_final_with_sync.c **** 					}
1386:main_final_with_sync.c **** 					printf("\n");
 6449              		.loc 1 1386 0 is_stmt 1
 6450 4e62 BF0A0000 		movl	$10, %edi
 6450      00
 6451 4e67 E8000000 		call	putchar
 6451      00
1387:main_final_with_sync.c **** 					uint8 send_encrypted_coord[4];
1388:main_final_with_sync.c **** 					printf("%s\n", "Converting the re-encrypted data in binary to uint8 form");
 6452              		.loc 1 1388 0
 6453 4e6c BF000000 		movl	$.LC166, %edi
 6453      00
 6454 4e71 E8000000 		call	puts
 6454      00
1389:main_final_with_sync.c **** 					BinTouint8(send_encrypted_coord, encrypted_pos);
 6455              		.loc 1 1389 0
 6456 4e76 488D9550 		leaq	-2224(%rbp), %rdx
 6456      F7FFFF
 6457 4e7d 488D8570 		leaq	-144(%rbp), %rax
 6457      FFFFFF
 6458 4e84 4889D6   		movq	%rdx, %rsi
 6459 4e87 4889C7   		movq	%rax, %rdi
 6460 4e8a E8000000 		call	BinTouint8
 6460      00
1390:main_final_with_sync.c **** 					printf("%s\n", "Preparing to send the encrypted co_ordinates ");
 6461              		.loc 1 1390 0
 6462 4e8f BF000000 		movl	$.LC167, %edi
 6462      00
 6463 4e94 E8000000 		call	puts
 6463      00
1391:main_final_with_sync.c **** 					delay(del);
 6464              		.loc 1 1391 0
 6465 4e99 8B85B8F3 		movl	-3144(%rbp), %eax
 6465      FFFF
 6466 4e9f 89C7     		movl	%eax, %edi
 6467 4ea1 E8000000 		call	delay
 6467      00
1392:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &send_encrypted_coord[0], &error);
 6468              		.loc 1 1392 0
 6469 4ea6 8B85D0F2 		movl	-3376(%rbp), %eax
 6469      FFFF
 6470 4eac 01C0     		addl	%eax, %eax
 6471 4eae 83C001   		addl	$1, %eax
 6472 4eb1 0FB6F0   		movzbl	%al, %esi
 6473 4eb4 488B85E8 		movq	-3096(%rbp), %rax
 6473      F3FFFF
 6474 4ebb 488D8DF0 		leaq	-3088(%rbp), %rcx
 6474      F3FFFF
 6475 4ec2 488D9570 		leaq	-144(%rbp), %rdx
 6475      FFFFFF
 6476 4ec9 4989C8   		movq	%rcx, %r8
 6477 4ecc 4889D1   		movq	%rdx, %rcx
 6478 4ecf BA010000 		movl	$1, %edx
 6478      00
 6479 4ed4 4889C7   		movq	%rax, %rdi
 6480 4ed7 E8000000 		call	flWriteChannel
 6480      00
 6481 4edc 8985C0F2 		movl	%eax, -3392(%rbp)
 6481      FFFF
1393:main_final_with_sync.c **** 					delay(del);
 6482              		.loc 1 1393 0
 6483 4ee2 8B85B8F3 		movl	-3144(%rbp), %eax
 6483      FFFF
 6484 4ee8 89C7     		movl	%eax, %edi
 6485 4eea E8000000 		call	delay
 6485      00
1394:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &send_encrypted_coord[1], &error);
 6486              		.loc 1 1394 0
 6487 4eef 8B85D0F2 		movl	-3376(%rbp), %eax
 6487      FFFF
 6488 4ef5 01C0     		addl	%eax, %eax
 6489 4ef7 83C001   		addl	$1, %eax
 6490 4efa 0FB6F0   		movzbl	%al, %esi
 6491 4efd 488B85E8 		movq	-3096(%rbp), %rax
 6491      F3FFFF
 6492 4f04 488D8DF0 		leaq	-3088(%rbp), %rcx
 6492      F3FFFF
 6493 4f0b 488D9570 		leaq	-144(%rbp), %rdx
 6493      FFFFFF
 6494 4f12 4883C201 		addq	$1, %rdx
 6495 4f16 4989C8   		movq	%rcx, %r8
 6496 4f19 4889D1   		movq	%rdx, %rcx
 6497 4f1c BA010000 		movl	$1, %edx
 6497      00
 6498 4f21 4889C7   		movq	%rax, %rdi
 6499 4f24 E8000000 		call	flWriteChannel
 6499      00
 6500 4f29 8985C0F2 		movl	%eax, -3392(%rbp)
 6500      FFFF
1395:main_final_with_sync.c **** 					delay(del);
 6501              		.loc 1 1395 0
 6502 4f2f 8B85B8F3 		movl	-3144(%rbp), %eax
 6502      FFFF
 6503 4f35 89C7     		movl	%eax, %edi
 6504 4f37 E8000000 		call	delay
 6504      00
1396:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &send_encrypted_coord[2], &error);
 6505              		.loc 1 1396 0
 6506 4f3c 8B85D0F2 		movl	-3376(%rbp), %eax
 6506      FFFF
 6507 4f42 01C0     		addl	%eax, %eax
 6508 4f44 83C001   		addl	$1, %eax
 6509 4f47 0FB6F0   		movzbl	%al, %esi
 6510 4f4a 488B85E8 		movq	-3096(%rbp), %rax
 6510      F3FFFF
 6511 4f51 488D8DF0 		leaq	-3088(%rbp), %rcx
 6511      F3FFFF
 6512 4f58 488D9570 		leaq	-144(%rbp), %rdx
 6512      FFFFFF
 6513 4f5f 4883C202 		addq	$2, %rdx
 6514 4f63 4989C8   		movq	%rcx, %r8
 6515 4f66 4889D1   		movq	%rdx, %rcx
 6516 4f69 BA010000 		movl	$1, %edx
 6516      00
 6517 4f6e 4889C7   		movq	%rax, %rdi
 6518 4f71 E8000000 		call	flWriteChannel
 6518      00
 6519 4f76 8985C0F2 		movl	%eax, -3392(%rbp)
 6519      FFFF
1397:main_final_with_sync.c **** 					delay(del);
 6520              		.loc 1 1397 0
 6521 4f7c 8B85B8F3 		movl	-3144(%rbp), %eax
 6521      FFFF
 6522 4f82 89C7     		movl	%eax, %edi
 6523 4f84 E8000000 		call	delay
 6523      00
1398:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &send_encrypted_coord[3], &error);
 6524              		.loc 1 1398 0
 6525 4f89 8B85D0F2 		movl	-3376(%rbp), %eax
 6525      FFFF
 6526 4f8f 01C0     		addl	%eax, %eax
 6527 4f91 83C001   		addl	$1, %eax
 6528 4f94 0FB6F0   		movzbl	%al, %esi
 6529 4f97 488B85E8 		movq	-3096(%rbp), %rax
 6529      F3FFFF
 6530 4f9e 488D8DF0 		leaq	-3088(%rbp), %rcx
 6530      F3FFFF
 6531 4fa5 488D9570 		leaq	-144(%rbp), %rdx
 6531      FFFFFF
 6532 4fac 4883C203 		addq	$3, %rdx
 6533 4fb0 4989C8   		movq	%rcx, %r8
 6534 4fb3 4889D1   		movq	%rdx, %rcx
 6535 4fb6 BA010000 		movl	$1, %edx
 6535      00
 6536 4fbb 4889C7   		movq	%rax, %rdi
 6537 4fbe E8000000 		call	flWriteChannel
 6537      00
 6538 4fc3 8985C0F2 		movl	%eax, -3392(%rbp)
 6538      FFFF
1399:main_final_with_sync.c **** 
1400:main_final_with_sync.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6539              		.loc 1 1400 0
 6540 4fc9 83BDC0F2 		cmpl	$0, -3392(%rbp)
 6540      FFFF00
 6541 4fd0 740F     		je	.L316
 6542              		.loc 1 1400 0 is_stmt 0 discriminator 1
 6543 4fd2 C785BCF2 		movl	$1, -3396(%rbp)
 6543      FFFF0100 
 6543      0000
 6544 4fdc E9372500 		jmp	.L230
 6544      00
 6545              	.L316:
1401:main_final_with_sync.c **** 					printf("%s\n", "Successfully send the encrypted co_ordinates in uint8 form");
 6546              		.loc 1 1401 0 is_stmt 1
 6547 4fe1 BF000000 		movl	$.LC168, %edi
 6547      00
 6548 4fe6 E8000000 		call	puts
 6548      00
1402:main_final_with_sync.c **** 
1403:main_final_with_sync.c **** 					printf("%s\n", "----------------------H2.2 ended----------------------- ");
 6549              		.loc 1 1403 0
 6550 4feb BF000000 		movl	$.LC169, %edi
 6550      00
 6551 4ff0 E8000000 		call	puts
 6551      00
1404:main_final_with_sync.c **** 
1405:main_final_with_sync.c **** 					printf("%s\n", "----------------------H2.3 started----------------------- ");
 6552              		.loc 1 1405 0
 6553 4ff5 BF000000 		movl	$.LC170, %edi
 6553      00
 6554 4ffa E8000000 		call	puts
 6554      00
1406:main_final_with_sync.c **** 					printf("%s\n", "Waiting to get Ack1 from the fpga controller");
 6555              		.loc 1 1406 0
 6556 4fff BF000000 		movl	$.LC171, %edi
 6556      00
 6557 5004 E8000000 		call	puts
 6557      00
1407:main_final_with_sync.c **** 					uint8 first_ack1_received[4];
1408:main_final_with_sync.c **** 					delay(del);
 6558              		.loc 1 1408 0
 6559 5009 8B85B8F3 		movl	-3144(%rbp), %eax
 6559      FFFF
 6560 500f 89C7     		movl	%eax, %edi
 6561 5011 E8000000 		call	delay
 6561      00
1409:main_final_with_sync.c **** 					fStatus = flReadChannel(handle, 2*k, 1, &first_ack1_received[0], &error);
 6562              		.loc 1 1409 0
 6563 5016 8B85D0F2 		movl	-3376(%rbp), %eax
 6563      FFFF
 6564 501c 01C0     		addl	%eax, %eax
 6565 501e 0FB6F0   		movzbl	%al, %esi
 6566 5021 488B85E8 		movq	-3096(%rbp), %rax
 6566      F3FFFF
 6567 5028 488D8DF0 		leaq	-3088(%rbp), %rcx
 6567      F3FFFF
 6568 502f 488D5580 		leaq	-128(%rbp), %rdx
 6569 5033 4989C8   		movq	%rcx, %r8
 6570 5036 4889D1   		movq	%rdx, %rcx
 6571 5039 BA010000 		movl	$1, %edx
 6571      00
 6572 503e 4889C7   		movq	%rax, %rdi
 6573 5041 E8000000 		call	flReadChannel
 6573      00
 6574 5046 8985C0F2 		movl	%eax, -3392(%rbp)
 6574      FFFF
1410:main_final_with_sync.c **** 					fail_count++;
 6575              		.loc 1 1410 0
 6576 504c 8385CCF2 		addl	$1, -3380(%rbp)
 6576      FFFF01
1411:main_final_with_sync.c **** 					if(first_ack1_received[0] == reset) 
 6577              		.loc 1 1411 0
 6578 5053 0FB64580 		movzbl	-128(%rbp), %eax
 6579 5057 3A85B7F2 		cmpb	-3401(%rbp), %al
 6579      FFFF
 6580 505d 7516     		jne	.L317
1412:main_final_with_sync.c **** 						{
1413:main_final_with_sync.c **** 							k--;
 6581              		.loc 1 1413 0
 6582 505f 83ADD0F2 		subl	$1, -3376(%rbp)
 6582      FFFF01
1414:main_final_with_sync.c **** 							printf("%s\n", "-------------------------RESET------------------------");							 
 6583              		.loc 1 1414 0
 6584 5066 BF000000 		movl	$.LC157, %edi
 6584      00
 6585 506b E8000000 		call	puts
 6585      00
1415:main_final_with_sync.c **** 							continue;
 6586              		.loc 1 1415 0
 6587 5070 E9352400 		jmp	.L302
 6587      00
 6588              	.L317:
1416:main_final_with_sync.c **** 						}
1417:main_final_with_sync.c **** 					delay(del);
 6589              		.loc 1 1417 0
 6590 5075 8B85B8F3 		movl	-3144(%rbp), %eax
 6590      FFFF
 6591 507b 89C7     		movl	%eax, %edi
 6592 507d E8000000 		call	delay
 6592      00
1418:main_final_with_sync.c **** 					fStatus = flReadChannel(handle, 2*k, 1, &first_ack1_received[1], &error);
 6593              		.loc 1 1418 0
 6594 5082 8B85D0F2 		movl	-3376(%rbp), %eax
 6594      FFFF
 6595 5088 01C0     		addl	%eax, %eax
 6596 508a 0FB6F0   		movzbl	%al, %esi
 6597 508d 488B85E8 		movq	-3096(%rbp), %rax
 6597      F3FFFF
 6598 5094 488D8DF0 		leaq	-3088(%rbp), %rcx
 6598      F3FFFF
 6599 509b 488D5580 		leaq	-128(%rbp), %rdx
 6600 509f 4883C201 		addq	$1, %rdx
 6601 50a3 4989C8   		movq	%rcx, %r8
 6602 50a6 4889D1   		movq	%rdx, %rcx
 6603 50a9 BA010000 		movl	$1, %edx
 6603      00
 6604 50ae 4889C7   		movq	%rax, %rdi
 6605 50b1 E8000000 		call	flReadChannel
 6605      00
 6606 50b6 8985C0F2 		movl	%eax, -3392(%rbp)
 6606      FFFF
1419:main_final_with_sync.c **** 					fail_count++;
 6607              		.loc 1 1419 0
 6608 50bc 8385CCF2 		addl	$1, -3380(%rbp)
 6608      FFFF01
1420:main_final_with_sync.c **** 					if(first_ack1_received[1] == reset) 
 6609              		.loc 1 1420 0
 6610 50c3 0FB64581 		movzbl	-127(%rbp), %eax
 6611 50c7 3A85B7F2 		cmpb	-3401(%rbp), %al
 6611      FFFF
 6612 50cd 7516     		jne	.L318
1421:main_final_with_sync.c **** 						{
1422:main_final_with_sync.c **** 							k--; 
 6613              		.loc 1 1422 0
 6614 50cf 83ADD0F2 		subl	$1, -3376(%rbp)
 6614      FFFF01
1423:main_final_with_sync.c **** 							printf("%s\n", "-------------------------RESET------------------------");
 6615              		.loc 1 1423 0
 6616 50d6 BF000000 		movl	$.LC157, %edi
 6616      00
 6617 50db E8000000 		call	puts
 6617      00
1424:main_final_with_sync.c **** 							continue;
 6618              		.loc 1 1424 0
 6619 50e0 E9C52300 		jmp	.L302
 6619      00
 6620              	.L318:
1425:main_final_with_sync.c **** 						}
1426:main_final_with_sync.c **** 					delay(del);
 6621              		.loc 1 1426 0
 6622 50e5 8B85B8F3 		movl	-3144(%rbp), %eax
 6622      FFFF
 6623 50eb 89C7     		movl	%eax, %edi
 6624 50ed E8000000 		call	delay
 6624      00
1427:main_final_with_sync.c **** 					fStatus = flReadChannel(handle, 2*k, 1, &first_ack1_received[2], &error);
 6625              		.loc 1 1427 0
 6626 50f2 8B85D0F2 		movl	-3376(%rbp), %eax
 6626      FFFF
 6627 50f8 01C0     		addl	%eax, %eax
 6628 50fa 0FB6F0   		movzbl	%al, %esi
 6629 50fd 488B85E8 		movq	-3096(%rbp), %rax
 6629      F3FFFF
 6630 5104 488D8DF0 		leaq	-3088(%rbp), %rcx
 6630      F3FFFF
 6631 510b 488D5580 		leaq	-128(%rbp), %rdx
 6632 510f 4883C202 		addq	$2, %rdx
 6633 5113 4989C8   		movq	%rcx, %r8
 6634 5116 4889D1   		movq	%rdx, %rcx
 6635 5119 BA010000 		movl	$1, %edx
 6635      00
 6636 511e 4889C7   		movq	%rax, %rdi
 6637 5121 E8000000 		call	flReadChannel
 6637      00
 6638 5126 8985C0F2 		movl	%eax, -3392(%rbp)
 6638      FFFF
1428:main_final_with_sync.c **** 					fail_count++;
 6639              		.loc 1 1428 0
 6640 512c 8385CCF2 		addl	$1, -3380(%rbp)
 6640      FFFF01
1429:main_final_with_sync.c **** 					if(first_ack1_received[2] == reset) 
 6641              		.loc 1 1429 0
 6642 5133 0FB64582 		movzbl	-126(%rbp), %eax
 6643 5137 3A85B7F2 		cmpb	-3401(%rbp), %al
 6643      FFFF
 6644 513d 7516     		jne	.L319
1430:main_final_with_sync.c **** 						{
1431:main_final_with_sync.c **** 							k--; 
 6645              		.loc 1 1431 0
 6646 513f 83ADD0F2 		subl	$1, -3376(%rbp)
 6646      FFFF01
1432:main_final_with_sync.c **** 							printf("%s\n", "-------------------------RESET------------------------");
 6647              		.loc 1 1432 0
 6648 5146 BF000000 		movl	$.LC157, %edi
 6648      00
 6649 514b E8000000 		call	puts
 6649      00
1433:main_final_with_sync.c **** 							continue;
 6650              		.loc 1 1433 0
 6651 5150 E9552300 		jmp	.L302
 6651      00
 6652              	.L319:
1434:main_final_with_sync.c **** 						}
1435:main_final_with_sync.c **** 					delay(del);
 6653              		.loc 1 1435 0
 6654 5155 8B85B8F3 		movl	-3144(%rbp), %eax
 6654      FFFF
 6655 515b 89C7     		movl	%eax, %edi
 6656 515d E8000000 		call	delay
 6656      00
1436:main_final_with_sync.c **** 					fStatus = flReadChannel(handle, 2*k, 1, &first_ack1_received[3], &error);
 6657              		.loc 1 1436 0
 6658 5162 8B85D0F2 		movl	-3376(%rbp), %eax
 6658      FFFF
 6659 5168 01C0     		addl	%eax, %eax
 6660 516a 0FB6F0   		movzbl	%al, %esi
 6661 516d 488B85E8 		movq	-3096(%rbp), %rax
 6661      F3FFFF
 6662 5174 488D8DF0 		leaq	-3088(%rbp), %rcx
 6662      F3FFFF
 6663 517b 488D5580 		leaq	-128(%rbp), %rdx
 6664 517f 4883C203 		addq	$3, %rdx
 6665 5183 4989C8   		movq	%rcx, %r8
 6666 5186 4889D1   		movq	%rdx, %rcx
 6667 5189 BA010000 		movl	$1, %edx
 6667      00
 6668 518e 4889C7   		movq	%rax, %rdi
 6669 5191 E8000000 		call	flReadChannel
 6669      00
 6670 5196 8985C0F2 		movl	%eax, -3392(%rbp)
 6670      FFFF
1437:main_final_with_sync.c **** 					fail_count++;
 6671              		.loc 1 1437 0
 6672 519c 8385CCF2 		addl	$1, -3380(%rbp)
 6672      FFFF01
1438:main_final_with_sync.c **** 					if(first_ack1_received[3] == reset) 
 6673              		.loc 1 1438 0
 6674 51a3 0FB64583 		movzbl	-125(%rbp), %eax
 6675 51a7 3A85B7F2 		cmpb	-3401(%rbp), %al
 6675      FFFF
 6676 51ad 7516     		jne	.L320
1439:main_final_with_sync.c **** 						{
1440:main_final_with_sync.c **** 							k--; 
 6677              		.loc 1 1440 0
 6678 51af 83ADD0F2 		subl	$1, -3376(%rbp)
 6678      FFFF01
1441:main_final_with_sync.c **** 							printf("%s\n", "-------------------------RESET------------------------");
 6679              		.loc 1 1441 0
 6680 51b6 BF000000 		movl	$.LC157, %edi
 6680      00
 6681 51bb E8000000 		call	puts
 6681      00
1442:main_final_with_sync.c **** 							continue;
 6682              		.loc 1 1442 0
 6683 51c0 E9E52200 		jmp	.L302
 6683      00
 6684              	.L320:
1443:main_final_with_sync.c **** 						}
1444:main_final_with_sync.c **** 					printf("%s\n", "First ack1 received successfully");
 6685              		.loc 1 1444 0
 6686 51c5 BF000000 		movl	$.LC172, %edi
 6686      00
 6687 51ca E8000000 		call	puts
 6687      00
1445:main_final_with_sync.c **** 					printf("%s\n", "The first ack1 is ----- in uint8 form");
 6688              		.loc 1 1445 0
 6689 51cf BF000000 		movl	$.LC173, %edi
 6689      00
 6690 51d4 E8000000 		call	puts
 6690      00
 6691              	.LBB58:
1446:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 6692              		.loc 1 1446 0
 6693 51d9 C785E4F2 		movl	$0, -3356(%rbp)
 6693      FFFF0000 
 6693      0000
 6694 51e3 EB28     		jmp	.L321
 6695              	.L322:
1447:main_final_with_sync.c **** 					{
1448:main_final_with_sync.c **** 						printf("%d ", first_ack1_received[i]);
 6696              		.loc 1 1448 0 discriminator 3
 6697 51e5 8B85E4F2 		movl	-3356(%rbp), %eax
 6697      FFFF
 6698 51eb 4898     		cltq
 6699 51ed 0FB64405 		movzbl	-128(%rbp,%rax), %eax
 6699      80
 6700 51f2 0FB6C0   		movzbl	%al, %eax
 6701 51f5 89C6     		movl	%eax, %esi
 6702 51f7 BF000000 		movl	$.LC10, %edi
 6702      00
 6703 51fc B8000000 		movl	$0, %eax
 6703      00
 6704 5201 E8000000 		call	printf
 6704      00
1446:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 6705              		.loc 1 1446 0 discriminator 3
 6706 5206 8385E4F2 		addl	$1, -3356(%rbp)
 6706      FFFF01
 6707              	.L321:
1446:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 6708              		.loc 1 1446 0 is_stmt 0 discriminator 1
 6709 520d 83BDE4F2 		cmpl	$3, -3356(%rbp)
 6709      FFFF03
 6710 5214 7ECF     		jle	.L322
 6711              	.LBE58:
1449:main_final_with_sync.c **** 					}
1450:main_final_with_sync.c **** 					printf("\n");
 6712              		.loc 1 1450 0 is_stmt 1
 6713 5216 BF0A0000 		movl	$10, %edi
 6713      00
 6714 521b E8000000 		call	putchar
 6714      00
1451:main_final_with_sync.c **** 					printf("%s\n", "----------------------H2.3 ended----------------------- ");
 6715              		.loc 1 1451 0
 6716 5220 BF000000 		movl	$.LC174, %edi
 6716      00
 6717 5225 E8000000 		call	puts
 6717      00
1452:main_final_with_sync.c **** 					printf("%s\n", "----------------------H2.4 started----------------------- ");
 6718              		.loc 1 1452 0
 6719 522a BF000000 		movl	$.LC175, %edi
 6719      00
 6720 522f E8000000 		call	puts
 6720      00
1453:main_final_with_sync.c **** 					
1454:main_final_with_sync.c **** 					int encrpyted_ack1[32];
1455:main_final_with_sync.c **** 					printf("%s\n", "Converting encrypted ack1 from uint8 to binary");
 6721              		.loc 1 1455 0
 6722 5234 BF000000 		movl	$.LC176, %edi
 6722      00
 6723 5239 E8000000 		call	puts
 6723      00
1456:main_final_with_sync.c **** 					uint8ToBin(first_ack1_received, encrpyted_ack1);
 6724              		.loc 1 1456 0
 6725 523e 488D95D0 		leaq	-1840(%rbp), %rdx
 6725      F8FFFF
 6726 5245 488D4580 		leaq	-128(%rbp), %rax
 6727 5249 4889D6   		movq	%rdx, %rsi
 6728 524c 4889C7   		movq	%rax, %rdi
 6729 524f E8000000 		call	uint8ToBin
 6729      00
1457:main_final_with_sync.c **** 					printf("%s\n", "The encrypted ack1 is as follows in binary form --");
 6730              		.loc 1 1457 0
 6731 5254 BF000000 		movl	$.LC177, %edi
 6731      00
 6732 5259 E8000000 		call	puts
 6732      00
 6733              	.LBB59:
1458:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 6734              		.loc 1 1458 0
 6735 525e C785E8F2 		movl	$0, -3352(%rbp)
 6735      FFFF0000 
 6735      0000
 6736 5268 EB27     		jmp	.L323
 6737              	.L324:
1459:main_final_with_sync.c **** 					{
1460:main_final_with_sync.c **** 						printf("%d ", encrpyted_ack1[i]);
 6738              		.loc 1 1460 0 discriminator 3
 6739 526a 8B85E8F2 		movl	-3352(%rbp), %eax
 6739      FFFF
 6740 5270 4898     		cltq
 6741 5272 8B8485D0 		movl	-1840(%rbp,%rax,4), %eax
 6741      F8FFFF
 6742 5279 89C6     		movl	%eax, %esi
 6743 527b BF000000 		movl	$.LC10, %edi
 6743      00
 6744 5280 B8000000 		movl	$0, %eax
 6744      00
 6745 5285 E8000000 		call	printf
 6745      00
1458:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 6746              		.loc 1 1458 0 discriminator 3
 6747 528a 8385E8F2 		addl	$1, -3352(%rbp)
 6747      FFFF01
 6748              	.L323:
1458:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 6749              		.loc 1 1458 0 is_stmt 0 discriminator 1
 6750 5291 83BDE8F2 		cmpl	$31, -3352(%rbp)
 6750      FFFF1F
 6751 5298 7ED0     		jle	.L324
 6752              	.LBE59:
1461:main_final_with_sync.c **** 					}
1462:main_final_with_sync.c **** 					printf("\n");
 6753              		.loc 1 1462 0 is_stmt 1
 6754 529a BF0A0000 		movl	$10, %edi
 6754      00
 6755 529f E8000000 		call	putchar
 6755      00
1463:main_final_with_sync.c **** 					int decrypted_ack1[32];
1464:main_final_with_sync.c **** 					decrypter(encrpyted_ack1, K, decrypted_ack1);
 6756              		.loc 1 1464 0
 6757 52a4 488D9550 		leaq	-1712(%rbp), %rdx
 6757      F9FFFF
 6758 52ab 488D8DD0 		leaq	-2608(%rbp), %rcx
 6758      F5FFFF
 6759 52b2 488D85D0 		leaq	-1840(%rbp), %rax
 6759      F8FFFF
 6760 52b9 4889CE   		movq	%rcx, %rsi
 6761 52bc 4889C7   		movq	%rax, %rdi
 6762 52bf E8000000 		call	decrypter
 6762      00
1465:main_final_with_sync.c **** 					printf("%s\n", "The decrypted ack1 in binary is as follows --");
 6763              		.loc 1 1465 0
 6764 52c4 BF000000 		movl	$.LC178, %edi
 6764      00
 6765 52c9 E8000000 		call	puts
 6765      00
 6766              	.LBB60:
1466:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 6767              		.loc 1 1466 0
 6768 52ce C785ECF2 		movl	$0, -3348(%rbp)
 6768      FFFF0000 
 6768      0000
 6769 52d8 EB27     		jmp	.L325
 6770              	.L326:
1467:main_final_with_sync.c **** 					{
1468:main_final_with_sync.c **** 						printf("%d ", decrypted_ack1[i]);
 6771              		.loc 1 1468 0 discriminator 3
 6772 52da 8B85ECF2 		movl	-3348(%rbp), %eax
 6772      FFFF
 6773 52e0 4898     		cltq
 6774 52e2 8B848550 		movl	-1712(%rbp,%rax,4), %eax
 6774      F9FFFF
 6775 52e9 89C6     		movl	%eax, %esi
 6776 52eb BF000000 		movl	$.LC10, %edi
 6776      00
 6777 52f0 B8000000 		movl	$0, %eax
 6777      00
 6778 52f5 E8000000 		call	printf
 6778      00
1466:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 6779              		.loc 1 1466 0 discriminator 3
 6780 52fa 8385ECF2 		addl	$1, -3348(%rbp)
 6780      FFFF01
 6781              	.L325:
1466:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 6782              		.loc 1 1466 0 is_stmt 0 discriminator 1
 6783 5301 83BDECF2 		cmpl	$31, -3348(%rbp)
 6783      FFFF1F
 6784 5308 7ED0     		jle	.L326
 6785              	.LBE60:
1469:main_final_with_sync.c **** 					}
1470:main_final_with_sync.c **** 					printf("\n");
 6786              		.loc 1 1470 0 is_stmt 1
 6787 530a BF0A0000 		movl	$10, %edi
 6787      00
 6788 530f E8000000 		call	putchar
 6788      00
1471:main_final_with_sync.c **** 					printf("%s\n", "Checking if this ack1 is equal to the original ack1 ");
 6789              		.loc 1 1471 0
 6790 5314 BF000000 		movl	$.LC179, %edi
 6790      00
 6791 5319 E8000000 		call	puts
 6791      00
1472:main_final_with_sync.c **** 
1473:main_final_with_sync.c **** 					int ack_helper = 0;
 6792              		.loc 1 1473 0
 6793 531e C785F0F2 		movl	$0, -3344(%rbp)
 6793      FFFF0000 
 6793      0000
 6794              	.LBB61:
1474:main_final_with_sync.c **** 					for(int i=0; i<32; i++)
 6795              		.loc 1 1474 0
 6796 5328 C785F4F2 		movl	$0, -3340(%rbp)
 6796      FFFF0000 
 6796      0000
 6797 5332 EB33     		jmp	.L327
 6798              	.L329:
1475:main_final_with_sync.c **** 					{
1476:main_final_with_sync.c **** 						if(decrypted_ack1[i] != ack1[i])
 6799              		.loc 1 1476 0
 6800 5334 8B85F4F2 		movl	-3340(%rbp), %eax
 6800      FFFF
 6801 533a 4898     		cltq
 6802 533c 8B948550 		movl	-1712(%rbp,%rax,4), %edx
 6802      F9FFFF
 6803 5343 8B85F4F2 		movl	-3340(%rbp), %eax
 6803      FFFF
 6804 5349 4898     		cltq
 6805 534b 8B848550 		movl	-2480(%rbp,%rax,4), %eax
 6805      F6FFFF
 6806 5352 39C2     		cmpl	%eax, %edx
 6807 5354 740A     		je	.L328
1477:main_final_with_sync.c **** 						{
1478:main_final_with_sync.c **** 							ack_helper = 1;
 6808              		.loc 1 1478 0
 6809 5356 C785F0F2 		movl	$1, -3344(%rbp)
 6809      FFFF0100 
 6809      0000
 6810              	.L328:
1474:main_final_with_sync.c **** 					{
 6811              		.loc 1 1474 0 discriminator 2
 6812 5360 8385F4F2 		addl	$1, -3340(%rbp)
 6812      FFFF01
 6813              	.L327:
1474:main_final_with_sync.c **** 					{
 6814              		.loc 1 1474 0 is_stmt 0 discriminator 1
 6815 5367 83BDF4F2 		cmpl	$31, -3340(%rbp)
 6815      FFFF1F
 6816 536e 7EC4     		jle	.L329
 6817              	.LBE61:
1479:main_final_with_sync.c **** 						}
1480:main_final_with_sync.c **** 					}
1481:main_final_with_sync.c **** 
1482:main_final_with_sync.c **** 					if(ack_helper == 1)
 6818              		.loc 1 1482 0 is_stmt 1
 6819 5370 83BDF0F2 		cmpl	$1, -3344(%rbp)
 6819      FFFF01
 6820 5377 0F857603 		jne	.L330
 6820      0000
 6821              	.LBB62:
1483:main_final_with_sync.c **** 					{
1484:main_final_with_sync.c **** 						printf("%s\n", "Ack1 received doesn't match with the original one");
 6822              		.loc 1 1484 0
 6823 537d BF000000 		movl	$.LC180, %edi
 6823      00
 6824 5382 E8000000 		call	puts
 6824      00
1485:main_final_with_sync.c **** 						uint8 encrypted_ack1_again[4];
1486:main_final_with_sync.c **** 						delay(1000000);
 6825              		.loc 1 1486 0
 6826 5387 BF40420F 		movl	$1000000, %edi
 6826      00
 6827 538c E8000000 		call	delay
 6827      00
1487:main_final_with_sync.c **** 						printf("%s\n", "Reading the channel 2i again ");
 6828              		.loc 1 1487 0
 6829 5391 BF000000 		movl	$.LC181, %edi
 6829      00
 6830 5396 E8000000 		call	puts
 6830      00
1488:main_final_with_sync.c **** 						delay(del);
 6831              		.loc 1 1488 0
 6832 539b 8B85B8F3 		movl	-3144(%rbp), %eax
 6832      FFFF
 6833 53a1 89C7     		movl	%eax, %edi
 6834 53a3 E8000000 		call	delay
 6834      00
1489:main_final_with_sync.c **** 						fStatus = flReadChannel(handle, 2*k, 1, &encrypted_ack1_again[0], &error);
 6835              		.loc 1 1489 0
 6836 53a8 8B85D0F2 		movl	-3376(%rbp), %eax
 6836      FFFF
 6837 53ae 01C0     		addl	%eax, %eax
 6838 53b0 0FB6F0   		movzbl	%al, %esi
 6839 53b3 488B85E8 		movq	-3096(%rbp), %rax
 6839      F3FFFF
 6840 53ba 488D8DF0 		leaq	-3088(%rbp), %rcx
 6840      F3FFFF
 6841 53c1 488D55D0 		leaq	-48(%rbp), %rdx
 6842 53c5 4989C8   		movq	%rcx, %r8
 6843 53c8 4889D1   		movq	%rdx, %rcx
 6844 53cb BA010000 		movl	$1, %edx
 6844      00
 6845 53d0 4889C7   		movq	%rax, %rdi
 6846 53d3 E8000000 		call	flReadChannel
 6846      00
 6847 53d8 8985C0F2 		movl	%eax, -3392(%rbp)
 6847      FFFF
1490:main_final_with_sync.c **** 						fail_count++;
 6848              		.loc 1 1490 0
 6849 53de 8385CCF2 		addl	$1, -3380(%rbp)
 6849      FFFF01
1491:main_final_with_sync.c **** 
1492:main_final_with_sync.c **** 						if(encrypted_ack1_again[0] == reset) 
 6850              		.loc 1 1492 0
 6851 53e5 0FB645D0 		movzbl	-48(%rbp), %eax
 6852 53e9 3A85B7F2 		cmpb	-3401(%rbp), %al
 6852      FFFF
 6853 53ef 7516     		jne	.L331
1493:main_final_with_sync.c **** 							{
1494:main_final_with_sync.c **** 								k--; 
 6854              		.loc 1 1494 0
 6855 53f1 83ADD0F2 		subl	$1, -3376(%rbp)
 6855      FFFF01
1495:main_final_with_sync.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 6856              		.loc 1 1495 0
 6857 53f8 BF000000 		movl	$.LC157, %edi
 6857      00
 6858 53fd E8000000 		call	puts
 6858      00
1496:main_final_with_sync.c **** 								continue;
 6859              		.loc 1 1496 0
 6860 5402 E9A32000 		jmp	.L302
 6860      00
 6861              	.L331:
1497:main_final_with_sync.c **** 							}
1498:main_final_with_sync.c **** 						delay(del);
 6862              		.loc 1 1498 0
 6863 5407 8B85B8F3 		movl	-3144(%rbp), %eax
 6863      FFFF
 6864 540d 89C7     		movl	%eax, %edi
 6865 540f E8000000 		call	delay
 6865      00
1499:main_final_with_sync.c **** 						fStatus = flReadChannel(handle, 2*k, 1, &encrypted_ack1_again[1], &error);
 6866              		.loc 1 1499 0
 6867 5414 8B85D0F2 		movl	-3376(%rbp), %eax
 6867      FFFF
 6868 541a 01C0     		addl	%eax, %eax
 6869 541c 0FB6F0   		movzbl	%al, %esi
 6870 541f 488B85E8 		movq	-3096(%rbp), %rax
 6870      F3FFFF
 6871 5426 488D8DF0 		leaq	-3088(%rbp), %rcx
 6871      F3FFFF
 6872 542d 488D55D0 		leaq	-48(%rbp), %rdx
 6873 5431 4883C201 		addq	$1, %rdx
 6874 5435 4989C8   		movq	%rcx, %r8
 6875 5438 4889D1   		movq	%rdx, %rcx
 6876 543b BA010000 		movl	$1, %edx
 6876      00
 6877 5440 4889C7   		movq	%rax, %rdi
 6878 5443 E8000000 		call	flReadChannel
 6878      00
 6879 5448 8985C0F2 		movl	%eax, -3392(%rbp)
 6879      FFFF
1500:main_final_with_sync.c **** 						fail_count++;
 6880              		.loc 1 1500 0
 6881 544e 8385CCF2 		addl	$1, -3380(%rbp)
 6881      FFFF01
1501:main_final_with_sync.c **** 						if(encrypted_ack1_again[1] == reset) 
 6882              		.loc 1 1501 0
 6883 5455 0FB645D1 		movzbl	-47(%rbp), %eax
 6884 5459 3A85B7F2 		cmpb	-3401(%rbp), %al
 6884      FFFF
 6885 545f 7516     		jne	.L333
1502:main_final_with_sync.c **** 							{
1503:main_final_with_sync.c **** 								k--; 
 6886              		.loc 1 1503 0
 6887 5461 83ADD0F2 		subl	$1, -3376(%rbp)
 6887      FFFF01
1504:main_final_with_sync.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 6888              		.loc 1 1504 0
 6889 5468 BF000000 		movl	$.LC157, %edi
 6889      00
 6890 546d E8000000 		call	puts
 6890      00
1505:main_final_with_sync.c **** 								continue;
 6891              		.loc 1 1505 0
 6892 5472 E9332000 		jmp	.L302
 6892      00
 6893              	.L333:
1506:main_final_with_sync.c **** 							}
1507:main_final_with_sync.c **** 						delay(del);
 6894              		.loc 1 1507 0
 6895 5477 8B85B8F3 		movl	-3144(%rbp), %eax
 6895      FFFF
 6896 547d 89C7     		movl	%eax, %edi
 6897 547f E8000000 		call	delay
 6897      00
1508:main_final_with_sync.c **** 						fStatus = flReadChannel(handle, 2*k, 1, &encrypted_ack1_again[2], &error);
 6898              		.loc 1 1508 0
 6899 5484 8B85D0F2 		movl	-3376(%rbp), %eax
 6899      FFFF
 6900 548a 01C0     		addl	%eax, %eax
 6901 548c 0FB6F0   		movzbl	%al, %esi
 6902 548f 488B85E8 		movq	-3096(%rbp), %rax
 6902      F3FFFF
 6903 5496 488D8DF0 		leaq	-3088(%rbp), %rcx
 6903      F3FFFF
 6904 549d 488D55D0 		leaq	-48(%rbp), %rdx
 6905 54a1 4883C202 		addq	$2, %rdx
 6906 54a5 4989C8   		movq	%rcx, %r8
 6907 54a8 4889D1   		movq	%rdx, %rcx
 6908 54ab BA010000 		movl	$1, %edx
 6908      00
 6909 54b0 4889C7   		movq	%rax, %rdi
 6910 54b3 E8000000 		call	flReadChannel
 6910      00
 6911 54b8 8985C0F2 		movl	%eax, -3392(%rbp)
 6911      FFFF
1509:main_final_with_sync.c **** 						fail_count++;
 6912              		.loc 1 1509 0
 6913 54be 8385CCF2 		addl	$1, -3380(%rbp)
 6913      FFFF01
1510:main_final_with_sync.c **** 						if(encrypted_ack1_again[2] == reset) 
 6914              		.loc 1 1510 0
 6915 54c5 0FB645D2 		movzbl	-46(%rbp), %eax
 6916 54c9 3A85B7F2 		cmpb	-3401(%rbp), %al
 6916      FFFF
 6917 54cf 7516     		jne	.L334
1511:main_final_with_sync.c **** 							{
1512:main_final_with_sync.c **** 								k--; 
 6918              		.loc 1 1512 0
 6919 54d1 83ADD0F2 		subl	$1, -3376(%rbp)
 6919      FFFF01
1513:main_final_with_sync.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 6920              		.loc 1 1513 0
 6921 54d8 BF000000 		movl	$.LC157, %edi
 6921      00
 6922 54dd E8000000 		call	puts
 6922      00
1514:main_final_with_sync.c **** 								continue;
 6923              		.loc 1 1514 0
 6924 54e2 E9C31F00 		jmp	.L302
 6924      00
 6925              	.L334:
1515:main_final_with_sync.c **** 							}
1516:main_final_with_sync.c **** 						delay(del);
 6926              		.loc 1 1516 0
 6927 54e7 8B85B8F3 		movl	-3144(%rbp), %eax
 6927      FFFF
 6928 54ed 89C7     		movl	%eax, %edi
 6929 54ef E8000000 		call	delay
 6929      00
1517:main_final_with_sync.c **** 						fStatus = flReadChannel(handle, 2*k, 1, &encrypted_ack1_again[3], &error);
 6930              		.loc 1 1517 0
 6931 54f4 8B85D0F2 		movl	-3376(%rbp), %eax
 6931      FFFF
 6932 54fa 01C0     		addl	%eax, %eax
 6933 54fc 0FB6F0   		movzbl	%al, %esi
 6934 54ff 488B85E8 		movq	-3096(%rbp), %rax
 6934      F3FFFF
 6935 5506 488D8DF0 		leaq	-3088(%rbp), %rcx
 6935      F3FFFF
 6936 550d 488D55D0 		leaq	-48(%rbp), %rdx
 6937 5511 4883C203 		addq	$3, %rdx
 6938 5515 4989C8   		movq	%rcx, %r8
 6939 5518 4889D1   		movq	%rdx, %rcx
 6940 551b BA010000 		movl	$1, %edx
 6940      00
 6941 5520 4889C7   		movq	%rax, %rdi
 6942 5523 E8000000 		call	flReadChannel
 6942      00
 6943 5528 8985C0F2 		movl	%eax, -3392(%rbp)
 6943      FFFF
1518:main_final_with_sync.c **** 						fail_count++;
 6944              		.loc 1 1518 0
 6945 552e 8385CCF2 		addl	$1, -3380(%rbp)
 6945      FFFF01
1519:main_final_with_sync.c **** 						if(encrypted_ack1_again[3] == reset) 
 6946              		.loc 1 1519 0
 6947 5535 0FB645D3 		movzbl	-45(%rbp), %eax
 6948 5539 3A85B7F2 		cmpb	-3401(%rbp), %al
 6948      FFFF
 6949 553f 7517     		jne	.L335
1520:main_final_with_sync.c **** 							{
1521:main_final_with_sync.c **** 								k--; 
 6950              		.loc 1 1521 0
 6951 5541 83ADD0F2 		subl	$1, -3376(%rbp)
 6951      FFFF01
1522:main_final_with_sync.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 6952              		.loc 1 1522 0
 6953 5548 BF000000 		movl	$.LC157, %edi
 6953      00
 6954 554d E8000000 		call	puts
 6954      00
1523:main_final_with_sync.c **** 								continue;
 6955              		.loc 1 1523 0
 6956 5552 90       		nop
 6957 5553 E9521F00 		jmp	.L302
 6957      00
 6958              	.L335:
1524:main_final_with_sync.c **** 							}
1525:main_final_with_sync.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 6959              		.loc 1 1525 0
 6960 5558 83BDC0F2 		cmpl	$0, -3392(%rbp)
 6960      FFFF00
 6961 555f 740F     		je	.L336
 6962              		.loc 1 1525 0 is_stmt 0 discriminator 1
 6963 5561 C785BCF2 		movl	$1, -3396(%rbp)
 6963      FFFF0100 
 6963      0000
 6964              	.LBE62:
 6965              	.LBE53:
 6966              	.LBE52:
 6967              	.LBE51:
1294:main_final_with_sync.c **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 6968              		.loc 1 1294 0 is_stmt 1 discriminator 1
 6969 556b E9A81F00 		jmp	.L230
 6969      00
 6970              	.L336:
 6971              	.LBB112:
 6972              	.LBB109:
 6973              	.LBB106:
 6974              	.LBB67:
1526:main_final_with_sync.c **** 						printf("%s\n", "Get the encrypted ack1 again successfully ---");
 6975              		.loc 1 1526 0
 6976 5570 BF000000 		movl	$.LC182, %edi
 6976      00
 6977 5575 E8000000 		call	puts
 6977      00
 6978              	.LBB63:
1527:main_final_with_sync.c **** 						for (int i = 0; i < 4; ++i)
 6979              		.loc 1 1527 0
 6980 557a C785F8F2 		movl	$0, -3336(%rbp)
 6980      FFFF0000 
 6980      0000
 6981 5584 EB28     		jmp	.L337
 6982              	.L338:
1528:main_final_with_sync.c **** 						{
1529:main_final_with_sync.c **** 							printf("%d ", encrypted_ack1_again[i]);
 6983              		.loc 1 1529 0 discriminator 3
 6984 5586 8B85F8F2 		movl	-3336(%rbp), %eax
 6984      FFFF
 6985 558c 4898     		cltq
 6986 558e 0FB64405 		movzbl	-48(%rbp,%rax), %eax
 6986      D0
 6987 5593 0FB6C0   		movzbl	%al, %eax
 6988 5596 89C6     		movl	%eax, %esi
 6989 5598 BF000000 		movl	$.LC10, %edi
 6989      00
 6990 559d B8000000 		movl	$0, %eax
 6990      00
 6991 55a2 E8000000 		call	printf
 6991      00
1527:main_final_with_sync.c **** 						for (int i = 0; i < 4; ++i)
 6992              		.loc 1 1527 0 discriminator 3
 6993 55a7 8385F8F2 		addl	$1, -3336(%rbp)
 6993      FFFF01
 6994              	.L337:
1527:main_final_with_sync.c **** 						for (int i = 0; i < 4; ++i)
 6995              		.loc 1 1527 0 is_stmt 0 discriminator 1
 6996 55ae 83BDF8F2 		cmpl	$3, -3336(%rbp)
 6996      FFFF03
 6997 55b5 7ECF     		jle	.L338
 6998              	.LBE63:
1530:main_final_with_sync.c **** 						}
1531:main_final_with_sync.c **** 						printf("\n");
 6999              		.loc 1 1531 0 is_stmt 1
 7000 55b7 BF0A0000 		movl	$10, %edi
 7000      00
 7001 55bc E8000000 		call	putchar
 7001      00
1532:main_final_with_sync.c **** 						int encrypted_ack1_again1[32];
1533:main_final_with_sync.c **** 						printf("%s\n", "Converting encrypted ack1 from uint8 to binary");
 7002              		.loc 1 1533 0
 7003 55c1 BF000000 		movl	$.LC176, %edi
 7003      00
 7004 55c6 E8000000 		call	puts
 7004      00
1534:main_final_with_sync.c **** 						uint8ToBin(encrypted_ack1_again, encrypted_ack1_again1);
 7005              		.loc 1 1534 0
 7006 55cb 488D9550 		leaq	-688(%rbp), %rdx
 7006      FDFFFF
 7007 55d2 488D45D0 		leaq	-48(%rbp), %rax
 7008 55d6 4889D6   		movq	%rdx, %rsi
 7009 55d9 4889C7   		movq	%rax, %rdi
 7010 55dc E8000000 		call	uint8ToBin
 7010      00
1535:main_final_with_sync.c **** 						printf("%s\n", "Converted encrypted ack1 to binary and it is as ----");
 7011              		.loc 1 1535 0
 7012 55e1 BF000000 		movl	$.LC183, %edi
 7012      00
 7013 55e6 E8000000 		call	puts
 7013      00
 7014              	.LBB64:
1536:main_final_with_sync.c **** 						for (int i = 0; i < 32; ++i)
 7015              		.loc 1 1536 0
 7016 55eb C785FCF2 		movl	$0, -3332(%rbp)
 7016      FFFF0000 
 7016      0000
 7017 55f5 EB27     		jmp	.L339
 7018              	.L340:
1537:main_final_with_sync.c **** 						{
1538:main_final_with_sync.c **** 							printf("%d ", encrypted_ack1_again1[i]);
 7019              		.loc 1 1538 0 discriminator 3
 7020 55f7 8B85FCF2 		movl	-3332(%rbp), %eax
 7020      FFFF
 7021 55fd 4898     		cltq
 7022 55ff 8B848550 		movl	-688(%rbp,%rax,4), %eax
 7022      FDFFFF
 7023 5606 89C6     		movl	%eax, %esi
 7024 5608 BF000000 		movl	$.LC10, %edi
 7024      00
 7025 560d B8000000 		movl	$0, %eax
 7025      00
 7026 5612 E8000000 		call	printf
 7026      00
1536:main_final_with_sync.c **** 						for (int i = 0; i < 32; ++i)
 7027              		.loc 1 1536 0 discriminator 3
 7028 5617 8385FCF2 		addl	$1, -3332(%rbp)
 7028      FFFF01
 7029              	.L339:
1536:main_final_with_sync.c **** 						for (int i = 0; i < 32; ++i)
 7030              		.loc 1 1536 0 is_stmt 0 discriminator 1
 7031 561e 83BDFCF2 		cmpl	$31, -3332(%rbp)
 7031      FFFF1F
 7032 5625 7ED0     		jle	.L340
 7033              	.LBE64:
1539:main_final_with_sync.c **** 						}
1540:main_final_with_sync.c **** 						printf("\n");
 7034              		.loc 1 1540 0 is_stmt 1
 7035 5627 BF0A0000 		movl	$10, %edi
 7035      00
 7036 562c E8000000 		call	putchar
 7036      00
1541:main_final_with_sync.c **** 						int decrypted_ack1_again1[32];
1542:main_final_with_sync.c **** 						printf("%s\n", "Decrypting the encrypted ack1 ");
 7037              		.loc 1 1542 0
 7038 5631 BF000000 		movl	$.LC184, %edi
 7038      00
 7039 5636 E8000000 		call	puts
 7039      00
1543:main_final_with_sync.c **** 						decrypter(encrypted_ack1_again1, K, decrypted_ack1_again1);
 7040              		.loc 1 1543 0
 7041 563b 488D9560 		leaq	-416(%rbp), %rdx
 7041      FEFFFF
 7042 5642 488D8DD0 		leaq	-2608(%rbp), %rcx
 7042      F5FFFF
 7043 5649 488D8550 		leaq	-688(%rbp), %rax
 7043      FDFFFF
 7044 5650 4889CE   		movq	%rcx, %rsi
 7045 5653 4889C7   		movq	%rax, %rdi
 7046 5656 E8000000 		call	decrypter
 7046      00
1544:main_final_with_sync.c **** 						printf("%s\n", "Ack1 got decrpyted and is as ----");
 7047              		.loc 1 1544 0
 7048 565b BF000000 		movl	$.LC185, %edi
 7048      00
 7049 5660 E8000000 		call	puts
 7049      00
 7050              	.LBB65:
1545:main_final_with_sync.c **** 						for (int i = 0; i < 32; ++i)
 7051              		.loc 1 1545 0
 7052 5665 C78500F3 		movl	$0, -3328(%rbp)
 7052      FFFF0000 
 7052      0000
 7053 566f EB27     		jmp	.L341
 7054              	.L342:
1546:main_final_with_sync.c **** 						{
1547:main_final_with_sync.c **** 							printf("%d ", decrypted_ack1_again1[i]);
 7055              		.loc 1 1547 0 discriminator 3
 7056 5671 8B8500F3 		movl	-3328(%rbp), %eax
 7056      FFFF
 7057 5677 4898     		cltq
 7058 5679 8B848560 		movl	-416(%rbp,%rax,4), %eax
 7058      FEFFFF
 7059 5680 89C6     		movl	%eax, %esi
 7060 5682 BF000000 		movl	$.LC10, %edi
 7060      00
 7061 5687 B8000000 		movl	$0, %eax
 7061      00
 7062 568c E8000000 		call	printf
 7062      00
1545:main_final_with_sync.c **** 						for (int i = 0; i < 32; ++i)
 7063              		.loc 1 1545 0 discriminator 3
 7064 5691 838500F3 		addl	$1, -3328(%rbp)
 7064      FFFF01
 7065              	.L341:
1545:main_final_with_sync.c **** 						for (int i = 0; i < 32; ++i)
 7066              		.loc 1 1545 0 is_stmt 0 discriminator 1
 7067 5698 83BD00F3 		cmpl	$31, -3328(%rbp)
 7067      FFFF1F
 7068 569f 7ED0     		jle	.L342
 7069              	.LBE65:
1548:main_final_with_sync.c **** 						}
1549:main_final_with_sync.c **** 						printf("\n");
 7070              		.loc 1 1549 0 is_stmt 1
 7071 56a1 BF0A0000 		movl	$10, %edi
 7071      00
 7072 56a6 E8000000 		call	putchar
 7072      00
 7073              	.LBB66:
1550:main_final_with_sync.c **** 						for(int i=0; i<32; i++)
 7074              		.loc 1 1550 0
 7075 56ab C78504F3 		movl	$0, -3324(%rbp)
 7075      FFFF0000 
 7075      0000
 7076 56b5 EB33     		jmp	.L343
 7077              	.L345:
1551:main_final_with_sync.c **** 						{
1552:main_final_with_sync.c **** 							if(decrypted_ack1_again1[i] != ack1[i])
 7078              		.loc 1 1552 0
 7079 56b7 8B8504F3 		movl	-3324(%rbp), %eax
 7079      FFFF
 7080 56bd 4898     		cltq
 7081 56bf 8B948560 		movl	-416(%rbp,%rax,4), %edx
 7081      FEFFFF
 7082 56c6 8B8504F3 		movl	-3324(%rbp), %eax
 7082      FFFF
 7083 56cc 4898     		cltq
 7084 56ce 8B848550 		movl	-2480(%rbp,%rax,4), %eax
 7084      F6FFFF
 7085 56d5 39C2     		cmpl	%eax, %edx
 7086 56d7 740A     		je	.L344
1553:main_final_with_sync.c **** 							{
1554:main_final_with_sync.c **** 								ack_helper = 2;
 7087              		.loc 1 1554 0
 7088 56d9 C785F0F2 		movl	$2, -3344(%rbp)
 7088      FFFF0200 
 7088      0000
 7089              	.L344:
1550:main_final_with_sync.c **** 						{
 7090              		.loc 1 1550 0 discriminator 2
 7091 56e3 838504F3 		addl	$1, -3324(%rbp)
 7091      FFFF01
 7092              	.L343:
1550:main_final_with_sync.c **** 						{
 7093              		.loc 1 1550 0 is_stmt 0 discriminator 1
 7094 56ea 83BD04F3 		cmpl	$31, -3324(%rbp)
 7094      FFFF1F
 7095 56f1 7EC4     		jle	.L345
 7096              	.L330:
 7097              	.LBE66:
 7098              	.LBE67:
1555:main_final_with_sync.c **** 							}
1556:main_final_with_sync.c **** 						}
1557:main_final_with_sync.c **** 
1558:main_final_with_sync.c **** 					}
1559:main_final_with_sync.c **** 
1560:main_final_with_sync.c **** 					printf("%s\n", "----------------------H2.4 ended----------------------- ");
 7099              		.loc 1 1560 0 is_stmt 1
 7100 56f3 BF000000 		movl	$.LC186, %edi
 7100      00
 7101 56f8 E8000000 		call	puts
 7101      00
1561:main_final_with_sync.c **** 
1562:main_final_with_sync.c **** 					printf("%s\n", "-------------------------H2.5 started-------------------------");
 7102              		.loc 1 1562 0
 7103 56fd BF000000 		movl	$.LC187, %edi
 7103      00
 7104 5702 E8000000 		call	puts
 7104      00
1563:main_final_with_sync.c **** 					
1564:main_final_with_sync.c **** 					if(ack_helper == 2)
 7105              		.loc 1 1564 0
 7106 5707 83BDF0F2 		cmpl	$2, -3344(%rbp)
 7106      FFFF02
 7107 570e 7551     		jne	.L346
1565:main_final_with_sync.c **** 					{
1566:main_final_with_sync.c **** 						printf("%s\n", "Fails to receive encrypted ack1 ");
 7108              		.loc 1 1566 0
 7109 5710 BF000000 		movl	$.LC188, %edi
 7109      00
 7110 5715 E8000000 		call	puts
 7110      00
1567:main_final_with_sync.c **** 						printf("%s", "Fail Count = ");
 7111              		.loc 1 1567 0
 7112 571a BE000000 		movl	$.LC189, %esi
 7112      00
 7113 571f BF000000 		movl	$.LC153, %edi
 7113      00
 7114 5724 B8000000 		movl	$0, %eax
 7114      00
 7115 5729 E8000000 		call	printf
 7115      00
1568:main_final_with_sync.c **** 						printf("%d\n", fail_count );
 7116              		.loc 1 1568 0
 7117 572e 8B85CCF2 		movl	-3380(%rbp), %eax
 7117      FFFF
 7118 5734 89C6     		movl	%eax, %esi
 7119 5736 BF000000 		movl	$.LC154, %edi
 7119      00
 7120 573b B8000000 		movl	$0, %eax
 7120      00
 7121 5740 E8000000 		call	printf
 7121      00
1569:main_final_with_sync.c **** 
1570:main_final_with_sync.c **** 						if(k == 63)
 7122              		.loc 1 1570 0
 7123 5745 83BDD0F2 		cmpl	$63, -3376(%rbp)
 7123      FFFF3F
 7124 574c 0F85481D 		jne	.L463
 7124      0000
1571:main_final_with_sync.c **** 						{
1572:main_final_with_sync.c **** 							k = 0;
 7125              		.loc 1 1572 0
 7126 5752 C785D0F2 		movl	$0, -3376(%rbp)
 7126      FFFF0000 
 7126      0000
1573:main_final_with_sync.c **** 						}
1574:main_final_with_sync.c **** 						continue;
 7127              		.loc 1 1574 0
 7128 575c E9391D00 		jmp	.L463
 7128      00
 7129              	.L346:
1575:main_final_with_sync.c **** 					}
1576:main_final_with_sync.c **** 
1577:main_final_with_sync.c **** 					printf("%s\n", "-------------------------H2.5 ended-------------------------");
 7130              		.loc 1 1577 0
 7131 5761 BF000000 		movl	$.LC190, %edi
 7131      00
 7132 5766 E8000000 		call	puts
 7132      00
1578:main_final_with_sync.c **** 
1579:main_final_with_sync.c **** 					printf("%s\n", "-------------------------H3 starts--------------------------");
 7133              		.loc 1 1579 0
 7134 576b BF000000 		movl	$.LC191, %edi
 7134      00
 7135 5770 E8000000 		call	puts
 7135      00
1580:main_final_with_sync.c **** 
1581:main_final_with_sync.c **** 					int encrypted_ack2[32];
1582:main_final_with_sync.c **** 					printf("%s\n", "encrypting ack2 ");
 7136              		.loc 1 1582 0
 7137 5775 BF000000 		movl	$.LC192, %edi
 7137      00
 7138 577a E8000000 		call	puts
 7138      00
1583:main_final_with_sync.c **** 					encrypter(ack2, K, encrypted_ack2);
 7139              		.loc 1 1583 0
 7140 577f 488D95D0 		leaq	-1584(%rbp), %rdx
 7140      F9FFFF
 7141 5786 488D8DD0 		leaq	-2608(%rbp), %rcx
 7141      F5FFFF
 7142 578d 488D85D0 		leaq	-2352(%rbp), %rax
 7142      F6FFFF
 7143 5794 4889CE   		movq	%rcx, %rsi
 7144 5797 4889C7   		movq	%rax, %rdi
 7145 579a E8000000 		call	encrypter
 7145      00
1584:main_final_with_sync.c **** 					printf("%s\n", "Ack2 got encrypted and it is as -----");
 7146              		.loc 1 1584 0
 7147 579f BF000000 		movl	$.LC193, %edi
 7147      00
 7148 57a4 E8000000 		call	puts
 7148      00
 7149              	.LBB68:
1585:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 7150              		.loc 1 1585 0
 7151 57a9 C78508F3 		movl	$0, -3320(%rbp)
 7151      FFFF0000 
 7151      0000
 7152 57b3 EB27     		jmp	.L348
 7153              	.L349:
1586:main_final_with_sync.c **** 					{
1587:main_final_with_sync.c **** 						printf("%d ", encrypted_ack2[i]);
 7154              		.loc 1 1587 0 discriminator 3
 7155 57b5 8B8508F3 		movl	-3320(%rbp), %eax
 7155      FFFF
 7156 57bb 4898     		cltq
 7157 57bd 8B8485D0 		movl	-1584(%rbp,%rax,4), %eax
 7157      F9FFFF
 7158 57c4 89C6     		movl	%eax, %esi
 7159 57c6 BF000000 		movl	$.LC10, %edi
 7159      00
 7160 57cb B8000000 		movl	$0, %eax
 7160      00
 7161 57d0 E8000000 		call	printf
 7161      00
1585:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 7162              		.loc 1 1585 0 discriminator 3
 7163 57d5 838508F3 		addl	$1, -3320(%rbp)
 7163      FFFF01
 7164              	.L348:
1585:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 7165              		.loc 1 1585 0 is_stmt 0 discriminator 1
 7166 57dc 83BD08F3 		cmpl	$31, -3320(%rbp)
 7166      FFFF1F
 7167 57e3 7ED0     		jle	.L349
 7168              	.LBE68:
1588:main_final_with_sync.c **** 					}
1589:main_final_with_sync.c **** 					printf("\n");
 7169              		.loc 1 1589 0 is_stmt 1
 7170 57e5 BF0A0000 		movl	$10, %edi
 7170      00
 7171 57ea E8000000 		call	putchar
 7171      00
1590:main_final_with_sync.c **** 					uint8 encrpyted_ack2_tosend[4];
1591:main_final_with_sync.c **** 					printf("%s\n", "Converting encrypted ack2 from binary to uint8");
 7172              		.loc 1 1591 0
 7173 57ef BF000000 		movl	$.LC194, %edi
 7173      00
 7174 57f4 E8000000 		call	puts
 7174      00
1592:main_final_with_sync.c **** 					BinTouint8(encrpyted_ack2_tosend, encrypted_ack2);
 7175              		.loc 1 1592 0
 7176 57f9 488D95D0 		leaq	-1584(%rbp), %rdx
 7176      F9FFFF
 7177 5800 488D4590 		leaq	-112(%rbp), %rax
 7178 5804 4889D6   		movq	%rdx, %rsi
 7179 5807 4889C7   		movq	%rax, %rdi
 7180 580a E8000000 		call	BinTouint8
 7180      00
1593:main_final_with_sync.c **** 					printf("%s\n", "Converted encrypted ack2 to uint8 and it is as -----");
 7181              		.loc 1 1593 0
 7182 580f BF000000 		movl	$.LC195, %edi
 7182      00
 7183 5814 E8000000 		call	puts
 7183      00
 7184              	.LBB69:
1594:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 7185              		.loc 1 1594 0
 7186 5819 C7850CF3 		movl	$0, -3316(%rbp)
 7186      FFFF0000 
 7186      0000
 7187 5823 EB28     		jmp	.L350
 7188              	.L351:
1595:main_final_with_sync.c **** 					{
1596:main_final_with_sync.c **** 						printf("%d ", encrpyted_ack2_tosend[i]);
 7189              		.loc 1 1596 0 discriminator 3
 7190 5825 8B850CF3 		movl	-3316(%rbp), %eax
 7190      FFFF
 7191 582b 4898     		cltq
 7192 582d 0FB64405 		movzbl	-112(%rbp,%rax), %eax
 7192      90
 7193 5832 0FB6C0   		movzbl	%al, %eax
 7194 5835 89C6     		movl	%eax, %esi
 7195 5837 BF000000 		movl	$.LC10, %edi
 7195      00
 7196 583c B8000000 		movl	$0, %eax
 7196      00
 7197 5841 E8000000 		call	printf
 7197      00
1594:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 7198              		.loc 1 1594 0 discriminator 3
 7199 5846 83850CF3 		addl	$1, -3316(%rbp)
 7199      FFFF01
 7200              	.L350:
1594:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 7201              		.loc 1 1594 0 is_stmt 0 discriminator 1
 7202 584d 83BD0CF3 		cmpl	$3, -3316(%rbp)
 7202      FFFF03
 7203 5854 7ECF     		jle	.L351
 7204              	.LBE69:
1597:main_final_with_sync.c **** 					}
1598:main_final_with_sync.c **** 					printf("\n");
 7205              		.loc 1 1598 0 is_stmt 1
 7206 5856 BF0A0000 		movl	$10, %edi
 7206      00
 7207 585b E8000000 		call	putchar
 7207      00
1599:main_final_with_sync.c **** 					printf("%s\n", "Sending encrypted ack2 to fpga ");
 7208              		.loc 1 1599 0
 7209 5860 BF000000 		movl	$.LC196, %edi
 7209      00
 7210 5865 E8000000 		call	puts
 7210      00
1600:main_final_with_sync.c **** 					delay(del);
 7211              		.loc 1 1600 0
 7212 586a 8B85B8F3 		movl	-3144(%rbp), %eax
 7212      FFFF
 7213 5870 89C7     		movl	%eax, %edi
 7214 5872 E8000000 		call	delay
 7214      00
1601:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &encrpyted_ack2_tosend[0], &error);
 7215              		.loc 1 1601 0
 7216 5877 8B85D0F2 		movl	-3376(%rbp), %eax
 7216      FFFF
 7217 587d 01C0     		addl	%eax, %eax
 7218 587f 83C001   		addl	$1, %eax
 7219 5882 0FB6F0   		movzbl	%al, %esi
 7220 5885 488B85E8 		movq	-3096(%rbp), %rax
 7220      F3FFFF
 7221 588c 488D8DF0 		leaq	-3088(%rbp), %rcx
 7221      F3FFFF
 7222 5893 488D5590 		leaq	-112(%rbp), %rdx
 7223 5897 4989C8   		movq	%rcx, %r8
 7224 589a 4889D1   		movq	%rdx, %rcx
 7225 589d BA010000 		movl	$1, %edx
 7225      00
 7226 58a2 4889C7   		movq	%rax, %rdi
 7227 58a5 E8000000 		call	flWriteChannel
 7227      00
 7228 58aa 8985C0F2 		movl	%eax, -3392(%rbp)
 7228      FFFF
1602:main_final_with_sync.c **** 					delay(del);
 7229              		.loc 1 1602 0
 7230 58b0 8B85B8F3 		movl	-3144(%rbp), %eax
 7230      FFFF
 7231 58b6 89C7     		movl	%eax, %edi
 7232 58b8 E8000000 		call	delay
 7232      00
1603:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &encrpyted_ack2_tosend[1], &error);
 7233              		.loc 1 1603 0
 7234 58bd 8B85D0F2 		movl	-3376(%rbp), %eax
 7234      FFFF
 7235 58c3 01C0     		addl	%eax, %eax
 7236 58c5 83C001   		addl	$1, %eax
 7237 58c8 0FB6F0   		movzbl	%al, %esi
 7238 58cb 488B85E8 		movq	-3096(%rbp), %rax
 7238      F3FFFF
 7239 58d2 488D8DF0 		leaq	-3088(%rbp), %rcx
 7239      F3FFFF
 7240 58d9 488D5590 		leaq	-112(%rbp), %rdx
 7241 58dd 4883C201 		addq	$1, %rdx
 7242 58e1 4989C8   		movq	%rcx, %r8
 7243 58e4 4889D1   		movq	%rdx, %rcx
 7244 58e7 BA010000 		movl	$1, %edx
 7244      00
 7245 58ec 4889C7   		movq	%rax, %rdi
 7246 58ef E8000000 		call	flWriteChannel
 7246      00
 7247 58f4 8985C0F2 		movl	%eax, -3392(%rbp)
 7247      FFFF
1604:main_final_with_sync.c **** 					delay(del);
 7248              		.loc 1 1604 0
 7249 58fa 8B85B8F3 		movl	-3144(%rbp), %eax
 7249      FFFF
 7250 5900 89C7     		movl	%eax, %edi
 7251 5902 E8000000 		call	delay
 7251      00
1605:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &encrpyted_ack2_tosend[2], &error);
 7252              		.loc 1 1605 0
 7253 5907 8B85D0F2 		movl	-3376(%rbp), %eax
 7253      FFFF
 7254 590d 01C0     		addl	%eax, %eax
 7255 590f 83C001   		addl	$1, %eax
 7256 5912 0FB6F0   		movzbl	%al, %esi
 7257 5915 488B85E8 		movq	-3096(%rbp), %rax
 7257      F3FFFF
 7258 591c 488D8DF0 		leaq	-3088(%rbp), %rcx
 7258      F3FFFF
 7259 5923 488D5590 		leaq	-112(%rbp), %rdx
 7260 5927 4883C202 		addq	$2, %rdx
 7261 592b 4989C8   		movq	%rcx, %r8
 7262 592e 4889D1   		movq	%rdx, %rcx
 7263 5931 BA010000 		movl	$1, %edx
 7263      00
 7264 5936 4889C7   		movq	%rax, %rdi
 7265 5939 E8000000 		call	flWriteChannel
 7265      00
 7266 593e 8985C0F2 		movl	%eax, -3392(%rbp)
 7266      FFFF
1606:main_final_with_sync.c **** 					delay(del);
 7267              		.loc 1 1606 0
 7268 5944 8B85B8F3 		movl	-3144(%rbp), %eax
 7268      FFFF
 7269 594a 89C7     		movl	%eax, %edi
 7270 594c E8000000 		call	delay
 7270      00
1607:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &encrpyted_ack2_tosend[3], &error);
 7271              		.loc 1 1607 0
 7272 5951 8B85D0F2 		movl	-3376(%rbp), %eax
 7272      FFFF
 7273 5957 01C0     		addl	%eax, %eax
 7274 5959 83C001   		addl	$1, %eax
 7275 595c 0FB6F0   		movzbl	%al, %esi
 7276 595f 488B85E8 		movq	-3096(%rbp), %rax
 7276      F3FFFF
 7277 5966 488D8DF0 		leaq	-3088(%rbp), %rcx
 7277      F3FFFF
 7278 596d 488D5590 		leaq	-112(%rbp), %rdx
 7279 5971 4883C203 		addq	$3, %rdx
 7280 5975 4989C8   		movq	%rcx, %r8
 7281 5978 4889D1   		movq	%rdx, %rcx
 7282 597b BA010000 		movl	$1, %edx
 7282      00
 7283 5980 4889C7   		movq	%rax, %rdi
 7284 5983 E8000000 		call	flWriteChannel
 7284      00
 7285 5988 8985C0F2 		movl	%eax, -3392(%rbp)
 7285      FFFF
1608:main_final_with_sync.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 7286              		.loc 1 1608 0
 7287 598e 83BDC0F2 		cmpl	$0, -3392(%rbp)
 7287      FFFF00
 7288 5995 740F     		je	.L352
 7289              		.loc 1 1608 0 is_stmt 0 discriminator 1
 7290 5997 C785BCF2 		movl	$1, -3396(%rbp)
 7290      FFFF0100 
 7290      0000
 7291 59a1 E9721B00 		jmp	.L230
 7291      00
 7292              	.L352:
1609:main_final_with_sync.c **** 					printf("%s\n", "Encrypted ack2 send successfully");
 7293              		.loc 1 1609 0 is_stmt 1
 7294 59a6 BF000000 		movl	$.LC197, %edi
 7294      00
 7295 59ab E8000000 		call	puts
 7295      00
1610:main_final_with_sync.c **** 
1611:main_final_with_sync.c **** 					printf("%s\n", "-------------------------H3 ended----------------------------");
 7296              		.loc 1 1611 0
 7297 59b0 BF000000 		movl	$.LC198, %edi
 7297      00
 7298 59b5 E8000000 		call	puts
 7298      00
1612:main_final_with_sync.c **** 
1613:main_final_with_sync.c **** 					printf("%s\n", "-------------------------H4 started--------------------------");
 7299              		.loc 1 1613 0
 7300 59ba BF000000 		movl	$.LC199, %edi
 7300      00
 7301 59bf E8000000 		call	puts
 7301      00
1614:main_final_with_sync.c **** 
1615:main_final_with_sync.c **** 					printf("%s\n", "Calculating x and y co_ordinates ------------------");
 7302              		.loc 1 1615 0
 7303 59c4 BF000000 		movl	$.LC200, %edi
 7303      00
 7304 59c9 E8000000 		call	puts
 7304      00
 7305              	.LBB70:
1616:main_final_with_sync.c **** 
1617:main_final_with_sync.c **** 					int co_ordinates[8];
1618:main_final_with_sync.c **** 					for (int i = 0; i < 8; ++i)
 7306              		.loc 1 1618 0
 7307 59ce C78510F3 		movl	$0, -3312(%rbp)
 7307      FFFF0000 
 7307      0000
 7308 59d8 EB28     		jmp	.L353
 7309              	.L354:
1619:main_final_with_sync.c **** 					{
1620:main_final_with_sync.c **** 						co_ordinates[i] = decrypted_pos[i+24];
 7310              		.loc 1 1620 0 discriminator 3
 7311 59da 8B8510F3 		movl	-3312(%rbp), %eax
 7311      FFFF
 7312 59e0 83C018   		addl	$24, %eax
 7313 59e3 4898     		cltq
 7314 59e5 8B9485D0 		movl	-2096(%rbp,%rax,4), %edx
 7314      F7FFFF
 7315 59ec 8B8510F3 		movl	-3312(%rbp), %eax
 7315      FFFF
 7316 59f2 4898     		cltq
 7317 59f4 89948510 		movl	%edx, -2800(%rbp,%rax,4)
 7317      F5FFFF
1618:main_final_with_sync.c **** 					{
 7318              		.loc 1 1618 0 discriminator 3
 7319 59fb 838510F3 		addl	$1, -3312(%rbp)
 7319      FFFF01
 7320              	.L353:
1618:main_final_with_sync.c **** 					{
 7321              		.loc 1 1618 0 is_stmt 0 discriminator 1
 7322 5a02 83BD10F3 		cmpl	$7, -3312(%rbp)
 7322      FFFF07
 7323 5a09 7ECF     		jle	.L354
 7324              	.LBE70:
1621:main_final_with_sync.c **** 					}
1622:main_final_with_sync.c **** 
1623:main_final_with_sync.c **** 					int x_cord = 8*co_ordinates[3]+4*co_ordinates[2]+2*co_ordinates[1]+co_ordinates[0];
 7325              		.loc 1 1623 0 is_stmt 1
 7326 5a0b 8B851CF5 		movl	-2788(%rbp), %eax
 7326      FFFF
 7327 5a11 8D1400   		leal	(%rax,%rax), %edx
 7328 5a14 8B8518F5 		movl	-2792(%rbp), %eax
 7328      FFFF
 7329 5a1a 01D0     		addl	%edx, %eax
 7330 5a1c 8D1400   		leal	(%rax,%rax), %edx
 7331 5a1f 8B8514F5 		movl	-2796(%rbp), %eax
 7331      FFFF
 7332 5a25 01D0     		addl	%edx, %eax
 7333 5a27 8D1400   		leal	(%rax,%rax), %edx
 7334 5a2a 8B8510F5 		movl	-2800(%rbp), %eax
 7334      FFFF
 7335 5a30 01D0     		addl	%edx, %eax
 7336 5a32 8985BCF3 		movl	%eax, -3140(%rbp)
 7336      FFFF
1624:main_final_with_sync.c **** 					int y_cord = 8*co_ordinates[7]+4*co_ordinates[6]+2*co_ordinates[5]+co_ordinates[4];
 7337              		.loc 1 1624 0
 7338 5a38 8B852CF5 		movl	-2772(%rbp), %eax
 7338      FFFF
 7339 5a3e 8D1400   		leal	(%rax,%rax), %edx
 7340 5a41 8B8528F5 		movl	-2776(%rbp), %eax
 7340      FFFF
 7341 5a47 01D0     		addl	%edx, %eax
 7342 5a49 8D1400   		leal	(%rax,%rax), %edx
 7343 5a4c 8B8524F5 		movl	-2780(%rbp), %eax
 7343      FFFF
 7344 5a52 01D0     		addl	%edx, %eax
 7345 5a54 8D1400   		leal	(%rax,%rax), %edx
 7346 5a57 8B8520F5 		movl	-2784(%rbp), %eax
 7346      FFFF
 7347 5a5d 01D0     		addl	%edx, %eax
 7348 5a5f 8985C0F3 		movl	%eax, -3136(%rbp)
 7348      FFFF
1625:main_final_with_sync.c **** 
1626:main_final_with_sync.c **** 
1627:main_final_with_sync.c **** 
1628:main_final_with_sync.c **** 					printf("%s\n", "x and y co_ordinates calculated, they are as --");
 7349              		.loc 1 1628 0
 7350 5a65 BF000000 		movl	$.LC201, %edi
 7350      00
 7351 5a6a E8000000 		call	puts
 7351      00
1629:main_final_with_sync.c **** 					printf("%d %d ", x_cord, y_cord);
 7352              		.loc 1 1629 0
 7353 5a6f 8B95C0F3 		movl	-3136(%rbp), %edx
 7353      FFFF
 7354 5a75 8B85BCF3 		movl	-3140(%rbp), %eax
 7354      FFFF
 7355 5a7b 89C6     		movl	%eax, %esi
 7356 5a7d BF000000 		movl	$.LC202, %edi
 7356      00
 7357 5a82 B8000000 		movl	$0, %eax
 7357      00
 7358 5a87 E8000000 		call	printf
 7358      00
1630:main_final_with_sync.c **** 					printf("\n");
 7359              		.loc 1 1630 0
 7360 5a8c BF0A0000 		movl	$10, %edi
 7360      00
 7361 5a91 E8000000 		call	putchar
 7361      00
1631:main_final_with_sync.c **** 					int final_arr[8][8];
1632:main_final_with_sync.c **** 					FILE *fp = fopen("/home/shubham/Desktop/track_data.csv", "r");
 7362              		.loc 1 1632 0
 7363 5a96 BE000000 		movl	$.LC6, %esi
 7363      00
 7364 5a9b BF000000 		movl	$.LC7, %edi
 7364      00
 7365 5aa0 E8000000 		call	fopen
 7365      00
 7366 5aa5 488985D8 		movq	%rax, -2856(%rbp)
 7366      F4FFFF
1633:main_final_with_sync.c **** 
1634:main_final_with_sync.c **** 					print(x_cord,y_cord,final_arr, fp);
 7367              		.loc 1 1634 0
 7368 5aac 488B8DD8 		movq	-2856(%rbp), %rcx
 7368      F4FFFF
 7369 5ab3 488D9560 		leaq	-416(%rbp), %rdx
 7369      FEFFFF
 7370 5aba 8BB5C0F3 		movl	-3136(%rbp), %esi
 7370      FFFF
 7371 5ac0 8B85BCF3 		movl	-3140(%rbp), %eax
 7371      FFFF
 7372 5ac6 89C7     		movl	%eax, %edi
 7373 5ac8 E8000000 		call	print
 7373      00
1635:main_final_with_sync.c **** 
1636:main_final_with_sync.c **** 					printf("%s\n", "Got the information for x and y co_ordinates, 64 bits filled");
 7374              		.loc 1 1636 0
 7375 5acd BF000000 		movl	$.LC203, %edi
 7375      00
 7376 5ad2 E8000000 		call	puts
 7376      00
1637:main_final_with_sync.c **** 					printf("%s\n", "The final 64 bit array in decrypted form --");
 7377              		.loc 1 1637 0
 7378 5ad7 BF000000 		movl	$.LC204, %edi
 7378      00
 7379 5adc E8000000 		call	puts
 7379      00
 7380              	.LBB71:
1638:main_final_with_sync.c **** 
1639:main_final_with_sync.c **** 					for (int i = 0; i < 8; ++i)
 7381              		.loc 1 1639 0
 7382 5ae1 C78514F3 		movl	$0, -3308(%rbp)
 7382      FFFF0000 
 7382      0000
 7383 5aeb EB53     		jmp	.L355
 7384              	.L358:
 7385              	.LBB72:
1640:main_final_with_sync.c **** 					{
1641:main_final_with_sync.c **** 						for (int j = 0; j < 8; ++j)
 7386              		.loc 1 1641 0
 7387 5aed C78518F3 		movl	$0, -3304(%rbp)
 7387      FFFF0000 
 7387      0000
 7388 5af7 EB37     		jmp	.L356
 7389              	.L357:
1642:main_final_with_sync.c **** 						{
1643:main_final_with_sync.c **** 							printf("%d ", final_arr[i][j]);
 7390              		.loc 1 1643 0 discriminator 3
 7391 5af9 8B8518F3 		movl	-3304(%rbp), %eax
 7391      FFFF
 7392 5aff 4898     		cltq
 7393 5b01 8B9514F3 		movl	-3308(%rbp), %edx
 7393      FFFF
 7394 5b07 4863D2   		movslq	%edx, %rdx
 7395 5b0a 48C1E203 		salq	$3, %rdx
 7396 5b0e 4801D0   		addq	%rdx, %rax
 7397 5b11 8B848560 		movl	-416(%rbp,%rax,4), %eax
 7397      FEFFFF
 7398 5b18 89C6     		movl	%eax, %esi
 7399 5b1a BF000000 		movl	$.LC10, %edi
 7399      00
 7400 5b1f B8000000 		movl	$0, %eax
 7400      00
 7401 5b24 E8000000 		call	printf
 7401      00
1641:main_final_with_sync.c **** 						{
 7402              		.loc 1 1641 0 discriminator 3
 7403 5b29 838518F3 		addl	$1, -3304(%rbp)
 7403      FFFF01
 7404              	.L356:
1641:main_final_with_sync.c **** 						{
 7405              		.loc 1 1641 0 is_stmt 0 discriminator 1
 7406 5b30 83BD18F3 		cmpl	$7, -3304(%rbp)
 7406      FFFF07
 7407 5b37 7EC0     		jle	.L357
 7408              	.LBE72:
1639:main_final_with_sync.c **** 					{
 7409              		.loc 1 1639 0 is_stmt 1 discriminator 2
 7410 5b39 838514F3 		addl	$1, -3308(%rbp)
 7410      FFFF01
 7411              	.L355:
1639:main_final_with_sync.c **** 					{
 7412              		.loc 1 1639 0 is_stmt 0 discriminator 1
 7413 5b40 83BD14F3 		cmpl	$7, -3308(%rbp)
 7413      FFFF07
 7414 5b47 7EA4     		jle	.L358
 7415              	.LBE71:
1644:main_final_with_sync.c **** 						}
1645:main_final_with_sync.c **** 					}
1646:main_final_with_sync.c **** 
1647:main_final_with_sync.c **** 					printf("\n");
 7416              		.loc 1 1647 0 is_stmt 1
 7417 5b49 BF0A0000 		movl	$10, %edi
 7417      00
 7418 5b4e E8000000 		call	putchar
 7418      00
1648:main_final_with_sync.c **** 					printf("%s\n", "-------------------------H4 ended--------------------------");
 7419              		.loc 1 1648 0
 7420 5b53 BF000000 		movl	$.LC205, %edi
 7420      00
 7421 5b58 E8000000 		call	puts
 7421      00
1649:main_final_with_sync.c **** 
1650:main_final_with_sync.c **** 					printf("%s\n", "-------------------------H5 starts--------------------------");
 7422              		.loc 1 1650 0
 7423 5b5d BF000000 		movl	$.LC206, %edi
 7423      00
 7424 5b62 E8000000 		call	puts
 7424      00
 7425              	.LBB73:
1651:main_final_with_sync.c **** 
1652:main_final_with_sync.c **** 					int p1[32], p2[32], bin1[32], bin2[32];
1653:main_final_with_sync.c **** 
1654:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 7426              		.loc 1 1654 0
 7427 5b67 C7851CF3 		movl	$0, -3300(%rbp)
 7427      FFFF0000 
 7427      0000
 7428 5b71 EB2D     		jmp	.L359
 7429              	.L360:
1655:main_final_with_sync.c **** 					{
1656:main_final_with_sync.c **** 						bin1[i] = 0;
 7430              		.loc 1 1656 0 discriminator 3
 7431 5b73 8B851CF3 		movl	-3300(%rbp), %eax
 7431      FFFF
 7432 5b79 4898     		cltq
 7433 5b7b C7848550 		movl	$0, -1200(%rbp,%rax,4)
 7433      FBFFFF00 
 7433      000000
1657:main_final_with_sync.c **** 						bin2[i] = 0;
 7434              		.loc 1 1657 0 discriminator 3
 7435 5b86 8B851CF3 		movl	-3300(%rbp), %eax
 7435      FFFF
 7436 5b8c 4898     		cltq
 7437 5b8e C78485D0 		movl	$0, -1072(%rbp,%rax,4)
 7437      FBFFFF00 
 7437      000000
1654:main_final_with_sync.c **** 					{
 7438              		.loc 1 1654 0 discriminator 3
 7439 5b99 83851CF3 		addl	$1, -3300(%rbp)
 7439      FFFF01
 7440              	.L359:
1654:main_final_with_sync.c **** 					{
 7441              		.loc 1 1654 0 is_stmt 0 discriminator 1
 7442 5ba0 83BD1CF3 		cmpl	$31, -3300(%rbp)
 7442      FFFF1F
 7443 5ba7 7ECA     		jle	.L360
 7444              	.LBE73:
1658:main_final_with_sync.c **** 					}
1659:main_final_with_sync.c **** 
1660:main_final_with_sync.c **** 					int k1 = 0;
 7445              		.loc 1 1660 0 is_stmt 1
 7446 5ba9 C78520F3 		movl	$0, -3296(%rbp)
 7446      FFFF0000 
 7446      0000
 7447              	.LBB74:
1661:main_final_with_sync.c **** 					for(int i=0; i<4; i++)
 7448              		.loc 1 1661 0
 7449 5bb3 C78524F3 		movl	$0, -3292(%rbp)
 7449      FFFF0000 
 7449      0000
 7450 5bbd EB58     		jmp	.L361
 7451              	.L364:
 7452              	.LBB75:
1662:main_final_with_sync.c **** 					{
1663:main_final_with_sync.c **** 						for(int j=0; j<8; j++)
 7453              		.loc 1 1663 0
 7454 5bbf C78528F3 		movl	$0, -3288(%rbp)
 7454      FFFF0000 
 7454      0000
 7455 5bc9 EB3C     		jmp	.L362
 7456              	.L363:
1664:main_final_with_sync.c **** 						{
1665:main_final_with_sync.c **** 							p1[k1] = final_arr[i][j];
 7457              		.loc 1 1665 0 discriminator 3
 7458 5bcb 8B8528F3 		movl	-3288(%rbp), %eax
 7458      FFFF
 7459 5bd1 4898     		cltq
 7460 5bd3 8B9524F3 		movl	-3292(%rbp), %edx
 7460      FFFF
 7461 5bd9 4863D2   		movslq	%edx, %rdx
 7462 5bdc 48C1E203 		salq	$3, %rdx
 7463 5be0 4801D0   		addq	%rdx, %rax
 7464 5be3 8B948560 		movl	-416(%rbp,%rax,4), %edx
 7464      FEFFFF
 7465 5bea 8B8520F3 		movl	-3296(%rbp), %eax
 7465      FFFF
 7466 5bf0 4898     		cltq
 7467 5bf2 89948550 		movl	%edx, -1456(%rbp,%rax,4)
 7467      FAFFFF
1666:main_final_with_sync.c **** 							k1++;
 7468              		.loc 1 1666 0 discriminator 3
 7469 5bf9 838520F3 		addl	$1, -3296(%rbp)
 7469      FFFF01
1663:main_final_with_sync.c **** 						{
 7470              		.loc 1 1663 0 discriminator 3
 7471 5c00 838528F3 		addl	$1, -3288(%rbp)
 7471      FFFF01
 7472              	.L362:
1663:main_final_with_sync.c **** 						{
 7473              		.loc 1 1663 0 is_stmt 0 discriminator 1
 7474 5c07 83BD28F3 		cmpl	$7, -3288(%rbp)
 7474      FFFF07
 7475 5c0e 7EBB     		jle	.L363
 7476              	.LBE75:
1661:main_final_with_sync.c **** 					{
 7477              		.loc 1 1661 0 is_stmt 1 discriminator 2
 7478 5c10 838524F3 		addl	$1, -3292(%rbp)
 7478      FFFF01
 7479              	.L361:
1661:main_final_with_sync.c **** 					{
 7480              		.loc 1 1661 0 is_stmt 0 discriminator 1
 7481 5c17 83BD24F3 		cmpl	$3, -3292(%rbp)
 7481      FFFF03
 7482 5c1e 7E9F     		jle	.L364
 7483              	.LBE74:
1667:main_final_with_sync.c **** 						}
1668:main_final_with_sync.c **** 
1669:main_final_with_sync.c **** 					}
1670:main_final_with_sync.c **** 
1671:main_final_with_sync.c **** 					int k2 = 0;
 7484              		.loc 1 1671 0 is_stmt 1
 7485 5c20 C7852CF3 		movl	$0, -3284(%rbp)
 7485      FFFF0000 
 7485      0000
 7486              	.LBB76:
1672:main_final_with_sync.c **** 					for(int i=4; i<8; i++){
 7487              		.loc 1 1672 0
 7488 5c2a C78530F3 		movl	$4, -3280(%rbp)
 7488      FFFF0400 
 7488      0000
 7489 5c34 EB58     		jmp	.L365
 7490              	.L368:
 7491              	.LBB77:
1673:main_final_with_sync.c **** 						for(int j=0; j<8; j++)
 7492              		.loc 1 1673 0
 7493 5c36 C78534F3 		movl	$0, -3276(%rbp)
 7493      FFFF0000 
 7493      0000
 7494 5c40 EB3C     		jmp	.L366
 7495              	.L367:
1674:main_final_with_sync.c **** 						{
1675:main_final_with_sync.c **** 							p2[k2] = final_arr[i][j];
 7496              		.loc 1 1675 0 discriminator 3
 7497 5c42 8B8534F3 		movl	-3276(%rbp), %eax
 7497      FFFF
 7498 5c48 4898     		cltq
 7499 5c4a 8B9530F3 		movl	-3280(%rbp), %edx
 7499      FFFF
 7500 5c50 4863D2   		movslq	%edx, %rdx
 7501 5c53 48C1E203 		salq	$3, %rdx
 7502 5c57 4801D0   		addq	%rdx, %rax
 7503 5c5a 8B948560 		movl	-416(%rbp,%rax,4), %edx
 7503      FEFFFF
 7504 5c61 8B852CF3 		movl	-3284(%rbp), %eax
 7504      FFFF
 7505 5c67 4898     		cltq
 7506 5c69 899485D0 		movl	%edx, -1328(%rbp,%rax,4)
 7506      FAFFFF
1676:main_final_with_sync.c **** 							k2++;
 7507              		.loc 1 1676 0 discriminator 3
 7508 5c70 83852CF3 		addl	$1, -3284(%rbp)
 7508      FFFF01
1673:main_final_with_sync.c **** 						for(int j=0; j<8; j++)
 7509              		.loc 1 1673 0 discriminator 3
 7510 5c77 838534F3 		addl	$1, -3276(%rbp)
 7510      FFFF01
 7511              	.L366:
1673:main_final_with_sync.c **** 						for(int j=0; j<8; j++)
 7512              		.loc 1 1673 0 is_stmt 0 discriminator 1
 7513 5c7e 83BD34F3 		cmpl	$7, -3276(%rbp)
 7513      FFFF07
 7514 5c85 7EBB     		jle	.L367
 7515              	.LBE77:
1672:main_final_with_sync.c **** 						for(int j=0; j<8; j++)
 7516              		.loc 1 1672 0 is_stmt 1 discriminator 2
 7517 5c87 838530F3 		addl	$1, -3280(%rbp)
 7517      FFFF01
 7518              	.L365:
1672:main_final_with_sync.c **** 						for(int j=0; j<8; j++)
 7519              		.loc 1 1672 0 is_stmt 0 discriminator 1
 7520 5c8e 83BD30F3 		cmpl	$7, -3280(%rbp)
 7520      FFFF07
 7521 5c95 7E9F     		jle	.L368
 7522              	.LBE76:
1677:main_final_with_sync.c **** 						}
1678:main_final_with_sync.c **** 					}
1679:main_final_with_sync.c **** 
1680:main_final_with_sync.c **** 					printf("%s\n", "Encrypting first 32 bits of final array");
 7523              		.loc 1 1680 0 is_stmt 1
 7524 5c97 BF000000 		movl	$.LC207, %edi
 7524      00
 7525 5c9c E8000000 		call	puts
 7525      00
1681:main_final_with_sync.c **** 					encrypter(p1, K, bin1);
 7526              		.loc 1 1681 0
 7527 5ca1 488D9550 		leaq	-1200(%rbp), %rdx
 7527      FBFFFF
 7528 5ca8 488D8DD0 		leaq	-2608(%rbp), %rcx
 7528      F5FFFF
 7529 5caf 488D8550 		leaq	-1456(%rbp), %rax
 7529      FAFFFF
 7530 5cb6 4889CE   		movq	%rcx, %rsi
 7531 5cb9 4889C7   		movq	%rax, %rdi
 7532 5cbc E8000000 		call	encrypter
 7532      00
1682:main_final_with_sync.c **** 					printf("%s\n", "First 32 bits got encrypted , they are as ----");
 7533              		.loc 1 1682 0
 7534 5cc1 BF000000 		movl	$.LC208, %edi
 7534      00
 7535 5cc6 E8000000 		call	puts
 7535      00
 7536              	.LBB78:
1683:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 7537              		.loc 1 1683 0
 7538 5ccb C78538F3 		movl	$0, -3272(%rbp)
 7538      FFFF0000 
 7538      0000
 7539 5cd5 EB27     		jmp	.L369
 7540              	.L370:
1684:main_final_with_sync.c **** 					{
1685:main_final_with_sync.c **** 						printf("%d ", bin1[i]);
 7541              		.loc 1 1685 0 discriminator 3
 7542 5cd7 8B8538F3 		movl	-3272(%rbp), %eax
 7542      FFFF
 7543 5cdd 4898     		cltq
 7544 5cdf 8B848550 		movl	-1200(%rbp,%rax,4), %eax
 7544      FBFFFF
 7545 5ce6 89C6     		movl	%eax, %esi
 7546 5ce8 BF000000 		movl	$.LC10, %edi
 7546      00
 7547 5ced B8000000 		movl	$0, %eax
 7547      00
 7548 5cf2 E8000000 		call	printf
 7548      00
1683:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 7549              		.loc 1 1683 0 discriminator 3
 7550 5cf7 838538F3 		addl	$1, -3272(%rbp)
 7550      FFFF01
 7551              	.L369:
1683:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 7552              		.loc 1 1683 0 is_stmt 0 discriminator 1
 7553 5cfe 83BD38F3 		cmpl	$31, -3272(%rbp)
 7553      FFFF1F
 7554 5d05 7ED0     		jle	.L370
 7555              	.LBE78:
1686:main_final_with_sync.c **** 					}
1687:main_final_with_sync.c **** 					printf("\n");
 7556              		.loc 1 1687 0 is_stmt 1
 7557 5d07 BF0A0000 		movl	$10, %edi
 7557      00
 7558 5d0c E8000000 		call	putchar
 7558      00
1688:main_final_with_sync.c **** 					uint8 first32_bitsTosend[4];
1689:main_final_with_sync.c **** 					printf("%s\n", "Converting first 32 bits to uint8");
 7559              		.loc 1 1689 0
 7560 5d11 BF000000 		movl	$.LC209, %edi
 7560      00
 7561 5d16 E8000000 		call	puts
 7561      00
1690:main_final_with_sync.c **** 					BinTouint8(first32_bitsTosend, bin1);
 7562              		.loc 1 1690 0
 7563 5d1b 488D9550 		leaq	-1200(%rbp), %rdx
 7563      FBFFFF
 7564 5d22 488D45A0 		leaq	-96(%rbp), %rax
 7565 5d26 4889D6   		movq	%rdx, %rsi
 7566 5d29 4889C7   		movq	%rax, %rdi
 7567 5d2c E8000000 		call	BinTouint8
 7567      00
1691:main_final_with_sync.c **** 					printf("%s\n", "First 32 bits got converted to uint8, they are as");
 7568              		.loc 1 1691 0
 7569 5d31 BF000000 		movl	$.LC210, %edi
 7569      00
 7570 5d36 E8000000 		call	puts
 7570      00
 7571              	.LBB79:
1692:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 7572              		.loc 1 1692 0
 7573 5d3b C7853CF3 		movl	$0, -3268(%rbp)
 7573      FFFF0000 
 7573      0000
 7574 5d45 EB28     		jmp	.L371
 7575              	.L372:
1693:main_final_with_sync.c **** 					{
1694:main_final_with_sync.c **** 						printf("%d ", first32_bitsTosend[i]);
 7576              		.loc 1 1694 0 discriminator 3
 7577 5d47 8B853CF3 		movl	-3268(%rbp), %eax
 7577      FFFF
 7578 5d4d 4898     		cltq
 7579 5d4f 0FB64405 		movzbl	-96(%rbp,%rax), %eax
 7579      A0
 7580 5d54 0FB6C0   		movzbl	%al, %eax
 7581 5d57 89C6     		movl	%eax, %esi
 7582 5d59 BF000000 		movl	$.LC10, %edi
 7582      00
 7583 5d5e B8000000 		movl	$0, %eax
 7583      00
 7584 5d63 E8000000 		call	printf
 7584      00
1692:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 7585              		.loc 1 1692 0 discriminator 3
 7586 5d68 83853CF3 		addl	$1, -3268(%rbp)
 7586      FFFF01
 7587              	.L371:
1692:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 7588              		.loc 1 1692 0 is_stmt 0 discriminator 1
 7589 5d6f 83BD3CF3 		cmpl	$3, -3268(%rbp)
 7589      FFFF03
 7590 5d76 7ECF     		jle	.L372
 7591              	.LBE79:
1695:main_final_with_sync.c **** 					}
1696:main_final_with_sync.c **** 					printf("\n");
 7592              		.loc 1 1696 0 is_stmt 1
 7593 5d78 BF0A0000 		movl	$10, %edi
 7593      00
 7594 5d7d E8000000 		call	putchar
 7594      00
1697:main_final_with_sync.c **** 					printf("%s\n", "Writing on channel first 32 bits encrypted");
 7595              		.loc 1 1697 0
 7596 5d82 BF000000 		movl	$.LC211, %edi
 7596      00
 7597 5d87 E8000000 		call	puts
 7597      00
1698:main_final_with_sync.c **** 					delay(del);
 7598              		.loc 1 1698 0
 7599 5d8c 8B85B8F3 		movl	-3144(%rbp), %eax
 7599      FFFF
 7600 5d92 89C7     		movl	%eax, %edi
 7601 5d94 E8000000 		call	delay
 7601      00
1699:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &first32_bitsTosend[0], &error);
 7602              		.loc 1 1699 0
 7603 5d99 8B85D0F2 		movl	-3376(%rbp), %eax
 7603      FFFF
 7604 5d9f 01C0     		addl	%eax, %eax
 7605 5da1 83C001   		addl	$1, %eax
 7606 5da4 0FB6F0   		movzbl	%al, %esi
 7607 5da7 488B85E8 		movq	-3096(%rbp), %rax
 7607      F3FFFF
 7608 5dae 488D8DF0 		leaq	-3088(%rbp), %rcx
 7608      F3FFFF
 7609 5db5 488D55A0 		leaq	-96(%rbp), %rdx
 7610 5db9 4989C8   		movq	%rcx, %r8
 7611 5dbc 4889D1   		movq	%rdx, %rcx
 7612 5dbf BA010000 		movl	$1, %edx
 7612      00
 7613 5dc4 4889C7   		movq	%rax, %rdi
 7614 5dc7 E8000000 		call	flWriteChannel
 7614      00
 7615 5dcc 8985C0F2 		movl	%eax, -3392(%rbp)
 7615      FFFF
1700:main_final_with_sync.c **** 					delay(del);
 7616              		.loc 1 1700 0
 7617 5dd2 8B85B8F3 		movl	-3144(%rbp), %eax
 7617      FFFF
 7618 5dd8 89C7     		movl	%eax, %edi
 7619 5dda E8000000 		call	delay
 7619      00
1701:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &first32_bitsTosend[1], &error);
 7620              		.loc 1 1701 0
 7621 5ddf 8B85D0F2 		movl	-3376(%rbp), %eax
 7621      FFFF
 7622 5de5 01C0     		addl	%eax, %eax
 7623 5de7 83C001   		addl	$1, %eax
 7624 5dea 0FB6F0   		movzbl	%al, %esi
 7625 5ded 488B85E8 		movq	-3096(%rbp), %rax
 7625      F3FFFF
 7626 5df4 488D8DF0 		leaq	-3088(%rbp), %rcx
 7626      F3FFFF
 7627 5dfb 488D55A0 		leaq	-96(%rbp), %rdx
 7628 5dff 4883C201 		addq	$1, %rdx
 7629 5e03 4989C8   		movq	%rcx, %r8
 7630 5e06 4889D1   		movq	%rdx, %rcx
 7631 5e09 BA010000 		movl	$1, %edx
 7631      00
 7632 5e0e 4889C7   		movq	%rax, %rdi
 7633 5e11 E8000000 		call	flWriteChannel
 7633      00
 7634 5e16 8985C0F2 		movl	%eax, -3392(%rbp)
 7634      FFFF
1702:main_final_with_sync.c **** 					delay(del);
 7635              		.loc 1 1702 0
 7636 5e1c 8B85B8F3 		movl	-3144(%rbp), %eax
 7636      FFFF
 7637 5e22 89C7     		movl	%eax, %edi
 7638 5e24 E8000000 		call	delay
 7638      00
1703:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &first32_bitsTosend[2], &error);
 7639              		.loc 1 1703 0
 7640 5e29 8B85D0F2 		movl	-3376(%rbp), %eax
 7640      FFFF
 7641 5e2f 01C0     		addl	%eax, %eax
 7642 5e31 83C001   		addl	$1, %eax
 7643 5e34 0FB6F0   		movzbl	%al, %esi
 7644 5e37 488B85E8 		movq	-3096(%rbp), %rax
 7644      F3FFFF
 7645 5e3e 488D8DF0 		leaq	-3088(%rbp), %rcx
 7645      F3FFFF
 7646 5e45 488D55A0 		leaq	-96(%rbp), %rdx
 7647 5e49 4883C202 		addq	$2, %rdx
 7648 5e4d 4989C8   		movq	%rcx, %r8
 7649 5e50 4889D1   		movq	%rdx, %rcx
 7650 5e53 BA010000 		movl	$1, %edx
 7650      00
 7651 5e58 4889C7   		movq	%rax, %rdi
 7652 5e5b E8000000 		call	flWriteChannel
 7652      00
 7653 5e60 8985C0F2 		movl	%eax, -3392(%rbp)
 7653      FFFF
1704:main_final_with_sync.c **** 					delay(del);
 7654              		.loc 1 1704 0
 7655 5e66 8B85B8F3 		movl	-3144(%rbp), %eax
 7655      FFFF
 7656 5e6c 89C7     		movl	%eax, %edi
 7657 5e6e E8000000 		call	delay
 7657      00
1705:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &first32_bitsTosend[3], &error);
 7658              		.loc 1 1705 0
 7659 5e73 8B85D0F2 		movl	-3376(%rbp), %eax
 7659      FFFF
 7660 5e79 01C0     		addl	%eax, %eax
 7661 5e7b 83C001   		addl	$1, %eax
 7662 5e7e 0FB6F0   		movzbl	%al, %esi
 7663 5e81 488B85E8 		movq	-3096(%rbp), %rax
 7663      F3FFFF
 7664 5e88 488D8DF0 		leaq	-3088(%rbp), %rcx
 7664      F3FFFF
 7665 5e8f 488D55A0 		leaq	-96(%rbp), %rdx
 7666 5e93 4883C203 		addq	$3, %rdx
 7667 5e97 4989C8   		movq	%rcx, %r8
 7668 5e9a 4889D1   		movq	%rdx, %rcx
 7669 5e9d BA010000 		movl	$1, %edx
 7669      00
 7670 5ea2 4889C7   		movq	%rax, %rdi
 7671 5ea5 E8000000 		call	flWriteChannel
 7671      00
 7672 5eaa 8985C0F2 		movl	%eax, -3392(%rbp)
 7672      FFFF
1706:main_final_with_sync.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 7673              		.loc 1 1706 0
 7674 5eb0 83BDC0F2 		cmpl	$0, -3392(%rbp)
 7674      FFFF00
 7675 5eb7 740F     		je	.L373
 7676              		.loc 1 1706 0 is_stmt 0 discriminator 1
 7677 5eb9 C785BCF2 		movl	$1, -3396(%rbp)
 7677      FFFF0100 
 7677      0000
 7678 5ec3 E9501600 		jmp	.L230
 7678      00
 7679              	.L373:
1707:main_final_with_sync.c **** 
1708:main_final_with_sync.c **** 					printf("%s\n", "-----------------------------H5 ends------------------");
 7680              		.loc 1 1708 0 is_stmt 1
 7681 5ec8 BF000000 		movl	$.LC212, %edi
 7681      00
 7682 5ecd E8000000 		call	puts
 7682      00
1709:main_final_with_sync.c **** 					printf("%s\n", "-----------------------------H6 starts------------------");
 7683              		.loc 1 1709 0
 7684 5ed2 BF000000 		movl	$.LC213, %edi
 7684      00
 7685 5ed7 E8000000 		call	puts
 7685      00
1710:main_final_with_sync.c **** 
1711:main_final_with_sync.c **** 					printf("%s\n", "Waiting for encrypted ack1 ");
 7686              		.loc 1 1711 0
 7687 5edc BF000000 		movl	$.LC214, %edi
 7687      00
 7688 5ee1 E8000000 		call	puts
 7688      00
1712:main_final_with_sync.c **** 					time_t startTime, endTime;
1713:main_final_with_sync.c **** 					time(&startTime); 	
 7689              		.loc 1 1713 0
 7690 5ee6 488D85F8 		leaq	-3080(%rbp), %rax
 7690      F3FFFF
 7691 5eed 4889C7   		movq	%rax, %rdi
 7692 5ef0 E8000000 		call	time
 7692      00
1714:main_final_with_sync.c **** 
1715:main_final_with_sync.c **** 					printf("%s\n", "-----------------------------H7 starts------------------");
 7693              		.loc 1 1715 0
 7694 5ef5 BF000000 		movl	$.LC215, %edi
 7694      00
 7695 5efa E8000000 		call	puts
 7695      00
1716:main_final_with_sync.c **** 
1717:main_final_with_sync.c **** 					double diff;
1718:main_final_with_sync.c **** 					int arb3 = 0;
 7696              		.loc 1 1718 0
 7697 5eff C78540F3 		movl	$0, -3264(%rbp)
 7697      FFFF0000 
 7697      0000
1719:main_final_with_sync.c **** 
1720:main_final_with_sync.c **** 					int breaker = 0;
 7698              		.loc 1 1720 0
 7699 5f09 C78544F3 		movl	$0, -3260(%rbp)
 7699      FFFF0000 
 7699      0000
 7700              	.L392:
 7701              	.LBB80:
1721:main_final_with_sync.c **** 					while(true)
1722:main_final_with_sync.c **** 					{
1723:main_final_with_sync.c **** 						time(&endTime);
 7702              		.loc 1 1723 0
 7703 5f13 488D8500 		leaq	-3072(%rbp), %rax
 7703      F4FFFF
 7704 5f1a 4889C7   		movq	%rax, %rdi
 7705 5f1d E8000000 		call	time
 7705      00
1724:main_final_with_sync.c **** 						diff = difftime(endTime, startTime);
 7706              		.loc 1 1724 0
 7707 5f22 488B95F8 		movq	-3080(%rbp), %rdx
 7707      F3FFFF
 7708 5f29 488B8500 		movq	-3072(%rbp), %rax
 7708      F4FFFF
 7709 5f30 4889D6   		movq	%rdx, %rsi
 7710 5f33 4889C7   		movq	%rax, %rdi
 7711 5f36 E8000000 		call	difftime
 7711      00
 7712 5f3b 66480F7E 		movq	%xmm0, %rax
 7712      C0
 7713 5f40 488985E0 		movq	%rax, -2848(%rbp)
 7713      F4FFFF
1725:main_final_with_sync.c **** 						if(diff > 256)
 7714              		.loc 1 1725 0
 7715 5f47 F20F1085 		movsd	-2848(%rbp), %xmm0
 7715      E0F4FFFF 
 7716 5f4f 660F2E05 		ucomisd	.LC216(%rip), %xmm0
 7716      00000000 
 7717 5f57 7620     		jbe	.L460
1726:main_final_with_sync.c **** 						{
1727:main_final_with_sync.c **** 							printf("%s\n", "Going to H2, time exceeded 256 seconds");
 7718              		.loc 1 1727 0
 7719 5f59 BF000000 		movl	$.LC217, %edi
 7719      00
 7720 5f5e E8000000 		call	puts
 7720      00
1728:main_final_with_sync.c **** 							k = k-1;
 7721              		.loc 1 1728 0
 7722 5f63 83ADD0F2 		subl	$1, -3376(%rbp)
 7722      FFFF01
1729:main_final_with_sync.c **** 							arb3 = 1;
 7723              		.loc 1 1729 0
 7724 5f6a C78540F3 		movl	$1, -3264(%rbp)
 7724      FFFF0100 
 7724      0000
1730:main_final_with_sync.c **** 							break;
 7725              		.loc 1 1730 0
 7726 5f74 E97A0300 		jmp	.L376
 7726      00
 7727              	.L460:
1731:main_final_with_sync.c **** 						}
1732:main_final_with_sync.c **** 						int arb = 0;
 7728              		.loc 1 1732 0
 7729 5f79 C78548F3 		movl	$0, -3256(%rbp)
 7729      FFFF0000 
 7729      0000
1733:main_final_with_sync.c **** 						uint8 encrypted_ack1_again2[4];
1734:main_final_with_sync.c **** 						delay(del);
 7730              		.loc 1 1734 0
 7731 5f83 8B85B8F3 		movl	-3144(%rbp), %eax
 7731      FFFF
 7732 5f89 89C7     		movl	%eax, %edi
 7733 5f8b E8000000 		call	delay
 7733      00
1735:main_final_with_sync.c **** 						fStatus = flReadChannel(handle, 2*k, 1, &encrypted_ack1_again2[0], &error);
 7734              		.loc 1 1735 0
 7735 5f90 8B85D0F2 		movl	-3376(%rbp), %eax
 7735      FFFF
 7736 5f96 01C0     		addl	%eax, %eax
 7737 5f98 0FB6F0   		movzbl	%al, %esi
 7738 5f9b 488B85E8 		movq	-3096(%rbp), %rax
 7738      F3FFFF
 7739 5fa2 488D8DF0 		leaq	-3088(%rbp), %rcx
 7739      F3FFFF
 7740 5fa9 488D55D0 		leaq	-48(%rbp), %rdx
 7741 5fad 4989C8   		movq	%rcx, %r8
 7742 5fb0 4889D1   		movq	%rdx, %rcx
 7743 5fb3 BA010000 		movl	$1, %edx
 7743      00
 7744 5fb8 4889C7   		movq	%rax, %rdi
 7745 5fbb E8000000 		call	flReadChannel
 7745      00
 7746 5fc0 8985C0F2 		movl	%eax, -3392(%rbp)
 7746      FFFF
1736:main_final_with_sync.c **** 						if(encrypted_ack1_again2[0] == reset) 
 7747              		.loc 1 1736 0
 7748 5fc6 0FB645D0 		movzbl	-48(%rbp), %eax
 7749 5fca 3A85B7F2 		cmpb	-3401(%rbp), %al
 7749      FFFF
 7750 5fd0 751D     		jne	.L377
1737:main_final_with_sync.c **** 							{
1738:main_final_with_sync.c **** 								k--; 
 7751              		.loc 1 1738 0
 7752 5fd2 83ADD0F2 		subl	$1, -3376(%rbp)
 7752      FFFF01
1739:main_final_with_sync.c **** 								breaker++; 
 7753              		.loc 1 1739 0
 7754 5fd9 838544F3 		addl	$1, -3260(%rbp)
 7754      FFFF01
1740:main_final_with_sync.c **** 							    printf("%s\n", "-------------------------RESET------------------------");
 7755              		.loc 1 1740 0
 7756 5fe0 BF000000 		movl	$.LC157, %edi
 7756      00
 7757 5fe5 E8000000 		call	puts
 7757      00
1741:main_final_with_sync.c **** 								break;
 7758              		.loc 1 1741 0
 7759 5fea E9040300 		jmp	.L376
 7759      00
 7760              	.L377:
1742:main_final_with_sync.c **** 							}
1743:main_final_with_sync.c **** 						delay(del);
 7761              		.loc 1 1743 0
 7762 5fef 8B85B8F3 		movl	-3144(%rbp), %eax
 7762      FFFF
 7763 5ff5 89C7     		movl	%eax, %edi
 7764 5ff7 E8000000 		call	delay
 7764      00
1744:main_final_with_sync.c **** 						fStatus = flReadChannel(handle, 2*k, 1, &encrypted_ack1_again2[1], &error);
 7765              		.loc 1 1744 0
 7766 5ffc 8B85D0F2 		movl	-3376(%rbp), %eax
 7766      FFFF
 7767 6002 01C0     		addl	%eax, %eax
 7768 6004 0FB6F0   		movzbl	%al, %esi
 7769 6007 488B85E8 		movq	-3096(%rbp), %rax
 7769      F3FFFF
 7770 600e 488D8DF0 		leaq	-3088(%rbp), %rcx
 7770      F3FFFF
 7771 6015 488D55D0 		leaq	-48(%rbp), %rdx
 7772 6019 4883C201 		addq	$1, %rdx
 7773 601d 4989C8   		movq	%rcx, %r8
 7774 6020 4889D1   		movq	%rdx, %rcx
 7775 6023 BA010000 		movl	$1, %edx
 7775      00
 7776 6028 4889C7   		movq	%rax, %rdi
 7777 602b E8000000 		call	flReadChannel
 7777      00
 7778 6030 8985C0F2 		movl	%eax, -3392(%rbp)
 7778      FFFF
1745:main_final_with_sync.c **** 						if(encrypted_ack1_again2[1] == reset) 
 7779              		.loc 1 1745 0
 7780 6036 0FB645D1 		movzbl	-47(%rbp), %eax
 7781 603a 3A85B7F2 		cmpb	-3401(%rbp), %al
 7781      FFFF
 7782 6040 751D     		jne	.L378
1746:main_final_with_sync.c **** 							{
1747:main_final_with_sync.c **** 								k--; 
 7783              		.loc 1 1747 0
 7784 6042 83ADD0F2 		subl	$1, -3376(%rbp)
 7784      FFFF01
1748:main_final_with_sync.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 7785              		.loc 1 1748 0
 7786 6049 BF000000 		movl	$.LC157, %edi
 7786      00
 7787 604e E8000000 		call	puts
 7787      00
1749:main_final_with_sync.c **** 								breaker++; 
 7788              		.loc 1 1749 0
 7789 6053 838544F3 		addl	$1, -3260(%rbp)
 7789      FFFF01
1750:main_final_with_sync.c **** 								break;
 7790              		.loc 1 1750 0
 7791 605a E9940200 		jmp	.L376
 7791      00
 7792              	.L378:
1751:main_final_with_sync.c **** 							}
1752:main_final_with_sync.c **** 						delay(del);
 7793              		.loc 1 1752 0
 7794 605f 8B85B8F3 		movl	-3144(%rbp), %eax
 7794      FFFF
 7795 6065 89C7     		movl	%eax, %edi
 7796 6067 E8000000 		call	delay
 7796      00
1753:main_final_with_sync.c **** 						fStatus = flReadChannel(handle, 2*k, 1, &encrypted_ack1_again2[2], &error);
 7797              		.loc 1 1753 0
 7798 606c 8B85D0F2 		movl	-3376(%rbp), %eax
 7798      FFFF
 7799 6072 01C0     		addl	%eax, %eax
 7800 6074 0FB6F0   		movzbl	%al, %esi
 7801 6077 488B85E8 		movq	-3096(%rbp), %rax
 7801      F3FFFF
 7802 607e 488D8DF0 		leaq	-3088(%rbp), %rcx
 7802      F3FFFF
 7803 6085 488D55D0 		leaq	-48(%rbp), %rdx
 7804 6089 4883C202 		addq	$2, %rdx
 7805 608d 4989C8   		movq	%rcx, %r8
 7806 6090 4889D1   		movq	%rdx, %rcx
 7807 6093 BA010000 		movl	$1, %edx
 7807      00
 7808 6098 4889C7   		movq	%rax, %rdi
 7809 609b E8000000 		call	flReadChannel
 7809      00
 7810 60a0 8985C0F2 		movl	%eax, -3392(%rbp)
 7810      FFFF
1754:main_final_with_sync.c **** 						if(encrypted_ack1_again2[2] == reset) 
 7811              		.loc 1 1754 0
 7812 60a6 0FB645D2 		movzbl	-46(%rbp), %eax
 7813 60aa 3A85B7F2 		cmpb	-3401(%rbp), %al
 7813      FFFF
 7814 60b0 751D     		jne	.L379
1755:main_final_with_sync.c **** 							{
1756:main_final_with_sync.c **** 								k--; 
 7815              		.loc 1 1756 0
 7816 60b2 83ADD0F2 		subl	$1, -3376(%rbp)
 7816      FFFF01
1757:main_final_with_sync.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 7817              		.loc 1 1757 0
 7818 60b9 BF000000 		movl	$.LC157, %edi
 7818      00
 7819 60be E8000000 		call	puts
 7819      00
1758:main_final_with_sync.c **** 								breaker++;
 7820              		.loc 1 1758 0
 7821 60c3 838544F3 		addl	$1, -3260(%rbp)
 7821      FFFF01
1759:main_final_with_sync.c **** 								break;
 7822              		.loc 1 1759 0
 7823 60ca E9240200 		jmp	.L376
 7823      00
 7824              	.L379:
1760:main_final_with_sync.c **** 							}
1761:main_final_with_sync.c **** 						delay(del);
 7825              		.loc 1 1761 0
 7826 60cf 8B85B8F3 		movl	-3144(%rbp), %eax
 7826      FFFF
 7827 60d5 89C7     		movl	%eax, %edi
 7828 60d7 E8000000 		call	delay
 7828      00
1762:main_final_with_sync.c **** 						fStatus = flReadChannel(handle, 2*k, 1, &encrypted_ack1_again2[3], &error);
 7829              		.loc 1 1762 0
 7830 60dc 8B85D0F2 		movl	-3376(%rbp), %eax
 7830      FFFF
 7831 60e2 01C0     		addl	%eax, %eax
 7832 60e4 0FB6F0   		movzbl	%al, %esi
 7833 60e7 488B85E8 		movq	-3096(%rbp), %rax
 7833      F3FFFF
 7834 60ee 488D8DF0 		leaq	-3088(%rbp), %rcx
 7834      F3FFFF
 7835 60f5 488D55D0 		leaq	-48(%rbp), %rdx
 7836 60f9 4883C203 		addq	$3, %rdx
 7837 60fd 4989C8   		movq	%rcx, %r8
 7838 6100 4889D1   		movq	%rdx, %rcx
 7839 6103 BA010000 		movl	$1, %edx
 7839      00
 7840 6108 4889C7   		movq	%rax, %rdi
 7841 610b E8000000 		call	flReadChannel
 7841      00
 7842 6110 8985C0F2 		movl	%eax, -3392(%rbp)
 7842      FFFF
1763:main_final_with_sync.c **** 						if(encrypted_ack1_again2[3] == reset) 
 7843              		.loc 1 1763 0
 7844 6116 0FB645D3 		movzbl	-45(%rbp), %eax
 7845 611a 3A85B7F2 		cmpb	-3401(%rbp), %al
 7845      FFFF
 7846 6120 751D     		jne	.L380
1764:main_final_with_sync.c **** 							{
1765:main_final_with_sync.c **** 								k--; 
 7847              		.loc 1 1765 0
 7848 6122 83ADD0F2 		subl	$1, -3376(%rbp)
 7848      FFFF01
1766:main_final_with_sync.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 7849              		.loc 1 1766 0
 7850 6129 BF000000 		movl	$.LC157, %edi
 7850      00
 7851 612e E8000000 		call	puts
 7851      00
1767:main_final_with_sync.c **** 								breaker++; 
 7852              		.loc 1 1767 0
 7853 6133 838544F3 		addl	$1, -3260(%rbp)
 7853      FFFF01
1768:main_final_with_sync.c **** 								break;
 7854              		.loc 1 1768 0
 7855 613a E9B40100 		jmp	.L376
 7855      00
 7856              	.L380:
1769:main_final_with_sync.c **** 							}
1770:main_final_with_sync.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 7857              		.loc 1 1770 0
 7858 613f 83BDC0F2 		cmpl	$0, -3392(%rbp)
 7858      FFFF00
 7859 6146 740F     		je	.L381
 7860              		.loc 1 1770 0 is_stmt 0 discriminator 1
 7861 6148 C785BCF2 		movl	$1, -3396(%rbp)
 7861      FFFF0100 
 7861      0000
 7862              	.LBE80:
 7863              	.LBE106:
 7864              	.LBE109:
 7865              	.LBE112:
1294:main_final_with_sync.c **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 7866              		.loc 1 1294 0 is_stmt 1 discriminator 1
 7867 6152 E9C11300 		jmp	.L230
 7867      00
 7868              	.L381:
 7869              	.LBB113:
 7870              	.LBB110:
 7871              	.LBB107:
 7872              	.LBB85:
1771:main_final_with_sync.c **** 						printf("%s\n", "Ack1 received successfully, not checked yet, it is as----");
 7873              		.loc 1 1771 0
 7874 6157 BF000000 		movl	$.LC218, %edi
 7874      00
 7875 615c E8000000 		call	puts
 7875      00
 7876              	.LBB81:
1772:main_final_with_sync.c **** 						for (int i = 0; i < 4; ++i)
 7877              		.loc 1 1772 0
 7878 6161 C7854CF3 		movl	$0, -3252(%rbp)
 7878      FFFF0000 
 7878      0000
 7879 616b EB28     		jmp	.L382
 7880              	.L383:
1773:main_final_with_sync.c **** 						{
1774:main_final_with_sync.c **** 							printf("%d ", encrypted_ack1_again2[i]);
 7881              		.loc 1 1774 0 discriminator 3
 7882 616d 8B854CF3 		movl	-3252(%rbp), %eax
 7882      FFFF
 7883 6173 4898     		cltq
 7884 6175 0FB64405 		movzbl	-48(%rbp,%rax), %eax
 7884      D0
 7885 617a 0FB6C0   		movzbl	%al, %eax
 7886 617d 89C6     		movl	%eax, %esi
 7887 617f BF000000 		movl	$.LC10, %edi
 7887      00
 7888 6184 B8000000 		movl	$0, %eax
 7888      00
 7889 6189 E8000000 		call	printf
 7889      00
1772:main_final_with_sync.c **** 						for (int i = 0; i < 4; ++i)
 7890              		.loc 1 1772 0 discriminator 3
 7891 618e 83854CF3 		addl	$1, -3252(%rbp)
 7891      FFFF01
 7892              	.L382:
1772:main_final_with_sync.c **** 						for (int i = 0; i < 4; ++i)
 7893              		.loc 1 1772 0 is_stmt 0 discriminator 1
 7894 6195 83BD4CF3 		cmpl	$3, -3252(%rbp)
 7894      FFFF03
 7895 619c 7ECF     		jle	.L383
 7896              	.LBE81:
1775:main_final_with_sync.c **** 						}
1776:main_final_with_sync.c **** 						printf("\n");
 7897              		.loc 1 1776 0 is_stmt 1
 7898 619e BF0A0000 		movl	$10, %edi
 7898      00
 7899 61a3 E8000000 		call	putchar
 7899      00
1777:main_final_with_sync.c **** 						int encrypted_ack1_again2_int[32];
1778:main_final_with_sync.c **** 						printf("%s\n", "Converting encrypted ack1 from uint8 to binary");
 7900              		.loc 1 1778 0
 7901 61a8 BF000000 		movl	$.LC176, %edi
 7901      00
 7902 61ad E8000000 		call	puts
 7902      00
1779:main_final_with_sync.c **** 						uint8ToBin(encrypted_ack1_again2, encrypted_ack1_again2_int);
 7903              		.loc 1 1779 0
 7904 61b2 488D95D0 		leaq	-816(%rbp), %rdx
 7904      FCFFFF
 7905 61b9 488D45D0 		leaq	-48(%rbp), %rax
 7906 61bd 4889D6   		movq	%rdx, %rsi
 7907 61c0 4889C7   		movq	%rax, %rdi
 7908 61c3 E8000000 		call	uint8ToBin
 7908      00
1780:main_final_with_sync.c **** 						printf("%s\n", "Converted encrypted ack1 from uint8 to binary , it is as --");
 7909              		.loc 1 1780 0
 7910 61c8 BF000000 		movl	$.LC219, %edi
 7910      00
 7911 61cd E8000000 		call	puts
 7911      00
 7912              	.LBB82:
1781:main_final_with_sync.c **** 						for (int i = 0; i < 32; ++i)
 7913              		.loc 1 1781 0
 7914 61d2 C78550F3 		movl	$0, -3248(%rbp)
 7914      FFFF0000 
 7914      0000
 7915 61dc EB27     		jmp	.L384
 7916              	.L385:
1782:main_final_with_sync.c **** 						{
1783:main_final_with_sync.c **** 							printf("%d ", encrypted_ack1_again2_int[i]);
 7917              		.loc 1 1783 0 discriminator 3
 7918 61de 8B8550F3 		movl	-3248(%rbp), %eax
 7918      FFFF
 7919 61e4 4898     		cltq
 7920 61e6 8B8485D0 		movl	-816(%rbp,%rax,4), %eax
 7920      FCFFFF
 7921 61ed 89C6     		movl	%eax, %esi
 7922 61ef BF000000 		movl	$.LC10, %edi
 7922      00
 7923 61f4 B8000000 		movl	$0, %eax
 7923      00
 7924 61f9 E8000000 		call	printf
 7924      00
1781:main_final_with_sync.c **** 						for (int i = 0; i < 32; ++i)
 7925              		.loc 1 1781 0 discriminator 3
 7926 61fe 838550F3 		addl	$1, -3248(%rbp)
 7926      FFFF01
 7927              	.L384:
1781:main_final_with_sync.c **** 						for (int i = 0; i < 32; ++i)
 7928              		.loc 1 1781 0 is_stmt 0 discriminator 1
 7929 6205 83BD50F3 		cmpl	$31, -3248(%rbp)
 7929      FFFF1F
 7930 620c 7ED0     		jle	.L385
 7931              	.LBE82:
1784:main_final_with_sync.c **** 						}
1785:main_final_with_sync.c **** 						printf("\n");
 7932              		.loc 1 1785 0 is_stmt 1
 7933 620e BF0A0000 		movl	$10, %edi
 7933      00
 7934 6213 E8000000 		call	putchar
 7934      00
1786:main_final_with_sync.c **** 						int decrypted_ack1_again2_int[32];
1787:main_final_with_sync.c **** 						printf("%s\n", "Decrypting the encrypted ack1");
 7935              		.loc 1 1787 0
 7936 6218 BF000000 		movl	$.LC220, %edi
 7936      00
 7937 621d E8000000 		call	puts
 7937      00
1788:main_final_with_sync.c **** 						decrypter(encrypted_ack1_again2_int, K, decrypted_ack1_again2_int);
 7938              		.loc 1 1788 0
 7939 6222 488D9550 		leaq	-688(%rbp), %rdx
 7939      FDFFFF
 7940 6229 488D8DD0 		leaq	-2608(%rbp), %rcx
 7940      F5FFFF
 7941 6230 488D85D0 		leaq	-816(%rbp), %rax
 7941      FCFFFF
 7942 6237 4889CE   		movq	%rcx, %rsi
 7943 623a 4889C7   		movq	%rax, %rdi
 7944 623d E8000000 		call	decrypter
 7944      00
1789:main_final_with_sync.c **** 						printf("%s\n", "Encrypted ack1 decrypted successfully, it is as----");
 7945              		.loc 1 1789 0
 7946 6242 BF000000 		movl	$.LC221, %edi
 7946      00
 7947 6247 E8000000 		call	puts
 7947      00
 7948              	.LBB83:
1790:main_final_with_sync.c **** 						for (int i = 0; i < 32; ++i)
 7949              		.loc 1 1790 0
 7950 624c C78554F3 		movl	$0, -3244(%rbp)
 7950      FFFF0000 
 7950      0000
 7951 6256 EB27     		jmp	.L386
 7952              	.L387:
1791:main_final_with_sync.c **** 						{
1792:main_final_with_sync.c **** 							printf("%d ", decrypted_ack1_again2_int[i]);
 7953              		.loc 1 1792 0 discriminator 3
 7954 6258 8B8554F3 		movl	-3244(%rbp), %eax
 7954      FFFF
 7955 625e 4898     		cltq
 7956 6260 8B848550 		movl	-688(%rbp,%rax,4), %eax
 7956      FDFFFF
 7957 6267 89C6     		movl	%eax, %esi
 7958 6269 BF000000 		movl	$.LC10, %edi
 7958      00
 7959 626e B8000000 		movl	$0, %eax
 7959      00
 7960 6273 E8000000 		call	printf
 7960      00
1790:main_final_with_sync.c **** 						for (int i = 0; i < 32; ++i)
 7961              		.loc 1 1790 0 discriminator 3
 7962 6278 838554F3 		addl	$1, -3244(%rbp)
 7962      FFFF01
 7963              	.L386:
1790:main_final_with_sync.c **** 						for (int i = 0; i < 32; ++i)
 7964              		.loc 1 1790 0 is_stmt 0 discriminator 1
 7965 627f 83BD54F3 		cmpl	$31, -3244(%rbp)
 7965      FFFF1F
 7966 6286 7ED0     		jle	.L387
 7967              	.LBE83:
1793:main_final_with_sync.c **** 						}
1794:main_final_with_sync.c **** 						printf("\n");
 7968              		.loc 1 1794 0 is_stmt 1
 7969 6288 BF0A0000 		movl	$10, %edi
 7969      00
 7970 628d E8000000 		call	putchar
 7970      00
 7971              	.LBB84:
1795:main_final_with_sync.c **** 						for(int i=0; i<32; i++)
 7972              		.loc 1 1795 0
 7973 6292 C78558F3 		movl	$0, -3240(%rbp)
 7973      FFFF0000 
 7973      0000
 7974 629c EB3D     		jmp	.L388
 7975              	.L390:
1796:main_final_with_sync.c **** 						{
1797:main_final_with_sync.c **** 							if(decrypted_ack1_again2_int[i] != ack1[i])
 7976              		.loc 1 1797 0
 7977 629e 8B8558F3 		movl	-3240(%rbp), %eax
 7977      FFFF
 7978 62a4 4898     		cltq
 7979 62a6 8B948550 		movl	-688(%rbp,%rax,4), %edx
 7979      FDFFFF
 7980 62ad 8B8558F3 		movl	-3240(%rbp), %eax
 7980      FFFF
 7981 62b3 4898     		cltq
 7982 62b5 8B848550 		movl	-2480(%rbp,%rax,4), %eax
 7982      F6FFFF
 7983 62bc 39C2     		cmpl	%eax, %edx
 7984 62be 7414     		je	.L389
1798:main_final_with_sync.c **** 							{
1799:main_final_with_sync.c **** 								arb = 1;
 7985              		.loc 1 1799 0
 7986 62c0 C78548F3 		movl	$1, -3256(%rbp)
 7986      FFFF0100 
 7986      0000
1800:main_final_with_sync.c **** 								printf("%s\n", "Ack1 doesn't match");
 7987              		.loc 1 1800 0
 7988 62ca BF000000 		movl	$.LC222, %edi
 7988      00
 7989 62cf E8000000 		call	puts
 7989      00
 7990              	.L389:
1795:main_final_with_sync.c **** 						{
 7991              		.loc 1 1795 0 discriminator 2
 7992 62d4 838558F3 		addl	$1, -3240(%rbp)
 7992      FFFF01
 7993              	.L388:
1795:main_final_with_sync.c **** 						{
 7994              		.loc 1 1795 0 is_stmt 0 discriminator 1
 7995 62db 83BD58F3 		cmpl	$31, -3240(%rbp)
 7995      FFFF1F
 7996 62e2 7EBA     		jle	.L390
 7997              	.LBE84:
1801:main_final_with_sync.c **** 
1802:main_final_with_sync.c **** 							}
1803:main_final_with_sync.c **** 						}
1804:main_final_with_sync.c **** 						if(arb == 0)
 7998              		.loc 1 1804 0 is_stmt 1
 7999 62e4 83BD48F3 		cmpl	$0, -3256(%rbp)
 7999      FFFF00
 8000 62eb 7405     		je	.L464
 8001              	.LBE85:
1805:main_final_with_sync.c **** 							break;
1806:main_final_with_sync.c **** 					}
 8002              		.loc 1 1806 0
 8003 62ed E921FCFF 		jmp	.L392
 8003      FF
 8004              	.L464:
 8005              	.LBB86:
1805:main_final_with_sync.c **** 							break;
 8006              		.loc 1 1805 0
 8007 62f2 90       		nop
 8008              	.L376:
 8009              	.LBE86:
1807:main_final_with_sync.c **** 
1808:main_final_with_sync.c **** 					if(breaker>=1) continue;
 8010              		.loc 1 1808 0
 8011 62f3 83BD44F3 		cmpl	$0, -3260(%rbp)
 8011      FFFF00
 8012 62fa 0F8F9D11 		jg	.L465
 8012      0000
1809:main_final_with_sync.c **** 
1810:main_final_with_sync.c **** 					if(arb3 == 1)
 8013              		.loc 1 1810 0
 8014 6300 83BD40F3 		cmpl	$1, -3264(%rbp)
 8014      FFFF01
 8015 6307 0F849311 		je	.L466
 8015      0000
1811:main_final_with_sync.c **** 					{
1812:main_final_with_sync.c **** 						continue;
1813:main_final_with_sync.c **** 					}
1814:main_final_with_sync.c **** 
1815:main_final_with_sync.c **** 					printf("%s\n", "Ack1 match successfully");
 8016              		.loc 1 1815 0
 8017 630d BF000000 		movl	$.LC223, %edi
 8017      00
 8018 6312 E8000000 		call	puts
 8018      00
1816:main_final_with_sync.c **** 
1817:main_final_with_sync.c **** 					printf("%s\n", "encrypting last 32 bits to send to fpga ");
 8019              		.loc 1 1817 0
 8020 6317 BF000000 		movl	$.LC224, %edi
 8020      00
 8021 631c E8000000 		call	puts
 8021      00
1818:main_final_with_sync.c **** 
1819:main_final_with_sync.c **** 					encrypter(p2, K, bin2);
 8022              		.loc 1 1819 0
 8023 6321 488D95D0 		leaq	-1072(%rbp), %rdx
 8023      FBFFFF
 8024 6328 488D8DD0 		leaq	-2608(%rbp), %rcx
 8024      F5FFFF
 8025 632f 488D85D0 		leaq	-1328(%rbp), %rax
 8025      FAFFFF
 8026 6336 4889CE   		movq	%rcx, %rsi
 8027 6339 4889C7   		movq	%rax, %rdi
 8028 633c E8000000 		call	encrypter
 8028      00
1820:main_final_with_sync.c **** 
1821:main_final_with_sync.c **** 					printf("%s\n", "Last 32 bits got encrypted , they are as in binary form");
 8029              		.loc 1 1821 0
 8030 6341 BF000000 		movl	$.LC225, %edi
 8030      00
 8031 6346 E8000000 		call	puts
 8031      00
 8032              	.LBB87:
1822:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 8033              		.loc 1 1822 0
 8034 634b C7855CF3 		movl	$0, -3236(%rbp)
 8034      FFFF0000 
 8034      0000
 8035 6355 EB27     		jmp	.L395
 8036              	.L396:
1823:main_final_with_sync.c **** 					{
1824:main_final_with_sync.c **** 						printf("%d ", bin2[i]);
 8037              		.loc 1 1824 0 discriminator 3
 8038 6357 8B855CF3 		movl	-3236(%rbp), %eax
 8038      FFFF
 8039 635d 4898     		cltq
 8040 635f 8B8485D0 		movl	-1072(%rbp,%rax,4), %eax
 8040      FBFFFF
 8041 6366 89C6     		movl	%eax, %esi
 8042 6368 BF000000 		movl	$.LC10, %edi
 8042      00
 8043 636d B8000000 		movl	$0, %eax
 8043      00
 8044 6372 E8000000 		call	printf
 8044      00
1822:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 8045              		.loc 1 1822 0 discriminator 3
 8046 6377 83855CF3 		addl	$1, -3236(%rbp)
 8046      FFFF01
 8047              	.L395:
1822:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 8048              		.loc 1 1822 0 is_stmt 0 discriminator 1
 8049 637e 83BD5CF3 		cmpl	$31, -3236(%rbp)
 8049      FFFF1F
 8050 6385 7ED0     		jle	.L396
 8051              	.LBE87:
1825:main_final_with_sync.c **** 					}
1826:main_final_with_sync.c **** 
1827:main_final_with_sync.c **** 					uint8 last32_bitsTosend[4];
1828:main_final_with_sync.c **** 					printf("%s\n", "Converting last 32 bits to uint8");
 8052              		.loc 1 1828 0 is_stmt 1
 8053 6387 BF000000 		movl	$.LC226, %edi
 8053      00
 8054 638c E8000000 		call	puts
 8054      00
1829:main_final_with_sync.c **** 					BinTouint8(last32_bitsTosend, bin2);
 8055              		.loc 1 1829 0
 8056 6391 488D95D0 		leaq	-1072(%rbp), %rdx
 8056      FBFFFF
 8057 6398 488D45B0 		leaq	-80(%rbp), %rax
 8058 639c 4889D6   		movq	%rdx, %rsi
 8059 639f 4889C7   		movq	%rax, %rdi
 8060 63a2 E8000000 		call	BinTouint8
 8060      00
1830:main_final_with_sync.c **** 					printf("%s\n", "Last 32 bits got converted to uint8, they are as");
 8061              		.loc 1 1830 0
 8062 63a7 BF000000 		movl	$.LC227, %edi
 8062      00
 8063 63ac E8000000 		call	puts
 8063      00
 8064              	.LBB88:
1831:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 8065              		.loc 1 1831 0
 8066 63b1 C78560F3 		movl	$0, -3232(%rbp)
 8066      FFFF0000 
 8066      0000
 8067 63bb EB28     		jmp	.L397
 8068              	.L398:
1832:main_final_with_sync.c **** 					{
1833:main_final_with_sync.c **** 						printf("%d ", last32_bitsTosend[i]);
 8069              		.loc 1 1833 0 discriminator 3
 8070 63bd 8B8560F3 		movl	-3232(%rbp), %eax
 8070      FFFF
 8071 63c3 4898     		cltq
 8072 63c5 0FB64405 		movzbl	-80(%rbp,%rax), %eax
 8072      B0
 8073 63ca 0FB6C0   		movzbl	%al, %eax
 8074 63cd 89C6     		movl	%eax, %esi
 8075 63cf BF000000 		movl	$.LC10, %edi
 8075      00
 8076 63d4 B8000000 		movl	$0, %eax
 8076      00
 8077 63d9 E8000000 		call	printf
 8077      00
1831:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 8078              		.loc 1 1831 0 discriminator 3
 8079 63de 838560F3 		addl	$1, -3232(%rbp)
 8079      FFFF01
 8080              	.L397:
1831:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 8081              		.loc 1 1831 0 is_stmt 0 discriminator 1
 8082 63e5 83BD60F3 		cmpl	$3, -3232(%rbp)
 8082      FFFF03
 8083 63ec 7ECF     		jle	.L398
 8084              	.LBE88:
1834:main_final_with_sync.c **** 					}
1835:main_final_with_sync.c **** 					printf("\n");
 8085              		.loc 1 1835 0 is_stmt 1
 8086 63ee BF0A0000 		movl	$10, %edi
 8086      00
 8087 63f3 E8000000 		call	putchar
 8087      00
1836:main_final_with_sync.c **** 					printf("%s\n", "Writing on channel last 32 bits encrypted");
 8088              		.loc 1 1836 0
 8089 63f8 BF000000 		movl	$.LC228, %edi
 8089      00
 8090 63fd E8000000 		call	puts
 8090      00
1837:main_final_with_sync.c **** 					delay(del);
 8091              		.loc 1 1837 0
 8092 6402 8B85B8F3 		movl	-3144(%rbp), %eax
 8092      FFFF
 8093 6408 89C7     		movl	%eax, %edi
 8094 640a E8000000 		call	delay
 8094      00
1838:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &last32_bitsTosend[0], &error);
 8095              		.loc 1 1838 0
 8096 640f 8B85D0F2 		movl	-3376(%rbp), %eax
 8096      FFFF
 8097 6415 01C0     		addl	%eax, %eax
 8098 6417 83C001   		addl	$1, %eax
 8099 641a 0FB6F0   		movzbl	%al, %esi
 8100 641d 488B85E8 		movq	-3096(%rbp), %rax
 8100      F3FFFF
 8101 6424 488D8DF0 		leaq	-3088(%rbp), %rcx
 8101      F3FFFF
 8102 642b 488D55B0 		leaq	-80(%rbp), %rdx
 8103 642f 4989C8   		movq	%rcx, %r8
 8104 6432 4889D1   		movq	%rdx, %rcx
 8105 6435 BA010000 		movl	$1, %edx
 8105      00
 8106 643a 4889C7   		movq	%rax, %rdi
 8107 643d E8000000 		call	flWriteChannel
 8107      00
 8108 6442 8985C0F2 		movl	%eax, -3392(%rbp)
 8108      FFFF
1839:main_final_with_sync.c **** 					delay(del);
 8109              		.loc 1 1839 0
 8110 6448 8B85B8F3 		movl	-3144(%rbp), %eax
 8110      FFFF
 8111 644e 89C7     		movl	%eax, %edi
 8112 6450 E8000000 		call	delay
 8112      00
1840:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &last32_bitsTosend[1], &error);
 8113              		.loc 1 1840 0
 8114 6455 8B85D0F2 		movl	-3376(%rbp), %eax
 8114      FFFF
 8115 645b 01C0     		addl	%eax, %eax
 8116 645d 83C001   		addl	$1, %eax
 8117 6460 0FB6F0   		movzbl	%al, %esi
 8118 6463 488B85E8 		movq	-3096(%rbp), %rax
 8118      F3FFFF
 8119 646a 488D8DF0 		leaq	-3088(%rbp), %rcx
 8119      F3FFFF
 8120 6471 488D55B0 		leaq	-80(%rbp), %rdx
 8121 6475 4883C201 		addq	$1, %rdx
 8122 6479 4989C8   		movq	%rcx, %r8
 8123 647c 4889D1   		movq	%rdx, %rcx
 8124 647f BA010000 		movl	$1, %edx
 8124      00
 8125 6484 4889C7   		movq	%rax, %rdi
 8126 6487 E8000000 		call	flWriteChannel
 8126      00
 8127 648c 8985C0F2 		movl	%eax, -3392(%rbp)
 8127      FFFF
1841:main_final_with_sync.c **** 					delay(del);
 8128              		.loc 1 1841 0
 8129 6492 8B85B8F3 		movl	-3144(%rbp), %eax
 8129      FFFF
 8130 6498 89C7     		movl	%eax, %edi
 8131 649a E8000000 		call	delay
 8131      00
1842:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &last32_bitsTosend[2], &error);
 8132              		.loc 1 1842 0
 8133 649f 8B85D0F2 		movl	-3376(%rbp), %eax
 8133      FFFF
 8134 64a5 01C0     		addl	%eax, %eax
 8135 64a7 83C001   		addl	$1, %eax
 8136 64aa 0FB6F0   		movzbl	%al, %esi
 8137 64ad 488B85E8 		movq	-3096(%rbp), %rax
 8137      F3FFFF
 8138 64b4 488D8DF0 		leaq	-3088(%rbp), %rcx
 8138      F3FFFF
 8139 64bb 488D55B0 		leaq	-80(%rbp), %rdx
 8140 64bf 4883C202 		addq	$2, %rdx
 8141 64c3 4989C8   		movq	%rcx, %r8
 8142 64c6 4889D1   		movq	%rdx, %rcx
 8143 64c9 BA010000 		movl	$1, %edx
 8143      00
 8144 64ce 4889C7   		movq	%rax, %rdi
 8145 64d1 E8000000 		call	flWriteChannel
 8145      00
 8146 64d6 8985C0F2 		movl	%eax, -3392(%rbp)
 8146      FFFF
1843:main_final_with_sync.c **** 					delay(del);
 8147              		.loc 1 1843 0
 8148 64dc 8B85B8F3 		movl	-3144(%rbp), %eax
 8148      FFFF
 8149 64e2 89C7     		movl	%eax, %edi
 8150 64e4 E8000000 		call	delay
 8150      00
1844:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &last32_bitsTosend[3], &error);
 8151              		.loc 1 1844 0
 8152 64e9 8B85D0F2 		movl	-3376(%rbp), %eax
 8152      FFFF
 8153 64ef 01C0     		addl	%eax, %eax
 8154 64f1 83C001   		addl	$1, %eax
 8155 64f4 0FB6F0   		movzbl	%al, %esi
 8156 64f7 488B85E8 		movq	-3096(%rbp), %rax
 8156      F3FFFF
 8157 64fe 488D8DF0 		leaq	-3088(%rbp), %rcx
 8157      F3FFFF
 8158 6505 488D55B0 		leaq	-80(%rbp), %rdx
 8159 6509 4883C203 		addq	$3, %rdx
 8160 650d 4989C8   		movq	%rcx, %r8
 8161 6510 4889D1   		movq	%rdx, %rcx
 8162 6513 BA010000 		movl	$1, %edx
 8162      00
 8163 6518 4889C7   		movq	%rax, %rdi
 8164 651b E8000000 		call	flWriteChannel
 8164      00
 8165 6520 8985C0F2 		movl	%eax, -3392(%rbp)
 8165      FFFF
1845:main_final_with_sync.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8166              		.loc 1 1845 0
 8167 6526 83BDC0F2 		cmpl	$0, -3392(%rbp)
 8167      FFFF00
 8168 652d 740F     		je	.L399
 8169              		.loc 1 1845 0 is_stmt 0 discriminator 1
 8170 652f C785BCF2 		movl	$1, -3396(%rbp)
 8170      FFFF0100 
 8170      0000
 8171 6539 E9DA0F00 		jmp	.L230
 8171      00
 8172              	.L399:
1846:main_final_with_sync.c **** 					printf("%s\n", "Successfully written last 32 bits");
 8173              		.loc 1 1846 0 is_stmt 1
 8174 653e BF000000 		movl	$.LC229, %edi
 8174      00
 8175 6543 E8000000 		call	puts
 8175      00
1847:main_final_with_sync.c **** 
1848:main_final_with_sync.c **** 					printf("%s\n", "---------------------------------H7 ends---------------------");
 8176              		.loc 1 1848 0
 8177 6548 BF000000 		movl	$.LC230, %edi
 8177      00
 8178 654d E8000000 		call	puts
 8178      00
1849:main_final_with_sync.c **** 
1850:main_final_with_sync.c **** 					time_t startTime2, endTime2;
1851:main_final_with_sync.c **** 					double diff2;
1852:main_final_with_sync.c **** 					time(&startTime2);
 8179              		.loc 1 1852 0
 8180 6552 488D8508 		leaq	-3064(%rbp), %rax
 8180      F4FFFF
 8181 6559 4889C7   		movq	%rax, %rdi
 8182 655c E8000000 		call	time
 8182      00
1853:main_final_with_sync.c **** 
1854:main_final_with_sync.c **** 					int breaker2 = 0;
 8183              		.loc 1 1854 0
 8184 6561 C78564F3 		movl	$0, -3228(%rbp)
 8184      FFFF0000 
 8184      0000
 8185              	.L421:
 8186              	.LBB89:
1855:main_final_with_sync.c **** 					while(true)
1856:main_final_with_sync.c **** 					{
1857:main_final_with_sync.c **** 						time(&endTime2);
 8187              		.loc 1 1857 0
 8188 656b 488D8510 		leaq	-3056(%rbp), %rax
 8188      F4FFFF
 8189 6572 4889C7   		movq	%rax, %rdi
 8190 6575 E8000000 		call	time
 8190      00
1858:main_final_with_sync.c **** 						diff2 = difftime(endTime2, startTime2);
 8191              		.loc 1 1858 0
 8192 657a 488B9508 		movq	-3064(%rbp), %rdx
 8192      F4FFFF
 8193 6581 488B8510 		movq	-3056(%rbp), %rax
 8193      F4FFFF
 8194 6588 4889D6   		movq	%rdx, %rsi
 8195 658b 4889C7   		movq	%rax, %rdi
 8196 658e E8000000 		call	difftime
 8196      00
 8197 6593 66480F7E 		movq	%xmm0, %rax
 8197      C0
 8198 6598 488985E8 		movq	%rax, -2840(%rbp)
 8198      F4FFFF
1859:main_final_with_sync.c **** 						if(diff2 > 256)
 8199              		.loc 1 1859 0
 8200 659f F20F1085 		movsd	-2840(%rbp), %xmm0
 8200      E8F4FFFF 
 8201 65a7 660F2E05 		ucomisd	.LC216(%rip), %xmm0
 8201      00000000 
 8202 65af 7613     		jbe	.L461
1860:main_final_with_sync.c **** 						{
1861:main_final_with_sync.c **** 							printf("%s\n", "Going to H2, time exceeded 256 seconds");
 8203              		.loc 1 1861 0
 8204 65b1 BF000000 		movl	$.LC217, %edi
 8204      00
 8205 65b6 E8000000 		call	puts
 8205      00
1862:main_final_with_sync.c **** 							k = k-1;
 8206              		.loc 1 1862 0
 8207 65bb 83ADD0F2 		subl	$1, -3376(%rbp)
 8207      FFFF01
 8208 65c2 EBA7     		jmp	.L421
 8209              	.L461:
1863:main_final_with_sync.c **** 							continue;
1864:main_final_with_sync.c **** 						}
1865:main_final_with_sync.c **** 						int arb2 = 0;
 8210              		.loc 1 1865 0
 8211 65c4 C78568F3 		movl	$0, -3224(%rbp)
 8211      FFFF0000 
 8211      0000
1866:main_final_with_sync.c **** 						uint8 encrypted_ack1_again3[4];
1867:main_final_with_sync.c **** 						delay(del);
 8212              		.loc 1 1867 0
 8213 65ce 8B85B8F3 		movl	-3144(%rbp), %eax
 8213      FFFF
 8214 65d4 89C7     		movl	%eax, %edi
 8215 65d6 E8000000 		call	delay
 8215      00
1868:main_final_with_sync.c **** 						fStatus = flReadChannel(handle, 2*k, 1, &encrypted_ack1_again3[0], &error);
 8216              		.loc 1 1868 0
 8217 65db 8B85D0F2 		movl	-3376(%rbp), %eax
 8217      FFFF
 8218 65e1 01C0     		addl	%eax, %eax
 8219 65e3 0FB6F0   		movzbl	%al, %esi
 8220 65e6 488B85E8 		movq	-3096(%rbp), %rax
 8220      F3FFFF
 8221 65ed 488D8DF0 		leaq	-3088(%rbp), %rcx
 8221      F3FFFF
 8222 65f4 488D55D0 		leaq	-48(%rbp), %rdx
 8223 65f8 4989C8   		movq	%rcx, %r8
 8224 65fb 4889D1   		movq	%rdx, %rcx
 8225 65fe BA010000 		movl	$1, %edx
 8225      00
 8226 6603 4889C7   		movq	%rax, %rdi
 8227 6606 E8000000 		call	flReadChannel
 8227      00
 8228 660b 8985C0F2 		movl	%eax, -3392(%rbp)
 8228      FFFF
1869:main_final_with_sync.c **** 						if(encrypted_ack1_again3[0] == reset) 
 8229              		.loc 1 1869 0
 8230 6611 0FB645D0 		movzbl	-48(%rbp), %eax
 8231 6615 3A85B7F2 		cmpb	-3401(%rbp), %al
 8231      FFFF
 8232 661b 751D     		jne	.L403
1870:main_final_with_sync.c **** 							{
1871:main_final_with_sync.c **** 								k--; 
 8233              		.loc 1 1871 0
 8234 661d 83ADD0F2 		subl	$1, -3376(%rbp)
 8234      FFFF01
1872:main_final_with_sync.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 8235              		.loc 1 1872 0
 8236 6624 BF000000 		movl	$.LC157, %edi
 8236      00
 8237 6629 E8000000 		call	puts
 8237      00
1873:main_final_with_sync.c **** 								breaker2++; 
 8238              		.loc 1 1873 0
 8239 662e 838564F3 		addl	$1, -3228(%rbp)
 8239      FFFF01
1874:main_final_with_sync.c **** 								break;
 8240              		.loc 1 1874 0
 8241 6635 E9030300 		jmp	.L404
 8241      00
 8242              	.L403:
1875:main_final_with_sync.c **** 							}
1876:main_final_with_sync.c **** 						delay(del);
 8243              		.loc 1 1876 0
 8244 663a 8B85B8F3 		movl	-3144(%rbp), %eax
 8244      FFFF
 8245 6640 89C7     		movl	%eax, %edi
 8246 6642 E8000000 		call	delay
 8246      00
1877:main_final_with_sync.c **** 						fStatus = flReadChannel(handle, 2*k, 1, &encrypted_ack1_again3[1], &error);
 8247              		.loc 1 1877 0
 8248 6647 8B85D0F2 		movl	-3376(%rbp), %eax
 8248      FFFF
 8249 664d 01C0     		addl	%eax, %eax
 8250 664f 0FB6F0   		movzbl	%al, %esi
 8251 6652 488B85E8 		movq	-3096(%rbp), %rax
 8251      F3FFFF
 8252 6659 488D8DF0 		leaq	-3088(%rbp), %rcx
 8252      F3FFFF
 8253 6660 488D55D0 		leaq	-48(%rbp), %rdx
 8254 6664 4883C201 		addq	$1, %rdx
 8255 6668 4989C8   		movq	%rcx, %r8
 8256 666b 4889D1   		movq	%rdx, %rcx
 8257 666e BA010000 		movl	$1, %edx
 8257      00
 8258 6673 4889C7   		movq	%rax, %rdi
 8259 6676 E8000000 		call	flReadChannel
 8259      00
 8260 667b 8985C0F2 		movl	%eax, -3392(%rbp)
 8260      FFFF
1878:main_final_with_sync.c **** 						if(encrypted_ack1_again3[1] == reset) 
 8261              		.loc 1 1878 0
 8262 6681 0FB645D1 		movzbl	-47(%rbp), %eax
 8263 6685 3A85B7F2 		cmpb	-3401(%rbp), %al
 8263      FFFF
 8264 668b 751D     		jne	.L405
1879:main_final_with_sync.c **** 							{
1880:main_final_with_sync.c **** 								k--; 
 8265              		.loc 1 1880 0
 8266 668d 83ADD0F2 		subl	$1, -3376(%rbp)
 8266      FFFF01
1881:main_final_with_sync.c **** 								breaker2++;
 8267              		.loc 1 1881 0
 8268 6694 838564F3 		addl	$1, -3228(%rbp)
 8268      FFFF01
1882:main_final_with_sync.c **** 								printf("%s\n", "-------------------------RESET------------------------"); 
 8269              		.loc 1 1882 0
 8270 669b BF000000 		movl	$.LC157, %edi
 8270      00
 8271 66a0 E8000000 		call	puts
 8271      00
1883:main_final_with_sync.c **** 								break;
 8272              		.loc 1 1883 0
 8273 66a5 E9930200 		jmp	.L404
 8273      00
 8274              	.L405:
1884:main_final_with_sync.c **** 							}
1885:main_final_with_sync.c **** 						delay(del);
 8275              		.loc 1 1885 0
 8276 66aa 8B85B8F3 		movl	-3144(%rbp), %eax
 8276      FFFF
 8277 66b0 89C7     		movl	%eax, %edi
 8278 66b2 E8000000 		call	delay
 8278      00
1886:main_final_with_sync.c **** 						fStatus = flReadChannel(handle, 2*k, 1, &encrypted_ack1_again3[2], &error);
 8279              		.loc 1 1886 0
 8280 66b7 8B85D0F2 		movl	-3376(%rbp), %eax
 8280      FFFF
 8281 66bd 01C0     		addl	%eax, %eax
 8282 66bf 0FB6F0   		movzbl	%al, %esi
 8283 66c2 488B85E8 		movq	-3096(%rbp), %rax
 8283      F3FFFF
 8284 66c9 488D8DF0 		leaq	-3088(%rbp), %rcx
 8284      F3FFFF
 8285 66d0 488D55D0 		leaq	-48(%rbp), %rdx
 8286 66d4 4883C202 		addq	$2, %rdx
 8287 66d8 4989C8   		movq	%rcx, %r8
 8288 66db 4889D1   		movq	%rdx, %rcx
 8289 66de BA010000 		movl	$1, %edx
 8289      00
 8290 66e3 4889C7   		movq	%rax, %rdi
 8291 66e6 E8000000 		call	flReadChannel
 8291      00
 8292 66eb 8985C0F2 		movl	%eax, -3392(%rbp)
 8292      FFFF
1887:main_final_with_sync.c **** 						if(encrypted_ack1_again3[2] == reset) 
 8293              		.loc 1 1887 0
 8294 66f1 0FB645D2 		movzbl	-46(%rbp), %eax
 8295 66f5 3A85B7F2 		cmpb	-3401(%rbp), %al
 8295      FFFF
 8296 66fb 751D     		jne	.L406
1888:main_final_with_sync.c **** 							{
1889:main_final_with_sync.c **** 								k--; 
 8297              		.loc 1 1889 0
 8298 66fd 83ADD0F2 		subl	$1, -3376(%rbp)
 8298      FFFF01
1890:main_final_with_sync.c **** 								breaker2++; 
 8299              		.loc 1 1890 0
 8300 6704 838564F3 		addl	$1, -3228(%rbp)
 8300      FFFF01
1891:main_final_with_sync.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 8301              		.loc 1 1891 0
 8302 670b BF000000 		movl	$.LC157, %edi
 8302      00
 8303 6710 E8000000 		call	puts
 8303      00
1892:main_final_with_sync.c **** 								break;
 8304              		.loc 1 1892 0
 8305 6715 E9230200 		jmp	.L404
 8305      00
 8306              	.L406:
1893:main_final_with_sync.c **** 							}
1894:main_final_with_sync.c **** 						delay(del);
 8307              		.loc 1 1894 0
 8308 671a 8B85B8F3 		movl	-3144(%rbp), %eax
 8308      FFFF
 8309 6720 89C7     		movl	%eax, %edi
 8310 6722 E8000000 		call	delay
 8310      00
1895:main_final_with_sync.c **** 						fStatus = flReadChannel(handle, 2*k, 1, &encrypted_ack1_again3[3], &error);
 8311              		.loc 1 1895 0
 8312 6727 8B85D0F2 		movl	-3376(%rbp), %eax
 8312      FFFF
 8313 672d 01C0     		addl	%eax, %eax
 8314 672f 0FB6F0   		movzbl	%al, %esi
 8315 6732 488B85E8 		movq	-3096(%rbp), %rax
 8315      F3FFFF
 8316 6739 488D8DF0 		leaq	-3088(%rbp), %rcx
 8316      F3FFFF
 8317 6740 488D55D0 		leaq	-48(%rbp), %rdx
 8318 6744 4883C203 		addq	$3, %rdx
 8319 6748 4989C8   		movq	%rcx, %r8
 8320 674b 4889D1   		movq	%rdx, %rcx
 8321 674e BA010000 		movl	$1, %edx
 8321      00
 8322 6753 4889C7   		movq	%rax, %rdi
 8323 6756 E8000000 		call	flReadChannel
 8323      00
 8324 675b 8985C0F2 		movl	%eax, -3392(%rbp)
 8324      FFFF
1896:main_final_with_sync.c **** 						if(encrypted_ack1_again3[3] == reset) 
 8325              		.loc 1 1896 0
 8326 6761 0FB645D3 		movzbl	-45(%rbp), %eax
 8327 6765 3A85B7F2 		cmpb	-3401(%rbp), %al
 8327      FFFF
 8328 676b 751D     		jne	.L407
1897:main_final_with_sync.c **** 							{
1898:main_final_with_sync.c **** 								k--; 
 8329              		.loc 1 1898 0
 8330 676d 83ADD0F2 		subl	$1, -3376(%rbp)
 8330      FFFF01
1899:main_final_with_sync.c **** 								breaker2++;
 8331              		.loc 1 1899 0
 8332 6774 838564F3 		addl	$1, -3228(%rbp)
 8332      FFFF01
1900:main_final_with_sync.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 8333              		.loc 1 1900 0
 8334 677b BF000000 		movl	$.LC157, %edi
 8334      00
 8335 6780 E8000000 		call	puts
 8335      00
1901:main_final_with_sync.c **** 								break;
 8336              		.loc 1 1901 0
 8337 6785 E9B30100 		jmp	.L404
 8337      00
 8338              	.L407:
1902:main_final_with_sync.c **** 							}
1903:main_final_with_sync.c **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8339              		.loc 1 1903 0
 8340 678a 83BDC0F2 		cmpl	$0, -3392(%rbp)
 8340      FFFF00
 8341 6791 740F     		je	.L408
 8342              		.loc 1 1903 0 is_stmt 0 discriminator 1
 8343 6793 C785BCF2 		movl	$1, -3396(%rbp)
 8343      FFFF0100 
 8343      0000
 8344              	.LBE89:
 8345              	.LBE107:
 8346              	.LBE110:
 8347              	.LBE113:
1294:main_final_with_sync.c **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 8348              		.loc 1 1294 0 is_stmt 1 discriminator 1
 8349 679d E9760D00 		jmp	.L230
 8349      00
 8350              	.L408:
 8351              	.LBB114:
 8352              	.LBB111:
 8353              	.LBB108:
 8354              	.LBB94:
1904:main_final_with_sync.c **** 						printf("%s\n", "Ack1 received successfully, not checked yet, it is as----");
 8355              		.loc 1 1904 0
 8356 67a2 BF000000 		movl	$.LC218, %edi
 8356      00
 8357 67a7 E8000000 		call	puts
 8357      00
 8358              	.LBB90:
1905:main_final_with_sync.c **** 						for (int i = 0; i < 4; ++i)
 8359              		.loc 1 1905 0
 8360 67ac C7856CF3 		movl	$0, -3220(%rbp)
 8360      FFFF0000 
 8360      0000
 8361 67b6 EB28     		jmp	.L409
 8362              	.L410:
1906:main_final_with_sync.c **** 						{
1907:main_final_with_sync.c **** 							printf("%d ", encrypted_ack1_again3[i]);
 8363              		.loc 1 1907 0 discriminator 3
 8364 67b8 8B856CF3 		movl	-3220(%rbp), %eax
 8364      FFFF
 8365 67be 4898     		cltq
 8366 67c0 0FB64405 		movzbl	-48(%rbp,%rax), %eax
 8366      D0
 8367 67c5 0FB6C0   		movzbl	%al, %eax
 8368 67c8 89C6     		movl	%eax, %esi
 8369 67ca BF000000 		movl	$.LC10, %edi
 8369      00
 8370 67cf B8000000 		movl	$0, %eax
 8370      00
 8371 67d4 E8000000 		call	printf
 8371      00
1905:main_final_with_sync.c **** 						for (int i = 0; i < 4; ++i)
 8372              		.loc 1 1905 0 discriminator 3
 8373 67d9 83856CF3 		addl	$1, -3220(%rbp)
 8373      FFFF01
 8374              	.L409:
1905:main_final_with_sync.c **** 						for (int i = 0; i < 4; ++i)
 8375              		.loc 1 1905 0 is_stmt 0 discriminator 1
 8376 67e0 83BD6CF3 		cmpl	$3, -3220(%rbp)
 8376      FFFF03
 8377 67e7 7ECF     		jle	.L410
 8378              	.LBE90:
1908:main_final_with_sync.c **** 						}
1909:main_final_with_sync.c **** 						printf("\n");
 8379              		.loc 1 1909 0 is_stmt 1
 8380 67e9 BF0A0000 		movl	$10, %edi
 8380      00
 8381 67ee E8000000 		call	putchar
 8381      00
1910:main_final_with_sync.c **** 						int encrypted_ack1_again3_int[32];
1911:main_final_with_sync.c **** 						printf("%s\n", "Converting encrypted ack1 from uint8 to binary");
 8382              		.loc 1 1911 0
 8383 67f3 BF000000 		movl	$.LC176, %edi
 8383      00
 8384 67f8 E8000000 		call	puts
 8384      00
1912:main_final_with_sync.c **** 						uint8ToBin(encrypted_ack1_again3, encrypted_ack1_again3_int);
 8385              		.loc 1 1912 0
 8386 67fd 488D95D0 		leaq	-816(%rbp), %rdx
 8386      FCFFFF
 8387 6804 488D45D0 		leaq	-48(%rbp), %rax
 8388 6808 4889D6   		movq	%rdx, %rsi
 8389 680b 4889C7   		movq	%rax, %rdi
 8390 680e E8000000 		call	uint8ToBin
 8390      00
1913:main_final_with_sync.c **** 						printf("%s\n", "Converted encrypted ack1 from uint8 to binary , it is as --");
 8391              		.loc 1 1913 0
 8392 6813 BF000000 		movl	$.LC219, %edi
 8392      00
 8393 6818 E8000000 		call	puts
 8393      00
 8394              	.LBB91:
1914:main_final_with_sync.c **** 						for (int i = 0; i < 32; ++i)
 8395              		.loc 1 1914 0
 8396 681d C78570F3 		movl	$0, -3216(%rbp)
 8396      FFFF0000 
 8396      0000
 8397 6827 EB27     		jmp	.L411
 8398              	.L412:
1915:main_final_with_sync.c **** 						{
1916:main_final_with_sync.c **** 							printf("%d ", encrypted_ack1_again3_int[i]);
 8399              		.loc 1 1916 0 discriminator 3
 8400 6829 8B8570F3 		movl	-3216(%rbp), %eax
 8400      FFFF
 8401 682f 4898     		cltq
 8402 6831 8B8485D0 		movl	-816(%rbp,%rax,4), %eax
 8402      FCFFFF
 8403 6838 89C6     		movl	%eax, %esi
 8404 683a BF000000 		movl	$.LC10, %edi
 8404      00
 8405 683f B8000000 		movl	$0, %eax
 8405      00
 8406 6844 E8000000 		call	printf
 8406      00
1914:main_final_with_sync.c **** 						for (int i = 0; i < 32; ++i)
 8407              		.loc 1 1914 0 discriminator 3
 8408 6849 838570F3 		addl	$1, -3216(%rbp)
 8408      FFFF01
 8409              	.L411:
1914:main_final_with_sync.c **** 						for (int i = 0; i < 32; ++i)
 8410              		.loc 1 1914 0 is_stmt 0 discriminator 1
 8411 6850 83BD70F3 		cmpl	$31, -3216(%rbp)
 8411      FFFF1F
 8412 6857 7ED0     		jle	.L412
 8413              	.LBE91:
1917:main_final_with_sync.c **** 						}
1918:main_final_with_sync.c **** 						printf("\n");
 8414              		.loc 1 1918 0 is_stmt 1
 8415 6859 BF0A0000 		movl	$10, %edi
 8415      00
 8416 685e E8000000 		call	putchar
 8416      00
1919:main_final_with_sync.c **** 						int decrypted_ack1_again3_int[32];
1920:main_final_with_sync.c **** 						printf("%s\n", "Decrypting the encrypted ack1");
 8417              		.loc 1 1920 0
 8418 6863 BF000000 		movl	$.LC220, %edi
 8418      00
 8419 6868 E8000000 		call	puts
 8419      00
1921:main_final_with_sync.c **** 						decrypter(encrypted_ack1_again3_int, K, decrypted_ack1_again3_int);
 8420              		.loc 1 1921 0
 8421 686d 488D9550 		leaq	-688(%rbp), %rdx
 8421      FDFFFF
 8422 6874 488D8DD0 		leaq	-2608(%rbp), %rcx
 8422      F5FFFF
 8423 687b 488D85D0 		leaq	-816(%rbp), %rax
 8423      FCFFFF
 8424 6882 4889CE   		movq	%rcx, %rsi
 8425 6885 4889C7   		movq	%rax, %rdi
 8426 6888 E8000000 		call	decrypter
 8426      00
1922:main_final_with_sync.c **** 						printf("%s\n", "Encrypted ack1 decrypted successfully, it is as----");
 8427              		.loc 1 1922 0
 8428 688d BF000000 		movl	$.LC221, %edi
 8428      00
 8429 6892 E8000000 		call	puts
 8429      00
 8430              	.LBB92:
1923:main_final_with_sync.c **** 						for (int i = 0; i < 32; ++i)
 8431              		.loc 1 1923 0
 8432 6897 C78574F3 		movl	$0, -3212(%rbp)
 8432      FFFF0000 
 8432      0000
 8433 68a1 EB27     		jmp	.L413
 8434              	.L414:
1924:main_final_with_sync.c **** 						{
1925:main_final_with_sync.c **** 							printf("%d ", decrypted_ack1_again3_int[i]);
 8435              		.loc 1 1925 0 discriminator 3
 8436 68a3 8B8574F3 		movl	-3212(%rbp), %eax
 8436      FFFF
 8437 68a9 4898     		cltq
 8438 68ab 8B848550 		movl	-688(%rbp,%rax,4), %eax
 8438      FDFFFF
 8439 68b2 89C6     		movl	%eax, %esi
 8440 68b4 BF000000 		movl	$.LC10, %edi
 8440      00
 8441 68b9 B8000000 		movl	$0, %eax
 8441      00
 8442 68be E8000000 		call	printf
 8442      00
1923:main_final_with_sync.c **** 						for (int i = 0; i < 32; ++i)
 8443              		.loc 1 1923 0 discriminator 3
 8444 68c3 838574F3 		addl	$1, -3212(%rbp)
 8444      FFFF01
 8445              	.L413:
1923:main_final_with_sync.c **** 						for (int i = 0; i < 32; ++i)
 8446              		.loc 1 1923 0 is_stmt 0 discriminator 1
 8447 68ca 83BD74F3 		cmpl	$31, -3212(%rbp)
 8447      FFFF1F
 8448 68d1 7ED0     		jle	.L414
 8449              	.LBE92:
1926:main_final_with_sync.c **** 						}
1927:main_final_with_sync.c **** 						printf("\n");
 8450              		.loc 1 1927 0 is_stmt 1
 8451 68d3 BF0A0000 		movl	$10, %edi
 8451      00
 8452 68d8 E8000000 		call	putchar
 8452      00
 8453              	.LBB93:
1928:main_final_with_sync.c **** 						for(int i=0; i<32; i++)
 8454              		.loc 1 1928 0
 8455 68dd C78578F3 		movl	$0, -3208(%rbp)
 8455      FFFF0000 
 8455      0000
 8456 68e7 EB3D     		jmp	.L415
 8457              	.L417:
1929:main_final_with_sync.c **** 						{
1930:main_final_with_sync.c **** 							if(decrypted_ack1_again3_int[i] != ack1[i])
 8458              		.loc 1 1930 0
 8459 68e9 8B8578F3 		movl	-3208(%rbp), %eax
 8459      FFFF
 8460 68ef 4898     		cltq
 8461 68f1 8B948550 		movl	-688(%rbp,%rax,4), %edx
 8461      FDFFFF
 8462 68f8 8B8578F3 		movl	-3208(%rbp), %eax
 8462      FFFF
 8463 68fe 4898     		cltq
 8464 6900 8B848550 		movl	-2480(%rbp,%rax,4), %eax
 8464      F6FFFF
 8465 6907 39C2     		cmpl	%eax, %edx
 8466 6909 7414     		je	.L416
1931:main_final_with_sync.c **** 							{
1932:main_final_with_sync.c **** 								arb2 = 1;
 8467              		.loc 1 1932 0
 8468 690b C78568F3 		movl	$1, -3224(%rbp)
 8468      FFFF0100 
 8468      0000
1933:main_final_with_sync.c **** 								printf("%s\n", "Ack1 doesn't match");
 8469              		.loc 1 1933 0
 8470 6915 BF000000 		movl	$.LC222, %edi
 8470      00
 8471 691a E8000000 		call	puts
 8471      00
 8472              	.L416:
1928:main_final_with_sync.c **** 						{
 8473              		.loc 1 1928 0 discriminator 2
 8474 691f 838578F3 		addl	$1, -3208(%rbp)
 8474      FFFF01
 8475              	.L415:
1928:main_final_with_sync.c **** 						{
 8476              		.loc 1 1928 0 is_stmt 0 discriminator 1
 8477 6926 83BD78F3 		cmpl	$31, -3208(%rbp)
 8477      FFFF1F
 8478 692d 7EBA     		jle	.L417
 8479              	.LBE93:
1934:main_final_with_sync.c **** 
1935:main_final_with_sync.c **** 							}
1936:main_final_with_sync.c **** 						}
1937:main_final_with_sync.c **** 						if(arb2 == 0)
 8480              		.loc 1 1937 0 is_stmt 1
 8481 692f 83BD68F3 		cmpl	$0, -3224(%rbp)
 8481      FFFF00
 8482 6936 0F852FFC 		jne	.L421
 8482      FFFF
1938:main_final_with_sync.c **** 							break;
 8483              		.loc 1 1938 0
 8484 693c 90       		nop
 8485              	.L404:
 8486              	.LBE94:
1939:main_final_with_sync.c **** 					}
1940:main_final_with_sync.c **** 
1941:main_final_with_sync.c **** 					if(breaker2 >= 1) continue;
 8487              		.loc 1 1941 0
 8488 693d 83BD64F3 		cmpl	$0, -3228(%rbp)
 8488      FFFF00
 8489 6944 0F8F590B 		jg	.L467
 8489      0000
1942:main_final_with_sync.c **** 
1943:main_final_with_sync.c **** 					printf("\n");
 8490              		.loc 1 1943 0
 8491 694a BF0A0000 		movl	$10, %edi
 8491      00
 8492 694f E8000000 		call	putchar
 8492      00
1944:main_final_with_sync.c **** 					int encrypted_ack2_again[32];
1945:main_final_with_sync.c **** 					printf("%s\n", "Encrypting ack2 ");
 8493              		.loc 1 1945 0
 8494 6954 BF000000 		movl	$.LC231, %edi
 8494      00
 8495 6959 E8000000 		call	puts
 8495      00
1946:main_final_with_sync.c **** 					encrypter(ack2, K, encrypted_ack2_again);
 8496              		.loc 1 1946 0
 8497 695e 488D9550 		leaq	-944(%rbp), %rdx
 8497      FCFFFF
 8498 6965 488D8DD0 		leaq	-2608(%rbp), %rcx
 8498      F5FFFF
 8499 696c 488D85D0 		leaq	-2352(%rbp), %rax
 8499      F6FFFF
 8500 6973 4889CE   		movq	%rcx, %rsi
 8501 6976 4889C7   		movq	%rax, %rdi
 8502 6979 E8000000 		call	encrypter
 8502      00
1947:main_final_with_sync.c **** 					printf("%s\n", "Encrypted ack2 is as follows  ----");
 8503              		.loc 1 1947 0
 8504 697e BF000000 		movl	$.LC232, %edi
 8504      00
 8505 6983 E8000000 		call	puts
 8505      00
 8506              	.LBB95:
1948:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 8507              		.loc 1 1948 0
 8508 6988 C7857CF3 		movl	$0, -3204(%rbp)
 8508      FFFF0000 
 8508      0000
 8509 6992 EB27     		jmp	.L422
 8510              	.L423:
1949:main_final_with_sync.c **** 					{
1950:main_final_with_sync.c **** 						printf("%d ", encrypted_ack2_again[i]);
 8511              		.loc 1 1950 0 discriminator 3
 8512 6994 8B857CF3 		movl	-3204(%rbp), %eax
 8512      FFFF
 8513 699a 4898     		cltq
 8514 699c 8B848550 		movl	-944(%rbp,%rax,4), %eax
 8514      FCFFFF
 8515 69a3 89C6     		movl	%eax, %esi
 8516 69a5 BF000000 		movl	$.LC10, %edi
 8516      00
 8517 69aa B8000000 		movl	$0, %eax
 8517      00
 8518 69af E8000000 		call	printf
 8518      00
1948:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 8519              		.loc 1 1948 0 discriminator 3
 8520 69b4 83857CF3 		addl	$1, -3204(%rbp)
 8520      FFFF01
 8521              	.L422:
1948:main_final_with_sync.c **** 					for (int i = 0; i < 32; ++i)
 8522              		.loc 1 1948 0 is_stmt 0 discriminator 1
 8523 69bb 83BD7CF3 		cmpl	$31, -3204(%rbp)
 8523      FFFF1F
 8524 69c2 7ED0     		jle	.L423
 8525              	.LBE95:
1951:main_final_with_sync.c **** 					}
1952:main_final_with_sync.c **** 					printf("\n");
 8526              		.loc 1 1952 0 is_stmt 1
 8527 69c4 BF0A0000 		movl	$10, %edi
 8527      00
 8528 69c9 E8000000 		call	putchar
 8528      00
1953:main_final_with_sync.c **** 					uint8 encrypted_ack2_again_uint8[4];
1954:main_final_with_sync.c **** 					printf("%s\n", "Converting encrypted ack2 from binary to uint8");
 8529              		.loc 1 1954 0
 8530 69ce BF000000 		movl	$.LC194, %edi
 8530      00
 8531 69d3 E8000000 		call	puts
 8531      00
1955:main_final_with_sync.c **** 					BinTouint8(encrypted_ack2_again_uint8, encrypted_ack2_again);
 8532              		.loc 1 1955 0
 8533 69d8 488D9550 		leaq	-944(%rbp), %rdx
 8533      FCFFFF
 8534 69df 488D45C0 		leaq	-64(%rbp), %rax
 8535 69e3 4889D6   		movq	%rdx, %rsi
 8536 69e6 4889C7   		movq	%rax, %rdi
 8537 69e9 E8000000 		call	BinTouint8
 8537      00
1956:main_final_with_sync.c **** 					printf("%s\n", "Converted encrypted ack2 to uint8, it is as follows");
 8538              		.loc 1 1956 0
 8539 69ee BF000000 		movl	$.LC233, %edi
 8539      00
 8540 69f3 E8000000 		call	puts
 8540      00
 8541              	.LBB96:
1957:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 8542              		.loc 1 1957 0
 8543 69f8 C78580F3 		movl	$0, -3200(%rbp)
 8543      FFFF0000 
 8543      0000
 8544 6a02 EB28     		jmp	.L424
 8545              	.L425:
1958:main_final_with_sync.c **** 					{
1959:main_final_with_sync.c **** 						printf("%d ", encrypted_ack2_again_uint8[i]);
 8546              		.loc 1 1959 0 discriminator 3
 8547 6a04 8B8580F3 		movl	-3200(%rbp), %eax
 8547      FFFF
 8548 6a0a 4898     		cltq
 8549 6a0c 0FB64405 		movzbl	-64(%rbp,%rax), %eax
 8549      C0
 8550 6a11 0FB6C0   		movzbl	%al, %eax
 8551 6a14 89C6     		movl	%eax, %esi
 8552 6a16 BF000000 		movl	$.LC10, %edi
 8552      00
 8553 6a1b B8000000 		movl	$0, %eax
 8553      00
 8554 6a20 E8000000 		call	printf
 8554      00
1957:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 8555              		.loc 1 1957 0 discriminator 3
 8556 6a25 838580F3 		addl	$1, -3200(%rbp)
 8556      FFFF01
 8557              	.L424:
1957:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 8558              		.loc 1 1957 0 is_stmt 0 discriminator 1
 8559 6a2c 83BD80F3 		cmpl	$3, -3200(%rbp)
 8559      FFFF03
 8560 6a33 7ECF     		jle	.L425
 8561              	.LBE96:
1960:main_final_with_sync.c **** 					}
1961:main_final_with_sync.c **** 					printf("\n");
 8562              		.loc 1 1961 0 is_stmt 1
 8563 6a35 BF0A0000 		movl	$10, %edi
 8563      00
 8564 6a3a E8000000 		call	putchar
 8564      00
1962:main_final_with_sync.c **** 					printf("%s\n", "Writing encrypted ack2 to channel");
 8565              		.loc 1 1962 0
 8566 6a3f BF000000 		movl	$.LC234, %edi
 8566      00
 8567 6a44 E8000000 		call	puts
 8567      00
1963:main_final_with_sync.c **** 					delay(del);
 8568              		.loc 1 1963 0
 8569 6a49 8B85B8F3 		movl	-3144(%rbp), %eax
 8569      FFFF
 8570 6a4f 89C7     		movl	%eax, %edi
 8571 6a51 E8000000 		call	delay
 8571      00
1964:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &encrypted_ack2_again_uint8[0], &error);
 8572              		.loc 1 1964 0
 8573 6a56 8B85D0F2 		movl	-3376(%rbp), %eax
 8573      FFFF
 8574 6a5c 01C0     		addl	%eax, %eax
 8575 6a5e 83C001   		addl	$1, %eax
 8576 6a61 0FB6F0   		movzbl	%al, %esi
 8577 6a64 488B85E8 		movq	-3096(%rbp), %rax
 8577      F3FFFF
 8578 6a6b 488D8DF0 		leaq	-3088(%rbp), %rcx
 8578      F3FFFF
 8579 6a72 488D55C0 		leaq	-64(%rbp), %rdx
 8580 6a76 4989C8   		movq	%rcx, %r8
 8581 6a79 4889D1   		movq	%rdx, %rcx
 8582 6a7c BA010000 		movl	$1, %edx
 8582      00
 8583 6a81 4889C7   		movq	%rax, %rdi
 8584 6a84 E8000000 		call	flWriteChannel
 8584      00
 8585 6a89 8985C0F2 		movl	%eax, -3392(%rbp)
 8585      FFFF
1965:main_final_with_sync.c **** 					delay(del);
 8586              		.loc 1 1965 0
 8587 6a8f 8B85B8F3 		movl	-3144(%rbp), %eax
 8587      FFFF
 8588 6a95 89C7     		movl	%eax, %edi
 8589 6a97 E8000000 		call	delay
 8589      00
1966:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &encrypted_ack2_again_uint8[1], &error);
 8590              		.loc 1 1966 0
 8591 6a9c 8B85D0F2 		movl	-3376(%rbp), %eax
 8591      FFFF
 8592 6aa2 01C0     		addl	%eax, %eax
 8593 6aa4 83C001   		addl	$1, %eax
 8594 6aa7 0FB6F0   		movzbl	%al, %esi
 8595 6aaa 488B85E8 		movq	-3096(%rbp), %rax
 8595      F3FFFF
 8596 6ab1 488D8DF0 		leaq	-3088(%rbp), %rcx
 8596      F3FFFF
 8597 6ab8 488D55C0 		leaq	-64(%rbp), %rdx
 8598 6abc 4883C201 		addq	$1, %rdx
 8599 6ac0 4989C8   		movq	%rcx, %r8
 8600 6ac3 4889D1   		movq	%rdx, %rcx
 8601 6ac6 BA010000 		movl	$1, %edx
 8601      00
 8602 6acb 4889C7   		movq	%rax, %rdi
 8603 6ace E8000000 		call	flWriteChannel
 8603      00
 8604 6ad3 8985C0F2 		movl	%eax, -3392(%rbp)
 8604      FFFF
1967:main_final_with_sync.c **** 					delay(del);
 8605              		.loc 1 1967 0
 8606 6ad9 8B85B8F3 		movl	-3144(%rbp), %eax
 8606      FFFF
 8607 6adf 89C7     		movl	%eax, %edi
 8608 6ae1 E8000000 		call	delay
 8608      00
1968:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &encrypted_ack2_again_uint8[2], &error);
 8609              		.loc 1 1968 0
 8610 6ae6 8B85D0F2 		movl	-3376(%rbp), %eax
 8610      FFFF
 8611 6aec 01C0     		addl	%eax, %eax
 8612 6aee 83C001   		addl	$1, %eax
 8613 6af1 0FB6F0   		movzbl	%al, %esi
 8614 6af4 488B85E8 		movq	-3096(%rbp), %rax
 8614      F3FFFF
 8615 6afb 488D8DF0 		leaq	-3088(%rbp), %rcx
 8615      F3FFFF
 8616 6b02 488D55C0 		leaq	-64(%rbp), %rdx
 8617 6b06 4883C202 		addq	$2, %rdx
 8618 6b0a 4989C8   		movq	%rcx, %r8
 8619 6b0d 4889D1   		movq	%rdx, %rcx
 8620 6b10 BA010000 		movl	$1, %edx
 8620      00
 8621 6b15 4889C7   		movq	%rax, %rdi
 8622 6b18 E8000000 		call	flWriteChannel
 8622      00
 8623 6b1d 8985C0F2 		movl	%eax, -3392(%rbp)
 8623      FFFF
1969:main_final_with_sync.c **** 					delay(del);
 8624              		.loc 1 1969 0
 8625 6b23 8B85B8F3 		movl	-3144(%rbp), %eax
 8625      FFFF
 8626 6b29 89C7     		movl	%eax, %edi
 8627 6b2b E8000000 		call	delay
 8627      00
1970:main_final_with_sync.c **** 					fStatus = flWriteChannel(handle, 2*k+1, 1, &encrypted_ack2_again_uint8[3], &error);
 8628              		.loc 1 1970 0
 8629 6b30 8B85D0F2 		movl	-3376(%rbp), %eax
 8629      FFFF
 8630 6b36 01C0     		addl	%eax, %eax
 8631 6b38 83C001   		addl	$1, %eax
 8632 6b3b 0FB6F0   		movzbl	%al, %esi
 8633 6b3e 488B85E8 		movq	-3096(%rbp), %rax
 8633      F3FFFF
 8634 6b45 488D8DF0 		leaq	-3088(%rbp), %rcx
 8634      F3FFFF
 8635 6b4c 488D55C0 		leaq	-64(%rbp), %rdx
 8636 6b50 4883C203 		addq	$3, %rdx
 8637 6b54 4989C8   		movq	%rcx, %r8
 8638 6b57 4889D1   		movq	%rdx, %rcx
 8639 6b5a BA010000 		movl	$1, %edx
 8639      00
 8640 6b5f 4889C7   		movq	%rax, %rdi
 8641 6b62 E8000000 		call	flWriteChannel
 8641      00
 8642 6b67 8985C0F2 		movl	%eax, -3392(%rbp)
 8642      FFFF
1971:main_final_with_sync.c **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 8643              		.loc 1 1971 0
 8644 6b6d 83BDC0F2 		cmpl	$0, -3392(%rbp)
 8644      FFFF00
 8645 6b74 740F     		je	.L426
 8646              		.loc 1 1971 0 is_stmt 0 discriminator 1
 8647 6b76 C785BCF2 		movl	$1, -3396(%rbp)
 8647      FFFF0100 
 8647      0000
 8648 6b80 E9930900 		jmp	.L230
 8648      00
 8649              	.L426:
1972:main_final_with_sync.c **** 					printf("%s\n", "Written successfully encrypted ack2, the written data is --");
 8650              		.loc 1 1972 0 is_stmt 1
 8651 6b85 BF000000 		movl	$.LC235, %edi
 8651      00
 8652 6b8a E8000000 		call	puts
 8652      00
 8653              	.LBB97:
1973:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 8654              		.loc 1 1973 0
 8655 6b8f C78584F3 		movl	$0, -3196(%rbp)
 8655      FFFF0000 
 8655      0000
 8656 6b99 EB28     		jmp	.L427
 8657              	.L428:
1974:main_final_with_sync.c **** 					{
1975:main_final_with_sync.c **** 						printf("%d ", encrypted_ack2_again_uint8[i]);
 8658              		.loc 1 1975 0 discriminator 3
 8659 6b9b 8B8584F3 		movl	-3196(%rbp), %eax
 8659      FFFF
 8660 6ba1 4898     		cltq
 8661 6ba3 0FB64405 		movzbl	-64(%rbp,%rax), %eax
 8661      C0
 8662 6ba8 0FB6C0   		movzbl	%al, %eax
 8663 6bab 89C6     		movl	%eax, %esi
 8664 6bad BF000000 		movl	$.LC10, %edi
 8664      00
 8665 6bb2 B8000000 		movl	$0, %eax
 8665      00
 8666 6bb7 E8000000 		call	printf
 8666      00
1973:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 8667              		.loc 1 1973 0 discriminator 3
 8668 6bbc 838584F3 		addl	$1, -3196(%rbp)
 8668      FFFF01
 8669              	.L427:
1973:main_final_with_sync.c **** 					for (int i = 0; i < 4; ++i)
 8670              		.loc 1 1973 0 is_stmt 0 discriminator 1
 8671 6bc3 83BD84F3 		cmpl	$3, -3196(%rbp)
 8671      FFFF03
 8672 6bca 7ECF     		jle	.L428
 8673              	.LBE97:
1976:main_final_with_sync.c **** 					}
1977:main_final_with_sync.c **** 
1978:main_final_with_sync.c **** 		 			//////////////////////////////////////////////////////////////////////////////
1979:main_final_with_sync.c **** 					printf("\n");
 8674              		.loc 1 1979 0 is_stmt 1
 8675 6bcc BF0A0000 		movl	$10, %edi
 8675      00
 8676 6bd1 E8000000 		call	putchar
 8676      00
1980:main_final_with_sync.c **** 					printf("%s\n", "Receiving data to update CSV file");
 8677              		.loc 1 1980 0
 8678 6bd6 BF000000 		movl	$.LC236, %edi
 8678      00
 8679 6bdb E8000000 		call	puts
 8679      00
1981:main_final_with_sync.c **** 
1982:main_final_with_sync.c **** 					int X[8] = {0,1,1,1,1,1,1,1};
 8680              		.loc 1 1982 0
 8681 6be0 C78530F5 		movl	$0, -2768(%rbp)
 8681      FFFF0000 
 8681      0000
 8682 6bea C78534F5 		movl	$1, -2764(%rbp)
 8682      FFFF0100 
 8682      0000
 8683 6bf4 C78538F5 		movl	$1, -2760(%rbp)
 8683      FFFF0100 
 8683      0000
 8684 6bfe C7853CF5 		movl	$1, -2756(%rbp)
 8684      FFFF0100 
 8684      0000
 8685 6c08 C78540F5 		movl	$1, -2752(%rbp)
 8685      FFFF0100 
 8685      0000
 8686 6c12 C78544F5 		movl	$1, -2748(%rbp)
 8686      FFFF0100 
 8686      0000
 8687 6c1c C78548F5 		movl	$1, -2744(%rbp)
 8687      FFFF0100 
 8687      0000
 8688 6c26 C7854CF5 		movl	$1, -2740(%rbp)
 8688      FFFF0100 
 8688      0000
1983:main_final_with_sync.c **** 					int decX = bitArrayToInt(X, 8);
 8689              		.loc 1 1983 0
 8690 6c30 488D8530 		leaq	-2768(%rbp), %rax
 8690      F5FFFF
 8691 6c37 BE080000 		movl	$8, %esi
 8691      00
 8692 6c3c 4889C7   		movq	%rax, %rdi
 8693 6c3f E8000000 		call	bitArrayToInt
 8693      00
 8694 6c44 8985C4F3 		movl	%eax, -3132(%rbp)
 8694      FFFF
1984:main_final_with_sync.c **** 					int Y[8] = {1,1,1,1,1,1,1,1};
 8695              		.loc 1 1984 0
 8696 6c4a C78550F5 		movl	$1, -2736(%rbp)
 8696      FFFF0100 
 8696      0000
 8697 6c54 C78554F5 		movl	$1, -2732(%rbp)
 8697      FFFF0100 
 8697      0000
 8698 6c5e C78558F5 		movl	$1, -2728(%rbp)
 8698      FFFF0100 
 8698      0000
 8699 6c68 C7855CF5 		movl	$1, -2724(%rbp)
 8699      FFFF0100 
 8699      0000
 8700 6c72 C78560F5 		movl	$1, -2720(%rbp)
 8700      FFFF0100 
 8700      0000
 8701 6c7c C78564F5 		movl	$1, -2716(%rbp)
 8701      FFFF0100 
 8701      0000
 8702 6c86 C78568F5 		movl	$1, -2712(%rbp)
 8702      FFFF0100 
 8702      0000
 8703 6c90 C7856CF5 		movl	$1, -2708(%rbp)
 8703      FFFF0100 
 8703      0000
1985:main_final_with_sync.c **** 					int decY = bitArrayToInt(Y, 8);
 8704              		.loc 1 1985 0
 8705 6c9a 488D8550 		leaq	-2736(%rbp), %rax
 8705      F5FFFF
 8706 6ca1 BE080000 		movl	$8, %esi
 8706      00
 8707 6ca6 4889C7   		movq	%rax, %rdi
 8708 6ca9 E8000000 		call	bitArrayToInt
 8708      00
 8709 6cae 8985C8F3 		movl	%eax, -3128(%rbp)
 8709      FFFF
1986:main_final_with_sync.c **** 
1987:main_final_with_sync.c **** 					uint8 direct;
1988:main_final_with_sync.c **** 					uint8 updaterFPGA[4];
1989:main_final_with_sync.c **** 					int updatesFromFPGA[32];
1990:main_final_with_sync.c **** 					int updatesForCSV[8];
1991:main_final_with_sync.c **** 					int exists, ok, dir, nxt;
1992:main_final_with_sync.c **** 					bool updateCSV=false;
 8710              		.loc 1 1992 0
 8711 6cb4 C685B4F2 		movb	$0, -3404(%rbp)
 8711      FFFF00
1993:main_final_with_sync.c **** 
1994:main_final_with_sync.c **** 					int cnt1 = 0;
 8712              		.loc 1 1994 0
 8713 6cbb C78588F3 		movl	$0, -3192(%rbp)
 8713      FFFF0000 
 8713      0000
1995:main_final_with_sync.c **** 					int cnt2 = 0;
 8714              		.loc 1 1995 0
 8715 6cc5 C7858CF3 		movl	$0, -3188(%rbp)
 8715      FFFF0000 
 8715      0000
1996:main_final_with_sync.c **** 
1997:main_final_with_sync.c **** 					int breaker3 = 0;
 8716              		.loc 1 1997 0
 8717 6ccf C78590F3 		movl	$0, -3184(%rbp)
 8717      FFFF0000 
 8717      0000
 8718              	.L446:
 8719              	.LBB98:
1998:main_final_with_sync.c **** 					while(1)
1999:main_final_with_sync.c **** 					{	
2000:main_final_with_sync.c **** 						printf("%s", "FPGA Count " );
 8720              		.loc 1 2000 0
 8721 6cd9 BE000000 		movl	$.LC237, %esi
 8721      00
 8722 6cde BF000000 		movl	$.LC153, %edi
 8722      00
 8723 6ce3 B8000000 		movl	$0, %eax
 8723      00
 8724 6ce8 E8000000 		call	printf
 8724      00
2001:main_final_with_sync.c **** 						cnt1++;
 8725              		.loc 1 2001 0
 8726 6ced 838588F3 		addl	$1, -3192(%rbp)
 8726      FFFF01
2002:main_final_with_sync.c **** 						printf("%d\n", cnt1);
 8727              		.loc 1 2002 0
 8728 6cf4 8B8588F3 		movl	-3192(%rbp), %eax
 8728      FFFF
 8729 6cfa 89C6     		movl	%eax, %esi
 8730 6cfc BF000000 		movl	$.LC154, %edi
 8730      00
 8731 6d01 B8000000 		movl	$0, %eax
 8731      00
 8732 6d06 E8000000 		call	printf
 8732      00
2003:main_final_with_sync.c **** 						printf("%s\n", "Receiving Controlling signal form FPGA ");
 8733              		.loc 1 2003 0
 8734 6d0b BF000000 		movl	$.LC238, %edi
 8734      00
 8735 6d10 E8000000 		call	puts
 8735      00
2004:main_final_with_sync.c **** 						delay(del);
 8736              		.loc 1 2004 0
 8737 6d15 8B85B8F3 		movl	-3144(%rbp), %eax
 8737      FFFF
 8738 6d1b 89C7     		movl	%eax, %edi
 8739 6d1d E8000000 		call	delay
 8739      00
2005:main_final_with_sync.c **** 						fStatus = flReadChannel(handle, 2*k, 1, &direct, &error);
 8740              		.loc 1 2005 0
 8741 6d22 8B85D0F2 		movl	-3376(%rbp), %eax
 8741      FFFF
 8742 6d28 01C0     		addl	%eax, %eax
 8743 6d2a 0FB6F0   		movzbl	%al, %esi
 8744 6d2d 488B85E8 		movq	-3096(%rbp), %rax
 8744      F3FFFF
 8745 6d34 488D8DF0 		leaq	-3088(%rbp), %rcx
 8745      F3FFFF
 8746 6d3b 488D95B1 		leaq	-3407(%rbp), %rdx
 8746      F2FFFF
 8747 6d42 4989C8   		movq	%rcx, %r8
 8748 6d45 4889D1   		movq	%rdx, %rcx
 8749 6d48 BA010000 		movl	$1, %edx
 8749      00
 8750 6d4d 4889C7   		movq	%rax, %rdi
 8751 6d50 E8000000 		call	flReadChannel
 8751      00
 8752 6d55 8985C0F2 		movl	%eax, -3392(%rbp)
 8752      FFFF
2006:main_final_with_sync.c **** 						int director = (int)direct;
 8753              		.loc 1 2006 0
 8754 6d5b 0FB685B1 		movzbl	-3407(%rbp), %eax
 8754      F2FFFF
 8755 6d62 0FB6C0   		movzbl	%al, %eax
 8756 6d65 8985CCF3 		movl	%eax, -3124(%rbp)
 8756      FFFF
2007:main_final_with_sync.c **** 						if(director == reset) 
 8757              		.loc 1 2007 0
 8758 6d6b 0FB685B7 		movzbl	-3401(%rbp), %eax
 8758      F2FFFF
 8759 6d72 3B85CCF3 		cmpl	-3124(%rbp), %eax
 8759      FFFF
 8760 6d78 751D     		jne	.L429
2008:main_final_with_sync.c **** 							{
2009:main_final_with_sync.c **** 								k--; 
 8761              		.loc 1 2009 0
 8762 6d7a 83ADD0F2 		subl	$1, -3376(%rbp)
 8762      FFFF01
2010:main_final_with_sync.c **** 								breaker3++; 
 8763              		.loc 1 2010 0
 8764 6d81 838590F3 		addl	$1, -3184(%rbp)
 8764      FFFF01
2011:main_final_with_sync.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 8765              		.loc 1 2011 0
 8766 6d88 BF000000 		movl	$.LC157, %edi
 8766      00
 8767 6d8d E8000000 		call	puts
 8767      00
2012:main_final_with_sync.c **** 								break;
 8768              		.loc 1 2012 0
 8769 6d92 E9BC0300 		jmp	.L430
 8769      00
 8770              	.L429:
2013:main_final_with_sync.c **** 							}
2014:main_final_with_sync.c **** 						printf("%s\n", "Controlling signal received from FPGA, it is-----");
 8771              		.loc 1 2014 0
 8772 6d97 BF000000 		movl	$.LC239, %edi
 8772      00
 8773 6d9c E8000000 		call	puts
 8773      00
2015:main_final_with_sync.c **** 						printf("%d\n", direct);
 8774              		.loc 1 2015 0
 8775 6da1 0FB685B1 		movzbl	-3407(%rbp), %eax
 8775      F2FFFF
 8776 6da8 0FB6C0   		movzbl	%al, %eax
 8777 6dab 89C6     		movl	%eax, %esi
 8778 6dad BF000000 		movl	$.LC154, %edi
 8778      00
 8779 6db2 B8000000 		movl	$0, %eax
 8779      00
 8780 6db7 E8000000 		call	printf
 8780      00
2016:main_final_with_sync.c **** 						printf("%s\n", "Checking the controlling singal, whether it is to update CSV data or not");
 8781              		.loc 1 2016 0
 8782 6dbc BF000000 		movl	$.LC240, %edi
 8782      00
 8783 6dc1 E8000000 		call	puts
 8783      00
2017:main_final_with_sync.c **** 						if(director==decX) break;
 8784              		.loc 1 2017 0
 8785 6dc6 8B85CCF3 		movl	-3124(%rbp), %eax
 8785      FFFF
 8786 6dcc 3B85C4F3 		cmpl	-3132(%rbp), %eax
 8786      FFFF
 8787 6dd2 0F847A03 		je	.L468
 8787      0000
2018:main_final_with_sync.c **** 						if(director==decY)
 8788              		.loc 1 2018 0
 8789 6dd8 8B85CCF3 		movl	-3124(%rbp), %eax
 8789      FFFF
 8790 6dde 3B85C8F3 		cmpl	-3128(%rbp), %eax
 8790      FFFF
 8791 6de4 0F85EFFE 		jne	.L446
 8791      FFFF
 8792              	.LBB99:
2019:main_final_with_sync.c **** 						{	
2020:main_final_with_sync.c **** 							updateCSV = true;
 8793              		.loc 1 2020 0
 8794 6dea C685B4F2 		movb	$1, -3404(%rbp)
 8794      FFFF01
2021:main_final_with_sync.c **** 							printf("%s\n", "Controlling signal is to update the CSV data");
 8795              		.loc 1 2021 0
 8796 6df1 BF000000 		movl	$.LC241, %edi
 8796      00
 8797 6df6 E8000000 		call	puts
 8797      00
2022:main_final_with_sync.c **** 							printf("%s\n", "Receiving encrypted data from the FPGA to update CSV");
 8798              		.loc 1 2022 0
 8799 6dfb BF000000 		movl	$.LC242, %edi
 8799      00
 8800 6e00 E8000000 		call	puts
 8800      00
2023:main_final_with_sync.c **** 							delay(del);
 8801              		.loc 1 2023 0
 8802 6e05 8B85B8F3 		movl	-3144(%rbp), %eax
 8802      FFFF
 8803 6e0b 89C7     		movl	%eax, %edi
 8804 6e0d E8000000 		call	delay
 8804      00
2024:main_final_with_sync.c **** 							fStatus = flReadChannel(handle, 2*k, 1, &updaterFPGA[0], &error);
 8805              		.loc 1 2024 0
 8806 6e12 8B85D0F2 		movl	-3376(%rbp), %eax
 8806      FFFF
 8807 6e18 01C0     		addl	%eax, %eax
 8808 6e1a 0FB6F0   		movzbl	%al, %esi
 8809 6e1d 488B85E8 		movq	-3096(%rbp), %rax
 8809      F3FFFF
 8810 6e24 488D8DF0 		leaq	-3088(%rbp), %rcx
 8810      F3FFFF
 8811 6e2b 488D55D0 		leaq	-48(%rbp), %rdx
 8812 6e2f 4989C8   		movq	%rcx, %r8
 8813 6e32 4889D1   		movq	%rdx, %rcx
 8814 6e35 BA010000 		movl	$1, %edx
 8814      00
 8815 6e3a 4889C7   		movq	%rax, %rdi
 8816 6e3d E8000000 		call	flReadChannel
 8816      00
 8817 6e42 8985C0F2 		movl	%eax, -3392(%rbp)
 8817      FFFF
2025:main_final_with_sync.c **** 							if(updaterFPGA[0] == reset) 
 8818              		.loc 1 2025 0
 8819 6e48 0FB645D0 		movzbl	-48(%rbp), %eax
 8820 6e4c 3A85B7F2 		cmpb	-3401(%rbp), %al
 8820      FFFF
 8821 6e52 751D     		jne	.L433
2026:main_final_with_sync.c **** 							{
2027:main_final_with_sync.c **** 								k--; 
 8822              		.loc 1 2027 0
 8823 6e54 83ADD0F2 		subl	$1, -3376(%rbp)
 8823      FFFF01
2028:main_final_with_sync.c **** 								breaker3++; 
 8824              		.loc 1 2028 0
 8825 6e5b 838590F3 		addl	$1, -3184(%rbp)
 8825      FFFF01
2029:main_final_with_sync.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 8826              		.loc 1 2029 0
 8827 6e62 BF000000 		movl	$.LC157, %edi
 8827      00
 8828 6e67 E8000000 		call	puts
 8828      00
2030:main_final_with_sync.c **** 								break;
 8829              		.loc 1 2030 0
 8830 6e6c E9E20200 		jmp	.L430
 8830      00
 8831              	.L433:
2031:main_final_with_sync.c **** 							}
2032:main_final_with_sync.c **** 							delay(del);
 8832              		.loc 1 2032 0
 8833 6e71 8B85B8F3 		movl	-3144(%rbp), %eax
 8833      FFFF
 8834 6e77 89C7     		movl	%eax, %edi
 8835 6e79 E8000000 		call	delay
 8835      00
2033:main_final_with_sync.c **** 							fStatus = flReadChannel(handle, 2*k, 1, &updaterFPGA[1], &error);
 8836              		.loc 1 2033 0
 8837 6e7e 8B85D0F2 		movl	-3376(%rbp), %eax
 8837      FFFF
 8838 6e84 01C0     		addl	%eax, %eax
 8839 6e86 0FB6F0   		movzbl	%al, %esi
 8840 6e89 488B85E8 		movq	-3096(%rbp), %rax
 8840      F3FFFF
 8841 6e90 488D8DF0 		leaq	-3088(%rbp), %rcx
 8841      F3FFFF
 8842 6e97 488D55D0 		leaq	-48(%rbp), %rdx
 8843 6e9b 4883C201 		addq	$1, %rdx
 8844 6e9f 4989C8   		movq	%rcx, %r8
 8845 6ea2 4889D1   		movq	%rdx, %rcx
 8846 6ea5 BA010000 		movl	$1, %edx
 8846      00
 8847 6eaa 4889C7   		movq	%rax, %rdi
 8848 6ead E8000000 		call	flReadChannel
 8848      00
 8849 6eb2 8985C0F2 		movl	%eax, -3392(%rbp)
 8849      FFFF
2034:main_final_with_sync.c **** 							if(updaterFPGA[1] == reset) 
 8850              		.loc 1 2034 0
 8851 6eb8 0FB645D1 		movzbl	-47(%rbp), %eax
 8852 6ebc 3A85B7F2 		cmpb	-3401(%rbp), %al
 8852      FFFF
 8853 6ec2 751D     		jne	.L435
2035:main_final_with_sync.c **** 							{
2036:main_final_with_sync.c **** 								k--; 
 8854              		.loc 1 2036 0
 8855 6ec4 83ADD0F2 		subl	$1, -3376(%rbp)
 8855      FFFF01
2037:main_final_with_sync.c **** 								breaker3++; 
 8856              		.loc 1 2037 0
 8857 6ecb 838590F3 		addl	$1, -3184(%rbp)
 8857      FFFF01
2038:main_final_with_sync.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 8858              		.loc 1 2038 0
 8859 6ed2 BF000000 		movl	$.LC157, %edi
 8859      00
 8860 6ed7 E8000000 		call	puts
 8860      00
2039:main_final_with_sync.c **** 								break;
 8861              		.loc 1 2039 0
 8862 6edc E9720200 		jmp	.L430
 8862      00
 8863              	.L435:
2040:main_final_with_sync.c **** 							}
2041:main_final_with_sync.c **** 							delay(del);
 8864              		.loc 1 2041 0
 8865 6ee1 8B85B8F3 		movl	-3144(%rbp), %eax
 8865      FFFF
 8866 6ee7 89C7     		movl	%eax, %edi
 8867 6ee9 E8000000 		call	delay
 8867      00
2042:main_final_with_sync.c **** 							fStatus = flReadChannel(handle, 2*k, 1, &updaterFPGA[2], &error);
 8868              		.loc 1 2042 0
 8869 6eee 8B85D0F2 		movl	-3376(%rbp), %eax
 8869      FFFF
 8870 6ef4 01C0     		addl	%eax, %eax
 8871 6ef6 0FB6F0   		movzbl	%al, %esi
 8872 6ef9 488B85E8 		movq	-3096(%rbp), %rax
 8872      F3FFFF
 8873 6f00 488D8DF0 		leaq	-3088(%rbp), %rcx
 8873      F3FFFF
 8874 6f07 488D55D0 		leaq	-48(%rbp), %rdx
 8875 6f0b 4883C202 		addq	$2, %rdx
 8876 6f0f 4989C8   		movq	%rcx, %r8
 8877 6f12 4889D1   		movq	%rdx, %rcx
 8878 6f15 BA010000 		movl	$1, %edx
 8878      00
 8879 6f1a 4889C7   		movq	%rax, %rdi
 8880 6f1d E8000000 		call	flReadChannel
 8880      00
 8881 6f22 8985C0F2 		movl	%eax, -3392(%rbp)
 8881      FFFF
2043:main_final_with_sync.c **** 							if(updaterFPGA[2] == reset) 
 8882              		.loc 1 2043 0
 8883 6f28 0FB645D2 		movzbl	-46(%rbp), %eax
 8884 6f2c 3A85B7F2 		cmpb	-3401(%rbp), %al
 8884      FFFF
 8885 6f32 751D     		jne	.L436
2044:main_final_with_sync.c **** 							{
2045:main_final_with_sync.c **** 								k--; 
 8886              		.loc 1 2045 0
 8887 6f34 83ADD0F2 		subl	$1, -3376(%rbp)
 8887      FFFF01
2046:main_final_with_sync.c **** 								breaker3++; 
 8888              		.loc 1 2046 0
 8889 6f3b 838590F3 		addl	$1, -3184(%rbp)
 8889      FFFF01
2047:main_final_with_sync.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 8890              		.loc 1 2047 0
 8891 6f42 BF000000 		movl	$.LC157, %edi
 8891      00
 8892 6f47 E8000000 		call	puts
 8892      00
2048:main_final_with_sync.c **** 								break;
 8893              		.loc 1 2048 0
 8894 6f4c E9020200 		jmp	.L430
 8894      00
 8895              	.L436:
2049:main_final_with_sync.c **** 							}
2050:main_final_with_sync.c **** 							delay(del);
 8896              		.loc 1 2050 0
 8897 6f51 8B85B8F3 		movl	-3144(%rbp), %eax
 8897      FFFF
 8898 6f57 89C7     		movl	%eax, %edi
 8899 6f59 E8000000 		call	delay
 8899      00
2051:main_final_with_sync.c **** 							fStatus = flReadChannel(handle, 2*k, 1, &updaterFPGA[3], &error);
 8900              		.loc 1 2051 0
 8901 6f5e 8B85D0F2 		movl	-3376(%rbp), %eax
 8901      FFFF
 8902 6f64 01C0     		addl	%eax, %eax
 8903 6f66 0FB6F0   		movzbl	%al, %esi
 8904 6f69 488B85E8 		movq	-3096(%rbp), %rax
 8904      F3FFFF
 8905 6f70 488D8DF0 		leaq	-3088(%rbp), %rcx
 8905      F3FFFF
 8906 6f77 488D55D0 		leaq	-48(%rbp), %rdx
 8907 6f7b 4883C203 		addq	$3, %rdx
 8908 6f7f 4989C8   		movq	%rcx, %r8
 8909 6f82 4889D1   		movq	%rdx, %rcx
 8910 6f85 BA010000 		movl	$1, %edx
 8910      00
 8911 6f8a 4889C7   		movq	%rax, %rdi
 8912 6f8d E8000000 		call	flReadChannel
 8912      00
 8913 6f92 8985C0F2 		movl	%eax, -3392(%rbp)
 8913      FFFF
2052:main_final_with_sync.c **** 							if(updaterFPGA[3] == reset) 
 8914              		.loc 1 2052 0
 8915 6f98 0FB645D3 		movzbl	-45(%rbp), %eax
 8916 6f9c 3A85B7F2 		cmpb	-3401(%rbp), %al
 8916      FFFF
 8917 6fa2 751D     		jne	.L437
2053:main_final_with_sync.c **** 							{
2054:main_final_with_sync.c **** 								k--; 
 8918              		.loc 1 2054 0
 8919 6fa4 83ADD0F2 		subl	$1, -3376(%rbp)
 8919      FFFF01
2055:main_final_with_sync.c **** 								breaker3++;
 8920              		.loc 1 2055 0
 8921 6fab 838590F3 		addl	$1, -3184(%rbp)
 8921      FFFF01
2056:main_final_with_sync.c **** 								printf("%s\n", "-------------------------RESET------------------------"); 
 8922              		.loc 1 2056 0
 8923 6fb2 BF000000 		movl	$.LC157, %edi
 8923      00
 8924 6fb7 E8000000 		call	puts
 8924      00
2057:main_final_with_sync.c **** 								break;
 8925              		.loc 1 2057 0
 8926 6fbc E9920100 		jmp	.L430
 8926      00
 8927              	.L437:
2058:main_final_with_sync.c **** 							}
2059:main_final_with_sync.c **** 
2060:main_final_with_sync.c **** 							printf("%s\n", "Encrypted Data received successfully from the FPGA, it is as in uint8 format
 8928              		.loc 1 2060 0
 8929 6fc1 BF000000 		movl	$.LC243, %edi
 8929      00
 8930 6fc6 E8000000 		call	puts
 8930      00
 8931              	.LBB100:
2061:main_final_with_sync.c **** 							for (int i = 0; i < 4; ++i)
 8932              		.loc 1 2061 0
 8933 6fcb C78594F3 		movl	$0, -3180(%rbp)
 8933      FFFF0000 
 8933      0000
 8934 6fd5 EB2D     		jmp	.L438
 8935              	.L439:
2062:main_final_with_sync.c **** 							{
2063:main_final_with_sync.c **** 								printf("%d ", updaterFPGA[3-i]);
 8936              		.loc 1 2063 0 discriminator 3
 8937 6fd7 B8030000 		movl	$3, %eax
 8937      00
 8938 6fdc 2B8594F3 		subl	-3180(%rbp), %eax
 8938      FFFF
 8939 6fe2 4898     		cltq
 8940 6fe4 0FB64405 		movzbl	-48(%rbp,%rax), %eax
 8940      D0
 8941 6fe9 0FB6C0   		movzbl	%al, %eax
 8942 6fec 89C6     		movl	%eax, %esi
 8943 6fee BF000000 		movl	$.LC10, %edi
 8943      00
 8944 6ff3 B8000000 		movl	$0, %eax
 8944      00
 8945 6ff8 E8000000 		call	printf
 8945      00
2061:main_final_with_sync.c **** 							for (int i = 0; i < 4; ++i)
 8946              		.loc 1 2061 0 discriminator 3
 8947 6ffd 838594F3 		addl	$1, -3180(%rbp)
 8947      FFFF01
 8948              	.L438:
2061:main_final_with_sync.c **** 							for (int i = 0; i < 4; ++i)
 8949              		.loc 1 2061 0 is_stmt 0 discriminator 1
 8950 7004 83BD94F3 		cmpl	$3, -3180(%rbp)
 8950      FFFF03
 8951 700b 7ECA     		jle	.L439
 8952              	.LBE100:
2064:main_final_with_sync.c **** 							}
2065:main_final_with_sync.c **** 							printf("\n");
 8953              		.loc 1 2065 0 is_stmt 1
 8954 700d BF0A0000 		movl	$10, %edi
 8954      00
 8955 7012 E8000000 		call	putchar
 8955      00
2066:main_final_with_sync.c **** 
2067:main_final_with_sync.c **** 							
2068:main_final_with_sync.c **** 							printf("%s\n", "Converting uint8 data to binary");
 8956              		.loc 1 2068 0
 8957 7017 BF000000 		movl	$.LC244, %edi
 8957      00
 8958 701c E8000000 		call	puts
 8958      00
2069:main_final_with_sync.c **** 							uint8ToBin(updaterFPGA, updatesFromFPGA);
 8959              		.loc 1 2069 0
 8960 7021 488D95D0 		leaq	-816(%rbp), %rdx
 8960      FCFFFF
 8961 7028 488D45D0 		leaq	-48(%rbp), %rax
 8962 702c 4889D6   		movq	%rdx, %rsi
 8963 702f 4889C7   		movq	%rax, %rdi
 8964 7032 E8000000 		call	uint8ToBin
 8964      00
2070:main_final_with_sync.c **** 							printf("%s\n", "Converted uint8 data to binary, it is as-----");
 8965              		.loc 1 2070 0
 8966 7037 BF000000 		movl	$.LC245, %edi
 8966      00
 8967 703c E8000000 		call	puts
 8967      00
 8968              	.LBB101:
2071:main_final_with_sync.c **** 
2072:main_final_with_sync.c **** 							for (int i = 0; i < 32; ++i)
 8969              		.loc 1 2072 0
 8970 7041 C78598F3 		movl	$0, -3176(%rbp)
 8970      FFFF0000 
 8970      0000
 8971 704b EB2C     		jmp	.L440
 8972              	.L441:
2073:main_final_with_sync.c **** 							{
2074:main_final_with_sync.c **** 								printf("%d ", updatesFromFPGA[31-i]);
 8973              		.loc 1 2074 0 discriminator 3
 8974 704d B81F0000 		movl	$31, %eax
 8974      00
 8975 7052 2B8598F3 		subl	-3176(%rbp), %eax
 8975      FFFF
 8976 7058 4898     		cltq
 8977 705a 8B8485D0 		movl	-816(%rbp,%rax,4), %eax
 8977      FCFFFF
 8978 7061 89C6     		movl	%eax, %esi
 8979 7063 BF000000 		movl	$.LC10, %edi
 8979      00
 8980 7068 B8000000 		movl	$0, %eax
 8980      00
 8981 706d E8000000 		call	printf
 8981      00
2072:main_final_with_sync.c **** 							{
 8982              		.loc 1 2072 0 discriminator 3
 8983 7072 838598F3 		addl	$1, -3176(%rbp)
 8983      FFFF01
 8984              	.L440:
2072:main_final_with_sync.c **** 							{
 8985              		.loc 1 2072 0 is_stmt 0 discriminator 1
 8986 7079 83BD98F3 		cmpl	$31, -3176(%rbp)
 8986      FFFF1F
 8987 7080 7ECB     		jle	.L441
 8988              	.LBE101:
2075:main_final_with_sync.c **** 							}
2076:main_final_with_sync.c **** 							printf("\n");
 8989              		.loc 1 2076 0 is_stmt 1
 8990 7082 BF0A0000 		movl	$10, %edi
 8990      00
 8991 7087 E8000000 		call	putchar
 8991      00
2077:main_final_with_sync.c **** 							printf("%s\n", "Decrypting the data");
 8992              		.loc 1 2077 0
 8993 708c BF000000 		movl	$.LC246, %edi
 8993      00
 8994 7091 E8000000 		call	puts
 8994      00
2078:main_final_with_sync.c **** 							int decryptedUpdates[32];
2079:main_final_with_sync.c **** 							decrypter(updatesFromFPGA, K, decryptedUpdates);
 8995              		.loc 1 2079 0
 8996 7096 488D9550 		leaq	-688(%rbp), %rdx
 8996      FDFFFF
 8997 709d 488D8DD0 		leaq	-2608(%rbp), %rcx
 8997      F5FFFF
 8998 70a4 488D85D0 		leaq	-816(%rbp), %rax
 8998      FCFFFF
 8999 70ab 4889CE   		movq	%rcx, %rsi
 9000 70ae 4889C7   		movq	%rax, %rdi
 9001 70b1 E8000000 		call	decrypter
 9001      00
2080:main_final_with_sync.c **** 							printf("%s\n", "Data decrypted successfully, it is as----");
 9002              		.loc 1 2080 0
 9003 70b6 BF000000 		movl	$.LC247, %edi
 9003      00
 9004 70bb E8000000 		call	puts
 9004      00
 9005              	.LBB102:
2081:main_final_with_sync.c **** 							for (int i = 0; i < 32; ++i)
 9006              		.loc 1 2081 0
 9007 70c0 C7859CF3 		movl	$0, -3172(%rbp)
 9007      FFFF0000 
 9007      0000
 9008 70ca EB2C     		jmp	.L442
 9009              	.L443:
2082:main_final_with_sync.c **** 							{
2083:main_final_with_sync.c **** 								printf("%d ", decryptedUpdates[31-i]);
 9010              		.loc 1 2083 0 discriminator 3
 9011 70cc B81F0000 		movl	$31, %eax
 9011      00
 9012 70d1 2B859CF3 		subl	-3172(%rbp), %eax
 9012      FFFF
 9013 70d7 4898     		cltq
 9014 70d9 8B848550 		movl	-688(%rbp,%rax,4), %eax
 9014      FDFFFF
 9015 70e0 89C6     		movl	%eax, %esi
 9016 70e2 BF000000 		movl	$.LC10, %edi
 9016      00
 9017 70e7 B8000000 		movl	$0, %eax
 9017      00
 9018 70ec E8000000 		call	printf
 9018      00
2081:main_final_with_sync.c **** 							for (int i = 0; i < 32; ++i)
 9019              		.loc 1 2081 0 discriminator 3
 9020 70f1 83859CF3 		addl	$1, -3172(%rbp)
 9020      FFFF01
 9021              	.L442:
2081:main_final_with_sync.c **** 							for (int i = 0; i < 32; ++i)
 9022              		.loc 1 2081 0 is_stmt 0 discriminator 1
 9023 70f8 83BD9CF3 		cmpl	$31, -3172(%rbp)
 9023      FFFF1F
 9024 70ff 7ECB     		jle	.L443
 9025              	.LBE102:
2084:main_final_with_sync.c **** 							}
2085:main_final_with_sync.c **** 							printf("\n");
 9026              		.loc 1 2085 0 is_stmt 1
 9027 7101 BF0A0000 		movl	$10, %edi
 9027      00
 9028 7106 E8000000 		call	putchar
 9028      00
2086:main_final_with_sync.c **** 							printf("%s\n", "Getting ready to update CSV");
 9029              		.loc 1 2086 0
 9030 710b BF000000 		movl	$.LC248, %edi
 9030      00
 9031 7110 E8000000 		call	puts
 9031      00
 9032              	.LBB103:
2087:main_final_with_sync.c **** 							
2088:main_final_with_sync.c **** 							
2089:main_final_with_sync.c **** 							for (int i = 0; i < 8; ++i)
 9033              		.loc 1 2089 0
 9034 7115 C785A0F3 		movl	$0, -3168(%rbp)
 9034      FFFF0000 
 9034      0000
 9035 711f EB25     		jmp	.L444
 9036              	.L445:
2090:main_final_with_sync.c **** 								updatesForCSV[i] = decryptedUpdates[i];
 9037              		.loc 1 2090 0 discriminator 3
 9038 7121 8B85A0F3 		movl	-3168(%rbp), %eax
 9038      FFFF
 9039 7127 4898     		cltq
 9040 7129 8B948550 		movl	-688(%rbp,%rax,4), %edx
 9040      FDFFFF
 9041 7130 8B85A0F3 		movl	-3168(%rbp), %eax
 9041      FFFF
 9042 7136 4898     		cltq
 9043 7138 89948570 		movl	%edx, -2704(%rbp,%rax,4)
 9043      F5FFFF
2089:main_final_with_sync.c **** 								updatesForCSV[i] = decryptedUpdates[i];
 9044              		.loc 1 2089 0 discriminator 3
 9045 713f 8385A0F3 		addl	$1, -3168(%rbp)
 9045      FFFF01
 9046              	.L444:
2089:main_final_with_sync.c **** 								updatesForCSV[i] = decryptedUpdates[i];
 9047              		.loc 1 2089 0 is_stmt 0 discriminator 1
 9048 7146 83BDA0F3 		cmpl	$7, -3168(%rbp)
 9048      FFFF07
 9049 714d 7ED2     		jle	.L445
 9050              	.LBE103:
2091:main_final_with_sync.c **** 
2092:main_final_with_sync.c **** 							// exists = updatesForCSV[7];
2093:main_final_with_sync.c **** 							// ok = updatesForCSV[6];
2094:main_final_with_sync.c **** 							// dir = 4*updatesForCSV[5] + 2*updatesForCSV[4] + updatesForCSV[3];
2095:main_final_with_sync.c **** 							// nxt = 4*updatesForCSV[2] + 2*updatesForCSV[1] + updatesForCSV[0];
2096:main_final_with_sync.c **** 
2097:main_final_with_sync.c **** 							// printf("%s\n", "The information received from FPGA");
2098:main_final_with_sync.c **** 							// printf("%s ", "Track exists   ---->   ");
2099:main_final_with_sync.c **** 							// printf("%d\n", exists);
2100:main_final_with_sync.c **** 							// printf("%s ", "Track ok   ----->   ");
2101:main_final_with_sync.c **** 							// printf("%d\n", ok);
2102:main_final_with_sync.c **** 							// printf("%s ", "Direction   ----->   ");
2103:main_final_with_sync.c **** 							// printf("%d\n", dir);
2104:main_final_with_sync.c **** 							// printf("%s ", "Next signal   ------>    ");
2105:main_final_with_sync.c **** 							// printf("%d\n", nxt);
2106:main_final_with_sync.c **** 
2107:main_final_with_sync.c **** 							// printf("%s\n", "Overwriting the CSV file with the updated information");
2108:main_final_with_sync.c **** 							// writecsv(x_cord, y_cord, ok, dir, nxt);
2109:main_final_with_sync.c **** 							// printf("%s\n", "CSV file overwritten successfully");
2110:main_final_with_sync.c **** 							 break;
 9051              		.loc 1 2110 0 is_stmt 1
 9052 714f 90       		nop
 9053 7150 EB01     		jmp	.L430
 9054              	.L468:
 9055              	.LBE99:
2017:main_final_with_sync.c **** 						if(director==decY)
 9056              		.loc 1 2017 0
 9057 7152 90       		nop
 9058              	.L430:
 9059              	.LBE98:
2111:main_final_with_sync.c **** 						}
2112:main_final_with_sync.c **** 					}
2113:main_final_with_sync.c **** 
2114:main_final_with_sync.c **** 					if(breaker3 >= 1) continue;
 9060              		.loc 1 2114 0
 9061 7153 83BD90F3 		cmpl	$0, -3184(%rbp)
 9061      FFFF00
 9062 715a 0F8F4603 		jg	.L469
 9062      0000
2115:main_final_with_sync.c **** 
2116:main_final_with_sync.c **** 					printf("%s\n", "-------------------------UART PART----------------------------");
 9063              		.loc 1 2116 0
 9064 7160 BF000000 		movl	$.LC249, %edi
 9064      00
 9065 7165 E8000000 		call	puts
 9065      00
2117:main_final_with_sync.c **** 					int Z[8] = {1,0,0,0,0,0,0,0};
 9066              		.loc 1 2117 0
 9067 716a 48C78550 		movq	$0, -688(%rbp)
 9067      FDFFFF00 
 9067      000000
 9068 7175 48C78558 		movq	$0, -680(%rbp)
 9068      FDFFFF00 
 9068      000000
 9069 7180 48C78560 		movq	$0, -672(%rbp)
 9069      FDFFFF00 
 9069      000000
 9070 718b 48C78568 		movq	$0, -664(%rbp)
 9070      FDFFFF00 
 9070      000000
 9071 7196 C78550FD 		movl	$1, -688(%rbp)
 9071      FFFF0100 
 9071      0000
2118:main_final_with_sync.c **** 					//int W[8] = {0,0,0,0,0,0,0,0};
2119:main_final_with_sync.c **** 					int decZ = bitArrayToInt(Z, 8);
 9072              		.loc 1 2119 0
 9073 71a0 488D8550 		leaq	-688(%rbp), %rax
 9073      FDFFFF
 9074 71a7 BE080000 		movl	$8, %esi
 9074      00
 9075 71ac 4889C7   		movq	%rax, %rdi
 9076 71af E8000000 		call	bitArrayToInt
 9076      00
 9077 71b4 8985D0F3 		movl	%eax, -3120(%rbp)
 9077      FFFF
2120:main_final_with_sync.c **** 					//int decW = bitArrayToInt(W, 8);
2121:main_final_with_sync.c **** 
2122:main_final_with_sync.c **** 					uint8 direct2;
2123:main_final_with_sync.c **** 					int breaker4 = 0;
 9078              		.loc 1 2123 0
 9079 71ba C785A4F3 		movl	$0, -3164(%rbp)
 9079      FFFF0000 
 9079      0000
 9080              	.L451:
 9081              	.LBB104:
2124:main_final_with_sync.c **** 
2125:main_final_with_sync.c **** 					while(1)
2126:main_final_with_sync.c **** 					{	
2127:main_final_with_sync.c **** 						printf("%s", " UART Count " );
 9082              		.loc 1 2127 0
 9083 71c4 BE000000 		movl	$.LC250, %esi
 9083      00
 9084 71c9 BF000000 		movl	$.LC153, %edi
 9084      00
 9085 71ce B8000000 		movl	$0, %eax
 9085      00
 9086 71d3 E8000000 		call	printf
 9086      00
2128:main_final_with_sync.c **** 						cnt2++;
 9087              		.loc 1 2128 0
 9088 71d8 83858CF3 		addl	$1, -3188(%rbp)
 9088      FFFF01
2129:main_final_with_sync.c **** 						printf("%d\n", cnt2);
 9089              		.loc 1 2129 0
 9090 71df 8B858CF3 		movl	-3188(%rbp), %eax
 9090      FFFF
 9091 71e5 89C6     		movl	%eax, %esi
 9092 71e7 BF000000 		movl	$.LC154, %edi
 9092      00
 9093 71ec B8000000 		movl	$0, %eax
 9093      00
 9094 71f1 E8000000 		call	printf
 9094      00
2130:main_final_with_sync.c **** 						printf("%s\n", "Waiting for UART signal ");
 9095              		.loc 1 2130 0
 9096 71f6 BF000000 		movl	$.LC251, %edi
 9096      00
 9097 71fb E8000000 		call	puts
 9097      00
2131:main_final_with_sync.c **** 						delay(del);
 9098              		.loc 1 2131 0
 9099 7200 8B85B8F3 		movl	-3144(%rbp), %eax
 9099      FFFF
 9100 7206 89C7     		movl	%eax, %edi
 9101 7208 E8000000 		call	delay
 9101      00
2132:main_final_with_sync.c **** 						fStatus = flReadChannel(handle, 2*k, 1, &direct2, &error);
 9102              		.loc 1 2132 0
 9103 720d 8B85D0F2 		movl	-3376(%rbp), %eax
 9103      FFFF
 9104 7213 01C0     		addl	%eax, %eax
 9105 7215 0FB6F0   		movzbl	%al, %esi
 9106 7218 488B85E8 		movq	-3096(%rbp), %rax
 9106      F3FFFF
 9107 721f 488D8DF0 		leaq	-3088(%rbp), %rcx
 9107      F3FFFF
 9108 7226 488D95B2 		leaq	-3406(%rbp), %rdx
 9108      F2FFFF
 9109 722d 4989C8   		movq	%rcx, %r8
 9110 7230 4889D1   		movq	%rdx, %rcx
 9111 7233 BA010000 		movl	$1, %edx
 9111      00
 9112 7238 4889C7   		movq	%rax, %rdi
 9113 723b E8000000 		call	flReadChannel
 9113      00
 9114 7240 8985C0F2 		movl	%eax, -3392(%rbp)
 9114      FFFF
2133:main_final_with_sync.c **** 						if(direct2 == reset) 
 9115              		.loc 1 2133 0
 9116 7246 0FB685B2 		movzbl	-3406(%rbp), %eax
 9116      F2FFFF
 9117 724d 3A85B7F2 		cmpb	-3401(%rbp), %al
 9117      FFFF
 9118 7253 751A     		jne	.L448
2134:main_final_with_sync.c **** 							{
2135:main_final_with_sync.c **** 								k--; 
 9119              		.loc 1 2135 0
 9120 7255 83ADD0F2 		subl	$1, -3376(%rbp)
 9120      FFFF01
2136:main_final_with_sync.c **** 								breaker4++; 
 9121              		.loc 1 2136 0
 9122 725c 8385A4F3 		addl	$1, -3164(%rbp)
 9122      FFFF01
2137:main_final_with_sync.c **** 								printf("%s\n", "-------------------------RESET------------------------");
 9123              		.loc 1 2137 0
 9124 7263 BF000000 		movl	$.LC157, %edi
 9124      00
 9125 7268 E8000000 		call	puts
 9125      00
2138:main_final_with_sync.c **** 								break;
 9126              		.loc 1 2138 0
 9127 726d EB49     		jmp	.L449
 9128              	.L448:
2139:main_final_with_sync.c **** 							}
2140:main_final_with_sync.c **** 						printf("%s\n", "Controlling signal received from UART, it is-----");
 9129              		.loc 1 2140 0
 9130 726f BF000000 		movl	$.LC252, %edi
 9130      00
 9131 7274 E8000000 		call	puts
 9131      00
2141:main_final_with_sync.c **** 						printf("%d\n", direct2);
 9132              		.loc 1 2141 0
 9133 7279 0FB685B2 		movzbl	-3406(%rbp), %eax
 9133      F2FFFF
 9134 7280 0FB6C0   		movzbl	%al, %eax
 9135 7283 89C6     		movl	%eax, %esi
 9136 7285 BF000000 		movl	$.LC154, %edi
 9136      00
 9137 728a B8000000 		movl	$0, %eax
 9137      00
 9138 728f E8000000 		call	printf
 9138      00
2142:main_final_with_sync.c **** 						//printf("%s\n", "Checking the controlling singal, whether it is to update CSV data or not");
2143:main_final_with_sync.c **** 						int director = (int)direct2;
 9139              		.loc 1 2143 0
 9140 7294 0FB685B2 		movzbl	-3406(%rbp), %eax
 9140      F2FFFF
 9141 729b 0FB6C0   		movzbl	%al, %eax
 9142 729e 8985D4F3 		movl	%eax, -3116(%rbp)
 9142      FFFF
2144:main_final_with_sync.c **** 						if(director==decZ) break;
 9143              		.loc 1 2144 0
 9144 72a4 8B85D4F3 		movl	-3116(%rbp), %eax
 9144      FFFF
 9145 72aa 3B85D0F3 		cmpl	-3120(%rbp), %eax
 9145      FFFF
 9146 72b0 7405     		je	.L470
 9147              	.LBE104:
2145:main_final_with_sync.c **** 						// if(director==decW)
2146:main_final_with_sync.c **** 						// {
2147:main_final_with_sync.c **** 						// 	printf("%s\n", "Controlling signal is to update the CSV data");
2148:main_final_with_sync.c **** 						// 	printf("%s\n", "Receiving encrypted data from the UART update CSV");
2149:main_final_with_sync.c **** 						// 	delay(del);
2150:main_final_with_sync.c **** 						// 	fStatus = flReadChannel(handle, 2*k, 1, &direct2, &error);
2151:main_final_with_sync.c **** 						// 	if(direct2 == reset) 
2152:main_final_with_sync.c **** 						// 	{
2153:main_final_with_sync.c **** 						// 		k--; 
2154:main_final_with_sync.c **** 						// 		breaker4++;
2155:main_final_with_sync.c **** 						// 		printf("%s\n", "-------------------------RESET------------------------"); 
2156:main_final_with_sync.c **** 						// 		break;
2157:main_final_with_sync.c **** 						// 	}
2158:main_final_with_sync.c **** 		 			// 		// delay(del);
2159:main_final_with_sync.c **** 		 			// 		// fStatus = flReadChannel(handle, 2*k, 1, &updaterUART[1], &error);
2160:main_final_with_sync.c **** 		 			// 		// delay(del);
2161:main_final_with_sync.c **** 		 			// 		// fStatus = flReadChannel(handle, 2*k, 1, &updaterUART[2], &error);
2162:main_final_with_sync.c **** 		 			// 		// delay(del);
2163:main_final_with_sync.c **** 		 			// 		// fStatus = flReadChannel(handle, 2*k, 1, &updaterUART[3], &error);
2164:main_final_with_sync.c **** 
2165:main_final_with_sync.c **** 		 			// 		// printf("%s\n", "Encrypted Data received successfully from the UART, it is as in uint8
2166:main_final_with_sync.c **** 		 			// 		// for (int i = 0; i < 4; ++i)
2167:main_final_with_sync.c **** 		 			// 		// {
2168:main_final_with_sync.c **** 		 			// 		// 	printf("%d ", updaterUART[i]);
2169:main_final_with_sync.c **** 		 			// 		// }
2170:main_final_with_sync.c **** 						// 	printf("%d\n", direct2);
2171:main_final_with_sync.c **** 
2172:main_final_with_sync.c **** 						// 	int updatesFromUART[8];
2173:main_final_with_sync.c **** 						// 	printf("%s\n", "Converting uint8 data to binary");
2174:main_final_with_sync.c **** 						// 	decToBinary(direct2, updatesFromUART, 8);
2175:main_final_with_sync.c **** 						// 	printf("%s\n", "Converted uint8 data to binary, it is as-----");
2176:main_final_with_sync.c **** 
2177:main_final_with_sync.c **** 						// 	for (int i = 0; i < 8; ++i)
2178:main_final_with_sync.c **** 						// 	{
2179:main_final_with_sync.c **** 						// 		printf("%d ", updatesFromUART[7-i]);
2180:main_final_with_sync.c **** 						// 	}
2181:main_final_with_sync.c **** 						// 	printf("\n");
2182:main_final_with_sync.c **** 		 			// 		// printf("%s\n", "Decrypting the data");
2183:main_final_with_sync.c **** 		 			// 		// int decryptedUpdates[32];
2184:main_final_with_sync.c **** 		 			// 		// decrypter(updatesFromUART, K, decryptedUpdates);
2185:main_final_with_sync.c **** 		 			// 		// printf("%s\n", "Data decrypted successfully, it is as----");
2186:main_final_with_sync.c **** 		 			// 		// for (int i = 0; i < 32; ++i)
2187:main_final_with_sync.c **** 		 			// 		// {
2188:main_final_with_sync.c **** 		 			// 		// 	printf("%d ", decryptedUpdates[i]);
2189:main_final_with_sync.c **** 		 			// 		// }
2190:main_final_with_sync.c **** 		 			// 		// printf("\n");
2191:main_final_with_sync.c **** 						// 	printf("%s\n", "Getting ready to update CSV");
2192:main_final_with_sync.c **** 		 			// 		// int updatesForCSV[8];
2193:main_final_with_sync.c **** 						// 	int exists, ok, dir, nxt;
2194:main_final_with_sync.c **** 		 			// 		// for (int i = 0; i < 8; ++i)
2195:main_final_with_sync.c **** 		 			// 		// 	updatesForCSV[i] = decryptedUpdates[i];
2196:main_final_with_sync.c **** 
2197:main_final_with_sync.c **** 						// 	exists = updatesFromUART[7];
2198:main_final_with_sync.c **** 						// 	ok = updatesFromUART[6];
2199:main_final_with_sync.c **** 						// 	dir = 4*updatesFromUART[5] + 2*updatesFromUART[4] + updatesFromUART[3];
2200:main_final_with_sync.c **** 						// 	nxt = 4*updatesFromUART[2] + 2*updatesFromUART[1] + updatesFromUART[0];
2201:main_final_with_sync.c **** 
2202:main_final_with_sync.c **** 						// 	printf("%s\n", "The information received from UART");
2203:main_final_with_sync.c **** 						// 	printf("%s ", "Track exists   ---->   ");
2204:main_final_with_sync.c **** 						// 	printf("%d\n", exists);
2205:main_final_with_sync.c **** 						// 	printf("%s ", "Track ok   ----->   ");
2206:main_final_with_sync.c **** 						// 	printf("%d\n", ok);
2207:main_final_with_sync.c **** 						// 	printf("%s ", "Direction   ----->   ");
2208:main_final_with_sync.c **** 						// 	printf("%d\n", dir);
2209:main_final_with_sync.c **** 						// 	printf("%s ", "Next signal   ------>    ");
2210:main_final_with_sync.c **** 						// 	printf("%d\n", nxt);
2211:main_final_with_sync.c **** 
2212:main_final_with_sync.c **** 						// 	printf("%s\n", "Overwriting the CSV file with the updated information");
2213:main_final_with_sync.c **** 						// 	writecsv(x_cord, y_cord, ok, dir, nxt);
2214:main_final_with_sync.c **** 						// 	printf("%s\n", "CSV file overwritten successfully");
2215:main_final_with_sync.c **** 						// 	break;
2216:main_final_with_sync.c **** 						// }
2217:main_final_with_sync.c **** 					}
 9148              		.loc 1 2217 0
 9149 72b2 E90DFFFF 		jmp	.L451
 9149      FF
 9150              	.L470:
 9151              	.LBB105:
2144:main_final_with_sync.c **** 						if(director==decZ) break;
 9152              		.loc 1 2144 0
 9153 72b7 90       		nop
 9154              	.L449:
 9155              	.LBE105:
2218:main_final_with_sync.c **** 
2219:main_final_with_sync.c **** 					if(breaker4 >= 1)
 9156              		.loc 1 2219 0
 9157 72b8 83BDA4F3 		cmpl	$0, -3164(%rbp)
 9157      FFFF00
 9158 72bf 0F8FE401 		jg	.L471
 9158      0000
2220:main_final_with_sync.c **** 					{
2221:main_final_with_sync.c **** 						continue;
2222:main_final_with_sync.c **** 					}
2223:main_final_with_sync.c **** 					
2224:main_final_with_sync.c **** 					if(updateCSV==true){
 9159              		.loc 1 2224 0
 9160 72c5 80BDB4F2 		cmpb	$0, -3404(%rbp)
 9160      FFFF00
 9161 72cc 0F84AB01 		je	.L453
 9161      0000
2225:main_final_with_sync.c **** 						exists = updatesForCSV[7];
 9162              		.loc 1 2225 0
 9163 72d2 8B858CF5 		movl	-2676(%rbp), %eax
 9163      FFFF
 9164 72d8 8985D8F3 		movl	%eax, -3112(%rbp)
 9164      FFFF
2226:main_final_with_sync.c **** 						ok = updatesForCSV[6];
 9165              		.loc 1 2226 0
 9166 72de 8B8588F5 		movl	-2680(%rbp), %eax
 9166      FFFF
 9167 72e4 8985DCF3 		movl	%eax, -3108(%rbp)
 9167      FFFF
2227:main_final_with_sync.c **** 						dir = 4*updatesForCSV[5] + 2*updatesForCSV[4] + updatesForCSV[3];
 9168              		.loc 1 2227 0
 9169 72ea 8B8584F5 		movl	-2684(%rbp), %eax
 9169      FFFF
 9170 72f0 8D1400   		leal	(%rax,%rax), %edx
 9171 72f3 8B8580F5 		movl	-2688(%rbp), %eax
 9171      FFFF
 9172 72f9 01D0     		addl	%edx, %eax
 9173 72fb 8D1400   		leal	(%rax,%rax), %edx
 9174 72fe 8B857CF5 		movl	-2692(%rbp), %eax
 9174      FFFF
 9175 7304 01D0     		addl	%edx, %eax
 9176 7306 8985E0F3 		movl	%eax, -3104(%rbp)
 9176      FFFF
2228:main_final_with_sync.c **** 						nxt = 4*updatesForCSV[2] + 2*updatesForCSV[1] + updatesForCSV[0];
 9177              		.loc 1 2228 0
 9178 730c 8B8578F5 		movl	-2696(%rbp), %eax
 9178      FFFF
 9179 7312 8D1400   		leal	(%rax,%rax), %edx
 9180 7315 8B8574F5 		movl	-2700(%rbp), %eax
 9180      FFFF
 9181 731b 01D0     		addl	%edx, %eax
 9182 731d 8D1400   		leal	(%rax,%rax), %edx
 9183 7320 8B8570F5 		movl	-2704(%rbp), %eax
 9183      FFFF
 9184 7326 01D0     		addl	%edx, %eax
 9185 7328 8985E4F3 		movl	%eax, -3100(%rbp)
 9185      FFFF
2229:main_final_with_sync.c **** 
2230:main_final_with_sync.c **** 						printf("%s\n", "The information received from FPGA");
 9186              		.loc 1 2230 0
 9187 732e BF000000 		movl	$.LC253, %edi
 9187      00
 9188 7333 E8000000 		call	puts
 9188      00
2231:main_final_with_sync.c **** 						printf("%s", "The x_cord ----->");
 9189              		.loc 1 2231 0
 9190 7338 BE000000 		movl	$.LC254, %esi
 9190      00
 9191 733d BF000000 		movl	$.LC153, %edi
 9191      00
 9192 7342 B8000000 		movl	$0, %eax
 9192      00
 9193 7347 E8000000 		call	printf
 9193      00
2232:main_final_with_sync.c **** 						printf("%d\n", x_cord);
 9194              		.loc 1 2232 0
 9195 734c 8B85BCF3 		movl	-3140(%rbp), %eax
 9195      FFFF
 9196 7352 89C6     		movl	%eax, %esi
 9197 7354 BF000000 		movl	$.LC154, %edi
 9197      00
 9198 7359 B8000000 		movl	$0, %eax
 9198      00
 9199 735e E8000000 		call	printf
 9199      00
2233:main_final_with_sync.c **** 						printf("%s", "The y_cord ----->");
 9200              		.loc 1 2233 0
 9201 7363 BE000000 		movl	$.LC255, %esi
 9201      00
 9202 7368 BF000000 		movl	$.LC153, %edi
 9202      00
 9203 736d B8000000 		movl	$0, %eax
 9203      00
 9204 7372 E8000000 		call	printf
 9204      00
2234:main_final_with_sync.c **** 						printf("%d\n", y_cord);
 9205              		.loc 1 2234 0
 9206 7377 8B85C0F3 		movl	-3136(%rbp), %eax
 9206      FFFF
 9207 737d 89C6     		movl	%eax, %esi
 9208 737f BF000000 		movl	$.LC154, %edi
 9208      00
 9209 7384 B8000000 		movl	$0, %eax
 9209      00
 9210 7389 E8000000 		call	printf
 9210      00
2235:main_final_with_sync.c **** 						printf("%s ", "Track exists   ---->   ");
 9211              		.loc 1 2235 0
 9212 738e BE000000 		movl	$.LC256, %esi
 9212      00
 9213 7393 BF000000 		movl	$.LC257, %edi
 9213      00
 9214 7398 B8000000 		movl	$0, %eax
 9214      00
 9215 739d E8000000 		call	printf
 9215      00
2236:main_final_with_sync.c **** 						printf("%d\n", exists);
 9216              		.loc 1 2236 0
 9217 73a2 8B85D8F3 		movl	-3112(%rbp), %eax
 9217      FFFF
 9218 73a8 89C6     		movl	%eax, %esi
 9219 73aa BF000000 		movl	$.LC154, %edi
 9219      00
 9220 73af B8000000 		movl	$0, %eax
 9220      00
 9221 73b4 E8000000 		call	printf
 9221      00
2237:main_final_with_sync.c **** 						printf("%s ", "Track ok   ----->   ");
 9222              		.loc 1 2237 0
 9223 73b9 BE000000 		movl	$.LC258, %esi
 9223      00
 9224 73be BF000000 		movl	$.LC257, %edi
 9224      00
 9225 73c3 B8000000 		movl	$0, %eax
 9225      00
 9226 73c8 E8000000 		call	printf
 9226      00
2238:main_final_with_sync.c **** 						printf("%d\n", ok);
 9227              		.loc 1 2238 0
 9228 73cd 8B85DCF3 		movl	-3108(%rbp), %eax
 9228      FFFF
 9229 73d3 89C6     		movl	%eax, %esi
 9230 73d5 BF000000 		movl	$.LC154, %edi
 9230      00
 9231 73da B8000000 		movl	$0, %eax
 9231      00
 9232 73df E8000000 		call	printf
 9232      00
2239:main_final_with_sync.c **** 						printf("%s ", "Direction   ----->   ");
 9233              		.loc 1 2239 0
 9234 73e4 BE000000 		movl	$.LC259, %esi
 9234      00
 9235 73e9 BF000000 		movl	$.LC257, %edi
 9235      00
 9236 73ee B8000000 		movl	$0, %eax
 9236      00
 9237 73f3 E8000000 		call	printf
 9237      00
2240:main_final_with_sync.c **** 						printf("%d\n", dir);
 9238              		.loc 1 2240 0
 9239 73f8 8B85E0F3 		movl	-3104(%rbp), %eax
 9239      FFFF
 9240 73fe 89C6     		movl	%eax, %esi
 9241 7400 BF000000 		movl	$.LC154, %edi
 9241      00
 9242 7405 B8000000 		movl	$0, %eax
 9242      00
 9243 740a E8000000 		call	printf
 9243      00
2241:main_final_with_sync.c **** 						printf("%s ", "Next signal   ------>    ");
 9244              		.loc 1 2241 0
 9245 740f BE000000 		movl	$.LC260, %esi
 9245      00
 9246 7414 BF000000 		movl	$.LC257, %edi
 9246      00
 9247 7419 B8000000 		movl	$0, %eax
 9247      00
 9248 741e E8000000 		call	printf
 9248      00
2242:main_final_with_sync.c **** 						printf("%d\n", nxt);
 9249              		.loc 1 2242 0
 9250 7423 8B85E4F3 		movl	-3100(%rbp), %eax
 9250      FFFF
 9251 7429 89C6     		movl	%eax, %esi
 9252 742b BF000000 		movl	$.LC154, %edi
 9252      00
 9253 7430 B8000000 		movl	$0, %eax
 9253      00
 9254 7435 E8000000 		call	printf
 9254      00
2243:main_final_with_sync.c **** 						printf("%s\n", "Overwriting the CSV file with the updated information");
 9255              		.loc 1 2243 0
 9256 743a BF000000 		movl	$.LC261, %edi
 9256      00
 9257 743f E8000000 		call	puts
 9257      00
2244:main_final_with_sync.c **** 						writecsv(x_cord, y_cord, ok, dir, nxt);
 9258              		.loc 1 2244 0
 9259 7444 8BBDE4F3 		movl	-3100(%rbp), %edi
 9259      FFFF
 9260 744a 8B8DE0F3 		movl	-3104(%rbp), %ecx
 9260      FFFF
 9261 7450 8B95DCF3 		movl	-3108(%rbp), %edx
 9261      FFFF
 9262 7456 8BB5C0F3 		movl	-3136(%rbp), %esi
 9262      FFFF
 9263 745c 8B85BCF3 		movl	-3140(%rbp), %eax
 9263      FFFF
 9264 7462 4189F8   		movl	%edi, %r8d
 9265 7465 89C7     		movl	%eax, %edi
 9266 7467 E8000000 		call	writecsv
 9266      00
2245:main_final_with_sync.c **** 						printf("%s\n", "CSV file overwritten successfully");
 9267              		.loc 1 2245 0
 9268 746c BF000000 		movl	$.LC262, %edi
 9268      00
 9269 7471 E8000000 		call	puts
 9269      00
2246:main_final_with_sync.c **** 								
2247:main_final_with_sync.c **** 			 			//delay(32000000);
2248:main_final_with_sync.c **** 						
2249:main_final_with_sync.c **** 						updateCSV=false;						
 9270              		.loc 1 2249 0
 9271 7476 C685B4F2 		movb	$0, -3404(%rbp)
 9271      FFFF00
 9272              	.L453:
2250:main_final_with_sync.c **** 					}
2251:main_final_with_sync.c **** 					k = k-1;
 9273              		.loc 1 2251 0
 9274 747d 83ADD0F2 		subl	$1, -3376(%rbp)
 9274      FFFF01
2252:main_final_with_sync.c **** 					delay(5*del);
 9275              		.loc 1 2252 0
 9276 7484 8B95B8F3 		movl	-3144(%rbp), %edx
 9276      FFFF
 9277 748a 89D0     		movl	%edx, %eax
 9278 748c C1E002   		sall	$2, %eax
 9279 748f 01D0     		addl	%edx, %eax
 9280 7491 89C7     		movl	%eax, %edi
 9281 7493 E8000000 		call	delay
 9281      00
2253:main_final_with_sync.c **** 					continue;
 9282              		.loc 1 2253 0
 9283 7498 EB10     		jmp	.L302
 9284              	.L463:
1574:main_final_with_sync.c **** 					}
 9285              		.loc 1 1574 0
 9286 749a 90       		nop
 9287 749b EB0D     		jmp	.L302
 9288              	.L465:
1808:main_final_with_sync.c **** 
 9289              		.loc 1 1808 0
 9290 749d 90       		nop
 9291 749e EB0A     		jmp	.L302
 9292              	.L466:
1812:main_final_with_sync.c **** 					}
 9293              		.loc 1 1812 0
 9294 74a0 90       		nop
 9295 74a1 EB07     		jmp	.L302
 9296              	.L467:
1941:main_final_with_sync.c **** 
 9297              		.loc 1 1941 0
 9298 74a3 90       		nop
 9299 74a4 EB04     		jmp	.L302
 9300              	.L469:
2114:main_final_with_sync.c **** 
 9301              		.loc 1 2114 0
 9302 74a6 90       		nop
 9303 74a7 EB01     		jmp	.L302
 9304              	.L471:
2221:main_final_with_sync.c **** 					}
 9305              		.loc 1 2221 0
 9306 74a9 90       		nop
 9307              	.L302:
 9308              	.LBE108:
1307:main_final_with_sync.c **** 				{	printf("%s","Channel = " );
 9309              		.loc 1 1307 0 discriminator 1
 9310 74aa 8385D0F2 		addl	$1, -3376(%rbp)
 9310      FFFF01
 9311              	.L300:
 9312 74b1 83BDD0F2 		cmpl	$63, -3376(%rbp)
 9312      FFFF3F
 9313 74b8 0F8EB6D5 		jle	.L454
 9313      FFFF
 9314 74be EB58     		jmp	.L230
 9315              	.L299:
 9316              	.LBE111:
 9317              	.LBE114:
2254:main_final_with_sync.c **** 
2255:main_final_with_sync.c **** 
2256:main_final_with_sync.c **** 				}
2257:main_final_with_sync.c **** 
2258:main_final_with_sync.c **** 			} 
2259:main_final_with_sync.c **** 			else 
2260:main_final_with_sync.c **** 			{
2261:main_final_with_sync.c **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n", vp
 9318              		.loc 1 2261 0
 9319 74c0 488B0500 		movq	stderr(%rip), %rax
 9319      000000
 9320 74c7 488B95B8 		movq	-2888(%rbp), %rdx
 9320      F4FFFF
 9321 74ce BE000000 		movl	$.LC148, %esi
 9321      00
 9322 74d3 4889C7   		movq	%rax, %rdi
 9323 74d6 B8000000 		movl	$0, %eax
 9323      00
 9324 74db E8000000 		call	fprintf
 9324      00
2262:main_final_with_sync.c **** 				FAIL(FLP_ARGS, cleanup);
 9325              		.loc 1 2262 0
 9326 74e0 C785BCF2 		movl	$12, -3396(%rbp)
 9326      FFFF0C00 
 9326      0000
 9327 74ea 90       		nop
 9328 74eb EB2B     		jmp	.L230
 9329              	.L295:
 9330              	.LBE50:
2263:main_final_with_sync.c **** 			}
2264:main_final_with_sync.c **** 		} 
2265:main_final_with_sync.c **** 		else 
2266:main_final_with_sync.c **** 		{
2267:main_final_with_sync.c **** 			fprintf(stderr, "Shell requested but device at %s does not support CommFPGA\n", vp);
 9331              		.loc 1 2267 0
 9332 74ed 488B0500 		movq	stderr(%rip), %rax
 9332      000000
 9333 74f4 488B95B8 		movq	-2888(%rbp), %rdx
 9333      F4FFFF
 9334 74fb BE000000 		movl	$.LC149, %esi
 9334      00
 9335 7500 4889C7   		movq	%rax, %rdi
 9336 7503 B8000000 		movl	$0, %eax
 9336      00
 9337 7508 E8000000 		call	fprintf
 9337      00
2268:main_final_with_sync.c **** 			FAIL(FLP_ARGS, cleanup);
 9338              		.loc 1 2268 0
 9339 750d C785BCF2 		movl	$12, -3396(%rbp)
 9339      FFFF0C00 
 9339      0000
 9340 7517 90       		nop
 9341              	.L230:
2269:main_final_with_sync.c **** 		}
2270:main_final_with_sync.c **** 
2271:main_final_with_sync.c **** 
2272:main_final_with_sync.c **** 	}
2273:main_final_with_sync.c **** 
2274:main_final_with_sync.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
2275:main_final_with_sync.c **** ///////////////////////////////////////////////////////////////////////////////////////////////////
2276:main_final_with_sync.c **** 
2277:main_final_with_sync.c **** 	cleanup:
2278:main_final_with_sync.c **** 	free((void*)line);
 9342              		.loc 1 2278 0
 9343 7518 488B8518 		movq	-3048(%rbp), %rax
 9343      F4FFFF
 9344 751f 4889C7   		movq	%rax, %rdi
 9345 7522 E8000000 		call	free
 9345      00
2279:main_final_with_sync.c **** 	flClose(handle);
 9346              		.loc 1 2279 0
 9347 7527 488B85E8 		movq	-3096(%rbp), %rax
 9347      F3FFFF
 9348 752e 4889C7   		movq	%rax, %rdi
 9349 7531 E8000000 		call	flClose
 9349      00
2280:main_final_with_sync.c **** 	if ( error ) {
 9350              		.loc 1 2280 0
 9351 7536 488B85F0 		movq	-3088(%rbp), %rax
 9351      F3FFFF
 9352 753d 4885C0   		testq	%rax, %rax
 9353 7540 742F     		je	.L455
2281:main_final_with_sync.c **** 		fprintf(stderr, "%s\n", error);
 9354              		.loc 1 2281 0
 9355 7542 488B95F0 		movq	-3088(%rbp), %rdx
 9355      F3FFFF
 9356 7549 488B0500 		movq	stderr(%rip), %rax
 9356      000000
 9357 7550 BE000000 		movl	$.LC263, %esi
 9357      00
 9358 7555 4889C7   		movq	%rax, %rdi
 9359 7558 B8000000 		movl	$0, %eax
 9359      00
 9360 755d E8000000 		call	fprintf
 9360      00
2282:main_final_with_sync.c **** 		flFreeError(error);
 9361              		.loc 1 2282 0
 9362 7562 488B85F0 		movq	-3088(%rbp), %rax
 9362      F3FFFF
 9363 7569 4889C7   		movq	%rax, %rdi
 9364 756c E8000000 		call	flFreeError
 9364      00
 9365              	.L455:
2283:main_final_with_sync.c **** 	}
2284:main_final_with_sync.c **** 	return retVal;
 9366              		.loc 1 2284 0
 9367 7571 8B85BCF2 		movl	-3396(%rbp), %eax
 9367      FFFF
2285:main_final_with_sync.c **** }
 9368              		.loc 1 2285 0
 9369 7577 488B5DE8 		movq	-24(%rbp), %rbx
 9370 757b 6448331C 		xorq	%fs:40, %rbx
 9370      25280000 
 9370      00
 9371 7584 7405     		je	.L457
 9372 7586 E8000000 		call	__stack_chk_fail
 9372      00
 9373              	.L457:
 9374 758b 4881C458 		addq	$3416, %rsp
 9374      0D0000
 9375 7592 5B       		popq	%rbx
 9376 7593 5D       		popq	%rbp
 9377              		.cfi_def_cfa 7, 8
 9378 7594 C3       		ret
 9379              		.cfi_endproc
 9380              	.LFE23:
 9382              		.section	.rodata
 9383 21ae 0000     		.align 8
 9384              	.LC29:
 9385 21b0 00000000 		.long	0
 9386 21b4 80842E41 		.long	1093567616
 9387              		.align 8
 9388              	.LC30:
 9389 21b8 00000000 		.long	0
 9390 21bc 00003041 		.long	1093664768
 9391              		.align 8
 9392              	.LC216:
 9393 21c0 00000000 		.long	0
 9394 21c4 00007040 		.long	1081081856
 9395              		.text
 9396              	.Letext0:
 9397              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 9398              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 9399              		.file 4 "/usr/include/stdio.h"
 9400              		.file 5 "/usr/include/libio.h"
 9401              		.file 6 "/usr/include/time.h"
 9402              		.file 7 "/home/shubham/20140524/makestuff/common/makestuff.h"
 9403              		.file 8 "/home/shubham/20140524/makestuff/libs/libfpgalink/libfpgalink.h"
 9404              		.file 9 "/home/shubham/20140524/makestuff/libs/libbuffer/libbuffer.h"
 9405              		.file 10 "/home/shubham/20140524/makestuff/libs/libargtable2/argtable2.h"
 9406              		.file 11 "/usr/include/x86_64-linux-gnu/bits/time.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main_final_with_sync.c
     /tmp/cc4YdcFa.s:5      .bss:0000000000000000 ptr
     /tmp/cc4YdcFa.s:5      .bss:0000000000000008 enableBenchmarking
     /tmp/cc4YdcFa.s:10     .text:0000000000000000 delay
     /tmp/cc4YdcFa.s:48     .text:000000000000002f myxor
     /tmp/cc4YdcFa.s:109    .text:0000000000000091 bitArrayToInt
     /tmp/cc4YdcFa.s:165    .text:00000000000000ee BinTouint8
     /tmp/cc4YdcFa.s:287    .text:0000000000000281 decToBinary
     /tmp/cc4YdcFa.s:424    .text:00000000000003c7 encrypter
     /tmp/cc4YdcFa.s:687    .text:000000000000074b decrypter
     /tmp/cc4YdcFa.s:971    .text:0000000000000b10 convert_to_binary
     /tmp/cc4YdcFa.s:1045   .text:0000000000000b72 print
     /tmp/cc4YdcFa.s:1592   .text:00000000000012f6 uint8ToBin
     /tmp/cc4YdcFa.s:1687   .text:0000000000001388 writecsv
     /tmp/cc4YdcFa.s:2123   .text:0000000000001971 isHexDigit
     /tmp/cc4YdcFa.s:2172   .text:00000000000019af calcChecksum
     /tmp/cc4YdcFa.s:2212   .text:00000000000019f0 getHexNibble
     /tmp/cc4YdcFa.s:2280   .text:0000000000001a64 getHexByte
     /tmp/cc4YdcFa.s:2376   .rodata:00000000000001a0 errMessages
     /tmp/cc4YdcFa.s:2396   .text:0000000000001b08 doRead
     /tmp/cc4YdcFa.s:2647   .text:0000000000001dba doWrite
     /tmp/cc4YdcFa.s:2796   .text:0000000000001fae parseLine
     /tmp/cc4YdcFa.s:4035   .data:0000000000000000 nibbles
     /tmp/cc4YdcFa.s:4062   .text:000000000000305d asciiToBinary
     /tmp/cc4YdcFa.s:4665   .text:00000000000030b8 main

UNDEFINED SYMBOLS
clock
__stack_chk_fail
stderr
fwrite
puts
__isoc99_fscanf
printf
fopen
putchar
fprintf
fclose
flReadChannelAsyncSubmit
errPrefix
flReadChannelAsyncAwait
fread
flWriteChannelAsync
flAwaitAsyncWrites
bufInitialise
__errno_location
strtoul
malloc
strncpy
free
gettimeofday
bufAppendConst
flReadChannel
flWriteChannel
flSelectConduit
dump
bufDestroy
fputc
arg_str0
arg_str1
arg_uint0
arg_lit0
arg_end
arg_nullcheck
arg_parse
stdout
arg_print_syntax
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadCustomFirmware
flLoadStandardFirmware
flSleep
fflush
flIsDeviceAvailable
flGetFirmwareVersion
flGetFirmwareID
strcmp
flFlashStandardFirmware
flFlashCustomFirmware
flSaveFirmware
flResetToggle
flIsNeroCapable
flIsCommCapable
flMultiBitPortAccess
sprintf
jtagScanChain
flProgram
flIsFPGARunning
sigRegisterHandler
sigIsRaised
readline
add_history
time
difftime
flClose
flFreeError
