   1              		.file	"main.c"
   2              		.section	.rodata.str1.1,"aMS",@progbits,1
   3              	.LC1:
   4 0000 646F5772 		.string	"doWrite()"
   4      69746528 
   4      2900
   5              		.section	.text.unlikely,"ax",@progbits
   6              	.LCOLDB2:
   7              	.LHOTB2:
   9              	doWrite:
  10              	.LFB65:
  11              		.cfi_startproc
  12 0000 4157     		pushq	%r15
  13              		.cfi_def_cfa_offset 16
  14              		.cfi_offset 15, -16
  15 0002 4156     		pushq	%r14
  16              		.cfi_def_cfa_offset 24
  17              		.cfi_offset 14, -24
  18 0004 4D89C7   		movq	%r8, %r15
  19 0007 4155     		pushq	%r13
  20              		.cfi_def_cfa_offset 32
  21              		.cfi_offset 13, -32
  22 0009 4154     		pushq	%r12
  23              		.cfi_def_cfa_offset 40
  24              		.cfi_offset 12, -40
  25 000b 4989FD   		movq	%rdi, %r13
  26 000e 55       		pushq	%rbp
  27              		.cfi_def_cfa_offset 48
  28              		.cfi_offset 6, -48
  29 000f 53       		pushq	%rbx
  30              		.cfi_def_cfa_offset 56
  31              		.cfi_offset 3, -56
  32 0010 4989CE   		movq	%rcx, %r14
  33 0013 4D89CC   		movq	%r9, %r12
  34 0016 31DB     		xorl	%ebx, %ebx
  35 0018 31ED     		xorl	%ebp, %ebp
  36 001a 4881EC38 		subq	$65592, %rsp
  36      000100
  37              		.cfi_def_cfa_offset 65648
  38 0021 64488B04 		movq	%fs:40, %rax
  38      25280000 
  38      00
  39 002a 48898424 		movq	%rax, 65576(%rsp)
  39      28000100 
  40 0032 31C0     		xorl	%eax, %eax
  41 0034 400FB6C6 		movzbl	%sil, %eax
  42 0038 48895424 		movq	%rdx, 8(%rsp)
  42      08
  43 003d 89442414 		movl	%eax, 20(%rsp)
  44              	.L7:
  45 0041 488B4C24 		movq	8(%rsp), %rcx
  45      08
  46 0046 488D7C24 		leaq	32(%rsp), %rdi
  46      20
  47 004b BAFBFF00 		movl	$65531, %edx
  47      00
  48 0050 BE010000 		movl	$1, %esi
  48      00
  49 0055 E8000000 		call	fread
  49      00
  50 005a 4885C0   		testq	%rax, %rax
  51 005d 7460     		je	.L2
  52 005f 8B742414 		movl	20(%rsp), %esi
  53 0063 488D4C24 		leaq	32(%rsp), %rcx
  53      20
  54 0068 4D89E0   		movq	%r12, %r8
  55 006b 4889C2   		movq	%rax, %rdx
  56 006e 4C89EF   		movq	%r13, %rdi
  57 0071 4801C3   		addq	%rax, %rbx
  58 0074 48894424 		movq	%rax, 24(%rsp)
  58      18
  59 0079 E8000000 		call	flWriteChannelAsync
  59      00
  60 007e 85C0     		testl	%eax, %eax
  61 0080 7510     		jne	.L3
  62 0082 4C8B4C24 		movq	24(%rsp), %r9
  62      18
  63 0087 488D4424 		leaq	32(%rsp), %rax
  63      20
  64 008c 4A8D1408 		leaq	(%rax,%r9), %rdx
  65 0090 EB14     		jmp	.L4
  66              	.L3:
  67 0092 BE000000 		movl	$.LC1, %esi
  67      00
  68 0097 4C89E7   		movq	%r12, %rdi
  69 009a E8000000 		call	errPrefix
  69      00
  70 009f B8010000 		movl	$1, %eax
  70      00
  71 00a4 EB2F     		jmp	.L5
  72              	.L4:
  73 00a6 4839D0   		cmpq	%rdx, %rax
  74 00a9 740B     		je	.L16
  75 00ab 48FFC0   		incq	%rax
  76 00ae 0FB648FF 		movzbl	-1(%rax), %ecx
  77 00b2 01CD     		addl	%ecx, %ebp
  78 00b4 EBF0     		jmp	.L4
  79              	.L16:
  80 00b6 4981F9FB 		cmpq	$65531, %r9
  80      FF0000
  81 00bd 7482     		je	.L7
  82              	.L2:
  83 00bf 4C89E6   		movq	%r12, %rsi
  84 00c2 4C89EF   		movq	%r13, %rdi
  85 00c5 E8000000 		call	flAwaitAsyncWrites
  85      00
  86 00ca 85C0     		testl	%eax, %eax
  87 00cc 75C4     		jne	.L3
  88 00ce 6641892F 		movw	%bp, (%r15)
  89 00d2 49891E   		movq	%rbx, (%r14)
  90              	.L5:
  91 00d5 488B9C24 		movq	65576(%rsp), %rbx
  91      28000100 
  92 00dd 6448331C 		xorq	%fs:40, %rbx
  92      25280000 
  92      00
  93 00e6 7405     		je	.L8
  94 00e8 E8000000 		call	__stack_chk_fail
  94      00
  95              	.L8:
  96 00ed 4881C438 		addq	$65592, %rsp
  96      000100
  97              		.cfi_def_cfa_offset 56
  98 00f4 5B       		popq	%rbx
  99              		.cfi_def_cfa_offset 48
 100 00f5 5D       		popq	%rbp
 101              		.cfi_def_cfa_offset 40
 102 00f6 415C     		popq	%r12
 103              		.cfi_def_cfa_offset 32
 104 00f8 415D     		popq	%r13
 105              		.cfi_def_cfa_offset 24
 106 00fa 415E     		popq	%r14
 107              		.cfi_def_cfa_offset 16
 108 00fc 415F     		popq	%r15
 109              		.cfi_def_cfa_offset 8
 110 00fe C3       		ret
 111              		.cfi_endproc
 112              	.LFE65:
 114              	.LCOLDE2:
 115              	.LHOTE2:
 116              		.section	.rodata.str1.1
 117              	.LC3:
 118 000a 776200   		.string	"wb"
 119              	.LC4:
 120 000d 646F5265 		.string	"doRead()"
 120      61642829 
 120      00
 121              	.LC5:
 122 0016 4261666F 		.string	"Bafoon\n"
 122      6F6E0A00 
 123              		.section	.rodata.str1.8,"aMS",@progbits,1
 124              		.align 8
 125              	.LC8:
 126 0000 52656164 		.string	"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n"
 126      20256420 
 126      62797465 
 126      73202863 
 126      6865636B 
 127              		.section	.rodata.str1.1
 128              	.LC9:
 129 001e 726200   		.string	"rb"
 130              		.section	.rodata.str1.8
 131 003d 000000   		.align 8
 132              	.LC10:
 133 0040 57726F74 		.string	"Wrote %zu bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n"
 133      6520257A 
 133      75206279 
 133      74657320 
 133      28636865 
 134              		.section	.rodata.str1.1
 135              	.LC11:
 136 0021 25732061 		.string	"%s at column %d\n  %s\n  "
 136      7420636F 
 136      6C756D6E 
 136      2025640A 
 136      20202573 
 137              	.LC12:
 138 0039 2000     		.string	" "
 139              	.LC13:
 140 003b 5E0A00   		.string	"^\n"
 141              		.section	.text.unlikely
 142              	.LCOLDB14:
 143              	.LHOTB14:
 145              	parseLine:
 146              	.LFB66:
 147              		.cfi_startproc
 148 00ff 4157     		pushq	%r15
 149              		.cfi_def_cfa_offset 16
 150              		.cfi_offset 15, -16
 151 0101 4156     		pushq	%r14
 152              		.cfi_def_cfa_offset 24
 153              		.cfi_offset 14, -24
 154 0103 B9080000 		movl	$8, %ecx
 154      00
 155 0108 4155     		pushq	%r13
 156              		.cfi_def_cfa_offset 32
 157              		.cfi_offset 13, -32
 158 010a 4154     		pushq	%r12
 159              		.cfi_def_cfa_offset 40
 160              		.cfi_offset 12, -40
 161 010c 55       		pushq	%rbp
 162              		.cfi_def_cfa_offset 48
 163              		.cfi_offset 6, -48
 164 010d 53       		pushq	%rbx
 165              		.cfi_def_cfa_offset 56
 166              		.cfi_offset 3, -56
 167 010e 4889D3   		movq	%rdx, %rbx
 168 0111 4881EC98 		subq	$152, %rsp
 168      000000
 169              		.cfi_def_cfa_offset 208
 170 0118 64488B04 		movq	%fs:40, %rax
 170      25280000 
 170      00
 171 0121 48898424 		movq	%rax, 136(%rsp)
 171      88000000 
 172 0129 31C0     		xorl	%eax, %eax
 173 012b 48893C24 		movq	%rdi, (%rsp)
 174 012f 488D7C24 		leaq	96(%rsp), %rdi
 174      60
 175 0134 48897424 		movq	%rsi, 16(%rsp)
 175      10
 176 0139 BE000400 		movl	$1024, %esi
 176      00
 177 013e F3AB     		rep stosl
 178 0140 488D7C24 		leaq	96(%rsp), %rdi
 178      60
 179 0145 4889D1   		movq	%rdx, %rcx
 180 0148 31D2     		xorl	%edx, %edx
 181 014a E8000000 		call	bufInitialise
 181      00
 182 014f 85C0     		testl	%eax, %eax
 183 0151 0F85FB08 		jne	.L96
 183      0000
 184 0157 488B4424 		movq	16(%rsp), %rax
 184      10
 185 015c 48890500 		movq	%rax, ptr(%rip)
 185      000000
 186              	.L19:
 187 0163 488B3D00 		movq	ptr(%rip), %rdi
 187      000000
 188 016a 8A07     		movb	(%rdi), %al
 189 016c 3C3B     		cmpb	$59, %al
 190 016e 750C     		jne	.L159
 191 0170 48FFC7   		incq	%rdi
 192 0173 48893D00 		movq	%rdi, ptr(%rip)
 192      000000
 193 017a EBE7     		jmp	.L19
 194              	.L159:
 195 017c 3C72     		cmpb	$114, %al
 196 017e 7415     		je	.L21
 197 0180 3C77     		cmpb	$119, %al
 198 0182 0F849C03 		je	.L22
 198      0000
 199 0188 3C2B     		cmpb	$43, %al
 200 018a 0F85D308 		jne	.L117
 200      0000
 201 0190 E9960700 		jmp	.L160
 201      00
 202              	.L21:
 203 0195 488D6F01 		leaq	1(%rdi), %rbp
 204 0199 48892D00 		movq	%rbp, ptr(%rip)
 204      000000
 205 01a0 E8000000 		call	__errno_location
 205      00
 206 01a5 488D7424 		leaq	48(%rsp), %rsi
 206      30
 207 01aa 4989C4   		movq	%rax, %r12
 208 01ad C7000000 		movl	$0, (%rax)
 208      0000
 209 01b3 BA100000 		movl	$16, %edx
 209      00
 210 01b8 4889EF   		movq	%rbp, %rdi
 211 01bb E8000000 		call	strtoul
 211      00
 212 01c0 41833C24 		cmpl	$0, (%r12)
 212      00
 213 01c5 4989C6   		movq	%rax, %r14
 214 01c8 7411     		je	.L24
 215              	.L28:
 216 01ca 4531E4   		xorl	%r12d, %r12d
 217 01cd 4531FF   		xorl	%r15d, %r15d
 218 01d0 41BE0200 		movl	$2, %r14d
 218      0000
 219 01d6 E95E0500 		jmp	.L62
 219      00
 220              	.L24:
 221 01db 83F87F   		cmpl	$127, %eax
 222 01de 0F872403 		ja	.L98
 222      0000
 223 01e4 488B7C24 		movq	48(%rsp), %rdi
 223      30
 224 01e9 8A07     		movb	(%rdi), %al
 225 01eb 48893D00 		movq	%rdi, ptr(%rip)
 225      000000
 226 01f2 A8DF     		testb	$-33, %al
 227 01f4 7415     		je	.L26
 228 01f6 3C3B     		cmpb	$59, %al
 229 01f8 7411     		je	.L26
 230              	.L29:
 231 01fa 4531E4   		xorl	%r12d, %r12d
 232 01fd 4531FF   		xorl	%r15d, %r15d
 233 0200 41BE0500 		movl	$5, %r14d
 233      0000
 234 0206 E92E0500 		jmp	.L62
 234      00
 235              	.L26:
 236 020b 3C20     		cmpb	$32, %al
 237 020d 41BF0100 		movl	$1, %r15d
 237      0000
 238 0213 0F851609 		jne	.L27
 238      0000
 239 0219 488D7424 		leaq	48(%rsp), %rsi
 239      30
 240 021e 48FFC7   		incq	%rdi
 241 0221 41C70424 		movl	$0, (%r12)
 241      00000000 
 242 0229 BA100000 		movl	$16, %edx
 242      00
 243 022e 48893D00 		movq	%rdi, ptr(%rip)
 243      000000
 244 0235 E8000000 		call	strtoul
 244      00
 245 023a 41833C24 		cmpl	$0, (%r12)
 245      00
 246 023f 4989C5   		movq	%rax, %r13
 247 0242 4189C7   		movl	%eax, %r15d
 248 0245 7583     		jne	.L28
 249 0247 4C8B6424 		movq	48(%rsp), %r12
 249      30
 250 024c 418A0424 		movb	(%r12), %al
 251 0250 4C892500 		movq	%r12, ptr(%rip)
 251      000000
 252 0257 A8DF     		testb	$-33, %al
 253 0259 7404     		je	.L118
 254 025b 3C3B     		cmpb	$59, %al
 255 025d 759B     		jne	.L29
 256              	.L118:
 257 025f 3C20     		cmpb	$32, %al
 258 0261 0F85C808 		jne	.L27
 258      0000
 259 0267 498D4424 		leaq	1(%r12), %rax
 259      01
 260 026c 48890500 		movq	%rax, ptr(%rip)
 260      000000
 261 0273 418A4424 		movb	1(%r12), %al
 261      01
 262 0278 3C22     		cmpb	$34, %al
 263 027a 7408     		je	.L119
 264 027c 3C27     		cmpb	$39, %al
 265 027e 0F8576FF 		jne	.L29
 265      FFFF
 266              	.L119:
 267 0284 4983C402 		addq	$2, %r12
 268 0288 4C892500 		movq	%r12, ptr(%rip)
 268      000000
 269 028f 4C89E5   		movq	%r12, %rbp
 270              	.L32:
 271 0292 8A5500   		movb	0(%rbp), %dl
 272 0295 38D0     		cmpb	%dl, %al
 273 0297 740D     		je	.L33
 274 0299 84D2     		testb	%dl, %dl
 275 029b 0F846604 		je	.L107
 275      0000
 276 02a1 48FFC5   		incq	%rbp
 277 02a4 EBEC     		jmp	.L32
 278              	.L33:
 279 02a6 84C0     		testb	%al, %al
 280 02a8 0F845904 		je	.L107
 280      0000
 281 02ae 4889E8   		movq	%rbp, %rax
 282 02b1 4C29E0   		subq	%r12, %rax
 283 02b4 488D7801 		leaq	1(%rax), %rdi
 284 02b8 48894424 		movq	%rax, 8(%rsp)
 284      08
 285 02bd E8000000 		call	malloc
 285      00
 286 02c2 4885C0   		testq	%rax, %rax
 287 02c5 4989C7   		movq	%rax, %r15
 288 02c8 0F844704 		je	.L108
 288      0000
 289 02ce 4C39E5   		cmpq	%r12, %rbp
 290 02d1 0F844904 		je	.L109
 290      0000
 291 02d7 488B5424 		movq	8(%rsp), %rdx
 291      08
 292 02dc 4C89E6   		movq	%r12, %rsi
 293 02df 4889C7   		movq	%rax, %rdi
 294 02e2 E8000000 		call	strncpy
 294      00
 295 02e7 488B4424 		movq	8(%rsp), %rax
 295      08
 296 02ec 488D4D01 		leaq	1(%rbp), %rcx
 297 02f0 BE000000 		movl	$.LC3, %esi
 297      00
 298 02f5 4C89FF   		movq	%r15, %rdi
 299 02f8 48890D00 		movq	%rcx, ptr(%rip)
 299      000000
 300 02ff 41C60407 		movb	$0, (%r15,%rax)
 300      00
 301 0304 E8000000 		call	fopen
 301      00
 302 0309 4885C0   		testq	%rax, %rax
 303 030c 4989C4   		movq	%rax, %r12
 304 030f 0F840402 		je	.L103
 304      0000
 305 0315 4C89FF   		movq	%r15, %rdi
 306 0318 BD000001 		movl	$65536, %ebp
 306      00
 307 031d E8000000 		call	free
 307      00
 308 0322 488D7C24 		leaq	64(%rsp), %rdi
 308      40
 309 0327 31F6     		xorl	%esi, %esi
 310 0329 E8000000 		call	gettimeofday
 310      00
 311 032e 4181FD00 		cmpl	$65536, %r13d
 311      000100
 312 0335 488B3C24 		movq	(%rsp), %rdi
 313 0339 410FB6C6 		movzbl	%r14b, %eax
 314 033d 410F46ED 		cmovbe	%r13d, %ebp
 315 0341 4989D8   		movq	%rbx, %r8
 316 0344 31C9     		xorl	%ecx, %ecx
 317 0346 89EA     		movl	%ebp, %edx
 318 0348 89C6     		movl	%eax, %esi
 319 034a 89442408 		movl	%eax, 8(%rsp)
 320 034e E8000000 		call	flReadChannelAsyncSubmit
 320      00
 321 0353 85C0     		testl	%eax, %eax
 322 0355 741A     		je	.L35
 323              	.L38:
 324 0357 BE000000 		movl	$.LC4, %esi
 324      00
 325 035c 4889DF   		movq	%rbx, %rdi
 326 035f 31ED     		xorl	%ebp, %ebp
 327 0361 E8000000 		call	errPrefix
 327      00
 328 0366 41BF0100 		movl	$1, %r15d
 328      0000
 329 036c E91F0100 		jmp	.L36
 329      00
 330              	.L35:
 331 0371 4589EF   		movl	%r13d, %r15d
 332 0374 4129EF   		subl	%ebp, %r15d
 333 0377 31ED     		xorl	%ebp, %ebp
 334              	.L37:
 335 0379 4585FF   		testl	%r15d, %r15d
 336 037c 0F84B600 		je	.L161
 336      0000
 337 0382 4181FF00 		cmpl	$65536, %r15d
 337      000100
 338 0389 41B90000 		movl	$65536, %r9d
 338      0100
 339 038f 8B742408 		movl	8(%rsp), %esi
 340 0393 488B3C24 		movq	(%rsp), %rdi
 341 0397 450F46CF 		cmovbe	%r15d, %r9d
 342 039b 4989D8   		movq	%rbx, %r8
 343 039e 31C9     		xorl	%ecx, %ecx
 344 03a0 4489CA   		movl	%r9d, %edx
 345 03a3 44894C24 		movl	%r9d, 28(%rsp)
 345      1C
 346 03a8 E8000000 		call	flReadChannelAsyncSubmit
 346      00
 347 03ad 85C0     		testl	%eax, %eax
 348 03af 75A6     		jne	.L38
 349 03b1 448B4C24 		movl	28(%rsp), %r9d
 349      1C
 350 03b6 BE000000 		movl	$.LC5, %esi
 350      00
 351 03bb BF010000 		movl	$1, %edi
 351      00
 352 03c0 4529CF   		subl	%r9d, %r15d
 353 03c3 E8000000 		call	__printf_chk
 353      00
 354 03c8 488D4C24 		leaq	44(%rsp), %rcx
 354      2C
 355 03cd 488B3C24 		movq	(%rsp), %rdi
 356 03d1 488D7424 		leaq	56(%rsp), %rsi
 356      38
 357 03d6 4989D8   		movq	%rbx, %r8
 358 03d9 4889CA   		movq	%rcx, %rdx
 359 03dc E8000000 		call	flReadChannelAsyncAwait
 359      00
 360 03e1 85C0     		testl	%eax, %eax
 361 03e3 0F856EFF 		jne	.L38
 361      FFFF
 362 03e9 8B54242C 		movl	44(%rsp), %edx
 363 03ed 488B7C24 		movq	56(%rsp), %rdi
 363      38
 364 03f2 4C89E1   		movq	%r12, %rcx
 365 03f5 BE010000 		movl	$1, %esi
 365      00
 366 03fa E8000000 		call	fwrite
 366      00
 367 03ff 3B44242C 		cmpl	44(%rsp), %eax
 368 0403 89C2     		movl	%eax, %edx
 369 0405 7417     		je	.L39
 370              	.L43:
 371 0407 BE000000 		movl	$.LC4, %esi
 371      00
 372 040c 4889DF   		movq	%rbx, %rdi
 373 040f 31ED     		xorl	%ebp, %ebp
 374 0411 E8000000 		call	errPrefix
 374      00
 375 0416 41BF0B00 		movl	$11, %r15d
 375      0000
 376 041c EB72     		jmp	.L36
 377              	.L39:
 378 041e 488B4424 		movq	56(%rsp), %rax
 378      38
 379              	.L40:
 380 0423 FFCA     		decl	%edx
 381 0425 83FAFF   		cmpl	$-1, %edx
 382 0428 0F844BFF 		je	.L37
 382      FFFF
 383 042e 0FB608   		movzbl	(%rax), %ecx
 384 0431 48FFC0   		incq	%rax
 385 0434 01CD     		addl	%ecx, %ebp
 386 0436 EBEB     		jmp	.L40
 387              	.L161:
 388 0438 488D4C24 		leaq	44(%rsp), %rcx
 388      2C
 389 043d 488B3C24 		movq	(%rsp), %rdi
 390 0441 488D7424 		leaq	56(%rsp), %rsi
 390      38
 391 0446 4989D8   		movq	%rbx, %r8
 392 0449 4889CA   		movq	%rcx, %rdx
 393 044c E8000000 		call	flReadChannelAsyncAwait
 393      00
 394 0451 85C0     		testl	%eax, %eax
 395 0453 0F85FEFE 		jne	.L38
 395      FFFF
 396 0459 8B54242C 		movl	44(%rsp), %edx
 397 045d 488B7C24 		movq	56(%rsp), %rdi
 397      38
 398 0462 4C89E1   		movq	%r12, %rcx
 399 0465 BE010000 		movl	$1, %esi
 399      00
 400 046a E8000000 		call	fwrite
 400      00
 401 046f 3B44242C 		cmpl	44(%rsp), %eax
 402 0473 89C2     		movl	%eax, %edx
 403 0475 7590     		jne	.L43
 404 0477 488B4424 		movq	56(%rsp), %rax
 404      38
 405              	.L44:
 406 047c FFCA     		decl	%edx
 407 047e 83FAFF   		cmpl	$-1, %edx
 408 0481 740A     		je	.L162
 409 0483 0FB608   		movzbl	(%rax), %ecx
 410 0486 48FFC0   		incq	%rax
 411 0489 01CD     		addl	%ecx, %ebp
 412 048b EBEF     		jmp	.L44
 413              	.L162:
 414 048d 4531FF   		xorl	%r15d, %r15d
 415              	.L36:
 416 0490 488D7C24 		leaq	80(%rsp), %rdi
 416      50
 417 0495 31F6     		xorl	%esi, %esi
 418 0497 E8000000 		call	gettimeofday
 418      00
 419 049c 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 419      000000
 420 04a3 0F844C02 		je	.L63
 420      0000
 421 04a9 48694424 		imulq	$1000000, 80(%rsp), %rax
 421      5040420F 
 421      00
 422 04b2 48695424 		imulq	$1000000, 64(%rsp), %rdx
 422      4040420F 
 422      00
 423 04bb 0FB7CD   		movzwl	%bp, %ecx
 424 04be 4589F0   		movl	%r14d, %r8d
 425 04c1 BE000000 		movl	$.LC8, %esi
 425      00
 426 04c6 BF010000 		movl	$1, %edi
 426      00
 427 04cb 48034424 		addq	88(%rsp), %rax
 427      58
 428 04d0 48035424 		addq	72(%rsp), %rdx
 428      48
 429 04d5 4829D0   		subq	%rdx, %rax
 430 04d8 4489EA   		movl	%r13d, %edx
 431 04db F2480F2A 		cvtsi2sdq	%rax, %xmm1
 431      C8
 432 04e0 4489E8   		movl	%r13d, %eax
 433 04e3 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 433      C0
 434 04e8 B001     		movb	$1, %al
 435 04ea F20F5E0D 		divsd	.LC6(%rip), %xmm1
 435      00000000 
 436 04f2 F20F590D 		mulsd	.LC7(%rip), %xmm1
 436      00000000 
 437 04fa F20F5EC1 		divsd	%xmm1, %xmm0
 438 04fe E8000000 		call	__printf_chk
 438      00
 439 0503 E9ED0100 		jmp	.L63
 439      00
 440              	.L98:
 441 0508 4531E4   		xorl	%r12d, %r12d
 442 050b 4531FF   		xorl	%r15d, %r15d
 443 050e 41BE0300 		movl	$3, %r14d
 443      0000
 444 0514 E9200200 		jmp	.L62
 444      00
 445              	.L103:
 446 0519 41BE0B00 		movl	$11, %r14d
 446      0000
 447 051f E9150200 		jmp	.L62
 447      00
 448              	.L22:
 449 0524 488D6F01 		leaq	1(%rdi), %rbp
 450 0528 48C74424 		movq	$1, 48(%rsp)
 450      30010000 
 450      00
 451 0531 48892D00 		movq	%rbp, ptr(%rip)
 451      000000
 452 0538 E8000000 		call	__errno_location
 452      00
 453 053d 488D7424 		leaq	56(%rsp), %rsi
 453      38
 454 0542 4989C4   		movq	%rax, %r12
 455 0545 C7000000 		movl	$0, (%rax)
 455      0000
 456 054b BA100000 		movl	$16, %edx
 456      00
 457 0550 4889EF   		movq	%rbp, %rdi
 458 0553 E8000000 		call	strtoul
 458      00
 459 0558 41833C24 		cmpl	$0, (%r12)
 459      00
 460 055d 4989C5   		movq	%rax, %r13
 461 0560 0F857503 		jne	.L105
 461      0000
 462 0566 4883F87F 		cmpq	$127, %rax
 463 056a 0F877F03 		ja	.L106
 463      0000
 464 0570 488B7424 		movq	56(%rsp), %rsi
 464      38
 465 0575 803E20   		cmpb	$32, (%rsi)
 466 0578 48893500 		movq	%rsi, ptr(%rip)
 466      000000
 467 057f 0F85DE04 		jne	.L117
 467      0000
 468 0585 8A4601   		movb	1(%rsi), %al
 469 0588 4C8D7601 		leaq	1(%rsi), %r14
 470 058c 4C893500 		movq	%r14, ptr(%rip)
 470      000000
 471 0593 3C22     		cmpb	$34, %al
 472 0595 410F94C7 		sete	%r15b
 473 0599 3C27     		cmpb	$39, %al
 474 059b 0F94C2   		sete	%dl
 475 059e 4108D7   		orb	%dl, %r15b
 476 05a1 0F849A01 		je	.L58
 476      0000
 477 05a7 488D6E02 		leaq	2(%rsi), %rbp
 478 05ab 66C74424 		movw	$0, 44(%rsp)
 478      2C0000
 479 05b2 48892D00 		movq	%rbp, ptr(%rip)
 479      000000
 480 05b9 4989EE   		movq	%rbp, %r14
 481              	.L59:
 482 05bc 418A16   		movb	(%r14), %dl
 483 05bf 38D0     		cmpb	%dl, %al
 484 05c1 740D     		je	.L60
 485 05c3 84D2     		testb	%dl, %dl
 486 05c5 0F843C01 		je	.L107
 486      0000
 487 05cb 49FFC6   		incq	%r14
 488 05ce EBEC     		jmp	.L59
 489              	.L60:
 490 05d0 84C0     		testb	%al, %al
 491 05d2 0F842F01 		je	.L107
 491      0000
 492 05d8 4D89F4   		movq	%r14, %r12
 493 05db 4929EC   		subq	%rbp, %r12
 494 05de 498D7C24 		leaq	1(%r12), %rdi
 494      01
 495 05e3 E8000000 		call	malloc
 495      00
 496 05e8 4885C0   		testq	%rax, %rax
 497 05eb 4989C7   		movq	%rax, %r15
 498 05ee 0F842101 		je	.L108
 498      0000
 499 05f4 4939EE   		cmpq	%rbp, %r14
 500 05f7 0F842301 		je	.L109
 500      0000
 501 05fd 4C89E2   		movq	%r12, %rdx
 502 0600 4889EE   		movq	%rbp, %rsi
 503 0603 4889C7   		movq	%rax, %rdi
 504 0606 E8000000 		call	strncpy
 504      00
 505 060b 49FFC6   		incq	%r14
 506 060e 43C60427 		movb	$0, (%r15,%r12)
 506      00
 507 0613 BE000000 		movl	$.LC9, %esi
 507      00
 508 0618 4C89FF   		movq	%r15, %rdi
 509 061b 4C893500 		movq	%r14, ptr(%rip)
 509      000000
 510 0622 E8000000 		call	fopen
 510      00
 511 0627 4885C0   		testq	%rax, %rax
 512 062a 4989C4   		movq	%rax, %r12
 513 062d 0F84F800 		je	.L110
 513      0000
 514 0633 4C89FF   		movq	%r15, %rdi
 515 0636 E8000000 		call	free
 515      00
 516 063b 488D7C24 		leaq	64(%rsp), %rdi
 516      40
 517 0640 31F6     		xorl	%esi, %esi
 518 0642 E8000000 		call	gettimeofday
 518      00
 519 0647 488B3C24 		movq	(%rsp), %rdi
 520 064b 4C8D4424 		leaq	44(%rsp), %r8
 520      2C
 521 0650 488D4C24 		leaq	48(%rsp), %rcx
 521      30
 522 0655 4989D9   		movq	%rbx, %r9
 523 0658 4C89E2   		movq	%r12, %rdx
 524 065b 4489EE   		movl	%r13d, %esi
 525 065e E89DF9FF 		call	doWrite
 525      FF
 526 0663 488D7C24 		leaq	80(%rsp), %rdi
 526      50
 527 0668 31F6     		xorl	%esi, %esi
 528 066a 4189C7   		movl	%eax, %r15d
 529 066d E8000000 		call	gettimeofday
 529      00
 530 0672 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 530      000000
 531 0679 747A     		je	.L63
 532 067b 48694424 		imulq	$1000000, 80(%rsp), %rax
 532      5040420F 
 532      00
 533 0684 48694C24 		imulq	$1000000, 64(%rsp), %rcx
 533      4040420F 
 533      00
 534 068d 488B5424 		movq	48(%rsp), %rdx
 534      30
 535 0692 48034424 		addq	88(%rsp), %rax
 535      58
 536 0697 48034C24 		addq	72(%rsp), %rcx
 536      48
 537 069c 4829C8   		subq	%rcx, %rax
 538 069f 4885D2   		testq	%rdx, %rdx
 539 06a2 F2480F2A 		cvtsi2sdq	%rax, %xmm1
 539      C8
 540 06a7 7807     		js	.L64
 541 06a9 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 541      C2
 542 06ae EB18     		jmp	.L65
 543              	.L64:
 544 06b0 4889D0   		movq	%rdx, %rax
 545 06b3 4889D1   		movq	%rdx, %rcx
 546 06b6 48D1E8   		shrq	%rax
 547 06b9 83E101   		andl	$1, %ecx
 548 06bc 4809C8   		orq	%rcx, %rax
 549 06bf F2480F2A 		cvtsi2sdq	%rax, %xmm0
 549      C0
 550 06c4 F20F58C0 		addsd	%xmm0, %xmm0
 551              	.L65:
 552 06c8 F20F5E0D 		divsd	.LC6(%rip), %xmm1
 552      00000000 
 553 06d0 0FB74C24 		movzwl	44(%rsp), %ecx
 553      2C
 554 06d5 4D89E8   		movq	%r13, %r8
 555 06d8 BE000000 		movl	$.LC10, %esi
 555      00
 556 06dd BF010000 		movl	$1, %edi
 556      00
 557 06e2 B001     		movb	$1, %al
 558 06e4 F20F590D 		mulsd	.LC7(%rip), %xmm1
 558      00000000 
 559 06ec F20F5EC1 		divsd	%xmm1, %xmm0
 560 06f0 E8000000 		call	__printf_chk
 560      00
 561              	.L63:
 562 06f5 4585FF   		testl	%r15d, %r15d
 563 06f8 7539     		jne	.L111
 564 06fa 4C89E7   		movq	%r12, %rdi
 565 06fd E8000000 		call	fclose
 565      00
 566 0702 E9170300 		jmp	.L55
 566      00
 567              	.L107:
 568 0707 4531E4   		xorl	%r12d, %r12d
 569 070a 4531FF   		xorl	%r15d, %r15d
 570 070d 41BE0600 		movl	$6, %r14d
 570      0000
 571 0713 EB24     		jmp	.L62
 572              	.L108:
 573 0715 4531E4   		xorl	%r12d, %r12d
 574 0718 41BE0700 		movl	$7, %r14d
 574      0000
 575 071e EB19     		jmp	.L62
 576              	.L109:
 577 0720 4531E4   		xorl	%r12d, %r12d
 578 0723 41BE0800 		movl	$8, %r14d
 578      0000
 579 0729 EB0E     		jmp	.L62
 580              	.L110:
 581 072b 41BE0A00 		movl	$10, %r14d
 581      0000
 582 0731 EB06     		jmp	.L62
 583              	.L111:
 584 0733 4589FE   		movl	%r15d, %r14d
 585 0736 4531FF   		xorl	%r15d, %r15d
 586              	.L62:
 587 0739 4531ED   		xorl	%r13d, %r13d
 588 073c E9310300 		jmp	.L18
 588      00
 589              	.L58:
 590 0741 8D50D0   		leal	-48(%rax), %edx
 591 0744 80FA09   		cmpb	$9, %dl
 592 0747 760E     		jbe	.L67
 593 0749 83E0DF   		andl	$-33, %eax
 594 074c 83E841   		subl	$65, %eax
 595 074f 3C05     		cmpb	$5, %al
 596 0751 0F870C03 		ja	.L117
 596      0000
 597              	.L67:
 598 0757 4883C602 		addq	$2, %rsi
 599              	.L69:
 600 075b 8A06     		movb	(%rsi), %al
 601 075d 8D50D0   		leal	-48(%rax), %edx
 602 0760 80FA09   		cmpb	$9, %dl
 603 0763 7705     		ja	.L163
 604              	.L70:
 605 0765 48FFC6   		incq	%rsi
 606 0768 EBF1     		jmp	.L69
 607              	.L163:
 608 076a 83E0DF   		andl	$-33, %eax
 609 076d 83E841   		subl	$65, %eax
 610 0770 3C05     		cmpb	$5, %al
 611 0772 76F1     		jbe	.L70
 612 0774 4C29F6   		subq	%r14, %rsi
 613 0777 40F6C601 		testb	$1, %sil
 614 077b 0F858201 		jne	.L112
 614      0000
 615 0781 48D1EE   		shrq	%rsi
 616 0784 4889F7   		movq	%rsi, %rdi
 617 0787 4889F5   		movq	%rsi, %rbp
 618 078a 48897424 		movq	%rsi, 48(%rsp)
 618      30
 619 078f E8000000 		call	malloc
 619      00
 620 0794 31C9     		xorl	%ecx, %ecx
 621 0796 4989C4   		movq	%rax, %r12
 622              	.L71:
 623 0799 4839E9   		cmpq	%rbp, %rcx
 624 079c 744F     		je	.L164
 625 079e 418A044E 		movb	(%r14,%rcx,2), %al
 626 07a2 8D50D0   		leal	-48(%rax), %edx
 627 07a5 80FA09   		cmpb	$9, %dl
 628 07a8 7618     		jbe	.L72
 629 07aa 8D509F   		leal	-97(%rax), %edx
 630 07ad 80FA05   		cmpb	$5, %dl
 631 07b0 7705     		ja	.L73
 632 07b2 8D50A9   		leal	-87(%rax), %edx
 633 07b5 EB0B     		jmp	.L72
 634              	.L73:
 635 07b7 8D50BF   		leal	-65(%rax), %edx
 636 07ba 80FA05   		cmpb	$5, %dl
 637 07bd 7726     		ja	.L74
 638 07bf 8D50C9   		leal	-55(%rax), %edx
 639              	.L72:
 640 07c2 418A744E 		movb	1(%r14,%rcx,2), %sil
 640      01
 641 07c7 8D46D0   		leal	-48(%rsi), %eax
 642 07ca 3C09     		cmpb	$9, %al
 643 07cc 760E     		jbe	.L76
 644 07ce 8D469F   		leal	-97(%rsi), %eax
 645 07d1 3C05     		cmpb	$5, %al
 646 07d3 0F87E603 		ja	.L75
 646      0000
 647 07d9 8D46A9   		leal	-87(%rsi), %eax
 648              	.L76:
 649 07dc C1E204   		sall	$4, %edx
 650 07df 09D0     		orl	%edx, %eax
 651 07e1 4188040C 		movb	%al, (%r12,%rcx)
 652              	.L74:
 653 07e5 48FFC1   		incq	%rcx
 654 07e8 41B701   		movb	$1, %r15b
 655 07eb EBAC     		jmp	.L71
 656              	.L164:
 657 07ed 4801C9   		addq	%rcx, %rcx
 658 07f0 4901CE   		addq	%rcx, %r14
 659 07f3 4584FF   		testb	%r15b, %r15b
 660 07f6 7407     		je	.L78
 661 07f8 4C893500 		movq	%r14, ptr(%rip)
 661      000000
 662              	.L78:
 663 07ff 488D7C24 		leaq	64(%rsp), %rdi
 663      40
 664 0804 31F6     		xorl	%esi, %esi
 665 0806 E8000000 		call	gettimeofday
 665      00
 666 080b 488B5424 		movq	48(%rsp), %rdx
 666      30
 667 0810 488B3C24 		movq	(%rsp), %rdi
 668 0814 4989D8   		movq	%rbx, %r8
 669 0817 4C89E1   		movq	%r12, %rcx
 670 081a 4489EE   		movl	%r13d, %esi
 671 081d E8000000 		call	flWriteChannel
 671      00
 672 0822 488D7C24 		leaq	80(%rsp), %rdi
 672      50
 673 0827 31F6     		xorl	%esi, %esi
 674 0829 89C5     		movl	%eax, %ebp
 675 082b E8000000 		call	gettimeofday
 675      00
 676 0830 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 676      000000
 677 0837 0F848D00 		je	.L79
 677      0000
 678 083d 488B5424 		movq	48(%rsp), %rdx
 678      30
 679 0842 31C0     		xorl	%eax, %eax
 680 0844 31C9     		xorl	%ecx, %ecx
 681              	.L80:
 682 0846 4839C2   		cmpq	%rax, %rdx
 683 0849 740C     		je	.L165
 684 084b 410FB634 		movzbl	(%r12,%rax), %esi
 684      04
 685 0850 48FFC0   		incq	%rax
 686 0853 01F1     		addl	%esi, %ecx
 687 0855 EBEF     		jmp	.L80
 688              	.L165:
 689 0857 48694424 		imulq	$1000000, 80(%rsp), %rax
 689      5040420F 
 689      00
 690 0860 48697424 		imulq	$1000000, 64(%rsp), %rsi
 690      4040420F 
 690      00
 691 0869 48034424 		addq	88(%rsp), %rax
 691      58
 692 086e 48037424 		addq	72(%rsp), %rsi
 692      48
 693 0873 4829F0   		subq	%rsi, %rax
 694 0876 4885D2   		testq	%rdx, %rdx
 695 0879 F2480F2A 		cvtsi2sdq	%rax, %xmm1
 695      C8
 696 087e 7807     		js	.L82
 697 0880 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 697      C2
 698 0885 EB18     		jmp	.L83
 699              	.L82:
 700 0887 4889D0   		movq	%rdx, %rax
 701 088a 4889D6   		movq	%rdx, %rsi
 702 088d 48D1E8   		shrq	%rax
 703 0890 83E601   		andl	$1, %esi
 704 0893 4809F0   		orq	%rsi, %rax
 705 0896 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 705      C0
 706 089b F20F58C0 		addsd	%xmm0, %xmm0
 707              	.L83:
 708 089f F20F5E0D 		divsd	.LC6(%rip), %xmm1
 708      00000000 
 709 08a7 0FB7C9   		movzwl	%cx, %ecx
 710 08aa 4D89E8   		movq	%r13, %r8
 711 08ad BE000000 		movl	$.LC10, %esi
 711      00
 712 08b2 BF010000 		movl	$1, %edi
 712      00
 713 08b7 B001     		movb	$1, %al
 714 08b9 F20F590D 		mulsd	.LC7(%rip), %xmm1
 714      00000000 
 715 08c1 F20F5EC1 		divsd	%xmm1, %xmm0
 716 08c5 E8000000 		call	__printf_chk
 716      00
 717              	.L79:
 718 08ca 85ED     		testl	%ebp, %ebp
 719 08cc 7549     		jne	.L113
 720 08ce 4C89E7   		movq	%r12, %rdi
 721 08d1 E8000000 		call	free
 721      00
 722 08d6 E9430100 		jmp	.L55
 722      00
 723              	.L105:
 724 08db 4531E4   		xorl	%r12d, %r12d
 725 08de 4531FF   		xorl	%r15d, %r15d
 726 08e1 4531ED   		xorl	%r13d, %r13d
 727 08e4 41BE0200 		movl	$2, %r14d
 727      0000
 728 08ea E9830100 		jmp	.L18
 728      00
 729              	.L106:
 730 08ef 4531E4   		xorl	%r12d, %r12d
 731 08f2 4531FF   		xorl	%r15d, %r15d
 732 08f5 4531ED   		xorl	%r13d, %r13d
 733 08f8 41BE0300 		movl	$3, %r14d
 733      0000
 734 08fe E96F0100 		jmp	.L18
 734      00
 735              	.L112:
 736 0903 4531E4   		xorl	%r12d, %r12d
 737 0906 4531FF   		xorl	%r15d, %r15d
 738 0909 4531ED   		xorl	%r13d, %r13d
 739 090c 41BE0900 		movl	$9, %r14d
 739      0000
 740 0912 E95B0100 		jmp	.L18
 740      00
 741              	.L113:
 742 0917 4D89E5   		movq	%r12, %r13
 743 091a 4531FF   		xorl	%r15d, %r15d
 744 091d 4531E4   		xorl	%r12d, %r12d
 745 0920 41BE0100 		movl	$1, %r14d
 745      0000
 746 0926 E9470100 		jmp	.L18
 746      00
 747              	.L160:
 748 092b 488D6F01 		leaq	1(%rdi), %rbp
 749 092f 48892D00 		movq	%rbp, ptr(%rip)
 749      000000
 750 0936 E8000000 		call	__errno_location
 750      00
 751 093b 488D7424 		leaq	56(%rsp), %rsi
 751      38
 752 0940 4989C4   		movq	%rax, %r12
 753 0943 C7000000 		movl	$0, (%rax)
 753      0000
 754 0949 BA100000 		movl	$16, %edx
 754      00
 755 094e 4889EF   		movq	%rbp, %rdi
 756 0951 E8000000 		call	strtoul
 756      00
 757 0956 41833C24 		cmpl	$0, (%r12)
 757      00
 758 095b 753D     		jne	.L114
 759 095d 3DFF0000 		cmpl	$255, %eax
 759      00
 760 0962 773E     		ja	.L115
 761 0964 488B5424 		movq	56(%rsp), %rdx
 761      38
 762 0969 48891500 		movq	%rdx, ptr(%rip)
 762      000000
 763 0970 8A12     		movb	(%rdx), %dl
 764 0972 84D2     		testb	%dl, %dl
 765 0974 7405     		je	.L120
 766 0976 80FA3B   		cmpb	$59, %dl
 767 0979 752F     		jne	.L116
 768              	.L120:
 769 097b 488B3C24 		movq	(%rsp), %rdi
 770 097f 0FB6F0   		movzbl	%al, %esi
 771 0982 4889DA   		movq	%rbx, %rdx
 772 0985 E8000000 		call	flSelectConduit
 772      00
 773 098a 85C0     		testl	%eax, %eax
 774 098c 0F848C00 		je	.L55
 774      0000
 775 0992 41BE0100 		movl	$1, %r14d
 775      0000
 776 0998 EB16     		jmp	.L84
 777              	.L114:
 778 099a 41BE0200 		movl	$2, %r14d
 778      0000
 779 09a0 EB0E     		jmp	.L84
 780              	.L115:
 781 09a2 41BE0400 		movl	$4, %r14d
 781      0000
 782 09a8 EB06     		jmp	.L84
 783              	.L116:
 784 09aa 41BE0500 		movl	$5, %r14d
 784      0000
 785              	.L84:
 786 09b0 4531E4   		xorl	%r12d, %r12d
 787 09b3 4531FF   		xorl	%r15d, %r15d
 788 09b6 4531ED   		xorl	%r13d, %r13d
 789 09b9 E9B40000 		jmp	.L18
 789      00
 790              	.L167:
 791 09be 48694424 		imulq	$1000000, 80(%rsp), %rax
 791      5040420F 
 791      00
 792 09c7 48695424 		imulq	$1000000, 64(%rsp), %rdx
 792      4040420F 
 792      00
 793 09d0 F2480F2A 		cvtsi2sdq	%rbp, %xmm0
 793      C5
 794 09d5 0FB7C9   		movzwl	%cx, %ecx
 795 09d8 4589F0   		movl	%r14d, %r8d
 796 09db BE000000 		movl	$.LC8, %esi
 796      00
 797 09e0 BF010000 		movl	$1, %edi
 797      00
 798 09e5 48034424 		addq	88(%rsp), %rax
 798      58
 799 09ea 48035424 		addq	72(%rsp), %rdx
 799      48
 800 09ef 4829D0   		subq	%rdx, %rax
 801 09f2 4489FA   		movl	%r15d, %edx
 802 09f5 F2480F2A 		cvtsi2sdq	%rax, %xmm1
 802      C8
 803 09fa B001     		movb	$1, %al
 804 09fc F20F5E0D 		divsd	.LC6(%rip), %xmm1
 804      00000000 
 805 0a04 F20F590D 		mulsd	.LC7(%rip), %xmm1
 805      00000000 
 806 0a0c F20F5EC1 		divsd	%xmm1, %xmm0
 807 0a10 E8000000 		call	__printf_chk
 807      00
 808              	.L50:
 809 0a15 4585ED   		testl	%r13d, %r13d
 810 0a18 0F859001 		jne	.L92
 810      0000
 811              	.L55:
 812 0a1e 488B0500 		movq	ptr(%rip), %rax
 812      000000
 813 0a25 8A00     		movb	(%rax), %al
 814 0a27 3C3B     		cmpb	$59, %al
 815 0a29 0F8434F7 		je	.L19
 815      FFFF
 816 0a2f 84C0     		testb	%al, %al
 817 0a31 7530     		jne	.L117
 818 0a33 488B5424 		movq	104(%rsp), %rdx
 818      68
 819 0a38 488B7424 		movq	96(%rsp), %rsi
 819      60
 820 0a3d 31FF     		xorl	%edi, %edi
 821 0a3f 4531E4   		xorl	%r12d, %r12d
 822 0a42 4531FF   		xorl	%r15d, %r15d
 823 0a45 4531ED   		xorl	%r13d, %r13d
 824 0a48 4531F6   		xorl	%r14d, %r14d
 825 0a4b E8000000 		call	dump
 825      00
 826 0a50 EB20     		jmp	.L18
 827              	.L96:
 828 0a52 4531E4   		xorl	%r12d, %r12d
 829 0a55 4531FF   		xorl	%r15d, %r15d
 830 0a58 4531ED   		xorl	%r13d, %r13d
 831 0a5b 41BE0100 		movl	$1, %r14d
 831      0000
 832 0a61 EB0F     		jmp	.L18
 833              	.L117:
 834 0a63 4531E4   		xorl	%r12d, %r12d
 835 0a66 4531FF   		xorl	%r15d, %r15d
 836 0a69 4531ED   		xorl	%r13d, %r13d
 837 0a6c 41BE0500 		movl	$5, %r14d
 837      0000
 838              	.L18:
 839 0a72 488D7C24 		leaq	96(%rsp), %rdi
 839      60
 840 0a77 E8000000 		call	bufDestroy
 840      00
 841 0a7c 4D85E4   		testq	%r12, %r12
 842 0a7f 7408     		je	.L88
 843 0a81 4C89E7   		movq	%r12, %rdi
 844 0a84 E8000000 		call	fclose
 844      00
 845              	.L88:
 846 0a89 4C89FF   		movq	%r15, %rdi
 847 0a8c E8000000 		call	free
 847      00
 848 0a91 4C89EF   		movq	%r13, %rdi
 849 0a94 E8000000 		call	free
 849      00
 850 0a99 4183FE01 		cmpl	$1, %r14d
 851 0a9d 7671     		jbe	.L89
 852 0a9f 4C8B0500 		movq	ptr(%rip), %r8
 852      000000
 853 0aa6 4489F0   		movl	%r14d, %eax
 854 0aa9 4C2B4424 		subq	16(%rsp), %r8
 854      10
 855 0aae 488B0CC5 		movq	errMessages(,%rax,8), %rcx
 855      00000000 
 856 0ab6 4C8B4C24 		movq	16(%rsp), %r9
 856      10
 857 0abb BA000000 		movl	$.LC11, %edx
 857      00
 858 0ac0 488B3D00 		movq	stderr(%rip), %rdi
 858      000000
 859 0ac7 BE010000 		movl	$1, %esi
 859      00
 860 0acc 31C0     		xorl	%eax, %eax
 861 0ace 31DB     		xorl	%ebx, %ebx
 862 0ad0 4489C5   		movl	%r8d, %ebp
 863 0ad3 E8000000 		call	__fprintf_chk
 863      00
 864              	.L90:
 865 0ad8 39EB     		cmpl	%ebp, %ebx
 866 0ada 7D1C     		jge	.L166
 867 0adc 488B3D00 		movq	stderr(%rip), %rdi
 867      000000
 868 0ae3 BA000000 		movl	$.LC12, %edx
 868      00
 869 0ae8 BE010000 		movl	$1, %esi
 869      00
 870 0aed 31C0     		xorl	%eax, %eax
 871 0aef FFC3     		incl	%ebx
 872 0af1 E8000000 		call	__fprintf_chk
 872      00
 873 0af6 EBE0     		jmp	.L90
 874              	.L166:
 875 0af8 488B3D00 		movq	stderr(%rip), %rdi
 875      000000
 876 0aff BA000000 		movl	$.LC13, %edx
 876      00
 877 0b04 BE010000 		movl	$1, %esi
 877      00
 878 0b09 31C0     		xorl	%eax, %eax
 879 0b0b E8000000 		call	__fprintf_chk
 879      00
 880              	.L89:
 881 0b10 488B9C24 		movq	136(%rsp), %rbx
 881      88000000 
 882 0b18 6448331C 		xorq	%fs:40, %rbx
 882      25280000 
 882      00
 883 0b21 4489F0   		movl	%r14d, %eax
 884 0b24 0F84A800 		je	.L95
 884      0000
 885 0b2a E8000000 		call	__stack_chk_fail
 885      00
 886              	.L27:
 887 0b2f 4489FD   		movl	%r15d, %ebp
 888 0b32 488D7C24 		leaq	96(%rsp), %rdi
 888      60
 889 0b37 31F6     		xorl	%esi, %esi
 890 0b39 4889D9   		movq	%rbx, %rcx
 891 0b3c 4889EA   		movq	%rbp, %rdx
 892 0b3f 4C8B6424 		movq	104(%rsp), %r12
 892      68
 893 0b44 E8000000 		call	bufAppendConst
 893      00
 894 0b49 85C0     		testl	%eax, %eax
 895 0b4b 7561     		jne	.L92
 896 0b4d 488D7C24 		leaq	64(%rsp), %rdi
 896      40
 897 0b52 31F6     		xorl	%esi, %esi
 898 0b54 E8000000 		call	gettimeofday
 898      00
 899 0b59 4C89E1   		movq	%r12, %rcx
 900 0b5c 48034C24 		addq	96(%rsp), %rcx
 900      60
 901 0b61 488B3C24 		movq	(%rsp), %rdi
 902 0b65 410FB6F6 		movzbl	%r14b, %esi
 903 0b69 4989D8   		movq	%rbx, %r8
 904 0b6c 4889EA   		movq	%rbp, %rdx
 905 0b6f E8000000 		call	flReadChannel
 905      00
 906 0b74 488D7C24 		leaq	80(%rsp), %rdi
 906      50
 907 0b79 31F6     		xorl	%esi, %esi
 908 0b7b 4189C5   		movl	%eax, %r13d
 909 0b7e E8000000 		call	gettimeofday
 909      00
 910 0b83 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 910      000000
 911 0b8a 0F8485FE 		je	.L50
 911      FFFF
 912 0b90 4C036424 		addq	96(%rsp), %r12
 912      60
 913 0b95 31C0     		xorl	%eax, %eax
 914 0b97 31C9     		xorl	%ecx, %ecx
 915              	.L51:
 916 0b99 4839C5   		cmpq	%rax, %rbp
 917 0b9c 0F841CFE 		je	.L167
 917      FFFF
 918 0ba2 410FB614 		movzbl	(%r12,%rax), %edx
 918      04
 919 0ba7 48FFC0   		incq	%rax
 920 0baa 01D1     		addl	%edx, %ecx
 921 0bac EBEB     		jmp	.L51
 922              	.L92:
 923 0bae 4531E4   		xorl	%r12d, %r12d
 924 0bb1 4531FF   		xorl	%r15d, %r15d
 925 0bb4 41BE0100 		movl	$1, %r14d
 925      0000
 926 0bba E97AFBFF 		jmp	.L62
 926      FF
 927              	.L75:
 928 0bbf 8D46BF   		leal	-65(%rsi), %eax
 929 0bc2 3C05     		cmpb	$5, %al
 930 0bc4 0F871BFC 		ja	.L74
 930      FFFF
 931 0bca 8D46C9   		leal	-55(%rsi), %eax
 932 0bcd E90AFCFF 		jmp	.L76
 932      FF
 933              	.L95:
 934 0bd2 4881C498 		addq	$152, %rsp
 934      000000
 935              		.cfi_def_cfa_offset 56
 936 0bd9 5B       		popq	%rbx
 937              		.cfi_def_cfa_offset 48
 938 0bda 5D       		popq	%rbp
 939              		.cfi_def_cfa_offset 40
 940 0bdb 415C     		popq	%r12
 941              		.cfi_def_cfa_offset 32
 942 0bdd 415D     		popq	%r13
 943              		.cfi_def_cfa_offset 24
 944 0bdf 415E     		popq	%r14
 945              		.cfi_def_cfa_offset 16
 946 0be1 415F     		popq	%r15
 947              		.cfi_def_cfa_offset 8
 948 0be3 C3       		ret
 949              		.cfi_endproc
 950              	.LFE66:
 952              	.LCOLDE14:
 953              	.LHOTE14:
 954              	.LCOLDB15:
 955              		.text
 956              	.LHOTB15:
 957              		.p2align 4,,15
 958              		.globl	delay
 960              	delay:
 961              	.LFB49:
 962              		.cfi_startproc
 963 0000 53       		pushq	%rbx
 964              		.cfi_def_cfa_offset 16
 965              		.cfi_offset 3, -16
 966 0001 89FB     		movl	%edi, %ebx
 967 0003 E8000000 		call	clock
 967      00
 968 0008 4801C3   		addq	%rax, %rbx
 969 000b 0F1F4400 		.p2align 4,,10
 969      00
 970              		.p2align 3
 971              	.L169:
 972 0010 E8000000 		call	clock
 972      00
 973 0015 4839C3   		cmpq	%rax, %rbx
 974 0018 7FF6     		jg	.L169
 975 001a 5B       		popq	%rbx
 976              		.cfi_def_cfa_offset 8
 977 001b C3       		ret
 978              		.cfi_endproc
 979              	.LFE49:
 981              		.section	.text.unlikely
 982              	.LCOLDE15:
 983              		.text
 984              	.LHOTE15:
 985              		.section	.text.unlikely
 986              	.LCOLDB16:
 987              		.text
 988              	.LHOTB16:
 989 001c 0F1F4000 		.p2align 4,,15
 990              		.globl	myxor
 992              	myxor:
 993              	.LFB50:
 994              		.cfi_startproc
 995 0020 31D2     		xorl	%edx, %edx
 996 0022 833F01   		cmpl	$1, (%rdi)
 997 0025 0F94C2   		sete	%dl
 998 0028 31C0     		xorl	%eax, %eax
 999 002a 837F0401 		cmpl	$1, 4(%rdi)
 1000 002e 0F94C0   		sete	%al
 1001 0031 01D0     		addl	%edx, %eax
 1002 0033 31D2     		xorl	%edx, %edx
 1003 0035 837F0801 		cmpl	$1, 8(%rdi)
 1004 0039 0F94C2   		sete	%dl
 1005 003c 01D0     		addl	%edx, %eax
 1006 003e 31D2     		xorl	%edx, %edx
 1007 0040 837F0C01 		cmpl	$1, 12(%rdi)
 1008 0044 0F94C2   		sete	%dl
 1009 0047 01D0     		addl	%edx, %eax
 1010 0049 31D2     		xorl	%edx, %edx
 1011 004b 837F1001 		cmpl	$1, 16(%rdi)
 1012 004f 0F94C2   		sete	%dl
 1013 0052 01D0     		addl	%edx, %eax
 1014 0054 31D2     		xorl	%edx, %edx
 1015 0056 837F1401 		cmpl	$1, 20(%rdi)
 1016 005a 0F94C2   		sete	%dl
 1017 005d 01D0     		addl	%edx, %eax
 1018 005f 31D2     		xorl	%edx, %edx
 1019 0061 837F1801 		cmpl	$1, 24(%rdi)
 1020 0065 0F94C2   		sete	%dl
 1021 0068 01D0     		addl	%edx, %eax
 1022 006a 31D2     		xorl	%edx, %edx
 1023 006c 837F1C01 		cmpl	$1, 28(%rdi)
 1024 0070 0F94C2   		sete	%dl
 1025 0073 01D0     		addl	%edx, %eax
 1026 0075 83E001   		andl	$1, %eax
 1027 0078 C3       		ret
 1028              		.cfi_endproc
 1029              	.LFE50:
 1031              		.section	.text.unlikely
 1032              	.LCOLDE16:
 1033              		.text
 1034              	.LHOTE16:
 1035              		.section	.text.unlikely
 1036              	.LCOLDB17:
 1037              		.text
 1038              	.LHOTB17:
 1039 0079 0F1F8000 		.p2align 4,,15
 1039      000000
 1040              		.globl	bitArrayToInt
 1042              	bitArrayToInt:
 1043              	.LFB51:
 1044              		.cfi_startproc
 1045 0080 85F6     		testl	%esi, %esi
 1046 0082 7E28     		jle	.L176
 1047 0084 4863C6   		movslq	%esi, %rax
 1048 0087 8D4EFF   		leal	-1(%rsi), %ecx
 1049 008a 488D7C87 		leaq	-4(%rdi,%rax,4), %rdi
 1049      FC
 1050 008f 31C0     		xorl	%eax, %eax
 1051              		.p2align 4,,10
 1052 0091 0F1F8000 		.p2align 3
 1052      000000
 1053              	.L175:
 1054 0098 8B17     		movl	(%rdi), %edx
 1055 009a 4883EF04 		subq	$4, %rdi
 1056 009e D3E2     		sall	%cl, %edx
 1057 00a0 83E901   		subl	$1, %ecx
 1058 00a3 09D0     		orl	%edx, %eax
 1059 00a5 83F9FF   		cmpl	$-1, %ecx
 1060 00a8 75EE     		jne	.L175
 1061 00aa F3C3     		rep ret
 1062              	.L176:
 1063 00ac 31C0     		xorl	%eax, %eax
 1064 00ae C3       		ret
 1065              		.cfi_endproc
 1066              	.LFE51:
 1068              		.section	.text.unlikely
 1069              	.LCOLDE17:
 1070              		.text
 1071              	.LHOTE17:
 1072              		.section	.text.unlikely
 1073              	.LCOLDB18:
 1074              		.text
 1075              	.LHOTB18:
 1076 00af 90       		.p2align 4,,15
 1077              		.globl	BinTouint8
 1079              	BinTouint8:
 1080              	.LFB52:
 1081              		.cfi_startproc
 1082 00b0 4157     		pushq	%r15
 1083              		.cfi_def_cfa_offset 16
 1084              		.cfi_offset 15, -16
 1085 00b2 4156     		pushq	%r14
 1086              		.cfi_def_cfa_offset 24
 1087              		.cfi_offset 14, -24
 1088 00b4 4155     		pushq	%r13
 1089              		.cfi_def_cfa_offset 32
 1090              		.cfi_offset 13, -32
 1091 00b6 4154     		pushq	%r12
 1092              		.cfi_def_cfa_offset 40
 1093              		.cfi_offset 12, -40
 1094 00b8 55       		pushq	%rbp
 1095              		.cfi_def_cfa_offset 48
 1096              		.cfi_offset 6, -48
 1097 00b9 53       		pushq	%rbx
 1098              		.cfi_def_cfa_offset 56
 1099              		.cfi_offset 3, -56
 1100 00ba 4881ECB8 		subq	$184, %rsp
 1100      000000
 1101              		.cfi_def_cfa_offset 240
 1102 00c1 4C8B36   		movq	(%rsi), %r14
 1103 00c4 4C8B4608 		movq	8(%rsi), %r8
 1104 00c8 4C8B7E10 		movq	16(%rsi), %r15
 1105 00cc 4C8B4E18 		movq	24(%rsi), %r9
 1106 00d0 64488B04 		movq	%fs:40, %rax
 1106      25280000 
 1106      00
 1107 00d9 48898424 		movq	%rax, 168(%rsp)
 1107      A8000000 
 1108 00e1 31C0     		xorl	%eax, %eax
 1109 00e3 4C897424 		movq	%r14, 32(%rsp)
 1109      20
 1110 00e8 4C894424 		movq	%r8, 40(%rsp)
 1110      28
 1111 00ed 488D4660 		leaq	96(%rsi), %rax
 1112 00f1 4C897C24 		movq	%r15, 48(%rsp)
 1112      30
 1113 00f6 4C894C24 		movq	%r9, 56(%rsp)
 1113      38
 1114 00fb 488B6E20 		movq	32(%rsi), %rbp
 1115 00ff 48896C24 		movq	%rbp, 64(%rsp)
 1115      40
 1116 0104 4C8B6628 		movq	40(%rsi), %r12
 1117 0108 4C896424 		movq	%r12, 72(%rsp)
 1117      48
 1118 010d 4C8B6E30 		movq	48(%rsi), %r13
 1119 0111 4C896C24 		movq	%r13, 80(%rsp)
 1119      50
 1120 0116 488B4E38 		movq	56(%rsi), %rcx
 1121 011a 48894C24 		movq	%rcx, 88(%rsp)
 1121      58
 1122 011f 488B5E40 		movq	64(%rsi), %rbx
 1123 0123 48895C24 		movq	%rbx, 96(%rsp)
 1123      60
 1124 0128 4C8B5E48 		movq	72(%rsi), %r11
 1125 012c 48895C24 		movq	%rbx, 8(%rsp)
 1125      08
 1126 0131 4C895C24 		movq	%r11, 104(%rsp)
 1126      68
 1127 0136 488B5E50 		movq	80(%rsi), %rbx
 1128 013a 48895C24 		movq	%rbx, 112(%rsp)
 1128      70
 1129 013f 488B5658 		movq	88(%rsi), %rdx
 1130 0143 48895424 		movq	%rdx, 120(%rsp)
 1130      78
 1131 0148 488B7660 		movq	96(%rsi), %rsi
 1132 014c 4889B424 		movq	%rsi, 128(%rsp)
 1132      80000000 
 1133 0154 48897424 		movq	%rsi, 16(%rsp)
 1133      10
 1134 0159 4C89CE   		movq	%r9, %rsi
 1135 015c 48C1EE20 		shrq	$32, %rsi
 1136 0160 41C1E106 		sall	$6, %r9d
 1137 0164 4C8B5008 		movq	8(%rax), %r10
 1138 0168 C1E607   		sall	$7, %esi
 1139 016b 4109F1   		orl	%esi, %r9d
 1140 016e 4C89FE   		movq	%r15, %rsi
 1141 0171 41C1E704 		sall	$4, %r15d
 1142 0175 48C1EE20 		shrq	$32, %rsi
 1143 0179 4C895424 		movq	%r10, 24(%rsp)
 1143      18
 1144 017e 4C899424 		movq	%r10, 136(%rsp)
 1144      88000000 
 1145 0186 C1E605   		sall	$5, %esi
 1146 0189 4C8B5010 		movq	16(%rax), %r10
 1147 018d 4409CE   		orl	%r9d, %esi
 1148 0190 4D89C1   		movq	%r8, %r9
 1149 0193 41C1E002 		sall	$2, %r8d
 1150 0197 49C1E920 		shrq	$32, %r9
 1151 019b 4409FE   		orl	%r15d, %esi
 1152 019e 4D89CF   		movq	%r9, %r15
 1153 01a1 4C899424 		movq	%r10, 144(%rsp)
 1153      90000000 
 1154 01a9 488B4018 		movq	24(%rax), %rax
 1155 01ad 41C1E703 		sall	$3, %r15d
 1156 01b1 4989E9   		movq	%rbp, %r9
 1157 01b4 4109F7   		orl	%esi, %r15d
 1158 01b7 4509C7   		orl	%r8d, %r15d
 1159 01ba 4D89F0   		movq	%r14, %r8
 1160 01bd 48898424 		movq	%rax, 152(%rsp)
 1160      98000000 
 1161 01c5 49C1E820 		shrq	$32, %r8
 1162 01c9 4C89C6   		movq	%r8, %rsi
 1163 01cc 4D89E8   		movq	%r13, %r8
 1164 01cf 41C1E504 		sall	$4, %r13d
 1165 01d3 01F6     		addl	%esi, %esi
 1166 01d5 49C1E820 		shrq	$32, %r8
 1167 01d9 4109F7   		orl	%esi, %r15d
 1168 01dc 4509FE   		orl	%r15d, %r14d
 1169 01df 448837   		movb	%r14b, (%rdi)
 1170 01e2 4989CE   		movq	%rcx, %r14
 1171 01e5 C1E106   		sall	$6, %ecx
 1172 01e8 49C1EE20 		shrq	$32, %r14
 1173 01ec 4C89F6   		movq	%r14, %rsi
 1174 01ef 4D89E6   		movq	%r12, %r14
 1175 01f2 C1E607   		sall	$7, %esi
 1176 01f5 49C1EE20 		shrq	$32, %r14
 1177 01f9 09F1     		orl	%esi, %ecx
 1178 01fb 4C89C6   		movq	%r8, %rsi
 1179 01fe 4989D0   		movq	%rdx, %r8
 1180 0201 C1E605   		sall	$5, %esi
 1181 0204 09F1     		orl	%esi, %ecx
 1182 0206 488B7424 		movq	16(%rsp), %rsi
 1182      10
 1183 020b 4109CD   		orl	%ecx, %r13d
 1184 020e 4C89F1   		movq	%r14, %rcx
 1185 0211 4989DE   		movq	%rbx, %r14
 1186 0214 C1E103   		sall	$3, %ecx
 1187 0217 4109CD   		orl	%ecx, %r13d
 1188 021a 41C1E402 		sall	$2, %r12d
 1189 021e 49C1E920 		shrq	$32, %r9
 1190 0222 4C89C9   		movq	%r9, %rcx
 1191 0225 4509EC   		orl	%r13d, %r12d
 1192 0228 49C1E820 		shrq	$32, %r8
 1193 022c 01C9     		addl	%ecx, %ecx
 1194 022e C1E206   		sall	$6, %edx
 1195 0231 49C1EE20 		shrq	$32, %r14
 1196 0235 4109CC   		orl	%ecx, %r12d
 1197 0238 4C89C1   		movq	%r8, %rcx
 1198 023b 4D89D9   		movq	%r11, %r9
 1199 023e C1E107   		sall	$7, %ecx
 1200 0241 C1E304   		sall	$4, %ebx
 1201 0244 49C1E920 		shrq	$32, %r9
 1202 0248 09CA     		orl	%ecx, %edx
 1203 024a 4C89F1   		movq	%r14, %rcx
 1204 024d 41C1E302 		sall	$2, %r11d
 1205 0251 C1E105   		sall	$5, %ecx
 1206 0254 4409E5   		orl	%r12d, %ebp
 1207 0257 09CA     		orl	%ecx, %edx
 1208 0259 488B4C24 		movq	24(%rsp), %rcx
 1208      18
 1209 025e 40886F01 		movb	%bpl, 1(%rdi)
 1210 0262 09D3     		orl	%edx, %ebx
 1211 0264 4C89CA   		movq	%r9, %rdx
 1212 0267 C1E203   		sall	$3, %edx
 1213 026a 09D3     		orl	%edx, %ebx
 1214 026c 4109DB   		orl	%ebx, %r11d
 1215 026f 488B5C24 		movq	8(%rsp), %rbx
 1215      08
 1216 0274 4889DA   		movq	%rbx, %rdx
 1217 0277 48C1EA20 		shrq	$32, %rdx
 1218 027b 01D2     		addl	%edx, %edx
 1219 027d 4109D3   		orl	%edx, %r11d
 1220 0280 4109DB   		orl	%ebx, %r11d
 1221 0283 4889C3   		movq	%rax, %rbx
 1222 0286 C1E006   		sall	$6, %eax
 1223 0289 48C1EB20 		shrq	$32, %rbx
 1224 028d 44885F02 		movb	%r11b, 2(%rdi)
 1225 0291 4889DA   		movq	%rbx, %rdx
 1226 0294 4C89D3   		movq	%r10, %rbx
 1227 0297 41C1E204 		sall	$4, %r10d
 1228 029b C1E207   		sall	$7, %edx
 1229 029e 48C1EB20 		shrq	$32, %rbx
 1230 02a2 09D0     		orl	%edx, %eax
 1231 02a4 4889DA   		movq	%rbx, %rdx
 1232 02a7 4889CB   		movq	%rcx, %rbx
 1233 02aa C1E205   		sall	$5, %edx
 1234 02ad 09D0     		orl	%edx, %eax
 1235 02af 4109C2   		orl	%eax, %r10d
 1236 02b2 48C1EB20 		shrq	$32, %rbx
 1237 02b6 4889D8   		movq	%rbx, %rax
 1238 02b9 C1E003   		sall	$3, %eax
 1239 02bc 4109C2   		orl	%eax, %r10d
 1240 02bf 8D048D00 		leal	0(,%rcx,4), %eax
 1240      000000
 1241 02c6 4109C2   		orl	%eax, %r10d
 1242 02c9 4889F0   		movq	%rsi, %rax
 1243 02cc 48C1E820 		shrq	$32, %rax
 1244 02d0 01C0     		addl	%eax, %eax
 1245 02d2 4409D0   		orl	%r10d, %eax
 1246 02d5 09F0     		orl	%esi, %eax
 1247 02d7 884703   		movb	%al, 3(%rdi)
 1248 02da 488B8424 		movq	168(%rsp), %rax
 1248      A8000000 
 1249 02e2 64483304 		xorq	%fs:40, %rax
 1249      25280000 
 1249      00
 1250 02eb 7512     		jne	.L181
 1251 02ed 4881C4B8 		addq	$184, %rsp
 1251      000000
 1252              		.cfi_remember_state
 1253              		.cfi_def_cfa_offset 56
 1254 02f4 5B       		popq	%rbx
 1255              		.cfi_def_cfa_offset 48
 1256 02f5 5D       		popq	%rbp
 1257              		.cfi_def_cfa_offset 40
 1258 02f6 415C     		popq	%r12
 1259              		.cfi_def_cfa_offset 32
 1260 02f8 415D     		popq	%r13
 1261              		.cfi_def_cfa_offset 24
 1262 02fa 415E     		popq	%r14
 1263              		.cfi_def_cfa_offset 16
 1264 02fc 415F     		popq	%r15
 1265              		.cfi_def_cfa_offset 8
 1266 02fe C3       		ret
 1267              	.L181:
 1268              		.cfi_restore_state
 1269 02ff E8000000 		call	__stack_chk_fail
 1269      00
 1270              		.cfi_endproc
 1271              	.LFE52:
 1273              		.section	.text.unlikely
 1274              	.LCOLDE18:
 1275              		.text
 1276              	.LHOTE18:
 1277              		.section	.text.unlikely
 1278              	.LCOLDB19:
 1279              		.text
 1280              	.LHOTB19:
 1281 0304 6690662E 		.p2align 4,,15
 1281      0F1F8400 
 1281      00000000 
 1282              		.globl	decToBinary
 1284              	decToBinary:
 1285              	.LFB53:
 1286              		.cfi_startproc
 1287 0310 55       		pushq	%rbp
 1288              		.cfi_def_cfa_offset 16
 1289              		.cfi_offset 6, -16
 1290 0311 4889E5   		movq	%rsp, %rbp
 1291              		.cfi_def_cfa_register 6
 1292 0314 4157     		pushq	%r15
 1293 0316 4156     		pushq	%r14
 1294 0318 4155     		pushq	%r13
 1295 031a 4154     		pushq	%r12
 1296              		.cfi_offset 15, -24
 1297              		.cfi_offset 14, -32
 1298              		.cfi_offset 13, -40
 1299              		.cfi_offset 12, -48
 1300 031c 4989F5   		movq	%rsi, %r13
 1301 031f 53       		pushq	%rbx
 1302 0320 4189D4   		movl	%edx, %r12d
 1303              		.cfi_offset 3, -56
 1304 0323 89FB     		movl	%edi, %ebx
 1305 0325 4883EC18 		subq	$24, %rsp
 1306 0329 64488B04 		movq	%fs:40, %rax
 1306      25280000 
 1306      00
 1307 0332 488945C8 		movq	%rax, -56(%rbp)
 1308 0336 31C0     		xorl	%eax, %eax
 1309 0338 4863C2   		movslq	%edx, %rax
 1310 033b 488D0485 		leaq	18(,%rax,4), %rax
 1310      12000000 
 1311 0343 4883E0F0 		andq	$-16, %rax
 1312 0347 4829C4   		subq	%rax, %rsp
 1313 034a 85D2     		testl	%edx, %edx
 1314 034c 4989E7   		movq	%rsp, %r15
 1315 034f 7E76     		jle	.L183
 1316 0351 8D42FF   		leal	-1(%rdx), %eax
 1317 0354 31F6     		xorl	%esi, %esi
 1318 0356 4889E7   		movq	%rsp, %rdi
 1319 0359 488D1485 		leaq	4(,%rax,4), %rdx
 1319      04000000 
 1320 0361 4989C6   		movq	%rax, %r14
 1321 0364 E8000000 		call	memset
 1321      00
 1322 0369 85DB     		testl	%ebx, %ebx
 1323 036b 7E1D     		jle	.L184
 1324              	.L187:
 1325 036d 4C89F8   		movq	%r15, %rax
 1326              		.p2align 4,,10
 1327              		.p2align 3
 1328              	.L185:
 1329 0370 89DA     		movl	%ebx, %edx
 1330 0372 4883C004 		addq	$4, %rax
 1331 0376 83E201   		andl	$1, %edx
 1332 0379 8950FC   		movl	%edx, -4(%rax)
 1333 037c D1FB     		sarl	%ebx
 1334 037e 75F0     		jne	.L185
 1335 0380 4585E4   		testl	%r12d, %r12d
 1336 0383 7E24     		jle	.L182
 1337 0385 458D7424 		leal	-1(%r12), %r14d
 1337      FF
 1338              	.L184:
 1339 038a 4A8D14B5 		leaq	4(,%r14,4), %rdx
 1339      04000000 
 1340 0392 4585E4   		testl	%r12d, %r12d
 1341 0395 B8040000 		movl	$4, %eax
 1341      00
 1342 039a 4C89FE   		movq	%r15, %rsi
 1343 039d 4C89EF   		movq	%r13, %rdi
 1344 03a0 480F4ED0 		cmovle	%rax, %rdx
 1345 03a4 E8000000 		call	memcpy
 1345      00
 1346              	.L182:
 1347 03a9 488B45C8 		movq	-56(%rbp), %rax
 1348 03ad 64483304 		xorq	%fs:40, %rax
 1348      25280000 
 1348      00
 1349 03b6 7515     		jne	.L192
 1350 03b8 488D65D8 		leaq	-40(%rbp), %rsp
 1351 03bc 5B       		popq	%rbx
 1352 03bd 415C     		popq	%r12
 1353 03bf 415D     		popq	%r13
 1354 03c1 415E     		popq	%r14
 1355 03c3 415F     		popq	%r15
 1356 03c5 5D       		popq	%rbp
 1357              		.cfi_remember_state
 1358              		.cfi_def_cfa 7, 8
 1359 03c6 C3       		ret
 1360              	.L183:
 1361              		.cfi_restore_state
 1362 03c7 85FF     		testl	%edi, %edi
 1363 03c9 7EDE     		jle	.L182
 1364 03cb EBA0     		jmp	.L187
 1365              	.L192:
 1366 03cd E8000000 		call	__stack_chk_fail
 1366      00
 1367              		.cfi_endproc
 1368              	.LFE53:
 1370              		.section	.text.unlikely
 1371              	.LCOLDE19:
 1372              		.text
 1373              	.LHOTE19:
 1374              		.section	.text.unlikely
 1375              	.LCOLDB21:
 1376              		.text
 1377              	.LHOTB21:
 1378 03d2 0F1F4000 		.p2align 4,,15
 1378      662E0F1F 
 1378      84000000 
 1378      0000
 1379              		.globl	encrypter
 1381              	encrypter:
 1382              	.LFB54:
 1383              		.cfi_startproc
 1384 03e0 55       		pushq	%rbp
 1385              		.cfi_def_cfa_offset 16
 1386              		.cfi_offset 6, -16
 1387 03e1 488D8E80 		leaq	128(%rsi), %rcx
 1387      000000
 1388 03e8 4889E5   		movq	%rsp, %rbp
 1389              		.cfi_def_cfa_register 6
 1390 03eb 4881EC30 		subq	$560, %rsp
 1390      020000
 1391 03f2 64488B04 		movq	%fs:40, %rax
 1391      25280000 
 1391      00
 1392 03fb 488945F8 		movq	%rax, -8(%rbp)
 1393 03ff 31C0     		xorl	%eax, %eax
 1394 0401 488B07   		movq	(%rdi), %rax
 1395 0404 488985F0 		movq	%rax, -272(%rbp)
 1395      FEFFFF
 1396 040b 488B4708 		movq	8(%rdi), %rax
 1397 040f 488985F8 		movq	%rax, -264(%rbp)
 1397      FEFFFF
 1398 0416 488B4710 		movq	16(%rdi), %rax
 1399 041a 48898500 		movq	%rax, -256(%rbp)
 1399      FFFFFF
 1400 0421 488B4718 		movq	24(%rdi), %rax
 1401 0425 48898508 		movq	%rax, -248(%rbp)
 1401      FFFFFF
 1402 042c 488B4720 		movq	32(%rdi), %rax
 1403 0430 48898510 		movq	%rax, -240(%rbp)
 1403      FFFFFF
 1404 0437 488B4728 		movq	40(%rdi), %rax
 1405 043b 48898518 		movq	%rax, -232(%rbp)
 1405      FFFFFF
 1406 0442 488B4730 		movq	48(%rdi), %rax
 1407 0446 48898520 		movq	%rax, -224(%rbp)
 1407      FFFFFF
 1408 044d 488B4738 		movq	56(%rdi), %rax
 1409 0451 48898528 		movq	%rax, -216(%rbp)
 1409      FFFFFF
 1410 0458 488B4740 		movq	64(%rdi), %rax
 1411 045c 48898530 		movq	%rax, -208(%rbp)
 1411      FFFFFF
 1412 0463 488B4748 		movq	72(%rdi), %rax
 1413 0467 48898538 		movq	%rax, -200(%rbp)
 1413      FFFFFF
 1414 046e 488B4750 		movq	80(%rdi), %rax
 1415 0472 48898540 		movq	%rax, -192(%rbp)
 1415      FFFFFF
 1416 0479 488B4758 		movq	88(%rdi), %rax
 1417 047d 48898548 		movq	%rax, -184(%rbp)
 1417      FFFFFF
 1418 0484 488B4760 		movq	96(%rdi), %rax
 1419 0488 48898550 		movq	%rax, -176(%rbp)
 1419      FFFFFF
 1420 048f 488B4768 		movq	104(%rdi), %rax
 1421 0493 48898558 		movq	%rax, -168(%rbp)
 1421      FFFFFF
 1422 049a 488B4770 		movq	112(%rdi), %rax
 1423 049e 48898560 		movq	%rax, -160(%rbp)
 1423      FFFFFF
 1424 04a5 488B4778 		movq	120(%rdi), %rax
 1425 04a9 31FF     		xorl	%edi, %edi
 1426 04ab 48898568 		movq	%rax, -152(%rbp)
 1426      FFFFFF
 1427 04b2 488B06   		movq	(%rsi), %rax
 1428 04b5 48898570 		movq	%rax, -400(%rbp)
 1428      FEFFFF
 1429 04bc 488B4608 		movq	8(%rsi), %rax
 1430 04c0 48898578 		movq	%rax, -392(%rbp)
 1430      FEFFFF
 1431 04c7 488B4610 		movq	16(%rsi), %rax
 1432 04cb 48898580 		movq	%rax, -384(%rbp)
 1432      FEFFFF
 1433 04d2 488B4618 		movq	24(%rsi), %rax
 1434 04d6 48898588 		movq	%rax, -376(%rbp)
 1434      FEFFFF
 1435 04dd 488B4620 		movq	32(%rsi), %rax
 1436 04e1 48898590 		movq	%rax, -368(%rbp)
 1436      FEFFFF
 1437 04e8 488B4628 		movq	40(%rsi), %rax
 1438 04ec 48898598 		movq	%rax, -360(%rbp)
 1438      FEFFFF
 1439 04f3 488B4630 		movq	48(%rsi), %rax
 1440 04f7 488985A0 		movq	%rax, -352(%rbp)
 1440      FEFFFF
 1441 04fe 488B4638 		movq	56(%rsi), %rax
 1442 0502 488985A8 		movq	%rax, -344(%rbp)
 1442      FEFFFF
 1443 0509 488B4640 		movq	64(%rsi), %rax
 1444 050d 488985B0 		movq	%rax, -336(%rbp)
 1444      FEFFFF
 1445 0514 488B4648 		movq	72(%rsi), %rax
 1446 0518 488985B8 		movq	%rax, -328(%rbp)
 1446      FEFFFF
 1447 051f 488B4650 		movq	80(%rsi), %rax
 1448 0523 488985C0 		movq	%rax, -320(%rbp)
 1448      FEFFFF
 1449 052a 488B4658 		movq	88(%rsi), %rax
 1450 052e 488985C8 		movq	%rax, -312(%rbp)
 1450      FEFFFF
 1451 0535 488B4660 		movq	96(%rsi), %rax
 1452 0539 488985D0 		movq	%rax, -304(%rbp)
 1452      FEFFFF
 1453 0540 488B4668 		movq	104(%rsi), %rax
 1454 0544 488985D8 		movq	%rax, -296(%rbp)
 1454      FEFFFF
 1455 054b 488B4670 		movq	112(%rsi), %rax
 1456 054f 488985E0 		movq	%rax, -288(%rbp)
 1456      FEFFFF
 1457 0556 488B4678 		movq	120(%rsi), %rax
 1458 055a 488985E8 		movq	%rax, -280(%rbp)
 1458      FEFFFF
 1459              		.p2align 4,,10
 1460 0561 0F1F8000 		.p2align 3
 1460      000000
 1461              	.L195:
 1462 0568 31C0     		xorl	%eax, %eax
 1463 056a 833E01   		cmpl	$1, (%rsi)
 1464 056d 0F94C0   		sete	%al
 1465 0570 4883C604 		addq	$4, %rsi
 1466 0574 01C7     		addl	%eax, %edi
 1467 0576 4839CE   		cmpq	%rcx, %rsi
 1468 0579 75ED     		jne	.L195
 1469 057b 660F6F8D 		movdqa	-400(%rbp), %xmm1
 1469      70FEFFFF 
 1470 0583 4531C9   		xorl	%r9d, %r9d
 1471 0586 660F6F95 		movdqa	-384(%rbp), %xmm2
 1471      80FEFFFF 
 1472 058e 660F6FD9 		movdqa	%xmm1, %xmm3
 1473 0592 660F6F85 		movdqa	-368(%rbp), %xmm0
 1473      90FEFFFF 
 1474 059a 0FC6CADD 		shufps	$221, %xmm2, %xmm1
 1475 059e 0FC6DA88 		shufps	$136, %xmm2, %xmm3
 1476 05a2 660F6FA5 		movdqa	-352(%rbp), %xmm4
 1476      A0FEFFFF 
 1477 05aa 660F6FD0 		movdqa	%xmm0, %xmm2
 1478 05ae 660F6FF1 		movdqa	%xmm1, %xmm6
 1479 05b2 0FC6D488 		shufps	$136, %xmm4, %xmm2
 1480 05b6 660F6FEB 		movdqa	%xmm3, %xmm5
 1481 05ba 0FC6C4DD 		shufps	$221, %xmm4, %xmm0
 1482 05be 660F6FA5 		movdqa	-336(%rbp), %xmm4
 1482      B0FEFFFF 
 1483 05c6 0FC6EA88 		shufps	$136, %xmm2, %xmm5
 1484 05ca 0FC6DADD 		shufps	$221, %xmm2, %xmm3
 1485 05ce 66440F6F 		movdqa	-304(%rbp), %xmm9
 1485      8DD0FEFF 
 1485      FF
 1486 05d7 0FC6F088 		shufps	$136, %xmm0, %xmm6
 1487 05db 0FC6C8DD 		shufps	$221, %xmm0, %xmm1
 1488 05df 660F6FD4 		movdqa	%xmm4, %xmm2
 1489 05e3 660F6F85 		movdqa	-320(%rbp), %xmm0
 1489      C0FEFFFF 
 1490 05eb 660F6FBD 		movdqa	-288(%rbp), %xmm7
 1490      E0FEFFFF 
 1491 05f3 0FC6D088 		shufps	$136, %xmm0, %xmm2
 1492 05f7 0FC6E0DD 		shufps	$221, %xmm0, %xmm4
 1493 05fb 66410F6F 		movdqa	%xmm9, %xmm0
 1493      C1
 1494 0600 440FC6CF 		shufps	$221, %xmm7, %xmm9
 1494      DD
 1495 0605 0FC6C788 		shufps	$136, %xmm7, %xmm0
 1496 0609 660F6FFA 		movdqa	%xmm2, %xmm7
 1497 060d 0F29ADF0 		movaps	%xmm5, -528(%rbp)
 1497      FDFFFF
 1498 0614 66440F6F 		movdqa	%xmm4, %xmm8
 1498      C4
 1499 0619 0FC6F888 		shufps	$136, %xmm0, %xmm7
 1500 061d 0FC6D0DD 		shufps	$221, %xmm0, %xmm2
 1501 0621 660F6F05 		movdqa	.LC20(%rip), %xmm0
 1501      00000000 
 1502 0629 450FC6C1 		shufps	$136, %xmm9, %xmm8
 1502      88
 1503 062e 410FC6E1 		shufps	$221, %xmm9, %xmm4
 1503      DD
 1504 0633 660F76E8 		pcmpeqd	%xmm0, %xmm5
 1505 0637 0F29BD00 		movaps	%xmm7, -512(%rbp)
 1505      FEFFFF
 1506 063e 660F76F8 		pcmpeqd	%xmm0, %xmm7
 1507 0642 660FDBE8 		pand	%xmm0, %xmm5
 1508 0646 0F29B510 		movaps	%xmm6, -496(%rbp)
 1508      FEFFFF
 1509 064d 660FDBF8 		pand	%xmm0, %xmm7
 1510 0651 660F76F0 		pcmpeqd	%xmm0, %xmm6
 1511 0655 0F299D30 		movaps	%xmm3, -464(%rbp)
 1511      FEFFFF
 1512 065c 660FDBF0 		pand	%xmm0, %xmm6
 1513 0660 660F76D8 		pcmpeqd	%xmm0, %xmm3
 1514 0664 660FFEEF 		paddd	%xmm7, %xmm5
 1515 0668 660F6FFD 		movdqa	%xmm5, %xmm7
 1516 066c 0F299540 		movaps	%xmm2, -448(%rbp)
 1516      FEFFFF
 1517 0673 660F73DF 		psrldq	$8, %xmm7
 1517      08
 1518 0678 660FFEEF 		paddd	%xmm7, %xmm5
 1519 067c 660F6FFD 		movdqa	%xmm5, %xmm7
 1520 0680 660F76D0 		pcmpeqd	%xmm0, %xmm2
 1521 0684 660FDBD8 		pand	%xmm0, %xmm3
 1522 0688 660F73DF 		psrldq	$4, %xmm7
 1522      04
 1523 068d 660FFEEF 		paddd	%xmm7, %xmm5
 1524 0691 660F7EE8 		movd	%xmm5, %eax
 1525 0695 66410F6F 		movdqa	%xmm8, %xmm5
 1525      E8
 1526 069a 660FDBD0 		pand	%xmm0, %xmm2
 1527 069e 0F298D50 		movaps	%xmm1, -432(%rbp)
 1527      FEFFFF
 1528 06a5 660F76E8 		pcmpeqd	%xmm0, %xmm5
 1529 06a9 83E001   		andl	$1, %eax
 1530 06ac 660F76C8 		pcmpeqd	%xmm0, %xmm1
 1531 06b0 660FFED3 		paddd	%xmm3, %xmm2
 1532 06b4 660F6FDA 		movdqa	%xmm2, %xmm3
 1533 06b8 660FDBE8 		pand	%xmm0, %xmm5
 1534 06bc 0F29A560 		movaps	%xmm4, -416(%rbp)
 1534      FEFFFF
 1535 06c3 660F73DB 		psrldq	$8, %xmm3
 1535      08
 1536 06c8 660FFED3 		paddd	%xmm3, %xmm2
 1537 06cc 660F76E0 		pcmpeqd	%xmm0, %xmm4
 1538 06d0 660FDBC8 		pand	%xmm0, %xmm1
 1539 06d4 660FFEEE 		paddd	%xmm6, %xmm5
 1540 06d8 660F6FF5 		movdqa	%xmm5, %xmm6
 1541 06dc 660FDBC4 		pand	%xmm4, %xmm0
 1542 06e0 660F6FDA 		movdqa	%xmm2, %xmm3
 1543 06e4 660F73DE 		psrldq	$8, %xmm6
 1543      08
 1544 06e9 660FFEEE 		paddd	%xmm6, %xmm5
 1545 06ed 660F6FF5 		movdqa	%xmm5, %xmm6
 1546 06f1 8985D8FD 		movl	%eax, -552(%rbp)
 1546      FFFF
 1547 06f7 660F73DB 		psrldq	$4, %xmm3
 1547      04
 1548 06fc 660FFED3 		paddd	%xmm3, %xmm2
 1549 0700 660F73DE 		psrldq	$4, %xmm6
 1549      04
 1550 0705 660FFEEE 		paddd	%xmm6, %xmm5
 1551 0709 660F7EE8 		movd	%xmm5, %eax
 1552 070d 660FFEC1 		paddd	%xmm1, %xmm0
 1553 0711 660F6FC8 		movdqa	%xmm0, %xmm1
 1554 0715 83E001   		andl	$1, %eax
 1555 0718 8985D4FD 		movl	%eax, -556(%rbp)
 1555      FFFF
 1556 071e 660F7ED0 		movd	%xmm2, %eax
 1557 0722 660F73D9 		psrldq	$8, %xmm1
 1557      08
 1558 0727 660FFEC1 		paddd	%xmm1, %xmm0
 1559 072b 660F6FC8 		movdqa	%xmm0, %xmm1
 1560 072f 83E001   		andl	$1, %eax
 1561 0732 8985D0FD 		movl	%eax, -560(%rbp)
 1561      FFFF
 1562 0738 660F73D9 		psrldq	$4, %xmm1
 1562      04
 1563 073d 660FFEC1 		paddd	%xmm1, %xmm0
 1564 0741 660F7EC0 		movd	%xmm0, %eax
 1565 0745 440F2985 		movaps	%xmm8, -480(%rbp)
 1565      20FEFFFF 
 1566 074d 83E001   		andl	$1, %eax
 1567 0750 448D04C5 		leal	0(,%rax,8), %r8d
 1567      00000000 
 1568 0758 8985DCFD 		movl	%eax, -548(%rbp)
 1568      FFFF
 1569 075e 8B85D0FD 		movl	-560(%rbp), %eax
 1569      FFFF
 1570 0764 C1E002   		sall	$2, %eax
 1571 0767 4109C0   		orl	%eax, %r8d
 1572 076a 8B85D4FD 		movl	-556(%rbp), %eax
 1572      FFFF
 1573 0770 440B85D8 		orl	-552(%rbp), %r8d
 1573      FDFFFF
 1574 0777 01C0     		addl	%eax, %eax
 1575 0779 4109C0   		orl	%eax, %r8d
 1576 077c 85FF     		testl	%edi, %edi
 1577 077e 0F847C01 		je	.L197
 1577      0000
 1578              		.p2align 4,,10
 1579 0784 0F1F4000 		.p2align 3
 1580              	.L204:
 1581 0788 660F6E8D 		movd	-560(%rbp), %xmm1
 1581      D0FDFFFF 
 1582 0790 4183C001 		addl	$1, %r8d
 1583 0794 660F6EB5 		movd	-548(%rbp), %xmm6
 1583      DCFDFFFF 
 1584 079c 4183F810 		cmpl	$16, %r8d
 1585 07a0 660F6E85 		movd	-552(%rbp), %xmm0
 1585      D8FDFFFF 
 1586 07a8 660F6E9D 		movd	-556(%rbp), %xmm3
 1586      D4FDFFFF 
 1587 07b0 660F62CE 		punpckldq	%xmm6, %xmm1
 1588 07b4 660F62C3 		punpckldq	%xmm3, %xmm0
 1589 07b8 660F6CC1 		punpcklqdq	%xmm1, %xmm0
 1590 07bc 660F6F8D 		movdqa	-272(%rbp), %xmm1
 1590      F0FEFFFF 
 1591 07c4 660FEFC8 		pxor	%xmm0, %xmm1
 1592 07c8 0F298570 		movaps	%xmm0, -144(%rbp)
 1592      FFFFFF
 1593 07cf 0F298DF0 		movaps	%xmm1, -272(%rbp)
 1593      FEFFFF
 1594 07d6 0F294580 		movaps	%xmm0, -128(%rbp)
 1595 07da 0F294590 		movaps	%xmm0, -112(%rbp)
 1596 07de 0F2945A0 		movaps	%xmm0, -96(%rbp)
 1597 07e2 0F2945B0 		movaps	%xmm0, -80(%rbp)
 1598 07e6 0F2945C0 		movaps	%xmm0, -64(%rbp)
 1599 07ea 0F2945D0 		movaps	%xmm0, -48(%rbp)
 1600 07ee 0F2945E0 		movaps	%xmm0, -32(%rbp)
 1601 07f2 660F6F8D 		movdqa	-256(%rbp), %xmm1
 1601      00FFFFFF 
 1602 07fa 660FEFC8 		pxor	%xmm0, %xmm1
 1603 07fe 0F298D00 		movaps	%xmm1, -256(%rbp)
 1603      FFFFFF
 1604 0805 660F6F8D 		movdqa	-240(%rbp), %xmm1
 1604      10FFFFFF 
 1605 080d 660FEFC8 		pxor	%xmm0, %xmm1
 1606 0811 0F298D10 		movaps	%xmm1, -240(%rbp)
 1606      FFFFFF
 1607 0818 660F6F8D 		movdqa	-224(%rbp), %xmm1
 1607      20FFFFFF 
 1608 0820 660FEFC8 		pxor	%xmm0, %xmm1
 1609 0824 0F298D20 		movaps	%xmm1, -224(%rbp)
 1609      FFFFFF
 1610 082b 660F6F8D 		movdqa	-208(%rbp), %xmm1
 1610      30FFFFFF 
 1611 0833 660FEFC8 		pxor	%xmm0, %xmm1
 1612 0837 0F298D30 		movaps	%xmm1, -208(%rbp)
 1612      FFFFFF
 1613 083e 660F6F8D 		movdqa	-192(%rbp), %xmm1
 1613      40FFFFFF 
 1614 0846 660FEFC8 		pxor	%xmm0, %xmm1
 1615 084a 0F298D40 		movaps	%xmm1, -192(%rbp)
 1615      FFFFFF
 1616 0851 660F6F8D 		movdqa	-176(%rbp), %xmm1
 1616      50FFFFFF 
 1617 0859 660FEFC8 		pxor	%xmm0, %xmm1
 1618 085d 660FEF85 		pxor	-160(%rbp), %xmm0
 1618      60FFFFFF 
 1619 0865 0F298D50 		movaps	%xmm1, -176(%rbp)
 1619      FFFFFF
 1620 086c 0F298560 		movaps	%xmm0, -160(%rbp)
 1620      FFFFFF
 1621 0873 0F844701 		je	.L213
 1621      0000
 1622 0879 488D8DE0 		leaq	-544(%rbp), %rcx
 1622      FDFFFF
 1623 0880 4989E2   		movq	%rsp, %r10
 1624 0883 4489C0   		movl	%r8d, %eax
 1625 0886 C785E0FD 		movl	$0, -544(%rbp)
 1625      FFFF0000 
 1625      0000
 1626 0890 C785E4FD 		movl	$0, -540(%rbp)
 1626      FFFF0000 
 1626      0000
 1627 089a C785E8FD 		movl	$0, -536(%rbp)
 1627      FFFF0000 
 1627      0000
 1628 08a4 C785ECFD 		movl	$0, -532(%rbp)
 1628      FFFF0000 
 1628      0000
 1629 08ae 6690     		.p2align 4,,10
 1630              		.p2align 3
 1631              	.L198:
 1632 08b0 89C6     		movl	%eax, %esi
 1633 08b2 4883C104 		addq	$4, %rcx
 1634 08b6 83E601   		andl	$1, %esi
 1635 08b9 8971FC   		movl	%esi, -4(%rcx)
 1636 08bc D1F8     		sarl	%eax
 1637 08be 75F0     		jne	.L198
 1638 08c0 8B85ECFD 		movl	-532(%rbp), %eax
 1638      FFFF
 1639 08c6 8985DCFD 		movl	%eax, -548(%rbp)
 1639      FFFF
 1640 08cc 8B85E8FD 		movl	-536(%rbp), %eax
 1640      FFFF
 1641 08d2 8985D0FD 		movl	%eax, -560(%rbp)
 1641      FFFF
 1642 08d8 8B85E4FD 		movl	-540(%rbp), %eax
 1642      FFFF
 1643 08de 8985D4FD 		movl	%eax, -556(%rbp)
 1643      FFFF
 1644 08e4 8B85E0FD 		movl	-544(%rbp), %eax
 1644      FFFF
 1645 08ea 8985D8FD 		movl	%eax, -552(%rbp)
 1645      FFFF
 1646              	.L202:
 1647 08f0 4183C101 		addl	$1, %r9d
 1648 08f4 4C89D4   		movq	%r10, %rsp
 1649 08f7 4439CF   		cmpl	%r9d, %edi
 1650 08fa 0F8588FE 		jne	.L204
 1650      FFFF
 1651              	.L197:
 1652 0900 488B85F0 		movq	-272(%rbp), %rax
 1652      FEFFFF
 1653 0907 488902   		movq	%rax, (%rdx)
 1654 090a 488B85F8 		movq	-264(%rbp), %rax
 1654      FEFFFF
 1655 0911 48894208 		movq	%rax, 8(%rdx)
 1656 0915 488B8500 		movq	-256(%rbp), %rax
 1656      FFFFFF
 1657 091c 48894210 		movq	%rax, 16(%rdx)
 1658 0920 488B8508 		movq	-248(%rbp), %rax
 1658      FFFFFF
 1659 0927 48894218 		movq	%rax, 24(%rdx)
 1660 092b 488B8510 		movq	-240(%rbp), %rax
 1660      FFFFFF
 1661 0932 48894220 		movq	%rax, 32(%rdx)
 1662 0936 488B8518 		movq	-232(%rbp), %rax
 1662      FFFFFF
 1663 093d 48894228 		movq	%rax, 40(%rdx)
 1664 0941 488B8520 		movq	-224(%rbp), %rax
 1664      FFFFFF
 1665 0948 48894230 		movq	%rax, 48(%rdx)
 1666 094c 488B8528 		movq	-216(%rbp), %rax
 1666      FFFFFF
 1667 0953 48894238 		movq	%rax, 56(%rdx)
 1668 0957 488B8530 		movq	-208(%rbp), %rax
 1668      FFFFFF
 1669 095e 48894240 		movq	%rax, 64(%rdx)
 1670 0962 488B8538 		movq	-200(%rbp), %rax
 1670      FFFFFF
 1671 0969 48894248 		movq	%rax, 72(%rdx)
 1672 096d 488B8540 		movq	-192(%rbp), %rax
 1672      FFFFFF
 1673 0974 48894250 		movq	%rax, 80(%rdx)
 1674 0978 488B8548 		movq	-184(%rbp), %rax
 1674      FFFFFF
 1675 097f 48894258 		movq	%rax, 88(%rdx)
 1676 0983 488B8550 		movq	-176(%rbp), %rax
 1676      FFFFFF
 1677 098a 48894260 		movq	%rax, 96(%rdx)
 1678 098e 488B8558 		movq	-168(%rbp), %rax
 1678      FFFFFF
 1679 0995 48894268 		movq	%rax, 104(%rdx)
 1680 0999 488B8560 		movq	-160(%rbp), %rax
 1680      FFFFFF
 1681 09a0 48894270 		movq	%rax, 112(%rdx)
 1682 09a4 488B8568 		movq	-152(%rbp), %rax
 1682      FFFFFF
 1683 09ab 48894278 		movq	%rax, 120(%rdx)
 1684 09af 488B45F8 		movq	-8(%rbp), %rax
 1685 09b3 64483304 		xorq	%fs:40, %rax
 1685      25280000 
 1685      00
 1686 09bc 7535     		jne	.L214
 1687 09be C9       		leave
 1688              		.cfi_remember_state
 1689              		.cfi_def_cfa 7, 8
 1690 09bf C3       		ret
 1691              		.p2align 4,,10
 1692              		.p2align 3
 1693              	.L213:
 1694              		.cfi_restore_state
 1695 09c0 4989E2   		movq	%rsp, %r10
 1696 09c3 C785DCFD 		movl	$0, -548(%rbp)
 1696      FFFF0000 
 1696      0000
 1697 09cd C785D0FD 		movl	$0, -560(%rbp)
 1697      FFFF0000 
 1697      0000
 1698 09d7 C785D4FD 		movl	$0, -556(%rbp)
 1698      FFFF0000 
 1698      0000
 1699 09e1 C785D8FD 		movl	$0, -552(%rbp)
 1699      FFFF0000 
 1699      0000
 1700 09eb 4531C0   		xorl	%r8d, %r8d
 1701 09ee E9FDFEFF 		jmp	.L202
 1701      FF
 1702              	.L214:
 1703 09f3 E8000000 		call	__stack_chk_fail
 1703      00
 1704              		.cfi_endproc
 1705              	.LFE54:
 1707              		.section	.text.unlikely
 1708              	.LCOLDE21:
 1709              		.text
 1710              	.LHOTE21:
 1711              		.section	.text.unlikely
 1712              	.LCOLDB22:
 1713              		.text
 1714              	.LHOTB22:
 1715 09f8 0F1F8400 		.p2align 4,,15
 1715      00000000 
 1716              		.globl	decrypter
 1718              	decrypter:
 1719              	.LFB55:
 1720              		.cfi_startproc
 1721 0a00 55       		pushq	%rbp
 1722              		.cfi_def_cfa_offset 16
 1723              		.cfi_offset 6, -16
 1724 0a01 4531C0   		xorl	%r8d, %r8d
 1725 0a04 4889E5   		movq	%rsp, %rbp
 1726              		.cfi_def_cfa_register 6
 1727 0a07 4881EC20 		subq	$544, %rsp
 1727      020000
 1728 0a0e 64488B04 		movq	%fs:40, %rax
 1728      25280000 
 1728      00
 1729 0a17 488945F8 		movq	%rax, -8(%rbp)
 1730 0a1b 31C0     		xorl	%eax, %eax
 1731 0a1d 488B07   		movq	(%rdi), %rax
 1732 0a20 488985F0 		movq	%rax, -272(%rbp)
 1732      FEFFFF
 1733 0a27 488B4708 		movq	8(%rdi), %rax
 1734 0a2b 488985F8 		movq	%rax, -264(%rbp)
 1734      FEFFFF
 1735 0a32 488B4710 		movq	16(%rdi), %rax
 1736 0a36 48898500 		movq	%rax, -256(%rbp)
 1736      FFFFFF
 1737 0a3d 488B4718 		movq	24(%rdi), %rax
 1738 0a41 48898508 		movq	%rax, -248(%rbp)
 1738      FFFFFF
 1739 0a48 488B4720 		movq	32(%rdi), %rax
 1740 0a4c 48898510 		movq	%rax, -240(%rbp)
 1740      FFFFFF
 1741 0a53 488B4728 		movq	40(%rdi), %rax
 1742 0a57 48898518 		movq	%rax, -232(%rbp)
 1742      FFFFFF
 1743 0a5e 488B4730 		movq	48(%rdi), %rax
 1744 0a62 48898520 		movq	%rax, -224(%rbp)
 1744      FFFFFF
 1745 0a69 488B4738 		movq	56(%rdi), %rax
 1746 0a6d 48898528 		movq	%rax, -216(%rbp)
 1746      FFFFFF
 1747 0a74 488B4740 		movq	64(%rdi), %rax
 1748 0a78 48898530 		movq	%rax, -208(%rbp)
 1748      FFFFFF
 1749 0a7f 488B4748 		movq	72(%rdi), %rax
 1750 0a83 48898538 		movq	%rax, -200(%rbp)
 1750      FFFFFF
 1751 0a8a 488B4750 		movq	80(%rdi), %rax
 1752 0a8e 48898540 		movq	%rax, -192(%rbp)
 1752      FFFFFF
 1753 0a95 488B4758 		movq	88(%rdi), %rax
 1754 0a99 48898548 		movq	%rax, -184(%rbp)
 1754      FFFFFF
 1755 0aa0 488B4760 		movq	96(%rdi), %rax
 1756 0aa4 48898550 		movq	%rax, -176(%rbp)
 1756      FFFFFF
 1757 0aab 488B4768 		movq	104(%rdi), %rax
 1758 0aaf 48898558 		movq	%rax, -168(%rbp)
 1758      FFFFFF
 1759 0ab6 488B4770 		movq	112(%rdi), %rax
 1760 0aba 48898560 		movq	%rax, -160(%rbp)
 1760      FFFFFF
 1761 0ac1 488B4778 		movq	120(%rdi), %rax
 1762 0ac5 48898568 		movq	%rax, -152(%rbp)
 1762      FFFFFF
 1763 0acc 488B06   		movq	(%rsi), %rax
 1764 0acf 48898570 		movq	%rax, -400(%rbp)
 1764      FEFFFF
 1765 0ad6 488B4608 		movq	8(%rsi), %rax
 1766 0ada 48898578 		movq	%rax, -392(%rbp)
 1766      FEFFFF
 1767 0ae1 488B4610 		movq	16(%rsi), %rax
 1768 0ae5 48898580 		movq	%rax, -384(%rbp)
 1768      FEFFFF
 1769 0aec 488B4618 		movq	24(%rsi), %rax
 1770 0af0 48898588 		movq	%rax, -376(%rbp)
 1770      FEFFFF
 1771 0af7 488B4620 		movq	32(%rsi), %rax
 1772 0afb 48898590 		movq	%rax, -368(%rbp)
 1772      FEFFFF
 1773 0b02 488B4628 		movq	40(%rsi), %rax
 1774 0b06 48898598 		movq	%rax, -360(%rbp)
 1774      FEFFFF
 1775 0b0d 488B4630 		movq	48(%rsi), %rax
 1776 0b11 488985A0 		movq	%rax, -352(%rbp)
 1776      FEFFFF
 1777 0b18 488B4638 		movq	56(%rsi), %rax
 1778 0b1c 488985A8 		movq	%rax, -344(%rbp)
 1778      FEFFFF
 1779 0b23 488B4640 		movq	64(%rsi), %rax
 1780 0b27 488985B0 		movq	%rax, -336(%rbp)
 1780      FEFFFF
 1781 0b2e 488B4648 		movq	72(%rsi), %rax
 1782 0b32 488985B8 		movq	%rax, -328(%rbp)
 1782      FEFFFF
 1783 0b39 488B4650 		movq	80(%rsi), %rax
 1784 0b3d 488985C0 		movq	%rax, -320(%rbp)
 1784      FEFFFF
 1785 0b44 488B4658 		movq	88(%rsi), %rax
 1786 0b48 488985C8 		movq	%rax, -312(%rbp)
 1786      FEFFFF
 1787 0b4f 488B4660 		movq	96(%rsi), %rax
 1788 0b53 488985D0 		movq	%rax, -304(%rbp)
 1788      FEFFFF
 1789 0b5a 488B4668 		movq	104(%rsi), %rax
 1790 0b5e 488985D8 		movq	%rax, -296(%rbp)
 1790      FEFFFF
 1791 0b65 488B4670 		movq	112(%rsi), %rax
 1792 0b69 488985E0 		movq	%rax, -288(%rbp)
 1792      FEFFFF
 1793 0b70 488B4678 		movq	120(%rsi), %rax
 1794 0b74 488985E8 		movq	%rax, -280(%rbp)
 1794      FEFFFF
 1795 0b7b 488D8680 		leaq	128(%rsi), %rax
 1795      000000
 1796              		.p2align 4,,10
 1797 0b82 660F1F44 		.p2align 3
 1797      0000
 1798              	.L217:
 1799 0b88 833E01   		cmpl	$1, (%rsi)
 1800 0b8b 4183D000 		adcl	$0, %r8d
 1801 0b8f 4883C604 		addq	$4, %rsi
 1802 0b93 4839C6   		cmpq	%rax, %rsi
 1803 0b96 75F0     		jne	.L217
 1804 0b98 660F6F95 		movdqa	-400(%rbp), %xmm2
 1804      70FEFFFF 
 1805 0ba0 4989E1   		movq	%rsp, %r9
 1806 0ba3 C78570FF 		movl	$0, -144(%rbp)
 1806      FFFF0000 
 1806      0000
 1807 0bad C78574FF 		movl	$0, -140(%rbp)
 1807      FFFF0000 
 1807      0000
 1808 0bb7 660F6F8D 		movdqa	-384(%rbp), %xmm1
 1808      80FEFFFF 
 1809 0bbf 660F6FEA 		movdqa	%xmm2, %xmm5
 1810 0bc3 C78578FF 		movl	$0, -136(%rbp)
 1810      FFFF0000 
 1810      0000
 1811 0bcd C7857CFF 		movl	$0, -132(%rbp)
 1811      FFFF0000 
 1811      0000
 1812 0bd7 660F6F85 		movdqa	-368(%rbp), %xmm0
 1812      90FEFFFF 
 1813 0bdf 0FC6E988 		shufps	$136, %xmm1, %xmm5
 1814 0be3 0FC6D1DD 		shufps	$221, %xmm1, %xmm2
 1815 0be7 660F6F9D 		movdqa	-352(%rbp), %xmm3
 1815      A0FEFFFF 
 1816 0bef 660F6FC8 		movdqa	%xmm0, %xmm1
 1817 0bf3 660F6FFD 		movdqa	%xmm5, %xmm7
 1818 0bf7 0FC6CB88 		shufps	$136, %xmm3, %xmm1
 1819 0bfb 660F6FA5 		movdqa	-336(%rbp), %xmm4
 1819      B0FEFFFF 
 1820 0c03 0FC6C3DD 		shufps	$221, %xmm3, %xmm0
 1821 0c07 660F6FF2 		movdqa	%xmm2, %xmm6
 1822 0c0b 66440F6F 		movdqa	-304(%rbp), %xmm9
 1822      8DD0FEFF 
 1822      FF
 1823 0c14 0FC6F988 		shufps	$136, %xmm1, %xmm7
 1824 0c18 0FC6E9DD 		shufps	$221, %xmm1, %xmm5
 1825 0c1c 660F6FDC 		movdqa	%xmm4, %xmm3
 1826 0c20 660F6F8D 		movdqa	-320(%rbp), %xmm1
 1826      C0FEFFFF 
 1827 0c28 0FC6F088 		shufps	$136, %xmm0, %xmm6
 1828 0c2c 0FC6D0DD 		shufps	$221, %xmm0, %xmm2
 1829 0c30 660F6F85 		movdqa	-288(%rbp), %xmm0
 1829      E0FEFFFF 
 1830 0c38 0FC6D988 		shufps	$136, %xmm1, %xmm3
 1831 0c3c 0FC6E1DD 		shufps	$221, %xmm1, %xmm4
 1832 0c40 66410F6F 		movdqa	%xmm9, %xmm1
 1832      C9
 1833 0c45 440FC6C8 		shufps	$221, %xmm0, %xmm9
 1833      DD
 1834 0c4a 0FC6C888 		shufps	$136, %xmm0, %xmm1
 1835 0c4e 660F6FC3 		movdqa	%xmm3, %xmm0
 1836 0c52 0F29BDF0 		movaps	%xmm7, -528(%rbp)
 1836      FDFFFF
 1837 0c59 66440F6F 		movdqa	%xmm4, %xmm8
 1837      C4
 1838 0c5e 0FC6C188 		shufps	$136, %xmm1, %xmm0
 1839 0c62 0FC6D9DD 		shufps	$221, %xmm1, %xmm3
 1840 0c66 660F6F0D 		movdqa	.LC20(%rip), %xmm1
 1840      00000000 
 1841 0c6e 450FC6C1 		shufps	$136, %xmm9, %xmm8
 1841      88
 1842 0c73 410FC6E1 		shufps	$221, %xmm9, %xmm4
 1842      DD
 1843 0c78 660F76F9 		pcmpeqd	%xmm1, %xmm7
 1844 0c7c 0F298500 		movaps	%xmm0, -512(%rbp)
 1844      FEFFFF
 1845 0c83 660F76C1 		pcmpeqd	%xmm1, %xmm0
 1846 0c87 660FDBF9 		pand	%xmm1, %xmm7
 1847 0c8b 0F29B510 		movaps	%xmm6, -496(%rbp)
 1847      FEFFFF
 1848 0c92 660FDBC1 		pand	%xmm1, %xmm0
 1849 0c96 660F76F1 		pcmpeqd	%xmm1, %xmm6
 1850 0c9a 0F29AD30 		movaps	%xmm5, -464(%rbp)
 1850      FEFFFF
 1851 0ca1 660FDBF1 		pand	%xmm1, %xmm6
 1852 0ca5 660F76E9 		pcmpeqd	%xmm1, %xmm5
 1853 0ca9 660FFEC7 		paddd	%xmm7, %xmm0
 1854 0cad 660F6FF8 		movdqa	%xmm0, %xmm7
 1855 0cb1 0F299D40 		movaps	%xmm3, -448(%rbp)
 1855      FEFFFF
 1856 0cb8 660F73DF 		psrldq	$8, %xmm7
 1856      08
 1857 0cbd 660FFEF8 		paddd	%xmm0, %xmm7
 1858 0cc1 660F6FC7 		movdqa	%xmm7, %xmm0
 1859 0cc5 660F76D9 		pcmpeqd	%xmm1, %xmm3
 1860 0cc9 660F73D8 		psrldq	$4, %xmm0
 1860      04
 1861 0cce 660FFEC7 		paddd	%xmm7, %xmm0
 1862 0cd2 660F7EC7 		movd	%xmm0, %edi
 1863 0cd6 66410F6F 		movdqa	%xmm8, %xmm0
 1863      C0
 1864 0cdb 660FDBD9 		pand	%xmm1, %xmm3
 1865 0cdf 0F299550 		movaps	%xmm2, -432(%rbp)
 1865      FEFFFF
 1866 0ce6 660F76C1 		pcmpeqd	%xmm1, %xmm0
 1867 0cea 83E701   		andl	$1, %edi
 1868 0ced 660F76D1 		pcmpeqd	%xmm1, %xmm2
 1869 0cf1 660FDBC1 		pand	%xmm1, %xmm0
 1870 0cf5 0F29A560 		movaps	%xmm4, -416(%rbp)
 1870      FEFFFF
 1871 0cfc 660F76E1 		pcmpeqd	%xmm1, %xmm4
 1872 0d00 660FDBD1 		pand	%xmm1, %xmm2
 1873 0d04 660FFEC6 		paddd	%xmm6, %xmm0
 1874 0d08 660F6FF0 		movdqa	%xmm0, %xmm6
 1875 0d0c 440F2985 		movaps	%xmm8, -480(%rbp)
 1875      20FEFFFF 
 1876 0d14 660F73DE 		psrldq	$8, %xmm6
 1876      08
 1877 0d19 660FFEF0 		paddd	%xmm0, %xmm6
 1878 0d1d 660F6FC6 		movdqa	%xmm6, %xmm0
 1879 0d21 660F73D8 		psrldq	$4, %xmm0
 1879      04
 1880 0d26 660FFEC6 		paddd	%xmm6, %xmm0
 1881 0d2a 660F7EC0 		movd	%xmm0, %eax
 1882 0d2e 660F6FC5 		movdqa	%xmm5, %xmm0
 1883 0d32 83E001   		andl	$1, %eax
 1884 0d35 660FDBC1 		pand	%xmm1, %xmm0
 1885 0d39 01C0     		addl	%eax, %eax
 1886 0d3b 660FDBCC 		pand	%xmm4, %xmm1
 1887 0d3f 660FFEC3 		paddd	%xmm3, %xmm0
 1888 0d43 660F6FD8 		movdqa	%xmm0, %xmm3
 1889 0d47 660FFECA 		paddd	%xmm2, %xmm1
 1890 0d4b 660F73DB 		psrldq	$8, %xmm3
 1890      08
 1891 0d50 660FFED8 		paddd	%xmm0, %xmm3
 1892 0d54 660F6FC3 		movdqa	%xmm3, %xmm0
 1893 0d58 660F73D8 		psrldq	$4, %xmm0
 1893      04
 1894 0d5d 660FFEC3 		paddd	%xmm3, %xmm0
 1895 0d61 660F7EC6 		movd	%xmm0, %esi
 1896 0d65 660F6FC1 		movdqa	%xmm1, %xmm0
 1897 0d69 83E601   		andl	$1, %esi
 1898 0d6c 660F73D8 		psrldq	$8, %xmm0
 1898      08
 1899 0d71 660FFEC8 		paddd	%xmm0, %xmm1
 1900 0d75 660F6FC1 		movdqa	%xmm1, %xmm0
 1901 0d79 C1E602   		sall	$2, %esi
 1902 0d7c 660F73D8 		psrldq	$4, %xmm0
 1902      04
 1903 0d81 660FFEC8 		paddd	%xmm0, %xmm1
 1904 0d85 660F7EC9 		movd	%xmm1, %ecx
 1905 0d89 83E101   		andl	$1, %ecx
 1906 0d8c C1E103   		sall	$3, %ecx
 1907 0d8f 09F1     		orl	%esi, %ecx
 1908 0d91 09CF     		orl	%ecx, %edi
 1909 0d93 09C7     		orl	%eax, %edi
 1910 0d95 83C70F   		addl	$15, %edi
 1911 0d98 83E70F   		andl	$15, %edi
 1912 0d9b 0F846C02 		je	.L227
 1912      0000
 1913 0da1 488D8D70 		leaq	-144(%rbp), %rcx
 1913      FFFFFF
 1914 0da8 89F8     		movl	%edi, %eax
 1915 0daa 660F1F44 		.p2align 4,,10
 1915      0000
 1916              		.p2align 3
 1917              	.L219:
 1918 0db0 89C6     		movl	%eax, %esi
 1919 0db2 4883C104 		addq	$4, %rcx
 1920 0db6 83E601   		andl	$1, %esi
 1921 0db9 8971FC   		movl	%esi, -4(%rcx)
 1922 0dbc D1F8     		sarl	%eax
 1923 0dbe 75F0     		jne	.L219
 1924 0dc0 660F6E95 		movd	-132(%rbp), %xmm2
 1924      7CFFFFFF 
 1925 0dc8 660F6E8D 		movd	-136(%rbp), %xmm1
 1925      78FFFFFF 
 1926 0dd0 660F6E9D 		movd	-140(%rbp), %xmm3
 1926      74FFFFFF 
 1927 0dd8 660F6E85 		movd	-144(%rbp), %xmm0
 1927      70FFFFFF 
 1928              	.L218:
 1929 0de0 4C89CC   		movq	%r9, %rsp
 1930 0de3 4531C9   		xorl	%r9d, %r9d
 1931 0de6 4585C0   		testl	%r8d, %r8d
 1932 0de9 0F844901 		je	.L221
 1932      0000
 1933 0def 90       		.p2align 4,,10
 1934              		.p2align 3
 1935              	.L228:
 1936 0df0 660F62CA 		punpckldq	%xmm2, %xmm1
 1937 0df4 83C70F   		addl	$15, %edi
 1938 0df7 4989E2   		movq	%rsp, %r10
 1939 0dfa 660F62C3 		punpckldq	%xmm3, %xmm0
 1940 0dfe 83E70F   		andl	$15, %edi
 1941 0e01 85FF     		testl	%edi, %edi
 1942 0e03 C785E0FD 		movl	$0, -544(%rbp)
 1942      FFFF0000 
 1942      0000
 1943 0e0d C785E4FD 		movl	$0, -540(%rbp)
 1943      FFFF0000 
 1943      0000
 1944 0e17 C785E8FD 		movl	$0, -536(%rbp)
 1944      FFFF0000 
 1944      0000
 1945 0e21 C785ECFD 		movl	$0, -532(%rbp)
 1945      FFFF0000 
 1945      0000
 1946 0e2b 488D8DE0 		leaq	-544(%rbp), %rcx
 1946      FDFFFF
 1947 0e32 660F6CC1 		punpcklqdq	%xmm1, %xmm0
 1948 0e36 89F8     		movl	%edi, %eax
 1949 0e38 660F6F8D 		movdqa	-272(%rbp), %xmm1
 1949      F0FEFFFF 
 1950 0e40 660FEFC8 		pxor	%xmm0, %xmm1
 1951 0e44 0F298570 		movaps	%xmm0, -144(%rbp)
 1951      FFFFFF
 1952 0e4b 0F298DF0 		movaps	%xmm1, -272(%rbp)
 1952      FEFFFF
 1953 0e52 0F294580 		movaps	%xmm0, -128(%rbp)
 1954 0e56 0F294590 		movaps	%xmm0, -112(%rbp)
 1955 0e5a 0F2945A0 		movaps	%xmm0, -96(%rbp)
 1956 0e5e 0F2945B0 		movaps	%xmm0, -80(%rbp)
 1957 0e62 0F2945C0 		movaps	%xmm0, -64(%rbp)
 1958 0e66 0F2945D0 		movaps	%xmm0, -48(%rbp)
 1959 0e6a 0F2945E0 		movaps	%xmm0, -32(%rbp)
 1960 0e6e 660F6F8D 		movdqa	-256(%rbp), %xmm1
 1960      00FFFFFF 
 1961 0e76 660FEFC8 		pxor	%xmm0, %xmm1
 1962 0e7a 0F298D00 		movaps	%xmm1, -256(%rbp)
 1962      FFFFFF
 1963 0e81 660F6F8D 		movdqa	-240(%rbp), %xmm1
 1963      10FFFFFF 
 1964 0e89 660FEFC8 		pxor	%xmm0, %xmm1
 1965 0e8d 0F298D10 		movaps	%xmm1, -240(%rbp)
 1965      FFFFFF
 1966 0e94 660F6F8D 		movdqa	-224(%rbp), %xmm1
 1966      20FFFFFF 
 1967 0e9c 660FEFC8 		pxor	%xmm0, %xmm1
 1968 0ea0 0F298D20 		movaps	%xmm1, -224(%rbp)
 1968      FFFFFF
 1969 0ea7 660F6F8D 		movdqa	-208(%rbp), %xmm1
 1969      30FFFFFF 
 1970 0eaf 660FEFC8 		pxor	%xmm0, %xmm1
 1971 0eb3 0F298D30 		movaps	%xmm1, -208(%rbp)
 1971      FFFFFF
 1972 0eba 660F6F8D 		movdqa	-192(%rbp), %xmm1
 1972      40FFFFFF 
 1973 0ec2 660FEFC8 		pxor	%xmm0, %xmm1
 1974 0ec6 0F298D40 		movaps	%xmm1, -192(%rbp)
 1974      FFFFFF
 1975 0ecd 660F6F8D 		movdqa	-176(%rbp), %xmm1
 1975      50FFFFFF 
 1976 0ed5 660FEFC8 		pxor	%xmm0, %xmm1
 1977 0ed9 660FEF85 		pxor	-160(%rbp), %xmm0
 1977      60FFFFFF 
 1978 0ee1 0F298D50 		movaps	%xmm1, -176(%rbp)
 1978      FFFFFF
 1979 0ee8 0F298560 		movaps	%xmm0, -160(%rbp)
 1979      FFFFFF
 1980 0eef 0F840301 		je	.L235
 1980      0000
 1981              		.p2align 4,,10
 1982 0ef5 0F1F00   		.p2align 3
 1983              	.L229:
 1984 0ef8 89C6     		movl	%eax, %esi
 1985 0efa 4883C104 		addq	$4, %rcx
 1986 0efe 83E601   		andl	$1, %esi
 1987 0f01 8971FC   		movl	%esi, -4(%rcx)
 1988 0f04 D1F8     		sarl	%eax
 1989 0f06 75F0     		jne	.L229
 1990 0f08 660F6E95 		movd	-532(%rbp), %xmm2
 1990      ECFDFFFF 
 1991 0f10 660F6E8D 		movd	-536(%rbp), %xmm1
 1991      E8FDFFFF 
 1992 0f18 660F6E9D 		movd	-540(%rbp), %xmm3
 1992      E4FDFFFF 
 1993 0f20 660F6E85 		movd	-544(%rbp), %xmm0
 1993      E0FDFFFF 
 1994              	.L225:
 1995 0f28 4183C101 		addl	$1, %r9d
 1996 0f2c 4C89D4   		movq	%r10, %rsp
 1997 0f2f 4539C8   		cmpl	%r9d, %r8d
 1998 0f32 0F85B8FE 		jne	.L228
 1998      FFFF
 1999              	.L221:
 2000 0f38 488B85F0 		movq	-272(%rbp), %rax
 2000      FEFFFF
 2001 0f3f 488902   		movq	%rax, (%rdx)
 2002 0f42 488B85F8 		movq	-264(%rbp), %rax
 2002      FEFFFF
 2003 0f49 48894208 		movq	%rax, 8(%rdx)
 2004 0f4d 488B8500 		movq	-256(%rbp), %rax
 2004      FFFFFF
 2005 0f54 48894210 		movq	%rax, 16(%rdx)
 2006 0f58 488B8508 		movq	-248(%rbp), %rax
 2006      FFFFFF
 2007 0f5f 48894218 		movq	%rax, 24(%rdx)
 2008 0f63 488B8510 		movq	-240(%rbp), %rax
 2008      FFFFFF
 2009 0f6a 48894220 		movq	%rax, 32(%rdx)
 2010 0f6e 488B8518 		movq	-232(%rbp), %rax
 2010      FFFFFF
 2011 0f75 48894228 		movq	%rax, 40(%rdx)
 2012 0f79 488B8520 		movq	-224(%rbp), %rax
 2012      FFFFFF
 2013 0f80 48894230 		movq	%rax, 48(%rdx)
 2014 0f84 488B8528 		movq	-216(%rbp), %rax
 2014      FFFFFF
 2015 0f8b 48894238 		movq	%rax, 56(%rdx)
 2016 0f8f 488B8530 		movq	-208(%rbp), %rax
 2016      FFFFFF
 2017 0f96 48894240 		movq	%rax, 64(%rdx)
 2018 0f9a 488B8538 		movq	-200(%rbp), %rax
 2018      FFFFFF
 2019 0fa1 48894248 		movq	%rax, 72(%rdx)
 2020 0fa5 488B8540 		movq	-192(%rbp), %rax
 2020      FFFFFF
 2021 0fac 48894250 		movq	%rax, 80(%rdx)
 2022 0fb0 488B8548 		movq	-184(%rbp), %rax
 2022      FFFFFF
 2023 0fb7 48894258 		movq	%rax, 88(%rdx)
 2024 0fbb 488B8550 		movq	-176(%rbp), %rax
 2024      FFFFFF
 2025 0fc2 48894260 		movq	%rax, 96(%rdx)
 2026 0fc6 488B8558 		movq	-168(%rbp), %rax
 2026      FFFFFF
 2027 0fcd 48894268 		movq	%rax, 104(%rdx)
 2028 0fd1 488B8560 		movq	-160(%rbp), %rax
 2028      FFFFFF
 2029 0fd8 48894270 		movq	%rax, 112(%rdx)
 2030 0fdc 488B8568 		movq	-152(%rbp), %rax
 2030      FFFFFF
 2031 0fe3 48894278 		movq	%rax, 120(%rdx)
 2032 0fe7 488B45F8 		movq	-8(%rbp), %rax
 2033 0feb 64483304 		xorq	%fs:40, %rax
 2033      25280000 
 2033      00
 2034 0ff4 752C     		jne	.L236
 2035 0ff6 C9       		leave
 2036              		.cfi_remember_state
 2037              		.cfi_def_cfa 7, 8
 2038 0ff7 C3       		ret
 2039              	.L235:
 2040              		.cfi_restore_state
 2041 0ff8 660FEFD2 		pxor	%xmm2, %xmm2
 2042 0ffc 660FEFC9 		pxor	%xmm1, %xmm1
 2043 1000 660FEFDB 		pxor	%xmm3, %xmm3
 2044 1004 660FEFC0 		pxor	%xmm0, %xmm0
 2045 1008 E91BFFFF 		jmp	.L225
 2045      FF
 2046              	.L227:
 2047 100d 660FEFD2 		pxor	%xmm2, %xmm2
 2048 1011 660FEFC9 		pxor	%xmm1, %xmm1
 2049 1015 660FEFDB 		pxor	%xmm3, %xmm3
 2050 1019 660FEFC0 		pxor	%xmm0, %xmm0
 2051 101d E9BEFDFF 		jmp	.L218
 2051      FF
 2052              	.L236:
 2053 1022 E8000000 		call	__stack_chk_fail
 2053      00
 2054              		.cfi_endproc
 2055              	.LFE55:
 2057              		.section	.text.unlikely
 2058              	.LCOLDE22:
 2059              		.text
 2060              	.LHOTE22:
 2061              		.section	.text.unlikely
 2062              	.LCOLDB23:
 2063              		.text
 2064              	.LHOTB23:
 2065 1027 660F1F84 		.p2align 4,,15
 2065      00000000 
 2065      00
 2066              		.globl	convert_to_binary
 2068              	convert_to_binary:
 2069              	.LFB56:
 2070              		.cfi_startproc
 2071 1030 8B06     		movl	(%rsi), %eax
 2072 1032 4883C71C 		addq	$28, %rdi
 2073 1036 85C0     		testl	%eax, %eax
 2074 1038 741C     		je	.L237
 2075 103a 660F1F44 		.p2align 4,,10
 2075      0000
 2076              		.p2align 3
 2077              	.L241:
 2078 1040 89C2     		movl	%eax, %edx
 2079 1042 83E001   		andl	$1, %eax
 2080 1045 4883EF04 		subq	$4, %rdi
 2081 1049 D1EA     		shrl	%edx
 2082 104b 8916     		movl	%edx, (%rsi)
 2083 104d 894704   		movl	%eax, 4(%rdi)
 2084 1050 8B06     		movl	(%rsi), %eax
 2085 1052 85C0     		testl	%eax, %eax
 2086 1054 75EA     		jne	.L241
 2087              	.L237:
 2088 1056 F3C3     		rep ret
 2089              		.cfi_endproc
 2090              	.LFE56:
 2092              		.section	.text.unlikely
 2093              	.LCOLDE23:
 2094              		.text
 2095              	.LHOTE23:
 2096              		.section	.rodata.str1.1
 2097              	.LC24:
 2098 003e 4572726F 		.string	"Error, not Running"
 2098      722C206E 
 2098      6F742052 
 2098      756E6E69 
 2098      6E6700
 2099              	.LC25:
 2100 0051 54686520 		.string	"The x and y"
 2100      7820616E 
 2100      64207900 
 2101              	.LC26:
 2102 005d 25730A00 		.string	"%s\n"
 2103              	.LC27:
 2104 0061 2025642C 		.string	" %d,%d,%d,%d,%d"
 2104      25642C25 
 2104      642C2564 
 2104      2C256400 
 2105              		.section	.rodata
 2106              		.align 16
 2107              	.LC0:
 2108 0000 303030   		.ascii	"000"
 2109 0003 303031   		.ascii	"001"
 2110 0006 303130   		.ascii	"010"
 2111 0009 303131   		.ascii	"011"
 2112 000c 313030   		.ascii	"100"
 2113 000f 313031   		.ascii	"101"
 2114 0012 313130   		.ascii	"110"
 2115 0015 313131   		.ascii	"111"
 2116              		.section	.text.unlikely
 2117              	.LCOLDB28:
 2118              		.text
 2119              	.LHOTB28:
 2120 1058 0F1F8400 		.p2align 4,,15
 2120      00000000 
 2121              		.globl	print
 2123              	print:
 2124              	.LFB57:
 2125              		.cfi_startproc
 2126 1060 4156     		pushq	%r14
 2127              		.cfi_def_cfa_offset 16
 2128              		.cfi_offset 14, -16
 2129 1062 4155     		pushq	%r13
 2130              		.cfi_def_cfa_offset 24
 2131              		.cfi_offset 13, -24
 2132 1064 4189F6   		movl	%esi, %r14d
 2133 1067 4154     		pushq	%r12
 2134              		.cfi_def_cfa_offset 32
 2135              		.cfi_offset 12, -32
 2136 1069 55       		pushq	%rbp
 2137              		.cfi_def_cfa_offset 40
 2138              		.cfi_offset 6, -40
 2139 106a 4189FD   		movl	%edi, %r13d
 2140 106d 53       		pushq	%rbx
 2141              		.cfi_def_cfa_offset 48
 2142              		.cfi_offset 3, -48
 2143 106e 4889CD   		movq	%rcx, %rbp
 2144 1071 4889D3   		movq	%rdx, %rbx
 2145 1074 4881ECF0 		subq	$240, %rsp
 2145      000000
 2146              		.cfi_def_cfa_offset 288
 2147 107b C7421CFF 		movl	$-1, 28(%rdx)
 2147      FFFFFF
 2148 1082 C7423CFF 		movl	$-1, 60(%rdx)
 2148      FFFFFF
 2149 1089 64488B04 		movq	%fs:40, %rax
 2149      25280000 
 2149      00
 2150 1092 48898424 		movq	%rax, 232(%rsp)
 2150      E8000000 
 2151 109a 31C0     		xorl	%eax, %eax
 2152 109c 488B0500 		movq	.LC0(%rip), %rax
 2152      000000
 2153 10a3 4885C9   		testq	%rcx, %rcx
 2154 10a6 C7442440 		movl	$-1, 64(%rsp)
 2154      FFFFFFFF 
 2155 10ae C7442444 		movl	$-1, 68(%rsp)
 2155      FFFFFFFF 
 2156 10b6 C7442448 		movl	$-1, 72(%rsp)
 2156      FFFFFFFF 
 2157 10be C744244C 		movl	$-1, 76(%rsp)
 2157      FFFFFFFF 
 2158 10c6 C7442450 		movl	$-1, 80(%rsp)
 2158      FFFFFFFF 
 2159 10ce 48894424 		movq	%rax, 32(%rsp)
 2159      20
 2160 10d3 488B0500 		movq	.LC0+8(%rip), %rax
 2160      000000
 2161 10da C7442454 		movl	$-1, 84(%rsp)
 2161      FFFFFFFF 
 2162 10e2 C7442458 		movl	$-1, 88(%rsp)
 2162      FFFFFFFF 
 2163 10ea C744245C 		movl	$-1, 92(%rsp)
 2163      FFFFFFFF 
 2164 10f2 C7442460 		movl	$-1, 96(%rsp)
 2164      FFFFFFFF 
 2165 10fa 48894424 		movq	%rax, 40(%rsp)
 2165      28
 2166 10ff 488B0500 		movq	.LC0+16(%rip), %rax
 2166      000000
 2167 1106 C7442464 		movl	$-1, 100(%rsp)
 2167      FFFFFFFF 
 2168 110e C7442468 		movl	$-1, 104(%rsp)
 2168      FFFFFFFF 
 2169 1116 C744246C 		movl	$-1, 108(%rsp)
 2169      FFFFFFFF 
 2170 111e C7442470 		movl	$-1, 112(%rsp)
 2170      FFFFFFFF 
 2171 1126 48894424 		movq	%rax, 48(%rsp)
 2171      30
 2172 112b C7442474 		movl	$-1, 116(%rsp)
 2172      FFFFFFFF 
 2173 1133 C7442478 		movl	$-1, 120(%rsp)
 2173      FFFFFFFF 
 2174 113b C7425CFF 		movl	$-1, 92(%rdx)
 2174      FFFFFF
 2175 1142 C744247C 		movl	$-1, 124(%rsp)
 2175      FFFFFFFF 
 2176 114a C7842480 		movl	$-1, 128(%rsp)
 2176      000000FF 
 2176      FFFFFF
 2177 1155 C7842484 		movl	$-1, 132(%rsp)
 2177      000000FF 
 2177      FFFFFF
 2178 1160 C7842488 		movl	$-1, 136(%rsp)
 2178      000000FF 
 2178      FFFFFF
 2179 116b C784248C 		movl	$-1, 140(%rsp)
 2179      000000FF 
 2179      FFFFFF
 2180 1176 C7427CFF 		movl	$-1, 124(%rdx)
 2180      FFFFFF
 2181 117d C7842490 		movl	$-1, 144(%rsp)
 2181      000000FF 
 2181      FFFFFF
 2182 1188 C7842494 		movl	$-1, 148(%rsp)
 2182      000000FF 
 2182      FFFFFF
 2183 1193 C7842498 		movl	$-1, 152(%rsp)
 2183      000000FF 
 2183      FFFFFF
 2184 119e C784249C 		movl	$-1, 156(%rsp)
 2184      000000FF 
 2184      FFFFFF
 2185 11a9 C78424A0 		movl	$-1, 160(%rsp)
 2185      000000FF 
 2185      FFFFFF
 2186 11b4 C7829C00 		movl	$-1, 156(%rdx)
 2186      0000FFFF 
 2186      FFFF
 2187 11be C78424A4 		movl	$-1, 164(%rsp)
 2187      000000FF 
 2187      FFFFFF
 2188 11c9 C78424A8 		movl	$-1, 168(%rsp)
 2188      000000FF 
 2188      FFFFFF
 2189 11d4 C78424AC 		movl	$-1, 172(%rsp)
 2189      000000FF 
 2189      FFFFFF
 2190 11df C78424B0 		movl	$-1, 176(%rsp)
 2190      000000FF 
 2190      FFFFFF
 2191 11ea C78424B4 		movl	$-1, 180(%rsp)
 2191      000000FF 
 2191      FFFFFF
 2192 11f5 C782BC00 		movl	$-1, 188(%rdx)
 2192      0000FFFF 
 2192      FFFF
 2193 11ff C78424B8 		movl	$-1, 184(%rsp)
 2193      000000FF 
 2193      FFFFFF
 2194 120a C78424BC 		movl	$-1, 188(%rsp)
 2194      000000FF 
 2194      FFFFFF
 2195 1215 C78424C0 		movl	$-1, 192(%rsp)
 2195      000000FF 
 2195      FFFFFF
 2196 1220 C78424C4 		movl	$-1, 196(%rsp)
 2196      000000FF 
 2196      FFFFFF
 2197 122b C78424C8 		movl	$-1, 200(%rsp)
 2197      000000FF 
 2197      FFFFFF
 2198 1236 C782DC00 		movl	$-1, 220(%rdx)
 2198      0000FFFF 
 2198      FFFF
 2199 1240 C78424CC 		movl	$-1, 204(%rsp)
 2199      000000FF 
 2199      FFFFFF
 2200 124b C78424D0 		movl	$-1, 208(%rsp)
 2200      000000FF 
 2200      FFFFFF
 2201 1256 C78424D4 		movl	$-1, 212(%rsp)
 2201      000000FF 
 2201      FFFFFF
 2202 1261 C78424D8 		movl	$-1, 216(%rsp)
 2202      000000FF 
 2202      FFFFFF
 2203 126c C78424DC 		movl	$-1, 220(%rsp)
 2203      000000FF 
 2203      FFFFFF
 2204 1277 C782FC00 		movl	$-1, 252(%rdx)
 2204      0000FFFF 
 2204      FFFF
 2205 1281 0F843908 		je	.L266
 2205      0000
 2206              	.L244:
 2207 1287 4C8D6424 		leaq	28(%rsp), %r12
 2207      1C
 2208 128c BA000000 		movl	$.LC25, %edx
 2208      00
 2209 1291 BE000000 		movl	$.LC26, %esi
 2209      00
 2210 1296 BF010000 		movl	$1, %edi
 2210      00
 2211 129b 31C0     		xorl	%eax, %eax
 2212 129d E8000000 		call	__printf_chk
 2212      00
 2213              		.p2align 4,,10
 2214 12a2 660F1F44 		.p2align 3
 2214      0000
 2215              	.L245:
 2216 12a8 4883EC08 		subq	$8, %rsp
 2217              		.cfi_def_cfa_offset 296
 2218 12ac 31C0     		xorl	%eax, %eax
 2219 12ae BE000000 		movl	$.LC27, %esi
 2219      00
 2220 12b3 4154     		pushq	%r12
 2221              		.cfi_def_cfa_offset 304
 2222 12b5 4889EF   		movq	%rbp, %rdi
 2223 12b8 4C8D4C24 		leaq	40(%rsp), %r9
 2223      28
 2224 12bd 4C8D4424 		leaq	36(%rsp), %r8
 2224      24
 2225 12c2 488D4C24 		leaq	32(%rsp), %rcx
 2225      20
 2226 12c7 488D5424 		leaq	28(%rsp), %rdx
 2226      1C
 2227 12cc E8000000 		call	__isoc99_fscanf
 2227      00
 2228 12d1 83F805   		cmpl	$5, %eax
 2229 12d4 415B     		popq	%r11
 2230              		.cfi_def_cfa_offset 296
 2231 12d6 5A       		popq	%rdx
 2232              		.cfi_def_cfa_offset 288
 2233 12d7 7547     		jne	.L267
 2234 12d9 44396C24 		cmpl	%r13d, 12(%rsp)
 2234      0C
 2235 12de 75C8     		jne	.L245
 2236 12e0 44397424 		cmpl	%r14d, 16(%rsp)
 2236      10
 2237 12e5 75C1     		jne	.L245
 2238 12e7 48634424 		movslq	20(%rsp), %rax
 2238      14
 2239 12ec 4889C2   		movq	%rax, %rdx
 2240 12ef 488D0480 		leaq	(%rax,%rax,4), %rax
 2241 12f3 48C1E002 		salq	$2, %rax
 2242 12f7 89540448 		movl	%edx, 72(%rsp,%rax)
 2243 12fb 8B542418 		movl	24(%rsp), %edx
 2244 12ff 44896C04 		movl	%r13d, 64(%rsp,%rax)
 2244      40
 2245 1304 44897404 		movl	%r14d, 68(%rsp,%rax)
 2245      44
 2246 1309 8954044C 		movl	%edx, 76(%rsp,%rax)
 2247 130d 8B54241C 		movl	28(%rsp), %edx
 2248 1311 89540450 		movl	%edx, 80(%rsp,%rax)
 2249 1315 EB91     		jmp	.L245
 2250 1317 660F1F84 		.p2align 4,,10
 2250      00000000 
 2250      00
 2251              		.p2align 3
 2252              	.L267:
 2253 1320 837C2440 		cmpl	$-1, 64(%rsp)
 2253      FF
 2254 1325 0F846D04 		je	.L268
 2254      0000
 2255              	.L248:
 2256 132b 837C2454 		cmpl	$-1, 84(%rsp)
 2256      FF
 2257 1330 0F843A07 		je	.L269
 2257      0000
 2258              	.L249:
 2259 1336 837C2468 		cmpl	$-1, 104(%rsp)
 2259      FF
 2260 133b 0F84D706 		je	.L270
 2260      0000
 2261              	.L250:
 2262 1341 837C247C 		cmpl	$-1, 124(%rsp)
 2262      FF
 2263 1346 0F846406 		je	.L271
 2263      0000
 2264              	.L251:
 2265 134c 83BC2490 		cmpl	$-1, 144(%rsp)
 2265      000000FF 
 2266 1354 0F84E605 		je	.L272
 2266      0000
 2267              	.L252:
 2268 135a 83BC24A4 		cmpl	$-1, 164(%rsp)
 2268      000000FF 
 2269 1362 0F846805 		je	.L273
 2269      0000
 2270              	.L253:
 2271 1368 83BC24B8 		cmpl	$-1, 184(%rsp)
 2271      000000FF 
 2272 1370 0F84EA04 		je	.L274
 2272      0000
 2273              	.L254:
 2274 1376 83BC24CC 		cmpl	$-1, 204(%rsp)
 2274      000000FF 
 2275 137e 0F846C04 		je	.L275
 2275      0000
 2276              	.L255:
 2277 1384 48634424 		movslq	80(%rsp), %rax
 2277      50
 2278 1389 448B531C 		movl	28(%rbx), %r10d
 2279 138d 488D0440 		leaq	(%rax,%rax,2), %rax
 2280 1391 0FBE5404 		movsbl	34(%rsp,%rax), %edx
 2280      22
 2281 1396 83EA30   		subl	$48, %edx
 2282 1399 8913     		movl	%edx, (%rbx)
 2283 139b 0FBE5404 		movsbl	33(%rsp,%rax), %edx
 2283      21
 2284 13a0 0FBE4404 		movsbl	32(%rsp,%rax), %eax
 2284      20
 2285 13a5 83EA30   		subl	$48, %edx
 2286 13a8 83E830   		subl	$48, %eax
 2287 13ab 895304   		movl	%edx, 4(%rbx)
 2288 13ae 894308   		movl	%eax, 8(%rbx)
 2289 13b1 48634424 		movslq	72(%rsp), %rax
 2289      48
 2290 13b6 488D0440 		leaq	(%rax,%rax,2), %rax
 2291 13ba 0FBE5404 		movsbl	34(%rsp,%rax), %edx
 2291      22
 2292 13bf 83EA30   		subl	$48, %edx
 2293 13c2 89530C   		movl	%edx, 12(%rbx)
 2294 13c5 0FBE5404 		movsbl	33(%rsp,%rax), %edx
 2294      21
 2295 13ca 0FBE4404 		movsbl	32(%rsp,%rax), %eax
 2295      20
 2296 13cf 83EA30   		subl	$48, %edx
 2297 13d2 83E830   		subl	$48, %eax
 2298 13d5 4585D2   		testl	%r10d, %r10d
 2299 13d8 895310   		movl	%edx, 16(%rbx)
 2300 13db 894314   		movl	%eax, 20(%rbx)
 2301 13de 8B44244C 		movl	76(%rsp), %eax
 2302 13e2 894318   		movl	%eax, 24(%rbx)
 2303 13e5 7407     		je	.L256
 2304 13e7 C7431C01 		movl	$1, 28(%rbx)
 2304      000000
 2305              	.L256:
 2306 13ee 48634424 		movslq	100(%rsp), %rax
 2306      64
 2307 13f3 448B4B3C 		movl	60(%rbx), %r9d
 2308 13f7 488D0440 		leaq	(%rax,%rax,2), %rax
 2309 13fb 0FBE5404 		movsbl	34(%rsp,%rax), %edx
 2309      22
 2310 1400 83EA30   		subl	$48, %edx
 2311 1403 895320   		movl	%edx, 32(%rbx)
 2312 1406 0FBE5404 		movsbl	33(%rsp,%rax), %edx
 2312      21
 2313 140b 0FBE4404 		movsbl	32(%rsp,%rax), %eax
 2313      20
 2314 1410 83EA30   		subl	$48, %edx
 2315 1413 83E830   		subl	$48, %eax
 2316 1416 895324   		movl	%edx, 36(%rbx)
 2317 1419 894328   		movl	%eax, 40(%rbx)
 2318 141c 48634424 		movslq	92(%rsp), %rax
 2318      5C
 2319 1421 488D0440 		leaq	(%rax,%rax,2), %rax
 2320 1425 0FBE5404 		movsbl	34(%rsp,%rax), %edx
 2320      22
 2321 142a 83EA30   		subl	$48, %edx
 2322 142d 89532C   		movl	%edx, 44(%rbx)
 2323 1430 0FBE5404 		movsbl	33(%rsp,%rax), %edx
 2323      21
 2324 1435 0FBE4404 		movsbl	32(%rsp,%rax), %eax
 2324      20
 2325 143a 83EA30   		subl	$48, %edx
 2326 143d 83E830   		subl	$48, %eax
 2327 1440 4585C9   		testl	%r9d, %r9d
 2328 1443 895330   		movl	%edx, 48(%rbx)
 2329 1446 894334   		movl	%eax, 52(%rbx)
 2330 1449 8B442460 		movl	96(%rsp), %eax
 2331 144d 894338   		movl	%eax, 56(%rbx)
 2332 1450 7407     		je	.L257
 2333 1452 C7433C01 		movl	$1, 60(%rbx)
 2333      000000
 2334              	.L257:
 2335 1459 48634424 		movslq	120(%rsp), %rax
 2335      78
 2336 145e 448B435C 		movl	92(%rbx), %r8d
 2337 1462 488D0440 		leaq	(%rax,%rax,2), %rax
 2338 1466 0FBE5404 		movsbl	34(%rsp,%rax), %edx
 2338      22
 2339 146b 83EA30   		subl	$48, %edx
 2340 146e 895340   		movl	%edx, 64(%rbx)
 2341 1471 0FBE5404 		movsbl	33(%rsp,%rax), %edx
 2341      21
 2342 1476 0FBE4404 		movsbl	32(%rsp,%rax), %eax
 2342      20
 2343 147b 83EA30   		subl	$48, %edx
 2344 147e 83E830   		subl	$48, %eax
 2345 1481 895344   		movl	%edx, 68(%rbx)
 2346 1484 894348   		movl	%eax, 72(%rbx)
 2347 1487 48634424 		movslq	112(%rsp), %rax
 2347      70
 2348 148c 488D0440 		leaq	(%rax,%rax,2), %rax
 2349 1490 0FBE5404 		movsbl	34(%rsp,%rax), %edx
 2349      22
 2350 1495 83EA30   		subl	$48, %edx
 2351 1498 89534C   		movl	%edx, 76(%rbx)
 2352 149b 0FBE5404 		movsbl	33(%rsp,%rax), %edx
 2352      21
 2353 14a0 0FBE4404 		movsbl	32(%rsp,%rax), %eax
 2353      20
 2354 14a5 83EA30   		subl	$48, %edx
 2355 14a8 83E830   		subl	$48, %eax
 2356 14ab 4585C0   		testl	%r8d, %r8d
 2357 14ae 895350   		movl	%edx, 80(%rbx)
 2358 14b1 894354   		movl	%eax, 84(%rbx)
 2359 14b4 8B442474 		movl	116(%rsp), %eax
 2360 14b8 894358   		movl	%eax, 88(%rbx)
 2361 14bb 7407     		je	.L258
 2362 14bd C7435C01 		movl	$1, 92(%rbx)
 2362      000000
 2363              	.L258:
 2364 14c4 48638424 		movslq	140(%rsp), %rax
 2364      8C000000 
 2365 14cc 8B7B7C   		movl	124(%rbx), %edi
 2366 14cf 488D0440 		leaq	(%rax,%rax,2), %rax
 2367 14d3 0FBE5404 		movsbl	34(%rsp,%rax), %edx
 2367      22
 2368 14d8 83EA30   		subl	$48, %edx
 2369 14db 895360   		movl	%edx, 96(%rbx)
 2370 14de 0FBE5404 		movsbl	33(%rsp,%rax), %edx
 2370      21
 2371 14e3 0FBE4404 		movsbl	32(%rsp,%rax), %eax
 2371      20
 2372 14e8 83EA30   		subl	$48, %edx
 2373 14eb 83E830   		subl	$48, %eax
 2374 14ee 895364   		movl	%edx, 100(%rbx)
 2375 14f1 894368   		movl	%eax, 104(%rbx)
 2376 14f4 48638424 		movslq	132(%rsp), %rax
 2376      84000000 
 2377 14fc 488D0440 		leaq	(%rax,%rax,2), %rax
 2378 1500 0FBE5404 		movsbl	34(%rsp,%rax), %edx
 2378      22
 2379 1505 83EA30   		subl	$48, %edx
 2380 1508 89536C   		movl	%edx, 108(%rbx)
 2381 150b 0FBE5404 		movsbl	33(%rsp,%rax), %edx
 2381      21
 2382 1510 0FBE4404 		movsbl	32(%rsp,%rax), %eax
 2382      20
 2383 1515 83EA30   		subl	$48, %edx
 2384 1518 83E830   		subl	$48, %eax
 2385 151b 85FF     		testl	%edi, %edi
 2386 151d 895370   		movl	%edx, 112(%rbx)
 2387 1520 894374   		movl	%eax, 116(%rbx)
 2388 1523 8B842488 		movl	136(%rsp), %eax
 2388      000000
 2389 152a 894378   		movl	%eax, 120(%rbx)
 2390 152d 7407     		je	.L259
 2391 152f C7437C01 		movl	$1, 124(%rbx)
 2391      000000
 2392              	.L259:
 2393 1536 48638424 		movslq	160(%rsp), %rax
 2393      A0000000 
 2394 153e 8BB39C00 		movl	156(%rbx), %esi
 2394      0000
 2395 1544 488D0440 		leaq	(%rax,%rax,2), %rax
 2396 1548 0FBE5404 		movsbl	34(%rsp,%rax), %edx
 2396      22
 2397 154d 83EA30   		subl	$48, %edx
 2398 1550 89938000 		movl	%edx, 128(%rbx)
 2398      0000
 2399 1556 0FBE5404 		movsbl	33(%rsp,%rax), %edx
 2399      21
 2400 155b 0FBE4404 		movsbl	32(%rsp,%rax), %eax
 2400      20
 2401 1560 83EA30   		subl	$48, %edx
 2402 1563 83E830   		subl	$48, %eax
 2403 1566 89938400 		movl	%edx, 132(%rbx)
 2403      0000
 2404 156c 89838800 		movl	%eax, 136(%rbx)
 2404      0000
 2405 1572 48638424 		movslq	152(%rsp), %rax
 2405      98000000 
 2406 157a 488D0440 		leaq	(%rax,%rax,2), %rax
 2407 157e 0FBE5404 		movsbl	34(%rsp,%rax), %edx
 2407      22
 2408 1583 83EA30   		subl	$48, %edx
 2409 1586 89938C00 		movl	%edx, 140(%rbx)
 2409      0000
 2410 158c 0FBE5404 		movsbl	33(%rsp,%rax), %edx
 2410      21
 2411 1591 0FBE4404 		movsbl	32(%rsp,%rax), %eax
 2411      20
 2412 1596 83EA30   		subl	$48, %edx
 2413 1599 83E830   		subl	$48, %eax
 2414 159c 85F6     		testl	%esi, %esi
 2415 159e 89939000 		movl	%edx, 144(%rbx)
 2415      0000
 2416 15a4 89839400 		movl	%eax, 148(%rbx)
 2416      0000
 2417 15aa 8B84249C 		movl	156(%rsp), %eax
 2417      000000
 2418 15b1 89839800 		movl	%eax, 152(%rbx)
 2418      0000
 2419 15b7 740A     		je	.L260
 2420 15b9 C7839C00 		movl	$1, 156(%rbx)
 2420      00000100 
 2420      0000
 2421              	.L260:
 2422 15c3 48638424 		movslq	180(%rsp), %rax
 2422      B4000000 
 2423 15cb 8B8BBC00 		movl	188(%rbx), %ecx
 2423      0000
 2424 15d1 488D0440 		leaq	(%rax,%rax,2), %rax
 2425 15d5 0FBE5404 		movsbl	34(%rsp,%rax), %edx
 2425      22
 2426 15da 83EA30   		subl	$48, %edx
 2427 15dd 8993A000 		movl	%edx, 160(%rbx)
 2427      0000
 2428 15e3 0FBE5404 		movsbl	33(%rsp,%rax), %edx
 2428      21
 2429 15e8 0FBE4404 		movsbl	32(%rsp,%rax), %eax
 2429      20
 2430 15ed 83EA30   		subl	$48, %edx
 2431 15f0 83E830   		subl	$48, %eax
 2432 15f3 8993A400 		movl	%edx, 164(%rbx)
 2432      0000
 2433 15f9 8983A800 		movl	%eax, 168(%rbx)
 2433      0000
 2434 15ff 48638424 		movslq	172(%rsp), %rax
 2434      AC000000 
 2435 1607 488D0440 		leaq	(%rax,%rax,2), %rax
 2436 160b 0FBE5404 		movsbl	34(%rsp,%rax), %edx
 2436      22
 2437 1610 83EA30   		subl	$48, %edx
 2438 1613 8993AC00 		movl	%edx, 172(%rbx)
 2438      0000
 2439 1619 0FBE5404 		movsbl	33(%rsp,%rax), %edx
 2439      21
 2440 161e 0FBE4404 		movsbl	32(%rsp,%rax), %eax
 2440      20
 2441 1623 83EA30   		subl	$48, %edx
 2442 1626 83E830   		subl	$48, %eax
 2443 1629 85C9     		testl	%ecx, %ecx
 2444 162b 8993B000 		movl	%edx, 176(%rbx)
 2444      0000
 2445 1631 8983B400 		movl	%eax, 180(%rbx)
 2445      0000
 2446 1637 8B8424B0 		movl	176(%rsp), %eax
 2446      000000
 2447 163e 8983B800 		movl	%eax, 184(%rbx)
 2447      0000
 2448 1644 740A     		je	.L261
 2449 1646 C783BC00 		movl	$1, 188(%rbx)
 2449      00000100 
 2449      0000
 2450              	.L261:
 2451 1650 48638424 		movslq	200(%rsp), %rax
 2451      C8000000 
 2452 1658 488D0440 		leaq	(%rax,%rax,2), %rax
 2453 165c 0FBE5404 		movsbl	34(%rsp,%rax), %edx
 2453      22
 2454 1661 83EA30   		subl	$48, %edx
 2455 1664 8993C000 		movl	%edx, 192(%rbx)
 2455      0000
 2456 166a 0FBE5404 		movsbl	33(%rsp,%rax), %edx
 2456      21
 2457 166f 0FBE4404 		movsbl	32(%rsp,%rax), %eax
 2457      20
 2458 1674 83EA30   		subl	$48, %edx
 2459 1677 83E830   		subl	$48, %eax
 2460 167a 8993C400 		movl	%edx, 196(%rbx)
 2460      0000
 2461 1680 8983C800 		movl	%eax, 200(%rbx)
 2461      0000
 2462 1686 48638424 		movslq	192(%rsp), %rax
 2462      C0000000 
 2463 168e 488D0440 		leaq	(%rax,%rax,2), %rax
 2464 1692 0FBE5404 		movsbl	34(%rsp,%rax), %edx
 2464      22
 2465 1697 83EA30   		subl	$48, %edx
 2466 169a 8993CC00 		movl	%edx, 204(%rbx)
 2466      0000
 2467 16a0 0FBE5404 		movsbl	33(%rsp,%rax), %edx
 2467      21
 2468 16a5 0FBE4404 		movsbl	32(%rsp,%rax), %eax
 2468      20
 2469 16aa 83EA30   		subl	$48, %edx
 2470 16ad 83E830   		subl	$48, %eax
 2471 16b0 8993D000 		movl	%edx, 208(%rbx)
 2471      0000
 2472 16b6 8B93DC00 		movl	220(%rbx), %edx
 2472      0000
 2473 16bc 8983D400 		movl	%eax, 212(%rbx)
 2473      0000
 2474 16c2 8B8424C4 		movl	196(%rsp), %eax
 2474      000000
 2475 16c9 85D2     		testl	%edx, %edx
 2476 16cb 8983D800 		movl	%eax, 216(%rbx)
 2476      0000
 2477 16d1 740A     		je	.L262
 2478 16d3 C783DC00 		movl	$1, 220(%rbx)
 2478      00000100 
 2478      0000
 2479              	.L262:
 2480 16dd 48638424 		movslq	220(%rsp), %rax
 2480      DC000000 
 2481 16e5 488D0440 		leaq	(%rax,%rax,2), %rax
 2482 16e9 0FBE5404 		movsbl	34(%rsp,%rax), %edx
 2482      22
 2483 16ee 83EA30   		subl	$48, %edx
 2484 16f1 8993E000 		movl	%edx, 224(%rbx)
 2484      0000
 2485 16f7 0FBE5404 		movsbl	33(%rsp,%rax), %edx
 2485      21
 2486 16fc 0FBE4404 		movsbl	32(%rsp,%rax), %eax
 2486      20
 2487 1701 83EA30   		subl	$48, %edx
 2488 1704 83E830   		subl	$48, %eax
 2489 1707 8993E400 		movl	%edx, 228(%rbx)
 2489      0000
 2490 170d 8983E800 		movl	%eax, 232(%rbx)
 2490      0000
 2491 1713 48638424 		movslq	212(%rsp), %rax
 2491      D4000000 
 2492 171b 488D0440 		leaq	(%rax,%rax,2), %rax
 2493 171f 0FBE5404 		movsbl	34(%rsp,%rax), %edx
 2493      22
 2494 1724 83EA30   		subl	$48, %edx
 2495 1727 8993EC00 		movl	%edx, 236(%rbx)
 2495      0000
 2496 172d 0FBE5404 		movsbl	33(%rsp,%rax), %edx
 2496      21
 2497 1732 0FBE4404 		movsbl	32(%rsp,%rax), %eax
 2497      20
 2498 1737 83EA30   		subl	$48, %edx
 2499 173a 83E830   		subl	$48, %eax
 2500 173d 8993F000 		movl	%edx, 240(%rbx)
 2500      0000
 2501 1743 8983F400 		movl	%eax, 244(%rbx)
 2501      0000
 2502 1749 8B8424D8 		movl	216(%rsp), %eax
 2502      000000
 2503 1750 8983F800 		movl	%eax, 248(%rbx)
 2503      0000
 2504 1756 8B83FC00 		movl	252(%rbx), %eax
 2504      0000
 2505 175c 85C0     		testl	%eax, %eax
 2506 175e 740A     		je	.L243
 2507 1760 C783FC00 		movl	$1, 252(%rbx)
 2507      00000100 
 2507      0000
 2508              	.L243:
 2509 176a 488B8424 		movq	232(%rsp), %rax
 2509      E8000000 
 2510 1772 64483304 		xorq	%fs:40, %rax
 2510      25280000 
 2510      00
 2511 177b 0F855C03 		jne	.L276
 2511      0000
 2512 1781 4881C4F0 		addq	$240, %rsp
 2512      000000
 2513              		.cfi_remember_state
 2514              		.cfi_def_cfa_offset 48
 2515 1788 5B       		popq	%rbx
 2516              		.cfi_def_cfa_offset 40
 2517 1789 5D       		popq	%rbp
 2518              		.cfi_def_cfa_offset 32
 2519 178a 415C     		popq	%r12
 2520              		.cfi_def_cfa_offset 24
 2521 178c 415D     		popq	%r13
 2522              		.cfi_def_cfa_offset 16
 2523 178e 415E     		popq	%r14
 2524              		.cfi_def_cfa_offset 8
 2525 1790 C3       		ret
 2526              		.p2align 4,,10
 2527 1791 0F1F8000 		.p2align 3
 2527      000000
 2528              	.L268:
 2529              		.cfi_restore_state
 2530 1798 837C2444 		cmpl	$-1, 68(%rsp)
 2530      FF
 2531 179d 0F8588FB 		jne	.L248
 2531      FFFF
 2532 17a3 837C2448 		cmpl	$-1, 72(%rsp)
 2532      FF
 2533 17a8 0F857DFB 		jne	.L248
 2533      FFFF
 2534 17ae 837C244C 		cmpl	$-1, 76(%rsp)
 2534      FF
 2535 17b3 0F8572FB 		jne	.L248
 2535      FFFF
 2536 17b9 837C2450 		cmpl	$-1, 80(%rsp)
 2536      FF
 2537 17be 0F8567FB 		jne	.L248
 2537      FFFF
 2538 17c4 C7442448 		movl	$0, 72(%rsp)
 2538      00000000 
 2539 17cc C744244C 		movl	$0, 76(%rsp)
 2539      00000000 
 2540 17d4 C7442450 		movl	$0, 80(%rsp)
 2540      00000000 
 2541 17dc C7431C00 		movl	$0, 28(%rbx)
 2541      000000
 2542 17e3 E943FBFF 		jmp	.L248
 2542      FF
 2543 17e8 0F1F8400 		.p2align 4,,10
 2543      00000000 
 2544              		.p2align 3
 2545              	.L275:
 2546 17f0 83BC24D0 		cmpl	$-1, 208(%rsp)
 2546      000000FF 
 2547 17f8 0F8586FB 		jne	.L255
 2547      FFFF
 2548 17fe 83BC24D4 		cmpl	$-1, 212(%rsp)
 2548      000000FF 
 2549 1806 0F8578FB 		jne	.L255
 2549      FFFF
 2550 180c 83BC24D8 		cmpl	$-1, 216(%rsp)
 2550      000000FF 
 2551 1814 0F856AFB 		jne	.L255
 2551      FFFF
 2552 181a 83BC24DC 		cmpl	$-1, 220(%rsp)
 2552      000000FF 
 2553 1822 0F855CFB 		jne	.L255
 2553      FFFF
 2554 1828 C78424D4 		movl	$7, 212(%rsp)
 2554      00000007 
 2554      000000
 2555 1833 C78424D8 		movl	$0, 216(%rsp)
 2555      00000000 
 2555      000000
 2556 183e C78424DC 		movl	$0, 220(%rsp)
 2556      00000000 
 2556      000000
 2557 1849 C783FC00 		movl	$0, 252(%rbx)
 2557      00000000 
 2557      0000
 2558 1853 E92CFBFF 		jmp	.L255
 2558      FF
 2559 1858 0F1F8400 		.p2align 4,,10
 2559      00000000 
 2560              		.p2align 3
 2561              	.L274:
 2562 1860 83BC24BC 		cmpl	$-1, 188(%rsp)
 2562      000000FF 
 2563 1868 0F8508FB 		jne	.L254
 2563      FFFF
 2564 186e 83BC24C0 		cmpl	$-1, 192(%rsp)
 2564      000000FF 
 2565 1876 0F85FAFA 		jne	.L254
 2565      FFFF
 2566 187c 83BC24C4 		cmpl	$-1, 196(%rsp)
 2566      000000FF 
 2567 1884 0F85ECFA 		jne	.L254
 2567      FFFF
 2568 188a 83BC24C8 		cmpl	$-1, 200(%rsp)
 2568      000000FF 
 2569 1892 0F85DEFA 		jne	.L254
 2569      FFFF
 2570 1898 C78424C0 		movl	$6, 192(%rsp)
 2570      00000006 
 2570      000000
 2571 18a3 C78424C4 		movl	$0, 196(%rsp)
 2571      00000000 
 2571      000000
 2572 18ae C78424C8 		movl	$0, 200(%rsp)
 2572      00000000 
 2572      000000
 2573 18b9 C783DC00 		movl	$0, 220(%rbx)
 2573      00000000 
 2573      0000
 2574 18c3 E9AEFAFF 		jmp	.L254
 2574      FF
 2575 18c8 0F1F8400 		.p2align 4,,10
 2575      00000000 
 2576              		.p2align 3
 2577              	.L273:
 2578 18d0 83BC24A8 		cmpl	$-1, 168(%rsp)
 2578      000000FF 
 2579 18d8 0F858AFA 		jne	.L253
 2579      FFFF
 2580 18de 83BC24AC 		cmpl	$-1, 172(%rsp)
 2580      000000FF 
 2581 18e6 0F857CFA 		jne	.L253
 2581      FFFF
 2582 18ec 83BC24B0 		cmpl	$-1, 176(%rsp)
 2582      000000FF 
 2583 18f4 0F856EFA 		jne	.L253
 2583      FFFF
 2584 18fa 83BC24B4 		cmpl	$-1, 180(%rsp)
 2584      000000FF 
 2585 1902 0F8560FA 		jne	.L253
 2585      FFFF
 2586 1908 C78424AC 		movl	$5, 172(%rsp)
 2586      00000005 
 2586      000000
 2587 1913 C78424B0 		movl	$0, 176(%rsp)
 2587      00000000 
 2587      000000
 2588 191e C78424B4 		movl	$0, 180(%rsp)
 2588      00000000 
 2588      000000
 2589 1929 C783BC00 		movl	$0, 188(%rbx)
 2589      00000000 
 2589      0000
 2590 1933 E930FAFF 		jmp	.L253
 2590      FF
 2591 1938 0F1F8400 		.p2align 4,,10
 2591      00000000 
 2592              		.p2align 3
 2593              	.L272:
 2594 1940 83BC2494 		cmpl	$-1, 148(%rsp)
 2594      000000FF 
 2595 1948 0F850CFA 		jne	.L252
 2595      FFFF
 2596 194e 83BC2498 		cmpl	$-1, 152(%rsp)
 2596      000000FF 
 2597 1956 0F85FEF9 		jne	.L252
 2597      FFFF
 2598 195c 83BC249C 		cmpl	$-1, 156(%rsp)
 2598      000000FF 
 2599 1964 0F85F0F9 		jne	.L252
 2599      FFFF
 2600 196a 83BC24A0 		cmpl	$-1, 160(%rsp)
 2600      000000FF 
 2601 1972 0F85E2F9 		jne	.L252
 2601      FFFF
 2602 1978 C7842498 		movl	$4, 152(%rsp)
 2602      00000004 
 2602      000000
 2603 1983 C784249C 		movl	$0, 156(%rsp)
 2603      00000000 
 2603      000000
 2604 198e C78424A0 		movl	$0, 160(%rsp)
 2604      00000000 
 2604      000000
 2605 1999 C7839C00 		movl	$0, 156(%rbx)
 2605      00000000 
 2605      0000
 2606 19a3 E9B2F9FF 		jmp	.L252
 2606      FF
 2607 19a8 0F1F8400 		.p2align 4,,10
 2607      00000000 
 2608              		.p2align 3
 2609              	.L271:
 2610 19b0 83BC2480 		cmpl	$-1, 128(%rsp)
 2610      000000FF 
 2611 19b8 0F858EF9 		jne	.L251
 2611      FFFF
 2612 19be 83BC2484 		cmpl	$-1, 132(%rsp)
 2612      000000FF 
 2613 19c6 0F8580F9 		jne	.L251
 2613      FFFF
 2614 19cc 83BC2488 		cmpl	$-1, 136(%rsp)
 2614      000000FF 
 2615 19d4 0F8572F9 		jne	.L251
 2615      FFFF
 2616 19da 83BC248C 		cmpl	$-1, 140(%rsp)
 2616      000000FF 
 2617 19e2 0F8564F9 		jne	.L251
 2617      FFFF
 2618 19e8 C7842484 		movl	$3, 132(%rsp)
 2618      00000003 
 2618      000000
 2619 19f3 C7842488 		movl	$0, 136(%rsp)
 2619      00000000 
 2619      000000
 2620 19fe C784248C 		movl	$0, 140(%rsp)
 2620      00000000 
 2620      000000
 2621 1a09 C7437C00 		movl	$0, 124(%rbx)
 2621      000000
 2622 1a10 E937F9FF 		jmp	.L251
 2622      FF
 2623              		.p2align 4,,10
 2624 1a15 0F1F00   		.p2align 3
 2625              	.L270:
 2626 1a18 837C246C 		cmpl	$-1, 108(%rsp)
 2626      FF
 2627 1a1d 0F851EF9 		jne	.L250
 2627      FFFF
 2628 1a23 837C2470 		cmpl	$-1, 112(%rsp)
 2628      FF
 2629 1a28 0F8513F9 		jne	.L250
 2629      FFFF
 2630 1a2e 837C2474 		cmpl	$-1, 116(%rsp)
 2630      FF
 2631 1a33 0F8508F9 		jne	.L250
 2631      FFFF
 2632 1a39 837C2478 		cmpl	$-1, 120(%rsp)
 2632      FF
 2633 1a3e 0F85FDF8 		jne	.L250
 2633      FFFF
 2634 1a44 C7442470 		movl	$2, 112(%rsp)
 2634      02000000 
 2635 1a4c C7442474 		movl	$0, 116(%rsp)
 2635      00000000 
 2636 1a54 C7442478 		movl	$0, 120(%rsp)
 2636      00000000 
 2637 1a5c C7435C00 		movl	$0, 92(%rbx)
 2637      000000
 2638 1a63 E9D9F8FF 		jmp	.L250
 2638      FF
 2639 1a68 0F1F8400 		.p2align 4,,10
 2639      00000000 
 2640              		.p2align 3
 2641              	.L269:
 2642 1a70 837C2458 		cmpl	$-1, 88(%rsp)
 2642      FF
 2643 1a75 0F85BBF8 		jne	.L249
 2643      FFFF
 2644 1a7b 837C245C 		cmpl	$-1, 92(%rsp)
 2644      FF
 2645 1a80 0F85B0F8 		jne	.L249
 2645      FFFF
 2646 1a86 837C2460 		cmpl	$-1, 96(%rsp)
 2646      FF
 2647 1a8b 0F85A5F8 		jne	.L249
 2647      FFFF
 2648 1a91 837C2464 		cmpl	$-1, 100(%rsp)
 2648      FF
 2649 1a96 0F859AF8 		jne	.L249
 2649      FFFF
 2650 1a9c C744245C 		movl	$1, 92(%rsp)
 2650      01000000 
 2651 1aa4 C7442460 		movl	$0, 96(%rsp)
 2651      00000000 
 2652 1aac C7442464 		movl	$0, 100(%rsp)
 2652      00000000 
 2653 1ab4 C7433C00 		movl	$0, 60(%rbx)
 2653      000000
 2654 1abb E976F8FF 		jmp	.L249
 2654      FF
 2655              		.p2align 4,,10
 2656              		.p2align 3
 2657              	.L266:
 2658 1ac0 488B3D00 		movq	stderr(%rip), %rdi
 2658      000000
 2659 1ac7 BA000000 		movl	$.LC24, %edx
 2659      00
 2660 1acc BE010000 		movl	$1, %esi
 2660      00
 2661 1ad1 31C0     		xorl	%eax, %eax
 2662 1ad3 E8000000 		call	__fprintf_chk
 2662      00
 2663 1ad8 E9AAF7FF 		jmp	.L244
 2663      FF
 2664              	.L276:
 2665 1add E8000000 		call	__stack_chk_fail
 2665      00
 2666              		.cfi_endproc
 2667              	.LFE57:
 2669              		.section	.text.unlikely
 2670              	.LCOLDE28:
 2671              		.text
 2672              	.LHOTE28:
 2673              		.section	.rodata.str1.1
 2674              	.LC29:
 2675 0071 75696E74 		.string	"uint8"
 2675      3800
 2676              	.LC30:
 2677 0077 25730A20 		.string	"%s\n "
 2677      00
 2678              		.section	.text.unlikely
 2679              	.LCOLDB31:
 2680              		.text
 2681              	.LHOTB31:
 2682 1ae2 0F1F4000 		.p2align 4,,15
 2682      662E0F1F 
 2682      84000000 
 2682      0000
 2683              		.globl	uint8ToBin
 2685              	uint8ToBin:
 2686              	.LFB58:
 2687              		.cfi_startproc
 2688 1af0 55       		pushq	%rbp
 2689              		.cfi_def_cfa_offset 16
 2690              		.cfi_offset 6, -16
 2691 1af1 53       		pushq	%rbx
 2692              		.cfi_def_cfa_offset 24
 2693              		.cfi_offset 3, -24
 2694 1af2 4889FD   		movq	%rdi, %rbp
 2695 1af5 4889F3   		movq	%rsi, %rbx
 2696 1af8 BA000000 		movl	$.LC29, %edx
 2696      00
 2697 1afd 31C0     		xorl	%eax, %eax
 2698 1aff 4883EC08 		subq	$8, %rsp
 2699              		.cfi_def_cfa_offset 32
 2700 1b03 BE000000 		movl	$.LC30, %esi
 2700      00
 2701 1b08 BF010000 		movl	$1, %edi
 2701      00
 2702 1b0d E8000000 		call	__printf_chk
 2702      00
 2703 1b12 0FB64500 		movzbl	0(%rbp), %eax
 2704 1b16 89C2     		movl	%eax, %edx
 2705 1b18 83E201   		andl	$1, %edx
 2706 1b1b 8913     		movl	%edx, (%rbx)
 2707 1b1d 89C2     		movl	%eax, %edx
 2708 1b1f D0EA     		shrb	%dl
 2709 1b21 83E201   		andl	$1, %edx
 2710 1b24 895304   		movl	%edx, 4(%rbx)
 2711 1b27 89C2     		movl	%eax, %edx
 2712 1b29 C0EA02   		shrb	$2, %dl
 2713 1b2c 83E201   		andl	$1, %edx
 2714 1b2f 895308   		movl	%edx, 8(%rbx)
 2715 1b32 89C2     		movl	%eax, %edx
 2716 1b34 C0EA03   		shrb	$3, %dl
 2717 1b37 83E201   		andl	$1, %edx
 2718 1b3a 89530C   		movl	%edx, 12(%rbx)
 2719 1b3d 89C2     		movl	%eax, %edx
 2720 1b3f C0EA04   		shrb	$4, %dl
 2721 1b42 83E201   		andl	$1, %edx
 2722 1b45 895310   		movl	%edx, 16(%rbx)
 2723 1b48 89C2     		movl	%eax, %edx
 2724 1b4a C0EA05   		shrb	$5, %dl
 2725 1b4d 83E201   		andl	$1, %edx
 2726 1b50 895314   		movl	%edx, 20(%rbx)
 2727 1b53 89C2     		movl	%eax, %edx
 2728 1b55 C0E807   		shrb	$7, %al
 2729 1b58 C0EA06   		shrb	$6, %dl
 2730 1b5b 0FB6C0   		movzbl	%al, %eax
 2731 1b5e 83E201   		andl	$1, %edx
 2732 1b61 89431C   		movl	%eax, 28(%rbx)
 2733 1b64 895318   		movl	%edx, 24(%rbx)
 2734 1b67 0FB64501 		movzbl	1(%rbp), %eax
 2735 1b6b 89C2     		movl	%eax, %edx
 2736 1b6d 83E201   		andl	$1, %edx
 2737 1b70 895320   		movl	%edx, 32(%rbx)
 2738 1b73 89C2     		movl	%eax, %edx
 2739 1b75 D0EA     		shrb	%dl
 2740 1b77 83E201   		andl	$1, %edx
 2741 1b7a 895324   		movl	%edx, 36(%rbx)
 2742 1b7d 89C2     		movl	%eax, %edx
 2743 1b7f C0EA02   		shrb	$2, %dl
 2744 1b82 83E201   		andl	$1, %edx
 2745 1b85 895328   		movl	%edx, 40(%rbx)
 2746 1b88 89C2     		movl	%eax, %edx
 2747 1b8a C0EA03   		shrb	$3, %dl
 2748 1b8d 83E201   		andl	$1, %edx
 2749 1b90 89532C   		movl	%edx, 44(%rbx)
 2750 1b93 89C2     		movl	%eax, %edx
 2751 1b95 C0EA04   		shrb	$4, %dl
 2752 1b98 83E201   		andl	$1, %edx
 2753 1b9b 895330   		movl	%edx, 48(%rbx)
 2754 1b9e 89C2     		movl	%eax, %edx
 2755 1ba0 C0EA05   		shrb	$5, %dl
 2756 1ba3 83E201   		andl	$1, %edx
 2757 1ba6 895334   		movl	%edx, 52(%rbx)
 2758 1ba9 89C2     		movl	%eax, %edx
 2759 1bab C0E807   		shrb	$7, %al
 2760 1bae C0EA06   		shrb	$6, %dl
 2761 1bb1 0FB6C0   		movzbl	%al, %eax
 2762 1bb4 83E201   		andl	$1, %edx
 2763 1bb7 89433C   		movl	%eax, 60(%rbx)
 2764 1bba 895338   		movl	%edx, 56(%rbx)
 2765 1bbd 0FB64502 		movzbl	2(%rbp), %eax
 2766 1bc1 89C2     		movl	%eax, %edx
 2767 1bc3 83E201   		andl	$1, %edx
 2768 1bc6 895340   		movl	%edx, 64(%rbx)
 2769 1bc9 89C2     		movl	%eax, %edx
 2770 1bcb D0EA     		shrb	%dl
 2771 1bcd 83E201   		andl	$1, %edx
 2772 1bd0 895344   		movl	%edx, 68(%rbx)
 2773 1bd3 89C2     		movl	%eax, %edx
 2774 1bd5 C0EA02   		shrb	$2, %dl
 2775 1bd8 83E201   		andl	$1, %edx
 2776 1bdb 895348   		movl	%edx, 72(%rbx)
 2777 1bde 89C2     		movl	%eax, %edx
 2778 1be0 C0EA03   		shrb	$3, %dl
 2779 1be3 83E201   		andl	$1, %edx
 2780 1be6 89534C   		movl	%edx, 76(%rbx)
 2781 1be9 89C2     		movl	%eax, %edx
 2782 1beb C0EA04   		shrb	$4, %dl
 2783 1bee 83E201   		andl	$1, %edx
 2784 1bf1 895350   		movl	%edx, 80(%rbx)
 2785 1bf4 89C2     		movl	%eax, %edx
 2786 1bf6 C0EA05   		shrb	$5, %dl
 2787 1bf9 83E201   		andl	$1, %edx
 2788 1bfc 895354   		movl	%edx, 84(%rbx)
 2789 1bff 89C2     		movl	%eax, %edx
 2790 1c01 C0E807   		shrb	$7, %al
 2791 1c04 C0EA06   		shrb	$6, %dl
 2792 1c07 0FB6C0   		movzbl	%al, %eax
 2793 1c0a 83E201   		andl	$1, %edx
 2794 1c0d 89435C   		movl	%eax, 92(%rbx)
 2795 1c10 895358   		movl	%edx, 88(%rbx)
 2796 1c13 0FB64503 		movzbl	3(%rbp), %eax
 2797 1c17 89C2     		movl	%eax, %edx
 2798 1c19 83E201   		andl	$1, %edx
 2799 1c1c 895360   		movl	%edx, 96(%rbx)
 2800 1c1f 89C2     		movl	%eax, %edx
 2801 1c21 D0EA     		shrb	%dl
 2802 1c23 83E201   		andl	$1, %edx
 2803 1c26 895364   		movl	%edx, 100(%rbx)
 2804 1c29 89C2     		movl	%eax, %edx
 2805 1c2b C0EA02   		shrb	$2, %dl
 2806 1c2e 83E201   		andl	$1, %edx
 2807 1c31 895368   		movl	%edx, 104(%rbx)
 2808 1c34 89C2     		movl	%eax, %edx
 2809 1c36 C0EA03   		shrb	$3, %dl
 2810 1c39 83E201   		andl	$1, %edx
 2811 1c3c 89536C   		movl	%edx, 108(%rbx)
 2812 1c3f 89C2     		movl	%eax, %edx
 2813 1c41 C0EA04   		shrb	$4, %dl
 2814 1c44 83E201   		andl	$1, %edx
 2815 1c47 895370   		movl	%edx, 112(%rbx)
 2816 1c4a 89C2     		movl	%eax, %edx
 2817 1c4c C0EA05   		shrb	$5, %dl
 2818 1c4f 83E201   		andl	$1, %edx
 2819 1c52 895374   		movl	%edx, 116(%rbx)
 2820 1c55 89C2     		movl	%eax, %edx
 2821 1c57 C0E807   		shrb	$7, %al
 2822 1c5a C0EA06   		shrb	$6, %dl
 2823 1c5d 0FB6C0   		movzbl	%al, %eax
 2824 1c60 83E201   		andl	$1, %edx
 2825 1c63 89437C   		movl	%eax, 124(%rbx)
 2826 1c66 895378   		movl	%edx, 120(%rbx)
 2827 1c69 4883C408 		addq	$8, %rsp
 2828              		.cfi_def_cfa_offset 24
 2829 1c6d 5B       		popq	%rbx
 2830              		.cfi_def_cfa_offset 16
 2831 1c6e 5D       		popq	%rbp
 2832              		.cfi_def_cfa_offset 8
 2833 1c6f C3       		ret
 2834              		.cfi_endproc
 2835              	.LFE58:
 2837              		.section	.text.unlikely
 2838              	.LCOLDE31:
 2839              		.text
 2840              	.LHOTE31:
 2841              		.section	.rodata.str1.1
 2842              	.LC32:
 2843 007c 7200     		.string	"r"
 2844              		.section	.rodata.str1.8
 2845 007e 0000     		.align 8
 2846              	.LC33:
 2847 0080 2F686F6D 		.string	"/home/shubham/Desktop/track_data.csv"
 2847      652F7368 
 2847      75626861 
 2847      6D2F4465 
 2847      736B746F 
 2848              		.section	.rodata.str1.1
 2849              	.LC34:
 2850 007e 25642C25 		.string	"%d,%d,%d,%d,%d"
 2850      642C2564 
 2850      2C25642C 
 2850      256400
 2851              	.LC35:
 2852 008d 45786973 		.string	"Existing track_data"
 2852      74696E67 
 2852      20747261 
 2852      636B5F64 
 2852      61746100 
 2853              	.LC36:
 2854 00a1 25642000 		.string	"%d "
 2855              	.LC37:
 2856 00a5 0A00     		.string	"\n"
 2857              	.LC38:
 2858 00a7 25642C25 		.string	"%d,%d,%d,%d,%d\n"
 2858      642C2564 
 2858      2C25642C 
 2858      25640A00 
 2859              	.LC39:
 2860 00b7 7700     		.string	"w"
 2861              	.LC40:
 2862 00b9 55706461 		.string	"Updated track_data"
 2862      74656420 
 2862      74726163 
 2862      6B5F6461 
 2862      746100
 2863              		.section	.text.unlikely
 2864              	.LCOLDB41:
 2865              		.text
 2866              	.LHOTB41:
 2867              		.p2align 4,,15
 2868              		.globl	writecsv
 2870              	writecsv:
 2871              	.LFB59:
 2872              		.cfi_startproc
 2873 1c70 4157     		pushq	%r15
 2874              		.cfi_def_cfa_offset 16
 2875              		.cfi_offset 15, -16
 2876 1c72 4156     		pushq	%r14
 2877              		.cfi_def_cfa_offset 24
 2878              		.cfi_offset 14, -24
 2879 1c74 4155     		pushq	%r13
 2880              		.cfi_def_cfa_offset 32
 2881              		.cfi_offset 13, -32
 2882 1c76 4154     		pushq	%r12
 2883              		.cfi_def_cfa_offset 40
 2884              		.cfi_offset 12, -40
 2885 1c78 4189FD   		movl	%edi, %r13d
 2886 1c7b 55       		pushq	%rbp
 2887              		.cfi_def_cfa_offset 48
 2888              		.cfi_offset 6, -48
 2889 1c7c 53       		pushq	%rbx
 2890              		.cfi_def_cfa_offset 56
 2891              		.cfi_offset 3, -56
 2892 1c7d BF000000 		movl	$.LC33, %edi
 2892      00
 2893 1c82 31DB     		xorl	%ebx, %ebx
 2894 1c84 4881EC28 		subq	$2088, %rsp
 2894      080000
 2895              		.cfi_def_cfa_offset 2144
 2896 1c8b 4C8D7424 		leaq	80(%rsp), %r14
 2896      50
 2897 1c90 89742404 		movl	%esi, 4(%rsp)
 2898 1c94 BE000000 		movl	$.LC32, %esi
 2898      00
 2899 1c99 89542408 		movl	%edx, 8(%rsp)
 2900 1c9d 894C240C 		movl	%ecx, 12(%rsp)
 2901 1ca1 4C8D6424 		leaq	60(%rsp), %r12
 2901      3C
 2902 1ca6 44894424 		movl	%r8d, 24(%rsp)
 2902      18
 2903 1cab 4D89F7   		movq	%r14, %r15
 2904 1cae 64488B04 		movq	%fs:40, %rax
 2904      25280000 
 2904      00
 2905 1cb7 48898424 		movq	%rax, 2072(%rsp)
 2905      18080000 
 2906 1cbf 31C0     		xorl	%eax, %eax
 2907 1cc1 E8000000 		call	fopen
 2907      00
 2908 1cc6 4889C5   		movq	%rax, %rbp
 2909 1cc9 EB34     		jmp	.L280
 2910 1ccb 0F1F4400 		.p2align 4,,10
 2910      00
 2911              		.p2align 3
 2912              	.L281:
 2913 1cd0 8B44242C 		movl	44(%rsp), %eax
 2914 1cd4 83C301   		addl	$1, %ebx
 2915 1cd7 4983C714 		addq	$20, %r15
 2916 1cdb 418947EC 		movl	%eax, -20(%r15)
 2917 1cdf 8B442430 		movl	48(%rsp), %eax
 2918 1ce3 418947E8 		movl	%eax, -24(%r15)
 2919 1ce7 8B442434 		movl	52(%rsp), %eax
 2920 1ceb 418947E4 		movl	%eax, -28(%r15)
 2921 1cef 8B442438 		movl	56(%rsp), %eax
 2922 1cf3 418947E0 		movl	%eax, -32(%r15)
 2923 1cf7 8B44243C 		movl	60(%rsp), %eax
 2924 1cfb 418947DC 		movl	%eax, -36(%r15)
 2925              	.L280:
 2926 1cff 4883EC08 		subq	$8, %rsp
 2927              		.cfi_def_cfa_offset 2152
 2928 1d03 BE000000 		movl	$.LC34, %esi
 2928      00
 2929 1d08 31C0     		xorl	%eax, %eax
 2930 1d0a 4154     		pushq	%r12
 2931              		.cfi_def_cfa_offset 2160
 2932 1d0c 4889EF   		movq	%rbp, %rdi
 2933 1d0f 4C8D4C24 		leaq	72(%rsp), %r9
 2933      48
 2934 1d14 4C8D4424 		leaq	68(%rsp), %r8
 2934      44
 2935 1d19 488D4C24 		leaq	64(%rsp), %rcx
 2935      40
 2936 1d1e 488D5424 		leaq	60(%rsp), %rdx
 2936      3C
 2937 1d23 E8000000 		call	__isoc99_fscanf
 2937      00
 2938 1d28 83F805   		cmpl	$5, %eax
 2939 1d2b 59       		popq	%rcx
 2940              		.cfi_def_cfa_offset 2152
 2941 1d2c 5E       		popq	%rsi
 2942              		.cfi_def_cfa_offset 2144
 2943 1d2d 74A1     		je	.L281
 2944 1d2f 31C0     		xorl	%eax, %eax
 2945 1d31 BA000000 		movl	$.LC35, %edx
 2945      00
 2946 1d36 BE000000 		movl	$.LC26, %esi
 2946      00
 2947 1d3b BF010000 		movl	$1, %edi
 2947      00
 2948 1d40 E8000000 		call	__printf_chk
 2948      00
 2949 1d45 85DB     		testl	%ebx, %ebx
 2950 1d47 0F84F101 		je	.L282
 2950      0000
 2951 1d4d 8D43FF   		leal	-1(%rbx), %eax
 2952 1d50 4C8D7C24 		leaq	64(%rsp), %r15
 2952      40
 2953 1d55 895C241C 		movl	%ebx, 28(%rsp)
 2954 1d59 48894424 		movq	%rax, 16(%rsp)
 2954      10
 2955 1d5e 488D4480 		leaq	5(%rax,%rax,4), %rax
 2955      05
 2956 1d63 4C89FB   		movq	%r15, %rbx
 2957 1d66 488D4484 		leaq	64(%rsp,%rax,4), %rax
 2957      40
 2958 1d6b 4989C7   		movq	%rax, %r15
 2959 1d6e 6690     		.p2align 4,,10
 2960              		.p2align 3
 2961              	.L284:
 2962 1d70 4531E4   		xorl	%r12d, %r12d
 2963              	.L283:
 2964 1d73 428B5423 		movl	16(%rbx,%r12), %edx
 2964      10
 2965 1d78 31C0     		xorl	%eax, %eax
 2966 1d7a BE000000 		movl	$.LC36, %esi
 2966      00
 2967 1d7f BF010000 		movl	$1, %edi
 2967      00
 2968 1d84 4983EC04 		subq	$4, %r12
 2969 1d88 E8000000 		call	__printf_chk
 2969      00
 2970 1d8d 4983FCEC 		cmpq	$-20, %r12
 2971 1d91 75E0     		jne	.L283
 2972 1d93 31C0     		xorl	%eax, %eax
 2973 1d95 BE000000 		movl	$.LC37, %esi
 2973      00
 2974 1d9a BF010000 		movl	$1, %edi
 2974      00
 2975 1d9f 4883C314 		addq	$20, %rbx
 2976 1da3 E8000000 		call	__printf_chk
 2976      00
 2977 1da8 4C39FB   		cmpq	%r15, %rbx
 2978 1dab 75C3     		jne	.L284
 2979 1dad BE000000 		movl	$.LC37, %esi
 2979      00
 2980 1db2 BF010000 		movl	$1, %edi
 2980      00
 2981 1db7 31C0     		xorl	%eax, %eax
 2982 1db9 8B5C241C 		movl	28(%rsp), %ebx
 2983 1dbd E8000000 		call	__printf_chk
 2983      00
 2984 1dc2 BE000000 		movl	$.LC39, %esi
 2984      00
 2985 1dc7 BF000000 		movl	$.LC33, %edi
 2985      00
 2986 1dcc E8000000 		call	fopen
 2986      00
 2987 1dd1 4989C4   		movq	%rax, %r12
 2988 1dd4 488B4424 		movq	16(%rsp), %rax
 2988      10
 2989 1dd9 31D2     		xorl	%edx, %edx
 2990 1ddb 8B4C2404 		movl	4(%rsp), %ecx
 2991 1ddf 8B7C2408 		movl	8(%rsp), %edi
 2992 1de3 8B74240C 		movl	12(%rsp), %esi
 2993 1de7 448B4424 		movl	24(%rsp), %r8d
 2993      18
 2994 1dec 488D0480 		leaq	(%rax,%rax,4), %rax
 2995 1df0 488D4484 		leaq	100(%rsp,%rax,4), %rax
 2995      64
 2996 1df5 EB12     		jmp	.L287
 2997 1df7 660F1F84 		.p2align 4,,10
 2997      00000000 
 2997      00
 2998              		.p2align 3
 2999              	.L286:
 3000 1e00 4983C614 		addq	$20, %r14
 3001 1e04 4939C6   		cmpq	%rax, %r14
 3002 1e07 7425     		je	.L313
 3003              	.L287:
 3004 1e09 45392E   		cmpl	%r13d, (%r14)
 3005 1e0c 75F2     		jne	.L286
 3006 1e0e 41394EFC 		cmpl	%ecx, -4(%r14)
 3007 1e12 75EC     		jne	.L286
 3008 1e14 413976F8 		cmpl	%esi, -8(%r14)
 3009 1e18 75E6     		jne	.L286
 3010 1e1a 41897EF4 		movl	%edi, -12(%r14)
 3011 1e1e 458946F0 		movl	%r8d, -16(%r14)
 3012 1e22 4983C614 		addq	$20, %r14
 3013 1e26 83C201   		addl	$1, %edx
 3014 1e29 4939C6   		cmpq	%rax, %r14
 3015 1e2c 75DB     		jne	.L287
 3016              	.L313:
 3017 1e2e 85D2     		testl	%edx, %edx
 3018 1e30 7533     		jne	.L294
 3019              	.L293:
 3020 1e32 4863C3   		movslq	%ebx, %rax
 3021 1e35 8B7C2404 		movl	4(%rsp), %edi
 3022 1e39 83C301   		addl	$1, %ebx
 3023 1e3c 488D0480 		leaq	(%rax,%rax,4), %rax
 3024 1e40 48C1E002 		salq	$2, %rax
 3025 1e44 897C044C 		movl	%edi, 76(%rsp,%rax)
 3026 1e48 8B7C240C 		movl	12(%rsp), %edi
 3027 1e4c 44896C04 		movl	%r13d, 80(%rsp,%rax)
 3027      50
 3028 1e51 897C0448 		movl	%edi, 72(%rsp,%rax)
 3029 1e55 8B7C2408 		movl	8(%rsp), %edi
 3030 1e59 897C0444 		movl	%edi, 68(%rsp,%rax)
 3031 1e5d 8B7C2418 		movl	24(%rsp), %edi
 3032 1e61 897C0440 		movl	%edi, 64(%rsp,%rax)
 3033              	.L294:
 3034 1e65 4C8D7C24 		leaq	64(%rsp), %r15
 3034      40
 3035 1e6a 4531F6   		xorl	%r14d, %r14d
 3036 1e6d 4D89FD   		movq	%r15, %r13
 3037              		.p2align 4,,10
 3038              		.p2align 3
 3039              	.L289:
 3040 1e70 418B4500 		movl	0(%r13), %eax
 3041 1e74 418B4D10 		movl	16(%r13), %ecx
 3042 1e78 BA000000 		movl	$.LC38, %edx
 3042      00
 3043 1e7d BE010000 		movl	$1, %esi
 3043      00
 3044 1e82 4C89E7   		movq	%r12, %rdi
 3045 1e85 4183C601 		addl	$1, %r14d
 3046 1e89 4983C514 		addq	$20, %r13
 3047 1e8d 50       		pushq	%rax
 3048              		.cfi_def_cfa_offset 2152
 3049 1e8e 418B45F0 		movl	-16(%r13), %eax
 3050 1e92 50       		pushq	%rax
 3051              		.cfi_def_cfa_offset 2160
 3052 1e93 458B4DF4 		movl	-12(%r13), %r9d
 3053 1e97 31C0     		xorl	%eax, %eax
 3054 1e99 458B45F8 		movl	-8(%r13), %r8d
 3055 1e9d E8000000 		call	__fprintf_chk
 3055      00
 3056 1ea2 4439F3   		cmpl	%r14d, %ebx
 3057 1ea5 58       		popq	%rax
 3058              		.cfi_def_cfa_offset 2152
 3059 1ea6 5A       		popq	%rdx
 3060              		.cfi_def_cfa_offset 2144
 3061 1ea7 7FC7     		jg	.L289
 3062 1ea9 BA000000 		movl	$.LC40, %edx
 3062      00
 3063 1eae BE000000 		movl	$.LC26, %esi
 3063      00
 3064 1eb3 BF010000 		movl	$1, %edi
 3064      00
 3065 1eb8 31C0     		xorl	%eax, %eax
 3066 1eba 4531F6   		xorl	%r14d, %r14d
 3067 1ebd E8000000 		call	__printf_chk
 3067      00
 3068              		.p2align 4,,10
 3069 1ec2 660F1F44 		.p2align 3
 3069      0000
 3070              	.L292:
 3071 1ec8 4531ED   		xorl	%r13d, %r13d
 3072              	.L291:
 3073 1ecb 438B542F 		movl	16(%r15,%r13), %edx
 3073      10
 3074 1ed0 31C0     		xorl	%eax, %eax
 3075 1ed2 BE000000 		movl	$.LC36, %esi
 3075      00
 3076 1ed7 BF010000 		movl	$1, %edi
 3076      00
 3077 1edc 4983ED04 		subq	$4, %r13
 3078 1ee0 E8000000 		call	__printf_chk
 3078      00
 3079 1ee5 4983FDEC 		cmpq	$-20, %r13
 3080 1ee9 75E0     		jne	.L291
 3081 1eeb 31C0     		xorl	%eax, %eax
 3082 1eed BE000000 		movl	$.LC37, %esi
 3082      00
 3083 1ef2 BF010000 		movl	$1, %edi
 3083      00
 3084 1ef7 4183C601 		addl	$1, %r14d
 3085 1efb 4983C714 		addq	$20, %r15
 3086 1eff E8000000 		call	__printf_chk
 3086      00
 3087 1f04 4439F3   		cmpl	%r14d, %ebx
 3088 1f07 7FBF     		jg	.L292
 3089 1f09 4889EF   		movq	%rbp, %rdi
 3090 1f0c E8000000 		call	fclose
 3090      00
 3091 1f11 4C89E7   		movq	%r12, %rdi
 3092 1f14 E8000000 		call	fclose
 3092      00
 3093 1f19 488B8424 		movq	2072(%rsp), %rax
 3093      18080000 
 3094 1f21 64483304 		xorq	%fs:40, %rax
 3094      25280000 
 3094      00
 3095 1f2a 753A     		jne	.L314
 3096 1f2c 4881C428 		addq	$2088, %rsp
 3096      080000
 3097              		.cfi_remember_state
 3098              		.cfi_def_cfa_offset 56
 3099 1f33 5B       		popq	%rbx
 3100              		.cfi_def_cfa_offset 48
 3101 1f34 5D       		popq	%rbp
 3102              		.cfi_def_cfa_offset 40
 3103 1f35 415C     		popq	%r12
 3104              		.cfi_def_cfa_offset 32
 3105 1f37 415D     		popq	%r13
 3106              		.cfi_def_cfa_offset 24
 3107 1f39 415E     		popq	%r14
 3108              		.cfi_def_cfa_offset 16
 3109 1f3b 415F     		popq	%r15
 3110              		.cfi_def_cfa_offset 8
 3111 1f3d C3       		ret
 3112              	.L282:
 3113              		.cfi_restore_state
 3114 1f3e BE000000 		movl	$.LC37, %esi
 3114      00
 3115 1f43 BF010000 		movl	$1, %edi
 3115      00
 3116 1f48 31C0     		xorl	%eax, %eax
 3117 1f4a E8000000 		call	__printf_chk
 3117      00
 3118 1f4f BE000000 		movl	$.LC39, %esi
 3118      00
 3119 1f54 BF000000 		movl	$.LC33, %edi
 3119      00
 3120 1f59 E8000000 		call	fopen
 3120      00
 3121 1f5e 4989C4   		movq	%rax, %r12
 3122 1f61 E9CCFEFF 		jmp	.L293
 3122      FF
 3123              	.L314:
 3124 1f66 E8000000 		call	__stack_chk_fail
 3124      00
 3125              		.cfi_endproc
 3126              	.LFE59:
 3128              		.section	.text.unlikely
 3129              	.LCOLDE41:
 3130              		.text
 3131              	.LHOTE41:
 3132              		.section	.text.unlikely
 3133              	.LCOLDB42:
 3134              		.text
 3135              	.LHOTB42:
 3136 1f6b 0F1F4400 		.p2align 4,,15
 3136      00
 3137              		.globl	asciiToBinary
 3139              	asciiToBinary:
 3140              	.LFB67:
 3141              		.cfi_startproc
 3142 1f70 85FF     		testl	%edi, %edi
 3143 1f72 7E21     		jle	.L318
 3144 1f74 BA010000 		movl	$1, %edx
 3144      00
 3145 1f79 31C0     		xorl	%eax, %eax
 3146 1f7b 0F1F4400 		.p2align 4,,10
 3146      00
 3147              		.p2align 3
 3148              	.L317:
 3149 1f80 89F9     		movl	%edi, %ecx
 3150 1f82 83E101   		andl	$1, %ecx
 3151 1f85 0FAFCA   		imull	%edx, %ecx
 3152 1f88 8D1492   		leal	(%rdx,%rdx,4), %edx
 3153 1f8b 01D2     		addl	%edx, %edx
 3154 1f8d 01C8     		addl	%ecx, %eax
 3155 1f8f D1FF     		sarl	%edi
 3156 1f91 75ED     		jne	.L317
 3157 1f93 F3C3     		rep ret
 3158              	.L318:
 3159 1f95 31C0     		xorl	%eax, %eax
 3160 1f97 C3       		ret
 3161              		.cfi_endproc
 3162              	.LFE67:
 3164              		.section	.text.unlikely
 3165              	.LCOLDE42:
 3166              		.text
 3167              	.LHOTE42:
 3168              		.section	.rodata.str1.8
 3169 00a5 000000   		.align 8
 3170              	.LC43:
 3171 00a8 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 3171      20202020 
 3171      20202020 
 3171      76656E64 
 3171      6F722049 
 3172              		.section	.rodata.str1.1
 3173              	.LC44:
 3174 00cc 3C564944 		.string	"<VID:PID>"
 3174      3A504944 
 3174      3E00
 3175              	.LC45:
 3176 00d6 69767000 		.string	"ivp"
 3177              	.LC46:
 3178 00da 6900     		.string	"i"
 3179              		.section	.rodata.str1.8
 3180 00dd 000000   		.align 8
 3181              	.LC47:
 3182 00e0 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 3182      20202056 
 3182      49442C20 
 3182      50494420 
 3182      616E6420 
 3183              		.section	.rodata.str1.1
 3184              	.LC48:
 3185 00dc 3C564944 		.string	"<VID:PID[:DID]>"
 3185      3A504944 
 3185      5B3A4449 
 3185      445D3E00 
 3186              	.LC49:
 3187 00ec 767000   		.string	"vp"
 3188              	.LC50:
 3189 00ef 7600     		.string	"v"
 3190              		.section	.rodata.str1.8
 3191 0115 000000   		.align 8
 3192              	.LC51:
 3193 0118 20202020 		.string	"        firmware to RAM-load (or use std fw)"
 3193      20202020 
 3193      6669726D 
 3193      77617265 
 3193      20746F20 
 3194              		.section	.rodata.str1.1
 3195              	.LC52:
 3196 00f1 3C666972 		.string	"<firmware.hex>"
 3196      6D776172 
 3196      652E6865 
 3196      783E00
 3197              	.LC53:
 3198 0100 667700   		.string	"fw"
 3199              	.LC54:
 3200 0103 6600     		.string	"f"
 3201              		.section	.rodata.str1.8
 3202 0145 000000   		.align 8
 3203              	.LC55:
 3204 0148 20726561 		.string	" read/write digital ports (e.g B13+,C1-,B2?)"
 3204      642F7772 
 3204      69746520 
 3204      64696769 
 3204      74616C20 
 3205              		.section	.rodata.str1.1
 3206              	.LC56:
 3207 0105 3C626974 		.string	"<bitCfg[,bitCfg]*>"
 3207      4366675B 
 3207      2C626974 
 3207      4366675D 
 3207      2A3E00
 3208              	.LC57:
 3209 0118 706F7274 		.string	"ports"
 3209      7300
 3210              	.LC58:
 3211 011e 6400     		.string	"d"
 3212              	.LC59:
 3213 0120 20202020 		.string	"         query the JTAG chain"
 3213      20202020 
 3213      20717565 
 3213      72792074 
 3213      6865204A 
 3214              	.LC60:
 3215 013e 3C6A7461 		.string	"<jtagBits>"
 3215      67426974 
 3215      733E00
 3216              	.LC61:
 3217 0149 71756572 		.string	"query"
 3217      7900
 3218              	.LC62:
 3219 014f 7100     		.string	"q"
 3220              	.LC63:
 3221 0151 20202020 		.string	"         program a device"
 3221      20202020 
 3221      2070726F 
 3221      6772616D 
 3221      20612064 
 3222              	.LC64:
 3223 016b 3C636F6E 		.string	"<config>"
 3223      6669673E 
 3223      00
 3224              	.LC65:
 3225 0174 70726F67 		.string	"program"
 3225      72616D00 
 3226              	.LC66:
 3227 017c 7000     		.string	"p"
 3228              		.section	.rodata.str1.8
 3229 0175 000000   		.align 8
 3230              	.LC67:
 3231 0178 20202020 		.string	"        which comm conduit to choose (default 0x01)"
 3231      20202020 
 3231      77686963 
 3231      6820636F 
 3231      6D6D2063 
 3232              		.section	.rodata.str1.1
 3233              	.LC68:
 3234 017e 3C636F6E 		.string	"<conduit>"
 3234      64756974 
 3234      3E00
 3235              	.LC69:
 3236 0188 636F6E64 		.string	"conduit"
 3236      75697400 
 3237              	.LC70:
 3238 0190 6300     		.string	"c"
 3239              		.section	.rodata.str1.8
 3240 01ac 00000000 		.align 8
 3241              	.LC71:
 3242 01b0 20202020 		.string	"    a series of CommFPGA actions"
 3242      61207365 
 3242      72696573 
 3242      206F6620 
 3242      436F6D6D 
 3243              		.section	.rodata.str1.1
 3244              	.LC72:
 3245 0192 3C616374 		.string	"<actionString>"
 3245      696F6E53 
 3245      7472696E 
 3245      673E00
 3246              	.LC73:
 3247 01a1 61637469 		.string	"action"
 3247      6F6E00
 3248              	.LC74:
 3249 01a8 6100     		.string	"a"
 3250              		.section	.rodata.str1.8
 3251 01d1 00000000 		.align 8
 3251      000000
 3252              	.LC75:
 3253 01d8 20202020 		.string	"                 some other stuff"
 3253      20202020 
 3253      20202020 
 3253      20202020 
 3253      20736F6D 
 3254              		.section	.rodata.str1.1
 3255              	.LC76:
 3256 01aa 736F6D65 		.string	"some stuff"
 3256      20737475 
 3256      666600
 3257              	.LC77:
 3258 01b5 7A00     		.string	"z"
 3259              		.section	.rodata.str1.8
 3260 01fa 00000000 		.align 8
 3260      0000
 3261              	.LC78:
 3262 0200 20202020 		.string	"                    start up an interactive CommFPGA session"
 3262      20202020 
 3262      20202020 
 3262      20202020 
 3262      20202020 
 3263              		.section	.rodata.str1.1
 3264              	.LC79:
 3265 01b7 7368656C 		.string	"shell"
 3265      6C00
 3266              	.LC80:
 3267 01bd 7300     		.string	"s"
 3268              		.section	.rodata.str1.8
 3269 023d 000000   		.align 8
 3270              	.LC81:
 3271 0240 20202020 		.string	"                enable benchmarking & chefcksumming"
 3271      20202020 
 3271      20202020 
 3271      20202020 
 3271      656E6162 
 3272              		.section	.rodata.str1.1
 3273              	.LC82:
 3274 01bf 62656E63 		.string	"benchmark"
 3274      686D6172 
 3274      6B00
 3275              	.LC83:
 3276 01c9 6200     		.string	"b"
 3277              		.section	.rodata.str1.8
 3278 0274 00000000 		.align 8
 3279              	.LC84:
 3280 0278 20202020 		.string	"                    reset the bulk endpoints"
 3280      20202020 
 3280      20202020 
 3280      20202020 
 3280      20202020 
 3281              		.section	.rodata.str1.1
 3282              	.LC85:
 3283 01cb 72657365 		.string	"reset"
 3283      7400
 3284              		.section	.rodata.str1.8
 3285 02a5 000000   		.align 8
 3286              	.LC86:
 3287 02a8 20202077 		.string	"   write data from channel ch to file"
 3287      72697465 
 3287      20646174 
 3287      61206672 
 3287      6F6D2063 
 3288              		.section	.rodata.str1.1
 3289              	.LC87:
 3290 01d1 3C63683A 		.string	"<ch:file.bin>"
 3290      66696C65 
 3290      2E62696E 
 3290      3E00
 3291              	.LC88:
 3292 01df 64756D70 		.string	"dumploop"
 3292      6C6F6F70 
 3292      00
 3293              	.LC89:
 3294 01e8 6C00     		.string	"l"
 3295              		.section	.rodata.str1.8
 3296 02ce 0000     		.align 8
 3297              	.LC90:
 3298 02d0 20202020 		.string	"                     print this help and exit"
 3298      20202020 
 3298      20202020 
 3298      20202020 
 3298      20202020 
 3299              		.section	.rodata.str1.1
 3300              	.LC91:
 3301 01ea 68656C70 		.string	"help"
 3301      00
 3302              	.LC92:
 3303 01ef 6800     		.string	"h"
 3304              		.section	.rodata.str1.8
 3305 02fe 0000     		.align 8
 3306              	.LC93:
 3307 0300 20202077 		.string	"   write firmware to FX2's EEPROM (!!)"
 3307      72697465 
 3307      20666972 
 3307      6D776172 
 3307      6520746F 
 3308              		.section	.rodata.str1.1
 3309              	.LC94:
 3310 01f1 3C737464 		.string	"<std|fw.hex|fw.iic>"
 3310      7C66772E 
 3310      6865787C 
 3310      66772E69 
 3310      69633E00 
 3311              	.LC95:
 3312 0205 65657072 		.string	"eeprom"
 3312      6F6D00
 3313              		.section	.rodata.str1.8
 3314 0327 00       		.align 8
 3315              	.LC96:
 3316 0328 20202020 		.string	"     backup FX2's EEPROM (e.g 128:fw.iic)\n"
 3316      20626163 
 3316      6B757020 
 3316      46583227 
 3316      73204545 
 3317              		.section	.rodata.str1.1
 3318              	.LC97:
 3319 020c 3C6B6269 		.string	"<kbitSize:fw.iic>"
 3319      7453697A 
 3319      653A6677 
 3319      2E696963 
 3319      3E00
 3320              	.LC98:
 3321 021e 6261636B 		.string	"backup"
 3321      757000
 3322              	.LC99:
 3323 0225 666C636C 		.string	"flcli"
 3323      6900
 3324              	.LC100:
 3325 022b 25733A20 		.string	"%s: insufficient memory\n"
 3325      696E7375 
 3325      66666963 
 3325      69656E74 
 3325      206D656D 
 3326              		.section	.rodata.str1.8
 3327 0353 00000000 		.align 8
 3327      00
 3328              	.LC101:
 3329 0358 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s"
 3329      4C696E6B 
 3329      20436F6D 
 3329      6D616E64 
 3329      2D4C696E 
 3330 03ac 00000000 		.align 8
 3331              	.LC102:
 3332 03b0 0A496E74 		.string	"\nInteract with an FPGALink device.\n\n"
 3332      65726163 
 3332      74207769 
 3332      74682061 
 3332      6E204650 
 3333              		.section	.rodata.str1.1
 3334              	.LC103:
 3335 0244 2020252D 		.string	"  %-10s %s\n"
 3335      31307320 
 3335      25730A00 
 3336              		.section	.rodata.str1.8
 3337 03d5 000000   		.align 8
 3338              	.LC104:
 3339 03d8 54727920 		.string	"Try '%s --help' for more information.\n"
 3339      27257320 
 3339      2D2D6865 
 3339      6C702720 
 3339      666F7220 
 3340 03ff 00       		.align 8
 3341              	.LC105:
 3342 0400 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 3342      6D707469 
 3342      6E672074 
 3342      6F206F70 
 3342      656E2063 
 3343              		.section	.rodata.str1.1
 3344              	.LC106:
 3345 0250 4C6F6164 		.string	"Loading firmware into %s...\n"
 3345      696E6720 
 3345      6669726D 
 3345      77617265 
 3345      20696E74 
 3346              	.LC107:
 3347 026d 41776169 		.string	"Awaiting renumeration"
 3347      74696E67 
 3347      2072656E 
 3347      756D6572 
 3347      6174696F 
 3348              	.LC108:
 3349 0283 2E00     		.string	"."
 3350              		.section	.rodata.str1.8
 3351              		.align 8
 3352              	.LC109:
 3353 0438 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 3353      4C696E6B 
 3353      20646576 
 3353      69636520 
 3353      64696420 
 3354 046b 00000000 		.align 8
 3354      00
 3355              	.LC110:
 3356 0470 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 3356      6D707469 
 3356      6E672074 
 3356      6F206F70 
 3356      656E2063 
 3357 04ad 000000   		.align 8
 3358              	.LC111:
 3359 04b0 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 3359      64206E6F 
 3359      74206F70 
 3359      656E2046 
 3359      5047414C 
 3360 04fa 00000000 		.align 8
 3360      0000
 3361              	.LC112:
 3362 0500 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 3362      65637465 
 3362      6420746F 
 3362      20465047 
 3362      414C696E 
 3363 054f 00       		.align 8
 3364              	.LC113:
 3365 0550 57726974 		.string	"Writing the standard FPGALink firmware to the FX2's EEPROM...\n"
 3365      696E6720 
 3365      74686520 
 3365      7374616E 
 3365      64617264 
 3366 058f 00       		.align 8
 3367              	.LC114:
 3368 0590 57726974 		.string	"Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n"
 3368      696E6720 
 3368      63757374 
 3368      6F6D2046 
 3368      5047414C 
 3369 05d1 00000000 		.align 8
 3369      000000
 3370              	.LC115:
 3371 05d8 25733A20 		.string	"%s: invalid argument to option --backup=<kbitSize:fw.iic>\n"
 3371      696E7661 
 3371      6C696420 
 3371      61726775 
 3371      6D656E74 
 3372 0613 00000000 		.align 8
 3372      00
 3373              	.LC116:
 3374 0618 53617669 		.string	"Saving a backup of %d kbit from the FX2's EEPROM to %s...\n"
 3374      6E672061 
 3374      20626163 
 3374      6B757020 
 3374      6F662025 
 3375              		.section	.rodata.str1.1
 3376              	.LC117:
 3377 0285 436F6E66 		.string	"Configuring ports...\n"
 3377      69677572 
 3377      696E6720 
 3377      706F7274 
 3377      732E2E2E 
 3378              	.LC118:
 3379 029b 25303858 		.string	"%08X"
 3379      00
 3380              		.section	.rodata.str1.8
 3381 0653 00000000 		.align 8
 3381      00
 3382              	.LC119:
 3383 0658 52656164 		.string	"Readback:   28   24   20   16    12    8    4    0\n          %s"
 3383      6261636B 
 3383      3A202020 
 3383      32382020 
 3383      20323420 
 3384              		.section	.rodata.str1.1
 3385              	.LC120:
 3386 02a0 20257300 		.string	" %s"
 3387              	.LC121:
 3388 02a4 20202573 		.string	"  %s"
 3388      00
 3389              	.LC122:
 3390 02a9 2025730A 		.string	" %s\n"
 3390      00
 3391              		.section	.rodata.str1.8
 3392              		.align 8
 3393              	.LC123:
 3394 0698 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain, yielding:\n"
 3394      46504741 
 3394      4C696E6B 
 3394      20646576 
 3394      69636520 
 3395              		.section	.rodata.str1.1
 3396              	.LC124:
 3397 02ae 20203078 		.string	"  0x%08X\n"
 3397      25303858 
 3397      0A00
 3398              		.section	.rodata.str1.8
 3399 06d5 000000   		.align 8
 3400              	.LC125:
 3401 06d8 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\n"
 3401      46504741 
 3401      4C696E6B 
 3401      20646576 
 3401      69636520 
 3402              		.align 8
 3403              	.LC126:
 3404 0730 4A544147 		.string	"JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n"
 3404      20636861 
 3404      696E2073 
 3404      63616E20 
 3404      72657175 
 3405              		.section	.rodata.str1.1
 3406              	.LC127:
 3407 02b8 50726F67 		.string	"Programming device...\n"
 3407      72616D6D 
 3407      696E6720 
 3407      64657669 
 3407      63652E2E 
 3408              		.section	.rodata.str1.8
 3409 077f 00       		.align 8
 3410              	.LC128:
 3411 0780 50726F67 		.string	"Program operation requested but device at %s does not support NeroProg\n"
 3411      72616D20 
 3411      6F706572 
 3411      6174696F 
 3411      6E207265 
 3412              		.align 8
 3413              	.LC129:
 3414 07c8 45786563 		.string	"Executing CommFPGA actions on FPGALink device %s...\n"
 3414      7574696E 
 3414      6720436F 
 3414      6D6D4650 
 3414      47412061 
 3415 07fd 000000   		.align 8
 3416              	.LC130:
 3417 0800 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 3417      46504741 
 3417      4C696E6B 
 3417      20646576 
 3417      69636520 
 3418 084c 00000000 		.align 8
 3419              	.LC131:
 3420 0850 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 3420      6F6E2072 
 3420      65717565 
 3420      73746564 
 3420      20627574 
 3421 088d 000000   		.align 8
 3422              	.LC132:
 3423 0890 25733A20 		.string	"%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n"
 3423      696E7661 
 3423      6C696420 
 3423      61726775 
 3423      6D656E74 
 3424 08cc 00000000 		.align 8
 3425              	.LC133:
 3426 08d0 436F7079 		.string	"Copying from channel %lu to %s"
 3426      696E6720 
 3426      66726F6D 
 3426      20636861 
 3426      6E6E656C 
 3427              		.section	.rodata.str1.1
 3428              	.LC134:
 3429 02cf 0A436175 		.string	"\nCaught SIGINT, quitting...\n"
 3429      67687420 
 3429      53494749 
 3429      4E542C20 
 3429      71756974 
 3430              		.section	.rodata.str1.8
 3431 08ef 00       		.align 8
 3432              	.LC135:
 3433 08f0 0A456E74 		.string	"\nEntering CommFPGA command-line mode:\n"
 3433      6572696E 
 3433      6720436F 
 3433      6D6D4650 
 3433      47412063 
 3434              		.section	.rodata.str1.1
 3435              	.LC136:
 3436 02ec 3E2000   		.string	"> "
 3437              		.section	.rodata.str1.8
 3438 0917 00       		.align 8
 3439              	.LC137:
 3440 0918 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n"
 3440      46504741 
 3440      4C696E6B 
 3440      20646576 
 3440      69636520 
 3441 0961 00000000 		.align 8
 3441      000000
 3442              	.LC138:
 3443 0968 5368656C 		.string	"Shell requested but device at %s does not support CommFPGA\n"
 3443      6C207265 
 3443      71756573 
 3443      74656420 
 3443      62757420 
 3444              		.section	.rodata.str1.1
 3445              	.LC146:
 3446 02ef 4368616E 		.string	"Channel = "
 3446      6E656C20 
 3446      3D2000
 3447              	.LC147:
 3448 02fa 257300   		.string	"%s"
 3449              	.LC148:
 3450 02fd 25640A00 		.string	"%d\n"
 3451              		.section	.rodata.str1.8
 3452 09a4 00000000 		.align 8
 3453              	.LC149:
 3454 09a8 2D2D2D2D 		.string	"----------------------H2.1 started----------------------- "
 3454      2D2D2D2D 
 3454      2D2D2D2D 
 3454      2D2D2D2D 
 3454      2D2D2D2D 
 3455 09e3 00000000 		.align 8
 3455      00
 3456              	.LC150:
 3457 09e8 57616974 		.string	"Waiting for encrypted co_ordinates"
 3457      696E6720 
 3457      666F7220 
 3457      656E6372 
 3457      79707465 
 3458 0a0b 00000000 		.align 8
 3458      00
 3459              	.LC151:
 3460 0a10 2D2D2D2D 		.string	"-------------------------RESET------------------------"
 3460      2D2D2D2D 
 3460      2D2D2D2D 
 3460      2D2D2D2D 
 3460      2D2D2D2D 
 3461 0a47 00       		.align 8
 3462              	.LC152:
 3463 0a48 476F7420 		.string	"Got the encrypted co_ordinates, they are as in uint8 form --"
 3463      74686520 
 3463      656E6372 
 3463      79707465 
 3463      6420636F 
 3464 0a85 000000   		.align 8
 3465              	.LC153:
 3466 0a88 656E6372 		.string	"encrypted_pos is converted to binary"
 3466      79707465 
 3466      645F706F 
 3466      73206973 
 3466      20636F6E 
 3467              		.section	.rodata.str1.1
 3468              	.LC154:
 3469 0301 54686520 		.string	"The encrypted_pos are as --"
 3469      656E6372 
 3469      79707465 
 3469      645F706F 
 3469      73206172 
 3470              		.section	.rodata.str1.8
 3471 0aad 000000   		.align 8
 3472              	.LC155:
 3473 0ab0 54686520 		.string	"The decrypted pos in binary form are as --"
 3473      64656372 
 3473      79707465 
 3473      6420706F 
 3473      7320696E 
 3474 0adb 00000000 		.align 8
 3474      00
 3475              	.LC156:
 3476 0ae0 2D2D2D2D 		.string	"----------------------H2.1 ended----------------------- "
 3476      2D2D2D2D 
 3476      2D2D2D2D 
 3476      2D2D2D2D 
 3476      2D2D2D2D 
 3477 0b19 00000000 		.align 8
 3477      000000
 3478              	.LC157:
 3479 0b20 2D2D2D2D 		.string	"----------------------H2.2 started----------------------- "
 3479      2D2D2D2D 
 3479      2D2D2D2D 
 3479      2D2D2D2D 
 3479      2D2D2D2D 
 3480 0b5b 00000000 		.align 8
 3480      00
 3481              	.LC158:
 3482 0b60 54686520 		.string	"The co_ordinates are re-encrypted in binary form"
 3482      636F5F6F 
 3482      7264696E 
 3482      61746573 
 3482      20617265 
 3483 0b91 00000000 		.align 8
 3483      000000
 3484              	.LC159:
 3485 0b98 54686520 		.string	"The re-encrypted co_ords are as follows"
 3485      72652D65 
 3485      6E637279 
 3485      70746564 
 3485      20636F5F 
 3486              		.align 8
 3487              	.LC160:
 3488 0bc0 436F6E76 		.string	"Converting the re-encrypted data in binary to uint8 form"
 3488      65727469 
 3488      6E672074 
 3488      68652072 
 3488      652D656E 
 3489 0bf9 00000000 		.align 8
 3489      000000
 3490              	.LC161:
 3491 0c00 50726570 		.string	"Preparing to send the encrypted co_ordinates "
 3491      6172696E 
 3491      6720746F 
 3491      2073656E 
 3491      64207468 
 3492 0c2e 0000     		.align 8
 3493              	.LC162:
 3494 0c30 53756363 		.string	"Successfully send the encrypted co_ordinates in uint8 form"
 3494      65737366 
 3494      756C6C79 
 3494      2073656E 
 3494      64207468 
 3495 0c6b 00000000 		.align 8
 3495      00
 3496              	.LC163:
 3497 0c70 2D2D2D2D 		.string	"----------------------H2.2 ended----------------------- "
 3497      2D2D2D2D 
 3497      2D2D2D2D 
 3497      2D2D2D2D 
 3497      2D2D2D2D 
 3498 0ca9 00000000 		.align 8
 3498      000000
 3499              	.LC164:
 3500 0cb0 2D2D2D2D 		.string	"----------------------H2.3 started----------------------- "
 3500      2D2D2D2D 
 3500      2D2D2D2D 
 3500      2D2D2D2D 
 3500      2D2D2D2D 
 3501 0ceb 00000000 		.align 8
 3501      00
 3502              	.LC165:
 3503 0cf0 57616974 		.string	"Waiting to get Ack1 from the fpga controller"
 3503      696E6720 
 3503      746F2067 
 3503      65742041 
 3503      636B3120 
 3504 0d1d 000000   		.align 8
 3505              	.LC166:
 3506 0d20 46697273 		.string	"First ack1 received successfully"
 3506      74206163 
 3506      6B312072 
 3506      65636569 
 3506      76656420 
 3507 0d41 00000000 		.align 8
 3507      000000
 3508              	.LC167:
 3509 0d48 54686520 		.string	"The first ack1 is ----- in uint8 form"
 3509      66697273 
 3509      74206163 
 3509      6B312069 
 3509      73202D2D 
 3510 0d6e 0000     		.align 8
 3511              	.LC168:
 3512 0d70 2D2D2D2D 		.string	"----------------------H2.3 ended----------------------- "
 3512      2D2D2D2D 
 3512      2D2D2D2D 
 3512      2D2D2D2D 
 3512      2D2D2D2D 
 3513 0da9 00000000 		.align 8
 3513      000000
 3514              	.LC169:
 3515 0db0 2D2D2D2D 		.string	"----------------------H2.4 started----------------------- "
 3515      2D2D2D2D 
 3515      2D2D2D2D 
 3515      2D2D2D2D 
 3515      2D2D2D2D 
 3516 0deb 00000000 		.align 8
 3516      00
 3517              	.LC170:
 3518 0df0 436F6E76 		.string	"Converting encrypted ack1 from uint8 to binary"
 3518      65727469 
 3518      6E672065 
 3518      6E637279 
 3518      70746564 
 3519 0e1f 00       		.align 8
 3520              	.LC171:
 3521 0e20 54686520 		.string	"The encrypted ack1 is as follows in binary form --"
 3521      656E6372 
 3521      79707465 
 3521      64206163 
 3521      6B312069 
 3522 0e53 00000000 		.align 8
 3522      00
 3523              	.LC172:
 3524 0e58 54686520 		.string	"The decrypted ack1 in binary is as follows --"
 3524      64656372 
 3524      79707465 
 3524      64206163 
 3524      6B312069 
 3525 0e86 0000     		.align 8
 3526              	.LC173:
 3527 0e88 43686563 		.string	"Checking if this ack1 is equal to the original ack1 "
 3527      6B696E67 
 3527      20696620 
 3527      74686973 
 3527      2061636B 
 3528 0ebd 000000   		.align 8
 3529              	.LC174:
 3530 0ec0 41636B31 		.string	"Ack1 received doesn't match with the original one"
 3530      20726563 
 3530      65697665 
 3530      6420646F 
 3530      65736E27 
 3531              		.section	.rodata.str1.1
 3532              	.LC175:
 3533 031d 52656164 		.string	"Reading the channel 2i again "
 3533      696E6720 
 3533      74686520 
 3533      6368616E 
 3533      6E656C20 
 3534              		.section	.rodata.str1.8
 3535 0ef2 00000000 		.align 8
 3535      0000
 3536              	.LC176:
 3537 0ef8 47657420 		.string	"Get the encrypted ack1 again successfully ---"
 3537      74686520 
 3537      656E6372 
 3537      79707465 
 3537      64206163 
 3538 0f26 0000     		.align 8
 3539              	.LC177:
 3540 0f28 436F6E76 		.string	"Converted encrypted ack1 to binary and it is as ----"
 3540      65727465 
 3540      6420656E 
 3540      63727970 
 3540      74656420 
 3541 0f5d 000000   		.align 8
 3542              	.LC178:
 3543 0f60 44656372 		.string	"Decrypting the encrypted ack1 "
 3543      79707469 
 3543      6E672074 
 3543      68652065 
 3543      6E637279 
 3544 0f7f 00       		.align 8
 3545              	.LC179:
 3546 0f80 41636B31 		.string	"Ack1 got decrpyted and is as ----"
 3546      20676F74 
 3546      20646563 
 3546      72707974 
 3546      65642061 
 3547 0fa2 00000000 		.align 8
 3547      0000
 3548              	.LC180:
 3549 0fa8 2D2D2D2D 		.string	"----------------------H2.4 ended----------------------- "
 3549      2D2D2D2D 
 3549      2D2D2D2D 
 3549      2D2D2D2D 
 3549      2D2D2D2D 
 3550 0fe1 00000000 		.align 8
 3550      000000
 3551              	.LC181:
 3552 0fe8 2D2D2D2D 		.string	"-------------------------H2.5 started-------------------------"
 3552      2D2D2D2D 
 3552      2D2D2D2D 
 3552      2D2D2D2D 
 3552      2D2D2D2D 
 3553 1027 00       		.align 8
 3554              	.LC182:
 3555 1028 4661696C 		.string	"Fails to receive encrypted ack1 "
 3555      7320746F 
 3555      20726563 
 3555      65697665 
 3555      20656E63 
 3556 1049 00000000 		.align 8
 3556      000000
 3557              	.LC183:
 3558 1050 2D2D2D2D 		.string	"-------------------------H2.5 ended-------------------------"
 3558      2D2D2D2D 
 3558      2D2D2D2D 
 3558      2D2D2D2D 
 3558      2D2D2D2D 
 3559 108d 000000   		.align 8
 3560              	.LC184:
 3561 1090 2D2D2D2D 		.string	"-------------------------H3 starts--------------------------"
 3561      2D2D2D2D 
 3561      2D2D2D2D 
 3561      2D2D2D2D 
 3561      2D2D2D2D 
 3562              		.section	.rodata.str1.1
 3563              	.LC185:
 3564 033b 656E6372 		.string	"encrypting ack2 "
 3564      79707469 
 3564      6E672061 
 3564      636B3220 
 3564      00
 3565              		.section	.rodata.str1.8
 3566 10cd 000000   		.align 8
 3567              	.LC186:
 3568 10d0 41636B32 		.string	"Ack2 got encrypted and it is as -----"
 3568      20676F74 
 3568      20656E63 
 3568      72797074 
 3568      65642061 
 3569 10f6 0000     		.align 8
 3570              	.LC187:
 3571 10f8 436F6E76 		.string	"Converting encrypted ack2 from binary to uint8"
 3571      65727469 
 3571      6E672065 
 3571      6E637279 
 3571      70746564 
 3572 1127 00       		.align 8
 3573              	.LC188:
 3574 1128 436F6E76 		.string	"Converted encrypted ack2 to uint8 and it is as -----"
 3574      65727465 
 3574      6420656E 
 3574      63727970 
 3574      74656420 
 3575 115d 000000   		.align 8
 3576              	.LC189:
 3577 1160 53656E64 		.string	"Sending encrypted ack2 to fpga "
 3577      696E6720 
 3577      656E6372 
 3577      79707465 
 3577      64206163 
 3578              		.align 8
 3579              	.LC190:
 3580 1180 456E6372 		.string	"Encrypted ack2 send successfully"
 3580      79707465 
 3580      64206163 
 3580      6B322073 
 3580      656E6420 
 3581 11a1 00000000 		.align 8
 3581      000000
 3582              	.LC191:
 3583 11a8 2D2D2D2D 		.string	"-------------------------H3 ended----------------------------"
 3583      2D2D2D2D 
 3583      2D2D2D2D 
 3583      2D2D2D2D 
 3583      2D2D2D2D 
 3584 11e6 0000     		.align 8
 3585              	.LC192:
 3586 11e8 2D2D2D2D 		.string	"-------------------------H4 started--------------------------"
 3586      2D2D2D2D 
 3586      2D2D2D2D 
 3586      2D2D2D2D 
 3586      2D2D2D2D 
 3587 1226 0000     		.align 8
 3588              	.LC193:
 3589 1228 43616C63 		.string	"Calculating x and y co_ordinates ------------------"
 3589      756C6174 
 3589      696E6720 
 3589      7820616E 
 3589      64207920 
 3590 125c 00000000 		.align 8
 3591              	.LC194:
 3592 1260 7820616E 		.string	"x and y co_ordinates calculated, they are as --"
 3592      64207920 
 3592      636F5F6F 
 3592      7264696E 
 3592      61746573 
 3593              		.section	.rodata.str1.1
 3594              	.LC195:
 3595 034c 25642025 		.string	"%d %d "
 3595      642000
 3596              		.section	.rodata.str1.8
 3597              		.align 8
 3598              	.LC196:
 3599 1290 476F7420 		.string	"Got the information for x and y co_ordinates, 64 bits filled"
 3599      74686520 
 3599      696E666F 
 3599      726D6174 
 3599      696F6E20 
 3600 12cd 000000   		.align 8
 3601              	.LC197:
 3602 12d0 54686520 		.string	"The final 64 bit array in decrypted form --"
 3602      66696E61 
 3602      6C203634 
 3602      20626974 
 3602      20617272 
 3603 12fc 00000000 		.align 8
 3604              	.LC198:
 3605 1300 2D2D2D2D 		.string	"-------------------------H4 ended--------------------------"
 3605      2D2D2D2D 
 3605      2D2D2D2D 
 3605      2D2D2D2D 
 3605      2D2D2D2D 
 3606 133c 00000000 		.align 8
 3607              	.LC199:
 3608 1340 2D2D2D2D 		.string	"-------------------------H5 starts--------------------------"
 3608      2D2D2D2D 
 3608      2D2D2D2D 
 3608      2D2D2D2D 
 3608      2D2D2D2D 
 3609 137d 000000   		.align 8
 3610              	.LC200:
 3611 1380 456E6372 		.string	"Encrypting first 32 bits of final array"
 3611      79707469 
 3611      6E672066 
 3611      69727374 
 3611      20333220 
 3612              		.align 8
 3613              	.LC201:
 3614 13a8 46697273 		.string	"First 32 bits got encrypted , they are as ----"
 3614      74203332 
 3614      20626974 
 3614      7320676F 
 3614      7420656E 
 3615 13d7 00       		.align 8
 3616              	.LC202:
 3617 13d8 436F6E76 		.string	"Converting first 32 bits to uint8"
 3617      65727469 
 3617      6E672066 
 3617      69727374 
 3617      20333220 
 3618 13fa 00000000 		.align 8
 3618      0000
 3619              	.LC203:
 3620 1400 46697273 		.string	"First 32 bits got converted to uint8, they are as"
 3620      74203332 
 3620      20626974 
 3620      7320676F 
 3620      7420636F 
 3621 1432 00000000 		.align 8
 3621      0000
 3622              	.LC204:
 3623 1438 57726974 		.string	"Writing on channel first 32 bits encrypted"
 3623      696E6720 
 3623      6F6E2063 
 3623      68616E6E 
 3623      656C2066 
 3624 1463 00000000 		.align 8
 3624      00
 3625              	.LC205:
 3626 1468 2D2D2D2D 		.string	"-----------------------------H5 ends------------------"
 3626      2D2D2D2D 
 3626      2D2D2D2D 
 3626      2D2D2D2D 
 3626      2D2D2D2D 
 3627 149f 00       		.align 8
 3628              	.LC206:
 3629 14a0 2D2D2D2D 		.string	"-----------------------------H6 starts------------------"
 3629      2D2D2D2D 
 3629      2D2D2D2D 
 3629      2D2D2D2D 
 3629      2D2D2D2D 
 3630              		.section	.rodata.str1.1
 3631              	.LC207:
 3632 0353 57616974 		.string	"Waiting for encrypted ack1 "
 3632      696E6720 
 3632      666F7220 
 3632      656E6372 
 3632      79707465 
 3633              		.section	.rodata.str1.8
 3634 14d9 00000000 		.align 8
 3634      000000
 3635              	.LC208:
 3636 14e0 2D2D2D2D 		.string	"-----------------------------H7 starts------------------"
 3636      2D2D2D2D 
 3636      2D2D2D2D 
 3636      2D2D2D2D 
 3636      2D2D2D2D 
 3637 1519 00000000 		.align 8
 3637      000000
 3638              	.LC210:
 3639 1520 476F696E 		.string	"Going to H2, time exceeded 256 seconds"
 3639      6720746F 
 3639      2048322C 
 3639      2074696D 
 3639      65206578 
 3640 1547 00       		.align 8
 3641              	.LC211:
 3642 1548 41636B31 		.string	"Ack1 received successfully, not checked yet, it is as----"
 3642      20726563 
 3642      65697665 
 3642      64207375 
 3642      63636573 
 3643 1582 00000000 		.align 8
 3643      0000
 3644              	.LC212:
 3645 1588 436F6E76 		.string	"Converted encrypted ack1 from uint8 to binary , it is as --"
 3645      65727465 
 3645      6420656E 
 3645      63727970 
 3645      74656420 
 3646              		.section	.rodata.str1.1
 3647              	.LC213:
 3648 036f 44656372 		.string	"Decrypting the encrypted ack1"
 3648      79707469 
 3648      6E672074 
 3648      68652065 
 3648      6E637279 
 3649              		.section	.rodata.str1.8
 3650 15c4 00000000 		.align 8
 3651              	.LC214:
 3652 15c8 456E6372 		.string	"Encrypted ack1 decrypted successfully, it is as----"
 3652      79707465 
 3652      64206163 
 3652      6B312064 
 3652      65637279 
 3653              		.section	.rodata.str1.1
 3654              	.LC215:
 3655 038d 41636B31 		.string	"Ack1 doesn't match"
 3655      20646F65 
 3655      736E2774 
 3655      206D6174 
 3655      636800
 3656              		.section	.rodata.str1.8
 3657 15fc 00000000 		.align 8
 3658              	.LC216:
 3659 1600 436F6E76 		.string	"Converting last 32 bits to uint8"
 3659      65727469 
 3659      6E67206C 
 3659      61737420 
 3659      33322062 
 3660 1621 00000000 		.align 8
 3660      000000
 3661              	.LC217:
 3662 1628 4C617374 		.string	"Last 32 bits got converted to uint8, they are as"
 3662      20333220 
 3662      62697473 
 3662      20676F74 
 3662      20636F6E 
 3663 1659 00000000 		.align 8
 3663      000000
 3664              	.LC218:
 3665 1660 57726974 		.string	"Writing on channel last 32 bits encrypted"
 3665      696E6720 
 3665      6F6E2063 
 3665      68616E6E 
 3665      656C206C 
 3666 168a 00000000 		.align 8
 3666      0000
 3667              	.LC219:
 3668 1690 53756363 		.string	"Successfully written last 32 bits"
 3668      65737366 
 3668      756C6C79 
 3668      20777269 
 3668      7474656E 
 3669 16b2 00000000 		.align 8
 3669      0000
 3670              	.LC220:
 3671 16b8 2D2D2D2D 		.string	"---------------------------------H7 ends---------------------"
 3671      2D2D2D2D 
 3671      2D2D2D2D 
 3671      2D2D2D2D 
 3671      2D2D2D2D 
 3672 16f6 0000     		.align 8
 3673              	.LC221:
 3674 16f8 436F6E76 		.string	"Converted encrypted ack2 to uint8, it is as follows"
 3674      65727465 
 3674      6420656E 
 3674      63727970 
 3674      74656420 
 3675 172c 00000000 		.align 8
 3676              	.LC222:
 3677 1730 57726974 		.string	"Writing encrypted ack2 to channel"
 3677      696E6720 
 3677      656E6372 
 3677      79707465 
 3677      64206163 
 3678 1752 00000000 		.align 8
 3678      0000
 3679              	.LC223:
 3680 1758 57726974 		.string	"Written successfully encrypted ack2, the written data is --"
 3680      74656E20 
 3680      73756363 
 3680      65737366 
 3680      756C6C79 
 3681 1794 00000000 		.align 8
 3682              	.LC224:
 3683 1798 52656365 		.string	"Receiving data to update CSV file"
 3683      6976696E 
 3683      67206461 
 3683      74612074 
 3683      6F207570 
 3684 17ba 00000000 		.align 8
 3684      0000
 3685              	.LC225:
 3686 17c0 4E6F2064 		.string	"No data from FPGA, gping to UART part"
 3686      61746120 
 3686      66726F6D 
 3686      20465047 
 3686      412C2067 
 3687 17e6 0000     		.align 8
 3688              	.LC226:
 3689 17e8 436F6E74 		.string	"Controlling signal is to update the CSV data"
 3689      726F6C6C 
 3689      696E6720 
 3689      7369676E 
 3689      616C2069 
 3690 1815 000000   		.align 8
 3691              	.LC227:
 3692 1818 52656365 		.string	"Receiving encrypted data from the FPGA to update CSV"
 3692      6976696E 
 3692      6720656E 
 3692      63727970 
 3692      74656420 
 3693 184d 000000   		.align 8
 3694              	.LC228:
 3695 1850 456E6372 		.string	"Encrypted Data received successfully from the FPGA, it is as in uint8 format-----"
 3695      79707465 
 3695      64204461 
 3695      74612072 
 3695      65636569 
 3696 18a2 00000000 		.align 8
 3696      0000
 3697              	.LC229:
 3698 18a8 436F6E76 		.string	"Converting uint8 data to binary"
 3698      65727469 
 3698      6E672075 
 3698      696E7438 
 3698      20646174 
 3699              		.align 8
 3700              	.LC230:
 3701 18c8 436F6E76 		.string	"Converted uint8 data to binary, it is as-----"
 3701      65727465 
 3701      64207569 
 3701      6E743820 
 3701      64617461 
 3702              		.section	.rodata.str1.1
 3703              	.LC231:
 3704 03a0 44656372 		.string	"Decrypting the data"
 3704      79707469 
 3704      6E672074 
 3704      68652064 
 3704      61746100 
 3705              		.section	.rodata.str1.8
 3706 18f6 0000     		.align 8
 3707              	.LC232:
 3708 18f8 44617461 		.string	"Data decrypted successfully, it is as----"
 3708      20646563 
 3708      72797074 
 3708      65642073 
 3708      75636365 
 3709              		.section	.rodata.str1.1
 3710              	.LC233:
 3711 03b4 47657474 		.string	"Getting ready to update CSV"
 3711      696E6720 
 3711      72656164 
 3711      7920746F 
 3711      20757064 
 3712              		.section	.rodata.str1.8
 3713 1922 00000000 		.align 8
 3713      0000
 3714              	.LC234:
 3715 1928 2D2D2D2D 		.string	"-------------------------UART PART----------------------------"
 3715      2D2D2D2D 
 3715      2D2D2D2D 
 3715      2D2D2D2D 
 3715      2D2D2D2D 
 3716              		.section	.rodata.str1.1
 3717              	.LC235:
 3718 03d0 55415254 		.string	"UART part done"
 3718      20706172 
 3718      7420646F 
 3718      6E6500
 3719              		.section	.rodata.str1.8
 3720 1967 00       		.align 8
 3721              	.LC236:
 3722 1968 54686520 		.string	"The information received from FPGA"
 3722      696E666F 
 3722      726D6174 
 3722      696F6E20 
 3722      72656365 
 3723              		.section	.rodata.str1.1
 3724              	.LC237:
 3725 03df 54686520 		.string	"The x_cord ----->"
 3725      785F636F 
 3725      7264202D 
 3725      2D2D2D2D 
 3725      3E00
 3726              	.LC238:
 3727 03f1 54686520 		.string	"The y_cord ----->"
 3727      795F636F 
 3727      7264202D 
 3727      2D2D2D2D 
 3727      3E00
 3728              	.LC239:
 3729 0403 54726163 		.string	"Track exists   ---->   "
 3729      6B206578 
 3729      69737473 
 3729      2020202D 
 3729      2D2D2D3E 
 3730              	.LC240:
 3731 041b 25732000 		.string	"%s "
 3732              	.LC241:
 3733 041f 54726163 		.string	"Track ok   ----->   "
 3733      6B206F6B 
 3733      2020202D 
 3733      2D2D2D2D 
 3733      3E202020 
 3734              	.LC242:
 3735 0434 44697265 		.string	"Direction   ----->   "
 3735      6374696F 
 3735      6E202020 
 3735      2D2D2D2D 
 3735      2D3E2020 
 3736              	.LC243:
 3737 044a 4E657874 		.string	"Next signal   ------>    "
 3737      20736967 
 3737      6E616C20 
 3737      20202D2D 
 3737      2D2D2D2D 
 3738              		.section	.rodata.str1.8
 3739 198b 00000000 		.align 8
 3739      00
 3740              	.LC244:
 3741 1990 4F766572 		.string	"Overwriting the CSV file with the updated information"
 3741      77726974 
 3741      696E6720 
 3741      74686520 
 3741      43535620 
 3742 19c6 0000     		.align 8
 3743              	.LC245:
 3744 19c8 43535620 		.string	"CSV file overwritten successfully"
 3744      66696C65 
 3744      206F7665 
 3744      72777269 
 3744      7474656E 
 3745              		.section	.rodata.str1.1
 3746              	.LC246:
 3747 0464 41636B31 		.string	"Ack1 match successfully"
 3747      206D6174 
 3747      63682073 
 3747      75636365 
 3747      73736675 
 3748              		.section	.rodata.str1.8
 3749 19ea 00000000 		.align 8
 3749      0000
 3750              	.LC247:
 3751 19f0 656E6372 		.string	"encrypting last 32 bits to send to fpga "
 3751      79707469 
 3751      6E67206C 
 3751      61737420 
 3751      33322062 
 3752 1a19 00000000 		.align 8
 3752      000000
 3753              	.LC248:
 3754 1a20 4C617374 		.string	"Last 32 bits got encrypted , they are as in binary form"
 3754      20333220 
 3754      62697473 
 3754      20676F74 
 3754      20656E63 
 3755              		.section	.rodata.str1.1
 3756              	.LC249:
 3757 047c 456E6372 		.string	"Encrypting ack2 "
 3757      79707469 
 3757      6E672061 
 3757      636B3220 
 3757      00
 3758              		.section	.rodata.str1.8
 3759              		.align 8
 3760              	.LC250:
 3761 1a58 456E6372 		.string	"Encrypted ack2 is as follows  ----"
 3761      79707465 
 3761      64206163 
 3761      6B322069 
 3761      73206173 
 3762              		.section	.text.unlikely
 3763              	.LCOLDB251:
 3764              		.section	.text.startup,"ax",@progbits
 3765              	.LHOTB251:
 3766              		.p2align 4,,15
 3767              		.globl	main
 3769              	main:
 3770              	.LFB68:
 3771              		.cfi_startproc
 3772 0000 4157     		pushq	%r15
 3773              		.cfi_def_cfa_offset 16
 3774              		.cfi_offset 15, -16
 3775 0002 4156     		pushq	%r14
 3776              		.cfi_def_cfa_offset 24
 3777              		.cfi_offset 14, -24
 3778 0004 B9000000 		movl	$.LC43, %ecx
 3778      00
 3779 0009 4155     		pushq	%r13
 3780              		.cfi_def_cfa_offset 32
 3781              		.cfi_offset 13, -32
 3782 000b 4154     		pushq	%r12
 3783              		.cfi_def_cfa_offset 40
 3784              		.cfi_offset 12, -40
 3785 000d BA000000 		movl	$.LC44, %edx
 3785      00
 3786 0012 55       		pushq	%rbp
 3787              		.cfi_def_cfa_offset 48
 3788              		.cfi_offset 6, -48
 3789 0013 53       		pushq	%rbx
 3790              		.cfi_def_cfa_offset 56
 3791              		.cfi_offset 3, -56
 3792 0014 4881ECC8 		subq	$3016, %rsp
 3792      0B0000
 3793              		.cfi_def_cfa_offset 3072
 3794 001b 897C2464 		movl	%edi, 100(%rsp)
 3795 001f 48897424 		movq	%rsi, 104(%rsp)
 3795      68
 3796 0024 BF000000 		movl	$.LC46, %edi
 3796      00
 3797 0029 BE000000 		movl	$.LC45, %esi
 3797      00
 3798 002e 64488B04 		movq	%fs:40, %rax
 3798      25280000 
 3798      00
 3799 0037 48898424 		movq	%rax, 3000(%rsp)
 3799      B80B0000 
 3800 003f 31C0     		xorl	%eax, %eax
 3801 0041 E8000000 		call	arg_str0
 3801      00
 3802 0046 B9000000 		movl	$.LC47, %ecx
 3802      00
 3803 004b BA000000 		movl	$.LC48, %edx
 3803      00
 3804 0050 BE000000 		movl	$.LC49, %esi
 3804      00
 3805 0055 BF000000 		movl	$.LC50, %edi
 3805      00
 3806 005a 4989C4   		movq	%rax, %r12
 3807 005d E8000000 		call	arg_str1
 3807      00
 3808 0062 B9000000 		movl	$.LC51, %ecx
 3808      00
 3809 0067 BA000000 		movl	$.LC52, %edx
 3809      00
 3810 006c BE000000 		movl	$.LC53, %esi
 3810      00
 3811 0071 BF000000 		movl	$.LC54, %edi
 3811      00
 3812 0076 4989C5   		movq	%rax, %r13
 3813 0079 E8000000 		call	arg_str0
 3813      00
 3814 007e B9000000 		movl	$.LC55, %ecx
 3814      00
 3815 0083 BA000000 		movl	$.LC56, %edx
 3815      00
 3816 0088 BE000000 		movl	$.LC57, %esi
 3816      00
 3817 008d BF000000 		movl	$.LC58, %edi
 3817      00
 3818 0092 4989C6   		movq	%rax, %r14
 3819 0095 E8000000 		call	arg_str0
 3819      00
 3820 009a B9000000 		movl	$.LC59, %ecx
 3820      00
 3821 009f BA000000 		movl	$.LC60, %edx
 3821      00
 3822 00a4 BE000000 		movl	$.LC61, %esi
 3822      00
 3823 00a9 BF000000 		movl	$.LC62, %edi
 3823      00
 3824 00ae 48894424 		movq	%rax, 16(%rsp)
 3824      10
 3825 00b3 E8000000 		call	arg_str0
 3825      00
 3826 00b8 B9000000 		movl	$.LC63, %ecx
 3826      00
 3827 00bd BA000000 		movl	$.LC64, %edx
 3827      00
 3828 00c2 BE000000 		movl	$.LC65, %esi
 3828      00
 3829 00c7 BF000000 		movl	$.LC66, %edi
 3829      00
 3830 00cc 48894424 		movq	%rax, 24(%rsp)
 3830      18
 3831 00d1 E8000000 		call	arg_str0
 3831      00
 3832 00d6 B9000000 		movl	$.LC67, %ecx
 3832      00
 3833 00db BA000000 		movl	$.LC68, %edx
 3833      00
 3834 00e0 BE000000 		movl	$.LC69, %esi
 3834      00
 3835 00e5 BF000000 		movl	$.LC70, %edi
 3835      00
 3836 00ea 48894424 		movq	%rax, 32(%rsp)
 3836      20
 3837 00ef E8000000 		call	arg_uint0
 3837      00
 3838 00f4 B9000000 		movl	$.LC71, %ecx
 3838      00
 3839 00f9 BA000000 		movl	$.LC72, %edx
 3839      00
 3840 00fe BE000000 		movl	$.LC73, %esi
 3840      00
 3841 0103 BF000000 		movl	$.LC74, %edi
 3841      00
 3842 0108 48894424 		movq	%rax, 40(%rsp)
 3842      28
 3843 010d E8000000 		call	arg_str0
 3843      00
 3844 0112 BA000000 		movl	$.LC75, %edx
 3844      00
 3845 0117 BE000000 		movl	$.LC76, %esi
 3845      00
 3846 011c BF000000 		movl	$.LC77, %edi
 3846      00
 3847 0121 48894424 		movq	%rax, 56(%rsp)
 3847      38
 3848 0126 E8000000 		call	arg_lit0
 3848      00
 3849 012b BA000000 		movl	$.LC78, %edx
 3849      00
 3850 0130 BE000000 		movl	$.LC79, %esi
 3850      00
 3851 0135 BF000000 		movl	$.LC80, %edi
 3851      00
 3852 013a 48894424 		movq	%rax, 64(%rsp)
 3852      40
 3853 013f E8000000 		call	arg_lit0
 3853      00
 3854 0144 BA000000 		movl	$.LC81, %edx
 3854      00
 3855 0149 BE000000 		movl	$.LC82, %esi
 3855      00
 3856 014e BF000000 		movl	$.LC83, %edi
 3856      00
 3857 0153 48894424 		movq	%rax, 80(%rsp)
 3857      50
 3858 0158 E8000000 		call	arg_lit0
 3858      00
 3859 015d BA000000 		movl	$.LC84, %edx
 3859      00
 3860 0162 BE000000 		movl	$.LC85, %esi
 3860      00
 3861 0167 BF000000 		movl	$.LC32, %edi
 3861      00
 3862 016c 48894424 		movq	%rax, 88(%rsp)
 3862      58
 3863 0171 E8000000 		call	arg_lit0
 3863      00
 3864 0176 B9000000 		movl	$.LC86, %ecx
 3864      00
 3865 017b BA000000 		movl	$.LC87, %edx
 3865      00
 3866 0180 BE000000 		movl	$.LC88, %esi
 3866      00
 3867 0185 BF000000 		movl	$.LC89, %edi
 3867      00
 3868 018a 48894424 		movq	%rax, 48(%rsp)
 3868      30
 3869 018f E8000000 		call	arg_str0
 3869      00
 3870 0194 BA000000 		movl	$.LC90, %edx
 3870      00
 3871 0199 BE000000 		movl	$.LC91, %esi
 3871      00
 3872 019e BF000000 		movl	$.LC92, %edi
 3872      00
 3873 01a3 48894424 		movq	%rax, 72(%rsp)
 3873      48
 3874 01a8 E8000000 		call	arg_lit0
 3874      00
 3875 01ad 31FF     		xorl	%edi, %edi
 3876 01af B9000000 		movl	$.LC93, %ecx
 3876      00
 3877 01b4 BA000000 		movl	$.LC94, %edx
 3877      00
 3878 01b9 BE000000 		movl	$.LC95, %esi
 3878      00
 3879 01be 4889C3   		movq	%rax, %rbx
 3880 01c1 E8000000 		call	arg_str0
 3880      00
 3881 01c6 B9000000 		movl	$.LC96, %ecx
 3881      00
 3882 01cb BA000000 		movl	$.LC97, %edx
 3882      00
 3883 01d0 BE000000 		movl	$.LC98, %esi
 3883      00
 3884 01d5 31FF     		xorl	%edi, %edi
 3885 01d7 4989C7   		movq	%rax, %r15
 3886 01da E8000000 		call	arg_str0
 3886      00
 3887 01df BF140000 		movl	$20, %edi
 3887      00
 3888 01e4 48894424 		movq	%rax, 8(%rsp)
 3888      08
 3889 01e9 E8000000 		call	arg_end
 3889      00
 3890 01ee 488B4C24 		movq	16(%rsp), %rcx
 3890      10
 3891 01f3 488B5424 		movq	32(%rsp), %rdx
 3891      20
 3892 01f8 4889C5   		movq	%rax, %rbp
 3893 01fb 488B7424 		movq	56(%rsp), %rsi
 3893      38
 3894 0200 488B4424 		movq	64(%rsp), %rax
 3894      40
 3895 0205 488DBC24 		leaq	2464(%rsp), %rdi
 3895      A0090000 
 3896 020d 4C89A424 		movq	%r12, 2464(%rsp)
 3896      A0090000 
 3897 0215 4C89AC24 		movq	%r13, 2472(%rsp)
 3897      A8090000 
 3898 021d 48898C24 		movq	%rcx, 2488(%rsp)
 3898      B8090000 
 3899 0225 488B4C24 		movq	24(%rsp), %rcx
 3899      18
 3900 022a 48899424 		movq	%rdx, 2504(%rsp)
 3900      C8090000 
 3901 0232 488B5424 		movq	80(%rsp), %rdx
 3901      50
 3902 0237 4889B424 		movq	%rsi, 2520(%rsp)
 3902      D8090000 
 3903 023f 488B7424 		movq	48(%rsp), %rsi
 3903      30
 3904 0244 48898C24 		movq	%rcx, 2496(%rsp)
 3904      C0090000 
 3905 024c 488B4C24 		movq	40(%rsp), %rcx
 3905      28
 3906 0251 48899424 		movq	%rdx, 2528(%rsp)
 3906      E0090000 
 3907 0259 488B5424 		movq	72(%rsp), %rdx
 3907      48
 3908 025e 4C89B424 		movq	%r14, 2480(%rsp)
 3908      B0090000 
 3909 0266 4889B424 		movq	%rsi, 2544(%rsp)
 3909      F0090000 
 3910 026e 48898C24 		movq	%rcx, 2512(%rsp)
 3910      D0090000 
 3911 0276 488B4C24 		movq	88(%rsp), %rcx
 3911      58
 3912 027b 48899424 		movq	%rdx, 2552(%rsp)
 3912      F8090000 
 3913 0283 48899C24 		movq	%rbx, 2560(%rsp)
 3913      000A0000 
 3914 028b 4C89BC24 		movq	%r15, 2568(%rsp)
 3914      080A0000 
 3915 0293 48898424 		movq	%rax, 2584(%rsp)
 3915      180A0000 
 3916 029b 48898C24 		movq	%rcx, 2536(%rsp)
 3916      E8090000 
 3917 02a3 488B4C24 		movq	8(%rsp), %rcx
 3917      08
 3918 02a8 4889AC24 		movq	%rbp, 2592(%rsp)
 3918      200A0000 
 3919 02b0 48C78424 		movq	$0, 136(%rsp)
 3919      88000000 
 3919      00000000 
 3920 02bc 48C78424 		movq	$0, 144(%rsp)
 3920      90000000 
 3920      00000000 
 3921 02c8 48898C24 		movq	%rcx, 2576(%rsp)
 3921      100A0000 
 3922 02d0 E8000000 		call	arg_nullcheck
 3922      00
 3923 02d5 85C0     		testl	%eax, %eax
 3924 02d7 0F849700 		je	.L321
 3924      0000
 3925 02dd 488B3D00 		movq	stderr(%rip), %rdi
 3925      000000
 3926 02e4 B9000000 		movl	$.LC99, %ecx
 3926      00
 3927 02e9 BA000000 		movl	$.LC100, %edx
 3927      00
 3928 02ee BE010000 		movl	$1, %esi
 3928      00
 3929 02f3 31C0     		xorl	%eax, %eax
 3930 02f5 4531E4   		xorl	%r12d, %r12d
 3931 02f8 BD010000 		movl	$1, %ebp
 3931      00
 3932 02fd E8000000 		call	__fprintf_chk
 3932      00
 3933              	.L322:
 3934 0302 4C89E7   		movq	%r12, %rdi
 3935 0305 E8000000 		call	free
 3935      00
 3936 030a 488BBC24 		movq	136(%rsp), %rdi
 3936      88000000 
 3937 0312 E8000000 		call	flClose
 3937      00
 3938 0317 488B8C24 		movq	144(%rsp), %rcx
 3938      90000000 
 3939 031f 4885C9   		testq	%rcx, %rcx
 3940 0322 7425     		je	.L492
 3941 0324 488B3D00 		movq	stderr(%rip), %rdi
 3941      000000
 3942 032b BA000000 		movl	$.LC26, %edx
 3942      00
 3943 0330 BE010000 		movl	$1, %esi
 3943      00
 3944 0335 31C0     		xorl	%eax, %eax
 3945 0337 E8000000 		call	__fprintf_chk
 3945      00
 3946 033c 488BBC24 		movq	144(%rsp), %rdi
 3946      90000000 
 3947 0344 E8000000 		call	flFreeError
 3947      00
 3948              	.L492:
 3949 0349 488B9C24 		movq	3000(%rsp), %rbx
 3949      B80B0000 
 3950 0351 6448331C 		xorq	%fs:40, %rbx
 3950      25280000 
 3950      00
 3951 035a 89E8     		movl	%ebp, %eax
 3952 035c 0F857A07 		jne	.L662
 3952      0000
 3953 0362 4881C4C8 		addq	$3016, %rsp
 3953      0B0000
 3954              		.cfi_remember_state
 3955              		.cfi_def_cfa_offset 56
 3956 0369 5B       		popq	%rbx
 3957              		.cfi_def_cfa_offset 48
 3958 036a 5D       		popq	%rbp
 3959              		.cfi_def_cfa_offset 40
 3960 036b 415C     		popq	%r12
 3961              		.cfi_def_cfa_offset 32
 3962 036d 415D     		popq	%r13
 3963              		.cfi_def_cfa_offset 24
 3964 036f 415E     		popq	%r14
 3965              		.cfi_def_cfa_offset 16
 3966 0371 415F     		popq	%r15
 3967              		.cfi_def_cfa_offset 8
 3968 0373 C3       		ret
 3969              	.L321:
 3970              		.cfi_restore_state
 3971 0374 488B7424 		movq	104(%rsp), %rsi
 3971      68
 3972 0379 8B7C2464 		movl	100(%rsp), %edi
 3973 037d 488D9424 		leaq	2464(%rsp), %rdx
 3973      A0090000 
 3974 0385 E8000000 		call	arg_parse
 3974      00
 3975 038a 837B6000 		cmpl	$0, 96(%rbx)
 3976 038e 7E63     		jle	.L323
 3977 0390 BA000000 		movl	$.LC99, %edx
 3977      00
 3978 0395 BE000000 		movl	$.LC101, %esi
 3978      00
 3979 039a BF010000 		movl	$1, %edi
 3979      00
 3980 039f 31C0     		xorl	%eax, %eax
 3981 03a1 4531E4   		xorl	%r12d, %r12d
 3982 03a4 31ED     		xorl	%ebp, %ebp
 3983 03a6 E8000000 		call	__printf_chk
 3983      00
 3984 03ab 488B3D00 		movq	stdout(%rip), %rdi
 3984      000000
 3985 03b2 488DB424 		leaq	2464(%rsp), %rsi
 3985      A0090000 
 3986 03ba BA000000 		movl	$.LC37, %edx
 3986      00
 3987 03bf E8000000 		call	arg_print_syntax
 3987      00
 3988 03c4 BE000000 		movl	$.LC102, %esi
 3988      00
 3989 03c9 BF010000 		movl	$1, %edi
 3989      00
 3990 03ce 31C0     		xorl	%eax, %eax
 3991 03d0 E8000000 		call	__printf_chk
 3991      00
 3992 03d5 488B3D00 		movq	stdout(%rip), %rdi
 3992      000000
 3993 03dc 488DB424 		leaq	2464(%rsp), %rsi
 3993      A0090000 
 3994 03e4 BA000000 		movl	$.LC103, %edx
 3994      00
 3995 03e9 E8000000 		call	arg_print_glossary
 3995      00
 3996 03ee E90FFFFF 		jmp	.L322
 3996      FF
 3997              	.L323:
 3998 03f3 85C0     		testl	%eax, %eax
 3999 03f5 7E3E     		jle	.L324
 4000 03f7 488B3D00 		movq	stdout(%rip), %rdi
 4000      000000
 4001 03fe BA000000 		movl	$.LC99, %edx
 4001      00
 4002 0403 4889EE   		movq	%rbp, %rsi
 4003 0406 E8000000 		call	arg_print_errors
 4003      00
 4004 040b B9000000 		movl	$.LC99, %ecx
 4004      00
 4005 0410 BA000000 		movl	$.LC104, %edx
 4005      00
 4006              	.L651:
 4007 0415 488B3D00 		movq	stderr(%rip), %rdi
 4007      000000
 4008 041c BE010000 		movl	$1, %esi
 4008      00
 4009 0421 31C0     		xorl	%eax, %eax
 4010 0423 4531E4   		xorl	%r12d, %r12d
 4011 0426 BD0C0000 		movl	$12, %ebp
 4011      00
 4012 042b E8000000 		call	__fprintf_chk
 4012      00
 4013 0430 E9CDFEFF 		jmp	.L322
 4013      FF
 4014              	.L324:
 4015 0435 488DB424 		leaq	144(%rsp), %rsi
 4015      90000000 
 4016 043d 31FF     		xorl	%edi, %edi
 4017 043f E8000000 		call	flInitialise
 4017      00
 4018 0444 85C0     		testl	%eax, %eax
 4019 0446 740D     		je	.L663
 4020              	.L373:
 4021 0448 4531E4   		xorl	%r12d, %r12d
 4022 044b BD010000 		movl	$1, %ebp
 4022      00
 4023 0450 E9ADFEFF 		jmp	.L322
 4023      FF
 4024              	.L663:
 4025 0455 498B4568 		movq	104(%r13), %rax
 4026 0459 BE000000 		movl	$.LC105, %esi
 4026      00
 4027 045e BF010000 		movl	$1, %edi
 4027      00
 4028 0463 4C8B28   		movq	(%rax), %r13
 4029 0466 31C0     		xorl	%eax, %eax
 4030 0468 4C89EA   		movq	%r13, %rdx
 4031 046b E8000000 		call	__printf_chk
 4031      00
 4032 0470 488DB424 		leaq	136(%rsp), %rsi
 4032      88000000 
 4033 0478 31D2     		xorl	%edx, %edx
 4034 047a 4C89EF   		movq	%r13, %rdi
 4035 047d E8000000 		call	flOpen
 4035      00
 4036 0482 85C0     		testl	%eax, %eax
 4037 0484 0F841701 		je	.L326
 4037      0000
 4038 048a 41837C24 		cmpl	$0, 96(%r12)
 4038      6000
 4039 0490 0F84CA00 		je	.L327
 4039      0000
 4040 0496 498B4424 		movq	104(%r12), %rax
 4040      68
 4041 049b BE000000 		movl	$.LC106, %esi
 4041      00
 4042 04a0 BF010000 		movl	$1, %edi
 4042      00
 4043 04a5 488B18   		movq	(%rax), %rbx
 4044 04a8 31C0     		xorl	%eax, %eax
 4045 04aa 4889DA   		movq	%rbx, %rdx
 4046 04ad E8000000 		call	__printf_chk
 4046      00
 4047 04b2 41837E60 		cmpl	$0, 96(%r14)
 4047      00
 4048 04b7 0F84CF02 		je	.L328
 4048      0000
 4049 04bd 498B4668 		movq	104(%r14), %rax
 4050 04c1 488D9424 		leaq	144(%rsp), %rdx
 4050      90000000 
 4051 04c9 4889DF   		movq	%rbx, %rdi
 4052 04cc 488B30   		movq	(%rax), %rsi
 4053 04cf E8000000 		call	flLoadCustomFirmware
 4053      00
 4054              	.L329:
 4055 04d4 85C0     		testl	%eax, %eax
 4056 04d6 0F856CFF 		jne	.L373
 4056      FFFF
 4057 04dc BE000000 		movl	$.LC107, %esi
 4057      00
 4058 04e1 BF010000 		movl	$1, %edi
 4058      00
 4059 04e6 BB3C0000 		movl	$60, %ebx
 4059      00
 4060 04eb E8000000 		call	__printf_chk
 4060      00
 4061 04f0 BFE80300 		movl	$1000, %edi
 4061      00
 4062 04f5 488DAC24 		leaq	184(%rsp), %rbp
 4062      B8000000 
 4063 04fd E8000000 		call	flSleep
 4063      00
 4064 0502 EB23     		jmp	.L331
 4065              	.L664:
 4066 0504 BFFA0000 		movl	$250, %edi
 4066      00
 4067 0509 83EB01   		subl	$1, %ebx
 4068 050c E8000000 		call	flSleep
 4068      00
 4069 0511 80BC24B8 		cmpb	$0, 184(%rsp)
 4069      00000000 
 4070 0519 0F85A503 		jne	.L500
 4070      0000
 4071 051f 85DB     		testl	%ebx, %ebx
 4072 0521 0F849D03 		je	.L500
 4072      0000
 4073              	.L331:
 4074 0527 BE000000 		movl	$.LC108, %esi
 4074      00
 4075 052c BF010000 		movl	$1, %edi
 4075      00
 4076 0531 31C0     		xorl	%eax, %eax
 4077 0533 E8000000 		call	__printf_chk
 4077      00
 4078 0538 488B3D00 		movq	stdout(%rip), %rdi
 4078      000000
 4079 053f E8000000 		call	fflush
 4079      00
 4080 0544 488D9424 		leaq	144(%rsp), %rdx
 4080      90000000 
 4081 054c 4889EE   		movq	%rbp, %rsi
 4082 054f 4C89EF   		movq	%r13, %rdi
 4083 0552 E8000000 		call	flIsDeviceAvailable
 4083      00
 4084 0557 85C0     		testl	%eax, %eax
 4085 0559 74A9     		je	.L664
 4086 055b E9E8FEFF 		jmp	.L373
 4086      FF
 4087              	.L327:
 4088 0560 4C89E9   		movq	%r13, %rcx
 4089 0563 BA000000 		movl	$.LC111, %edx
 4089      00
 4090 0568 E9A8FEFF 		jmp	.L651
 4090      FF
 4091              	.L333:
 4092 056d 4C89EA   		movq	%r13, %rdx
 4093 0570 BE000000 		movl	$.LC110, %esi
 4093      00
 4094 0575 BF010000 		movl	$1, %edi
 4094      00
 4095 057a 31C0     		xorl	%eax, %eax
 4096 057c E8000000 		call	__printf_chk
 4096      00
 4097 0581 488D9424 		leaq	144(%rsp), %rdx
 4097      90000000 
 4098 0589 488DB424 		leaq	136(%rsp), %rsi
 4098      88000000 
 4099 0591 4C89EF   		movq	%r13, %rdi
 4100 0594 E8000000 		call	flOpen
 4100      00
 4101 0599 85C0     		testl	%eax, %eax
 4102 059b 0F85A7FE 		jne	.L373
 4102      FFFF
 4103              	.L326:
 4104 05a1 488BBC24 		movq	136(%rsp), %rdi
 4104      88000000 
 4105 05a9 E8000000 		call	flGetFirmwareVersion
 4105      00
 4106 05ae 488BBC24 		movq	136(%rsp), %rdi
 4106      88000000 
 4107 05b6 89C3     		movl	%eax, %ebx
 4108 05b8 E8000000 		call	flGetFirmwareID
 4108      00
 4109 05bd 4189D8   		movl	%ebx, %r8d
 4110 05c0 0FB7C8   		movzwl	%ax, %ecx
 4111 05c3 4C89EA   		movq	%r13, %rdx
 4112 05c6 31C0     		xorl	%eax, %eax
 4113 05c8 BE000000 		movl	$.LC112, %esi
 4113      00
 4114 05cd BF010000 		movl	$1, %edi
 4114      00
 4115 05d2 E8000000 		call	__printf_chk
 4115      00
 4116 05d7 41837F60 		cmpl	$0, 96(%r15)
 4116      00
 4117 05dc 745F     		je	.L341
 4118 05de 498B4768 		movq	104(%r15), %rax
 4119 05e2 488B10   		movq	(%rax), %rdx
 4120 05e5 803A73   		cmpb	$115, (%rdx)
 4121 05e8 0F85B601 		jne	.L338
 4121      0000
 4122 05ee 807A0174 		cmpb	$116, 1(%rdx)
 4123 05f2 0F85AC01 		jne	.L338
 4123      0000
 4124 05f8 807A0264 		cmpb	$100, 2(%rdx)
 4125 05fc 0F85A201 		jne	.L338
 4125      0000
 4126 0602 807A0300 		cmpb	$0, 3(%rdx)
 4127 0606 0F859801 		jne	.L338
 4127      0000
 4128 060c BE000000 		movl	$.LC113, %esi
 4128      00
 4129 0611 BF010000 		movl	$1, %edi
 4129      00
 4130 0616 31C0     		xorl	%eax, %eax
 4131 0618 E8000000 		call	__printf_chk
 4131      00
 4132 061d 488BBC24 		movq	136(%rsp), %rdi
 4132      88000000 
 4133 0625 488D9424 		leaq	144(%rsp), %rdx
 4133      90000000 
 4134 062d 4C89EE   		movq	%r13, %rsi
 4135 0630 E8000000 		call	flFlashStandardFirmware
 4135      00
 4136              	.L339:
 4137 0635 85C0     		testl	%eax, %eax
 4138 0637 0F850BFE 		jne	.L373
 4138      FFFF
 4139              	.L341:
 4140 063d 488B4424 		movq	8(%rsp), %rax
 4140      08
 4141 0642 83786000 		cmpl	$0, 96(%rax)
 4142 0646 0F858A01 		jne	.L665
 4142      0000
 4143              	.L337:
 4144 064c 488B4424 		movq	48(%rsp), %rax
 4144      30
 4145 0651 83786000 		cmpl	$0, 96(%rax)
 4146 0655 0F85A802 		jne	.L344
 4146      0000
 4147              	.L347:
 4148 065b 488B4424 		movq	40(%rsp), %rax
 4148      28
 4149 0660 BB010000 		movl	$1, %ebx
 4149      00
 4150 0665 83786000 		cmpl	$0, 96(%rax)
 4151 0669 740C     		je	.L346
 4152 066b 488B4424 		movq	40(%rsp), %rax
 4152      28
 4153 0670 488B4068 		movq	104(%rax), %rax
 4154 0674 0FB618   		movzbl	(%rax), %ebx
 4155              	.L346:
 4156 0677 488BBC24 		movq	136(%rsp), %rdi
 4156      88000000 
 4157 067f E8000000 		call	flIsNeroCapable
 4157      00
 4158 0684 488BBC24 		movq	136(%rsp), %rdi
 4158      88000000 
 4159 068c 89DE     		movl	%ebx, %esi
 4160 068e 4189C6   		movl	%eax, %r14d
 4161 0691 E8000000 		call	flIsCommCapable
 4161      00
 4162 0696 4189C4   		movl	%eax, %r12d
 4163 0699 488B4424 		movq	16(%rsp), %rax
 4163      10
 4164 069e 83786000 		cmpl	$0, 96(%rax)
 4165 06a2 0F857D02 		jne	.L666
 4165      0000
 4166              	.L348:
 4167 06a8 488B4424 		movq	24(%rsp), %rax
 4167      18
 4168 06ad 83786000 		cmpl	$0, 96(%rax)
 4169 06b1 0F847B01 		je	.L350
 4169      0000
 4170 06b7 4584F6   		testb	%r14b, %r14b
 4171 06ba 0F840F04 		je	.L351
 4171      0000
 4172 06c0 488BBC24 		movq	136(%rsp), %rdi
 4172      88000000 
 4173 06c8 488D9424 		leaq	144(%rsp), %rdx
 4173      90000000 
 4174 06d0 31F6     		xorl	%esi, %esi
 4175 06d2 E8000000 		call	flSelectConduit
 4175      00
 4176 06d7 85C0     		testl	%eax, %eax
 4177 06d9 0F8569FD 		jne	.L373
 4177      FFFF
 4178 06df 488B4424 		movq	24(%rsp), %rax
 4178      18
 4179 06e4 488BBC24 		movq	136(%rsp), %rdi
 4179      88000000 
 4180 06ec 4C8D8C24 		leaq	144(%rsp), %r9
 4180      90000000 
 4181 06f4 488D8C24 		leaq	352(%rsp), %rcx
 4181      60010000 
 4182 06fc 488D9424 		leaq	128(%rsp), %rdx
 4182      80000000 
 4183 0704 41B81000 		movl	$16, %r8d
 4183      0000
 4184 070a 488B4068 		movq	104(%rax), %rax
 4185 070e 488B30   		movq	(%rax), %rsi
 4186 0711 E8000000 		call	jtagScanChain
 4186      00
 4187 0716 85C0     		testl	%eax, %eax
 4188 0718 0F852AFD 		jne	.L373
 4188      FFFF
 4189 071e 83BC2480 		cmpl	$0, 128(%rsp)
 4189      00000000 
 4190 0726 4C89EA   		movq	%r13, %rdx
 4191 0729 0F845B06 		je	.L352
 4191      0000
 4192 072f BE000000 		movl	$.LC123, %esi
 4192      00
 4193 0734 BF010000 		movl	$1, %edi
 4193      00
 4194 0739 31ED     		xorl	%ebp, %ebp
 4195 073b E8000000 		call	__printf_chk
 4195      00
 4196 0740 EB1C     		jmp	.L353
 4197              	.L354:
 4198 0742 8B94AC60 		movl	352(%rsp,%rbp,4), %edx
 4198      010000
 4199 0749 BE000000 		movl	$.LC124, %esi
 4199      00
 4200 074e BF010000 		movl	$1, %edi
 4200      00
 4201 0753 31C0     		xorl	%eax, %eax
 4202 0755 4883C501 		addq	$1, %rbp
 4203 0759 E8000000 		call	__printf_chk
 4203      00
 4204              	.L353:
 4205 075e 39AC2480 		cmpl	%ebp, 128(%rsp)
 4205      000000
 4206 0765 77DB     		ja	.L354
 4207              	.L355:
 4208 0767 488B4424 		movq	32(%rsp), %rax
 4208      20
 4209 076c 83786000 		cmpl	$0, 96(%rax)
 4210 0770 0F84CB00 		je	.L356
 4210      0000
 4211 0776 BE000000 		movl	$.LC127, %esi
 4211      00
 4212 077b BF010000 		movl	$1, %edi
 4212      00
 4213 0780 31C0     		xorl	%eax, %eax
 4214 0782 E8000000 		call	__printf_chk
 4214      00
 4215 0787 E96F0300 		jmp	.L493
 4215      00
 4216              	.L328:
 4217 078c 488D9424 		leaq	144(%rsp), %rdx
 4217      90000000 
 4218 0794 4C89EE   		movq	%r13, %rsi
 4219 0797 4889DF   		movq	%rbx, %rdi
 4220 079a E8000000 		call	flLoadStandardFirmware
 4220      00
 4221 079f E930FDFF 		jmp	.L329
 4221      FF
 4222              	.L338:
 4223 07a4 BE000000 		movl	$.LC114, %esi
 4223      00
 4224 07a9 BF010000 		movl	$1, %edi
 4224      00
 4225 07ae 31C0     		xorl	%eax, %eax
 4226 07b0 E8000000 		call	__printf_chk
 4226      00
 4227 07b5 498B4768 		movq	104(%r15), %rax
 4228 07b9 488BBC24 		movq	136(%rsp), %rdi
 4228      88000000 
 4229 07c1 488D9424 		leaq	144(%rsp), %rdx
 4229      90000000 
 4230 07c9 488B30   		movq	(%rax), %rsi
 4231 07cc E8000000 		call	flFlashCustomFirmware
 4231      00
 4232 07d1 E95FFEFF 		jmp	.L339
 4232      FF
 4233              	.L665:
 4234 07d6 488B4424 		movq	8(%rsp), %rax
 4234      08
 4235 07db 488DAC24 		leaq	184(%rsp), %rbp
 4235      B8000000 
 4236 07e3 31D2     		xorl	%edx, %edx
 4237 07e5 4889EE   		movq	%rbp, %rsi
 4238 07e8 488B4068 		movq	104(%rax), %rax
 4239 07ec 488B38   		movq	(%rax), %rdi
 4240 07ef E8000000 		call	strtoul
 4240      00
 4241 07f4 488B8C24 		movq	184(%rsp), %rcx
 4241      B8000000 
 4242 07fc 4889C3   		movq	%rax, %rbx
 4243 07ff 80393A   		cmpb	$58, (%rcx)
 4244 0802 0F844203 		je	.L342
 4244      0000
 4245 0808 B9000000 		movl	$.LC99, %ecx
 4245      00
 4246 080d BA000000 		movl	$.LC115, %edx
 4246      00
 4247              	.L654:
 4248 0812 488B3D00 		movq	stderr(%rip), %rdi
 4248      000000
 4249 0819 BE010000 		movl	$1, %esi
 4249      00
 4250 081e 31C0     		xorl	%eax, %eax
 4251 0820 BD0C0000 		movl	$12, %ebp
 4251      00
 4252 0825 E8000000 		call	__fprintf_chk
 4252      00
 4253              	.L367:
 4254 082a 4531E4   		xorl	%r12d, %r12d
 4255 082d E9D0FAFF 		jmp	.L322
 4255      FF
 4256              	.L350:
 4257 0832 488B4424 		movq	32(%rsp), %rax
 4257      20
 4258 0837 83786000 		cmpl	$0, 96(%rax)
 4259 083b 0F85A002 		jne	.L667
 4259      0000
 4260              	.L356:
 4261 0841 488B4424 		movq	88(%rsp), %rax
 4261      58
 4262 0846 83786000 		cmpl	$0, 96(%rax)
 4263 084a 7407     		je	.L358
 4264 084c C6050000 		movb	$1, enableBenchmarking(%rip)
 4264      000001
 4265              	.L358:
 4266 0853 488B4424 		movq	56(%rsp), %rax
 4266      38
 4267 0858 83786000 		cmpl	$0, 96(%rax)
 4268 085c 0F857E03 		jne	.L668
 4268      0000
 4269              	.L359:
 4270 0862 488B4424 		movq	72(%rsp), %rax
 4270      48
 4271 0867 83786000 		cmpl	$0, 96(%rax)
 4272 086b 0F853303 		jne	.L669
 4272      0000
 4273              	.L365:
 4274 0871 488B4424 		movq	80(%rsp), %rax
 4274      50
 4275 0876 83786000 		cmpl	$0, 96(%rax)
 4276 087a 0F852904 		jne	.L670
 4276      0000
 4277 0880 488B4424 		movq	64(%rsp), %rax
 4277      40
 4278 0885 83786000 		cmpl	$0, 96(%rax)
 4279 0889 0F840B03 		je	.L498
 4279      0000
 4280 088f 4584E4   		testb	%r12b, %r12b
 4281 0892 0F84EA03 		je	.L380
 4281      0000
 4282 0898 4531E4   		xorl	%r12d, %r12d
 4283              	.L379:
 4284 089b 488BBC24 		movq	136(%rsp), %rdi
 4284      88000000 
 4285 08a3 488D9424 		leaq	144(%rsp), %rdx
 4285      90000000 
 4286 08ab 89DE     		movl	%ebx, %esi
 4287 08ad E8000000 		call	flSelectConduit
 4287      00
 4288 08b2 85C0     		testl	%eax, %eax
 4289 08b4 0F847906 		je	.L671
 4289      0000
 4290              	.L650:
 4291 08ba BD010000 		movl	$1, %ebp
 4291      00
 4292 08bf E93EFAFF 		jmp	.L322
 4292      FF
 4293              	.L500:
 4294 08c4 31C0     		xorl	%eax, %eax
 4295 08c6 BE000000 		movl	$.LC37, %esi
 4295      00
 4296 08cb BF010000 		movl	$1, %edi
 4296      00
 4297 08d0 E8000000 		call	__printf_chk
 4297      00
 4298 08d5 80BC24B8 		cmpb	$0, 184(%rsp)
 4298      00000000 
 4299 08dd 0F858AFC 		jne	.L333
 4299      FFFF
 4300 08e3 488B3D00 		movq	stderr(%rip), %rdi
 4300      000000
 4301 08ea 4C89E9   		movq	%r13, %rcx
 4302 08ed BA000000 		movl	$.LC109, %edx
 4302      00
 4303 08f2 BE010000 		movl	$1, %esi
 4303      00
 4304 08f7 31C0     		xorl	%eax, %eax
 4305 08f9 E8000000 		call	__fprintf_chk
 4305      00
 4306 08fe E945FBFF 		jmp	.L373
 4306      FF
 4307              	.L344:
 4308 0903 488BBC24 		movq	136(%rsp), %rdi
 4308      88000000 
 4309 090b 488DB424 		leaq	144(%rsp), %rsi
 4309      90000000 
 4310 0913 E8000000 		call	flResetToggle
 4310      00
 4311 0918 85C0     		testl	%eax, %eax
 4312 091a 0F8528FB 		jne	.L373
 4312      FFFF
 4313 0920 E936FDFF 		jmp	.L347
 4313      FF
 4314              	.L666:
 4315 0925 BE000000 		movl	$.LC117, %esi
 4315      00
 4316 092a BF010000 		movl	$1, %edi
 4316      00
 4317 092f 31C0     		xorl	%eax, %eax
 4318 0931 E8000000 		call	__printf_chk
 4318      00
 4319 0936 488B4424 		movq	16(%rsp), %rax
 4319      10
 4320 093b 488DAC24 		leaq	184(%rsp), %rbp
 4320      B8000000 
 4321 0943 488BBC24 		movq	136(%rsp), %rdi
 4321      88000000 
 4322 094b 488D8C24 		leaq	144(%rsp), %rcx
 4322      90000000 
 4323 0953 4889EA   		movq	%rbp, %rdx
 4324 0956 488B4068 		movq	104(%rax), %rax
 4325 095a 488B30   		movq	(%rax), %rsi
 4326 095d E8000000 		call	flMultiBitPortAccess
 4326      00
 4327 0962 85C0     		testl	%eax, %eax
 4328 0964 0F85DEFA 		jne	.L373
 4328      FFFF
 4329 096a 448B8424 		movl	184(%rsp), %r8d
 4329      B8000000 
 4330 0972 488DBC24 		leaq	2976(%rsp), %rdi
 4330      A00B0000 
 4331 097a B9000000 		movl	$.LC118, %ecx
 4331      00
 4332 097f BA090000 		movl	$9, %edx
 4332      00
 4333 0984 BE010000 		movl	$1, %esi
 4333      00
 4334 0989 31C0     		xorl	%eax, %eax
 4335 098b E8000000 		call	__sprintf_chk
 4335      00
 4336 0990 0FB68424 		movzbl	2976(%rsp), %eax
 4336      A00B0000 
 4337 0998 BE000000 		movl	$.LC119, %esi
 4337      00
 4338 099d BF010000 		movl	$1, %edi
 4338      00
 4339 09a2 83E830   		subl	$48, %eax
 4340 09a5 4898     		cltq
 4341 09a7 488B14C5 		movq	nibbles(,%rax,8), %rdx
 4341      00000000 
 4342 09af 31C0     		xorl	%eax, %eax
 4343 09b1 E8000000 		call	__printf_chk
 4343      00
 4344 09b6 0FB68424 		movzbl	2977(%rsp), %eax
 4344      A10B0000 
 4345 09be BE000000 		movl	$.LC120, %esi
 4345      00
 4346 09c3 BF010000 		movl	$1, %edi
 4346      00
 4347 09c8 83E830   		subl	$48, %eax
 4348 09cb 4898     		cltq
 4349 09cd 488B14C5 		movq	nibbles(,%rax,8), %rdx
 4349      00000000 
 4350 09d5 31C0     		xorl	%eax, %eax
 4351 09d7 E8000000 		call	__printf_chk
 4351      00
 4352 09dc 0FB68424 		movzbl	2978(%rsp), %eax
 4352      A20B0000 
 4353 09e4 BE000000 		movl	$.LC120, %esi
 4353      00
 4354 09e9 BF010000 		movl	$1, %edi
 4354      00
 4355 09ee 83E830   		subl	$48, %eax
 4356 09f1 4898     		cltq
 4357 09f3 488B14C5 		movq	nibbles(,%rax,8), %rdx
 4357      00000000 
 4358 09fb 31C0     		xorl	%eax, %eax
 4359 09fd E8000000 		call	__printf_chk
 4359      00
 4360 0a02 0FB68424 		movzbl	2979(%rsp), %eax
 4360      A30B0000 
 4361 0a0a BE000000 		movl	$.LC120, %esi
 4361      00
 4362 0a0f BF010000 		movl	$1, %edi
 4362      00
 4363 0a14 83E830   		subl	$48, %eax
 4364 0a17 4898     		cltq
 4365 0a19 488B14C5 		movq	nibbles(,%rax,8), %rdx
 4365      00000000 
 4366 0a21 31C0     		xorl	%eax, %eax
 4367 0a23 E8000000 		call	__printf_chk
 4367      00
 4368 0a28 0FB68424 		movzbl	2980(%rsp), %eax
 4368      A40B0000 
 4369 0a30 BE000000 		movl	$.LC121, %esi
 4369      00
 4370 0a35 BF010000 		movl	$1, %edi
 4370      00
 4371 0a3a 83E830   		subl	$48, %eax
 4372 0a3d 4898     		cltq
 4373 0a3f 488B14C5 		movq	nibbles(,%rax,8), %rdx
 4373      00000000 
 4374 0a47 31C0     		xorl	%eax, %eax
 4375 0a49 E8000000 		call	__printf_chk
 4375      00
 4376 0a4e 0FB68424 		movzbl	2981(%rsp), %eax
 4376      A50B0000 
 4377 0a56 BE000000 		movl	$.LC120, %esi
 4377      00
 4378 0a5b BF010000 		movl	$1, %edi
 4378      00
 4379 0a60 83E830   		subl	$48, %eax
 4380 0a63 4898     		cltq
 4381 0a65 488B14C5 		movq	nibbles(,%rax,8), %rdx
 4381      00000000 
 4382 0a6d 31C0     		xorl	%eax, %eax
 4383 0a6f E8000000 		call	__printf_chk
 4383      00
 4384 0a74 0FB68424 		movzbl	2982(%rsp), %eax
 4384      A60B0000 
 4385 0a7c BE000000 		movl	$.LC120, %esi
 4385      00
 4386 0a81 BF010000 		movl	$1, %edi
 4386      00
 4387 0a86 83E830   		subl	$48, %eax
 4388 0a89 4898     		cltq
 4389 0a8b 488B14C5 		movq	nibbles(,%rax,8), %rdx
 4389      00000000 
 4390 0a93 31C0     		xorl	%eax, %eax
 4391 0a95 E8000000 		call	__printf_chk
 4391      00
 4392 0a9a 0FB68424 		movzbl	2983(%rsp), %eax
 4392      A70B0000 
 4393 0aa2 BE000000 		movl	$.LC122, %esi
 4393      00
 4394 0aa7 BF010000 		movl	$1, %edi
 4394      00
 4395 0aac 83E830   		subl	$48, %eax
 4396 0aaf 4898     		cltq
 4397 0ab1 488B14C5 		movq	nibbles(,%rax,8), %rdx
 4397      00000000 
 4398 0ab9 31C0     		xorl	%eax, %eax
 4399 0abb E8000000 		call	__printf_chk
 4399      00
 4400 0ac0 BF640000 		movl	$100, %edi
 4400      00
 4401 0ac5 E8000000 		call	flSleep
 4401      00
 4402 0aca E9D9FBFF 		jmp	.L348
 4402      FF
 4403              	.L351:
 4404 0acf 4C89E9   		movq	%r13, %rcx
 4405 0ad2 BA000000 		movl	$.LC126, %edx
 4405      00
 4406 0ad7 E939F9FF 		jmp	.L651
 4406      FF
 4407              	.L662:
 4408 0adc E8000000 		call	__stack_chk_fail
 4408      00
 4409              	.L667:
 4410 0ae1 31C0     		xorl	%eax, %eax
 4411 0ae3 BE000000 		movl	$.LC127, %esi
 4411      00
 4412 0ae8 BF010000 		movl	$1, %edi
 4412      00
 4413 0aed E8000000 		call	__printf_chk
 4413      00
 4414 0af2 4584F6   		testb	%r14b, %r14b
 4415 0af5 0F849401 		je	.L357
 4415      0000
 4416              	.L493:
 4417 0afb 488BBC24 		movq	136(%rsp), %rdi
 4417      88000000 
 4418 0b03 488D9424 		leaq	144(%rsp), %rdx
 4418      90000000 
 4419 0b0b 31F6     		xorl	%esi, %esi
 4420 0b0d E8000000 		call	flSelectConduit
 4420      00
 4421 0b12 85C0     		testl	%eax, %eax
 4422 0b14 0F852EF9 		jne	.L373
 4422      FFFF
 4423 0b1a 488B4424 		movq	32(%rsp), %rax
 4423      20
 4424 0b1f 488BBC24 		movq	136(%rsp), %rdi
 4424      88000000 
 4425 0b27 488D8C24 		leaq	144(%rsp), %rcx
 4425      90000000 
 4426 0b2f 31D2     		xorl	%edx, %edx
 4427 0b31 488B4068 		movq	104(%rax), %rax
 4428 0b35 488B30   		movq	(%rax), %rsi
 4429 0b38 E8000000 		call	flProgram
 4429      00
 4430 0b3d 85C0     		testl	%eax, %eax
 4431 0b3f 0F8503F9 		jne	.L373
 4431      FFFF
 4432 0b45 E9F7FCFF 		jmp	.L356
 4432      FF
 4433              	.L342:
 4434 0b4a 4883C101 		addq	$1, %rcx
 4435 0b4e 89C2     		movl	%eax, %edx
 4436 0b50 BE000000 		movl	$.LC116, %esi
 4436      00
 4437 0b55 BF010000 		movl	$1, %edi
 4437      00
 4438 0b5a 31C0     		xorl	%eax, %eax
 4439 0b5c 48898C24 		movq	%rcx, 184(%rsp)
 4439      B8000000 
 4440 0b64 E8000000 		call	__printf_chk
 4440      00
 4441 0b69 488B9424 		movq	184(%rsp), %rdx
 4441      B8000000 
 4442 0b71 488BBC24 		movq	136(%rsp), %rdi
 4442      88000000 
 4443 0b79 488D8C24 		leaq	144(%rsp), %rcx
 4443      90000000 
 4444 0b81 89DE     		movl	%ebx, %esi
 4445 0b83 E8000000 		call	flSaveFirmware
 4445      00
 4446 0b88 85C0     		testl	%eax, %eax
 4447 0b8a 0F84BCFA 		je	.L337
 4447      FFFF
 4448              	.L369:
 4449 0b90 BD010000 		movl	$1, %ebp
 4449      00
 4450 0b95 E990FCFF 		jmp	.L367
 4450      FF
 4451              	.L498:
 4452 0b9a 4531E4   		xorl	%r12d, %r12d
 4453 0b9d 31ED     		xorl	%ebp, %ebp
 4454 0b9f E95EF7FF 		jmp	.L322
 4454      FF
 4455              	.L669:
 4456 0ba4 488B4068 		movq	104(%rax), %rax
 4457 0ba8 488DB424 		leaq	176(%rsp), %rsi
 4457      B0000000 
 4458 0bb0 BA0A0000 		movl	$10, %edx
 4458      00
 4459 0bb5 488B38   		movq	(%rax), %rdi
 4460 0bb8 E8000000 		call	strtoul
 4460      00
 4461 0bbd 488B8C24 		movq	176(%rsp), %rcx
 4461      B0000000 
 4462 0bc5 4889C5   		movq	%rax, %rbp
 4463 0bc8 80393A   		cmpb	$58, (%rcx)
 4464 0bcb 0F84DC01 		je	.L366
 4464      0000
 4465 0bd1 B9000000 		movl	$.LC99, %ecx
 4465      00
 4466 0bd6 BA000000 		movl	$.LC132, %edx
 4466      00
 4467 0bdb E932FCFF 		jmp	.L654
 4467      FF
 4468              	.L668:
 4469 0be0 31C0     		xorl	%eax, %eax
 4470 0be2 4C89EA   		movq	%r13, %rdx
 4471 0be5 BE000000 		movl	$.LC129, %esi
 4471      00
 4472 0bea BF010000 		movl	$1, %edi
 4472      00
 4473 0bef E8000000 		call	__printf_chk
 4473      00
 4474 0bf4 4584E4   		testb	%r12b, %r12b
 4475 0bf7 0F849F00 		je	.L360
 4475      0000
 4476 0bfd 488BBC24 		movq	136(%rsp), %rdi
 4476      88000000 
 4477 0c05 488D9424 		leaq	144(%rsp), %rdx
 4477      90000000 
 4478 0c0d 89DE     		movl	%ebx, %esi
 4479 0c0f E8000000 		call	flSelectConduit
 4479      00
 4480 0c14 85C0     		testl	%eax, %eax
 4481 0c16 0F8574FF 		jne	.L369
 4481      FFFF
 4482 0c1c 488DAC24 		leaq	184(%rsp), %rbp
 4482      B8000000 
 4483 0c24 488BBC24 		movq	136(%rsp), %rdi
 4483      88000000 
 4484 0c2c 488D9424 		leaq	144(%rsp), %rdx
 4484      90000000 
 4485 0c34 4889EE   		movq	%rbp, %rsi
 4486 0c37 E8000000 		call	flIsFPGARunning
 4486      00
 4487 0c3c 85C0     		testl	%eax, %eax
 4488 0c3e 0F854CFF 		jne	.L369
 4488      FFFF
 4489 0c44 80BC24B8 		cmpb	$0, 184(%rsp)
 4489      00000000 
 4490 0c4c 0F844E01 		je	.L362
 4490      0000
 4491 0c52 488B4424 		movq	56(%rsp), %rax
 4491      38
 4492 0c57 488BBC24 		movq	136(%rsp), %rdi
 4492      88000000 
 4493 0c5f 488D9424 		leaq	144(%rsp), %rdx
 4493      90000000 
 4494 0c67 488B4068 		movq	104(%rax), %rax
 4495 0c6b 488B30   		movq	(%rax), %rsi
 4496 0c6e E8000000 		call	parseLine
 4496      00
 4497 0c73 85C0     		testl	%eax, %eax
 4498 0c75 89C5     		movl	%eax, %ebp
 4499 0c77 0F85ADFB 		jne	.L367
 4499      FFFF
 4500 0c7d E9E0FBFF 		jmp	.L359
 4500      FF
 4501              	.L380:
 4502 0c82 4C89E9   		movq	%r13, %rcx
 4503 0c85 BA000000 		movl	$.LC138, %edx
 4503      00
 4504 0c8a E986F7FF 		jmp	.L651
 4504      FF
 4505              	.L357:
 4506 0c8f 4C89E9   		movq	%r13, %rcx
 4507 0c92 BA000000 		movl	$.LC128, %edx
 4507      00
 4508 0c97 E979F7FF 		jmp	.L651
 4508      FF
 4509              	.L360:
 4510 0c9c 4C89E9   		movq	%r13, %rcx
 4511 0c9f BA000000 		movl	$.LC131, %edx
 4511      00
 4512 0ca4 E96CF7FF 		jmp	.L651
 4512      FF
 4513              	.L670:
 4514 0ca9 31C0     		xorl	%eax, %eax
 4515 0cab BE000000 		movl	$.LC135, %esi
 4515      00
 4516 0cb0 BF010000 		movl	$1, %edi
 4516      00
 4517 0cb5 E8000000 		call	__printf_chk
 4517      00
 4518 0cba 4584E4   		testb	%r12b, %r12b
 4519 0cbd 74C3     		je	.L380
 4520 0cbf 488BBC24 		movq	136(%rsp), %rdi
 4520      88000000 
 4521 0cc7 488D9424 		leaq	144(%rsp), %rdx
 4521      90000000 
 4522 0ccf 89DE     		movl	%ebx, %esi
 4523 0cd1 E8000000 		call	flSelectConduit
 4523      00
 4524 0cd6 85C0     		testl	%eax, %eax
 4525 0cd8 0F856AF7 		jne	.L373
 4525      FFFF
 4526 0cde 488DAC24 		leaq	184(%rsp), %rbp
 4526      B8000000 
 4527 0ce6 488BBC24 		movq	136(%rsp), %rdi
 4527      88000000 
 4528 0cee 488D9424 		leaq	144(%rsp), %rdx
 4528      90000000 
 4529 0cf6 4889EE   		movq	%rbp, %rsi
 4530 0cf9 E8000000 		call	flIsFPGARunning
 4530      00
 4531 0cfe 85C0     		testl	%eax, %eax
 4532 0d00 0F8542F7 		jne	.L373
 4532      FFFF
 4533 0d06 80BC24B8 		cmpb	$0, 184(%rsp)
 4533      00000000 
 4534 0d0e 746D     		je	.L574
 4535              	.L565:
 4536 0d10 BF000000 		movl	$.LC136, %edi
 4536      00
 4537 0d15 E8000000 		call	readline
 4537      00
 4538 0d1a 4885C0   		testq	%rax, %rax
 4539 0d1d 4989C4   		movq	%rax, %r12
 4540 0d20 743E     		je	.L376
 4541 0d22 0FB600   		movzbl	(%rax), %eax
 4542 0d25 84C0     		testb	%al, %al
 4543 0d27 74E7     		je	.L565
 4544 0d29 3C71     		cmpb	$113, %al
 4545 0d2b 7433     		je	.L376
 4546 0d2d 4C89E7   		movq	%r12, %rdi
 4547 0d30 E8000000 		call	add_history
 4547      00
 4548 0d35 488BBC24 		movq	136(%rsp), %rdi
 4548      88000000 
 4549 0d3d 488D9424 		leaq	144(%rsp), %rdx
 4549      90000000 
 4550 0d45 4C89E6   		movq	%r12, %rsi
 4551 0d48 E8000000 		call	parseLine
 4551      00
 4552 0d4d 85C0     		testl	%eax, %eax
 4553 0d4f 7525     		jne	.L582
 4554 0d51 4C89E7   		movq	%r12, %rdi
 4555 0d54 E8000000 		call	free
 4555      00
 4556 0d59 41803C24 		cmpb	$113, (%r12)
 4556      71
 4557 0d5e 75B0     		jne	.L565
 4558              	.L376:
 4559 0d60 488B4424 		movq	64(%rsp), %rax
 4559      40
 4560 0d65 83786000 		cmpl	$0, 96(%rax)
 4561 0d69 0F852CFB 		jne	.L379
 4561      FFFF
 4562 0d6f 31ED     		xorl	%ebp, %ebp
 4563 0d71 E98CF5FF 		jmp	.L322
 4563      FF
 4564              	.L582:
 4565 0d76 89C5     		movl	%eax, %ebp
 4566 0d78 E985F5FF 		jmp	.L322
 4566      FF
 4567              	.L574:
 4568 0d7d 4C89E9   		movq	%r13, %rcx
 4569 0d80 BA000000 		movl	$.LC137, %edx
 4569      00
 4570 0d85 E98BF6FF 		jmp	.L651
 4570      FF
 4571              	.L352:
 4572 0d8a BE000000 		movl	$.LC125, %esi
 4572      00
 4573 0d8f BF010000 		movl	$1, %edi
 4573      00
 4574 0d94 31C0     		xorl	%eax, %eax
 4575 0d96 E8000000 		call	__printf_chk
 4575      00
 4576 0d9b E9C7F9FF 		jmp	.L355
 4576      FF
 4577              	.L362:
 4578 0da0 4C89E9   		movq	%r13, %rcx
 4579 0da3 BA000000 		movl	$.LC130, %edx
 4579      00
 4580 0da8 E965FAFF 		jmp	.L654
 4580      FF
 4581              	.L366:
 4582 0dad 4883C101 		addq	$1, %rcx
 4583 0db1 4889C2   		movq	%rax, %rdx
 4584 0db4 BE000000 		movl	$.LC133, %esi
 4584      00
 4585 0db9 BF010000 		movl	$1, %edi
 4585      00
 4586 0dbe 31C0     		xorl	%eax, %eax
 4587 0dc0 48898C24 		movq	%rcx, 176(%rsp)
 4587      B0000000 
 4588 0dc8 E8000000 		call	__printf_chk
 4588      00
 4589 0dcd 488BBC24 		movq	176(%rsp), %rdi
 4589      B0000000 
 4590 0dd5 BE000000 		movl	$.LC3, %esi
 4590      00
 4591 0dda E8000000 		call	fopen
 4591      00
 4592 0ddf 4885C0   		testq	%rax, %rax
 4593 0de2 4989C6   		movq	%rax, %r14
 4594 0de5 0F843723 		je	.L497
 4594      0000
 4595 0deb E8000000 		call	sigRegisterHandler
 4595      00
 4596 0df0 488BBC24 		movq	136(%rsp), %rdi
 4596      88000000 
 4597 0df8 488D9424 		leaq	144(%rsp), %rdx
 4597      90000000 
 4598 0e00 89DE     		movl	%ebx, %esi
 4599 0e02 E8000000 		call	flSelectConduit
 4599      00
 4600 0e07 85C0     		testl	%eax, %eax
 4601 0e09 0F8581FD 		jne	.L369
 4601      FFFF
 4602 0e0f 488BBC24 		movq	136(%rsp), %rdi
 4602      88000000 
 4603 0e17 400FB6ED 		movzbl	%bpl, %ebp
 4604 0e1b 4C8D8424 		leaq	144(%rsp), %r8
 4604      90000000 
 4605 0e23 31C9     		xorl	%ecx, %ecx
 4606 0e25 BA005800 		movl	$22528, %edx
 4606      00
 4607 0e2a 89EE     		movl	%ebp, %esi
 4608 0e2c E8000000 		call	flReadChannelAsyncSubmit
 4608      00
 4609 0e31 85C0     		testl	%eax, %eax
 4610 0e33 0F8557FD 		jne	.L369
 4610      FFFF
 4611              	.L370:
 4612 0e39 488BBC24 		movq	136(%rsp), %rdi
 4612      88000000 
 4613 0e41 4C8D8424 		leaq	144(%rsp), %r8
 4613      90000000 
 4614 0e49 31C9     		xorl	%ecx, %ecx
 4615 0e4b BA005800 		movl	$22528, %edx
 4615      00
 4616 0e50 89EE     		movl	%ebp, %esi
 4617 0e52 E8000000 		call	flReadChannelAsyncSubmit
 4617      00
 4618 0e57 85C0     		testl	%eax, %eax
 4619 0e59 0F8531FD 		jne	.L369
 4619      FFFF
 4620 0e5f 488D8C24 		leaq	168(%rsp), %rcx
 4620      A8000000 
 4621 0e67 488BBC24 		movq	136(%rsp), %rdi
 4621      88000000 
 4622 0e6f 4C8D8424 		leaq	144(%rsp), %r8
 4622      90000000 
 4623 0e77 488DB424 		leaq	184(%rsp), %rsi
 4623      B8000000 
 4624 0e7f 4889CA   		movq	%rcx, %rdx
 4625 0e82 E8000000 		call	flReadChannelAsyncAwait
 4625      00
 4626 0e87 85C0     		testl	%eax, %eax
 4627 0e89 0F8501FD 		jne	.L369
 4627      FFFF
 4628 0e8f 8B9424A8 		movl	168(%rsp), %edx
 4628      000000
 4629 0e96 488BBC24 		movq	184(%rsp), %rdi
 4629      B8000000 
 4630 0e9e 4C89F1   		movq	%r14, %rcx
 4631 0ea1 BE010000 		movl	$1, %esi
 4631      00
 4632 0ea6 E8000000 		call	fwrite
 4632      00
 4633 0eab BE000000 		movl	$.LC108, %esi
 4633      00
 4634 0eb0 BF010000 		movl	$1, %edi
 4634      00
 4635 0eb5 31C0     		xorl	%eax, %eax
 4636 0eb7 E8000000 		call	__printf_chk
 4636      00
 4637 0ebc E8000000 		call	sigIsRaised
 4637      00
 4638 0ec1 84C0     		testb	%al, %al
 4639 0ec3 0F8470FF 		je	.L370
 4639      FFFF
 4640 0ec9 BE000000 		movl	$.LC134, %esi
 4640      00
 4641 0ece BF010000 		movl	$1, %edi
 4641      00
 4642 0ed3 31C0     		xorl	%eax, %eax
 4643 0ed5 E8000000 		call	__printf_chk
 4643      00
 4644 0eda 488D8C24 		leaq	168(%rsp), %rcx
 4644      A8000000 
 4645 0ee2 488BBC24 		movq	136(%rsp), %rdi
 4645      88000000 
 4646 0eea 4C8D8424 		leaq	144(%rsp), %r8
 4646      90000000 
 4647 0ef2 488DB424 		leaq	184(%rsp), %rsi
 4647      B8000000 
 4648 0efa 4889CA   		movq	%rcx, %rdx
 4649 0efd E8000000 		call	flReadChannelAsyncAwait
 4649      00
 4650 0f02 85C0     		testl	%eax, %eax
 4651 0f04 0F8586FC 		jne	.L369
 4651      FFFF
 4652 0f0a 8B9424A8 		movl	168(%rsp), %edx
 4652      000000
 4653 0f11 488BBC24 		movq	184(%rsp), %rdi
 4653      B8000000 
 4654 0f19 4C89F1   		movq	%r14, %rcx
 4655 0f1c BE010000 		movl	$1, %esi
 4655      00
 4656 0f21 E8000000 		call	fwrite
 4656      00
 4657 0f26 4C89F7   		movq	%r14, %rdi
 4658 0f29 E8000000 		call	fclose
 4658      00
 4659 0f2e E93EF9FF 		jmp	.L365
 4659      FF
 4660              	.L671:
 4661 0f33 488BBC24 		movq	136(%rsp), %rdi
 4661      88000000 
 4662 0f3b 488D9424 		leaq	144(%rsp), %rdx
 4662      90000000 
 4663 0f43 488D7424 		leaq	125(%rsp), %rsi
 4663      7D
 4664 0f48 E8000000 		call	flIsFPGARunning
 4664      00
 4665 0f4d 85C0     		testl	%eax, %eax
 4666 0f4f 0F8565F9 		jne	.L650
 4666      FFFF
 4667 0f55 BF080000 		movl	$8, %edi
 4667      00
 4668 0f5a E8000000 		call	malloc
 4668      00
 4669 0f5f 807C247D 		cmpb	$0, 125(%rsp)
 4669      00
 4670 0f64 48898424 		movq	%rax, 152(%rsp)
 4670      98000000 
 4671 0f6c 0F84BA21 		je	.L384
 4671      0000
 4672 0f72 660F6F05 		movdqa	.LC139(%rip), %xmm0
 4672      00000000 
 4673 0f7a 488D9424 		leaq	192(%rsp), %rdx
 4673      C0000000 
 4674 0f82 B9070000 		movl	$7, %ecx
 4674      00
 4675 0f87 31C0     		xorl	%eax, %eax
 4676 0f89 0F298424 		movaps	%xmm0, 416(%rsp)
 4676      A0010000 
 4677 0f91 660FEFC0 		pxor	%xmm0, %xmm0
 4678 0f95 660F6F0D 		movdqa	.LC141(%rip), %xmm1
 4678      00000000 
 4679 0f9d 0F298424 		movaps	%xmm0, 464(%rsp)
 4679      D0010000 
 4680 0fa5 0F298C24 		movaps	%xmm1, 496(%rsp)
 4680      F0010000 
 4681 0fad 0F298C24 		movaps	%xmm1, 528(%rsp)
 4681      10020000 
 4682 0fb5 660F6F05 		movdqa	.LC140(%rip), %xmm0
 4682      00000000 
 4683 0fbd 660F6F0D 		movdqa	.LC143(%rip), %xmm1
 4683      00000000 
 4684 0fc5 660F6F1D 		movdqa	.LC20(%rip), %xmm3
 4684      00000000 
 4685 0fcd 0F298424 		movaps	%xmm0, 480(%rsp)
 4685      E0010000 
 4686 0fd5 0F298424 		movaps	%xmm0, 672(%rsp)
 4686      A0020000 
 4687 0fdd 0F298424 		movaps	%xmm0, 688(%rsp)
 4687      B0020000 
 4688 0fe5 0F298424 		movaps	%xmm0, 704(%rsp)
 4688      C0020000 
 4689 0fed 0F298424 		movaps	%xmm0, 720(%rsp)
 4689      D0020000 
 4690 0ff5 0F298424 		movaps	%xmm0, 736(%rsp)
 4690      E0020000 
 4691 0ffd 0F298424 		movaps	%xmm0, 752(%rsp)
 4691      F0020000 
 4692 1005 0F298424 		movaps	%xmm0, 768(%rsp)
 4692      00030000 
 4693 100d 0F298424 		movaps	%xmm0, 784(%rsp)
 4693      10030000 
 4694 1015 0F299C24 		movaps	%xmm3, 432(%rsp)
 4694      B0010000 
 4695 101d 0F299C24 		movaps	%xmm3, 448(%rsp)
 4695      C0010000 
 4696 1025 0F298C24 		movaps	%xmm1, 544(%rsp)
 4696      20020000 
 4697 102d 0F298C24 		movaps	%xmm1, 560(%rsp)
 4697      30020000 
 4698 1035 0F298C24 		movaps	%xmm1, 576(%rsp)
 4698      40020000 
 4699 103d 0F298C24 		movaps	%xmm1, 592(%rsp)
 4699      50020000 
 4700 1045 0F298C24 		movaps	%xmm1, 608(%rsp)
 4700      60020000 
 4701 104d 0F298C24 		movaps	%xmm1, 624(%rsp)
 4701      70020000 
 4702 1055 0F298C24 		movaps	%xmm1, 640(%rsp)
 4702      80020000 
 4703 105d 0F298C24 		movaps	%xmm1, 656(%rsp)
 4703      90020000 
 4704 1065 660F6F15 		movdqa	.LC142(%rip), %xmm2
 4704      00000000 
 4705 106d 660F6F05 		movdqa	.LC144(%rip), %xmm0
 4705      00000000 
 4706 1075 0F299424 		movaps	%xmm2, 512(%rsp)
 4706      00020000 
 4707 107d 0F298424 		movaps	%xmm0, 192(%rsp)
 4707      C0000000 
 4708 1085 660F6F05 		movdqa	.LC145(%rip), %xmm0
 4708      00000000 
 4709 108d 0F298424 		movaps	%xmm0, 208(%rsp)
 4709      D0000000 
 4710              	.L385:
 4711 1095 8B721C   		movl	28(%rdx), %esi
 4712 1098 4883EA04 		subq	$4, %rdx
 4713 109c D3E6     		sall	%cl, %esi
 4714 109e 83E901   		subl	$1, %ecx
 4715 10a1 09F0     		orl	%esi, %eax
 4716 10a3 83F9FF   		cmpl	$-1, %ecx
 4717 10a6 75ED     		jne	.L385
 4718 10a8 89C3     		movl	%eax, %ebx
 4719 10aa 488D8424 		leaq	2977(%rsp), %rax
 4719      A10B0000 
 4720 10b2 4531ED   		xorl	%r13d, %r13d
 4721 10b5 4C896424 		movq	%r12, 8(%rsp)
 4721      08
 4722 10ba 48894424 		movq	%rax, 40(%rsp)
 4722      28
 4723              	.L491:
 4724 10bf BA000000 		movl	$.LC146, %edx
 4724      00
 4725 10c4 BE000000 		movl	$.LC147, %esi
 4725      00
 4726 10c9 BF010000 		movl	$1, %edi
 4726      00
 4727 10ce 31C0     		xorl	%eax, %eax
 4728 10d0 438D6C2D 		leal	(%r13,%r13), %ebp
 4728      00
 4729 10d5 E8000000 		call	__printf_chk
 4729      00
 4730 10da 438D542D 		leal	(%r13,%r13), %edx
 4730      00
 4731 10df BE000000 		movl	$.LC148, %esi
 4731      00
 4732 10e4 BF010000 		movl	$1, %edi
 4732      00
 4733 10e9 31C0     		xorl	%eax, %eax
 4734 10eb 440FB6F5 		movzbl	%bpl, %r14d
 4735 10ef E8000000 		call	__printf_chk
 4735      00
 4736 10f4 BA000000 		movl	$.LC149, %edx
 4736      00
 4737 10f9 BE000000 		movl	$.LC26, %esi
 4737      00
 4738 10fe BF010000 		movl	$1, %edi
 4738      00
 4739 1103 31C0     		xorl	%eax, %eax
 4740 1105 E8000000 		call	__printf_chk
 4740      00
 4741 110a BA000000 		movl	$.LC150, %edx
 4741      00
 4742 110f BE000000 		movl	$.LC26, %esi
 4742      00
 4743 1114 BF010000 		movl	$1, %edi
 4743      00
 4744 1119 31C0     		xorl	%eax, %eax
 4745 111b E8000000 		call	__printf_chk
 4745      00
 4746 1120 BF40420F 		movl	$1000000, %edi
 4746      00
 4747 1125 E8000000 		call	delay
 4747      00
 4748 112a 488BBC24 		movq	136(%rsp), %rdi
 4748      88000000 
 4749 1132 4C8D8424 		leaq	144(%rsp), %r8
 4749      90000000 
 4750 113a 488D8C24 		leaq	2864(%rsp), %rcx
 4750      300B0000 
 4751 1142 BA010000 		movl	$1, %edx
 4751      00
 4752 1147 4489F6   		movl	%r14d, %esi
 4753 114a E8000000 		call	flReadChannelAsyncSubmit
 4753      00
 4754 114f 85C0     		testl	%eax, %eax
 4755 1151 0F852C20 		jne	.L639
 4755      0000
 4756 1157 488D8C24 		leaq	132(%rsp), %rcx
 4756      84000000 
 4757 115f 488BBC24 		movq	136(%rsp), %rdi
 4757      88000000 
 4758 1167 4C8D8424 		leaq	144(%rsp), %r8
 4758      90000000 
 4759 116f 488DB424 		leaq	152(%rsp), %rsi
 4759      98000000 
 4760 1177 4889CA   		movq	%rcx, %rdx
 4761 117a E8000000 		call	flReadChannelAsyncAwait
 4761      00
 4762 117f 85C0     		testl	%eax, %eax
 4763 1181 0F85FC1F 		jne	.L639
 4763      0000
 4764 1187 3A9C2430 		cmpb	2864(%rsp), %bl
 4764      0B0000
 4765 118e 0F84BD1F 		je	.L646
 4765      0000
 4766 1194 BFE80300 		movl	$1000, %edi
 4766      00
 4767 1199 E8000000 		call	delay
 4767      00
 4768 119e 488BBC24 		movq	136(%rsp), %rdi
 4768      88000000 
 4769 11a6 488D8C24 		leaq	2865(%rsp), %rcx
 4769      310B0000 
 4770 11ae 4C8D8424 		leaq	144(%rsp), %r8
 4770      90000000 
 4771 11b6 BA010000 		movl	$1, %edx
 4771      00
 4772 11bb 4489F6   		movl	%r14d, %esi
 4773 11be E8000000 		call	flReadChannelAsyncSubmit
 4773      00
 4774 11c3 85C0     		testl	%eax, %eax
 4775 11c5 0F85B81F 		jne	.L639
 4775      0000
 4776 11cb 488D8C24 		leaq	132(%rsp), %rcx
 4776      84000000 
 4777 11d3 488BBC24 		movq	136(%rsp), %rdi
 4777      88000000 
 4778 11db 4C8D8424 		leaq	144(%rsp), %r8
 4778      90000000 
 4779 11e3 488DB424 		leaq	152(%rsp), %rsi
 4779      98000000 
 4780 11eb 4889CA   		movq	%rcx, %rdx
 4781 11ee E8000000 		call	flReadChannelAsyncAwait
 4781      00
 4782 11f3 85C0     		testl	%eax, %eax
 4783 11f5 0F85881F 		jne	.L639
 4783      0000
 4784 11fb 3A9C2431 		cmpb	2865(%rsp), %bl
 4784      0B0000
 4785 1202 0F84491F 		je	.L646
 4785      0000
 4786 1208 BFE80300 		movl	$1000, %edi
 4786      00
 4787 120d E8000000 		call	delay
 4787      00
 4788 1212 488BBC24 		movq	136(%rsp), %rdi
 4788      88000000 
 4789 121a 488D8C24 		leaq	2866(%rsp), %rcx
 4789      320B0000 
 4790 1222 4C8D8424 		leaq	144(%rsp), %r8
 4790      90000000 
 4791 122a BA010000 		movl	$1, %edx
 4791      00
 4792 122f 4489F6   		movl	%r14d, %esi
 4793 1232 E8000000 		call	flReadChannelAsyncSubmit
 4793      00
 4794 1237 85C0     		testl	%eax, %eax
 4795 1239 0F85441F 		jne	.L639
 4795      0000
 4796 123f 488D8C24 		leaq	132(%rsp), %rcx
 4796      84000000 
 4797 1247 488BBC24 		movq	136(%rsp), %rdi
 4797      88000000 
 4798 124f 4C8D8424 		leaq	144(%rsp), %r8
 4798      90000000 
 4799 1257 488DB424 		leaq	152(%rsp), %rsi
 4799      98000000 
 4800 125f 4889CA   		movq	%rcx, %rdx
 4801 1262 E8000000 		call	flReadChannelAsyncAwait
 4801      00
 4802 1267 85C0     		testl	%eax, %eax
 4803 1269 0F85141F 		jne	.L639
 4803      0000
 4804 126f 3A9C2432 		cmpb	2866(%rsp), %bl
 4804      0B0000
 4805 1276 0F84D51E 		je	.L646
 4805      0000
 4806 127c BFE80300 		movl	$1000, %edi
 4806      00
 4807 1281 E8000000 		call	delay
 4807      00
 4808 1286 488BBC24 		movq	136(%rsp), %rdi
 4808      88000000 
 4809 128e 488D8C24 		leaq	2867(%rsp), %rcx
 4809      330B0000 
 4810 1296 4C8D8424 		leaq	144(%rsp), %r8
 4810      90000000 
 4811 129e BA010000 		movl	$1, %edx
 4811      00
 4812 12a3 4489F6   		movl	%r14d, %esi
 4813 12a6 E8000000 		call	flReadChannelAsyncSubmit
 4813      00
 4814 12ab 85C0     		testl	%eax, %eax
 4815 12ad 0F85D01E 		jne	.L639
 4815      0000
 4816 12b3 488D8C24 		leaq	132(%rsp), %rcx
 4816      84000000 
 4817 12bb 488BBC24 		movq	136(%rsp), %rdi
 4817      88000000 
 4818 12c3 4C8D8424 		leaq	144(%rsp), %r8
 4818      90000000 
 4819 12cb 488DB424 		leaq	152(%rsp), %rsi
 4819      98000000 
 4820 12d3 4889CA   		movq	%rcx, %rdx
 4821 12d6 E8000000 		call	flReadChannelAsyncAwait
 4821      00
 4822 12db 85C0     		testl	%eax, %eax
 4823 12dd 0F85A01E 		jne	.L639
 4823      0000
 4824 12e3 3A9C2433 		cmpb	2867(%rsp), %bl
 4824      0B0000
 4825 12ea 0F84611E 		je	.L646
 4825      0000
 4826 12f0 BA000000 		movl	$.LC152, %edx
 4826      00
 4827 12f5 BE000000 		movl	$.LC26, %esi
 4827      00
 4828 12fa BF010000 		movl	$1, %edi
 4828      00
 4829 12ff 31C0     		xorl	%eax, %eax
 4830 1301 4531E4   		xorl	%r12d, %r12d
 4831 1304 E8000000 		call	__printf_chk
 4831      00
 4832              	.L392:
 4833 1309 420FB694 		movzbl	2864(%rsp,%r12), %edx
 4833      24300B00 
 4833      00
 4834 1312 31C0     		xorl	%eax, %eax
 4835 1314 BE000000 		movl	$.LC36, %esi
 4835      00
 4836 1319 BF010000 		movl	$1, %edi
 4836      00
 4837 131e 4983C401 		addq	$1, %r12
 4838 1322 E8000000 		call	__printf_chk
 4838      00
 4839 1327 4983FC04 		cmpq	$4, %r12
 4840 132b 75DC     		jne	.L392
 4841 132d BE000000 		movl	$.LC37, %esi
 4841      00
 4842 1332 BF010000 		movl	$1, %edi
 4842      00
 4843 1337 31C0     		xorl	%eax, %eax
 4844 1339 E8000000 		call	__printf_chk
 4844      00
 4845 133e 488DB424 		leaq	800(%rsp), %rsi
 4845      20030000 
 4846 1346 488DBC24 		leaq	2864(%rsp), %rdi
 4846      300B0000 
 4847 134e 4531E4   		xorl	%r12d, %r12d
 4848 1351 E8000000 		call	uint8ToBin
 4848      00
 4849 1356 BA000000 		movl	$.LC153, %edx
 4849      00
 4850 135b BE000000 		movl	$.LC26, %esi
 4850      00
 4851 1360 BF010000 		movl	$1, %edi
 4851      00
 4852 1365 31C0     		xorl	%eax, %eax
 4853 1367 E8000000 		call	__printf_chk
 4853      00
 4854 136c BA000000 		movl	$.LC154, %edx
 4854      00
 4855 1371 BE000000 		movl	$.LC26, %esi
 4855      00
 4856 1376 BF010000 		movl	$1, %edi
 4856      00
 4857 137b 31C0     		xorl	%eax, %eax
 4858 137d E8000000 		call	__printf_chk
 4858      00
 4859              	.L393:
 4860 1382 428B9424 		movl	800(%rsp,%r12), %edx
 4860      20030000 
 4861 138a 31C0     		xorl	%eax, %eax
 4862 138c BE000000 		movl	$.LC36, %esi
 4862      00
 4863 1391 BF010000 		movl	$1, %edi
 4863      00
 4864 1396 4983C404 		addq	$4, %r12
 4865 139a E8000000 		call	__printf_chk
 4865      00
 4866 139f 4981FC80 		cmpq	$128, %r12
 4866      000000
 4867 13a6 75DA     		jne	.L393
 4868 13a8 BE000000 		movl	$.LC37, %esi
 4868      00
 4869 13ad BF010000 		movl	$1, %edi
 4869      00
 4870 13b2 31C0     		xorl	%eax, %eax
 4871 13b4 E8000000 		call	__printf_chk
 4871      00
 4872 13b9 488D9424 		leaq	928(%rsp), %rdx
 4872      A0030000 
 4873 13c1 488DB424 		leaq	416(%rsp), %rsi
 4873      A0010000 
 4874 13c9 488DBC24 		leaq	800(%rsp), %rdi
 4874      20030000 
 4875 13d1 4531E4   		xorl	%r12d, %r12d
 4876 13d4 E8000000 		call	decrypter
 4876      00
 4877 13d9 BA000000 		movl	$.LC155, %edx
 4877      00
 4878 13de BE000000 		movl	$.LC26, %esi
 4878      00
 4879 13e3 BF010000 		movl	$1, %edi
 4879      00
 4880 13e8 31C0     		xorl	%eax, %eax
 4881 13ea E8000000 		call	__printf_chk
 4881      00
 4882              	.L394:
 4883 13ef 428B9424 		movl	928(%rsp,%r12), %edx
 4883      A0030000 
 4884 13f7 31C0     		xorl	%eax, %eax
 4885 13f9 BE000000 		movl	$.LC36, %esi
 4885      00
 4886 13fe BF010000 		movl	$1, %edi
 4886      00
 4887 1403 4983C404 		addq	$4, %r12
 4888 1407 E8000000 		call	__printf_chk
 4888      00
 4889 140c 4981FC80 		cmpq	$128, %r12
 4889      000000
 4890 1413 75DA     		jne	.L394
 4891 1415 BE000000 		movl	$.LC37, %esi
 4891      00
 4892 141a BF010000 		movl	$1, %edi
 4892      00
 4893 141f 31C0     		xorl	%eax, %eax
 4894 1421 E8000000 		call	__printf_chk
 4894      00
 4895 1426 BA000000 		movl	$.LC156, %edx
 4895      00
 4896 142b BE000000 		movl	$.LC26, %esi
 4896      00
 4897 1430 BF010000 		movl	$1, %edi
 4897      00
 4898 1435 31C0     		xorl	%eax, %eax
 4899 1437 4531E4   		xorl	%r12d, %r12d
 4900 143a E8000000 		call	__printf_chk
 4900      00
 4901 143f BA000000 		movl	$.LC157, %edx
 4901      00
 4902 1444 BE000000 		movl	$.LC26, %esi
 4902      00
 4903 1449 BF010000 		movl	$1, %edi
 4903      00
 4904 144e 31C0     		xorl	%eax, %eax
 4905 1450 E8000000 		call	__printf_chk
 4905      00
 4906 1455 488D9424 		leaq	1056(%rsp), %rdx
 4906      20040000 
 4907 145d 488DB424 		leaq	416(%rsp), %rsi
 4907      A0010000 
 4908 1465 488DBC24 		leaq	928(%rsp), %rdi
 4908      A0030000 
 4909 146d E8000000 		call	encrypter
 4909      00
 4910 1472 BA000000 		movl	$.LC158, %edx
 4910      00
 4911 1477 BE000000 		movl	$.LC26, %esi
 4911      00
 4912 147c BF010000 		movl	$1, %edi
 4912      00
 4913 1481 31C0     		xorl	%eax, %eax
 4914 1483 E8000000 		call	__printf_chk
 4914      00
 4915 1488 BA000000 		movl	$.LC159, %edx
 4915      00
 4916 148d BE000000 		movl	$.LC26, %esi
 4916      00
 4917 1492 BF010000 		movl	$1, %edi
 4917      00
 4918 1497 31C0     		xorl	%eax, %eax
 4919 1499 E8000000 		call	__printf_chk
 4919      00
 4920              	.L395:
 4921 149e 428B9424 		movl	1056(%rsp,%r12), %edx
 4921      20040000 
 4922 14a6 31C0     		xorl	%eax, %eax
 4923 14a8 BE000000 		movl	$.LC36, %esi
 4923      00
 4924 14ad BF010000 		movl	$1, %edi
 4924      00
 4925 14b2 4983C404 		addq	$4, %r12
 4926 14b6 E8000000 		call	__printf_chk
 4926      00
 4927 14bb 4981FC80 		cmpq	$128, %r12
 4927      000000
 4928 14c2 75DA     		jne	.L395
 4929 14c4 BE000000 		movl	$.LC37, %esi
 4929      00
 4930 14c9 BF010000 		movl	$1, %edi
 4930      00
 4931 14ce 31C0     		xorl	%eax, %eax
 4932 14d0 E8000000 		call	__printf_chk
 4932      00
 4933 14d5 BA000000 		movl	$.LC160, %edx
 4933      00
 4934 14da BE000000 		movl	$.LC26, %esi
 4934      00
 4935 14df BF010000 		movl	$1, %edi
 4935      00
 4936 14e4 31C0     		xorl	%eax, %eax
 4937 14e6 83C501   		addl	$1, %ebp
 4938 14e9 E8000000 		call	__printf_chk
 4938      00
 4939 14ee 488DB424 		leaq	800(%rsp), %rsi
 4939      20030000 
 4940 14f6 488DBC24 		leaq	2880(%rsp), %rdi
 4940      400B0000 
 4941 14fe 440FB6E5 		movzbl	%bpl, %r12d
 4942 1502 E8000000 		call	BinTouint8
 4942      00
 4943 1507 BA000000 		movl	$.LC161, %edx
 4943      00
 4944 150c BE000000 		movl	$.LC26, %esi
 4944      00
 4945 1511 BF010000 		movl	$1, %edi
 4945      00
 4946 1516 31C0     		xorl	%eax, %eax
 4947 1518 E8000000 		call	__printf_chk
 4947      00
 4948 151d BFE80300 		movl	$1000, %edi
 4948      00
 4949 1522 E8000000 		call	delay
 4949      00
 4950 1527 488BBC24 		movq	136(%rsp), %rdi
 4950      88000000 
 4951 152f 4C8D8424 		leaq	144(%rsp), %r8
 4951      90000000 
 4952 1537 488D8C24 		leaq	2880(%rsp), %rcx
 4952      400B0000 
 4953 153f BA010000 		movl	$1, %edx
 4953      00
 4954 1544 4489E6   		movl	%r12d, %esi
 4955 1547 E8000000 		call	flWriteChannel
 4955      00
 4956 154c BFE80300 		movl	$1000, %edi
 4956      00
 4957 1551 E8000000 		call	delay
 4957      00
 4958 1556 488BBC24 		movq	136(%rsp), %rdi
 4958      88000000 
 4959 155e 488D8C24 		leaq	2881(%rsp), %rcx
 4959      410B0000 
 4960 1566 4C8D8424 		leaq	144(%rsp), %r8
 4960      90000000 
 4961 156e BA010000 		movl	$1, %edx
 4961      00
 4962 1573 4489E6   		movl	%r12d, %esi
 4963 1576 E8000000 		call	flWriteChannel
 4963      00
 4964 157b BFE80300 		movl	$1000, %edi
 4964      00
 4965 1580 E8000000 		call	delay
 4965      00
 4966 1585 488BBC24 		movq	136(%rsp), %rdi
 4966      88000000 
 4967 158d 488D8C24 		leaq	2882(%rsp), %rcx
 4967      420B0000 
 4968 1595 4C8D8424 		leaq	144(%rsp), %r8
 4968      90000000 
 4969 159d BA010000 		movl	$1, %edx
 4969      00
 4970 15a2 4489E6   		movl	%r12d, %esi
 4971 15a5 E8000000 		call	flWriteChannel
 4971      00
 4972 15aa BFE80300 		movl	$1000, %edi
 4972      00
 4973 15af E8000000 		call	delay
 4973      00
 4974 15b4 488BBC24 		movq	136(%rsp), %rdi
 4974      88000000 
 4975 15bc 488D8C24 		leaq	2883(%rsp), %rcx
 4975      430B0000 
 4976 15c4 4C8D8424 		leaq	144(%rsp), %r8
 4976      90000000 
 4977 15cc BA010000 		movl	$1, %edx
 4977      00
 4978 15d1 4489E6   		movl	%r12d, %esi
 4979 15d4 E8000000 		call	flWriteChannel
 4979      00
 4980 15d9 85C0     		testl	%eax, %eax
 4981 15db 0F85A21B 		jne	.L639
 4981      0000
 4982 15e1 BA000000 		movl	$.LC162, %edx
 4982      00
 4983 15e6 BE000000 		movl	$.LC26, %esi
 4983      00
 4984 15eb BF010000 		movl	$1, %edi
 4984      00
 4985 15f0 E8000000 		call	__printf_chk
 4985      00
 4986 15f5 BA000000 		movl	$.LC163, %edx
 4986      00
 4987 15fa BE000000 		movl	$.LC26, %esi
 4987      00
 4988 15ff BF010000 		movl	$1, %edi
 4988      00
 4989 1604 31C0     		xorl	%eax, %eax
 4990 1606 E8000000 		call	__printf_chk
 4990      00
 4991 160b BA000000 		movl	$.LC164, %edx
 4991      00
 4992 1610 BE000000 		movl	$.LC26, %esi
 4992      00
 4993 1615 BF010000 		movl	$1, %edi
 4993      00
 4994 161a 31C0     		xorl	%eax, %eax
 4995 161c E8000000 		call	__printf_chk
 4995      00
 4996 1621 BA000000 		movl	$.LC165, %edx
 4996      00
 4997 1626 BE000000 		movl	$.LC26, %esi
 4997      00
 4998 162b BF010000 		movl	$1, %edi
 4998      00
 4999 1630 31C0     		xorl	%eax, %eax
 5000 1632 E8000000 		call	__printf_chk
 5000      00
 5001 1637 BFE80300 		movl	$1000, %edi
 5001      00
 5002 163c E8000000 		call	delay
 5002      00
 5003 1641 488BBC24 		movq	136(%rsp), %rdi
 5003      88000000 
 5004 1649 4C8D8424 		leaq	144(%rsp), %r8
 5004      90000000 
 5005 1651 488D8C24 		leaq	2896(%rsp), %rcx
 5005      500B0000 
 5006 1659 BA010000 		movl	$1, %edx
 5006      00
 5007 165e 4489F6   		movl	%r14d, %esi
 5008 1661 E8000000 		call	flReadChannelAsyncSubmit
 5008      00
 5009 1666 85C0     		testl	%eax, %eax
 5010 1668 0F85151B 		jne	.L639
 5010      0000
 5011 166e 488D8C24 		leaq	132(%rsp), %rcx
 5011      84000000 
 5012 1676 488BBC24 		movq	136(%rsp), %rdi
 5012      88000000 
 5013 167e 4C8D8424 		leaq	144(%rsp), %r8
 5013      90000000 
 5014 1686 488DB424 		leaq	152(%rsp), %rsi
 5014      98000000 
 5015 168e 4889CA   		movq	%rcx, %rdx
 5016 1691 E8000000 		call	flReadChannelAsyncAwait
 5016      00
 5017 1696 85C0     		testl	%eax, %eax
 5018 1698 0F85E51A 		jne	.L639
 5018      0000
 5019 169e 3A9C2450 		cmpb	2896(%rsp), %bl
 5019      0B0000
 5020 16a5 0F84A61A 		je	.L646
 5020      0000
 5021 16ab BFE80300 		movl	$1000, %edi
 5021      00
 5022 16b0 E8000000 		call	delay
 5022      00
 5023 16b5 488BBC24 		movq	136(%rsp), %rdi
 5023      88000000 
 5024 16bd 488D8C24 		leaq	2897(%rsp), %rcx
 5024      510B0000 
 5025 16c5 4C8D8424 		leaq	144(%rsp), %r8
 5025      90000000 
 5026 16cd BA010000 		movl	$1, %edx
 5026      00
 5027 16d2 4489F6   		movl	%r14d, %esi
 5028 16d5 E8000000 		call	flReadChannelAsyncSubmit
 5028      00
 5029 16da 85C0     		testl	%eax, %eax
 5030 16dc 0F85A11A 		jne	.L639
 5030      0000
 5031 16e2 488D8C24 		leaq	132(%rsp), %rcx
 5031      84000000 
 5032 16ea 488BBC24 		movq	136(%rsp), %rdi
 5032      88000000 
 5033 16f2 4C8D8424 		leaq	144(%rsp), %r8
 5033      90000000 
 5034 16fa 488DB424 		leaq	152(%rsp), %rsi
 5034      98000000 
 5035 1702 4889CA   		movq	%rcx, %rdx
 5036 1705 E8000000 		call	flReadChannelAsyncAwait
 5036      00
 5037 170a 85C0     		testl	%eax, %eax
 5038 170c 0F85711A 		jne	.L639
 5038      0000
 5039 1712 3A9C2451 		cmpb	2897(%rsp), %bl
 5039      0B0000
 5040 1719 0F84321A 		je	.L646
 5040      0000
 5041 171f BFE80300 		movl	$1000, %edi
 5041      00
 5042 1724 E8000000 		call	delay
 5042      00
 5043 1729 488BBC24 		movq	136(%rsp), %rdi
 5043      88000000 
 5044 1731 488D8C24 		leaq	2898(%rsp), %rcx
 5044      520B0000 
 5045 1739 4C8D8424 		leaq	144(%rsp), %r8
 5045      90000000 
 5046 1741 BA010000 		movl	$1, %edx
 5046      00
 5047 1746 4489F6   		movl	%r14d, %esi
 5048 1749 E8000000 		call	flReadChannelAsyncSubmit
 5048      00
 5049 174e 85C0     		testl	%eax, %eax
 5050 1750 0F852D1A 		jne	.L639
 5050      0000
 5051 1756 488D8C24 		leaq	132(%rsp), %rcx
 5051      84000000 
 5052 175e 488BBC24 		movq	136(%rsp), %rdi
 5052      88000000 
 5053 1766 4C8D8424 		leaq	144(%rsp), %r8
 5053      90000000 
 5054 176e 488DB424 		leaq	152(%rsp), %rsi
 5054      98000000 
 5055 1776 4889CA   		movq	%rcx, %rdx
 5056 1779 E8000000 		call	flReadChannelAsyncAwait
 5056      00
 5057 177e 85C0     		testl	%eax, %eax
 5058 1780 0F85FD19 		jne	.L639
 5058      0000
 5059 1786 3A9C2452 		cmpb	2898(%rsp), %bl
 5059      0B0000
 5060 178d 0F84BE19 		je	.L646
 5060      0000
 5061 1793 BFE80300 		movl	$1000, %edi
 5061      00
 5062 1798 E8000000 		call	delay
 5062      00
 5063 179d 488BBC24 		movq	136(%rsp), %rdi
 5063      88000000 
 5064 17a5 488D8C24 		leaq	2899(%rsp), %rcx
 5064      530B0000 
 5065 17ad 4C8D8424 		leaq	144(%rsp), %r8
 5065      90000000 
 5066 17b5 BA010000 		movl	$1, %edx
 5066      00
 5067 17ba 4489F6   		movl	%r14d, %esi
 5068 17bd E8000000 		call	flReadChannelAsyncSubmit
 5068      00
 5069 17c2 85C0     		testl	%eax, %eax
 5070 17c4 0F85B919 		jne	.L639
 5070      0000
 5071 17ca 488D8C24 		leaq	132(%rsp), %rcx
 5071      84000000 
 5072 17d2 488BBC24 		movq	136(%rsp), %rdi
 5072      88000000 
 5073 17da 4C8D8424 		leaq	144(%rsp), %r8
 5073      90000000 
 5074 17e2 488DB424 		leaq	152(%rsp), %rsi
 5074      98000000 
 5075 17ea 4889CA   		movq	%rcx, %rdx
 5076 17ed E8000000 		call	flReadChannelAsyncAwait
 5076      00
 5077 17f2 85C0     		testl	%eax, %eax
 5078 17f4 0F858919 		jne	.L639
 5078      0000
 5079 17fa 3A9C2453 		cmpb	2899(%rsp), %bl
 5079      0B0000
 5080 1801 0F844A19 		je	.L646
 5080      0000
 5081 1807 BA000000 		movl	$.LC166, %edx
 5081      00
 5082 180c BE000000 		movl	$.LC26, %esi
 5082      00
 5083 1811 BF010000 		movl	$1, %edi
 5083      00
 5084 1816 31C0     		xorl	%eax, %eax
 5085 1818 31ED     		xorl	%ebp, %ebp
 5086 181a E8000000 		call	__printf_chk
 5086      00
 5087 181f BA000000 		movl	$.LC167, %edx
 5087      00
 5088 1824 BE000000 		movl	$.LC26, %esi
 5088      00
 5089 1829 BF010000 		movl	$1, %edi
 5089      00
 5090 182e 31C0     		xorl	%eax, %eax
 5091 1830 E8000000 		call	__printf_chk
 5091      00
 5092              	.L400:
 5093 1835 0FB6942C 		movzbl	2896(%rsp,%rbp), %edx
 5093      500B0000 
 5094 183d 31C0     		xorl	%eax, %eax
 5095 183f BE000000 		movl	$.LC36, %esi
 5095      00
 5096 1844 BF010000 		movl	$1, %edi
 5096      00
 5097 1849 4883C501 		addq	$1, %rbp
 5098 184d E8000000 		call	__printf_chk
 5098      00
 5099 1852 4883FD04 		cmpq	$4, %rbp
 5100 1856 75DD     		jne	.L400
 5101 1858 BE000000 		movl	$.LC37, %esi
 5101      00
 5102 185d BF010000 		movl	$1, %edi
 5102      00
 5103 1862 31C0     		xorl	%eax, %eax
 5104 1864 E8000000 		call	__printf_chk
 5104      00
 5105 1869 BA000000 		movl	$.LC168, %edx
 5105      00
 5106 186e BE000000 		movl	$.LC26, %esi
 5106      00
 5107 1873 BF010000 		movl	$1, %edi
 5107      00
 5108 1878 31C0     		xorl	%eax, %eax
 5109 187a 31ED     		xorl	%ebp, %ebp
 5110 187c E8000000 		call	__printf_chk
 5110      00
 5111 1881 BA000000 		movl	$.LC169, %edx
 5111      00
 5112 1886 BE000000 		movl	$.LC26, %esi
 5112      00
 5113 188b BF010000 		movl	$1, %edi
 5113      00
 5114 1890 31C0     		xorl	%eax, %eax
 5115 1892 E8000000 		call	__printf_chk
 5115      00
 5116 1897 BA000000 		movl	$.LC170, %edx
 5116      00
 5117 189c BE000000 		movl	$.LC26, %esi
 5117      00
 5118 18a1 BF010000 		movl	$1, %edi
 5118      00
 5119 18a6 31C0     		xorl	%eax, %eax
 5120 18a8 E8000000 		call	__printf_chk
 5120      00
 5121 18ad 488DB424 		leaq	1184(%rsp), %rsi
 5121      A0040000 
 5122 18b5 488DBC24 		leaq	2896(%rsp), %rdi
 5122      500B0000 
 5123 18bd E8000000 		call	uint8ToBin
 5123      00
 5124 18c2 BA000000 		movl	$.LC171, %edx
 5124      00
 5125 18c7 BE000000 		movl	$.LC26, %esi
 5125      00
 5126 18cc BF010000 		movl	$1, %edi
 5126      00
 5127 18d1 31C0     		xorl	%eax, %eax
 5128 18d3 E8000000 		call	__printf_chk
 5128      00
 5129              	.L401:
 5130 18d8 8B942CA0 		movl	1184(%rsp,%rbp), %edx
 5130      040000
 5131 18df 31C0     		xorl	%eax, %eax
 5132 18e1 BE000000 		movl	$.LC36, %esi
 5132      00
 5133 18e6 BF010000 		movl	$1, %edi
 5133      00
 5134 18eb 4883C504 		addq	$4, %rbp
 5135 18ef E8000000 		call	__printf_chk
 5135      00
 5136 18f4 4881FD80 		cmpq	$128, %rbp
 5136      000000
 5137 18fb 75DB     		jne	.L401
 5138 18fd BE000000 		movl	$.LC37, %esi
 5138      00
 5139 1902 BF010000 		movl	$1, %edi
 5139      00
 5140 1907 31C0     		xorl	%eax, %eax
 5141 1909 E8000000 		call	__printf_chk
 5141      00
 5142 190e 488D9424 		leaq	1312(%rsp), %rdx
 5142      20050000 
 5143 1916 488DB424 		leaq	416(%rsp), %rsi
 5143      A0010000 
 5144 191e 488DBC24 		leaq	1184(%rsp), %rdi
 5144      A0040000 
 5145 1926 31ED     		xorl	%ebp, %ebp
 5146 1928 E8000000 		call	decrypter
 5146      00
 5147 192d BA000000 		movl	$.LC172, %edx
 5147      00
 5148 1932 BE000000 		movl	$.LC26, %esi
 5148      00
 5149 1937 BF010000 		movl	$1, %edi
 5149      00
 5150 193c 31C0     		xorl	%eax, %eax
 5151 193e E8000000 		call	__printf_chk
 5151      00
 5152              	.L402:
 5153 1943 8B942C20 		movl	1312(%rsp,%rbp), %edx
 5153      050000
 5154 194a 31C0     		xorl	%eax, %eax
 5155 194c BE000000 		movl	$.LC36, %esi
 5155      00
 5156 1951 BF010000 		movl	$1, %edi
 5156      00
 5157 1956 4883C504 		addq	$4, %rbp
 5158 195a E8000000 		call	__printf_chk
 5158      00
 5159 195f 4881FD80 		cmpq	$128, %rbp
 5159      000000
 5160 1966 75DB     		jne	.L402
 5161 1968 BE000000 		movl	$.LC37, %esi
 5161      00
 5162 196d BF010000 		movl	$1, %edi
 5162      00
 5163 1972 31C0     		xorl	%eax, %eax
 5164 1974 E8000000 		call	__printf_chk
 5164      00
 5165 1979 BA000000 		movl	$.LC173, %edx
 5165      00
 5166 197e BE000000 		movl	$.LC26, %esi
 5166      00
 5167 1983 BF010000 		movl	$1, %edi
 5167      00
 5168 1988 31C0     		xorl	%eax, %eax
 5169 198a 4531FF   		xorl	%r15d, %r15d
 5170 198d E8000000 		call	__printf_chk
 5170      00
 5171 1992 31C0     		xorl	%eax, %eax
 5172 1994 BA010000 		movl	$1, %edx
 5172      00
 5173              	.L403:
 5174 1999 8B8C0420 		movl	544(%rsp,%rax), %ecx
 5174      020000
 5175 19a0 398C0420 		cmpl	%ecx, 1312(%rsp,%rax)
 5175      050000
 5176 19a7 440F45FA 		cmovne	%edx, %r15d
 5177 19ab 4883C004 		addq	$4, %rax
 5178 19af 483D8000 		cmpq	$128, %rax
 5178      0000
 5179 19b5 75E2     		jne	.L403
 5180 19b7 4183FF01 		cmpl	$1, %r15d
 5181 19bb 0F84CC17 		je	.L672
 5181      0000
 5182 19c1 BA000000 		movl	$.LC180, %edx
 5182      00
 5183 19c6 BE000000 		movl	$.LC26, %esi
 5183      00
 5184 19cb BF010000 		movl	$1, %edi
 5184      00
 5185 19d0 31C0     		xorl	%eax, %eax
 5186 19d2 E8000000 		call	__printf_chk
 5186      00
 5187 19d7 BA000000 		movl	$.LC181, %edx
 5187      00
 5188 19dc BE000000 		movl	$.LC26, %esi
 5188      00
 5189 19e1 BF010000 		movl	$1, %edi
 5189      00
 5190 19e6 31C0     		xorl	%eax, %eax
 5191 19e8 E8000000 		call	__printf_chk
 5191      00
 5192              	.L416:
 5193 19ed BA000000 		movl	$.LC183, %edx
 5193      00
 5194 19f2 BE000000 		movl	$.LC26, %esi
 5194      00
 5195 19f7 BF010000 		movl	$1, %edi
 5195      00
 5196 19fc 31C0     		xorl	%eax, %eax
 5197 19fe 31ED     		xorl	%ebp, %ebp
 5198 1a00 E8000000 		call	__printf_chk
 5198      00
 5199 1a05 BA000000 		movl	$.LC184, %edx
 5199      00
 5200 1a0a BE000000 		movl	$.LC26, %esi
 5200      00
 5201 1a0f BF010000 		movl	$1, %edi
 5201      00
 5202 1a14 31C0     		xorl	%eax, %eax
 5203 1a16 E8000000 		call	__printf_chk
 5203      00
 5204 1a1b BA000000 		movl	$.LC185, %edx
 5204      00
 5205 1a20 BE000000 		movl	$.LC26, %esi
 5205      00
 5206 1a25 BF010000 		movl	$1, %edi
 5206      00
 5207 1a2a 31C0     		xorl	%eax, %eax
 5208 1a2c E8000000 		call	__printf_chk
 5208      00
 5209 1a31 488D9424 		leaq	1440(%rsp), %rdx
 5209      A0050000 
 5210 1a39 488DB424 		leaq	416(%rsp), %rsi
 5210      A0010000 
 5211 1a41 488DBC24 		leaq	672(%rsp), %rdi
 5211      A0020000 
 5212 1a49 E8000000 		call	encrypter
 5212      00
 5213 1a4e BA000000 		movl	$.LC186, %edx
 5213      00
 5214 1a53 BE000000 		movl	$.LC26, %esi
 5214      00
 5215 1a58 BF010000 		movl	$1, %edi
 5215      00
 5216 1a5d 31C0     		xorl	%eax, %eax
 5217 1a5f E8000000 		call	__printf_chk
 5217      00
 5218              	.L419:
 5219 1a64 8B942CA0 		movl	1440(%rsp,%rbp), %edx
 5219      050000
 5220 1a6b 31C0     		xorl	%eax, %eax
 5221 1a6d BE000000 		movl	$.LC36, %esi
 5221      00
 5222 1a72 BF010000 		movl	$1, %edi
 5222      00
 5223 1a77 4883C504 		addq	$4, %rbp
 5224 1a7b E8000000 		call	__printf_chk
 5224      00
 5225 1a80 4881FD80 		cmpq	$128, %rbp
 5225      000000
 5226 1a87 75DB     		jne	.L419
 5227 1a89 BE000000 		movl	$.LC37, %esi
 5227      00
 5228 1a8e BF010000 		movl	$1, %edi
 5228      00
 5229 1a93 31C0     		xorl	%eax, %eax
 5230 1a95 E8000000 		call	__printf_chk
 5230      00
 5231 1a9a BA000000 		movl	$.LC187, %edx
 5231      00
 5232 1a9f BE000000 		movl	$.LC26, %esi
 5232      00
 5233 1aa4 BF010000 		movl	$1, %edi
 5233      00
 5234 1aa9 31C0     		xorl	%eax, %eax
 5235 1aab 31ED     		xorl	%ebp, %ebp
 5236 1aad E8000000 		call	__printf_chk
 5236      00
 5237 1ab2 488DB424 		leaq	1440(%rsp), %rsi
 5237      A0050000 
 5238 1aba 488DBC24 		leaq	2912(%rsp), %rdi
 5238      600B0000 
 5239 1ac2 E8000000 		call	BinTouint8
 5239      00
 5240 1ac7 BA000000 		movl	$.LC188, %edx
 5240      00
 5241 1acc BE000000 		movl	$.LC26, %esi
 5241      00
 5242 1ad1 BF010000 		movl	$1, %edi
 5242      00
 5243 1ad6 31C0     		xorl	%eax, %eax
 5244 1ad8 E8000000 		call	__printf_chk
 5244      00
 5245              	.L420:
 5246 1add 0FB6942C 		movzbl	2912(%rsp,%rbp), %edx
 5246      600B0000 
 5247 1ae5 31C0     		xorl	%eax, %eax
 5248 1ae7 BE000000 		movl	$.LC36, %esi
 5248      00
 5249 1aec BF010000 		movl	$1, %edi
 5249      00
 5250 1af1 4883C501 		addq	$1, %rbp
 5251 1af5 E8000000 		call	__printf_chk
 5251      00
 5252 1afa 4883FD04 		cmpq	$4, %rbp
 5253 1afe 75DD     		jne	.L420
 5254 1b00 BE000000 		movl	$.LC37, %esi
 5254      00
 5255 1b05 BF010000 		movl	$1, %edi
 5255      00
 5256 1b0a 31C0     		xorl	%eax, %eax
 5257 1b0c E8000000 		call	__printf_chk
 5257      00
 5258 1b11 BA000000 		movl	$.LC189, %edx
 5258      00
 5259 1b16 BE000000 		movl	$.LC26, %esi
 5259      00
 5260 1b1b BF010000 		movl	$1, %edi
 5260      00
 5261 1b20 31C0     		xorl	%eax, %eax
 5262 1b22 E8000000 		call	__printf_chk
 5262      00
 5263 1b27 BFE80300 		movl	$1000, %edi
 5263      00
 5264 1b2c E8000000 		call	delay
 5264      00
 5265 1b31 488BBC24 		movq	136(%rsp), %rdi
 5265      88000000 
 5266 1b39 4C8D8424 		leaq	144(%rsp), %r8
 5266      90000000 
 5267 1b41 488D8C24 		leaq	2912(%rsp), %rcx
 5267      600B0000 
 5268 1b49 BA010000 		movl	$1, %edx
 5268      00
 5269 1b4e 4489E6   		movl	%r12d, %esi
 5270 1b51 E8000000 		call	flWriteChannel
 5270      00
 5271 1b56 BFE80300 		movl	$1000, %edi
 5271      00
 5272 1b5b E8000000 		call	delay
 5272      00
 5273 1b60 488BBC24 		movq	136(%rsp), %rdi
 5273      88000000 
 5274 1b68 488D8C24 		leaq	2913(%rsp), %rcx
 5274      610B0000 
 5275 1b70 4C8D8424 		leaq	144(%rsp), %r8
 5275      90000000 
 5276 1b78 BA010000 		movl	$1, %edx
 5276      00
 5277 1b7d 4489E6   		movl	%r12d, %esi
 5278 1b80 E8000000 		call	flWriteChannel
 5278      00
 5279 1b85 BFE80300 		movl	$1000, %edi
 5279      00
 5280 1b8a E8000000 		call	delay
 5280      00
 5281 1b8f 488BBC24 		movq	136(%rsp), %rdi
 5281      88000000 
 5282 1b97 488D8C24 		leaq	2914(%rsp), %rcx
 5282      620B0000 
 5283 1b9f 4C8D8424 		leaq	144(%rsp), %r8
 5283      90000000 
 5284 1ba7 BA010000 		movl	$1, %edx
 5284      00
 5285 1bac 4489E6   		movl	%r12d, %esi
 5286 1baf E8000000 		call	flWriteChannel
 5286      00
 5287 1bb4 BFE80300 		movl	$1000, %edi
 5287      00
 5288 1bb9 E8000000 		call	delay
 5288      00
 5289 1bbe 488BBC24 		movq	136(%rsp), %rdi
 5289      88000000 
 5290 1bc6 488D8C24 		leaq	2915(%rsp), %rcx
 5290      630B0000 
 5291 1bce 4C8D8424 		leaq	144(%rsp), %r8
 5291      90000000 
 5292 1bd6 BA010000 		movl	$1, %edx
 5292      00
 5293 1bdb 4489E6   		movl	%r12d, %esi
 5294 1bde E8000000 		call	flWriteChannel
 5294      00
 5295 1be3 85C0     		testl	%eax, %eax
 5296 1be5 0F859815 		jne	.L639
 5296      0000
 5297 1beb BA000000 		movl	$.LC190, %edx
 5297      00
 5298 1bf0 BE000000 		movl	$.LC26, %esi
 5298      00
 5299 1bf5 BF010000 		movl	$1, %edi
 5299      00
 5300 1bfa E8000000 		call	__printf_chk
 5300      00
 5301 1bff BA000000 		movl	$.LC191, %edx
 5301      00
 5302 1c04 BE000000 		movl	$.LC26, %esi
 5302      00
 5303 1c09 BF010000 		movl	$1, %edi
 5303      00
 5304 1c0e 31C0     		xorl	%eax, %eax
 5305 1c10 E8000000 		call	__printf_chk
 5305      00
 5306 1c15 BA000000 		movl	$.LC192, %edx
 5306      00
 5307 1c1a BE000000 		movl	$.LC26, %esi
 5307      00
 5308 1c1f BF010000 		movl	$1, %edi
 5308      00
 5309 1c24 31C0     		xorl	%eax, %eax
 5310 1c26 E8000000 		call	__printf_chk
 5310      00
 5311 1c2b BA000000 		movl	$.LC193, %edx
 5311      00
 5312 1c30 BE000000 		movl	$.LC26, %esi
 5312      00
 5313 1c35 BF010000 		movl	$1, %edi
 5313      00
 5314 1c3a 31C0     		xorl	%eax, %eax
 5315 1c3c E8000000 		call	__printf_chk
 5315      00
 5316 1c41 488D9424 		leaq	1024(%rsp), %rdx
 5316      00040000 
 5317 1c49 31C0     		xorl	%eax, %eax
 5318              	.L421:
 5319 1c4b 8B0C02   		movl	(%rdx,%rax), %ecx
 5320 1c4e 898C04E0 		movl	%ecx, 224(%rsp,%rax)
 5320      000000
 5321 1c55 4883C004 		addq	$4, %rax
 5322 1c59 4883F820 		cmpq	$32, %rax
 5323 1c5d 75EC     		jne	.L421
 5324 1c5f 8B8424E8 		movl	232(%rsp), %eax
 5324      000000
 5325 1c66 8B9424EC 		movl	236(%rsp), %edx
 5325      000000
 5326 1c6d BE000000 		movl	$.LC26, %esi
 5326      00
 5327 1c72 BF010000 		movl	$1, %edi
 5327      00
 5328 1c77 8D1450   		leal	(%rax,%rdx,2), %edx
 5329 1c7a 8B8424E4 		movl	228(%rsp), %eax
 5329      000000
 5330 1c81 8D1450   		leal	(%rax,%rdx,2), %edx
 5331 1c84 8B8424E0 		movl	224(%rsp), %eax
 5331      000000
 5332 1c8b 8D0450   		leal	(%rax,%rdx,2), %eax
 5333 1c8e 8B9424FC 		movl	252(%rsp), %edx
 5333      000000
 5334 1c95 4189C7   		movl	%eax, %r15d
 5335 1c98 89442420 		movl	%eax, 32(%rsp)
 5336 1c9c 8B8424F8 		movl	248(%rsp), %eax
 5336      000000
 5337 1ca3 8D1450   		leal	(%rax,%rdx,2), %edx
 5338 1ca6 8B8424F4 		movl	244(%rsp), %eax
 5338      000000
 5339 1cad 8D1450   		leal	(%rax,%rdx,2), %edx
 5340 1cb0 8B8424F0 		movl	240(%rsp), %eax
 5340      000000
 5341 1cb7 8D0450   		leal	(%rax,%rdx,2), %eax
 5342 1cba BA000000 		movl	$.LC194, %edx
 5342      00
 5343 1cbf 89C5     		movl	%eax, %ebp
 5344 1cc1 31C0     		xorl	%eax, %eax
 5345 1cc3 E8000000 		call	__printf_chk
 5345      00
 5346 1cc8 89E9     		movl	%ebp, %ecx
 5347 1cca 4489FA   		movl	%r15d, %edx
 5348 1ccd BE000000 		movl	$.LC195, %esi
 5348      00
 5349 1cd2 BF010000 		movl	$1, %edi
 5349      00
 5350 1cd7 31C0     		xorl	%eax, %eax
 5351 1cd9 896C2418 		movl	%ebp, 24(%rsp)
 5352 1cdd E8000000 		call	__printf_chk
 5352      00
 5353 1ce2 BE000000 		movl	$.LC37, %esi
 5353      00
 5354 1ce7 BF010000 		movl	$1, %edi
 5354      00
 5355 1cec 31C0     		xorl	%eax, %eax
 5356 1cee E8000000 		call	__printf_chk
 5356      00
 5357 1cf3 BE000000 		movl	$.LC32, %esi
 5357      00
 5358 1cf8 BF000000 		movl	$.LC33, %edi
 5358      00
 5359 1cfd 488DAC24 		leaq	2608(%rsp), %rbp
 5359      300A0000 
 5360 1d05 E8000000 		call	fopen
 5360      00
 5361 1d0a 8B742418 		movl	24(%rsp), %esi
 5362 1d0e 4889C1   		movq	%rax, %rcx
 5363 1d11 4889EA   		movq	%rbp, %rdx
 5364 1d14 4489FF   		movl	%r15d, %edi
 5365 1d17 4989EF   		movq	%rbp, %r15
 5366 1d1a E8000000 		call	print
 5366      00
 5367 1d1f BA000000 		movl	$.LC196, %edx
 5367      00
 5368 1d24 BE000000 		movl	$.LC26, %esi
 5368      00
 5369 1d29 BF010000 		movl	$1, %edi
 5369      00
 5370 1d2e 31C0     		xorl	%eax, %eax
 5371 1d30 E8000000 		call	__printf_chk
 5371      00
 5372 1d35 BA000000 		movl	$.LC197, %edx
 5372      00
 5373 1d3a BE000000 		movl	$.LC26, %esi
 5373      00
 5374 1d3f BF010000 		movl	$1, %edi
 5374      00
 5375 1d44 31C0     		xorl	%eax, %eax
 5376 1d46 E8000000 		call	__printf_chk
 5376      00
 5377 1d4b 488D8500 		leaq	256(%rbp), %rax
 5377      010000
 5378 1d52 4889E9   		movq	%rbp, %rcx
 5379 1d55 4989E8   		movq	%rbp, %r8
 5380 1d58 89DD     		movl	%ebx, %ebp
 5381 1d5a 48894424 		movq	%rax, 16(%rsp)
 5381      10
 5382              	.L422:
 5383 1d5f 31DB     		xorl	%ebx, %ebx
 5384              	.L423:
 5385 1d61 8B1419   		movl	(%rcx,%rbx), %edx
 5386 1d64 31C0     		xorl	%eax, %eax
 5387 1d66 BE000000 		movl	$.LC36, %esi
 5387      00
 5388 1d6b BF010000 		movl	$1, %edi
 5388      00
 5389 1d70 4883C304 		addq	$4, %rbx
 5390 1d74 4C894424 		movq	%r8, 56(%rsp)
 5390      38
 5391 1d79 48894C24 		movq	%rcx, 48(%rsp)
 5391      30
 5392 1d7e E8000000 		call	__printf_chk
 5392      00
 5393 1d83 4883FB20 		cmpq	$32, %rbx
 5394 1d87 488B4C24 		movq	48(%rsp), %rcx
 5394      30
 5395 1d8c 4C8B4424 		movq	56(%rsp), %r8
 5395      38
 5396 1d91 75CE     		jne	.L423
 5397 1d93 4883C120 		addq	$32, %rcx
 5398 1d97 483B4C24 		cmpq	16(%rsp), %rcx
 5398      10
 5399 1d9c 75C1     		jne	.L422
 5400 1d9e BE000000 		movl	$.LC37, %esi
 5400      00
 5401 1da3 BF010000 		movl	$1, %edi
 5401      00
 5402 1da8 31C0     		xorl	%eax, %eax
 5403 1daa 89EB     		movl	%ebp, %ebx
 5404 1dac 4C89C5   		movq	%r8, %rbp
 5405 1daf E8000000 		call	__printf_chk
 5405      00
 5406 1db4 BA000000 		movl	$.LC198, %edx
 5406      00
 5407 1db9 BE000000 		movl	$.LC26, %esi
 5407      00
 5408 1dbe BF010000 		movl	$1, %edi
 5408      00
 5409 1dc3 31C0     		xorl	%eax, %eax
 5410 1dc5 E8000000 		call	__printf_chk
 5410      00
 5411 1dca BA000000 		movl	$.LC199, %edx
 5411      00
 5412 1dcf BE000000 		movl	$.LC26, %esi
 5412      00
 5413 1dd4 BF010000 		movl	$1, %edi
 5413      00
 5414 1dd9 31C0     		xorl	%eax, %eax
 5415 1ddb E8000000 		call	__printf_chk
 5415      00
 5416 1de0 31C0     		xorl	%eax, %eax
 5417              	.L425:
 5418 1de2 C7840420 		movl	$0, 1824(%rsp,%rax)
 5418      07000000 
 5418      000000
 5419 1ded C78404A0 		movl	$0, 1952(%rsp,%rax)
 5419      07000000 
 5419      000000
 5420 1df8 4883C004 		addq	$4, %rax
 5421 1dfc 483D8000 		cmpq	$128, %rax
 5421      0000
 5422 1e02 75DE     		jne	.L425
 5423 1e04 31D2     		xorl	%edx, %edx
 5424              	.L426:
 5425 1e06 31C0     		xorl	%eax, %eax
 5426              	.L427:
 5427 1e08 8D0C02   		leal	(%rdx,%rax), %ecx
 5428 1e0b 418B3487 		movl	(%r15,%rax,4), %esi
 5429 1e0f 4883C001 		addq	$1, %rax
 5430 1e13 4883F808 		cmpq	$8, %rax
 5431 1e17 4863C9   		movslq	%ecx, %rcx
 5432 1e1a 89B48C20 		movl	%esi, 1568(%rsp,%rcx,4)
 5432      060000
 5433 1e21 75E5     		jne	.L427
 5434 1e23 83C208   		addl	$8, %edx
 5435 1e26 4983C720 		addq	$32, %r15
 5436 1e2a 83FA20   		cmpl	$32, %edx
 5437 1e2d 75D7     		jne	.L426
 5438 1e2f 4883ED80 		subq	$-128, %rbp
 5439 1e33 31D2     		xorl	%edx, %edx
 5440              	.L430:
 5441 1e35 31C0     		xorl	%eax, %eax
 5442              	.L429:
 5443 1e37 8D0C02   		leal	(%rdx,%rax), %ecx
 5444 1e3a 8B748500 		movl	0(%rbp,%rax,4), %esi
 5445 1e3e 4883C001 		addq	$1, %rax
 5446 1e42 4883F808 		cmpq	$8, %rax
 5447 1e46 4863C9   		movslq	%ecx, %rcx
 5448 1e49 89B48CA0 		movl	%esi, 1696(%rsp,%rcx,4)
 5448      060000
 5449 1e50 75E5     		jne	.L429
 5450 1e52 83C208   		addl	$8, %edx
 5451 1e55 4883C520 		addq	$32, %rbp
 5452 1e59 83FA20   		cmpl	$32, %edx
 5453 1e5c 75D7     		jne	.L430
 5454 1e5e BA000000 		movl	$.LC200, %edx
 5454      00
 5455 1e63 BE000000 		movl	$.LC26, %esi
 5455      00
 5456 1e68 BF010000 		movl	$1, %edi
 5456      00
 5457 1e6d 31C0     		xorl	%eax, %eax
 5458 1e6f 31ED     		xorl	%ebp, %ebp
 5459 1e71 E8000000 		call	__printf_chk
 5459      00
 5460 1e76 488D9424 		leaq	1824(%rsp), %rdx
 5460      20070000 
 5461 1e7e 488DB424 		leaq	416(%rsp), %rsi
 5461      A0010000 
 5462 1e86 488DBC24 		leaq	1568(%rsp), %rdi
 5462      20060000 
 5463 1e8e E8000000 		call	encrypter
 5463      00
 5464 1e93 BA000000 		movl	$.LC201, %edx
 5464      00
 5465 1e98 BE000000 		movl	$.LC26, %esi
 5465      00
 5466 1e9d BF010000 		movl	$1, %edi
 5466      00
 5467 1ea2 31C0     		xorl	%eax, %eax
 5468 1ea4 E8000000 		call	__printf_chk
 5468      00
 5469              	.L432:
 5470 1ea9 8B942C20 		movl	1824(%rsp,%rbp), %edx
 5470      070000
 5471 1eb0 31C0     		xorl	%eax, %eax
 5472 1eb2 BE000000 		movl	$.LC36, %esi
 5472      00
 5473 1eb7 BF010000 		movl	$1, %edi
 5473      00
 5474 1ebc 4883C504 		addq	$4, %rbp
 5475 1ec0 E8000000 		call	__printf_chk
 5475      00
 5476 1ec5 4881FD80 		cmpq	$128, %rbp
 5476      000000
 5477 1ecc 75DB     		jne	.L432
 5478 1ece BE000000 		movl	$.LC37, %esi
 5478      00
 5479 1ed3 BF010000 		movl	$1, %edi
 5479      00
 5480 1ed8 31C0     		xorl	%eax, %eax
 5481 1eda E8000000 		call	__printf_chk
 5481      00
 5482 1edf BA000000 		movl	$.LC202, %edx
 5482      00
 5483 1ee4 BE000000 		movl	$.LC26, %esi
 5483      00
 5484 1ee9 BF010000 		movl	$1, %edi
 5484      00
 5485 1eee 31C0     		xorl	%eax, %eax
 5486 1ef0 31ED     		xorl	%ebp, %ebp
 5487 1ef2 E8000000 		call	__printf_chk
 5487      00
 5488 1ef7 488DB424 		leaq	1824(%rsp), %rsi
 5488      20070000 
 5489 1eff 488DBC24 		leaq	2928(%rsp), %rdi
 5489      700B0000 
 5490 1f07 E8000000 		call	BinTouint8
 5490      00
 5491 1f0c BA000000 		movl	$.LC203, %edx
 5491      00
 5492 1f11 BE000000 		movl	$.LC26, %esi
 5492      00
 5493 1f16 BF010000 		movl	$1, %edi
 5493      00
 5494 1f1b 31C0     		xorl	%eax, %eax
 5495 1f1d E8000000 		call	__printf_chk
 5495      00
 5496              	.L433:
 5497 1f22 0FB6942C 		movzbl	2928(%rsp,%rbp), %edx
 5497      700B0000 
 5498 1f2a 31C0     		xorl	%eax, %eax
 5499 1f2c BE000000 		movl	$.LC36, %esi
 5499      00
 5500 1f31 BF010000 		movl	$1, %edi
 5500      00
 5501 1f36 4883C501 		addq	$1, %rbp
 5502 1f3a E8000000 		call	__printf_chk
 5502      00
 5503 1f3f 4883FD04 		cmpq	$4, %rbp
 5504 1f43 75DD     		jne	.L433
 5505 1f45 BE000000 		movl	$.LC37, %esi
 5505      00
 5506 1f4a BF010000 		movl	$1, %edi
 5506      00
 5507 1f4f 31C0     		xorl	%eax, %eax
 5508 1f51 E8000000 		call	__printf_chk
 5508      00
 5509 1f56 BA000000 		movl	$.LC204, %edx
 5509      00
 5510 1f5b BE000000 		movl	$.LC26, %esi
 5510      00
 5511 1f60 BF010000 		movl	$1, %edi
 5511      00
 5512 1f65 31C0     		xorl	%eax, %eax
 5513 1f67 E8000000 		call	__printf_chk
 5513      00
 5514 1f6c BFE80300 		movl	$1000, %edi
 5514      00
 5515 1f71 E8000000 		call	delay
 5515      00
 5516 1f76 488BBC24 		movq	136(%rsp), %rdi
 5516      88000000 
 5517 1f7e 4C8D8424 		leaq	144(%rsp), %r8
 5517      90000000 
 5518 1f86 488D8C24 		leaq	2928(%rsp), %rcx
 5518      700B0000 
 5519 1f8e BA010000 		movl	$1, %edx
 5519      00
 5520 1f93 4489E6   		movl	%r12d, %esi
 5521 1f96 E8000000 		call	flWriteChannel
 5521      00
 5522 1f9b BFE80300 		movl	$1000, %edi
 5522      00
 5523 1fa0 E8000000 		call	delay
 5523      00
 5524 1fa5 488BBC24 		movq	136(%rsp), %rdi
 5524      88000000 
 5525 1fad 488D8C24 		leaq	2929(%rsp), %rcx
 5525      710B0000 
 5526 1fb5 4C8D8424 		leaq	144(%rsp), %r8
 5526      90000000 
 5527 1fbd BA010000 		movl	$1, %edx
 5527      00
 5528 1fc2 4489E6   		movl	%r12d, %esi
 5529 1fc5 E8000000 		call	flWriteChannel
 5529      00
 5530 1fca BFE80300 		movl	$1000, %edi
 5530      00
 5531 1fcf E8000000 		call	delay
 5531      00
 5532 1fd4 488BBC24 		movq	136(%rsp), %rdi
 5532      88000000 
 5533 1fdc 488D8C24 		leaq	2930(%rsp), %rcx
 5533      720B0000 
 5534 1fe4 4C8D8424 		leaq	144(%rsp), %r8
 5534      90000000 
 5535 1fec BA010000 		movl	$1, %edx
 5535      00
 5536 1ff1 4489E6   		movl	%r12d, %esi
 5537 1ff4 E8000000 		call	flWriteChannel
 5537      00
 5538 1ff9 BFE80300 		movl	$1000, %edi
 5538      00
 5539 1ffe E8000000 		call	delay
 5539      00
 5540 2003 488BBC24 		movq	136(%rsp), %rdi
 5540      88000000 
 5541 200b 488D8C24 		leaq	2931(%rsp), %rcx
 5541      730B0000 
 5542 2013 4C8D8424 		leaq	144(%rsp), %r8
 5542      90000000 
 5543 201b BA010000 		movl	$1, %edx
 5543      00
 5544 2020 4489E6   		movl	%r12d, %esi
 5545 2023 E8000000 		call	flWriteChannel
 5545      00
 5546 2028 85C0     		testl	%eax, %eax
 5547 202a 0F855311 		jne	.L639
 5547      0000
 5548 2030 BA000000 		movl	$.LC205, %edx
 5548      00
 5549 2035 BE000000 		movl	$.LC26, %esi
 5549      00
 5550 203a BF010000 		movl	$1, %edi
 5550      00
 5551 203f E8000000 		call	__printf_chk
 5551      00
 5552 2044 BA000000 		movl	$.LC206, %edx
 5552      00
 5553 2049 BE000000 		movl	$.LC26, %esi
 5553      00
 5554 204e BF010000 		movl	$1, %edi
 5554      00
 5555 2053 31C0     		xorl	%eax, %eax
 5556 2055 4C8DBC24 		leaq	2977(%rsp), %r15
 5556      A10B0000 
 5557 205d 488DAC24 		leaq	2336(%rsp), %rbp
 5557      20090000 
 5558 2065 E8000000 		call	__printf_chk
 5558      00
 5559 206a BA000000 		movl	$.LC207, %edx
 5559      00
 5560 206f BE000000 		movl	$.LC26, %esi
 5560      00
 5561 2074 BF010000 		movl	$1, %edi
 5561      00
 5562 2079 31C0     		xorl	%eax, %eax
 5563 207b E8000000 		call	__printf_chk
 5563      00
 5564 2080 488DBC24 		leaq	160(%rsp), %rdi
 5564      A0000000 
 5565 2088 E8000000 		call	time
 5565      00
 5566 208d BA000000 		movl	$.LC208, %edx
 5566      00
 5567 2092 BE000000 		movl	$.LC26, %esi
 5567      00
 5568 2097 BF010000 		movl	$1, %edi
 5568      00
 5569 209c 31C0     		xorl	%eax, %eax
 5570 209e E8000000 		call	__printf_chk
 5570      00
 5571              	.L448:
 5572 20a3 488DBC24 		leaq	168(%rsp), %rdi
 5572      A8000000 
 5573 20ab E8000000 		call	time
 5573      00
 5574 20b0 488BB424 		movq	160(%rsp), %rsi
 5574      A0000000 
 5575 20b8 488BBC24 		movq	168(%rsp), %rdi
 5575      A8000000 
 5576 20c0 E8000000 		call	difftime
 5576      00
 5577 20c5 660F2E05 		ucomisd	.LC209(%rip), %xmm0
 5577      00000000 
 5578 20cd 0F878C14 		ja	.L673
 5578      0000
 5579 20d3 BFE80300 		movl	$1000, %edi
 5579      00
 5580 20d8 E8000000 		call	delay
 5580      00
 5581 20dd 488BBC24 		movq	136(%rsp), %rdi
 5581      88000000 
 5582 20e5 4C8D8424 		leaq	144(%rsp), %r8
 5582      90000000 
 5583 20ed 488D8C24 		leaq	2976(%rsp), %rcx
 5583      A00B0000 
 5584 20f5 BA010000 		movl	$1, %edx
 5584      00
 5585 20fa 4489F6   		movl	%r14d, %esi
 5586 20fd E8000000 		call	flReadChannelAsyncSubmit
 5586      00
 5587 2102 85C0     		testl	%eax, %eax
 5588 2104 0F857910 		jne	.L639
 5588      0000
 5589 210a 488D8C24 		leaq	132(%rsp), %rcx
 5589      84000000 
 5590 2112 488BBC24 		movq	136(%rsp), %rdi
 5590      88000000 
 5591 211a 4C8D8424 		leaq	144(%rsp), %r8
 5591      90000000 
 5592 2122 488DB424 		leaq	152(%rsp), %rsi
 5592      98000000 
 5593 212a 4889CA   		movq	%rcx, %rdx
 5594 212d E8000000 		call	flReadChannelAsyncAwait
 5594      00
 5595 2132 85C0     		testl	%eax, %eax
 5596 2134 0F854910 		jne	.L639
 5596      0000
 5597 213a 3A9C24A0 		cmpb	2976(%rsp), %bl
 5597      0B0000
 5598 2141 0F840A10 		je	.L646
 5598      0000
 5599 2147 BFE80300 		movl	$1000, %edi
 5599      00
 5600 214c E8000000 		call	delay
 5600      00
 5601 2151 488BBC24 		movq	136(%rsp), %rdi
 5601      88000000 
 5602 2159 4C8D8424 		leaq	144(%rsp), %r8
 5602      90000000 
 5603 2161 4C89F9   		movq	%r15, %rcx
 5604 2164 BA010000 		movl	$1, %edx
 5604      00
 5605 2169 4489F6   		movl	%r14d, %esi
 5606 216c E8000000 		call	flReadChannelAsyncSubmit
 5606      00
 5607 2171 85C0     		testl	%eax, %eax
 5608 2173 0F850A10 		jne	.L639
 5608      0000
 5609 2179 488D8C24 		leaq	132(%rsp), %rcx
 5609      84000000 
 5610 2181 488BBC24 		movq	136(%rsp), %rdi
 5610      88000000 
 5611 2189 4C8D8424 		leaq	144(%rsp), %r8
 5611      90000000 
 5612 2191 488DB424 		leaq	152(%rsp), %rsi
 5612      98000000 
 5613 2199 4889CA   		movq	%rcx, %rdx
 5614 219c E8000000 		call	flReadChannelAsyncAwait
 5614      00
 5615 21a1 85C0     		testl	%eax, %eax
 5616 21a3 0F85DA0F 		jne	.L639
 5616      0000
 5617 21a9 3A9C24A1 		cmpb	2977(%rsp), %bl
 5617      0B0000
 5618 21b0 0F849B0F 		je	.L646
 5618      0000
 5619 21b6 BFE80300 		movl	$1000, %edi
 5619      00
 5620 21bb E8000000 		call	delay
 5620      00
 5621 21c0 488BBC24 		movq	136(%rsp), %rdi
 5621      88000000 
 5622 21c8 488D8C24 		leaq	2978(%rsp), %rcx
 5622      A20B0000 
 5623 21d0 4C8D8424 		leaq	144(%rsp), %r8
 5623      90000000 
 5624 21d8 BA010000 		movl	$1, %edx
 5624      00
 5625 21dd 4489F6   		movl	%r14d, %esi
 5626 21e0 E8000000 		call	flReadChannelAsyncSubmit
 5626      00
 5627 21e5 85C0     		testl	%eax, %eax
 5628 21e7 0F85960F 		jne	.L639
 5628      0000
 5629 21ed 488D8C24 		leaq	132(%rsp), %rcx
 5629      84000000 
 5630 21f5 488BBC24 		movq	136(%rsp), %rdi
 5630      88000000 
 5631 21fd 4C8D8424 		leaq	144(%rsp), %r8
 5631      90000000 
 5632 2205 488DB424 		leaq	152(%rsp), %rsi
 5632      98000000 
 5633 220d 4889CA   		movq	%rcx, %rdx
 5634 2210 E8000000 		call	flReadChannelAsyncAwait
 5634      00
 5635 2215 85C0     		testl	%eax, %eax
 5636 2217 0F85660F 		jne	.L639
 5636      0000
 5637 221d 3A9C24A2 		cmpb	2978(%rsp), %bl
 5637      0B0000
 5638 2224 0F84270F 		je	.L646
 5638      0000
 5639 222a BFE80300 		movl	$1000, %edi
 5639      00
 5640 222f E8000000 		call	delay
 5640      00
 5641 2234 488BBC24 		movq	136(%rsp), %rdi
 5641      88000000 
 5642 223c 488D8C24 		leaq	2979(%rsp), %rcx
 5642      A30B0000 
 5643 2244 4C8D8424 		leaq	144(%rsp), %r8
 5643      90000000 
 5644 224c BA010000 		movl	$1, %edx
 5644      00
 5645 2251 4489F6   		movl	%r14d, %esi
 5646 2254 E8000000 		call	flReadChannelAsyncSubmit
 5646      00
 5647 2259 85C0     		testl	%eax, %eax
 5648 225b 0F85220F 		jne	.L639
 5648      0000
 5649 2261 488D8C24 		leaq	132(%rsp), %rcx
 5649      84000000 
 5650 2269 488BBC24 		movq	136(%rsp), %rdi
 5650      88000000 
 5651 2271 4C8D8424 		leaq	144(%rsp), %r8
 5651      90000000 
 5652 2279 488DB424 		leaq	152(%rsp), %rsi
 5652      98000000 
 5653 2281 4889CA   		movq	%rcx, %rdx
 5654 2284 E8000000 		call	flReadChannelAsyncAwait
 5654      00
 5655 2289 85C0     		testl	%eax, %eax
 5656 228b 0F85F20E 		jne	.L639
 5656      0000
 5657 2291 3A9C24A3 		cmpb	2979(%rsp), %bl
 5657      0B0000
 5658 2298 0F84B30E 		je	.L646
 5658      0000
 5659 229e BA000000 		movl	$.LC211, %edx
 5659      00
 5660 22a3 BE000000 		movl	$.LC26, %esi
 5660      00
 5661 22a8 BF010000 		movl	$1, %edi
 5661      00
 5662 22ad 31C0     		xorl	%eax, %eax
 5663 22af E8000000 		call	__printf_chk
 5663      00
 5664 22b4 31C9     		xorl	%ecx, %ecx
 5665              	.L442:
 5666 22b6 0FB6940C 		movzbl	2976(%rsp,%rcx), %edx
 5666      A00B0000 
 5667 22be 31C0     		xorl	%eax, %eax
 5668 22c0 BE000000 		movl	$.LC36, %esi
 5668      00
 5669 22c5 BF010000 		movl	$1, %edi
 5669      00
 5670 22ca 48894C24 		movq	%rcx, 16(%rsp)
 5670      10
 5671 22cf E8000000 		call	__printf_chk
 5671      00
 5672 22d4 488B4C24 		movq	16(%rsp), %rcx
 5672      10
 5673 22d9 4883C101 		addq	$1, %rcx
 5674 22dd 4883F904 		cmpq	$4, %rcx
 5675 22e1 75D3     		jne	.L442
 5676 22e3 BE000000 		movl	$.LC37, %esi
 5676      00
 5677 22e8 BF010000 		movl	$1, %edi
 5677      00
 5678 22ed 31C0     		xorl	%eax, %eax
 5679 22ef E8000000 		call	__printf_chk
 5679      00
 5680 22f4 BA000000 		movl	$.LC170, %edx
 5680      00
 5681 22f9 BE000000 		movl	$.LC26, %esi
 5681      00
 5682 22fe BF010000 		movl	$1, %edi
 5682      00
 5683 2303 31C0     		xorl	%eax, %eax
 5684 2305 E8000000 		call	__printf_chk
 5684      00
 5685 230a 488DB424 		leaq	2208(%rsp), %rsi
 5685      A0080000 
 5686 2312 488DBC24 		leaq	2976(%rsp), %rdi
 5686      A00B0000 
 5687 231a E8000000 		call	uint8ToBin
 5687      00
 5688 231f BA000000 		movl	$.LC212, %edx
 5688      00
 5689 2324 BE000000 		movl	$.LC26, %esi
 5689      00
 5690 2329 BF010000 		movl	$1, %edi
 5690      00
 5691 232e 31C0     		xorl	%eax, %eax
 5692 2330 E8000000 		call	__printf_chk
 5692      00
 5693 2335 31C9     		xorl	%ecx, %ecx
 5694              	.L443:
 5695 2337 8B940CA0 		movl	2208(%rsp,%rcx), %edx
 5695      080000
 5696 233e 31C0     		xorl	%eax, %eax
 5697 2340 BE000000 		movl	$.LC36, %esi
 5697      00
 5698 2345 BF010000 		movl	$1, %edi
 5698      00
 5699 234a 48894C24 		movq	%rcx, 16(%rsp)
 5699      10
 5700 234f E8000000 		call	__printf_chk
 5700      00
 5701 2354 488B4C24 		movq	16(%rsp), %rcx
 5701      10
 5702 2359 4883C104 		addq	$4, %rcx
 5703 235d 4881F980 		cmpq	$128, %rcx
 5703      000000
 5704 2364 75D1     		jne	.L443
 5705 2366 BE000000 		movl	$.LC37, %esi
 5705      00
 5706 236b BF010000 		movl	$1, %edi
 5706      00
 5707 2370 31C0     		xorl	%eax, %eax
 5708 2372 E8000000 		call	__printf_chk
 5708      00
 5709 2377 BA000000 		movl	$.LC213, %edx
 5709      00
 5710 237c BE000000 		movl	$.LC26, %esi
 5710      00
 5711 2381 BF010000 		movl	$1, %edi
 5711      00
 5712 2386 31C0     		xorl	%eax, %eax
 5713 2388 E8000000 		call	__printf_chk
 5713      00
 5714 238d 488DB424 		leaq	416(%rsp), %rsi
 5714      A0010000 
 5715 2395 488DBC24 		leaq	2208(%rsp), %rdi
 5715      A0080000 
 5716 239d 4889EA   		movq	%rbp, %rdx
 5717 23a0 E8000000 		call	decrypter
 5717      00
 5718 23a5 BA000000 		movl	$.LC214, %edx
 5718      00
 5719 23aa BE000000 		movl	$.LC26, %esi
 5719      00
 5720 23af BF010000 		movl	$1, %edi
 5720      00
 5721 23b4 31C0     		xorl	%eax, %eax
 5722 23b6 E8000000 		call	__printf_chk
 5722      00
 5723 23bb 31C9     		xorl	%ecx, %ecx
 5724              	.L444:
 5725 23bd 8B540D00 		movl	0(%rbp,%rcx), %edx
 5726 23c1 31C0     		xorl	%eax, %eax
 5727 23c3 BE000000 		movl	$.LC36, %esi
 5727      00
 5728 23c8 BF010000 		movl	$1, %edi
 5728      00
 5729 23cd 48894C24 		movq	%rcx, 16(%rsp)
 5729      10
 5730 23d2 E8000000 		call	__printf_chk
 5730      00
 5731 23d7 488B4C24 		movq	16(%rsp), %rcx
 5731      10
 5732 23dc 4883C104 		addq	$4, %rcx
 5733 23e0 4881F980 		cmpq	$128, %rcx
 5733      000000
 5734 23e7 75D4     		jne	.L444
 5735 23e9 BE000000 		movl	$.LC37, %esi
 5735      00
 5736 23ee BF010000 		movl	$1, %edi
 5736      00
 5737 23f3 31C0     		xorl	%eax, %eax
 5738 23f5 E8000000 		call	__printf_chk
 5738      00
 5739 23fa 31C9     		xorl	%ecx, %ecx
 5740 23fc 31C0     		xorl	%eax, %eax
 5741              	.L446:
 5742 23fe 8BB40C20 		movl	544(%rsp,%rcx), %esi
 5742      020000
 5743 2405 39740D00 		cmpl	%esi, 0(%rbp,%rcx)
 5744 2409 7425     		je	.L445
 5745 240b BA000000 		movl	$.LC215, %edx
 5745      00
 5746 2410 BE000000 		movl	$.LC26, %esi
 5746      00
 5747 2415 BF010000 		movl	$1, %edi
 5747      00
 5748 241a 31C0     		xorl	%eax, %eax
 5749 241c 48894C24 		movq	%rcx, 16(%rsp)
 5749      10
 5750 2421 E8000000 		call	__printf_chk
 5750      00
 5751 2426 488B4C24 		movq	16(%rsp), %rcx
 5751      10
 5752 242b B8010000 		movl	$1, %eax
 5752      00
 5753              	.L445:
 5754 2430 4883C104 		addq	$4, %rcx
 5755 2434 4881F980 		cmpq	$128, %rcx
 5755      000000
 5756 243b 75C1     		jne	.L446
 5757 243d 85C0     		testl	%eax, %eax
 5758 243f 0F855EFC 		jne	.L448
 5758      FFFF
 5759 2445 BA000000 		movl	$.LC246, %edx
 5759      00
 5760 244a BE000000 		movl	$.LC26, %esi
 5760      00
 5761 244f BF010000 		movl	$1, %edi
 5761      00
 5762 2454 31C0     		xorl	%eax, %eax
 5763 2456 4531F6   		xorl	%r14d, %r14d
 5764 2459 E8000000 		call	__printf_chk
 5764      00
 5765 245e BA000000 		movl	$.LC247, %edx
 5765      00
 5766 2463 BE000000 		movl	$.LC26, %esi
 5766      00
 5767 2468 BF010000 		movl	$1, %edi
 5767      00
 5768 246d 31C0     		xorl	%eax, %eax
 5769 246f E8000000 		call	__printf_chk
 5769      00
 5770 2474 488D9424 		leaq	1952(%rsp), %rdx
 5770      A0070000 
 5771 247c 488DB424 		leaq	416(%rsp), %rsi
 5771      A0010000 
 5772 2484 488DBC24 		leaq	1696(%rsp), %rdi
 5772      A0060000 
 5773 248c E8000000 		call	encrypter
 5773      00
 5774 2491 BA000000 		movl	$.LC248, %edx
 5774      00
 5775 2496 BE000000 		movl	$.LC26, %esi
 5775      00
 5776 249b BF010000 		movl	$1, %edi
 5776      00
 5777 24a0 31C0     		xorl	%eax, %eax
 5778 24a2 E8000000 		call	__printf_chk
 5778      00
 5779              	.L449:
 5780 24a7 428B9434 		movl	1952(%rsp,%r14), %edx
 5780      A0070000 
 5781 24af 31C0     		xorl	%eax, %eax
 5782 24b1 BE000000 		movl	$.LC36, %esi
 5782      00
 5783 24b6 BF010000 		movl	$1, %edi
 5783      00
 5784 24bb 4983C604 		addq	$4, %r14
 5785 24bf E8000000 		call	__printf_chk
 5785      00
 5786 24c4 4981FE80 		cmpq	$128, %r14
 5786      000000
 5787 24cb 75DA     		jne	.L449
 5788 24cd BA000000 		movl	$.LC216, %edx
 5788      00
 5789 24d2 BE000000 		movl	$.LC26, %esi
 5789      00
 5790 24d7 BF010000 		movl	$1, %edi
 5790      00
 5791 24dc 31C0     		xorl	%eax, %eax
 5792 24de 4531F6   		xorl	%r14d, %r14d
 5793 24e1 E8000000 		call	__printf_chk
 5793      00
 5794 24e6 488DB424 		leaq	1952(%rsp), %rsi
 5794      A0070000 
 5795 24ee 488DBC24 		leaq	2944(%rsp), %rdi
 5795      800B0000 
 5796 24f6 E8000000 		call	BinTouint8
 5796      00
 5797 24fb BA000000 		movl	$.LC217, %edx
 5797      00
 5798 2500 BE000000 		movl	$.LC26, %esi
 5798      00
 5799 2505 BF010000 		movl	$1, %edi
 5799      00
 5800 250a 31C0     		xorl	%eax, %eax
 5801 250c E8000000 		call	__printf_chk
 5801      00
 5802              	.L450:
 5803 2511 420FB694 		movzbl	2944(%rsp,%r14), %edx
 5803      34800B00 
 5803      00
 5804 251a 31C0     		xorl	%eax, %eax
 5805 251c BE000000 		movl	$.LC36, %esi
 5805      00
 5806 2521 BF010000 		movl	$1, %edi
 5806      00
 5807 2526 4983C601 		addq	$1, %r14
 5808 252a E8000000 		call	__printf_chk
 5808      00
 5809 252f 4983FE04 		cmpq	$4, %r14
 5810 2533 75DC     		jne	.L450
 5811 2535 BE000000 		movl	$.LC37, %esi
 5811      00
 5812 253a BF010000 		movl	$1, %edi
 5812      00
 5813 253f 31C0     		xorl	%eax, %eax
 5814 2541 E8000000 		call	__printf_chk
 5814      00
 5815 2546 BA000000 		movl	$.LC218, %edx
 5815      00
 5816 254b BE000000 		movl	$.LC26, %esi
 5816      00
 5817 2550 BF010000 		movl	$1, %edi
 5817      00
 5818 2555 31C0     		xorl	%eax, %eax
 5819 2557 E8000000 		call	__printf_chk
 5819      00
 5820 255c BFE80300 		movl	$1000, %edi
 5820      00
 5821 2561 E8000000 		call	delay
 5821      00
 5822 2566 488BBC24 		movq	136(%rsp), %rdi
 5822      88000000 
 5823 256e 4C8D8424 		leaq	144(%rsp), %r8
 5823      90000000 
 5824 2576 488D8C24 		leaq	2944(%rsp), %rcx
 5824      800B0000 
 5825 257e BA010000 		movl	$1, %edx
 5825      00
 5826 2583 4489E6   		movl	%r12d, %esi
 5827 2586 E8000000 		call	flWriteChannel
 5827      00
 5828 258b BFE80300 		movl	$1000, %edi
 5828      00
 5829 2590 E8000000 		call	delay
 5829      00
 5830 2595 488BBC24 		movq	136(%rsp), %rdi
 5830      88000000 
 5831 259d 488D8C24 		leaq	2945(%rsp), %rcx
 5831      810B0000 
 5832 25a5 4C8D8424 		leaq	144(%rsp), %r8
 5832      90000000 
 5833 25ad BA010000 		movl	$1, %edx
 5833      00
 5834 25b2 4489E6   		movl	%r12d, %esi
 5835 25b5 E8000000 		call	flWriteChannel
 5835      00
 5836 25ba BFE80300 		movl	$1000, %edi
 5836      00
 5837 25bf E8000000 		call	delay
 5837      00
 5838 25c4 488BBC24 		movq	136(%rsp), %rdi
 5838      88000000 
 5839 25cc 488D8C24 		leaq	2946(%rsp), %rcx
 5839      820B0000 
 5840 25d4 4C8D8424 		leaq	144(%rsp), %r8
 5840      90000000 
 5841 25dc BA010000 		movl	$1, %edx
 5841      00
 5842 25e1 4489E6   		movl	%r12d, %esi
 5843 25e4 E8000000 		call	flWriteChannel
 5843      00
 5844 25e9 BFE80300 		movl	$1000, %edi
 5844      00
 5845 25ee E8000000 		call	delay
 5845      00
 5846 25f3 488BBC24 		movq	136(%rsp), %rdi
 5846      88000000 
 5847 25fb 488D8C24 		leaq	2947(%rsp), %rcx
 5847      830B0000 
 5848 2603 4C8D8424 		leaq	144(%rsp), %r8
 5848      90000000 
 5849 260b BA010000 		movl	$1, %edx
 5849      00
 5850 2610 4489E6   		movl	%r12d, %esi
 5851 2613 E8000000 		call	flWriteChannel
 5851      00
 5852 2618 85C0     		testl	%eax, %eax
 5853 261a 0F85630B 		jne	.L639
 5853      0000
 5854 2620 BA000000 		movl	$.LC219, %edx
 5854      00
 5855 2625 BE000000 		movl	$.LC26, %esi
 5855      00
 5856 262a BF010000 		movl	$1, %edi
 5856      00
 5857 262f E8000000 		call	__printf_chk
 5857      00
 5858 2634 BA000000 		movl	$.LC220, %edx
 5858      00
 5859 2639 BE000000 		movl	$.LC26, %esi
 5859      00
 5860 263e BF010000 		movl	$1, %edi
 5860      00
 5861 2643 31C0     		xorl	%eax, %eax
 5862 2645 4C8DA424 		leaq	2978(%rsp), %r12
 5862      A20B0000 
 5863 264d E8000000 		call	__printf_chk
 5863      00
 5864 2652 488DBC24 		leaq	176(%rsp), %rdi
 5864      B0000000 
 5865 265a E8000000 		call	time
 5865      00
 5866 265f 488D8424 		leaq	184(%rsp), %rax
 5866      B8000000 
 5867 2667 48894424 		movq	%rax, 48(%rsp)
 5867      30
 5868 266c 488D8424 		leaq	2976(%rsp), %rax
 5868      A00B0000 
 5869 2674 4C8D7003 		leaq	3(%rax), %r14
 5870              	.L451:
 5871 2678 488B7C24 		movq	48(%rsp), %rdi
 5871      30
 5872 267d E8000000 		call	time
 5872      00
 5873 2682 488BB424 		movq	176(%rsp), %rsi
 5873      B0000000 
 5874 268a 488BBC24 		movq	184(%rsp), %rdi
 5874      B8000000 
 5875 2692 E8000000 		call	difftime
 5875      00
 5876 2697 660F2E05 		ucomisd	.LC209(%rip), %xmm0
 5876      00000000 
 5877 269f 0F87D90E 		ja	.L674
 5877      0000
 5878 26a5 BFE80300 		movl	$1000, %edi
 5878      00
 5879 26aa 478D7C2D 		leal	(%r13,%r13), %r15d
 5879      00
 5880 26af E8000000 		call	delay
 5880      00
 5881 26b4 488BBC24 		movq	136(%rsp), %rdi
 5881      88000000 
 5882 26bc 410FB6C7 		movzbl	%r15b, %eax
 5883 26c0 4C8D8424 		leaq	144(%rsp), %r8
 5883      90000000 
 5884 26c8 488D8C24 		leaq	2976(%rsp), %rcx
 5884      A00B0000 
 5885 26d0 BA010000 		movl	$1, %edx
 5885      00
 5886 26d5 89C6     		movl	%eax, %esi
 5887 26d7 89442410 		movl	%eax, 16(%rsp)
 5888 26db E8000000 		call	flReadChannelAsyncSubmit
 5888      00
 5889 26e0 85C0     		testl	%eax, %eax
 5890 26e2 0F859B0A 		jne	.L639
 5890      0000
 5891 26e8 488D8C24 		leaq	132(%rsp), %rcx
 5891      84000000 
 5892 26f0 488BBC24 		movq	136(%rsp), %rdi
 5892      88000000 
 5893 26f8 4C8D8424 		leaq	144(%rsp), %r8
 5893      90000000 
 5894 2700 488DB424 		leaq	152(%rsp), %rsi
 5894      98000000 
 5895 2708 4889CA   		movq	%rcx, %rdx
 5896 270b E8000000 		call	flReadChannelAsyncAwait
 5896      00
 5897 2710 85C0     		testl	%eax, %eax
 5898 2712 0F856B0A 		jne	.L639
 5898      0000
 5899 2718 3A9C24A0 		cmpb	2976(%rsp), %bl
 5899      0B0000
 5900 271f 0F842C0A 		je	.L646
 5900      0000
 5901 2725 BFE80300 		movl	$1000, %edi
 5901      00
 5902 272a E8000000 		call	delay
 5902      00
 5903 272f 488B4C24 		movq	40(%rsp), %rcx
 5903      28
 5904 2734 8B742410 		movl	16(%rsp), %esi
 5905 2738 4C8D8424 		leaq	144(%rsp), %r8
 5905      90000000 
 5906 2740 488BBC24 		movq	136(%rsp), %rdi
 5906      88000000 
 5907 2748 BA010000 		movl	$1, %edx
 5907      00
 5908 274d E8000000 		call	flReadChannelAsyncSubmit
 5908      00
 5909 2752 85C0     		testl	%eax, %eax
 5910 2754 0F85290A 		jne	.L639
 5910      0000
 5911 275a 488D8C24 		leaq	132(%rsp), %rcx
 5911      84000000 
 5912 2762 488BBC24 		movq	136(%rsp), %rdi
 5912      88000000 
 5913 276a 4C8D8424 		leaq	144(%rsp), %r8
 5913      90000000 
 5914 2772 488DB424 		leaq	152(%rsp), %rsi
 5914      98000000 
 5915 277a 4889CA   		movq	%rcx, %rdx
 5916 277d E8000000 		call	flReadChannelAsyncAwait
 5916      00
 5917 2782 85C0     		testl	%eax, %eax
 5918 2784 0F85F909 		jne	.L639
 5918      0000
 5919 278a 3A9C24A1 		cmpb	2977(%rsp), %bl
 5919      0B0000
 5920 2791 0F84BA09 		je	.L646
 5920      0000
 5921 2797 BFE80300 		movl	$1000, %edi
 5921      00
 5922 279c E8000000 		call	delay
 5922      00
 5923 27a1 8B742410 		movl	16(%rsp), %esi
 5924 27a5 488BBC24 		movq	136(%rsp), %rdi
 5924      88000000 
 5925 27ad 4C8D8424 		leaq	144(%rsp), %r8
 5925      90000000 
 5926 27b5 4C89E1   		movq	%r12, %rcx
 5927 27b8 BA010000 		movl	$1, %edx
 5927      00
 5928 27bd E8000000 		call	flReadChannelAsyncSubmit
 5928      00
 5929 27c2 85C0     		testl	%eax, %eax
 5930 27c4 0F85B909 		jne	.L639
 5930      0000
 5931 27ca 488D8C24 		leaq	132(%rsp), %rcx
 5931      84000000 
 5932 27d2 488BBC24 		movq	136(%rsp), %rdi
 5932      88000000 
 5933 27da 4C8D8424 		leaq	144(%rsp), %r8
 5933      90000000 
 5934 27e2 488DB424 		leaq	152(%rsp), %rsi
 5934      98000000 
 5935 27ea 4889CA   		movq	%rcx, %rdx
 5936 27ed E8000000 		call	flReadChannelAsyncAwait
 5936      00
 5937 27f2 85C0     		testl	%eax, %eax
 5938 27f4 0F858909 		jne	.L639
 5938      0000
 5939 27fa 3A9C24A2 		cmpb	2978(%rsp), %bl
 5939      0B0000
 5940 2801 0F844A09 		je	.L646
 5940      0000
 5941 2807 BFE80300 		movl	$1000, %edi
 5941      00
 5942 280c E8000000 		call	delay
 5942      00
 5943 2811 8B742410 		movl	16(%rsp), %esi
 5944 2815 488BBC24 		movq	136(%rsp), %rdi
 5944      88000000 
 5945 281d 4C8D8424 		leaq	144(%rsp), %r8
 5945      90000000 
 5946 2825 4C89F1   		movq	%r14, %rcx
 5947 2828 BA010000 		movl	$1, %edx
 5947      00
 5948 282d E8000000 		call	flReadChannelAsyncSubmit
 5948      00
 5949 2832 85C0     		testl	%eax, %eax
 5950 2834 0F854909 		jne	.L639
 5950      0000
 5951 283a 488D8C24 		leaq	132(%rsp), %rcx
 5951      84000000 
 5952 2842 488BBC24 		movq	136(%rsp), %rdi
 5952      88000000 
 5953 284a 4C8D8424 		leaq	144(%rsp), %r8
 5953      90000000 
 5954 2852 488DB424 		leaq	152(%rsp), %rsi
 5954      98000000 
 5955 285a 4889CA   		movq	%rcx, %rdx
 5956 285d E8000000 		call	flReadChannelAsyncAwait
 5956      00
 5957 2862 85C0     		testl	%eax, %eax
 5958 2864 0F851909 		jne	.L639
 5958      0000
 5959 286a 3A9C24A3 		cmpb	2979(%rsp), %bl
 5959      0B0000
 5960 2871 0F84DA08 		je	.L646
 5960      0000
 5961 2877 BA000000 		movl	$.LC211, %edx
 5961      00
 5962 287c BE000000 		movl	$.LC26, %esi
 5962      00
 5963 2881 BF010000 		movl	$1, %edi
 5963      00
 5964 2886 31C0     		xorl	%eax, %eax
 5965 2888 E8000000 		call	__printf_chk
 5965      00
 5966 288d 31C9     		xorl	%ecx, %ecx
 5967              	.L461:
 5968 288f 0FB6940C 		movzbl	2976(%rsp,%rcx), %edx
 5968      A00B0000 
 5969 2897 31C0     		xorl	%eax, %eax
 5970 2899 BE000000 		movl	$.LC36, %esi
 5970      00
 5971 289e BF010000 		movl	$1, %edi
 5971      00
 5972 28a3 48894C24 		movq	%rcx, 56(%rsp)
 5972      38
 5973 28a8 E8000000 		call	__printf_chk
 5973      00
 5974 28ad 488B4C24 		movq	56(%rsp), %rcx
 5974      38
 5975 28b2 4883C101 		addq	$1, %rcx
 5976 28b6 4883F904 		cmpq	$4, %rcx
 5977 28ba 75D3     		jne	.L461
 5978 28bc BE000000 		movl	$.LC37, %esi
 5978      00
 5979 28c1 BF010000 		movl	$1, %edi
 5979      00
 5980 28c6 31C0     		xorl	%eax, %eax
 5981 28c8 E8000000 		call	__printf_chk
 5981      00
 5982 28cd BA000000 		movl	$.LC170, %edx
 5982      00
 5983 28d2 BE000000 		movl	$.LC26, %esi
 5983      00
 5984 28d7 BF010000 		movl	$1, %edi
 5984      00
 5985 28dc 31C0     		xorl	%eax, %eax
 5986 28de E8000000 		call	__printf_chk
 5986      00
 5987 28e3 488DB424 		leaq	2208(%rsp), %rsi
 5987      A0080000 
 5988 28eb 488DBC24 		leaq	2976(%rsp), %rdi
 5988      A00B0000 
 5989 28f3 E8000000 		call	uint8ToBin
 5989      00
 5990 28f8 BA000000 		movl	$.LC212, %edx
 5990      00
 5991 28fd BE000000 		movl	$.LC26, %esi
 5991      00
 5992 2902 BF010000 		movl	$1, %edi
 5992      00
 5993 2907 31C0     		xorl	%eax, %eax
 5994 2909 E8000000 		call	__printf_chk
 5994      00
 5995 290e 31C9     		xorl	%ecx, %ecx
 5996              	.L462:
 5997 2910 8B940CA0 		movl	2208(%rsp,%rcx), %edx
 5997      080000
 5998 2917 31C0     		xorl	%eax, %eax
 5999 2919 BE000000 		movl	$.LC36, %esi
 5999      00
 6000 291e BF010000 		movl	$1, %edi
 6000      00
 6001 2923 48894C24 		movq	%rcx, 56(%rsp)
 6001      38
 6002 2928 E8000000 		call	__printf_chk
 6002      00
 6003 292d 488B4C24 		movq	56(%rsp), %rcx
 6003      38
 6004 2932 4883C104 		addq	$4, %rcx
 6005 2936 4881F980 		cmpq	$128, %rcx
 6005      000000
 6006 293d 75D1     		jne	.L462
 6007 293f BE000000 		movl	$.LC37, %esi
 6007      00
 6008 2944 BF010000 		movl	$1, %edi
 6008      00
 6009 2949 31C0     		xorl	%eax, %eax
 6010 294b E8000000 		call	__printf_chk
 6010      00
 6011 2950 BA000000 		movl	$.LC213, %edx
 6011      00
 6012 2955 BE000000 		movl	$.LC26, %esi
 6012      00
 6013 295a BF010000 		movl	$1, %edi
 6013      00
 6014 295f 31C0     		xorl	%eax, %eax
 6015 2961 E8000000 		call	__printf_chk
 6015      00
 6016 2966 488DB424 		leaq	416(%rsp), %rsi
 6016      A0010000 
 6017 296e 488DBC24 		leaq	2208(%rsp), %rdi
 6017      A0080000 
 6018 2976 4889EA   		movq	%rbp, %rdx
 6019 2979 E8000000 		call	decrypter
 6019      00
 6020 297e BA000000 		movl	$.LC214, %edx
 6020      00
 6021 2983 BE000000 		movl	$.LC26, %esi
 6021      00
 6022 2988 BF010000 		movl	$1, %edi
 6022      00
 6023 298d 31C0     		xorl	%eax, %eax
 6024 298f E8000000 		call	__printf_chk
 6024      00
 6025 2994 31C9     		xorl	%ecx, %ecx
 6026              	.L463:
 6027 2996 8B540D00 		movl	0(%rbp,%rcx), %edx
 6028 299a 31C0     		xorl	%eax, %eax
 6029 299c BE000000 		movl	$.LC36, %esi
 6029      00
 6030 29a1 BF010000 		movl	$1, %edi
 6030      00
 6031 29a6 48894C24 		movq	%rcx, 56(%rsp)
 6031      38
 6032 29ab E8000000 		call	__printf_chk
 6032      00
 6033 29b0 488B4C24 		movq	56(%rsp), %rcx
 6033      38
 6034 29b5 4883C104 		addq	$4, %rcx
 6035 29b9 4881F980 		cmpq	$128, %rcx
 6035      000000
 6036 29c0 75D4     		jne	.L463
 6037 29c2 BE000000 		movl	$.LC37, %esi
 6037      00
 6038 29c7 BF010000 		movl	$1, %edi
 6038      00
 6039 29cc 31C0     		xorl	%eax, %eax
 6040 29ce E8000000 		call	__printf_chk
 6040      00
 6041 29d3 31C9     		xorl	%ecx, %ecx
 6042 29d5 31C0     		xorl	%eax, %eax
 6043              	.L465:
 6044 29d7 8BB40C20 		movl	544(%rsp,%rcx), %esi
 6044      020000
 6045 29de 39740D00 		cmpl	%esi, 0(%rbp,%rcx)
 6046 29e2 7425     		je	.L464
 6047 29e4 BA000000 		movl	$.LC215, %edx
 6047      00
 6048 29e9 BE000000 		movl	$.LC26, %esi
 6048      00
 6049 29ee BF010000 		movl	$1, %edi
 6049      00
 6050 29f3 31C0     		xorl	%eax, %eax
 6051 29f5 48894C24 		movq	%rcx, 56(%rsp)
 6051      38
 6052 29fa E8000000 		call	__printf_chk
 6052      00
 6053 29ff 488B4C24 		movq	56(%rsp), %rcx
 6053      38
 6054 2a04 B8010000 		movl	$1, %eax
 6054      00
 6055              	.L464:
 6056 2a09 4883C104 		addq	$4, %rcx
 6057 2a0d 4881F980 		cmpq	$128, %rcx
 6057      000000
 6058 2a14 75C1     		jne	.L465
 6059 2a16 85C0     		testl	%eax, %eax
 6060 2a18 0F855AFC 		jne	.L451
 6060      FFFF
 6061 2a1e BE000000 		movl	$.LC37, %esi
 6061      00
 6062 2a23 BF010000 		movl	$1, %edi
 6062      00
 6063 2a28 31C0     		xorl	%eax, %eax
 6064 2a2a E8000000 		call	__printf_chk
 6064      00
 6065 2a2f 4C8DA424 		leaq	2080(%rsp), %r12
 6065      20080000 
 6066 2a37 BA000000 		movl	$.LC249, %edx
 6066      00
 6067 2a3c BE000000 		movl	$.LC26, %esi
 6067      00
 6068 2a41 BF010000 		movl	$1, %edi
 6068      00
 6069 2a46 31C0     		xorl	%eax, %eax
 6070 2a48 4531F6   		xorl	%r14d, %r14d
 6071 2a4b E8000000 		call	__printf_chk
 6071      00
 6072 2a50 488DB424 		leaq	416(%rsp), %rsi
 6072      A0010000 
 6073 2a58 488DBC24 		leaq	672(%rsp), %rdi
 6073      A0020000 
 6074 2a60 4C89E2   		movq	%r12, %rdx
 6075 2a63 E8000000 		call	encrypter
 6075      00
 6076 2a68 BA000000 		movl	$.LC250, %edx
 6076      00
 6077 2a6d BE000000 		movl	$.LC26, %esi
 6077      00
 6078 2a72 BF010000 		movl	$1, %edi
 6078      00
 6079 2a77 31C0     		xorl	%eax, %eax
 6080 2a79 E8000000 		call	__printf_chk
 6080      00
 6081              	.L467:
 6082 2a7e 438B1434 		movl	(%r12,%r14), %edx
 6083 2a82 31C0     		xorl	%eax, %eax
 6084 2a84 BE000000 		movl	$.LC36, %esi
 6084      00
 6085 2a89 BF010000 		movl	$1, %edi
 6085      00
 6086 2a8e 4983C604 		addq	$4, %r14
 6087 2a92 E8000000 		call	__printf_chk
 6087      00
 6088 2a97 4981FE80 		cmpq	$128, %r14
 6088      000000
 6089 2a9e 75DE     		jne	.L467
 6090 2aa0 BE000000 		movl	$.LC37, %esi
 6090      00
 6091 2aa5 BF010000 		movl	$1, %edi
 6091      00
 6092 2aaa 31C0     		xorl	%eax, %eax
 6093 2aac E8000000 		call	__printf_chk
 6093      00
 6094 2ab1 BA000000 		movl	$.LC187, %edx
 6094      00
 6095 2ab6 BE000000 		movl	$.LC26, %esi
 6095      00
 6096 2abb BF010000 		movl	$1, %edi
 6096      00
 6097 2ac0 31C0     		xorl	%eax, %eax
 6098 2ac2 4531F6   		xorl	%r14d, %r14d
 6099 2ac5 E8000000 		call	__printf_chk
 6099      00
 6100 2aca 488DBC24 		leaq	2960(%rsp), %rdi
 6100      900B0000 
 6101 2ad2 4C89E6   		movq	%r12, %rsi
 6102 2ad5 E8000000 		call	BinTouint8
 6102      00
 6103 2ada BA000000 		movl	$.LC221, %edx
 6103      00
 6104 2adf BE000000 		movl	$.LC26, %esi
 6104      00
 6105 2ae4 BF010000 		movl	$1, %edi
 6105      00
 6106 2ae9 31C0     		xorl	%eax, %eax
 6107 2aeb E8000000 		call	__printf_chk
 6107      00
 6108              	.L468:
 6109 2af0 420FB694 		movzbl	2960(%rsp,%r14), %edx
 6109      34900B00 
 6109      00
 6110 2af9 31C0     		xorl	%eax, %eax
 6111 2afb BE000000 		movl	$.LC36, %esi
 6111      00
 6112 2b00 BF010000 		movl	$1, %edi
 6112      00
 6113 2b05 4983C601 		addq	$1, %r14
 6114 2b09 E8000000 		call	__printf_chk
 6114      00
 6115 2b0e 4983FE04 		cmpq	$4, %r14
 6116 2b12 75DC     		jne	.L468
 6117 2b14 BE000000 		movl	$.LC37, %esi
 6117      00
 6118 2b19 BF010000 		movl	$1, %edi
 6118      00
 6119 2b1e 31C0     		xorl	%eax, %eax
 6120 2b20 E8000000 		call	__printf_chk
 6120      00
 6121 2b25 BA000000 		movl	$.LC222, %edx
 6121      00
 6122 2b2a BE000000 		movl	$.LC26, %esi
 6122      00
 6123 2b2f BF010000 		movl	$1, %edi
 6123      00
 6124 2b34 31C0     		xorl	%eax, %eax
 6125 2b36 458D7701 		leal	1(%r15), %r14d
 6126 2b3a E8000000 		call	__printf_chk
 6126      00
 6127 2b3f BFE80300 		movl	$1000, %edi
 6127      00
 6128 2b44 450FB6F6 		movzbl	%r14b, %r14d
 6129 2b48 E8000000 		call	delay
 6129      00
 6130 2b4d 488BBC24 		movq	136(%rsp), %rdi
 6130      88000000 
 6131 2b55 4C8D8424 		leaq	144(%rsp), %r8
 6131      90000000 
 6132 2b5d 488D8C24 		leaq	2960(%rsp), %rcx
 6132      900B0000 
 6133 2b65 BA010000 		movl	$1, %edx
 6133      00
 6134 2b6a 4489F6   		movl	%r14d, %esi
 6135 2b6d E8000000 		call	flWriteChannel
 6135      00
 6136 2b72 BFE80300 		movl	$1000, %edi
 6136      00
 6137 2b77 E8000000 		call	delay
 6137      00
 6138 2b7c 488BBC24 		movq	136(%rsp), %rdi
 6138      88000000 
 6139 2b84 488D8C24 		leaq	2961(%rsp), %rcx
 6139      910B0000 
 6140 2b8c 4C8D8424 		leaq	144(%rsp), %r8
 6140      90000000 
 6141 2b94 BA010000 		movl	$1, %edx
 6141      00
 6142 2b99 4489F6   		movl	%r14d, %esi
 6143 2b9c E8000000 		call	flWriteChannel
 6143      00
 6144 2ba1 BFE80300 		movl	$1000, %edi
 6144      00
 6145 2ba6 E8000000 		call	delay
 6145      00
 6146 2bab 488BBC24 		movq	136(%rsp), %rdi
 6146      88000000 
 6147 2bb3 488D8C24 		leaq	2962(%rsp), %rcx
 6147      920B0000 
 6148 2bbb 4C8D8424 		leaq	144(%rsp), %r8
 6148      90000000 
 6149 2bc3 BA010000 		movl	$1, %edx
 6149      00
 6150 2bc8 4489F6   		movl	%r14d, %esi
 6151 2bcb E8000000 		call	flWriteChannel
 6151      00
 6152 2bd0 BFE80300 		movl	$1000, %edi
 6152      00
 6153 2bd5 E8000000 		call	delay
 6153      00
 6154 2bda 488BBC24 		movq	136(%rsp), %rdi
 6154      88000000 
 6155 2be2 488D8C24 		leaq	2963(%rsp), %rcx
 6155      930B0000 
 6156 2bea 4C8D8424 		leaq	144(%rsp), %r8
 6156      90000000 
 6157 2bf2 BA010000 		movl	$1, %edx
 6157      00
 6158 2bf7 4489F6   		movl	%r14d, %esi
 6159 2bfa E8000000 		call	flWriteChannel
 6159      00
 6160 2bff 85C0     		testl	%eax, %eax
 6161 2c01 0F857C05 		jne	.L639
 6161      0000
 6162 2c07 BA000000 		movl	$.LC223, %edx
 6162      00
 6163 2c0c BE000000 		movl	$.LC26, %esi
 6163      00
 6164 2c11 BF010000 		movl	$1, %edi
 6164      00
 6165 2c16 4531F6   		xorl	%r14d, %r14d
 6166 2c19 E8000000 		call	__printf_chk
 6166      00
 6167              	.L469:
 6168 2c1e 420FB694 		movzbl	2960(%rsp,%r14), %edx
 6168      34900B00 
 6168      00
 6169 2c27 31C0     		xorl	%eax, %eax
 6170 2c29 BE000000 		movl	$.LC36, %esi
 6170      00
 6171 2c2e BF010000 		movl	$1, %edi
 6171      00
 6172 2c33 4983C601 		addq	$1, %r14
 6173 2c37 E8000000 		call	__printf_chk
 6173      00
 6174 2c3c 4983FE04 		cmpq	$4, %r14
 6175 2c40 75DC     		jne	.L469
 6176 2c42 BE000000 		movl	$.LC37, %esi
 6176      00
 6177 2c47 BF010000 		movl	$1, %edi
 6177      00
 6178 2c4c 31C0     		xorl	%eax, %eax
 6179 2c4e E8000000 		call	__printf_chk
 6179      00
 6180 2c53 BA000000 		movl	$.LC224, %edx
 6180      00
 6181 2c58 BE000000 		movl	$.LC26, %esi
 6181      00
 6182 2c5d BF010000 		movl	$1, %edi
 6182      00
 6183 2c62 31C0     		xorl	%eax, %eax
 6184 2c64 4531FF   		xorl	%r15d, %r15d
 6185 2c67 E8000000 		call	__printf_chk
 6185      00
 6186 2c6c 488D8424 		leaq	256(%rsp), %rax
 6186      00010000 
 6187 2c74 C7842400 		movl	$0, 256(%rsp)
 6187      01000000 
 6187      000000
 6188 2c7f C7842404 		movl	$1, 260(%rsp)
 6188      01000001 
 6188      000000
 6189 2c8a C7842408 		movl	$1, 264(%rsp)
 6189      01000001 
 6189      000000
 6190 2c95 C784240C 		movl	$1, 268(%rsp)
 6190      01000001 
 6190      000000
 6191 2ca0 B9070000 		movl	$7, %ecx
 6191      00
 6192 2ca5 C7842410 		movl	$1, 272(%rsp)
 6192      01000001 
 6192      000000
 6193 2cb0 C7842414 		movl	$1, 276(%rsp)
 6193      01000001 
 6193      000000
 6194 2cbb C7842418 		movl	$1, 280(%rsp)
 6194      01000001 
 6194      000000
 6195 2cc6 C784241C 		movl	$1, 284(%rsp)
 6195      01000001 
 6195      000000
 6196              	.L470:
 6197 2cd1 8B501C   		movl	28(%rax), %edx
 6198 2cd4 4883E804 		subq	$4, %rax
 6199 2cd8 D3E2     		sall	%cl, %edx
 6200 2cda 83E901   		subl	$1, %ecx
 6201 2cdd 4109D7   		orl	%edx, %r15d
 6202 2ce0 83F9FF   		cmpl	$-1, %ecx
 6203 2ce3 75EC     		jne	.L470
 6204 2ce5 660F6F2D 		movdqa	.LC20(%rip), %xmm5
 6204      00000000 
 6205 2ced 488D8424 		leaq	288(%rsp), %rax
 6205      20010000 
 6206 2cf5 B9070000 		movl	$7, %ecx
 6206      00
 6207 2cfa 4531F6   		xorl	%r14d, %r14d
 6208 2cfd 0F29AC24 		movaps	%xmm5, 288(%rsp)
 6208      20010000 
 6209 2d05 0F29AC24 		movaps	%xmm5, 304(%rsp)
 6209      30010000 
 6210              	.L471:
 6211 2d0d 4883E804 		subq	$4, %rax
 6212 2d11 8B5020   		movl	32(%rax), %edx
 6213 2d14 D3E2     		sall	%cl, %edx
 6214 2d16 83E901   		subl	$1, %ecx
 6215 2d19 4109D6   		orl	%edx, %r14d
 6216 2d1c 83F9FF   		cmpl	$-1, %ecx
 6217 2d1f 75EC     		jne	.L471
 6218              	.L475:
 6219 2d21 BFE80300 		movl	$1000, %edi
 6219      00
 6220 2d26 E8000000 		call	delay
 6220      00
 6221 2d2b 8B742410 		movl	16(%rsp), %esi
 6222 2d2f 488BBC24 		movq	136(%rsp), %rdi
 6222      88000000 
 6223 2d37 4C8D8424 		leaq	144(%rsp), %r8
 6223      90000000 
 6224 2d3f 488D4C24 		leaq	126(%rsp), %rcx
 6224      7E
 6225 2d44 BA010000 		movl	$1, %edx
 6225      00
 6226 2d49 E8000000 		call	flReadChannelAsyncSubmit
 6226      00
 6227 2d4e 85C0     		testl	%eax, %eax
 6228 2d50 0F852D04 		jne	.L639
 6228      0000
 6229 2d56 488D8C24 		leaq	132(%rsp), %rcx
 6229      84000000 
 6230 2d5e 488BBC24 		movq	136(%rsp), %rdi
 6230      88000000 
 6231 2d66 4C8D8424 		leaq	144(%rsp), %r8
 6231      90000000 
 6232 2d6e 488DB424 		leaq	152(%rsp), %rsi
 6232      98000000 
 6233 2d76 4889CA   		movq	%rcx, %rdx
 6234 2d79 E8000000 		call	flReadChannelAsyncAwait
 6234      00
 6235 2d7e 85C0     		testl	%eax, %eax
 6236 2d80 0F85FD03 		jne	.L639
 6236      0000
 6237 2d86 0FB64424 		movzbl	126(%rsp), %eax
 6237      7E
 6238 2d8b 38C3     		cmpb	%al, %bl
 6239 2d8d 0F840A08 		je	.L649
 6239      0000
 6240 2d93 4439F8   		cmpl	%r15d, %eax
 6241 2d96 0F842008 		je	.L675
 6241      0000
 6242 2d9c 4439F0   		cmpl	%r14d, %eax
 6243 2d9f 7580     		jne	.L475
 6244 2da1 BA000000 		movl	$.LC226, %edx
 6244      00
 6245 2da6 BE000000 		movl	$.LC26, %esi
 6245      00
 6246 2dab BF010000 		movl	$1, %edi
 6246      00
 6247 2db0 31C0     		xorl	%eax, %eax
 6248 2db2 E8000000 		call	__printf_chk
 6248      00
 6249 2db7 BA000000 		movl	$.LC227, %edx
 6249      00
 6250 2dbc BE000000 		movl	$.LC26, %esi
 6250      00
 6251 2dc1 BF010000 		movl	$1, %edi
 6251      00
 6252 2dc6 31C0     		xorl	%eax, %eax
 6253 2dc8 E8000000 		call	__printf_chk
 6253      00
 6254 2dcd BFE80300 		movl	$1000, %edi
 6254      00
 6255 2dd2 E8000000 		call	delay
 6255      00
 6256 2dd7 8B742410 		movl	16(%rsp), %esi
 6257 2ddb 488BBC24 		movq	136(%rsp), %rdi
 6257      88000000 
 6258 2de3 4C8D8424 		leaq	144(%rsp), %r8
 6258      90000000 
 6259 2deb 488D8C24 		leaq	2976(%rsp), %rcx
 6259      A00B0000 
 6260 2df3 BA010000 		movl	$1, %edx
 6260      00
 6261 2df8 E8000000 		call	flReadChannelAsyncSubmit
 6261      00
 6262 2dfd 85C0     		testl	%eax, %eax
 6263 2dff 0F857E03 		jne	.L639
 6263      0000
 6264 2e05 488D8C24 		leaq	132(%rsp), %rcx
 6264      84000000 
 6265 2e0d 488BBC24 		movq	136(%rsp), %rdi
 6265      88000000 
 6266 2e15 4C8D8424 		leaq	144(%rsp), %r8
 6266      90000000 
 6267 2e1d 488DB424 		leaq	152(%rsp), %rsi
 6267      98000000 
 6268 2e25 4889CA   		movq	%rcx, %rdx
 6269 2e28 E8000000 		call	flReadChannelAsyncAwait
 6269      00
 6270 2e2d 85C0     		testl	%eax, %eax
 6271 2e2f 0F854E03 		jne	.L639
 6271      0000
 6272 2e35 3A9C24A0 		cmpb	2976(%rsp), %bl
 6272      0B0000
 6273 2e3c 0F840F03 		je	.L646
 6273      0000
 6274 2e42 BFE80300 		movl	$1000, %edi
 6274      00
 6275 2e47 E8000000 		call	delay
 6275      00
 6276 2e4c 488B4C24 		movq	40(%rsp), %rcx
 6276      28
 6277 2e51 8B742410 		movl	16(%rsp), %esi
 6278 2e55 4C8D8424 		leaq	144(%rsp), %r8
 6278      90000000 
 6279 2e5d 488BBC24 		movq	136(%rsp), %rdi
 6279      88000000 
 6280 2e65 BA010000 		movl	$1, %edx
 6280      00
 6281 2e6a E8000000 		call	flReadChannelAsyncSubmit
 6281      00
 6282 2e6f 85C0     		testl	%eax, %eax
 6283 2e71 0F850C03 		jne	.L639
 6283      0000
 6284 2e77 488D8C24 		leaq	132(%rsp), %rcx
 6284      84000000 
 6285 2e7f 488BBC24 		movq	136(%rsp), %rdi
 6285      88000000 
 6286 2e87 4C8D8424 		leaq	144(%rsp), %r8
 6286      90000000 
 6287 2e8f 488DB424 		leaq	152(%rsp), %rsi
 6287      98000000 
 6288 2e97 4889CA   		movq	%rcx, %rdx
 6289 2e9a E8000000 		call	flReadChannelAsyncAwait
 6289      00
 6290 2e9f 85C0     		testl	%eax, %eax
 6291 2ea1 0F85DC02 		jne	.L639
 6291      0000
 6292 2ea7 3A9C24A1 		cmpb	2977(%rsp), %bl
 6292      0B0000
 6293 2eae 0F849D02 		je	.L646
 6293      0000
 6294 2eb4 BFE80300 		movl	$1000, %edi
 6294      00
 6295 2eb9 E8000000 		call	delay
 6295      00
 6296 2ebe 8B742410 		movl	16(%rsp), %esi
 6297 2ec2 488BBC24 		movq	136(%rsp), %rdi
 6297      88000000 
 6298 2eca 488D8C24 		leaq	2978(%rsp), %rcx
 6298      A20B0000 
 6299 2ed2 4C8D8424 		leaq	144(%rsp), %r8
 6299      90000000 
 6300 2eda BA010000 		movl	$1, %edx
 6300      00
 6301 2edf E8000000 		call	flReadChannelAsyncSubmit
 6301      00
 6302 2ee4 85C0     		testl	%eax, %eax
 6303 2ee6 0F859702 		jne	.L639
 6303      0000
 6304 2eec 488D8C24 		leaq	132(%rsp), %rcx
 6304      84000000 
 6305 2ef4 488BBC24 		movq	136(%rsp), %rdi
 6305      88000000 
 6306 2efc 4C8D8424 		leaq	144(%rsp), %r8
 6306      90000000 
 6307 2f04 488DB424 		leaq	152(%rsp), %rsi
 6307      98000000 
 6308 2f0c 4889CA   		movq	%rcx, %rdx
 6309 2f0f E8000000 		call	flReadChannelAsyncAwait
 6309      00
 6310 2f14 85C0     		testl	%eax, %eax
 6311 2f16 0F856702 		jne	.L639
 6311      0000
 6312 2f1c 3A9C24A2 		cmpb	2978(%rsp), %bl
 6312      0B0000
 6313 2f23 0F842802 		je	.L646
 6313      0000
 6314 2f29 BFE80300 		movl	$1000, %edi
 6314      00
 6315 2f2e E8000000 		call	delay
 6315      00
 6316 2f33 8B742410 		movl	16(%rsp), %esi
 6317 2f37 488BBC24 		movq	136(%rsp), %rdi
 6317      88000000 
 6318 2f3f 488D8C24 		leaq	2979(%rsp), %rcx
 6318      A30B0000 
 6319 2f47 4C8D8424 		leaq	144(%rsp), %r8
 6319      90000000 
 6320 2f4f BA010000 		movl	$1, %edx
 6320      00
 6321 2f54 E8000000 		call	flReadChannelAsyncSubmit
 6321      00
 6322 2f59 85C0     		testl	%eax, %eax
 6323 2f5b 0F852202 		jne	.L639
 6323      0000
 6324 2f61 488D8C24 		leaq	132(%rsp), %rcx
 6324      84000000 
 6325 2f69 488BBC24 		movq	136(%rsp), %rdi
 6325      88000000 
 6326 2f71 4C8D8424 		leaq	144(%rsp), %r8
 6326      90000000 
 6327 2f79 488DB424 		leaq	152(%rsp), %rsi
 6327      98000000 
 6328 2f81 4889CA   		movq	%rcx, %rdx
 6329 2f84 E8000000 		call	flReadChannelAsyncAwait
 6329      00
 6330 2f89 85C0     		testl	%eax, %eax
 6331 2f8b 0F85F201 		jne	.L639
 6331      0000
 6332 2f91 3A9C24A3 		cmpb	2979(%rsp), %bl
 6332      0B0000
 6333 2f98 0F84B301 		je	.L646
 6333      0000
 6334 2f9e 4C8DBC24 		leaq	2976(%rsp), %r15
 6334      A00B0000 
 6335 2fa6 4C8DB424 		leaq	2972(%rsp), %r14
 6335      9C0B0000 
 6336 2fae BA000000 		movl	$.LC228, %edx
 6336      00
 6337 2fb3 BE000000 		movl	$.LC26, %esi
 6337      00
 6338 2fb8 BF010000 		movl	$1, %edi
 6338      00
 6339 2fbd 31C0     		xorl	%eax, %eax
 6340 2fbf E8000000 		call	__printf_chk
 6340      00
 6341              	.L482:
 6342 2fc4 410FB657 		movzbl	3(%r15), %edx
 6342      03
 6343 2fc9 31C0     		xorl	%eax, %eax
 6344 2fcb BE000000 		movl	$.LC36, %esi
 6344      00
 6345 2fd0 BF010000 		movl	$1, %edi
 6345      00
 6346 2fd5 4983EF01 		subq	$1, %r15
 6347 2fd9 E8000000 		call	__printf_chk
 6347      00
 6348 2fde 4D39F7   		cmpq	%r14, %r15
 6349 2fe1 75E1     		jne	.L482
 6350 2fe3 BE000000 		movl	$.LC37, %esi
 6350      00
 6351 2fe8 BF010000 		movl	$1, %edi
 6351      00
 6352 2fed 31C0     		xorl	%eax, %eax
 6353 2fef E8000000 		call	__printf_chk
 6353      00
 6354 2ff4 BA000000 		movl	$.LC229, %edx
 6354      00
 6355 2ff9 BE000000 		movl	$.LC26, %esi
 6355      00
 6356 2ffe BF010000 		movl	$1, %edi
 6356      00
 6357 3003 31C0     		xorl	%eax, %eax
 6358 3005 4C8DB424 		leaq	2208(%rsp), %r14
 6358      A0080000 
 6359 300d E8000000 		call	__printf_chk
 6359      00
 6360 3012 488DB424 		leaq	2208(%rsp), %rsi
 6360      A0080000 
 6361 301a 488DBC24 		leaq	2976(%rsp), %rdi
 6361      A00B0000 
 6362 3022 E8000000 		call	uint8ToBin
 6362      00
 6363 3027 BA000000 		movl	$.LC230, %edx
 6363      00
 6364 302c BE000000 		movl	$.LC26, %esi
 6364      00
 6365 3031 BF010000 		movl	$1, %edi
 6365      00
 6366 3036 31C0     		xorl	%eax, %eax
 6367 3038 E8000000 		call	__printf_chk
 6367      00
 6368              	.L483:
 6369 303d 418B567C 		movl	124(%r14), %edx
 6370 3041 31C0     		xorl	%eax, %eax
 6371 3043 BE000000 		movl	$.LC36, %esi
 6371      00
 6372 3048 BF010000 		movl	$1, %edi
 6372      00
 6373 304d 4983EE04 		subq	$4, %r14
 6374 3051 E8000000 		call	__printf_chk
 6374      00
 6375 3056 4D39E6   		cmpq	%r12, %r14
 6376 3059 75E2     		jne	.L483
 6377 305b BE000000 		movl	$.LC37, %esi
 6377      00
 6378 3060 BF010000 		movl	$1, %edi
 6378      00
 6379 3065 31C0     		xorl	%eax, %eax
 6380 3067 E8000000 		call	__printf_chk
 6380      00
 6381 306c BA000000 		movl	$.LC231, %edx
 6381      00
 6382 3071 BE000000 		movl	$.LC26, %esi
 6382      00
 6383 3076 BF010000 		movl	$1, %edi
 6383      00
 6384 307b 31C0     		xorl	%eax, %eax
 6385 307d 4C8DA424 		leaq	2208(%rsp), %r12
 6385      A0080000 
 6386 3085 4989EE   		movq	%rbp, %r14
 6387 3088 E8000000 		call	__printf_chk
 6387      00
 6388 308d 488DB424 		leaq	416(%rsp), %rsi
 6388      A0010000 
 6389 3095 488DBC24 		leaq	2208(%rsp), %rdi
 6389      A0080000 
 6390 309d 4889EA   		movq	%rbp, %rdx
 6391 30a0 E8000000 		call	decrypter
 6391      00
 6392 30a5 BA000000 		movl	$.LC232, %edx
 6392      00
 6393 30aa BE000000 		movl	$.LC26, %esi
 6393      00
 6394 30af BF010000 		movl	$1, %edi
 6394      00
 6395 30b4 31C0     		xorl	%eax, %eax
 6396 30b6 E8000000 		call	__printf_chk
 6396      00
 6397              	.L484:
 6398 30bb 418B567C 		movl	124(%r14), %edx
 6399 30bf 31C0     		xorl	%eax, %eax
 6400 30c1 BE000000 		movl	$.LC36, %esi
 6400      00
 6401 30c6 BF010000 		movl	$1, %edi
 6401      00
 6402 30cb 4983EE04 		subq	$4, %r14
 6403 30cf E8000000 		call	__printf_chk
 6403      00
 6404 30d4 4D39F4   		cmpq	%r14, %r12
 6405 30d7 75E2     		jne	.L484
 6406 30d9 BE000000 		movl	$.LC37, %esi
 6406      00
 6407 30de BF010000 		movl	$1, %edi
 6407      00
 6408 30e3 31C0     		xorl	%eax, %eax
 6409 30e5 E8000000 		call	__printf_chk
 6409      00
 6410 30ea BA000000 		movl	$.LC233, %edx
 6410      00
 6411 30ef BE000000 		movl	$.LC26, %esi
 6411      00
 6412 30f4 BF010000 		movl	$1, %edi
 6412      00
 6413 30f9 31C0     		xorl	%eax, %eax
 6414 30fb E8000000 		call	__printf_chk
 6414      00
 6415 3100 31C0     		xorl	%eax, %eax
 6416              	.L485:
 6417 3102 8B540500 		movl	0(%rbp,%rax), %edx
 6418 3106 89940440 		movl	%edx, 320(%rsp,%rax)
 6418      010000
 6419 310d 4883C004 		addq	$4, %rax
 6420 3111 4883F820 		cmpq	$32, %rax
 6421 3115 75EB     		jne	.L485
 6422 3117 41BC0100 		movl	$1, %r12d
 6422      0000
 6423 311d E9B30400 		jmp	.L474
 6423      00
 6424              	.L497:
 6425 3122 BD0B0000 		movl	$11, %ebp
 6425      00
 6426 3127 E9FED6FF 		jmp	.L367
 6426      FF
 6427              	.L384:
 6428 312c 488B3D00 		movq	stderr(%rip), %rdi
 6428      000000
 6429 3133 4C89E9   		movq	%r13, %rcx
 6430 3136 BA000000 		movl	$.LC137, %edx
 6430      00
 6431 313b BE010000 		movl	$1, %esi
 6431      00
 6432 3140 31C0     		xorl	%eax, %eax
 6433 3142 BD0C0000 		movl	$12, %ebp
 6433      00
 6434 3147 E8000000 		call	__fprintf_chk
 6434      00
 6435 314c E9B1D1FF 		jmp	.L322
 6435      FF
 6436              	.L646:
 6437 3151 BA000000 		movl	$.LC151, %edx
 6437      00
 6438 3156 BE000000 		movl	$.LC26, %esi
 6438      00
 6439 315b BF010000 		movl	$1, %edi
 6439      00
 6440 3160 4183ED01 		subl	$1, %r13d
 6441 3164 E8000000 		call	__printf_chk
 6441      00
 6442              	.L388:
 6443 3169 4183C501 		addl	$1, %r13d
 6444 316d 4183FD3F 		cmpl	$63, %r13d
 6445 3171 0F8E48DF 		jle	.L491
 6445      FFFF
 6446 3177 4C8B6424 		movq	8(%rsp), %r12
 6446      08
 6447 317c 31ED     		xorl	%ebp, %ebp
 6448 317e E97FD1FF 		jmp	.L322
 6448      FF
 6449              	.L639:
 6450 3183 4C8B6424 		movq	8(%rsp), %r12
 6450      08
 6451 3188 E92DD7FF 		jmp	.L650
 6451      FF
 6452              	.L672:
 6453 318d BA000000 		movl	$.LC174, %edx
 6453      00
 6454 3192 BE000000 		movl	$.LC26, %esi
 6454      00
 6455 3197 BF010000 		movl	$1, %edi
 6455      00
 6456 319c 31C0     		xorl	%eax, %eax
 6457 319e E8000000 		call	__printf_chk
 6457      00
 6458 31a3 BF40420F 		movl	$1000000, %edi
 6458      00
 6459 31a8 E8000000 		call	delay
 6459      00
 6460 31ad BA000000 		movl	$.LC175, %edx
 6460      00
 6461 31b2 BE000000 		movl	$.LC26, %esi
 6461      00
 6462 31b7 BF010000 		movl	$1, %edi
 6462      00
 6463 31bc 31C0     		xorl	%eax, %eax
 6464 31be E8000000 		call	__printf_chk
 6464      00
 6465 31c3 BFE80300 		movl	$1000, %edi
 6465      00
 6466 31c8 E8000000 		call	delay
 6466      00
 6467 31cd 488BBC24 		movq	136(%rsp), %rdi
 6467      88000000 
 6468 31d5 4C8D8424 		leaq	144(%rsp), %r8
 6468      90000000 
 6469 31dd 488D8C24 		leaq	2976(%rsp), %rcx
 6469      A00B0000 
 6470 31e5 BA010000 		movl	$1, %edx
 6470      00
 6471 31ea 4489F6   		movl	%r14d, %esi
 6472 31ed E8000000 		call	flReadChannelAsyncSubmit
 6472      00
 6473 31f2 85C0     		testl	%eax, %eax
 6474 31f4 758D     		jne	.L639
 6475 31f6 488D8C24 		leaq	132(%rsp), %rcx
 6475      84000000 
 6476 31fe 488BBC24 		movq	136(%rsp), %rdi
 6476      88000000 
 6477 3206 4C8D8424 		leaq	144(%rsp), %r8
 6477      90000000 
 6478 320e 488DB424 		leaq	152(%rsp), %rsi
 6478      98000000 
 6479 3216 4889CA   		movq	%rcx, %rdx
 6480 3219 E8000000 		call	flReadChannelAsyncAwait
 6480      00
 6481 321e 85C0     		testl	%eax, %eax
 6482 3220 0F855DFF 		jne	.L639
 6482      FFFF
 6483 3226 3A9C24A0 		cmpb	2976(%rsp), %bl
 6483      0B0000
 6484 322d 0F841EFF 		je	.L646
 6484      FFFF
 6485 3233 BFE80300 		movl	$1000, %edi
 6485      00
 6486 3238 E8000000 		call	delay
 6486      00
 6487 323d 488BBC24 		movq	136(%rsp), %rdi
 6487      88000000 
 6488 3245 488D8C24 		leaq	2977(%rsp), %rcx
 6488      A10B0000 
 6489 324d 4C8D8424 		leaq	144(%rsp), %r8
 6489      90000000 
 6490 3255 BA010000 		movl	$1, %edx
 6490      00
 6491 325a 4489F6   		movl	%r14d, %esi
 6492 325d E8000000 		call	flReadChannelAsyncSubmit
 6492      00
 6493 3262 85C0     		testl	%eax, %eax
 6494 3264 0F8519FF 		jne	.L639
 6494      FFFF
 6495 326a 488D8C24 		leaq	132(%rsp), %rcx
 6495      84000000 
 6496 3272 488BBC24 		movq	136(%rsp), %rdi
 6496      88000000 
 6497 327a 4C8D8424 		leaq	144(%rsp), %r8
 6497      90000000 
 6498 3282 488DB424 		leaq	152(%rsp), %rsi
 6498      98000000 
 6499 328a 4889CA   		movq	%rcx, %rdx
 6500 328d E8000000 		call	flReadChannelAsyncAwait
 6500      00
 6501 3292 85C0     		testl	%eax, %eax
 6502 3294 0F85E9FE 		jne	.L639
 6502      FFFF
 6503 329a 3A9C24A1 		cmpb	2977(%rsp), %bl
 6503      0B0000
 6504 32a1 0F84AAFE 		je	.L646
 6504      FFFF
 6505 32a7 BFE80300 		movl	$1000, %edi
 6505      00
 6506 32ac E8000000 		call	delay
 6506      00
 6507 32b1 488BBC24 		movq	136(%rsp), %rdi
 6507      88000000 
 6508 32b9 488D8C24 		leaq	2978(%rsp), %rcx
 6508      A20B0000 
 6509 32c1 4C8D8424 		leaq	144(%rsp), %r8
 6509      90000000 
 6510 32c9 BA010000 		movl	$1, %edx
 6510      00
 6511 32ce 4489F6   		movl	%r14d, %esi
 6512 32d1 E8000000 		call	flReadChannelAsyncSubmit
 6512      00
 6513 32d6 85C0     		testl	%eax, %eax
 6514 32d8 0F85A5FE 		jne	.L639
 6514      FFFF
 6515 32de 488D8C24 		leaq	132(%rsp), %rcx
 6515      84000000 
 6516 32e6 488BBC24 		movq	136(%rsp), %rdi
 6516      88000000 
 6517 32ee 4C8D8424 		leaq	144(%rsp), %r8
 6517      90000000 
 6518 32f6 488DB424 		leaq	152(%rsp), %rsi
 6518      98000000 
 6519 32fe 4889CA   		movq	%rcx, %rdx
 6520 3301 E8000000 		call	flReadChannelAsyncAwait
 6520      00
 6521 3306 85C0     		testl	%eax, %eax
 6522 3308 0F8575FE 		jne	.L639
 6522      FFFF
 6523 330e 3A9C24A2 		cmpb	2978(%rsp), %bl
 6523      0B0000
 6524 3315 0F8436FE 		je	.L646
 6524      FFFF
 6525 331b BFE80300 		movl	$1000, %edi
 6525      00
 6526 3320 E8000000 		call	delay
 6526      00
 6527 3325 488BBC24 		movq	136(%rsp), %rdi
 6527      88000000 
 6528 332d 488D8C24 		leaq	2979(%rsp), %rcx
 6528      A30B0000 
 6529 3335 4C8D8424 		leaq	144(%rsp), %r8
 6529      90000000 
 6530 333d BA010000 		movl	$1, %edx
 6530      00
 6531 3342 4489F6   		movl	%r14d, %esi
 6532 3345 E8000000 		call	flReadChannelAsyncSubmit
 6532      00
 6533 334a 85C0     		testl	%eax, %eax
 6534 334c 0F8531FE 		jne	.L639
 6534      FFFF
 6535 3352 488D8C24 		leaq	132(%rsp), %rcx
 6535      84000000 
 6536 335a 488BBC24 		movq	136(%rsp), %rdi
 6536      88000000 
 6537 3362 4C8D8424 		leaq	144(%rsp), %r8
 6537      90000000 
 6538 336a 488DB424 		leaq	152(%rsp), %rsi
 6538      98000000 
 6539 3372 4889CA   		movq	%rcx, %rdx
 6540 3375 E8000000 		call	flReadChannelAsyncAwait
 6540      00
 6541 337a 85C0     		testl	%eax, %eax
 6542 337c 0F8501FE 		jne	.L639
 6542      FFFF
 6543 3382 3A9C24A3 		cmpb	2979(%rsp), %bl
 6543      0B0000
 6544 3389 0F84C2FD 		je	.L646
 6544      FFFF
 6545 338f BA000000 		movl	$.LC176, %edx
 6545      00
 6546 3394 BE000000 		movl	$.LC26, %esi
 6546      00
 6547 3399 BF010000 		movl	$1, %edi
 6547      00
 6548 339e 31C0     		xorl	%eax, %eax
 6549 33a0 31ED     		xorl	%ebp, %ebp
 6550 33a2 E8000000 		call	__printf_chk
 6550      00
 6551              	.L411:
 6552 33a7 0FB6942C 		movzbl	2976(%rsp,%rbp), %edx
 6552      A00B0000 
 6553 33af 31C0     		xorl	%eax, %eax
 6554 33b1 BE000000 		movl	$.LC36, %esi
 6554      00
 6555 33b6 BF010000 		movl	$1, %edi
 6555      00
 6556 33bb 4883C501 		addq	$1, %rbp
 6557 33bf E8000000 		call	__printf_chk
 6557      00
 6558 33c4 4883FD04 		cmpq	$4, %rbp
 6559 33c8 75DD     		jne	.L411
 6560 33ca BE000000 		movl	$.LC37, %esi
 6560      00
 6561 33cf BF010000 		movl	$1, %edi
 6561      00
 6562 33d4 31C0     		xorl	%eax, %eax
 6563 33d6 E8000000 		call	__printf_chk
 6563      00
 6564 33db BA000000 		movl	$.LC170, %edx
 6564      00
 6565 33e0 BE000000 		movl	$.LC26, %esi
 6565      00
 6566 33e5 BF010000 		movl	$1, %edi
 6566      00
 6567 33ea 31C0     		xorl	%eax, %eax
 6568 33ec 31ED     		xorl	%ebp, %ebp
 6569 33ee E8000000 		call	__printf_chk
 6569      00
 6570 33f3 488DB424 		leaq	2336(%rsp), %rsi
 6570      20090000 
 6571 33fb 488DBC24 		leaq	2976(%rsp), %rdi
 6571      A00B0000 
 6572 3403 E8000000 		call	uint8ToBin
 6572      00
 6573 3408 BA000000 		movl	$.LC177, %edx
 6573      00
 6574 340d BE000000 		movl	$.LC26, %esi
 6574      00
 6575 3412 BF010000 		movl	$1, %edi
 6575      00
 6576 3417 31C0     		xorl	%eax, %eax
 6577 3419 E8000000 		call	__printf_chk
 6577      00
 6578              	.L412:
 6579 341e 8B942C20 		movl	2336(%rsp,%rbp), %edx
 6579      090000
 6580 3425 31C0     		xorl	%eax, %eax
 6581 3427 BE000000 		movl	$.LC36, %esi
 6581      00
 6582 342c BF010000 		movl	$1, %edi
 6582      00
 6583 3431 4883C504 		addq	$4, %rbp
 6584 3435 E8000000 		call	__printf_chk
 6584      00
 6585 343a 4881FD80 		cmpq	$128, %rbp
 6585      000000
 6586 3441 75DB     		jne	.L412
 6587 3443 BE000000 		movl	$.LC37, %esi
 6587      00
 6588 3448 BF010000 		movl	$1, %edi
 6588      00
 6589 344d 31C0     		xorl	%eax, %eax
 6590 344f E8000000 		call	__printf_chk
 6590      00
 6591 3454 488DAC24 		leaq	2608(%rsp), %rbp
 6591      300A0000 
 6592 345c BA000000 		movl	$.LC178, %edx
 6592      00
 6593 3461 BE000000 		movl	$.LC26, %esi
 6593      00
 6594 3466 BF010000 		movl	$1, %edi
 6594      00
 6595 346b 31C0     		xorl	%eax, %eax
 6596 346d E8000000 		call	__printf_chk
 6596      00
 6597 3472 488DB424 		leaq	416(%rsp), %rsi
 6597      A0010000 
 6598 347a 488DBC24 		leaq	2336(%rsp), %rdi
 6598      20090000 
 6599 3482 4889EA   		movq	%rbp, %rdx
 6600 3485 E8000000 		call	decrypter
 6600      00
 6601 348a BA000000 		movl	$.LC179, %edx
 6601      00
 6602 348f BE000000 		movl	$.LC26, %esi
 6602      00
 6603 3494 BF010000 		movl	$1, %edi
 6603      00
 6604 3499 31C0     		xorl	%eax, %eax
 6605 349b E8000000 		call	__printf_chk
 6605      00
 6606 34a0 31C9     		xorl	%ecx, %ecx
 6607              	.L413:
 6608 34a2 8B540D00 		movl	0(%rbp,%rcx), %edx
 6609 34a6 31C0     		xorl	%eax, %eax
 6610 34a8 BE000000 		movl	$.LC36, %esi
 6610      00
 6611 34ad BF010000 		movl	$1, %edi
 6611      00
 6612 34b2 48894C24 		movq	%rcx, 16(%rsp)
 6612      10
 6613 34b7 E8000000 		call	__printf_chk
 6613      00
 6614 34bc 488B4C24 		movq	16(%rsp), %rcx
 6614      10
 6615 34c1 4883C104 		addq	$4, %rcx
 6616 34c5 4881F980 		cmpq	$128, %rcx
 6616      000000
 6617 34cc 75D4     		jne	.L413
 6618 34ce BE000000 		movl	$.LC37, %esi
 6618      00
 6619 34d3 BF010000 		movl	$1, %edi
 6619      00
 6620 34d8 31C0     		xorl	%eax, %eax
 6621 34da E8000000 		call	__printf_chk
 6621      00
 6622 34df 31C0     		xorl	%eax, %eax
 6623 34e1 BA020000 		movl	$2, %edx
 6623      00
 6624              	.L414:
 6625 34e6 8B8C0420 		movl	544(%rsp,%rax), %ecx
 6625      020000
 6626 34ed 394C0500 		cmpl	%ecx, 0(%rbp,%rax)
 6627 34f1 440F45FA 		cmovne	%edx, %r15d
 6628 34f5 4883C004 		addq	$4, %rax
 6629 34f9 483D8000 		cmpq	$128, %rax
 6629      0000
 6630 34ff 75E5     		jne	.L414
 6631 3501 BA000000 		movl	$.LC180, %edx
 6631      00
 6632 3506 BE000000 		movl	$.LC26, %esi
 6632      00
 6633 350b BF010000 		movl	$1, %edi
 6633      00
 6634 3510 31C0     		xorl	%eax, %eax
 6635 3512 E8000000 		call	__printf_chk
 6635      00
 6636 3517 31C0     		xorl	%eax, %eax
 6637 3519 BA000000 		movl	$.LC181, %edx
 6637      00
 6638 351e BE000000 		movl	$.LC26, %esi
 6638      00
 6639 3523 BF010000 		movl	$1, %edi
 6639      00
 6640 3528 E8000000 		call	__printf_chk
 6640      00
 6641 352d 4183FF02 		cmpl	$2, %r15d
 6642 3531 0F85B6E4 		jne	.L416
 6642      FFFF
 6643 3537 31C0     		xorl	%eax, %eax
 6644 3539 BA000000 		movl	$.LC182, %edx
 6644      00
 6645 353e BE000000 		movl	$.LC26, %esi
 6645      00
 6646 3543 BF010000 		movl	$1, %edi
 6646      00
 6647 3548 E8000000 		call	__printf_chk
 6647      00
 6648 354d 4183FD3F 		cmpl	$63, %r13d
 6649 3551 B8000000 		movl	$0, %eax
 6649      00
 6650 3556 440F44E8 		cmove	%eax, %r13d
 6651 355a E90AFCFF 		jmp	.L388
 6651      FF
 6652              	.L673:
 6653 355f BA000000 		movl	$.LC210, %edx
 6653      00
 6654 3564 BE000000 		movl	$.LC26, %esi
 6654      00
 6655 3569 BF010000 		movl	$1, %edi
 6655      00
 6656 356e 31C0     		xorl	%eax, %eax
 6657 3570 4183ED01 		subl	$1, %r13d
 6658 3574 E8000000 		call	__printf_chk
 6658      00
 6659 3579 E9EBFBFF 		jmp	.L388
 6659      FF
 6660              	.L674:
 6661 357e BA000000 		movl	$.LC210, %edx
 6661      00
 6662 3583 BE000000 		movl	$.LC26, %esi
 6662      00
 6663 3588 BF010000 		movl	$1, %edi
 6663      00
 6664 358d 31C0     		xorl	%eax, %eax
 6665 358f 4183ED01 		subl	$1, %r13d
 6666 3593 E8000000 		call	__printf_chk
 6666      00
 6667 3598 E9DBF0FF 		jmp	.L451
 6667      FF
 6668              	.L649:
 6669 359d BA000000 		movl	$.LC151, %edx
 6669      00
 6670 35a2 BE000000 		movl	$.LC26, %esi
 6670      00
 6671 35a7 BF010000 		movl	$1, %edi
 6671      00
 6672 35ac 31C0     		xorl	%eax, %eax
 6673 35ae 4183ED01 		subl	$1, %r13d
 6674 35b2 E8000000 		call	__printf_chk
 6674      00
 6675 35b7 E9ADFBFF 		jmp	.L388
 6675      FF
 6676              	.L675:
 6677 35bc BA000000 		movl	$.LC225, %edx
 6677      00
 6678 35c1 BE000000 		movl	$.LC26, %esi
 6678      00
 6679 35c6 BF010000 		movl	$1, %edi
 6679      00
 6680 35cb 31C0     		xorl	%eax, %eax
 6681 35cd 4531E4   		xorl	%r12d, %r12d
 6682 35d0 E8000000 		call	__printf_chk
 6682      00
 6683              	.L474:
 6684 35d5 BF010000 		movl	$1, %edi
 6684      00
 6685 35da BA000000 		movl	$.LC234, %edx
 6685      00
 6686 35df BE000000 		movl	$.LC26, %esi
 6686      00
 6687 35e4 31C0     		xorl	%eax, %eax
 6688 35e6 E8000000 		call	__printf_chk
 6688      00
 6689 35eb 31C0     		xorl	%eax, %eax
 6690 35ed 4889EF   		movq	%rbp, %rdi
 6691 35f0 B9080000 		movl	$8, %ecx
 6691      00
 6692 35f5 F3AB     		rep stosl
 6693 35f7 488D8424 		leaq	2336(%rsp), %rax
 6693      20090000 
 6694 35ff C7842420 		movl	$1, 2336(%rsp)
 6694      09000001 
 6694      000000
 6695 360a B9070000 		movl	$7, %ecx
 6695      00
 6696 360f 31ED     		xorl	%ebp, %ebp
 6697              	.L487:
 6698 3611 8B501C   		movl	28(%rax), %edx
 6699 3614 4883E804 		subq	$4, %rax
 6700 3618 D3E2     		sall	%cl, %edx
 6701 361a 83E901   		subl	$1, %ecx
 6702 361d 09D5     		orl	%edx, %ebp
 6703 361f 83F9FF   		cmpl	$-1, %ecx
 6704 3622 75ED     		jne	.L487
 6705              	.L489:
 6706 3624 BFE80300 		movl	$1000, %edi
 6706      00
 6707 3629 E8000000 		call	delay
 6707      00
 6708 362e 8B742410 		movl	16(%rsp), %esi
 6709 3632 488BBC24 		movq	136(%rsp), %rdi
 6709      88000000 
 6710 363a 4C8D8424 		leaq	144(%rsp), %r8
 6710      90000000 
 6711 3642 488D4C24 		leaq	127(%rsp), %rcx
 6711      7F
 6712 3647 BA010000 		movl	$1, %edx
 6712      00
 6713 364c E8000000 		call	flReadChannelAsyncSubmit
 6713      00
 6714 3651 85C0     		testl	%eax, %eax
 6715 3653 0F852AFB 		jne	.L639
 6715      FFFF
 6716 3659 488D8C24 		leaq	132(%rsp), %rcx
 6716      84000000 
 6717 3661 488BBC24 		movq	136(%rsp), %rdi
 6717      88000000 
 6718 3669 4C8D8424 		leaq	144(%rsp), %r8
 6718      90000000 
 6719 3671 488DB424 		leaq	152(%rsp), %rsi
 6719      98000000 
 6720 3679 4889CA   		movq	%rcx, %rdx
 6721 367c E8000000 		call	flReadChannelAsyncAwait
 6721      00
 6722 3681 85C0     		testl	%eax, %eax
 6723 3683 0F85FAFA 		jne	.L639
 6723      FFFF
 6724 3689 0FB64424 		movzbl	127(%rsp), %eax
 6724      7F
 6725 368e 38C3     		cmpb	%al, %bl
 6726 3690 0F8407FF 		je	.L649
 6726      FFFF
 6727 3696 39E8     		cmpl	%ebp, %eax
 6728 3698 758A     		jne	.L489
 6729 369a 31C0     		xorl	%eax, %eax
 6730 369c BA000000 		movl	$.LC235, %edx
 6730      00
 6731 36a1 BE000000 		movl	$.LC26, %esi
 6731      00
 6732 36a6 BF010000 		movl	$1, %edi
 6732      00
 6733 36ab E8000000 		call	__printf_chk
 6733      00
 6734 36b0 4584E4   		testb	%r12b, %r12b
 6735 36b3 0F849B01 		je	.L490
 6735      0000
 6736 36b9 8B842450 		movl	336(%rsp), %eax
 6736      010000
 6737 36c0 8B942454 		movl	340(%rsp), %edx
 6737      010000
 6738 36c7 BE000000 		movl	$.LC26, %esi
 6738      00
 6739 36cc BF010000 		movl	$1, %edi
 6739      00
 6740 36d1 8BAC2458 		movl	344(%rsp), %ebp
 6740      010000
 6741 36d8 448BBC24 		movl	348(%rsp), %r15d
 6741      5C010000 
 6742 36e0 8D1450   		leal	(%rax,%rdx,2), %edx
 6743 36e3 8B84244C 		movl	332(%rsp), %eax
 6743      010000
 6744 36ea 448D2450 		leal	(%rax,%rdx,2), %r12d
 6745 36ee 8B842444 		movl	324(%rsp), %eax
 6745      010000
 6746 36f5 8B942448 		movl	328(%rsp), %edx
 6746      010000
 6747 36fc 8D1450   		leal	(%rax,%rdx,2), %edx
 6748 36ff 8B842440 		movl	320(%rsp), %eax
 6748      010000
 6749 3706 448D3450 		leal	(%rax,%rdx,2), %r14d
 6750 370a BA000000 		movl	$.LC236, %edx
 6750      00
 6751 370f 31C0     		xorl	%eax, %eax
 6752 3711 E8000000 		call	__printf_chk
 6752      00
 6753 3716 BA000000 		movl	$.LC237, %edx
 6753      00
 6754 371b BE000000 		movl	$.LC147, %esi
 6754      00
 6755 3720 BF010000 		movl	$1, %edi
 6755      00
 6756 3725 31C0     		xorl	%eax, %eax
 6757 3727 E8000000 		call	__printf_chk
 6757      00
 6758 372c 8B542420 		movl	32(%rsp), %edx
 6759 3730 BE000000 		movl	$.LC148, %esi
 6759      00
 6760 3735 BF010000 		movl	$1, %edi
 6760      00
 6761 373a 31C0     		xorl	%eax, %eax
 6762 373c E8000000 		call	__printf_chk
 6762      00
 6763 3741 BA000000 		movl	$.LC238, %edx
 6763      00
 6764 3746 BE000000 		movl	$.LC147, %esi
 6764      00
 6765 374b BF010000 		movl	$1, %edi
 6765      00
 6766 3750 31C0     		xorl	%eax, %eax
 6767 3752 E8000000 		call	__printf_chk
 6767      00
 6768 3757 8B542418 		movl	24(%rsp), %edx
 6769 375b BE000000 		movl	$.LC148, %esi
 6769      00
 6770 3760 BF010000 		movl	$1, %edi
 6770      00
 6771 3765 31C0     		xorl	%eax, %eax
 6772 3767 E8000000 		call	__printf_chk
 6772      00
 6773 376c BA000000 		movl	$.LC239, %edx
 6773      00
 6774 3771 BE000000 		movl	$.LC240, %esi
 6774      00
 6775 3776 BF010000 		movl	$1, %edi
 6775      00
 6776 377b 31C0     		xorl	%eax, %eax
 6777 377d E8000000 		call	__printf_chk
 6777      00
 6778 3782 4489FA   		movl	%r15d, %edx
 6779 3785 BE000000 		movl	$.LC148, %esi
 6779      00
 6780 378a BF010000 		movl	$1, %edi
 6780      00
 6781 378f 31C0     		xorl	%eax, %eax
 6782 3791 E8000000 		call	__printf_chk
 6782      00
 6783 3796 BA000000 		movl	$.LC241, %edx
 6783      00
 6784 379b BE000000 		movl	$.LC240, %esi
 6784      00
 6785 37a0 BF010000 		movl	$1, %edi
 6785      00
 6786 37a5 31C0     		xorl	%eax, %eax
 6787 37a7 E8000000 		call	__printf_chk
 6787      00
 6788 37ac 89EA     		movl	%ebp, %edx
 6789 37ae BE000000 		movl	$.LC148, %esi
 6789      00
 6790 37b3 BF010000 		movl	$1, %edi
 6790      00
 6791 37b8 31C0     		xorl	%eax, %eax
 6792 37ba E8000000 		call	__printf_chk
 6792      00
 6793 37bf BA000000 		movl	$.LC242, %edx
 6793      00
 6794 37c4 BE000000 		movl	$.LC240, %esi
 6794      00
 6795 37c9 BF010000 		movl	$1, %edi
 6795      00
 6796 37ce 31C0     		xorl	%eax, %eax
 6797 37d0 E8000000 		call	__printf_chk
 6797      00
 6798 37d5 4489E2   		movl	%r12d, %edx
 6799 37d8 BE000000 		movl	$.LC148, %esi
 6799      00
 6800 37dd BF010000 		movl	$1, %edi
 6800      00
 6801 37e2 31C0     		xorl	%eax, %eax
 6802 37e4 E8000000 		call	__printf_chk
 6802      00
 6803 37e9 BA000000 		movl	$.LC243, %edx
 6803      00
 6804 37ee BE000000 		movl	$.LC240, %esi
 6804      00
 6805 37f3 BF010000 		movl	$1, %edi
 6805      00
 6806 37f8 31C0     		xorl	%eax, %eax
 6807 37fa E8000000 		call	__printf_chk
 6807      00
 6808 37ff 4489F2   		movl	%r14d, %edx
 6809 3802 BE000000 		movl	$.LC148, %esi
 6809      00
 6810 3807 BF010000 		movl	$1, %edi
 6810      00
 6811 380c 31C0     		xorl	%eax, %eax
 6812 380e E8000000 		call	__printf_chk
 6812      00
 6813 3813 BA000000 		movl	$.LC244, %edx
 6813      00
 6814 3818 BE000000 		movl	$.LC26, %esi
 6814      00
 6815 381d BF010000 		movl	$1, %edi
 6815      00
 6816 3822 31C0     		xorl	%eax, %eax
 6817 3824 E8000000 		call	__printf_chk
 6817      00
 6818 3829 8B742418 		movl	24(%rsp), %esi
 6819 382d 8B7C2420 		movl	32(%rsp), %edi
 6820 3831 89EA     		movl	%ebp, %edx
 6821 3833 4589F0   		movl	%r14d, %r8d
 6822 3836 4489E1   		movl	%r12d, %ecx
 6823 3839 E8000000 		call	writecsv
 6823      00
 6824 383e BA000000 		movl	$.LC245, %edx
 6824      00
 6825 3843 BE000000 		movl	$.LC26, %esi
 6825      00
 6826 3848 BF010000 		movl	$1, %edi
 6826      00
 6827 384d 31C0     		xorl	%eax, %eax
 6828 384f E8000000 		call	__printf_chk
 6828      00
 6829              	.L490:
 6830 3854 BF881300 		movl	$5000, %edi
 6830      00
 6831 3859 4183ED01 		subl	$1, %r13d
 6832 385d E8000000 		call	delay
 6832      00
 6833 3862 E902F9FF 		jmp	.L388
 6833      FF
 6834              		.cfi_endproc
 6835              	.LFE68:
 6837              		.section	.text.unlikely
 6838              	.LCOLDE251:
 6839              		.section	.text.startup
 6840              	.LHOTE251:
 6841              		.section	.rodata.str1.1
 6842              	.LC252:
 6843 048d 30303030 		.string	"0000"
 6843      00
 6844              	.LC253:
 6845 0492 30303031 		.string	"0001"
 6845      00
 6846              	.LC254:
 6847 0497 30303130 		.string	"0010"
 6847      00
 6848              	.LC255:
 6849 049c 30303131 		.string	"0011"
 6849      00
 6850              	.LC256:
 6851 04a1 30313030 		.string	"0100"
 6851      00
 6852              	.LC257:
 6853 04a6 30313031 		.string	"0101"
 6853      00
 6854              	.LC258:
 6855 04ab 30313130 		.string	"0110"
 6855      00
 6856              	.LC259:
 6857 04b0 30313131 		.string	"0111"
 6857      00
 6858              	.LC260:
 6859 04b5 31303030 		.string	"1000"
 6859      00
 6860              	.LC261:
 6861 04ba 31303031 		.string	"1001"
 6861      00
 6862              	.LC262:
 6863 04bf 58585858 		.string	"XXXX"
 6863      00
 6864              	.LC263:
 6865 04c4 31303130 		.string	"1010"
 6865      00
 6866              	.LC264:
 6867 04c9 31303131 		.string	"1011"
 6867      00
 6868              	.LC265:
 6869 04ce 31313030 		.string	"1100"
 6869      00
 6870              	.LC266:
 6871 04d3 31313031 		.string	"1101"
 6871      00
 6872              	.LC267:
 6873 04d8 31313130 		.string	"1110"
 6873      00
 6874              	.LC268:
 6875 04dd 31313131 		.string	"1111"
 6875      00
 6876              		.section	.rodata
 6877 0018 00000000 		.align 32
 6877      00000000 
 6880              	nibbles:
 6881 0020 00000000 		.quad	.LC252
 6881      00000000 
 6882 0028 00000000 		.quad	.LC253
 6882      00000000 
 6883 0030 00000000 		.quad	.LC254
 6883      00000000 
 6884 0038 00000000 		.quad	.LC255
 6884      00000000 
 6885 0040 00000000 		.quad	.LC256
 6885      00000000 
 6886 0048 00000000 		.quad	.LC257
 6886      00000000 
 6887 0050 00000000 		.quad	.LC258
 6887      00000000 
 6888 0058 00000000 		.quad	.LC259
 6888      00000000 
 6889 0060 00000000 		.quad	.LC260
 6889      00000000 
 6890 0068 00000000 		.quad	.LC261
 6890      00000000 
 6891 0070 00000000 		.quad	.LC262
 6891      00000000 
 6892 0078 00000000 		.quad	.LC262
 6892      00000000 
 6893 0080 00000000 		.quad	.LC262
 6893      00000000 
 6894 0088 00000000 		.quad	.LC262
 6894      00000000 
 6895 0090 00000000 		.quad	.LC262
 6895      00000000 
 6896 0098 00000000 		.quad	.LC262
 6896      00000000 
 6897 00a0 00000000 		.quad	.LC262
 6897      00000000 
 6898 00a8 00000000 		.quad	.LC263
 6898      00000000 
 6899 00b0 00000000 		.quad	.LC264
 6899      00000000 
 6900 00b8 00000000 		.quad	.LC265
 6900      00000000 
 6901 00c0 00000000 		.quad	.LC266
 6901      00000000 
 6902 00c8 00000000 		.quad	.LC267
 6902      00000000 
 6903 00d0 00000000 		.quad	.LC268
 6903      00000000 
 6904              		.section	.rodata.str1.1
 6905              	.LC269:
 6906 04e2 556E7061 		.string	"Unparseable hex number"
 6906      72736561 
 6906      626C6520 
 6906      68657820 
 6906      6E756D62 
 6907              	.LC270:
 6908 04f9 4368616E 		.string	"Channel out of range"
 6908      6E656C20 
 6908      6F757420 
 6908      6F662072 
 6908      616E6765 
 6909              	.LC271:
 6910 050e 436F6E64 		.string	"Conduit out of range"
 6910      75697420 
 6910      6F757420 
 6910      6F662072 
 6910      616E6765 
 6911              	.LC272:
 6912 0523 496C6C65 		.string	"Illegal character"
 6912      67616C20 
 6912      63686172 
 6912      61637465 
 6912      7200
 6913              	.LC273:
 6914 0535 556E7465 		.string	"Unterminated string"
 6914      726D696E 
 6914      61746564 
 6914      20737472 
 6914      696E6700 
 6915              	.LC274:
 6916 0549 4E6F206D 		.string	"No memory"
 6916      656D6F72 
 6916      7900
 6917              	.LC275:
 6918 0553 456D7074 		.string	"Empty string"
 6918      79207374 
 6918      72696E67 
 6918      00
 6919              	.LC276:
 6920 0560 4F646420 		.string	"Odd number of digits"
 6920      6E756D62 
 6920      6572206F 
 6920      66206469 
 6920      67697473 
 6921              	.LC277:
 6922 0575 43616E6E 		.string	"Cannot load file"
 6922      6F74206C 
 6922      6F616420 
 6922      66696C65 
 6922      00
 6923              	.LC278:
 6924 0586 43616E6E 		.string	"Cannot save file"
 6924      6F742073 
 6924      61766520 
 6924      66696C65 
 6924      00
 6925              	.LC279:
 6926 0597 42616420 		.string	"Bad arguments"
 6926      61726775 
 6926      6D656E74 
 6926      7300
 6927              		.section	.rodata
 6928 00d8 00000000 		.align 32
 6928      00000000 
 6931              	errMessages:
 6932 00e0 00000000 		.quad	0
 6932      00000000 
 6933 00e8 00000000 		.quad	0
 6933      00000000 
 6934 00f0 00000000 		.quad	.LC269
 6934      00000000 
 6935 00f8 00000000 		.quad	.LC270
 6935      00000000 
 6936 0100 00000000 		.quad	.LC271
 6936      00000000 
 6937 0108 00000000 		.quad	.LC272
 6937      00000000 
 6938 0110 00000000 		.quad	.LC273
 6938      00000000 
 6939 0118 00000000 		.quad	.LC274
 6939      00000000 
 6940 0120 00000000 		.quad	.LC275
 6940      00000000 
 6941 0128 00000000 		.quad	.LC276
 6941      00000000 
 6942 0130 00000000 		.quad	.LC277
 6942      00000000 
 6943 0138 00000000 		.quad	.LC278
 6943      00000000 
 6944 0140 00000000 		.quad	.LC279
 6944      00000000 
 6945              		.local	enableBenchmarking
 6946              		.comm	enableBenchmarking,1,1
 6947              		.local	ptr
 6948              		.comm	ptr,8,8
 6949              		.section	.rodata.cst8,"aM",@progbits,8
 6950              		.align 8
 6951              	.LC6:
 6952 0000 00000000 		.long	0
 6953 0004 80842E41 		.long	1093567616
 6954              		.align 8
 6955              	.LC7:
 6956 0008 00000000 		.long	0
 6957 000c 00003041 		.long	1093664768
 6958              		.section	.rodata.cst16,"aM",@progbits,16
 6959              		.align 16
 6960              	.LC20:
 6961 0000 01000000 		.long	1
 6962 0004 01000000 		.long	1
 6963 0008 01000000 		.long	1
 6964 000c 01000000 		.long	1
 6965              		.align 16
 6966              	.LC139:
 6967 0010 00000000 		.long	0
 6968 0014 01000000 		.long	1
 6969 0018 00000000 		.long	0
 6970 001c 00000000 		.long	0
 6971              		.align 16
 6972              	.LC140:
 6973 0020 00000000 		.long	0
 6974 0024 00000000 		.long	0
 6975 0028 01000000 		.long	1
 6976 002c 01000000 		.long	1
 6977              		.align 16
 6978              	.LC141:
 6979 0030 01000000 		.long	1
 6980 0034 00000000 		.long	0
 6981 0038 01000000 		.long	1
 6982 003c 00000000 		.long	0
 6983              		.align 16
 6984              	.LC142:
 6985 0040 01000000 		.long	1
 6986 0044 00000000 		.long	0
 6987 0048 01000000 		.long	1
 6988 004c 01000000 		.long	1
 6989              		.align 16
 6990              	.LC143:
 6991 0050 00000000 		.long	0
 6992 0054 01000000 		.long	1
 6993 0058 00000000 		.long	0
 6994 005c 01000000 		.long	1
 6995              		.align 16
 6996              	.LC144:
 6997 0060 00000000 		.long	0
 6998 0064 00000000 		.long	0
 6999 0068 00000000 		.long	0
 7000 006c 01000000 		.long	1
 7001              		.align 16
 7002              	.LC145:
 7003 0070 01000000 		.long	1
 7004 0074 00000000 		.long	0
 7005 0078 00000000 		.long	0
 7006 007c 00000000 		.long	0
 7007              		.section	.rodata.cst8
 7008              		.align 8
 7009              	.LC209:
 7010 0010 00000000 		.long	0
 7011 0014 00007040 		.long	1081081856
 7012              		.ident	"GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609"
 7013              		.section	.note.GNU-stack,"",@progbits
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccWc6Pel.s:9      .text.unlikely:0000000000000000 doWrite
     /tmp/ccWc6Pel.s:145    .text.unlikely:00000000000000ff parseLine
     /tmp/ccWc6Pel.s:6948   .bss:0000000000000008 ptr
                             .bss:0000000000000000 enableBenchmarking
     /tmp/ccWc6Pel.s:6931   .rodata:00000000000000e0 errMessages
     /tmp/ccWc6Pel.s:960    .text:0000000000000000 delay
     /tmp/ccWc6Pel.s:992    .text:0000000000000020 myxor
     /tmp/ccWc6Pel.s:1042   .text:0000000000000080 bitArrayToInt
     /tmp/ccWc6Pel.s:1079   .text:00000000000000b0 BinTouint8
     /tmp/ccWc6Pel.s:1284   .text:0000000000000310 decToBinary
     /tmp/ccWc6Pel.s:1381   .text:00000000000003e0 encrypter
     /tmp/ccWc6Pel.s:1718   .text:0000000000000a00 decrypter
     /tmp/ccWc6Pel.s:2068   .text:0000000000001030 convert_to_binary
     /tmp/ccWc6Pel.s:2123   .text:0000000000001060 print
     /tmp/ccWc6Pel.s:2685   .text:0000000000001af0 uint8ToBin
     /tmp/ccWc6Pel.s:2870   .text:0000000000001c70 writecsv
     /tmp/ccWc6Pel.s:3139   .text:0000000000001f70 asciiToBinary
     /tmp/ccWc6Pel.s:3769   .text.startup:0000000000000000 main
     /tmp/ccWc6Pel.s:6880   .rodata:0000000000000020 nibbles
     /tmp/ccWc6Pel.s:6960   .rodata.cst16:0000000000000000 .LC20
     /tmp/ccWc6Pel.s:6951   .rodata.cst8:0000000000000000 .LC6
     /tmp/ccWc6Pel.s:6955   .rodata.cst8:0000000000000008 .LC7
     /tmp/ccWc6Pel.s:6966   .rodata.cst16:0000000000000010 .LC139
     /tmp/ccWc6Pel.s:6978   .rodata.cst16:0000000000000030 .LC141
     /tmp/ccWc6Pel.s:6972   .rodata.cst16:0000000000000020 .LC140
     /tmp/ccWc6Pel.s:6990   .rodata.cst16:0000000000000050 .LC143
     /tmp/ccWc6Pel.s:6984   .rodata.cst16:0000000000000040 .LC142
     /tmp/ccWc6Pel.s:6996   .rodata.cst16:0000000000000060 .LC144
     /tmp/ccWc6Pel.s:7002   .rodata.cst16:0000000000000070 .LC145
     /tmp/ccWc6Pel.s:7009   .rodata.cst8:0000000000000010 .LC209

UNDEFINED SYMBOLS
fread
flWriteChannelAsync
errPrefix
flAwaitAsyncWrites
__stack_chk_fail
bufInitialise
__errno_location
strtoul
malloc
strncpy
fopen
free
gettimeofday
flReadChannelAsyncSubmit
__printf_chk
flReadChannelAsyncAwait
fwrite
fclose
flWriteChannel
flSelectConduit
dump
bufDestroy
stderr
__fprintf_chk
bufAppendConst
flReadChannel
clock
memset
memcpy
__isoc99_fscanf
arg_str0
arg_str1
arg_uint0
arg_lit0
arg_end
arg_nullcheck
flClose
flFreeError
arg_parse
stdout
arg_print_syntax
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadCustomFirmware
flSleep
fflush
flIsDeviceAvailable
flGetFirmwareVersion
flGetFirmwareID
flFlashStandardFirmware
flIsNeroCapable
flIsCommCapable
jtagScanChain
flLoadStandardFirmware
flFlashCustomFirmware
flResetToggle
flMultiBitPortAccess
__sprintf_chk
flProgram
flSaveFirmware
flIsFPGARunning
readline
add_history
sigRegisterHandler
sigIsRaised
time
difftime
