   1              		.file	"printConfig.c"
   2              		.text
   3              	.Ltext0:
   5              	littleEndian16:
   6              	.LFB2:
   7              		.file 1 "/home/shubham/20140524/makestuff/common/makestuff.h"
   1:/home/shubham/20140524/makestuff/common/makestuff.h **** /*
   2:/home/shubham/20140524/makestuff/common/makestuff.h ****  * Copyright (C) 2009-2012 Chris McClelland
   3:/home/shubham/20140524/makestuff/common/makestuff.h ****  *
   4:/home/shubham/20140524/makestuff/common/makestuff.h ****  * This program is free software: you can redistribute it and/or modify
   5:/home/shubham/20140524/makestuff/common/makestuff.h ****  * it under the terms of the GNU Lesser General Public License as published by
   6:/home/shubham/20140524/makestuff/common/makestuff.h ****  * the Free Software Foundation, either version 3 of the License, or
   7:/home/shubham/20140524/makestuff/common/makestuff.h ****  * (at your option) any later version.
   8:/home/shubham/20140524/makestuff/common/makestuff.h ****  *
   9:/home/shubham/20140524/makestuff/common/makestuff.h ****  * This program is distributed in the hope that it will be useful,
  10:/home/shubham/20140524/makestuff/common/makestuff.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/home/shubham/20140524/makestuff/common/makestuff.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:/home/shubham/20140524/makestuff/common/makestuff.h ****  * GNU Lesser General Public License for more details.
  13:/home/shubham/20140524/makestuff/common/makestuff.h ****  *
  14:/home/shubham/20140524/makestuff/common/makestuff.h ****  * You should have received a copy of the GNU Lesser General Public License
  15:/home/shubham/20140524/makestuff/common/makestuff.h ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:/home/shubham/20140524/makestuff/common/makestuff.h ****  */
  17:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  18:/home/shubham/20140524/makestuff/common/makestuff.h **** #ifndef MAKESTUFF_H
  19:/home/shubham/20140524/makestuff/common/makestuff.h **** #define MAKESTUFF_H
  20:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  21:/home/shubham/20140524/makestuff/common/makestuff.h **** #include <stddef.h>
  22:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  23:/home/shubham/20140524/makestuff/common/makestuff.h **** #ifndef __cplusplus
  24:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#ifdef WIN32
  25:/home/shubham/20140524/makestuff/common/makestuff.h **** 		typedef char bool;
  26:/home/shubham/20140524/makestuff/common/makestuff.h **** 		enum {
  27:/home/shubham/20140524/makestuff/common/makestuff.h **** 			false = 0,
  28:/home/shubham/20140524/makestuff/common/makestuff.h **** 			true = 1
  29:/home/shubham/20140524/makestuff/common/makestuff.h **** 		};
  30:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#else
  31:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#include <stdbool.h>
  32:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#endif
  33:/home/shubham/20140524/makestuff/common/makestuff.h **** #endif
  34:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  35:/home/shubham/20140524/makestuff/common/makestuff.h **** #ifdef WIN32
  36:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#define WARN_UNUSED_RESULT
  37:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#define DLLEXPORT(t) __declspec(dllexport) t __stdcall
  38:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#define PFSZD "%Iu"
  39:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#ifdef _WIN64
  40:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#define PFSZH "%016IX"
  41:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 64
  42:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#else
  43:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#define PFSZH "%08IX"
  44:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 32
  45:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#endif
  46:/home/shubham/20140524/makestuff/common/makestuff.h **** #else
  47:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#define WARN_UNUSED_RESULT __attribute__((warn_unused_result))
  48:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#define DLLEXPORT(t) t
  49:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#define PFSZD "%zu"
  50:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#ifdef __LP64__
  51:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#define PFSZH "%016zX"
  52:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 64
  53:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#else
  54:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#define PFSZH "%08zX"
  55:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 32
  56:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#endif
  57:/home/shubham/20140524/makestuff/common/makestuff.h **** #endif
  58:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  59:/home/shubham/20140524/makestuff/common/makestuff.h **** #ifndef NULL
  60:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#define NULL ((void*)0)
  61:/home/shubham/20140524/makestuff/common/makestuff.h **** #endif
  62:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  63:/home/shubham/20140524/makestuff/common/makestuff.h **** typedef unsigned char      uint8;
  64:/home/shubham/20140524/makestuff/common/makestuff.h **** typedef unsigned short     uint16;
  65:/home/shubham/20140524/makestuff/common/makestuff.h **** #ifndef __cplusplus
  66:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#ifndef SDCC
  67:/home/shubham/20140524/makestuff/common/makestuff.h **** 		typedef unsigned long long uint64;
  68:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#endif
  69:/home/shubham/20140524/makestuff/common/makestuff.h **** #endif
  70:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  71:/home/shubham/20140524/makestuff/common/makestuff.h **** typedef signed char        int8;
  72:/home/shubham/20140524/makestuff/common/makestuff.h **** typedef signed short       int16;
  73:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  74:/home/shubham/20140524/makestuff/common/makestuff.h **** #if (defined __AVR__ && defined __GNUC__) || defined SDCC
  75:/home/shubham/20140524/makestuff/common/makestuff.h **** 	// The embedded platforms have sizeof(int) = 2, so use long
  76:/home/shubham/20140524/makestuff/common/makestuff.h **** 	typedef signed long    int32;
  77:/home/shubham/20140524/makestuff/common/makestuff.h **** 	typedef unsigned long  uint32;
  78:/home/shubham/20140524/makestuff/common/makestuff.h **** #else
  79:/home/shubham/20140524/makestuff/common/makestuff.h **** 	// The i686 & x86_64 have sizeof(int) = 4
  80:/home/shubham/20140524/makestuff/common/makestuff.h **** 	typedef signed int     int32;
  81:/home/shubham/20140524/makestuff/common/makestuff.h **** 	typedef unsigned int   uint32;
  82:/home/shubham/20140524/makestuff/common/makestuff.h **** #endif
  83:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  84:/home/shubham/20140524/makestuff/common/makestuff.h **** #ifndef __cplusplus
  85:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#ifndef SDCC
  86:/home/shubham/20140524/makestuff/common/makestuff.h **** 		typedef signed long long int64;
  87:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#endif
  88:/home/shubham/20140524/makestuff/common/makestuff.h **** #endif
  89:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  90:/home/shubham/20140524/makestuff/common/makestuff.h **** typedef unsigned int       bitfield;
  91:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  92:/home/shubham/20140524/makestuff/common/makestuff.h **** #if defined __GNUC__
  93:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#define swap32(x) __builtin_bswap32(x)
  94:/home/shubham/20140524/makestuff/common/makestuff.h **** #elif defined WIN32
  95:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#ifdef __cplusplus
  96:/home/shubham/20140524/makestuff/common/makestuff.h **** 		extern "C"
  97:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#endif
  98:/home/shubham/20140524/makestuff/common/makestuff.h **** 	unsigned long  __cdecl _byteswap_ulong(unsigned long);
  99:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#define swap32(x) _byteswap_ulong(x)
 100:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#ifndef __cplusplus
 101:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#define inline __inline
 102:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#endif
 103:/home/shubham/20140524/makestuff/common/makestuff.h **** #endif
 104:/home/shubham/20140524/makestuff/common/makestuff.h **** #define swap16(x) ((uint16)((((x) & 0x00FF) << 8) | (((x) >> 8) & 0x00FF)))
 105:/home/shubham/20140524/makestuff/common/makestuff.h **** 
 106:/home/shubham/20140524/makestuff/common/makestuff.h **** // The C standard requires this two-level indirection thing
 107:/home/shubham/20140524/makestuff/common/makestuff.h **** #undef CONCAT
 108:/home/shubham/20140524/makestuff/common/makestuff.h **** #define CONCAT_INTERNAL(x, y) x ## y
 109:/home/shubham/20140524/makestuff/common/makestuff.h **** #define CONCAT(x, y) CONCAT_INTERNAL(x, y)
 110:/home/shubham/20140524/makestuff/common/makestuff.h **** 
 111:/home/shubham/20140524/makestuff/common/makestuff.h **** #define STR_INTERNAL(x) #x
 112:/home/shubham/20140524/makestuff/common/makestuff.h **** #define STR(x) STR_INTERNAL(x)
 113:/home/shubham/20140524/makestuff/common/makestuff.h **** 
 114:/home/shubham/20140524/makestuff/common/makestuff.h **** // The VA_NARGS() macro - count the number of arguments in a C99 variadic macro
 115:/home/shubham/20140524/makestuff/common/makestuff.h **** #define VA_EXPAND(x) x
 116:/home/shubham/20140524/makestuff/common/makestuff.h **** #define VA_NARGS(...) VA_EXPAND(VA_NARGS_INTERNAL(__VA_ARGS__, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
 117:/home/shubham/20140524/makestuff/common/makestuff.h **** #define VA_NARGS_INTERNAL(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y
 118:/home/shubham/20140524/makestuff/common/makestuff.h **** #define FAIL(code, label) { retVal = code; goto label; }
 119:/home/shubham/20140524/makestuff/common/makestuff.h **** 
 120:/home/shubham/20140524/makestuff/common/makestuff.h **** // The CHECK_STATUS() macro - if condition is true, set a returnCode and jump to a label (exit,
 121:/home/shubham/20140524/makestuff/common/makestuff.h **** // cleanup etc). If liberror is included you can also give an error message.
 122:/home/shubham/20140524/makestuff/common/makestuff.h **** #define CHECK_INTERNAL3(condition, code, label) if ( condition ) { FAIL(code, label); }
 123:/home/shubham/20140524/makestuff/common/makestuff.h **** #define CHECK_INTERNAL4(condition, code, label, prefix) LIBERROR_IS_REQUIRED
 124:/home/shubham/20140524/makestuff/common/makestuff.h **** #define CHECK_INTERNAL5(condition, code, label, ...) LIBERROR_IS_REQUIRED
 125:/home/shubham/20140524/makestuff/common/makestuff.h **** #define CHECK_STATUS(...) VA_EXPAND(CONCAT(CHECK_INTERNAL, VA_NARGS(__VA_ARGS__))(__VA_ARGS__))
 126:/home/shubham/20140524/makestuff/common/makestuff.h **** 
 127:/home/shubham/20140524/makestuff/common/makestuff.h **** #ifdef BYTE_ORDER
 128:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#if BYTE_ORDER == 1234
 129:/home/shubham/20140524/makestuff/common/makestuff.h **** 		// Little-endian machines
 130:/home/shubham/20140524/makestuff/common/makestuff.h **** 		static inline uint16 bigEndian16(uint16 x) {
 131:/home/shubham/20140524/makestuff/common/makestuff.h **** 			return swap16(x);
 132:/home/shubham/20140524/makestuff/common/makestuff.h **** 		}
 133:/home/shubham/20140524/makestuff/common/makestuff.h **** 		static inline uint32 bigEndian32(uint32 x) {
 134:/home/shubham/20140524/makestuff/common/makestuff.h **** 			return swap32(x);
 135:/home/shubham/20140524/makestuff/common/makestuff.h **** 		}
 136:/home/shubham/20140524/makestuff/common/makestuff.h **** 		static inline uint16 littleEndian16(uint16 x) {
   8              		.loc 1 136 0
   9              		.cfi_startproc
  10 0000 55       		pushq	%rbp
  11              		.cfi_def_cfa_offset 16
  12              		.cfi_offset 6, -16
  13 0001 4889E5   		movq	%rsp, %rbp
  14              		.cfi_def_cfa_register 6
  15 0004 89F8     		movl	%edi, %eax
  16 0006 668945FC 		movw	%ax, -4(%rbp)
 137:/home/shubham/20140524/makestuff/common/makestuff.h **** 			return x;
  17              		.loc 1 137 0
  18 000a 0FB745FC 		movzwl	-4(%rbp), %eax
 138:/home/shubham/20140524/makestuff/common/makestuff.h **** 		}
  19              		.loc 1 138 0
  20 000e 5D       		popq	%rbp
  21              		.cfi_def_cfa 7, 8
  22 000f C3       		ret
  23              		.cfi_endproc
  24              	.LFE2:
  26              		.section	.rodata
  27              	.LC0:
  28 0000 4661696C 		.string	"Failed to get descriptor: %s"
  28      65642074 
  28      6F206765 
  28      74206465 
  28      73637269 
  29 001d 000000   		.align 8
  30              	.LC1:
  31 0020 636F6E66 		.string	"configDescriptor {\n    bLength = 0x%02X\n    bDescriptorType = 0x%02X\n    wTotalLength 
  31      69674465 
  31      73637269 
  31      70746F72 
  31      207B0A20 
  32 0109 00000000 		.align 8
  32      000000
  33              	.LC2:
  34 0110 20202020 		.ascii	"    interfaceDescriptor {\n        bLength = 0x%02X\n       "
  34      696E7465 
  34      72666163 
  34      65446573 
  34      63726970 
  35 014a 206244   		.ascii	" bD"
  36 014d 65736372 		.string	"escriptorType = 0x%02X\n        bInterfaceNumber = 0x%02X\n        bAlternateSetting = 0x
  36      6970746F 
  36      72547970 
  36      65203D20 
  36      30782530 
  37 024e 0000     		.align 8
  38              	.LC3:
  39 0250 20202020 		.ascii	"        endpointDescriptor {\n            bLength = 0x"
  39      20202020 
  39      656E6470 
  39      6F696E74 
  39      44657363 
  40 0285 25303258 		.string	"%02X\n            bDescriptorType = 0x%02X\n            bEndpointAddress = 0x%02X\n      
  40      0A202020 
  40      20202020 
  40      20202020 
  40      20624465 
  41              	.LC4:
  42 0386 20202020 		.string	"    }\n"
  42      7D0A00
  43              	.LC5:
  44 038d 7D0A00   		.string	"}\n"
  45              		.text
  46              		.globl	usbPrintConfiguration
  48              	usbPrintConfiguration:
  49              	.LFB19:
  50              		.file 2 "printConfig.c"
   1:printConfig.c **** /*
   2:printConfig.c ****  * Copyright (C) 2009-2012 Chris McClelland
   3:printConfig.c ****  *
   4:printConfig.c ****  * This program is free software: you can redistribute it and/or modify
   5:printConfig.c ****  * it under the terms of the GNU Lesser General Public License as published by
   6:printConfig.c ****  * the Free Software Foundation, either version 3 of the License, or
   7:printConfig.c ****  * (at your option) any later version.
   8:printConfig.c ****  *
   9:printConfig.c ****  * This program is distributed in the hope that it will be useful,
  10:printConfig.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:printConfig.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:printConfig.c ****  * GNU Lesser General Public License for more details.
  13:printConfig.c ****  *
  14:printConfig.c ****  * You should have received a copy of the GNU Lesser General Public License
  15:printConfig.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:printConfig.c ****  */
  17:printConfig.c **** #include <liberror.h>
  18:printConfig.c **** #include <stdio.h>
  19:printConfig.c **** #include "private.h"
  20:printConfig.c **** 
  21:printConfig.c **** // Print out the configuration tree
  22:printConfig.c **** //
  23:printConfig.c **** DLLEXPORT(USBStatus) usbPrintConfiguration(struct USBDevice *dev, FILE *stream, const char **error)
  51              		.loc 2 23 0
  52              		.cfi_startproc
  53 0010 55       		pushq	%rbp
  54              		.cfi_def_cfa_offset 16
  55              		.cfi_offset 6, -16
  56 0011 4889E5   		movq	%rsp, %rbp
  57              		.cfi_def_cfa_register 6
  58 0014 4157     		pushq	%r15
  59 0016 4156     		pushq	%r14
  60 0018 4155     		pushq	%r13
  61 001a 4154     		pushq	%r12
  62 001c 53       		pushq	%rbx
  63 001d 4881EC68 		subq	$1128, %rsp
  63      040000
  64              		.cfi_offset 15, -24
  65              		.cfi_offset 14, -32
  66              		.cfi_offset 13, -40
  67              		.cfi_offset 12, -48
  68              		.cfi_offset 3, -56
  69 0024 4889BD88 		movq	%rdi, -1144(%rbp)
  69      FBFFFF
  70 002b 4889B580 		movq	%rsi, -1152(%rbp)
  70      FBFFFF
  71 0032 48899578 		movq	%rdx, -1160(%rbp)
  71      FBFFFF
  72              		.loc 2 23 0
  73 0039 64488B04 		movq	%fs:40, %rax
  73      25280000 
  73      00
  74 0042 488945C8 		movq	%rax, -56(%rbp)
  75 0046 31C0     		xorl	%eax, %eax
  24:printConfig.c **** 	USBStatus retVal = USB_SUCCESS;
  76              		.loc 2 24 0
  77 0048 C78598FB 		movl	$0, -1128(%rbp)
  77      FFFF0000 
  77      0000
  25:printConfig.c **** 	uint8 descriptorBuffer[1024];
  26:printConfig.c **** 	uint8 *ptr = descriptorBuffer;
  78              		.loc 2 26 0
  79 0052 488D85C0 		leaq	-1088(%rbp), %rax
  79      FBFFFF
  80 0059 488985A0 		movq	%rax, -1120(%rbp)
  80      FBFFFF
  27:printConfig.c **** 	uint8 endpointNum, interfaceNum;
  28:printConfig.c **** 	struct libusb_config_descriptor *configDesc;
  29:printConfig.c **** 	struct libusb_interface_descriptor *interfaceDesc;
  30:printConfig.c **** 	struct libusb_endpoint_descriptor *endpointDesc;
  31:printConfig.c **** 	int status = libusb_control_transfer(
  32:printConfig.c **** 		dev->handle,
  81              		.loc 2 32 0
  82 0060 488B8588 		movq	-1144(%rbp), %rax
  82      FBFFFF
  83 0067 488B00   		movq	(%rax), %rax
  31:printConfig.c **** 		dev->handle,
  84              		.loc 2 31 0
  85 006a 488D95C0 		leaq	-1088(%rbp), %rdx
  85      FBFFFF
  86 0071 68881300 		pushq	$5000
  86      00
  87 0076 68000100 		pushq	$256
  87      00
  88 007b 4989D1   		movq	%rdx, %r9
  89 007e 41B80000 		movl	$0, %r8d
  89      0000
  90 0084 B9000200 		movl	$512, %ecx
  90      00
  91 0089 BA060000 		movl	$6, %edx
  91      00
  92 008e BE800000 		movl	$128, %esi
  92      00
  93 0093 4889C7   		movq	%rax, %rdi
  94 0096 E8000000 		call	libusb_control_transfer@PLT
  94      00
  95 009b 4883C410 		addq	$16, %rsp
  96 009f 89859CFB 		movl	%eax, -1124(%rbp)
  96      FFFF
  33:printConfig.c **** 		LIBUSB_ENDPOINT_IN | LIBUSB_REQUEST_TYPE_STANDARD | LIBUSB_RECIPIENT_DEVICE,
  34:printConfig.c **** 		LIBUSB_REQUEST_GET_DESCRIPTOR,  // bRequest
  35:printConfig.c **** 		0x0200,                         // wValue
  36:printConfig.c **** 		0x0000,                         // wIndex
  37:printConfig.c **** 		descriptorBuffer,
  38:printConfig.c **** 		256,                            // wLength
  39:printConfig.c **** 		5000                            // timeout (ms)
  40:printConfig.c **** 	);
  41:printConfig.c **** 	CHECK_STATUS(
  97              		.loc 2 41 0
  98 00a5 83BD9CFB 		cmpl	$0, -1124(%rbp)
  98      FFFF00
  99 00ac 7F3A     		jg	.L4
 100              		.loc 2 41 0 is_stmt 0 discriminator 1
 101 00ae 8B859CFB 		movl	-1124(%rbp), %eax
 101      FFFF
 102 00b4 89C7     		movl	%eax, %edi
 103 00b6 E8000000 		call	libusb_error_name@PLT
 103      00
 104 00bb 4889C2   		movq	%rax, %rdx
 105 00be 488B8578 		movq	-1160(%rbp), %rax
 105      FBFFFF
 106 00c5 488D3500 		leaq	.LC0(%rip), %rsi
 106      000000
 107 00cc 4889C7   		movq	%rax, %rdi
 108 00cf B8000000 		movl	$0, %eax
 108      00
 109 00d4 E8000000 		call	errRender@PLT
 109      00
 110 00d9 C78598FB 		movl	$9, -1128(%rbp)
 110      FFFF0900 
 110      0000
 111 00e3 E9040300 		jmp	.L5
 111      00
 112              	.L4:
  42:printConfig.c **** 		status <= 0, USB_CANNOT_GET_DESCRIPTOR, cleanup,
  43:printConfig.c **** 		"Failed to get descriptor: %s", libusb_error_name(status));
  44:printConfig.c **** 	configDesc = (struct libusb_config_descriptor *)ptr;
 113              		.loc 2 44 0 is_stmt 1
 114 00e8 488B85A0 		movq	-1120(%rbp), %rax
 114      FBFFFF
 115 00ef 488985A8 		movq	%rax, -1112(%rbp)
 115      FBFFFF
  45:printConfig.c **** 	fprintf(
  46:printConfig.c **** 		stream,
  47:printConfig.c **** 		"configDescriptor {\n    bLength = 0x%02X\n    bDescriptorType = 0x%02X\n    wTotalLength = 0x%04
  48:printConfig.c **** 		configDesc->bLength,
  49:printConfig.c **** 		configDesc->bDescriptorType,
  50:printConfig.c **** 		littleEndian16(configDesc->wTotalLength),
  51:printConfig.c **** 		configDesc->bNumInterfaces,
  52:printConfig.c **** 		configDesc->bConfigurationValue,
  53:printConfig.c **** 		configDesc->iConfiguration,
  54:printConfig.c **** 		configDesc->bmAttributes,
  55:printConfig.c **** 		configDesc->MaxPower
 116              		.loc 2 55 0
 117 00f6 488B85A8 		movq	-1112(%rbp), %rax
 117      FBFFFF
 118 00fd 0FB64008 		movzbl	8(%rax), %eax
  45:printConfig.c **** 	fprintf(
 119              		.loc 2 45 0
 120 0101 440FB6F0 		movzbl	%al, %r14d
  54:printConfig.c **** 		configDesc->MaxPower
 121              		.loc 2 54 0
 122 0105 488B85A8 		movq	-1112(%rbp), %rax
 122      FBFFFF
 123 010c 0FB64007 		movzbl	7(%rax), %eax
  45:printConfig.c **** 	fprintf(
 124              		.loc 2 45 0
 125 0110 440FB6E8 		movzbl	%al, %r13d
  53:printConfig.c **** 		configDesc->bmAttributes,
 126              		.loc 2 53 0
 127 0114 488B85A8 		movq	-1112(%rbp), %rax
 127      FBFFFF
 128 011b 0FB64006 		movzbl	6(%rax), %eax
  45:printConfig.c **** 	fprintf(
 129              		.loc 2 45 0
 130 011f 440FB6E0 		movzbl	%al, %r12d
  52:printConfig.c **** 		configDesc->iConfiguration,
 131              		.loc 2 52 0
 132 0123 488B85A8 		movq	-1112(%rbp), %rax
 132      FBFFFF
 133 012a 0FB64005 		movzbl	5(%rax), %eax
  45:printConfig.c **** 		stream,
 134              		.loc 2 45 0
 135 012e 0FB6D8   		movzbl	%al, %ebx
  51:printConfig.c **** 		configDesc->bConfigurationValue,
 136              		.loc 2 51 0
 137 0131 488B85A8 		movq	-1112(%rbp), %rax
 137      FBFFFF
 138 0138 0FB64004 		movzbl	4(%rax), %eax
  45:printConfig.c **** 		stream,
 139              		.loc 2 45 0
 140 013c 440FB6F8 		movzbl	%al, %r15d
  50:printConfig.c **** 		configDesc->bNumInterfaces,
 141              		.loc 2 50 0
 142 0140 488B85A8 		movq	-1112(%rbp), %rax
 142      FBFFFF
 143 0147 0FB74002 		movzwl	2(%rax), %eax
 144 014b 0FB7C0   		movzwl	%ax, %eax
 145 014e 89C7     		movl	%eax, %edi
 146 0150 E8ABFEFF 		call	littleEndian16
 146      FF
  45:printConfig.c **** 		stream,
 147              		.loc 2 45 0
 148 0155 0FB7F0   		movzwl	%ax, %esi
  49:printConfig.c **** 		littleEndian16(configDesc->wTotalLength),
 149              		.loc 2 49 0
 150 0158 488B85A8 		movq	-1112(%rbp), %rax
 150      FBFFFF
 151 015f 0FB64001 		movzbl	1(%rax), %eax
  45:printConfig.c **** 		stream,
 152              		.loc 2 45 0
 153 0163 0FB6C8   		movzbl	%al, %ecx
  48:printConfig.c **** 		configDesc->bDescriptorType,
 154              		.loc 2 48 0
 155 0166 488B85A8 		movq	-1112(%rbp), %rax
 155      FBFFFF
 156 016d 0FB600   		movzbl	(%rax), %eax
  45:printConfig.c **** 		stream,
 157              		.loc 2 45 0
 158 0170 0FB6D0   		movzbl	%al, %edx
 159 0173 488B8580 		movq	-1152(%rbp), %rax
 159      FBFFFF
 160 017a 4156     		pushq	%r14
 161 017c 4155     		pushq	%r13
 162 017e 4154     		pushq	%r12
 163 0180 53       		pushq	%rbx
 164 0181 4589F9   		movl	%r15d, %r9d
 165 0184 4189F0   		movl	%esi, %r8d
 166 0187 488D3500 		leaq	.LC1(%rip), %rsi
 166      000000
 167 018e 4889C7   		movq	%rax, %rdi
 168 0191 B8000000 		movl	$0, %eax
 168      00
 169 0196 E8000000 		call	fprintf@PLT
 169      00
 170 019b 4883C420 		addq	$32, %rsp
  56:printConfig.c **** 	);
  57:printConfig.c **** 	ptr += configDesc->bLength;
 171              		.loc 2 57 0
 172 019f 488B85A8 		movq	-1112(%rbp), %rax
 172      FBFFFF
 173 01a6 0FB600   		movzbl	(%rax), %eax
 174 01a9 0FB6C0   		movzbl	%al, %eax
 175 01ac 480185A0 		addq	%rax, -1120(%rbp)
 175      FBFFFF
  58:printConfig.c **** 	interfaceNum = configDesc->bNumInterfaces;
 176              		.loc 2 58 0
 177 01b3 488B85A8 		movq	-1112(%rbp), %rax
 177      FBFFFF
 178 01ba 0FB64004 		movzbl	4(%rax), %eax
 179 01be 888597FB 		movb	%al, -1129(%rbp)
 179      FFFF
  59:printConfig.c **** 	while ( interfaceNum-- ) {
 180              		.loc 2 59 0
 181 01c4 E9EB0100 		jmp	.L6
 181      00
 182              	.L9:
  60:printConfig.c **** 		interfaceDesc = (struct libusb_interface_descriptor *)ptr;
 183              		.loc 2 60 0
 184 01c9 488B85A0 		movq	-1120(%rbp), %rax
 184      FBFFFF
 185 01d0 488985B0 		movq	%rax, -1104(%rbp)
 185      FBFFFF
  61:printConfig.c **** 		fprintf(
  62:printConfig.c **** 			stream,
  63:printConfig.c **** 			"    interfaceDescriptor {\n        bLength = 0x%02X\n        bDescriptorType = 0x%02X\n        
  64:printConfig.c **** 			interfaceDesc->bLength,
  65:printConfig.c **** 			interfaceDesc->bDescriptorType,
  66:printConfig.c **** 			interfaceDesc->bInterfaceNumber,
  67:printConfig.c **** 			interfaceDesc->bAlternateSetting,
  68:printConfig.c **** 			interfaceDesc->bNumEndpoints,
  69:printConfig.c **** 			interfaceDesc->bInterfaceClass,
  70:printConfig.c **** 			interfaceDesc->bInterfaceSubClass,
  71:printConfig.c **** 			interfaceDesc->bInterfaceProtocol,
  72:printConfig.c **** 			interfaceDesc->iInterface
 186              		.loc 2 72 0
 187 01d7 488B85B0 		movq	-1104(%rbp), %rax
 187      FBFFFF
 188 01de 0FB64008 		movzbl	8(%rax), %eax
  61:printConfig.c **** 		fprintf(
 189              		.loc 2 61 0
 190 01e2 440FB6D0 		movzbl	%al, %r10d
  71:printConfig.c **** 			interfaceDesc->iInterface
 191              		.loc 2 71 0
 192 01e6 488B85B0 		movq	-1104(%rbp), %rax
 192      FBFFFF
 193 01ed 0FB64007 		movzbl	7(%rax), %eax
  61:printConfig.c **** 		fprintf(
 194              		.loc 2 61 0
 195 01f1 440FB6C8 		movzbl	%al, %r9d
  70:printConfig.c **** 			interfaceDesc->bInterfaceProtocol,
 196              		.loc 2 70 0
 197 01f5 488B85B0 		movq	-1104(%rbp), %rax
 197      FBFFFF
 198 01fc 0FB64006 		movzbl	6(%rax), %eax
  61:printConfig.c **** 		fprintf(
 199              		.loc 2 61 0
 200 0200 440FB6C0 		movzbl	%al, %r8d
  69:printConfig.c **** 			interfaceDesc->bInterfaceSubClass,
 201              		.loc 2 69 0
 202 0204 488B85B0 		movq	-1104(%rbp), %rax
 202      FBFFFF
 203 020b 0FB64005 		movzbl	5(%rax), %eax
  61:printConfig.c **** 			stream,
 204              		.loc 2 61 0
 205 020f 0FB6F8   		movzbl	%al, %edi
  68:printConfig.c **** 			interfaceDesc->bInterfaceClass,
 206              		.loc 2 68 0
 207 0212 488B85B0 		movq	-1104(%rbp), %rax
 207      FBFFFF
 208 0219 0FB64004 		movzbl	4(%rax), %eax
  61:printConfig.c **** 			stream,
 209              		.loc 2 61 0
 210 021d 0FB6F0   		movzbl	%al, %esi
  67:printConfig.c **** 			interfaceDesc->bNumEndpoints,
 211              		.loc 2 67 0
 212 0220 488B85B0 		movq	-1104(%rbp), %rax
 212      FBFFFF
 213 0227 0FB64003 		movzbl	3(%rax), %eax
  61:printConfig.c **** 			stream,
 214              		.loc 2 61 0
 215 022b 0FB6D8   		movzbl	%al, %ebx
  66:printConfig.c **** 			interfaceDesc->bAlternateSetting,
 216              		.loc 2 66 0
 217 022e 488B85B0 		movq	-1104(%rbp), %rax
 217      FBFFFF
 218 0235 0FB64002 		movzbl	2(%rax), %eax
  61:printConfig.c **** 			stream,
 219              		.loc 2 61 0
 220 0239 440FB6D8 		movzbl	%al, %r11d
  65:printConfig.c **** 			interfaceDesc->bInterfaceNumber,
 221              		.loc 2 65 0
 222 023d 488B85B0 		movq	-1104(%rbp), %rax
 222      FBFFFF
 223 0244 0FB64001 		movzbl	1(%rax), %eax
  61:printConfig.c **** 			stream,
 224              		.loc 2 61 0
 225 0248 0FB6C8   		movzbl	%al, %ecx
  64:printConfig.c **** 			interfaceDesc->bDescriptorType,
 226              		.loc 2 64 0
 227 024b 488B85B0 		movq	-1104(%rbp), %rax
 227      FBFFFF
 228 0252 0FB600   		movzbl	(%rax), %eax
  61:printConfig.c **** 			stream,
 229              		.loc 2 61 0
 230 0255 0FB6D0   		movzbl	%al, %edx
 231 0258 488B8580 		movq	-1152(%rbp), %rax
 231      FBFFFF
 232 025f 4883EC08 		subq	$8, %rsp
 233 0263 4152     		pushq	%r10
 234 0265 4151     		pushq	%r9
 235 0267 4150     		pushq	%r8
 236 0269 57       		pushq	%rdi
 237 026a 56       		pushq	%rsi
 238 026b 4189D9   		movl	%ebx, %r9d
 239 026e 4589D8   		movl	%r11d, %r8d
 240 0271 488D3500 		leaq	.LC2(%rip), %rsi
 240      000000
 241 0278 4889C7   		movq	%rax, %rdi
 242 027b B8000000 		movl	$0, %eax
 242      00
 243 0280 E8000000 		call	fprintf@PLT
 243      00
 244 0285 4883C430 		addq	$48, %rsp
  73:printConfig.c **** 		);
  74:printConfig.c **** 		ptr += interfaceDesc->bLength;			
 245              		.loc 2 74 0
 246 0289 488B85B0 		movq	-1104(%rbp), %rax
 246      FBFFFF
 247 0290 0FB600   		movzbl	(%rax), %eax
 248 0293 0FB6C0   		movzbl	%al, %eax
 249 0296 480185A0 		addq	%rax, -1120(%rbp)
 249      FBFFFF
  75:printConfig.c **** 		endpointNum = interfaceDesc->bNumEndpoints;
 250              		.loc 2 75 0
 251 029d 488B85B0 		movq	-1104(%rbp), %rax
 251      FBFFFF
 252 02a4 0FB64004 		movzbl	4(%rax), %eax
 253 02a8 888596FB 		movb	%al, -1130(%rbp)
 253      FFFF
  76:printConfig.c **** 		while ( endpointNum-- ) {
 254              		.loc 2 76 0
 255 02ae E9C90000 		jmp	.L7
 255      00
 256              	.L8:
  77:printConfig.c **** 			endpointDesc = (struct libusb_endpoint_descriptor *)ptr;
 257              		.loc 2 77 0
 258 02b3 488B85A0 		movq	-1120(%rbp), %rax
 258      FBFFFF
 259 02ba 488985B8 		movq	%rax, -1096(%rbp)
 259      FBFFFF
  78:printConfig.c **** 			fprintf(
  79:printConfig.c **** 				stream,
  80:printConfig.c **** 				"        endpointDescriptor {\n            bLength = 0x%02X\n            bDescriptorType = 0x%0
  81:printConfig.c **** 				endpointDesc->bLength,
  82:printConfig.c **** 				endpointDesc->bDescriptorType,
  83:printConfig.c **** 				endpointDesc->bEndpointAddress,
  84:printConfig.c **** 				endpointDesc->bmAttributes,
  85:printConfig.c **** 				littleEndian16(endpointDesc->wMaxPacketSize),
  86:printConfig.c **** 				endpointDesc->bInterval,
  87:printConfig.c **** 				endpointDesc->bRefresh,
  88:printConfig.c **** 				endpointDesc->bSynchAddress
 260              		.loc 2 88 0
 261 02c1 488B85B8 		movq	-1096(%rbp), %rax
 261      FBFFFF
 262 02c8 0FB64008 		movzbl	8(%rax), %eax
  78:printConfig.c **** 			fprintf(
 263              		.loc 2 78 0
 264 02cc 440FB6E8 		movzbl	%al, %r13d
  87:printConfig.c **** 				endpointDesc->bSynchAddress
 265              		.loc 2 87 0
 266 02d0 488B85B8 		movq	-1096(%rbp), %rax
 266      FBFFFF
 267 02d7 0FB64007 		movzbl	7(%rax), %eax
  78:printConfig.c **** 			fprintf(
 268              		.loc 2 78 0
 269 02db 440FB6E0 		movzbl	%al, %r12d
  86:printConfig.c **** 				endpointDesc->bRefresh,
 270              		.loc 2 86 0
 271 02df 488B85B8 		movq	-1096(%rbp), %rax
 271      FBFFFF
 272 02e6 0FB64006 		movzbl	6(%rax), %eax
  78:printConfig.c **** 			fprintf(
 273              		.loc 2 78 0
 274 02ea 0FB6D8   		movzbl	%al, %ebx
  85:printConfig.c **** 				endpointDesc->bInterval,
 275              		.loc 2 85 0
 276 02ed 488B85B8 		movq	-1096(%rbp), %rax
 276      FBFFFF
 277 02f4 0FB74004 		movzwl	4(%rax), %eax
 278 02f8 0FB7C0   		movzwl	%ax, %eax
 279 02fb 89C7     		movl	%eax, %edi
 280 02fd E8FEFCFF 		call	littleEndian16
 280      FF
  78:printConfig.c **** 				stream,
 281              		.loc 2 78 0
 282 0302 0FB7F0   		movzwl	%ax, %esi
  84:printConfig.c **** 				littleEndian16(endpointDesc->wMaxPacketSize),
 283              		.loc 2 84 0
 284 0305 488B85B8 		movq	-1096(%rbp), %rax
 284      FBFFFF
 285 030c 0FB64003 		movzbl	3(%rax), %eax
  78:printConfig.c **** 				stream,
 286              		.loc 2 78 0
 287 0310 440FB6C0 		movzbl	%al, %r8d
  83:printConfig.c **** 				endpointDesc->bmAttributes,
 288              		.loc 2 83 0
 289 0314 488B85B8 		movq	-1096(%rbp), %rax
 289      FBFFFF
 290 031b 0FB64002 		movzbl	2(%rax), %eax
  78:printConfig.c **** 				stream,
 291              		.loc 2 78 0
 292 031f 0FB6F8   		movzbl	%al, %edi
  82:printConfig.c **** 				endpointDesc->bEndpointAddress,
 293              		.loc 2 82 0
 294 0322 488B85B8 		movq	-1096(%rbp), %rax
 294      FBFFFF
 295 0329 0FB64001 		movzbl	1(%rax), %eax
  78:printConfig.c **** 				stream,
 296              		.loc 2 78 0
 297 032d 0FB6C8   		movzbl	%al, %ecx
  81:printConfig.c **** 				endpointDesc->bDescriptorType,
 298              		.loc 2 81 0
 299 0330 488B85B8 		movq	-1096(%rbp), %rax
 299      FBFFFF
 300 0337 0FB600   		movzbl	(%rax), %eax
  78:printConfig.c **** 				stream,
 301              		.loc 2 78 0
 302 033a 0FB6D0   		movzbl	%al, %edx
 303 033d 488B8580 		movq	-1152(%rbp), %rax
 303      FBFFFF
 304 0344 4155     		pushq	%r13
 305 0346 4154     		pushq	%r12
 306 0348 53       		pushq	%rbx
 307 0349 56       		pushq	%rsi
 308 034a 4589C1   		movl	%r8d, %r9d
 309 034d 4189F8   		movl	%edi, %r8d
 310 0350 488D3500 		leaq	.LC3(%rip), %rsi
 310      000000
 311 0357 4889C7   		movq	%rax, %rdi
 312 035a B8000000 		movl	$0, %eax
 312      00
 313 035f E8000000 		call	fprintf@PLT
 313      00
 314 0364 4883C420 		addq	$32, %rsp
  89:printConfig.c **** 			);
  90:printConfig.c **** 			ptr += endpointDesc->bLength;
 315              		.loc 2 90 0
 316 0368 488B85B8 		movq	-1096(%rbp), %rax
 316      FBFFFF
 317 036f 0FB600   		movzbl	(%rax), %eax
 318 0372 0FB6C0   		movzbl	%al, %eax
 319 0375 480185A0 		addq	%rax, -1120(%rbp)
 319      FBFFFF
 320              	.L7:
  76:printConfig.c **** 			endpointDesc = (struct libusb_endpoint_descriptor *)ptr;
 321              		.loc 2 76 0
 322 037c 0FB68596 		movzbl	-1130(%rbp), %eax
 322      FBFFFF
 323 0383 8D50FF   		leal	-1(%rax), %edx
 324 0386 889596FB 		movb	%dl, -1130(%rbp)
 324      FFFF
 325 038c 84C0     		testb	%al, %al
 326 038e 0F851FFF 		jne	.L8
 326      FFFF
  91:printConfig.c **** 		}
  92:printConfig.c **** 		fprintf(stream, "    }\n");
 327              		.loc 2 92 0
 328 0394 488B8580 		movq	-1152(%rbp), %rax
 328      FBFFFF
 329 039b 4889C1   		movq	%rax, %rcx
 330 039e BA060000 		movl	$6, %edx
 330      00
 331 03a3 BE010000 		movl	$1, %esi
 331      00
 332 03a8 488D3D00 		leaq	.LC4(%rip), %rdi
 332      000000
 333 03af E8000000 		call	fwrite@PLT
 333      00
 334              	.L6:
  59:printConfig.c **** 		interfaceDesc = (struct libusb_interface_descriptor *)ptr;
 335              		.loc 2 59 0
 336 03b4 0FB68597 		movzbl	-1129(%rbp), %eax
 336      FBFFFF
 337 03bb 8D50FF   		leal	-1(%rax), %edx
 338 03be 889597FB 		movb	%dl, -1129(%rbp)
 338      FFFF
 339 03c4 84C0     		testb	%al, %al
 340 03c6 0F85FDFD 		jne	.L9
 340      FFFF
  93:printConfig.c **** 	}
  94:printConfig.c **** 	fprintf(stream, "}\n");
 341              		.loc 2 94 0
 342 03cc 488B8580 		movq	-1152(%rbp), %rax
 342      FBFFFF
 343 03d3 4889C1   		movq	%rax, %rcx
 344 03d6 BA020000 		movl	$2, %edx
 344      00
 345 03db BE010000 		movl	$1, %esi
 345      00
 346 03e0 488D3D00 		leaq	.LC5(%rip), %rdi
 346      000000
 347 03e7 E8000000 		call	fwrite@PLT
 347      00
 348              	.L5:
  95:printConfig.c **** cleanup:
  96:printConfig.c **** 	return retVal;
 349              		.loc 2 96 0
 350 03ec 8B8598FB 		movl	-1128(%rbp), %eax
 350      FFFF
  97:printConfig.c **** }
 351              		.loc 2 97 0
 352 03f2 488B5DC8 		movq	-56(%rbp), %rbx
 353 03f6 6448331C 		xorq	%fs:40, %rbx
 353      25280000 
 353      00
 354 03ff 7405     		je	.L11
 355 0401 E8000000 		call	__stack_chk_fail@PLT
 355      00
 356              	.L11:
 357 0406 488D65D8 		leaq	-40(%rbp), %rsp
 358 040a 5B       		popq	%rbx
 359 040b 415C     		popq	%r12
 360 040d 415D     		popq	%r13
 361 040f 415E     		popq	%r14
 362 0411 415F     		popq	%r15
 363 0413 5D       		popq	%rbp
 364              		.cfi_def_cfa 7, 8
 365 0414 C3       		ret
 366              		.cfi_endproc
 367              	.LFE19:
 369              	.Letext0:
 370              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 371              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 372              		.file 5 "/usr/include/stdio.h"
 373              		.file 6 "/usr/include/libio.h"
 374              		.file 7 "libusbwrap.h"
 375              		.file 8 "unbounded_queue.h"
 376              		.file 9 "/usr/include/stdint.h"
 377              		.file 10 "/usr/include/libusb-1.0/libusb.h"
 378              		.file 11 "private.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 printConfig.c
     /tmp/ccNW7UGM.s:5      .text:0000000000000000 littleEndian16
     /tmp/ccNW7UGM.s:48     .text:0000000000000010 usbPrintConfiguration

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
libusb_control_transfer
libusb_error_name
errRender
fprintf
fwrite
__stack_chk_fail
