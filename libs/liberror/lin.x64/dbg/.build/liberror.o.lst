   1              		.file	"liberror.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata
   5              	.LC0:
   6 0000 6C696265 		.string	"liberror.c"
   6      72726F72 
   6      2E6300
   7              	.LC1:
   8 000b 2A657272 		.string	"*error == NULL"
   8      6F72203D 
   8      3D204E55 
   8      4C4C00
   9              		.text
  10              		.globl	errRender
  12              	errRender:
  13              	.LFB4:
  14              		.file 1 "liberror.c"
   1:liberror.c    **** /*
   2:liberror.c    ****  * Copyright (C) 2009-2012 Chris McClelland
   3:liberror.c    ****  *
   4:liberror.c    ****  * This program is free software: you can redistribute it and/or modify
   5:liberror.c    ****  * it under the terms of the GNU Lesser General Public License as published by
   6:liberror.c    ****  * the Free Software Foundation, either version 3 of the License, or
   7:liberror.c    ****  * (at your option) any later version.
   8:liberror.c    ****  *
   9:liberror.c    ****  * This program is distributed in the hope that it will be useful,
  10:liberror.c    ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:liberror.c    ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:liberror.c    ****  * GNU Lesser General Public License for more details.
  13:liberror.c    ****  *
  14:liberror.c    ****  * You should have received a copy of the GNU Lesser General Public License
  15:liberror.c    ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:liberror.c    ****  */
  17:liberror.c    **** #ifdef WIN32
  18:liberror.c    **** 	#ifdef __MINGW32__
  19:liberror.c    **** 		#include <stddef.h>
  20:liberror.c    **** 		#include <stdio.h>
  21:liberror.c    **** 		#include <errno.h>
  22:liberror.c    **** 		__MINGW_IMPORT int _sys_nerr;
  23:liberror.c    **** 		#define sys_nerr _sys_nerr
  24:liberror.c    **** 		__MINGW_IMPORT char* _sys_errlist[];
  25:liberror.c    **** 		#define sys_errlist _sys_errlist
  26:liberror.c    **** 		static int strerror_r(int errCode, char *buffer, size_t bufSize) {
  27:liberror.c    **** 			size_t numBytes;
  28:liberror.c    **** 			if ( errCode < sys_nerr ) {
  29:liberror.c    **** 				numBytes = snprintf(buffer, bufSize, "%s", sys_errlist[errCode]);
  30:liberror.c    **** 				return (numBytes >= bufSize) ? ERANGE : 0;
  31:liberror.c    **** 			} else {
  32:liberror.c    **** 				numBytes = snprintf(buffer, bufSize, "Unknown error %d", errCode);
  33:liberror.c    **** 				return EINVAL;
  34:liberror.c    **** 			}
  35:liberror.c    **** 		}
  36:liberror.c    **** 	#elif defined(_MSC_VER)
  37:liberror.c    **** 		#define strerror_r(err, buf, size) strerror_s(buf, size, err)
  38:liberror.c    **** 	#endif
  39:liberror.c    **** #else
  40:liberror.c    **** 	#undef _GNU_SOURCE
  41:liberror.c    **** 	#define _XOPEN_SOURCE 600
  42:liberror.c    **** #endif
  43:liberror.c    **** #include <stdio.h>
  44:liberror.c    **** #include <stdlib.h>
  45:liberror.c    **** #include <stdarg.h>
  46:liberror.c    **** #include <string.h>
  47:liberror.c    **** #include <errno.h>
  48:liberror.c    **** #include <assert.h>
  49:liberror.c    **** #include "liberror.h"
  50:liberror.c    **** 
  51:liberror.c    **** // Code inspired by http://linux.die.net/man/3/snprintf
  52:liberror.c    **** //
  53:liberror.c    **** DLLEXPORT(void) errRender(const char **error, const char *format, ...) {
  15              		.loc 1 53 0
  16              		.cfi_startproc
  17 0000 55       		pushq	%rbp
  18              		.cfi_def_cfa_offset 16
  19              		.cfi_offset 6, -16
  20 0001 4889E5   		movq	%rsp, %rbp
  21              		.cfi_def_cfa_register 6
  22 0004 4881EC00 		subq	$256, %rsp
  22      010000
  23 000b 4889BD08 		movq	%rdi, -248(%rbp)
  23      FFFFFF
  24 0012 4889B500 		movq	%rsi, -256(%rbp)
  24      FFFFFF
  25 0019 48899560 		movq	%rdx, -160(%rbp)
  25      FFFFFF
  26 0020 48898D68 		movq	%rcx, -152(%rbp)
  26      FFFFFF
  27 0027 4C898570 		movq	%r8, -144(%rbp)
  27      FFFFFF
  28 002e 4C898D78 		movq	%r9, -136(%rbp)
  28      FFFFFF
  29 0035 84C0     		testb	%al, %al
  30 0037 7420     		je	.L2
  31 0039 0F294580 		movaps	%xmm0, -128(%rbp)
  32 003d 0F294D90 		movaps	%xmm1, -112(%rbp)
  33 0041 0F2955A0 		movaps	%xmm2, -96(%rbp)
  34 0045 0F295DB0 		movaps	%xmm3, -80(%rbp)
  35 0049 0F2965C0 		movaps	%xmm4, -64(%rbp)
  36 004d 0F296DD0 		movaps	%xmm5, -48(%rbp)
  37 0051 0F2975E0 		movaps	%xmm6, -32(%rbp)
  38 0055 0F297DF0 		movaps	%xmm7, -16(%rbp)
  39              	.L2:
  40              		.loc 1 53 0
  41 0059 64488B04 		movq	%fs:40, %rax
  41      25280000 
  41      00
  42 0062 48898548 		movq	%rax, -184(%rbp)
  42      FFFFFF
  43 0069 31C0     		xorl	%eax, %eax
  54:liberror.c    **** 	if ( error ) {
  44              		.loc 1 54 0
  45 006b 4883BD08 		cmpq	$0, -248(%rbp)
  45      FFFFFF00 
  46 0073 0F847401 		je	.L1
  46      0000
  47              	.LBB2:
  55:liberror.c    **** 		// Guess we need no more than 512 bytes
  56:liberror.c    **** 		int status;
  57:liberror.c    **** 		size_t size = 512;
  48              		.loc 1 57 0
  49 0079 48C78518 		movq	$512, -232(%rbp)
  49      FFFFFF00 
  49      020000
  58:liberror.c    **** 		char *bufPtr, *newBufPtr;
  59:liberror.c    **** 		va_list argList;
  60:liberror.c    **** 		assert(*error == NULL);
  50              		.loc 1 60 0
  51 0084 488B8508 		movq	-248(%rbp), %rax
  51      FFFFFF
  52 008b 488B00   		movq	(%rax), %rax
  53 008e 4885C0   		testq	%rax, %rax
  54 0091 741F     		je	.L4
  55              		.loc 1 60 0 is_stmt 0 discriminator 1
  56 0093 488D0D00 		leaq	__PRETTY_FUNCTION__.2551(%rip), %rcx
  56      000000
  57 009a BA3C0000 		movl	$60, %edx
  57      00
  58 009f 488D3500 		leaq	.LC0(%rip), %rsi
  58      000000
  59 00a6 488D3D00 		leaq	.LC1(%rip), %rdi
  59      000000
  60 00ad E8000000 		call	__assert_fail@PLT
  60      00
  61              	.L4:
  61:liberror.c    **** 		bufPtr = (char*)malloc(size);
  62              		.loc 1 61 0 is_stmt 1
  63 00b2 488B8518 		movq	-232(%rbp), %rax
  63      FFFFFF
  64 00b9 4889C7   		movq	%rax, %rdi
  65 00bc E8000000 		call	malloc@PLT
  65      00
  66 00c1 48898520 		movq	%rax, -224(%rbp)
  66      FFFFFF
  62:liberror.c    **** 		if ( bufPtr == NULL ) {
  67              		.loc 1 62 0
  68 00c8 4883BD20 		cmpq	$0, -224(%rbp)
  68      FFFFFF00 
  69 00d0 7513     		jne	.L5
  63:liberror.c    **** 			// Insufficient memory
  64:liberror.c    **** 			*error = NULL;
  70              		.loc 1 64 0
  71 00d2 488B8508 		movq	-248(%rbp), %rax
  71      FFFFFF
  72 00d9 48C70000 		movq	$0, (%rax)
  72      000000
  65:liberror.c    **** 			return;
  73              		.loc 1 65 0
  74 00e0 E9080100 		jmp	.L1
  74      00
  75              	.L5:
  66:liberror.c    **** 		}
  67:liberror.c    **** 		for ( ; ; ) {
  68:liberror.c    **** 			// Try to print in the allocated space
  69:liberror.c    **** 			va_start(argList, format);
  76              		.loc 1 69 0
  77 00e5 C78530FF 		movl	$16, -208(%rbp)
  77      FFFF1000 
  77      0000
  78 00ef C78534FF 		movl	$48, -204(%rbp)
  78      FFFF3000 
  78      0000
  79 00f9 488D4510 		leaq	16(%rbp), %rax
  80 00fd 48898538 		movq	%rax, -200(%rbp)
  80      FFFFFF
  81 0104 488D8550 		leaq	-176(%rbp), %rax
  81      FFFFFF
  82 010b 48898540 		movq	%rax, -192(%rbp)
  82      FFFFFF
  70:liberror.c    **** 			status = vsnprintf(bufPtr, size, format, argList);
  83              		.loc 1 70 0
  84 0112 488D8D30 		leaq	-208(%rbp), %rcx
  84      FFFFFF
  85 0119 488B9500 		movq	-256(%rbp), %rdx
  85      FFFFFF
  86 0120 488BB518 		movq	-232(%rbp), %rsi
  86      FFFFFF
  87 0127 488B8520 		movq	-224(%rbp), %rax
  87      FFFFFF
  88 012e 4889C7   		movq	%rax, %rdi
  89 0131 E8000000 		call	vsnprintf@PLT
  89      00
  90 0136 898514FF 		movl	%eax, -236(%rbp)
  90      FFFF
  71:liberror.c    **** 			va_end(argList);
  72:liberror.c    **** 			
  73:liberror.c    **** 			// If that worked, return the string
  74:liberror.c    **** 			if ( status != -1 && (size_t)status < size ) {
  91              		.loc 1 74 0
  92 013c 83BD14FF 		cmpl	$-1, -236(%rbp)
  92      FFFFFF
  93 0143 7427     		je	.L7
  94              		.loc 1 74 0 is_stmt 0 discriminator 1
  95 0145 8B8514FF 		movl	-236(%rbp), %eax
  95      FFFF
  96 014b 4898     		cltq
  97 014d 483B8518 		cmpq	-232(%rbp), %rax
  97      FFFFFF
  98 0154 7316     		jnb	.L7
  75:liberror.c    **** 				*error = bufPtr;
  99              		.loc 1 75 0 is_stmt 1
 100 0156 488B8508 		movq	-248(%rbp), %rax
 100      FFFFFF
 101 015d 488B9520 		movq	-224(%rbp), %rdx
 101      FFFFFF
 102 0164 488910   		movq	%rdx, (%rax)
  76:liberror.c    **** 				return;
 103              		.loc 1 76 0
 104 0167 E9810000 		jmp	.L1
 104      00
 105              	.L7:
  77:liberror.c    **** 			}
  78:liberror.c    **** 			
  79:liberror.c    **** 			// Else try again with more space
  80:liberror.c    **** 			if ( status == -1 ) {
 106              		.loc 1 80 0
 107 016c 83BD14FF 		cmpl	$-1, -236(%rbp)
 107      FFFFFF
 108 0173 7509     		jne	.L8
  81:liberror.c    **** 				// vsnprintf() in glibc 2.0 and MSVC not C99-compliant: returns -1 if buf too small
  82:liberror.c    **** 				size *= 2;
 109              		.loc 1 82 0
 110 0175 48D1A518 		salq	-232(%rbp)
 110      FFFFFF
 111 017c EB13     		jmp	.L9
 112              	.L8:
  83:liberror.c    **** 			} else {
  84:liberror.c    **** 				// vsnprintf() in glibc 2.1 is C99-compliant: returns the exact no. of bytes needed
  85:liberror.c    **** 				size = (size_t)status + 1;
 113              		.loc 1 85 0
 114 017e 8B8514FF 		movl	-236(%rbp), %eax
 114      FFFF
 115 0184 4898     		cltq
 116 0186 4883C001 		addq	$1, %rax
 117 018a 48898518 		movq	%rax, -232(%rbp)
 117      FFFFFF
 118              	.L9:
  86:liberror.c    **** 			}
  87:liberror.c    **** 			newBufPtr = (char*)realloc(bufPtr, size);
 119              		.loc 1 87 0
 120 0191 488B9518 		movq	-232(%rbp), %rdx
 120      FFFFFF
 121 0198 488B8520 		movq	-224(%rbp), %rax
 121      FFFFFF
 122 019f 4889D6   		movq	%rdx, %rsi
 123 01a2 4889C7   		movq	%rax, %rdi
 124 01a5 E8000000 		call	realloc@PLT
 124      00
 125 01aa 48898528 		movq	%rax, -216(%rbp)
 125      FFFFFF
  88:liberror.c    **** 			if ( newBufPtr == NULL ) {
 126              		.loc 1 88 0
 127 01b1 4883BD28 		cmpq	$0, -216(%rbp)
 127      FFFFFF00 
 128 01b9 751F     		jne	.L10
  89:liberror.c    **** 				free(bufPtr);
 129              		.loc 1 89 0
 130 01bb 488B8520 		movq	-224(%rbp), %rax
 130      FFFFFF
 131 01c2 4889C7   		movq	%rax, %rdi
 132 01c5 E8000000 		call	free@PLT
 132      00
  90:liberror.c    **** 				*error = NULL;
 133              		.loc 1 90 0
 134 01ca 488B8508 		movq	-248(%rbp), %rax
 134      FFFFFF
 135 01d1 48C70000 		movq	$0, (%rax)
 135      000000
  91:liberror.c    **** 				return;
 136              		.loc 1 91 0
 137 01d8 EB13     		jmp	.L1
 138              	.L10:
  92:liberror.c    **** 			} else {
  93:liberror.c    **** 				bufPtr = newBufPtr;
 139              		.loc 1 93 0
 140 01da 488B8528 		movq	-216(%rbp), %rax
 140      FFFFFF
 141 01e1 48898520 		movq	%rax, -224(%rbp)
 141      FFFFFF
  94:liberror.c    **** 			}
  95:liberror.c    **** 		}
 142              		.loc 1 95 0
 143 01e8 E9F8FEFF 		jmp	.L5
 143      FF
 144              	.L1:
 145              	.LBE2:
  96:liberror.c    **** 	}
  97:liberror.c    **** }
 146              		.loc 1 97 0
 147 01ed 488B8548 		movq	-184(%rbp), %rax
 147      FFFFFF
 148 01f4 64483304 		xorq	%fs:40, %rax
 148      25280000 
 148      00
 149 01fd 7405     		je	.L11
 150 01ff E8000000 		call	__stack_chk_fail@PLT
 150      00
 151              	.L11:
 152 0204 C9       		leave
 153              		.cfi_def_cfa 7, 8
 154 0205 C3       		ret
 155              		.cfi_endproc
 156              	.LFE4:
 158              		.globl	errPrefix
 160              	errPrefix:
 161              	.LFB5:
  98:liberror.c    **** 
  99:liberror.c    **** // Add a prefix to the front of the error by reallocating & copying
 100:liberror.c    **** //
 101:liberror.c    **** DLLEXPORT(void) errPrefix(const char **error, const char *prefix) {
 162              		.loc 1 101 0
 163              		.cfi_startproc
 164 0206 55       		pushq	%rbp
 165              		.cfi_def_cfa_offset 16
 166              		.cfi_offset 6, -16
 167 0207 4889E5   		movq	%rsp, %rbp
 168              		.cfi_def_cfa_register 6
 169 020a 4883EC40 		subq	$64, %rsp
 170 020e 48897DC8 		movq	%rdi, -56(%rbp)
 171 0212 488975C0 		movq	%rsi, -64(%rbp)
 102:liberror.c    **** 	if ( !prefix || !error ) {
 172              		.loc 1 102 0
 173 0216 48837DC0 		cmpq	$0, -64(%rbp)
 173      00
 174 021b 0F843101 		je	.L18
 174      0000
 175              		.loc 1 102 0 is_stmt 0 discriminator 1
 176 0221 48837DC8 		cmpq	$0, -56(%rbp)
 176      00
 177 0226 0F842601 		je	.L18
 177      0000
 103:liberror.c    **** 		return;
 104:liberror.c    **** 	}
 105:liberror.c    **** 	if ( *error ) {
 178              		.loc 1 105 0 is_stmt 1
 179 022c 488B45C8 		movq	-56(%rbp), %rax
 180 0230 488B00   		movq	(%rax), %rax
 181 0233 4885C0   		testq	%rax, %rax
 182 0236 0F84DA00 		je	.L16
 182      0000
 183              	.LBB3:
 106:liberror.c    **** 		// There's already something there - prefix it
 107:liberror.c    **** 		char *newError, *p;
 108:liberror.c    **** 		const size_t pLen = strlen(prefix); // ": " and null terminator
 184              		.loc 1 108 0
 185 023c 488B45C0 		movq	-64(%rbp), %rax
 186 0240 4889C7   		movq	%rax, %rdi
 187 0243 E8000000 		call	strlen@PLT
 187      00
 188 0248 488945D8 		movq	%rax, -40(%rbp)
 109:liberror.c    **** 		const size_t len = pLen + strlen(*error) + 3; // ": " and null terminator
 189              		.loc 1 109 0
 190 024c 488B45C8 		movq	-56(%rbp), %rax
 191 0250 488B00   		movq	(%rax), %rax
 192 0253 4889C7   		movq	%rax, %rdi
 193 0256 E8000000 		call	strlen@PLT
 193      00
 194 025b 4889C2   		movq	%rax, %rdx
 195 025e 488B45D8 		movq	-40(%rbp), %rax
 196 0262 4801D0   		addq	%rdx, %rax
 197 0265 4883C003 		addq	$3, %rax
 198 0269 488945E0 		movq	%rax, -32(%rbp)
 110:liberror.c    **** 		p = newError = (char*)malloc(len);
 199              		.loc 1 110 0
 200 026d 488B45E0 		movq	-32(%rbp), %rax
 201 0271 4889C7   		movq	%rax, %rdi
 202 0274 E8000000 		call	malloc@PLT
 202      00
 203 0279 488945E8 		movq	%rax, -24(%rbp)
 204 027d 488B45E8 		movq	-24(%rbp), %rax
 205 0281 488945F0 		movq	%rax, -16(%rbp)
 111:liberror.c    **** 		if ( newError == NULL ) {
 206              		.loc 1 111 0
 207 0285 48837DE8 		cmpq	$0, -24(%rbp)
 207      00
 208 028a 751F     		jne	.L17
 112:liberror.c    **** 			errFree(*error);
 209              		.loc 1 112 0
 210 028c 488B45C8 		movq	-56(%rbp), %rax
 211 0290 488B00   		movq	(%rax), %rax
 212 0293 4889C7   		movq	%rax, %rdi
 213 0296 E8000000 		call	errFree@PLT
 213      00
 113:liberror.c    **** 			*error = NULL;
 214              		.loc 1 113 0
 215 029b 488B45C8 		movq	-56(%rbp), %rax
 216 029f 48C70000 		movq	$0, (%rax)
 216      000000
 114:liberror.c    **** 			return;
 217              		.loc 1 114 0
 218 02a6 E9A80000 		jmp	.L12
 218      00
 219              	.L17:
 115:liberror.c    **** 		}
 116:liberror.c    **** 		strcpy(p, prefix);
 220              		.loc 1 116 0
 221 02ab 488B55C0 		movq	-64(%rbp), %rdx
 222 02af 488B45F0 		movq	-16(%rbp), %rax
 223 02b3 4889D6   		movq	%rdx, %rsi
 224 02b6 4889C7   		movq	%rax, %rdi
 225 02b9 E8000000 		call	strcpy@PLT
 225      00
 117:liberror.c    **** 		p += pLen;
 226              		.loc 1 117 0
 227 02be 488B45D8 		movq	-40(%rbp), %rax
 228 02c2 480145F0 		addq	%rax, -16(%rbp)
 118:liberror.c    **** 		*p++ = ':';
 229              		.loc 1 118 0
 230 02c6 488B45F0 		movq	-16(%rbp), %rax
 231 02ca 488D5001 		leaq	1(%rax), %rdx
 232 02ce 488955F0 		movq	%rdx, -16(%rbp)
 233 02d2 C6003A   		movb	$58, (%rax)
 119:liberror.c    **** 		*p++ = ' ';
 234              		.loc 1 119 0
 235 02d5 488B45F0 		movq	-16(%rbp), %rax
 236 02d9 488D5001 		leaq	1(%rax), %rdx
 237 02dd 488955F0 		movq	%rdx, -16(%rbp)
 238 02e1 C60020   		movb	$32, (%rax)
 120:liberror.c    **** 		strcpy(p, *error);
 239              		.loc 1 120 0
 240 02e4 488B45C8 		movq	-56(%rbp), %rax
 241 02e8 488B10   		movq	(%rax), %rdx
 242 02eb 488B45F0 		movq	-16(%rbp), %rax
 243 02ef 4889D6   		movq	%rdx, %rsi
 244 02f2 4889C7   		movq	%rax, %rdi
 245 02f5 E8000000 		call	strcpy@PLT
 245      00
 121:liberror.c    **** 		errFree(*error);
 246              		.loc 1 121 0
 247 02fa 488B45C8 		movq	-56(%rbp), %rax
 248 02fe 488B00   		movq	(%rax), %rax
 249 0301 4889C7   		movq	%rax, %rdi
 250 0304 E8000000 		call	errFree@PLT
 250      00
 122:liberror.c    **** 		*error = newError;
 251              		.loc 1 122 0
 252 0309 488B45C8 		movq	-56(%rbp), %rax
 253 030d 488B55E8 		movq	-24(%rbp), %rdx
 254 0311 488910   		movq	%rdx, (%rax)
 255              	.LBE3:
 256 0314 EB3D     		jmp	.L12
 257              	.L16:
 258              	.LBB4:
 123:liberror.c    **** 	} else {
 124:liberror.c    **** 		// Nothing is already there, so just copy
 125:liberror.c    **** 		char *newError = (char*)malloc(strlen(prefix) + 1);
 259              		.loc 1 125 0
 260 0316 488B45C0 		movq	-64(%rbp), %rax
 261 031a 4889C7   		movq	%rax, %rdi
 262 031d E8000000 		call	strlen@PLT
 262      00
 263 0322 4883C001 		addq	$1, %rax
 264 0326 4889C7   		movq	%rax, %rdi
 265 0329 E8000000 		call	malloc@PLT
 265      00
 266 032e 488945F8 		movq	%rax, -8(%rbp)
 126:liberror.c    **** 		strcpy(newError, prefix);
 267              		.loc 1 126 0
 268 0332 488B55C0 		movq	-64(%rbp), %rdx
 269 0336 488B45F8 		movq	-8(%rbp), %rax
 270 033a 4889D6   		movq	%rdx, %rsi
 271 033d 4889C7   		movq	%rax, %rdi
 272 0340 E8000000 		call	strcpy@PLT
 272      00
 127:liberror.c    **** 		*error = newError;
 273              		.loc 1 127 0
 274 0345 488B45C8 		movq	-56(%rbp), %rax
 275 0349 488B55F8 		movq	-8(%rbp), %rdx
 276 034d 488910   		movq	%rdx, (%rax)
 277 0350 EB01     		jmp	.L12
 278              	.L18:
 279              	.LBE4:
 103:liberror.c    **** 	}
 280              		.loc 1 103 0
 281 0352 90       		nop
 282              	.L12:
 128:liberror.c    **** 	}
 129:liberror.c    **** }
 283              		.loc 1 129 0
 284 0353 C9       		leave
 285              		.cfi_def_cfa 7, 8
 286 0354 C3       		ret
 287              		.cfi_endproc
 288              	.LFE5:
 290              		.globl	errRenderStd
 292              	errRenderStd:
 293              	.LFB6:
 130:liberror.c    **** 
 131:liberror.c    **** // Render the last libC error in the same way that errRender() does
 132:liberror.c    **** //
 133:liberror.c    **** DLLEXPORT(void) errRenderStd(const char **error) {
 294              		.loc 1 133 0
 295              		.cfi_startproc
 296 0355 55       		pushq	%rbp
 297              		.cfi_def_cfa_offset 16
 298              		.cfi_offset 6, -16
 299 0356 4889E5   		movq	%rsp, %rbp
 300              		.cfi_def_cfa_register 6
 301 0359 4883EC30 		subq	$48, %rsp
 302 035d 48897DD8 		movq	%rdi, -40(%rbp)
 134:liberror.c    **** 	if ( error ) {
 303              		.loc 1 134 0
 304 0361 48837DD8 		cmpq	$0, -40(%rbp)
 304      00
 305 0366 0F84CD00 		je	.L19
 305      0000
 306              	.LBB5:
 135:liberror.c    **** 		// Guess we need no more than 512 bytes
 136:liberror.c    **** 		int status;
 137:liberror.c    **** 		size_t size = 512;
 307              		.loc 1 137 0
 308 036c 48C745E8 		movq	$512, -24(%rbp)
 308      00020000 
 138:liberror.c    **** 		char *bufPtr, *newBufPtr;
 139:liberror.c    **** 		const int errSave = errno;
 309              		.loc 1 139 0
 310 0374 E8000000 		call	__errno_location@PLT
 310      00
 311 0379 8B00     		movl	(%rax), %eax
 312 037b 8945E0   		movl	%eax, -32(%rbp)
 140:liberror.c    **** 		bufPtr = (char*)malloc(size);
 313              		.loc 1 140 0
 314 037e 488B45E8 		movq	-24(%rbp), %rax
 315 0382 4889C7   		movq	%rax, %rdi
 316 0385 E8000000 		call	malloc@PLT
 316      00
 317 038a 488945F0 		movq	%rax, -16(%rbp)
 141:liberror.c    **** 		if ( bufPtr == NULL ) {
 318              		.loc 1 141 0
 319 038e 48837DF0 		cmpq	$0, -16(%rbp)
 319      00
 320 0393 7510     		jne	.L21
 142:liberror.c    **** 			// Insufficient memory
 143:liberror.c    **** 			*error = NULL;
 321              		.loc 1 143 0
 322 0395 488B45D8 		movq	-40(%rbp), %rax
 323 0399 48C70000 		movq	$0, (%rax)
 323      000000
 144:liberror.c    **** 			return;
 324              		.loc 1 144 0
 325 03a0 E9940000 		jmp	.L19
 325      00
 326              	.L21:
 145:liberror.c    **** 		}
 146:liberror.c    **** 		for ( ; ; ) {
 147:liberror.c    **** 			// Try to print in the allocated space
 148:liberror.c    **** 			status = strerror_r(errSave, bufPtr, size);
 327              		.loc 1 148 0
 328 03a5 488B55E8 		movq	-24(%rbp), %rdx
 329 03a9 488B4DF0 		movq	-16(%rbp), %rcx
 330 03ad 8B45E0   		movl	-32(%rbp), %eax
 331 03b0 4889CE   		movq	%rcx, %rsi
 332 03b3 89C7     		movl	%eax, %edi
 333 03b5 E8000000 		call	__xpg_strerror_r@PLT
 333      00
 334 03ba 8945E4   		movl	%eax, -28(%rbp)
 149:liberror.c    **** 			if ( status == 0 ) {
 335              		.loc 1 149 0
 336 03bd 837DE400 		cmpl	$0, -28(%rbp)
 337 03c1 750D     		jne	.L22
 150:liberror.c    **** 				// Yay, it fits! (WIN32 comes through here even if the message was truncated...doh)
 151:liberror.c    **** 				*error = bufPtr;
 338              		.loc 1 151 0
 339 03c3 488B45D8 		movq	-40(%rbp), %rax
 340 03c7 488B55F0 		movq	-16(%rbp), %rdx
 341 03cb 488910   		movq	%rdx, (%rax)
 152:liberror.c    **** 				return;
 342              		.loc 1 152 0
 343 03ce EB69     		jmp	.L19
 344              	.L22:
 153:liberror.c    **** 			} else if ( status == -1 && errno == ERANGE ) {
 345              		.loc 1 153 0
 346 03d0 837DE4FF 		cmpl	$-1, -28(%rbp)
 347 03d4 7530     		jne	.L23
 348              		.loc 1 153 0 is_stmt 0 discriminator 1
 349 03d6 E8000000 		call	__errno_location@PLT
 349      00
 350 03db 8B00     		movl	(%rax), %eax
 351 03dd 83F822   		cmpl	$34, %eax
 352 03e0 7524     		jne	.L23
 154:liberror.c    **** 				// It doesn't fit...resize buffer and try again
 155:liberror.c    **** 				size *= 2;
 353              		.loc 1 155 0 is_stmt 1
 354 03e2 48D165E8 		salq	-24(%rbp)
 156:liberror.c    **** 			} else {
 157:liberror.c    **** 				// Some other problem...invalid errno perhaps?
 158:liberror.c    **** 				*error = NULL;
 159:liberror.c    **** 				return;
 160:liberror.c    **** 			}
 161:liberror.c    **** 			newBufPtr = (char*)realloc(bufPtr, size);
 355              		.loc 1 161 0
 356 03e6 488B55E8 		movq	-24(%rbp), %rdx
 357 03ea 488B45F0 		movq	-16(%rbp), %rax
 358 03ee 4889D6   		movq	%rdx, %rsi
 359 03f1 4889C7   		movq	%rax, %rdi
 360 03f4 E8000000 		call	realloc@PLT
 360      00
 361 03f9 488945F8 		movq	%rax, -8(%rbp)
 162:liberror.c    **** 			if ( newBufPtr == NULL ) {
 362              		.loc 1 162 0
 363 03fd 48837DF8 		cmpq	$0, -8(%rbp)
 363      00
 364 0402 740F     		je	.L24
 365 0404 EB26     		jmp	.L26
 366              	.L23:
 158:liberror.c    **** 				return;
 367              		.loc 1 158 0
 368 0406 488B45D8 		movq	-40(%rbp), %rax
 369 040a 48C70000 		movq	$0, (%rax)
 369      000000
 159:liberror.c    **** 			}
 370              		.loc 1 159 0
 371 0411 EB26     		jmp	.L19
 372              	.L24:
 163:liberror.c    **** 				free(bufPtr);
 373              		.loc 1 163 0
 374 0413 488B45F0 		movq	-16(%rbp), %rax
 375 0417 4889C7   		movq	%rax, %rdi
 376 041a E8000000 		call	free@PLT
 376      00
 164:liberror.c    **** 				*error = NULL;
 377              		.loc 1 164 0
 378 041f 488B45D8 		movq	-40(%rbp), %rax
 379 0423 48C70000 		movq	$0, (%rax)
 379      000000
 165:liberror.c    **** 				return;
 380              		.loc 1 165 0
 381 042a EB0D     		jmp	.L19
 382              	.L26:
 166:liberror.c    **** 			} else {
 167:liberror.c    **** 				bufPtr = newBufPtr;
 383              		.loc 1 167 0
 384 042c 488B45F8 		movq	-8(%rbp), %rax
 385 0430 488945F0 		movq	%rax, -16(%rbp)
 168:liberror.c    **** 			}
 169:liberror.c    **** 		}
 386              		.loc 1 169 0
 387 0434 E96CFFFF 		jmp	.L21
 387      FF
 388              	.L19:
 389              	.LBE5:
 170:liberror.c    **** 	}
 171:liberror.c    **** }
 390              		.loc 1 171 0
 391 0439 C9       		leave
 392              		.cfi_def_cfa 7, 8
 393 043a C3       		ret
 394              		.cfi_endproc
 395              	.LFE6:
 397              		.globl	errFree
 399              	errFree:
 400              	.LFB7:
 172:liberror.c    **** 
 173:liberror.c    **** DLLEXPORT(void) errFree(const char *error) {
 401              		.loc 1 173 0
 402              		.cfi_startproc
 403 043b 55       		pushq	%rbp
 404              		.cfi_def_cfa_offset 16
 405              		.cfi_offset 6, -16
 406 043c 4889E5   		movq	%rsp, %rbp
 407              		.cfi_def_cfa_register 6
 408 043f 4883EC10 		subq	$16, %rsp
 409 0443 48897DF8 		movq	%rdi, -8(%rbp)
 174:liberror.c    **** 	free((void*)error);
 410              		.loc 1 174 0
 411 0447 488B45F8 		movq	-8(%rbp), %rax
 412 044b 4889C7   		movq	%rax, %rdi
 413 044e E8000000 		call	free@PLT
 413      00
 175:liberror.c    **** }
 414              		.loc 1 175 0
 415 0453 90       		nop
 416 0454 C9       		leave
 417              		.cfi_def_cfa 7, 8
 418 0455 C3       		ret
 419              		.cfi_endproc
 420              	.LFE7:
 422              		.section	.rodata
 423 001a 00000000 		.align 8
 423      0000
 426              	__PRETTY_FUNCTION__.2551:
 427 0020 65727252 		.string	"errRender"
 427      656E6465 
 427      7200
 428              		.text
 429              	.Letext0:
 430              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 431              		.file 3 "/usr/include/stdio.h"
 432              		.file 4 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 liberror.c
     /tmp/ccjK38vX.s:12     .text:0000000000000000 errRender
     /tmp/ccjK38vX.s:426    .rodata:0000000000000020 __PRETTY_FUNCTION__.2551
     /tmp/ccjK38vX.s:160    .text:0000000000000206 errPrefix
     /tmp/ccjK38vX.s:399    .text:000000000000043b errFree
     /tmp/ccjK38vX.s:292    .text:0000000000000355 errRenderStd

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
__assert_fail
malloc
vsnprintf
realloc
free
__stack_chk_fail
strlen
strcpy
__errno_location
__xpg_strerror_r
