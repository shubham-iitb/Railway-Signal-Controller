   1              		.file	"prog.c"
   2              		.text
   3              	.Ltext0:
   5              	littleEndian32:
   6              	.LFB3:
   7              		.file 1 "/home/shubham/20140524/makestuff/common/makestuff.h"
   1:/home/shubham/20140524/makestuff/common/makestuff.h **** /*
   2:/home/shubham/20140524/makestuff/common/makestuff.h ****  * Copyright (C) 2009-2012 Chris McClelland
   3:/home/shubham/20140524/makestuff/common/makestuff.h ****  *
   4:/home/shubham/20140524/makestuff/common/makestuff.h ****  * This program is free software: you can redistribute it and/or modify
   5:/home/shubham/20140524/makestuff/common/makestuff.h ****  * it under the terms of the GNU Lesser General Public License as published by
   6:/home/shubham/20140524/makestuff/common/makestuff.h ****  * the Free Software Foundation, either version 3 of the License, or
   7:/home/shubham/20140524/makestuff/common/makestuff.h ****  * (at your option) any later version.
   8:/home/shubham/20140524/makestuff/common/makestuff.h ****  *
   9:/home/shubham/20140524/makestuff/common/makestuff.h ****  * This program is distributed in the hope that it will be useful,
  10:/home/shubham/20140524/makestuff/common/makestuff.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/home/shubham/20140524/makestuff/common/makestuff.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:/home/shubham/20140524/makestuff/common/makestuff.h ****  * GNU Lesser General Public License for more details.
  13:/home/shubham/20140524/makestuff/common/makestuff.h ****  *
  14:/home/shubham/20140524/makestuff/common/makestuff.h ****  * You should have received a copy of the GNU Lesser General Public License
  15:/home/shubham/20140524/makestuff/common/makestuff.h ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:/home/shubham/20140524/makestuff/common/makestuff.h ****  */
  17:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  18:/home/shubham/20140524/makestuff/common/makestuff.h **** #ifndef MAKESTUFF_H
  19:/home/shubham/20140524/makestuff/common/makestuff.h **** #define MAKESTUFF_H
  20:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  21:/home/shubham/20140524/makestuff/common/makestuff.h **** #include <stddef.h>
  22:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  23:/home/shubham/20140524/makestuff/common/makestuff.h **** #ifndef __cplusplus
  24:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#ifdef WIN32
  25:/home/shubham/20140524/makestuff/common/makestuff.h **** 		typedef char bool;
  26:/home/shubham/20140524/makestuff/common/makestuff.h **** 		enum {
  27:/home/shubham/20140524/makestuff/common/makestuff.h **** 			false = 0,
  28:/home/shubham/20140524/makestuff/common/makestuff.h **** 			true = 1
  29:/home/shubham/20140524/makestuff/common/makestuff.h **** 		};
  30:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#else
  31:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#include <stdbool.h>
  32:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#endif
  33:/home/shubham/20140524/makestuff/common/makestuff.h **** #endif
  34:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  35:/home/shubham/20140524/makestuff/common/makestuff.h **** #ifdef WIN32
  36:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#define WARN_UNUSED_RESULT
  37:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#define DLLEXPORT(t) __declspec(dllexport) t __stdcall
  38:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#define PFSZD "%Iu"
  39:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#ifdef _WIN64
  40:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#define PFSZH "%016IX"
  41:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 64
  42:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#else
  43:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#define PFSZH "%08IX"
  44:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 32
  45:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#endif
  46:/home/shubham/20140524/makestuff/common/makestuff.h **** #else
  47:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#define WARN_UNUSED_RESULT __attribute__((warn_unused_result))
  48:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#define DLLEXPORT(t) t
  49:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#define PFSZD "%zu"
  50:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#ifdef __LP64__
  51:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#define PFSZH "%016zX"
  52:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 64
  53:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#else
  54:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#define PFSZH "%08zX"
  55:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 32
  56:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#endif
  57:/home/shubham/20140524/makestuff/common/makestuff.h **** #endif
  58:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  59:/home/shubham/20140524/makestuff/common/makestuff.h **** #ifndef NULL
  60:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#define NULL ((void*)0)
  61:/home/shubham/20140524/makestuff/common/makestuff.h **** #endif
  62:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  63:/home/shubham/20140524/makestuff/common/makestuff.h **** typedef unsigned char      uint8;
  64:/home/shubham/20140524/makestuff/common/makestuff.h **** typedef unsigned short     uint16;
  65:/home/shubham/20140524/makestuff/common/makestuff.h **** #ifndef __cplusplus
  66:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#ifndef SDCC
  67:/home/shubham/20140524/makestuff/common/makestuff.h **** 		typedef unsigned long long uint64;
  68:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#endif
  69:/home/shubham/20140524/makestuff/common/makestuff.h **** #endif
  70:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  71:/home/shubham/20140524/makestuff/common/makestuff.h **** typedef signed char        int8;
  72:/home/shubham/20140524/makestuff/common/makestuff.h **** typedef signed short       int16;
  73:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  74:/home/shubham/20140524/makestuff/common/makestuff.h **** #if (defined __AVR__ && defined __GNUC__) || defined SDCC
  75:/home/shubham/20140524/makestuff/common/makestuff.h **** 	// The embedded platforms have sizeof(int) = 2, so use long
  76:/home/shubham/20140524/makestuff/common/makestuff.h **** 	typedef signed long    int32;
  77:/home/shubham/20140524/makestuff/common/makestuff.h **** 	typedef unsigned long  uint32;
  78:/home/shubham/20140524/makestuff/common/makestuff.h **** #else
  79:/home/shubham/20140524/makestuff/common/makestuff.h **** 	// The i686 & x86_64 have sizeof(int) = 4
  80:/home/shubham/20140524/makestuff/common/makestuff.h **** 	typedef signed int     int32;
  81:/home/shubham/20140524/makestuff/common/makestuff.h **** 	typedef unsigned int   uint32;
  82:/home/shubham/20140524/makestuff/common/makestuff.h **** #endif
  83:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  84:/home/shubham/20140524/makestuff/common/makestuff.h **** #ifndef __cplusplus
  85:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#ifndef SDCC
  86:/home/shubham/20140524/makestuff/common/makestuff.h **** 		typedef signed long long int64;
  87:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#endif
  88:/home/shubham/20140524/makestuff/common/makestuff.h **** #endif
  89:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  90:/home/shubham/20140524/makestuff/common/makestuff.h **** typedef unsigned int       bitfield;
  91:/home/shubham/20140524/makestuff/common/makestuff.h **** 
  92:/home/shubham/20140524/makestuff/common/makestuff.h **** #if defined __GNUC__
  93:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#define swap32(x) __builtin_bswap32(x)
  94:/home/shubham/20140524/makestuff/common/makestuff.h **** #elif defined WIN32
  95:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#ifdef __cplusplus
  96:/home/shubham/20140524/makestuff/common/makestuff.h **** 		extern "C"
  97:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#endif
  98:/home/shubham/20140524/makestuff/common/makestuff.h **** 	unsigned long  __cdecl _byteswap_ulong(unsigned long);
  99:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#define swap32(x) _byteswap_ulong(x)
 100:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#ifndef __cplusplus
 101:/home/shubham/20140524/makestuff/common/makestuff.h **** 		#define inline __inline
 102:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#endif
 103:/home/shubham/20140524/makestuff/common/makestuff.h **** #endif
 104:/home/shubham/20140524/makestuff/common/makestuff.h **** #define swap16(x) ((uint16)((((x) & 0x00FF) << 8) | (((x) >> 8) & 0x00FF)))
 105:/home/shubham/20140524/makestuff/common/makestuff.h **** 
 106:/home/shubham/20140524/makestuff/common/makestuff.h **** // The C standard requires this two-level indirection thing
 107:/home/shubham/20140524/makestuff/common/makestuff.h **** #undef CONCAT
 108:/home/shubham/20140524/makestuff/common/makestuff.h **** #define CONCAT_INTERNAL(x, y) x ## y
 109:/home/shubham/20140524/makestuff/common/makestuff.h **** #define CONCAT(x, y) CONCAT_INTERNAL(x, y)
 110:/home/shubham/20140524/makestuff/common/makestuff.h **** 
 111:/home/shubham/20140524/makestuff/common/makestuff.h **** #define STR_INTERNAL(x) #x
 112:/home/shubham/20140524/makestuff/common/makestuff.h **** #define STR(x) STR_INTERNAL(x)
 113:/home/shubham/20140524/makestuff/common/makestuff.h **** 
 114:/home/shubham/20140524/makestuff/common/makestuff.h **** // The VA_NARGS() macro - count the number of arguments in a C99 variadic macro
 115:/home/shubham/20140524/makestuff/common/makestuff.h **** #define VA_EXPAND(x) x
 116:/home/shubham/20140524/makestuff/common/makestuff.h **** #define VA_NARGS(...) VA_EXPAND(VA_NARGS_INTERNAL(__VA_ARGS__, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
 117:/home/shubham/20140524/makestuff/common/makestuff.h **** #define VA_NARGS_INTERNAL(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y
 118:/home/shubham/20140524/makestuff/common/makestuff.h **** #define FAIL(code, label) { retVal = code; goto label; }
 119:/home/shubham/20140524/makestuff/common/makestuff.h **** 
 120:/home/shubham/20140524/makestuff/common/makestuff.h **** // The CHECK_STATUS() macro - if condition is true, set a returnCode and jump to a label (exit,
 121:/home/shubham/20140524/makestuff/common/makestuff.h **** // cleanup etc). If liberror is included you can also give an error message.
 122:/home/shubham/20140524/makestuff/common/makestuff.h **** #define CHECK_INTERNAL3(condition, code, label) if ( condition ) { FAIL(code, label); }
 123:/home/shubham/20140524/makestuff/common/makestuff.h **** #define CHECK_INTERNAL4(condition, code, label, prefix) LIBERROR_IS_REQUIRED
 124:/home/shubham/20140524/makestuff/common/makestuff.h **** #define CHECK_INTERNAL5(condition, code, label, ...) LIBERROR_IS_REQUIRED
 125:/home/shubham/20140524/makestuff/common/makestuff.h **** #define CHECK_STATUS(...) VA_EXPAND(CONCAT(CHECK_INTERNAL, VA_NARGS(__VA_ARGS__))(__VA_ARGS__))
 126:/home/shubham/20140524/makestuff/common/makestuff.h **** 
 127:/home/shubham/20140524/makestuff/common/makestuff.h **** #ifdef BYTE_ORDER
 128:/home/shubham/20140524/makestuff/common/makestuff.h **** 	#if BYTE_ORDER == 1234
 129:/home/shubham/20140524/makestuff/common/makestuff.h **** 		// Little-endian machines
 130:/home/shubham/20140524/makestuff/common/makestuff.h **** 		static inline uint16 bigEndian16(uint16 x) {
 131:/home/shubham/20140524/makestuff/common/makestuff.h **** 			return swap16(x);
 132:/home/shubham/20140524/makestuff/common/makestuff.h **** 		}
 133:/home/shubham/20140524/makestuff/common/makestuff.h **** 		static inline uint32 bigEndian32(uint32 x) {
 134:/home/shubham/20140524/makestuff/common/makestuff.h **** 			return swap32(x);
 135:/home/shubham/20140524/makestuff/common/makestuff.h **** 		}
 136:/home/shubham/20140524/makestuff/common/makestuff.h **** 		static inline uint16 littleEndian16(uint16 x) {
 137:/home/shubham/20140524/makestuff/common/makestuff.h **** 			return x;
 138:/home/shubham/20140524/makestuff/common/makestuff.h **** 		}
 139:/home/shubham/20140524/makestuff/common/makestuff.h **** 		static inline uint32 littleEndian32(uint32 x) {
   8              		.loc 1 139 0
   9              		.cfi_startproc
  10 0000 55       		pushq	%rbp
  11              		.cfi_def_cfa_offset 16
  12              		.cfi_offset 6, -16
  13 0001 4889E5   		movq	%rsp, %rbp
  14              		.cfi_def_cfa_register 6
  15 0004 897DFC   		movl	%edi, -4(%rbp)
 140:/home/shubham/20140524/makestuff/common/makestuff.h **** 			return x;
  16              		.loc 1 140 0
  17 0007 8B45FC   		movl	-4(%rbp), %eax
 141:/home/shubham/20140524/makestuff/common/makestuff.h **** 		}
  18              		.loc 1 141 0
  19 000a 5D       		popq	%rbp
  20              		.cfi_def_cfa 7, 8
  21 000b C3       		ret
  22              		.cfi_endproc
  23              	.LFE3:
  25              		.section	.rodata
  26              	.LC0:
  27 0000 62656769 		.string	"beginShift()"
  27      6E536869 
  27      66742829 
  27      00
  28              		.text
  30              	beginShift:
  31              	.LFB4:
  32              		.file 2 "prog.c"
   1:prog.c        **** /*
   2:prog.c        ****  * Copyright (C) 2009-2012 Chris McClelland
   3:prog.c        ****  *
   4:prog.c        ****  * This program is free software: you can redistribute it and/or modify
   5:prog.c        ****  * it under the terms of the GNU Lesser General Public License as published by
   6:prog.c        ****  * the Free Software Foundation, either version 3 of the License, or
   7:prog.c        ****  * (at your option) any later version.
   8:prog.c        ****  *
   9:prog.c        ****  * This program is distributed in the hope that it will be useful,
  10:prog.c        ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:prog.c        ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:prog.c        ****  * GNU Lesser General Public License for more details.
  13:prog.c        ****  *
  14:prog.c        ****  * You should have received a copy of the GNU Lesser General Public License
  15:prog.c        ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:prog.c        ****  */
  17:prog.c        **** #include <stdlib.h>
  18:prog.c        **** #include <string.h>
  19:prog.c        **** #include <makestuff.h>
  20:prog.c        **** #include <libusbwrap.h>
  21:prog.c        **** #include <liberror.h>
  22:prog.c        **** #include "libfpgalink.h"
  23:prog.c        **** #include "private.h"
  24:prog.c        **** #include "csvfplay.h"
  25:prog.c        **** #include "vendorCommands.h"
  26:prog.c        **** 
  27:prog.c        **** // ------------------------------------------------------------------------------------------------
  28:prog.c        **** // Implementation of private functions
  29:prog.c        **** // ------------------------------------------------------------------------------------------------
  30:prog.c        **** 
  31:prog.c        **** // Kick off a shift operation on the micro. This will typically be followed by a bunch of sends and
  32:prog.c        **** // receives on EP1OUT & EP1IN. This operation specifies the operation (i.e one of four JTAG shift
  33:prog.c        **** // operations, parallel shift or serial shift. It also specifies a count, which is either a bit-
  34:prog.c        **** // count or a byte-count depending on the context.
  35:prog.c        **** //
  36:prog.c        **** // Called by:
  37:prog.c        **** //   jtagShiftInOut() -> beginShift()
  38:prog.c        **** //   flProgram() -> xProgram() -> fileWrite() -> dataWrite() -> beginShift()
  39:prog.c        **** //
  40:prog.c        **** static FLStatus beginShift(
  41:prog.c        **** 	struct FLContext *handle, uint32 count, ProgOp progOp, uint8 mode, const char **error)
  42:prog.c        **** {
  33              		.loc 2 42 0
  34              		.cfi_startproc
  35 000c 55       		pushq	%rbp
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 6, -16
  38 000d 4889E5   		movq	%rsp, %rbp
  39              		.cfi_def_cfa_register 6
  40 0010 4883EC40 		subq	$64, %rsp
  41 0014 48897DD8 		movq	%rdi, -40(%rbp)
  42 0018 8975D4   		movl	%esi, -44(%rbp)
  43 001b 8955D0   		movl	%edx, -48(%rbp)
  44 001e 89C8     		movl	%ecx, %eax
  45 0020 4C8945C0 		movq	%r8, -64(%rbp)
  46 0024 8845CC   		movb	%al, -52(%rbp)
  47              		.loc 2 42 0
  48 0027 64488B04 		movq	%fs:40, %rax
  48      25280000 
  48      00
  49 0030 488945F8 		movq	%rax, -8(%rbp)
  50 0034 31C0     		xorl	%eax, %eax
  43:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
  51              		.loc 2 43 0
  52 0036 C745E800 		movl	$0, -24(%rbp)
  52      000000
  44:prog.c        **** 	USBStatus uStatus;
  45:prog.c        **** 	union {
  46:prog.c        **** 		uint32 u32;
  47:prog.c        **** 		uint8 bytes[4];
  48:prog.c        **** 	} countUnion;
  49:prog.c        **** 	countUnion.u32 = littleEndian32(count);
  53              		.loc 2 49 0
  54 003d 8B45D4   		movl	-44(%rbp), %eax
  55 0040 89C7     		movl	%eax, %edi
  56 0042 E8B9FFFF 		call	littleEndian32
  56      FF
  57 0047 8945F0   		movl	%eax, -16(%rbp)
  50:prog.c        **** 	uStatus = usbControlWrite(
  58              		.loc 2 50 0
  59 004a 8B45D0   		movl	-48(%rbp), %eax
  60 004d 0FB6C8   		movzbl	%al, %ecx
  61 0050 0FB655CC 		movzbl	-52(%rbp), %edx
  62 0054 488B45D8 		movq	-40(%rbp), %rax
  63 0058 488B00   		movq	(%rax), %rax
  64 005b 488D75F0 		leaq	-16(%rbp), %rsi
  65 005f FF75C0   		pushq	-64(%rbp)
  66 0062 68881300 		pushq	$5000
  66      00
  67 0067 41B90400 		movl	$4, %r9d
  67      0000
  68 006d 4989F0   		movq	%rsi, %r8
  69 0070 BE810000 		movl	$129, %esi
  69      00
  70 0075 4889C7   		movq	%rax, %rdi
  71 0078 E8000000 		call	usbControlWrite@PLT
  71      00
  72 007d 4883C410 		addq	$16, %rsp
  73 0081 8945EC   		movl	%eax, -20(%rbp)
  51:prog.c        **** 		handle->device,
  52:prog.c        **** 		CMD_PROG_CLOCK_DATA,  // bRequest
  53:prog.c        **** 		(uint8)mode,          // wValue
  54:prog.c        **** 		(uint8)progOp,        // wIndex
  55:prog.c        **** 		countUnion.bytes,     // send count
  56:prog.c        **** 		4,                    // wLength
  57:prog.c        **** 		5000,                 // timeout (ms)
  58:prog.c        **** 		error
  59:prog.c        **** 	);
  60:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_SHIFT, cleanup, "beginShift()");
  74              		.loc 2 60 0
  75 0084 837DEC00 		cmpl	$0, -20(%rbp)
  76 0088 741B     		je	.L4
  77              		.loc 2 60 0 is_stmt 0 discriminator 1
  78 008a 488B45C0 		movq	-64(%rbp), %rax
  79 008e 488D3500 		leaq	.LC0(%rip), %rsi
  79      000000
  80 0095 4889C7   		movq	%rax, %rdi
  81 0098 E8000000 		call	errPrefix@PLT
  81      00
  82 009d C745E80F 		movl	$15, -24(%rbp)
  82      000000
  83 00a4 90       		nop
  84              	.L4:
  61:prog.c        **** cleanup:
  62:prog.c        **** 	return retVal;
  85              		.loc 2 62 0 is_stmt 1
  86 00a5 8B45E8   		movl	-24(%rbp), %eax
  63:prog.c        **** }
  87              		.loc 2 63 0
  88 00a8 488B55F8 		movq	-8(%rbp), %rdx
  89 00ac 64483314 		xorq	%fs:40, %rdx
  89      25280000 
  89      00
  90 00b5 7405     		je	.L6
  91 00b7 E8000000 		call	__stack_chk_fail@PLT
  91      00
  92              	.L6:
  93 00bc C9       		leave
  94              		.cfi_def_cfa 7, 8
  95 00bd C3       		ret
  96              		.cfi_endproc
  97              	.LFE4:
  99              		.section	.rodata
 100              	.LC1:
 101 000d 646F5365 		.string	"doSend()"
 101      6E642829 
 101      00
 102              		.text
 104              	doSend:
 105              	.LFB5:
  64:prog.c        **** 
  65:prog.c        **** // Send a chunk of data to the micro on EP1OUT. The previous call to beginShift() specifies what th
  66:prog.c        **** // micro should actually do with the data.
  67:prog.c        **** //
  68:prog.c        **** // Called by:
  69:prog.c        **** //   jtagShiftInOut() -> doSend()
  70:prog.c        **** //   flProgram() -> xProgram() -> fileWrite() -> dataWrite() -> doSend()
  71:prog.c        **** //
  72:prog.c        **** static FLStatus doSend(
  73:prog.c        **** 	struct FLContext *handle, const uint8 *sendPtr, uint16 chunkSize, const char **error)
  74:prog.c        **** {
 106              		.loc 2 74 0
 107              		.cfi_startproc
 108 00be 55       		pushq	%rbp
 109              		.cfi_def_cfa_offset 16
 110              		.cfi_offset 6, -16
 111 00bf 4889E5   		movq	%rsp, %rbp
 112              		.cfi_def_cfa_register 6
 113 00c2 4883EC30 		subq	$48, %rsp
 114 00c6 48897DE8 		movq	%rdi, -24(%rbp)
 115 00ca 488975E0 		movq	%rsi, -32(%rbp)
 116 00ce 89D0     		movl	%edx, %eax
 117 00d0 48894DD0 		movq	%rcx, -48(%rbp)
 118 00d4 668945DC 		movw	%ax, -36(%rbp)
  75:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 119              		.loc 2 75 0
 120 00d8 C745F800 		movl	$0, -8(%rbp)
 120      000000
  76:prog.c        **** 	USBStatus uStatus = usbBulkWrite(
 121              		.loc 2 76 0
 122 00df 0FB74DDC 		movzwl	-36(%rbp), %ecx
  77:prog.c        **** 		handle->device,
  78:prog.c        **** 		handle->progOutEP,    // write to out endpoint
 123              		.loc 2 78 0
 124 00e3 488B45E8 		movq	-24(%rbp), %rax
 125 00e7 0FB64015 		movzbl	21(%rax), %eax
  76:prog.c        **** 	USBStatus uStatus = usbBulkWrite(
 126              		.loc 2 76 0
 127 00eb 0FB6F0   		movzbl	%al, %esi
 128 00ee 488B45E8 		movq	-24(%rbp), %rax
 129 00f2 488B00   		movq	(%rax), %rax
 130 00f5 488B7DD0 		movq	-48(%rbp), %rdi
 131 00f9 488B55E0 		movq	-32(%rbp), %rdx
 132 00fd 4989F9   		movq	%rdi, %r9
 133 0100 41B88813 		movl	$5000, %r8d
 133      0000
 134 0106 4889C7   		movq	%rax, %rdi
 135 0109 E8000000 		call	usbBulkWrite@PLT
 135      00
 136 010e 8945FC   		movl	%eax, -4(%rbp)
  79:prog.c        **** 		sendPtr,              // write from send buffer
  80:prog.c        **** 		chunkSize,            // write this many bytes
  81:prog.c        **** 		5000,                 // timeout in milliseconds
  82:prog.c        **** 		error
  83:prog.c        **** 	);
  84:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_SEND, cleanup, "doSend()");
 137              		.loc 2 84 0
 138 0111 837DFC00 		cmpl	$0, -4(%rbp)
 139 0115 741B     		je	.L8
 140              		.loc 2 84 0 is_stmt 0 discriminator 1
 141 0117 488B45D0 		movq	-48(%rbp), %rax
 142 011b 488D3500 		leaq	.LC1(%rip), %rsi
 142      000000
 143 0122 4889C7   		movq	%rax, %rdi
 144 0125 E8000000 		call	errPrefix@PLT
 144      00
 145 012a C745F80D 		movl	$13, -8(%rbp)
 145      000000
 146 0131 90       		nop
 147              	.L8:
  85:prog.c        **** cleanup:
  86:prog.c        **** 	return retVal;
 148              		.loc 2 86 0 is_stmt 1
 149 0132 8B45F8   		movl	-8(%rbp), %eax
  87:prog.c        **** }
 150              		.loc 2 87 0
 151 0135 C9       		leave
 152              		.cfi_def_cfa 7, 8
 153 0136 C3       		ret
 154              		.cfi_endproc
 155              	.LFE5:
 157              		.section	.rodata
 158              	.LC2:
 159 0016 646F5265 		.string	"doReceive()"
 159      63656976 
 159      65282900 
 160              		.text
 162              	doReceive:
 163              	.LFB6:
  88:prog.c        **** 
  89:prog.c        **** // Receive a chunk of data from the micro on EP1IN. The previous call to beginShift() specifies the
  90:prog.c        **** // source of the data.
  91:prog.c        **** //
  92:prog.c        **** // Called by:
  93:prog.c        **** //   jtagShiftInOut() -> doReceive()
  94:prog.c        **** //
  95:prog.c        **** static FLStatus doReceive(
  96:prog.c        **** 	struct FLContext *handle, uint8 *receivePtr, uint16 chunkSize, const char **error)
  97:prog.c        **** {
 164              		.loc 2 97 0
 165              		.cfi_startproc
 166 0137 55       		pushq	%rbp
 167              		.cfi_def_cfa_offset 16
 168              		.cfi_offset 6, -16
 169 0138 4889E5   		movq	%rsp, %rbp
 170              		.cfi_def_cfa_register 6
 171 013b 4883EC30 		subq	$48, %rsp
 172 013f 48897DE8 		movq	%rdi, -24(%rbp)
 173 0143 488975E0 		movq	%rsi, -32(%rbp)
 174 0147 89D0     		movl	%edx, %eax
 175 0149 48894DD0 		movq	%rcx, -48(%rbp)
 176 014d 668945DC 		movw	%ax, -36(%rbp)
  98:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 177              		.loc 2 98 0
 178 0151 C745F800 		movl	$0, -8(%rbp)
 178      000000
  99:prog.c        **** 	USBStatus uStatus = usbBulkRead(
 179              		.loc 2 99 0
 180 0158 0FB74DDC 		movzwl	-36(%rbp), %ecx
 100:prog.c        **** 		handle->device,
 101:prog.c        **** 		handle->progInEP,    // read from in endpoint
 181              		.loc 2 101 0
 182 015c 488B45E8 		movq	-24(%rbp), %rax
 183 0160 0FB64016 		movzbl	22(%rax), %eax
  99:prog.c        **** 	USBStatus uStatus = usbBulkRead(
 184              		.loc 2 99 0
 185 0164 0FB6F0   		movzbl	%al, %esi
 186 0167 488B45E8 		movq	-24(%rbp), %rax
 187 016b 488B00   		movq	(%rax), %rax
 188 016e 488B7DD0 		movq	-48(%rbp), %rdi
 189 0172 488B55E0 		movq	-32(%rbp), %rdx
 190 0176 4989F9   		movq	%rdi, %r9
 191 0179 41B88813 		movl	$5000, %r8d
 191      0000
 192 017f 4889C7   		movq	%rax, %rdi
 193 0182 E8000000 		call	usbBulkRead@PLT
 193      00
 194 0187 8945FC   		movl	%eax, -4(%rbp)
 102:prog.c        **** 		receivePtr,          // read into the receive buffer
 103:prog.c        **** 		chunkSize,           // read this many bytes
 104:prog.c        **** 		5000,                // timeout in milliseconds
 105:prog.c        **** 		error
 106:prog.c        **** 	);
 107:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_RECV, cleanup, "doReceive()");
 195              		.loc 2 107 0
 196 018a 837DFC00 		cmpl	$0, -4(%rbp)
 197 018e 741B     		je	.L11
 198              		.loc 2 107 0 is_stmt 0 discriminator 1
 199 0190 488B45D0 		movq	-48(%rbp), %rax
 200 0194 488D3500 		leaq	.LC2(%rip), %rsi
 200      000000
 201 019b 4889C7   		movq	%rax, %rdi
 202 019e E8000000 		call	errPrefix@PLT
 202      00
 203 01a3 C745F80E 		movl	$14, -8(%rbp)
 203      000000
 204 01aa 90       		nop
 205              	.L11:
 108:prog.c        **** cleanup:
 109:prog.c        **** 	return retVal;
 206              		.loc 2 109 0 is_stmt 1
 207 01ab 8B45F8   		movl	-8(%rbp), %eax
 110:prog.c        **** }
 208              		.loc 2 110 0
 209 01ae C9       		leave
 210              		.cfi_def_cfa 7, 8
 211 01af C3       		ret
 212              		.cfi_endproc
 213              	.LFE6:
 215              		.section	.rodata
 216 0022 00000000 		.align 8
 216      0000
 217              	.LC3:
 218 0028 20202020 		.string	"                                                                                         
 218      20202020 
 218      20202020 
 218      20202020 
 218      20202020 
 219              		.text
 221              	spaces:
 222              	.LFB7:
 111:prog.c        **** 
 112:prog.c        **** static const char *spaces(ptrdiff_t n) {
 223              		.loc 2 112 0
 224              		.cfi_startproc
 225 01b0 55       		pushq	%rbp
 226              		.cfi_def_cfa_offset 16
 227              		.cfi_offset 6, -16
 228 01b1 4889E5   		movq	%rsp, %rbp
 229              		.cfi_def_cfa_register 6
 230 01b4 48897DE8 		movq	%rdi, -24(%rbp)
 113:prog.c        **** 	const char *const s =
 231              		.loc 2 113 0
 232 01b8 488D0500 		leaq	.LC3(%rip), %rax
 232      000000
 233 01bf 488945F8 		movq	%rax, -8(%rbp)
 114:prog.c        **** 		"                                                                "
 115:prog.c        **** 		"                                                                "
 116:prog.c        **** 		"                                                                "
 117:prog.c        **** 		"                                                                ";
 118:prog.c        **** 	return s + 256-n;
 234              		.loc 2 118 0
 235 01c3 488B45E8 		movq	-24(%rbp), %rax
 236 01c7 BA000100 		movl	$256, %edx
 236      00
 237 01cc 4829C2   		subq	%rax, %rdx
 238 01cf 488B45F8 		movq	-8(%rbp), %rax
 239 01d3 4801D0   		addq	%rdx, %rax
 119:prog.c        **** }
 240              		.loc 2 119 0
 241 01d6 5D       		popq	%rbp
 242              		.cfi_def_cfa 7, 8
 243 01d7 C3       		ret
 244              		.cfi_endproc
 245              	.LFE7:
 247              		.section	.rodata
 248 0129 00000000 		.align 8
 248      000000
 249              	.LC4:
 250 0130 706F7075 		.string	"populateMap(): Unexpected end of config string:\n  %s\n  %s^"
 250      6C617465 
 250      4D617028 
 250      293A2055 
 250      6E657870 
 251 016b 00000000 		.align 8
 251      00
 252              	.LC5:
 253 0170 706F7075 		.string	"populateMap(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 253      6C617465 
 253      4D617028 
 253      293A2050 
 253      6F727420 
 254 01b6 0000     		.align 8
 255              	.LC6:
 256 01b8 706F7075 		.string	"populateMap(): Bit number is not valid:\n  %s\n  %s^"
 256      6C617465 
 256      4D617028 
 256      293A2042 
 256      6974206E 
 257 01eb 00000000 		.align 8
 257      00
 258              	.LC7:
 259 01f0 706F7075 		.string	"populateMap(): port '%c%d' is already used:\n  %s\n  %s^"
 259      6C617465 
 259      4D617028 
 259      293A2070 
 259      6F727420 
 260 0227 00       		.align 8
 261              	.LC8:
 262 0228 706F7075 		.string	"populateMap(): Expecting '+', '-' or '?' at char %d"
 262      6C617465 
 262      4D617028 
 262      293A2045 
 262      78706563 
 263              		.text
 265              	populateMap:
 266              	.LFB8:
 120:prog.c        **** 
 121:prog.c        **** #define GET_CHAR(func) \
 122:prog.c        **** 	ch = *ptr; \
 123:prog.c        **** 	CHECK_STATUS( \
 124:prog.c        **** 		ch == '\0', FL_CONF_FORMAT, cleanup, \
 125:prog.c        **** 		func"(): Unexpected end of config string:\n  %s\n  %s^", portConfig, spaces(ptr-portConfig))
 126:prog.c        **** 
 127:prog.c        **** #define EXPECT_CHAR(ex, func) \
 128:prog.c        **** 	GET_CHAR(func) \
 129:prog.c        **** 	CHECK_STATUS( \
 130:prog.c        **** 		ch != ex, FL_CONF_FORMAT, cleanup, \
 131:prog.c        **** 		func"(): Expecting "#ex":\n  %s\n  %s^", portConfig, spaces(ptr-portConfig)); \
 132:prog.c        **** 	ptr++
 133:prog.c        **** 
 134:prog.c        **** #define GET_PORT(port, func) \
 135:prog.c        **** 	GET_CHAR(func) \
 136:prog.c        **** 	CHECK_STATUS( \
 137:prog.c        **** 		ch < 'A' || ch > 'Z', FL_CONF_FORMAT, cleanup, \
 138:prog.c        **** 		func"(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^", portConfig, spaces(ptr-portCo
 139:prog.c        **** 	port = (uint8)(ch - 'A'); \
 140:prog.c        **** 	ptr++
 141:prog.c        **** 
 142:prog.c        **** #define GET_BIT(bit, func) \
 143:prog.c        **** 	GET_CHAR(func) \
 144:prog.c        **** 	CHECK_STATUS( \
 145:prog.c        **** 		ch < '0' || ch > '9', FL_CONF_FORMAT, cleanup, \
 146:prog.c        **** 		func"(): Bit number is not valid:\n  %s\n  %s^", portConfig, spaces(ptr-portConfig)); \
 147:prog.c        **** 	bit = (uint8)(strtoul(ptr, (char**)&ptr, 10));
 148:prog.c        **** 
 149:prog.c        **** #define GET_DIGIT(bit, func) \
 150:prog.c        **** 	GET_CHAR(func) \
 151:prog.c        **** 	CHECK_STATUS( \
 152:prog.c        **** 		ch < '0' || ch > '7', FL_CONF_FORMAT, cleanup, \
 153:prog.c        **** 		func"(): Bit '%c' is not valid at char %d", ch, ptr-portConfig); \
 154:prog.c        **** 	bit = (uint8)(ch - '0'); \
 155:prog.c        **** 	ptr++
 156:prog.c        **** 
 157:prog.c        **** #define GET_PAIR(port, bit, func) \
 158:prog.c        **** 	GET_PORT(port, func); \
 159:prog.c        **** 	GET_BIT(bit, func)
 160:prog.c        **** 
 161:prog.c        **** #define SET_BIT(port, bit, status, func) \
 162:prog.c        **** 	CHECK_STATUS( \
 163:prog.c        **** 		pinMap[port][bit] != PIN_UNUSED, FL_CONF_FORMAT, cleanup,					\
 164:prog.c        **** 		func"(): port '%c%d' is already used:\n  %s\n  %s^", port+'A', bit, portConfig, spaces(ptr-portCo
 165:prog.c        **** 	pinMap[port][bit] = status
 166:prog.c        **** 
 167:prog.c        **** // This function parses a comma-separated list of ports with a suffix representing the desired stat
 168:prog.c        **** // of the port, e.g "A0+,B5-,D7/" means "PA0 is an output driven high, PB5 is an output driven low,
 169:prog.c        **** // and PD7 is an input". The result is recorded in the pinMap array, which is assumed to be of
 170:prog.c        **** // length 5*8=40. The parse stops when it encounters something other than a comma separator, and th
 171:prog.c        **** // location of that character stored in *endPtr.
 172:prog.c        **** //
 173:prog.c        **** // Called by:
 174:prog.c        **** //   xProgram() -> populateMap()
 175:prog.c        **** //
 176:prog.c        **** static FLStatus populateMap(
 177:prog.c        **** 	const char *portConfig, const char *ptr, const char **endPtr,
 178:prog.c        **** 	PinConfig pinMap[26][32], const char **error)
 179:prog.c        **** {
 267              		.loc 2 179 0
 268              		.cfi_startproc
 269 01d8 55       		pushq	%rbp
 270              		.cfi_def_cfa_offset 16
 271              		.cfi_offset 6, -16
 272 01d9 4889E5   		movq	%rsp, %rbp
 273              		.cfi_def_cfa_register 6
 274 01dc 4883EC40 		subq	$64, %rsp
 275 01e0 48897DE8 		movq	%rdi, -24(%rbp)
 276 01e4 488975E0 		movq	%rsi, -32(%rbp)
 277 01e8 488955D8 		movq	%rdx, -40(%rbp)
 278 01ec 48894DD0 		movq	%rcx, -48(%rbp)
 279 01f0 4C8945C8 		movq	%r8, -56(%rbp)
 180:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 280              		.loc 2 180 0
 281 01f4 C745FC00 		movl	$0, -4(%rbp)
 281      000000
 282              	.L31:
 181:prog.c        **** 	uint8 thisPort, thisBit;
 182:prog.c        **** 	char ch;
 183:prog.c        **** 	do {
 184:prog.c        **** 		GET_PAIR(thisPort, thisBit, "populateMap");
 283              		.loc 2 184 0
 284 01fb 488B45E0 		movq	-32(%rbp), %rax
 285 01ff 0FB600   		movzbl	(%rax), %eax
 286 0202 8845F9   		movb	%al, -7(%rbp)
 287 0205 807DF900 		cmpb	$0, -7(%rbp)
 288 0209 7544     		jne	.L16
 289              		.loc 2 184 0 is_stmt 0 discriminator 1
 290 020b 488B45E0 		movq	-32(%rbp), %rax
 291 020f 4889C2   		movq	%rax, %rdx
 292 0212 488B45E8 		movq	-24(%rbp), %rax
 293 0216 4829C2   		subq	%rax, %rdx
 294 0219 4889D0   		movq	%rdx, %rax
 295 021c 4889C7   		movq	%rax, %rdi
 296 021f E88CFFFF 		call	spaces
 296      FF
 297 0224 4889C1   		movq	%rax, %rcx
 298 0227 488B55E8 		movq	-24(%rbp), %rdx
 299 022b 488B45C8 		movq	-56(%rbp), %rax
 300 022f 488D3500 		leaq	.LC4(%rip), %rsi
 300      000000
 301 0236 4889C7   		movq	%rax, %rdi
 302 0239 B8000000 		movl	$0, %eax
 302      00
 303 023e E8000000 		call	errRender@PLT
 303      00
 304 0243 C745FC0B 		movl	$11, -4(%rbp)
 304      000000
 305 024a E9E10300 		jmp	.L17
 305      00
 306              	.L16:
 307              		.loc 2 184 0 discriminator 2
 308 024f 807DF940 		cmpb	$64, -7(%rbp)
 309 0253 7E06     		jle	.L18
 310              		.loc 2 184 0 discriminator 4
 311 0255 807DF95A 		cmpb	$90, -7(%rbp)
 312 0259 7E44     		jle	.L19
 313              	.L18:
 314              		.loc 2 184 0 discriminator 5
 315 025b 488B45E0 		movq	-32(%rbp), %rax
 316 025f 4889C2   		movq	%rax, %rdx
 317 0262 488B45E8 		movq	-24(%rbp), %rax
 318 0266 4829C2   		subq	%rax, %rdx
 319 0269 4889D0   		movq	%rdx, %rax
 320 026c 4889C7   		movq	%rax, %rdi
 321 026f E83CFFFF 		call	spaces
 321      FF
 322 0274 4889C1   		movq	%rax, %rcx
 323 0277 488B55E8 		movq	-24(%rbp), %rdx
 324 027b 488B45C8 		movq	-56(%rbp), %rax
 325 027f 488D3500 		leaq	.LC5(%rip), %rsi
 325      000000
 326 0286 4889C7   		movq	%rax, %rdi
 327 0289 B8000000 		movl	$0, %eax
 327      00
 328 028e E8000000 		call	errRender@PLT
 328      00
 329 0293 C745FC0B 		movl	$11, -4(%rbp)
 329      000000
 330 029a E9910300 		jmp	.L17
 330      00
 331              	.L19:
 332              		.loc 2 184 0 discriminator 6
 333 029f 0FB645F9 		movzbl	-7(%rbp), %eax
 334 02a3 83E841   		subl	$65, %eax
 335 02a6 8845FA   		movb	%al, -6(%rbp)
 336 02a9 488B45E0 		movq	-32(%rbp), %rax
 337 02ad 4883C001 		addq	$1, %rax
 338 02b1 488945E0 		movq	%rax, -32(%rbp)
 339 02b5 488B45E0 		movq	-32(%rbp), %rax
 340 02b9 0FB600   		movzbl	(%rax), %eax
 341 02bc 8845F9   		movb	%al, -7(%rbp)
 342 02bf 807DF900 		cmpb	$0, -7(%rbp)
 343 02c3 7544     		jne	.L20
 344              		.loc 2 184 0 discriminator 7
 345 02c5 488B45E0 		movq	-32(%rbp), %rax
 346 02c9 4889C2   		movq	%rax, %rdx
 347 02cc 488B45E8 		movq	-24(%rbp), %rax
 348 02d0 4829C2   		subq	%rax, %rdx
 349 02d3 4889D0   		movq	%rdx, %rax
 350 02d6 4889C7   		movq	%rax, %rdi
 351 02d9 E8D2FEFF 		call	spaces
 351      FF
 352 02de 4889C1   		movq	%rax, %rcx
 353 02e1 488B55E8 		movq	-24(%rbp), %rdx
 354 02e5 488B45C8 		movq	-56(%rbp), %rax
 355 02e9 488D3500 		leaq	.LC4(%rip), %rsi
 355      000000
 356 02f0 4889C7   		movq	%rax, %rdi
 357 02f3 B8000000 		movl	$0, %eax
 357      00
 358 02f8 E8000000 		call	errRender@PLT
 358      00
 359 02fd C745FC0B 		movl	$11, -4(%rbp)
 359      000000
 360 0304 E9270300 		jmp	.L17
 360      00
 361              	.L20:
 362              		.loc 2 184 0 discriminator 8
 363 0309 807DF92F 		cmpb	$47, -7(%rbp)
 364 030d 7E06     		jle	.L21
 365              		.loc 2 184 0 discriminator 10
 366 030f 807DF939 		cmpb	$57, -7(%rbp)
 367 0313 7E44     		jle	.L22
 368              	.L21:
 369              		.loc 2 184 0 discriminator 11
 370 0315 488B45E0 		movq	-32(%rbp), %rax
 371 0319 4889C2   		movq	%rax, %rdx
 372 031c 488B45E8 		movq	-24(%rbp), %rax
 373 0320 4829C2   		subq	%rax, %rdx
 374 0323 4889D0   		movq	%rdx, %rax
 375 0326 4889C7   		movq	%rax, %rdi
 376 0329 E882FEFF 		call	spaces
 376      FF
 377 032e 4889C1   		movq	%rax, %rcx
 378 0331 488B55E8 		movq	-24(%rbp), %rdx
 379 0335 488B45C8 		movq	-56(%rbp), %rax
 380 0339 488D3500 		leaq	.LC6(%rip), %rsi
 380      000000
 381 0340 4889C7   		movq	%rax, %rdi
 382 0343 B8000000 		movl	$0, %eax
 382      00
 383 0348 E8000000 		call	errRender@PLT
 383      00
 384 034d C745FC0B 		movl	$11, -4(%rbp)
 384      000000
 385 0354 E9D70200 		jmp	.L17
 385      00
 386              	.L22:
 387              		.loc 2 184 0 discriminator 12
 388 0359 488B45E0 		movq	-32(%rbp), %rax
 389 035d 488D4DE0 		leaq	-32(%rbp), %rcx
 390 0361 BA0A0000 		movl	$10, %edx
 390      00
 391 0366 4889CE   		movq	%rcx, %rsi
 392 0369 4889C7   		movq	%rax, %rdi
 393 036c E8000000 		call	strtoul@PLT
 393      00
 394 0371 8845FB   		movb	%al, -5(%rbp)
 185:prog.c        **** 		GET_CHAR("populateMap");
 395              		.loc 2 185 0 is_stmt 1 discriminator 12
 396 0374 488B45E0 		movq	-32(%rbp), %rax
 397 0378 0FB600   		movzbl	(%rax), %eax
 398 037b 8845F9   		movb	%al, -7(%rbp)
 399 037e 807DF900 		cmpb	$0, -7(%rbp)
 400 0382 7544     		jne	.L23
 401              		.loc 2 185 0 is_stmt 0 discriminator 1
 402 0384 488B45E0 		movq	-32(%rbp), %rax
 403 0388 4889C2   		movq	%rax, %rdx
 404 038b 488B45E8 		movq	-24(%rbp), %rax
 405 038f 4829C2   		subq	%rax, %rdx
 406 0392 4889D0   		movq	%rdx, %rax
 407 0395 4889C7   		movq	%rax, %rdi
 408 0398 E813FEFF 		call	spaces
 408      FF
 409 039d 4889C1   		movq	%rax, %rcx
 410 03a0 488B55E8 		movq	-24(%rbp), %rdx
 411 03a4 488B45C8 		movq	-56(%rbp), %rax
 412 03a8 488D3500 		leaq	.LC4(%rip), %rsi
 412      000000
 413 03af 4889C7   		movq	%rax, %rdi
 414 03b2 B8000000 		movl	$0, %eax
 414      00
 415 03b7 E8000000 		call	errRender@PLT
 415      00
 416 03bc C745FC0B 		movl	$11, -4(%rbp)
 416      000000
 417 03c3 E9680200 		jmp	.L17
 417      00
 418              	.L23:
 186:prog.c        **** 		if ( ch == '+' ) {
 419              		.loc 2 186 0 is_stmt 1
 420 03c8 807DF92B 		cmpb	$43, -7(%rbp)
 421 03cc 0F85A000 		jne	.L24
 421      0000
 187:prog.c        **** 			SET_BIT(thisPort, thisBit, PIN_HIGH, "populateMap");
 422              		.loc 2 187 0
 423 03d2 0FB645FA 		movzbl	-6(%rbp), %eax
 424 03d6 48C1E007 		salq	$7, %rax
 425 03da 4889C2   		movq	%rax, %rdx
 426 03dd 488B45D0 		movq	-48(%rbp), %rax
 427 03e1 4801C2   		addq	%rax, %rdx
 428 03e4 0FB645FB 		movzbl	-5(%rbp), %eax
 429 03e8 4898     		cltq
 430 03ea 8B0482   		movl	(%rdx,%rax,4), %eax
 431 03ed 85C0     		testl	%eax, %eax
 432 03ef 745D     		je	.L25
 433              		.loc 2 187 0 is_stmt 0 discriminator 1
 434 03f1 488B45E0 		movq	-32(%rbp), %rax
 435 03f5 4889C2   		movq	%rax, %rdx
 436 03f8 488B45E8 		movq	-24(%rbp), %rax
 437 03fc 4829C2   		subq	%rax, %rdx
 438 03ff 4889D0   		movq	%rdx, %rax
 439 0402 4883E801 		subq	$1, %rax
 440 0406 4889C7   		movq	%rax, %rdi
 441 0409 E8A2FDFF 		call	spaces
 441      FF
 442 040e 4889C7   		movq	%rax, %rdi
 443 0411 0FB655FB 		movzbl	-5(%rbp), %edx
 444 0415 0FB645FA 		movzbl	-6(%rbp), %eax
 445 0419 8D7041   		leal	65(%rax), %esi
 446 041c 488B4DE8 		movq	-24(%rbp), %rcx
 447 0420 488B45C8 		movq	-56(%rbp), %rax
 448 0424 4989F9   		movq	%rdi, %r9
 449 0427 4989C8   		movq	%rcx, %r8
 450 042a 89D1     		movl	%edx, %ecx
 451 042c 89F2     		movl	%esi, %edx
 452 042e 488D3500 		leaq	.LC7(%rip), %rsi
 452      000000
 453 0435 4889C7   		movq	%rax, %rdi
 454 0438 B8000000 		movl	$0, %eax
 454      00
 455 043d E8000000 		call	errRender@PLT
 455      00
 456 0442 C745FC0B 		movl	$11, -4(%rbp)
 456      000000
 457 0449 E9E20100 		jmp	.L17
 457      00
 458              	.L25:
 459              		.loc 2 187 0 discriminator 2
 460 044e 0FB645FA 		movzbl	-6(%rbp), %eax
 461 0452 48C1E007 		salq	$7, %rax
 462 0456 4889C2   		movq	%rax, %rdx
 463 0459 488B45D0 		movq	-48(%rbp), %rax
 464 045d 4801C2   		addq	%rax, %rdx
 465 0460 0FB645FB 		movzbl	-5(%rbp), %eax
 466 0464 4898     		cltq
 467 0466 C7048201 		movl	$1, (%rdx,%rax,4)
 467      000000
 468 046d E9800100 		jmp	.L26
 468      00
 469              	.L24:
 188:prog.c        **** 		} else if ( ch == '-' ) {
 470              		.loc 2 188 0 is_stmt 1
 471 0472 807DF92D 		cmpb	$45, -7(%rbp)
 472 0476 0F85A000 		jne	.L27
 472      0000
 189:prog.c        **** 			SET_BIT(thisPort, thisBit, PIN_LOW, "populateMap");
 473              		.loc 2 189 0
 474 047c 0FB645FA 		movzbl	-6(%rbp), %eax
 475 0480 48C1E007 		salq	$7, %rax
 476 0484 4889C2   		movq	%rax, %rdx
 477 0487 488B45D0 		movq	-48(%rbp), %rax
 478 048b 4801C2   		addq	%rax, %rdx
 479 048e 0FB645FB 		movzbl	-5(%rbp), %eax
 480 0492 4898     		cltq
 481 0494 8B0482   		movl	(%rdx,%rax,4), %eax
 482 0497 85C0     		testl	%eax, %eax
 483 0499 745D     		je	.L28
 484              		.loc 2 189 0 is_stmt 0 discriminator 1
 485 049b 488B45E0 		movq	-32(%rbp), %rax
 486 049f 4889C2   		movq	%rax, %rdx
 487 04a2 488B45E8 		movq	-24(%rbp), %rax
 488 04a6 4829C2   		subq	%rax, %rdx
 489 04a9 4889D0   		movq	%rdx, %rax
 490 04ac 4883E801 		subq	$1, %rax
 491 04b0 4889C7   		movq	%rax, %rdi
 492 04b3 E8F8FCFF 		call	spaces
 492      FF
 493 04b8 4889C7   		movq	%rax, %rdi
 494 04bb 0FB655FB 		movzbl	-5(%rbp), %edx
 495 04bf 0FB645FA 		movzbl	-6(%rbp), %eax
 496 04c3 8D7041   		leal	65(%rax), %esi
 497 04c6 488B4DE8 		movq	-24(%rbp), %rcx
 498 04ca 488B45C8 		movq	-56(%rbp), %rax
 499 04ce 4989F9   		movq	%rdi, %r9
 500 04d1 4989C8   		movq	%rcx, %r8
 501 04d4 89D1     		movl	%edx, %ecx
 502 04d6 89F2     		movl	%esi, %edx
 503 04d8 488D3500 		leaq	.LC7(%rip), %rsi
 503      000000
 504 04df 4889C7   		movq	%rax, %rdi
 505 04e2 B8000000 		movl	$0, %eax
 505      00
 506 04e7 E8000000 		call	errRender@PLT
 506      00
 507 04ec C745FC0B 		movl	$11, -4(%rbp)
 507      000000
 508 04f3 E9380100 		jmp	.L17
 508      00
 509              	.L28:
 510              		.loc 2 189 0 discriminator 2
 511 04f8 0FB645FA 		movzbl	-6(%rbp), %eax
 512 04fc 48C1E007 		salq	$7, %rax
 513 0500 4889C2   		movq	%rax, %rdx
 514 0503 488B45D0 		movq	-48(%rbp), %rax
 515 0507 4801C2   		addq	%rax, %rdx
 516 050a 0FB645FB 		movzbl	-5(%rbp), %eax
 517 050e 4898     		cltq
 518 0510 C7048202 		movl	$2, (%rdx,%rax,4)
 518      000000
 519 0517 E9D60000 		jmp	.L26
 519      00
 520              	.L27:
 190:prog.c        **** 		} else if ( ch == '?' ) {
 521              		.loc 2 190 0 is_stmt 1
 522 051c 807DF93F 		cmpb	$63, -7(%rbp)
 523 0520 0F859D00 		jne	.L29
 523      0000
 191:prog.c        **** 			SET_BIT(thisPort, thisBit, PIN_INPUT, "populateMap");
 524              		.loc 2 191 0
 525 0526 0FB645FA 		movzbl	-6(%rbp), %eax
 526 052a 48C1E007 		salq	$7, %rax
 527 052e 4889C2   		movq	%rax, %rdx
 528 0531 488B45D0 		movq	-48(%rbp), %rax
 529 0535 4801C2   		addq	%rax, %rdx
 530 0538 0FB645FB 		movzbl	-5(%rbp), %eax
 531 053c 4898     		cltq
 532 053e 8B0482   		movl	(%rdx,%rax,4), %eax
 533 0541 85C0     		testl	%eax, %eax
 534 0543 745D     		je	.L30
 535              		.loc 2 191 0 is_stmt 0 discriminator 1
 536 0545 488B45E0 		movq	-32(%rbp), %rax
 537 0549 4889C2   		movq	%rax, %rdx
 538 054c 488B45E8 		movq	-24(%rbp), %rax
 539 0550 4829C2   		subq	%rax, %rdx
 540 0553 4889D0   		movq	%rdx, %rax
 541 0556 4883E801 		subq	$1, %rax
 542 055a 4889C7   		movq	%rax, %rdi
 543 055d E84EFCFF 		call	spaces
 543      FF
 544 0562 4889C7   		movq	%rax, %rdi
 545 0565 0FB655FB 		movzbl	-5(%rbp), %edx
 546 0569 0FB645FA 		movzbl	-6(%rbp), %eax
 547 056d 8D7041   		leal	65(%rax), %esi
 548 0570 488B4DE8 		movq	-24(%rbp), %rcx
 549 0574 488B45C8 		movq	-56(%rbp), %rax
 550 0578 4989F9   		movq	%rdi, %r9
 551 057b 4989C8   		movq	%rcx, %r8
 552 057e 89D1     		movl	%edx, %ecx
 553 0580 89F2     		movl	%esi, %edx
 554 0582 488D3500 		leaq	.LC7(%rip), %rsi
 554      000000
 555 0589 4889C7   		movq	%rax, %rdi
 556 058c B8000000 		movl	$0, %eax
 556      00
 557 0591 E8000000 		call	errRender@PLT
 557      00
 558 0596 C745FC0B 		movl	$11, -4(%rbp)
 558      000000
 559 059d E98E0000 		jmp	.L17
 559      00
 560              	.L30:
 561              		.loc 2 191 0 discriminator 2
 562 05a2 0FB645FA 		movzbl	-6(%rbp), %eax
 563 05a6 48C1E007 		salq	$7, %rax
 564 05aa 4889C2   		movq	%rax, %rdx
 565 05ad 488B45D0 		movq	-48(%rbp), %rax
 566 05b1 4801C2   		addq	%rax, %rdx
 567 05b4 0FB645FB 		movzbl	-5(%rbp), %eax
 568 05b8 4898     		cltq
 569 05ba C7048203 		movl	$3, (%rdx,%rax,4)
 569      000000
 570 05c1 EB2F     		jmp	.L26
 571              	.L29:
 192:prog.c        **** 		} else {
 193:prog.c        **** 			CHECK_STATUS(
 572              		.loc 2 193 0 is_stmt 1 discriminator 1
 573 05c3 488B45E0 		movq	-32(%rbp), %rax
 574 05c7 4889C2   		movq	%rax, %rdx
 575 05ca 488B45E8 		movq	-24(%rbp), %rax
 576 05ce 4829C2   		subq	%rax, %rdx
 577 05d1 488B45C8 		movq	-56(%rbp), %rax
 578 05d5 488D3500 		leaq	.LC8(%rip), %rsi
 578      000000
 579 05dc 4889C7   		movq	%rax, %rdi
 580 05df B8000000 		movl	$0, %eax
 580      00
 581 05e4 E8000000 		call	errRender@PLT
 581      00
 582 05e9 C745FC0B 		movl	$11, -4(%rbp)
 582      000000
 583 05f0 EB3E     		jmp	.L17
 584              	.L26:
 194:prog.c        **** 				true, FL_CONF_FORMAT, cleanup,
 195:prog.c        **** 				"populateMap(): Expecting '+', '-' or '?' at char %d", ptr-portConfig);
 196:prog.c        **** 		}
 197:prog.c        **** 		ptr++;
 585              		.loc 2 197 0
 586 05f2 488B45E0 		movq	-32(%rbp), %rax
 587 05f6 4883C001 		addq	$1, %rax
 588 05fa 488945E0 		movq	%rax, -32(%rbp)
 198:prog.c        **** 		ch = *ptr++;
 589              		.loc 2 198 0
 590 05fe 488B45E0 		movq	-32(%rbp), %rax
 591 0602 488D5001 		leaq	1(%rax), %rdx
 592 0606 488955E0 		movq	%rdx, -32(%rbp)
 593 060a 0FB600   		movzbl	(%rax), %eax
 594 060d 8845F9   		movb	%al, -7(%rbp)
 199:prog.c        **** 	} while ( ch == ',' );
 595              		.loc 2 199 0
 596 0610 807DF92C 		cmpb	$44, -7(%rbp)
 597 0614 0F84E1FB 		je	.L31
 597      FFFF
 200:prog.c        **** 	if ( endPtr ) {
 598              		.loc 2 200 0
 599 061a 48837DD8 		cmpq	$0, -40(%rbp)
 599      00
 600 061f 740F     		je	.L17
 201:prog.c        **** 		*endPtr = ptr - 1;
 601              		.loc 2 201 0
 602 0621 488B45E0 		movq	-32(%rbp), %rax
 603 0625 488D50FF 		leaq	-1(%rax), %rdx
 604 0629 488B45D8 		movq	-40(%rbp), %rax
 605 062d 488910   		movq	%rdx, (%rax)
 606              	.L17:
 202:prog.c        **** 	}
 203:prog.c        **** cleanup:
 204:prog.c        **** 	return retVal;
 607              		.loc 2 204 0
 608 0630 8B45FC   		movl	-4(%rbp), %eax
 205:prog.c        **** }
 609              		.loc 2 205 0
 610 0633 C9       		leave
 611              		.cfi_def_cfa 7, 8
 612 0634 C3       		ret
 613              		.cfi_endproc
 614              	.LFE8:
 616              		.section	.rodata
 617              	.LC9:
 618 025c 706F7274 		.string	"portMap()"
 618      4D617028 
 618      2900
 619              		.text
 621              	portMap:
 622              	.LFB9:
 206:prog.c        **** 
 207:prog.c        **** // This function re-maps the physical port used by the micro for its logical programming ports.
 208:prog.c        **** //
 209:prog.c        **** // Called by:
 210:prog.c        **** //   xProgram() -> portMap()
 211:prog.c        **** //   progOpen() -> portMap()
 212:prog.c        **** //
 213:prog.c        **** static FLStatus portMap(
 214:prog.c        **** 	struct FLContext *handle, LogicalPort patchOp, uint8 port, uint8 bit,
 215:prog.c        **** 	const char **error)
 216:prog.c        **** {
 623              		.loc 2 216 0
 624              		.cfi_startproc
 625 0635 55       		pushq	%rbp
 626              		.cfi_def_cfa_offset 16
 627              		.cfi_offset 6, -16
 628 0636 4889E5   		movq	%rsp, %rbp
 629              		.cfi_def_cfa_register 6
 630 0639 4883EC30 		subq	$48, %rsp
 631 063d 48897DE8 		movq	%rdi, -24(%rbp)
 632 0641 8975E4   		movl	%esi, -28(%rbp)
 633 0644 89C8     		movl	%ecx, %eax
 634 0646 4C8945D0 		movq	%r8, -48(%rbp)
 635 064a 8855E0   		movb	%dl, -32(%rbp)
 636 064d 8845DC   		movb	%al, -36(%rbp)
 217:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 637              		.loc 2 217 0
 638 0650 C745F800 		movl	$0, -8(%rbp)
 638      000000
 218:prog.c        **** 	USBStatus uStatus;
 219:prog.c        **** 	const uint16 index = (uint16)((port << 8) | patchOp);
 639              		.loc 2 219 0
 640 0657 0FB645E0 		movzbl	-32(%rbp), %eax
 641 065b C1E008   		sall	$8, %eax
 642 065e 89C2     		movl	%eax, %edx
 643 0660 8B45E4   		movl	-28(%rbp), %eax
 644 0663 09D0     		orl	%edx, %eax
 645 0665 668945F4 		movw	%ax, -12(%rbp)
 220:prog.c        **** 	const uint16 value = (uint16)bit;
 646              		.loc 2 220 0
 647 0669 0FB645DC 		movzbl	-36(%rbp), %eax
 648 066d 668945F6 		movw	%ax, -10(%rbp)
 221:prog.c        **** 	uStatus = usbControlWrite(
 649              		.loc 2 221 0
 650 0671 0FB74DF4 		movzwl	-12(%rbp), %ecx
 651 0675 0FB755F6 		movzwl	-10(%rbp), %edx
 652 0679 488B45E8 		movq	-24(%rbp), %rax
 653 067d 488B00   		movq	(%rax), %rax
 654 0680 FF75D0   		pushq	-48(%rbp)
 655 0683 68E80300 		pushq	$1000
 655      00
 656 0688 41B90000 		movl	$0, %r9d
 656      0000
 657 068e 41B80000 		movl	$0, %r8d
 657      0000
 658 0694 BE860000 		movl	$134, %esi
 658      00
 659 0699 4889C7   		movq	%rax, %rdi
 660 069c E8000000 		call	usbControlWrite@PLT
 660      00
 661 06a1 4883C410 		addq	$16, %rsp
 662 06a5 8945FC   		movl	%eax, -4(%rbp)
 222:prog.c        **** 		handle->device,
 223:prog.c        **** 		CMD_PORT_MAP,  // bRequest
 224:prog.c        **** 		value,         // wValue
 225:prog.c        **** 		index,         // wIndex
 226:prog.c        **** 		NULL,          // no data
 227:prog.c        **** 		0,             // wLength
 228:prog.c        **** 		1000,          // timeout (ms)
 229:prog.c        **** 		error
 230:prog.c        **** 	);
 231:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_PORT_MAP, cleanup, "portMap()");
 663              		.loc 2 231 0
 664 06a8 837DFC00 		cmpl	$0, -4(%rbp)
 665 06ac 741B     		je	.L34
 666              		.loc 2 231 0 is_stmt 0 discriminator 1
 667 06ae 488B45D0 		movq	-48(%rbp), %rax
 668 06b2 488D3500 		leaq	.LC9(%rip), %rsi
 668      000000
 669 06b9 4889C7   		movq	%rax, %rdi
 670 06bc E8000000 		call	errPrefix@PLT
 670      00
 671 06c1 C745F80C 		movl	$12, -8(%rbp)
 671      000000
 672 06c8 90       		nop
 673              	.L34:
 232:prog.c        **** cleanup:
 233:prog.c        **** 	return retVal;
 674              		.loc 2 233 0 is_stmt 1
 675 06c9 8B45F8   		movl	-8(%rbp), %eax
 234:prog.c        **** }
 676              		.loc 2 234 0
 677 06cc C9       		leave
 678              		.cfi_def_cfa 7, 8
 679 06cd C3       		ret
 680              		.cfi_endproc
 681              	.LFE9:
 684              	makeLookup:
 685              	.LFB10:
 235:prog.c        **** 
 236:prog.c        **** // The bits in each byte of a programming file may need to be swapped before sending to the micro;
 237:prog.c        **** // this function makes a translation map for efficient bit-swapping. If bitOrder = {0,1,2,3,4,5,6,7
 238:prog.c        **** // then the resulting translation map does nothing. If bitOrder = {7,6,5,4,3,2,1,0} then the
 239:prog.c        **** // resulting translation map mirrors the bits.
 240:prog.c        **** //
 241:prog.c        **** // Called by:
 242:prog.c        **** //   xProgram() -> makeLookup()
 243:prog.c        **** //
 244:prog.c        **** static void makeLookup(const uint8 bitOrder[8], uint8 lookupTable[256]) {
 686              		.loc 2 244 0
 687              		.cfi_startproc
 688 06ce 55       		pushq	%rbp
 689              		.cfi_def_cfa_offset 16
 690              		.cfi_offset 6, -16
 691 06cf 4889E5   		movq	%rsp, %rbp
 692              		.cfi_def_cfa_register 6
 693 06d2 48897DE8 		movq	%rdi, -24(%rbp)
 694 06d6 488975E0 		movq	%rsi, -32(%rbp)
 245:prog.c        **** 	uint8 thisByte;
 246:prog.c        **** 	uint16 i;
 247:prog.c        **** 	for ( i = 0; i < 256; i++ ) {
 695              		.loc 2 247 0
 696 06da 66C745FE 		movw	$0, -2(%rbp)
 696      0000
 697 06e0 E9960100 		jmp	.L37
 697      00
 698              	.L46:
 248:prog.c        **** 		thisByte = 0x00;
 699              		.loc 2 248 0
 700 06e5 C645FD00 		movb	$0, -3(%rbp)
 249:prog.c        **** 		if ( i & 0x80 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[7])); }
 701              		.loc 2 249 0
 702 06e9 0FB745FE 		movzwl	-2(%rbp), %eax
 703 06ed 25800000 		andl	$128, %eax
 703      00
 704 06f2 85C0     		testl	%eax, %eax
 705 06f4 7424     		je	.L38
 706              		.loc 2 249 0 is_stmt 0 discriminator 1
 707 06f6 488B45E8 		movq	-24(%rbp), %rax
 708 06fa 4883C007 		addq	$7, %rax
 709 06fe 0FB600   		movzbl	(%rax), %eax
 710 0701 0FB6C0   		movzbl	%al, %eax
 711 0704 BA010000 		movl	$1, %edx
 711      00
 712 0709 89C1     		movl	%eax, %ecx
 713 070b D3E2     		sall	%cl, %edx
 714 070d 89D0     		movl	%edx, %eax
 715 070f 89C2     		movl	%eax, %edx
 716 0711 0FB645FD 		movzbl	-3(%rbp), %eax
 717 0715 09D0     		orl	%edx, %eax
 718 0717 8845FD   		movb	%al, -3(%rbp)
 719              	.L38:
 250:prog.c        **** 		if ( i & 0x40 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[6])); }
 720              		.loc 2 250 0 is_stmt 1
 721 071a 0FB745FE 		movzwl	-2(%rbp), %eax
 722 071e 83E040   		andl	$64, %eax
 723 0721 85C0     		testl	%eax, %eax
 724 0723 7424     		je	.L39
 725              		.loc 2 250 0 is_stmt 0 discriminator 1
 726 0725 488B45E8 		movq	-24(%rbp), %rax
 727 0729 4883C006 		addq	$6, %rax
 728 072d 0FB600   		movzbl	(%rax), %eax
 729 0730 0FB6C0   		movzbl	%al, %eax
 730 0733 BA010000 		movl	$1, %edx
 730      00
 731 0738 89C1     		movl	%eax, %ecx
 732 073a D3E2     		sall	%cl, %edx
 733 073c 89D0     		movl	%edx, %eax
 734 073e 89C2     		movl	%eax, %edx
 735 0740 0FB645FD 		movzbl	-3(%rbp), %eax
 736 0744 09D0     		orl	%edx, %eax
 737 0746 8845FD   		movb	%al, -3(%rbp)
 738              	.L39:
 251:prog.c        **** 		if ( i & 0x20 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[5])); }
 739              		.loc 2 251 0 is_stmt 1
 740 0749 0FB745FE 		movzwl	-2(%rbp), %eax
 741 074d 83E020   		andl	$32, %eax
 742 0750 85C0     		testl	%eax, %eax
 743 0752 7424     		je	.L40
 744              		.loc 2 251 0 is_stmt 0 discriminator 1
 745 0754 488B45E8 		movq	-24(%rbp), %rax
 746 0758 4883C005 		addq	$5, %rax
 747 075c 0FB600   		movzbl	(%rax), %eax
 748 075f 0FB6C0   		movzbl	%al, %eax
 749 0762 BA010000 		movl	$1, %edx
 749      00
 750 0767 89C1     		movl	%eax, %ecx
 751 0769 D3E2     		sall	%cl, %edx
 752 076b 89D0     		movl	%edx, %eax
 753 076d 89C2     		movl	%eax, %edx
 754 076f 0FB645FD 		movzbl	-3(%rbp), %eax
 755 0773 09D0     		orl	%edx, %eax
 756 0775 8845FD   		movb	%al, -3(%rbp)
 757              	.L40:
 252:prog.c        **** 		if ( i & 0x10 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[4])); }
 758              		.loc 2 252 0 is_stmt 1
 759 0778 0FB745FE 		movzwl	-2(%rbp), %eax
 760 077c 83E010   		andl	$16, %eax
 761 077f 85C0     		testl	%eax, %eax
 762 0781 7424     		je	.L41
 763              		.loc 2 252 0 is_stmt 0 discriminator 1
 764 0783 488B45E8 		movq	-24(%rbp), %rax
 765 0787 4883C004 		addq	$4, %rax
 766 078b 0FB600   		movzbl	(%rax), %eax
 767 078e 0FB6C0   		movzbl	%al, %eax
 768 0791 BA010000 		movl	$1, %edx
 768      00
 769 0796 89C1     		movl	%eax, %ecx
 770 0798 D3E2     		sall	%cl, %edx
 771 079a 89D0     		movl	%edx, %eax
 772 079c 89C2     		movl	%eax, %edx
 773 079e 0FB645FD 		movzbl	-3(%rbp), %eax
 774 07a2 09D0     		orl	%edx, %eax
 775 07a4 8845FD   		movb	%al, -3(%rbp)
 776              	.L41:
 253:prog.c        **** 		if ( i & 0x08 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[3])); }
 777              		.loc 2 253 0 is_stmt 1
 778 07a7 0FB745FE 		movzwl	-2(%rbp), %eax
 779 07ab 83E008   		andl	$8, %eax
 780 07ae 85C0     		testl	%eax, %eax
 781 07b0 7424     		je	.L42
 782              		.loc 2 253 0 is_stmt 0 discriminator 1
 783 07b2 488B45E8 		movq	-24(%rbp), %rax
 784 07b6 4883C003 		addq	$3, %rax
 785 07ba 0FB600   		movzbl	(%rax), %eax
 786 07bd 0FB6C0   		movzbl	%al, %eax
 787 07c0 BA010000 		movl	$1, %edx
 787      00
 788 07c5 89C1     		movl	%eax, %ecx
 789 07c7 D3E2     		sall	%cl, %edx
 790 07c9 89D0     		movl	%edx, %eax
 791 07cb 89C2     		movl	%eax, %edx
 792 07cd 0FB645FD 		movzbl	-3(%rbp), %eax
 793 07d1 09D0     		orl	%edx, %eax
 794 07d3 8845FD   		movb	%al, -3(%rbp)
 795              	.L42:
 254:prog.c        **** 		if ( i & 0x04 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[2])); }
 796              		.loc 2 254 0 is_stmt 1
 797 07d6 0FB745FE 		movzwl	-2(%rbp), %eax
 798 07da 83E004   		andl	$4, %eax
 799 07dd 85C0     		testl	%eax, %eax
 800 07df 7424     		je	.L43
 801              		.loc 2 254 0 is_stmt 0 discriminator 1
 802 07e1 488B45E8 		movq	-24(%rbp), %rax
 803 07e5 4883C002 		addq	$2, %rax
 804 07e9 0FB600   		movzbl	(%rax), %eax
 805 07ec 0FB6C0   		movzbl	%al, %eax
 806 07ef BA010000 		movl	$1, %edx
 806      00
 807 07f4 89C1     		movl	%eax, %ecx
 808 07f6 D3E2     		sall	%cl, %edx
 809 07f8 89D0     		movl	%edx, %eax
 810 07fa 89C2     		movl	%eax, %edx
 811 07fc 0FB645FD 		movzbl	-3(%rbp), %eax
 812 0800 09D0     		orl	%edx, %eax
 813 0802 8845FD   		movb	%al, -3(%rbp)
 814              	.L43:
 255:prog.c        **** 		if ( i & 0x02 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[1])); }
 815              		.loc 2 255 0 is_stmt 1
 816 0805 0FB745FE 		movzwl	-2(%rbp), %eax
 817 0809 83E002   		andl	$2, %eax
 818 080c 85C0     		testl	%eax, %eax
 819 080e 7424     		je	.L44
 820              		.loc 2 255 0 is_stmt 0 discriminator 1
 821 0810 488B45E8 		movq	-24(%rbp), %rax
 822 0814 4883C001 		addq	$1, %rax
 823 0818 0FB600   		movzbl	(%rax), %eax
 824 081b 0FB6C0   		movzbl	%al, %eax
 825 081e BA010000 		movl	$1, %edx
 825      00
 826 0823 89C1     		movl	%eax, %ecx
 827 0825 D3E2     		sall	%cl, %edx
 828 0827 89D0     		movl	%edx, %eax
 829 0829 89C2     		movl	%eax, %edx
 830 082b 0FB645FD 		movzbl	-3(%rbp), %eax
 831 082f 09D0     		orl	%edx, %eax
 832 0831 8845FD   		movb	%al, -3(%rbp)
 833              	.L44:
 256:prog.c        **** 		if ( i & 0x01 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[0])); }
 834              		.loc 2 256 0 is_stmt 1
 835 0834 0FB745FE 		movzwl	-2(%rbp), %eax
 836 0838 83E001   		andl	$1, %eax
 837 083b 85C0     		testl	%eax, %eax
 838 083d 7420     		je	.L45
 839              		.loc 2 256 0 is_stmt 0 discriminator 1
 840 083f 488B45E8 		movq	-24(%rbp), %rax
 841 0843 0FB600   		movzbl	(%rax), %eax
 842 0846 0FB6C0   		movzbl	%al, %eax
 843 0849 BA010000 		movl	$1, %edx
 843      00
 844 084e 89C1     		movl	%eax, %ecx
 845 0850 D3E2     		sall	%cl, %edx
 846 0852 89D0     		movl	%edx, %eax
 847 0854 89C2     		movl	%eax, %edx
 848 0856 0FB645FD 		movzbl	-3(%rbp), %eax
 849 085a 09D0     		orl	%edx, %eax
 850 085c 8845FD   		movb	%al, -3(%rbp)
 851              	.L45:
 257:prog.c        **** 		lookupTable[i] = thisByte;
 852              		.loc 2 257 0 is_stmt 1 discriminator 2
 853 085f 0FB755FE 		movzwl	-2(%rbp), %edx
 854 0863 488B45E0 		movq	-32(%rbp), %rax
 855 0867 4801C2   		addq	%rax, %rdx
 856 086a 0FB645FD 		movzbl	-3(%rbp), %eax
 857 086e 8802     		movb	%al, (%rdx)
 247:prog.c        **** 		thisByte = 0x00;
 858              		.loc 2 247 0 discriminator 2
 859 0870 0FB745FE 		movzwl	-2(%rbp), %eax
 860 0874 83C001   		addl	$1, %eax
 861 0877 668945FE 		movw	%ax, -2(%rbp)
 862              	.L37:
 247:prog.c        **** 		thisByte = 0x00;
 863              		.loc 2 247 0 is_stmt 0 discriminator 1
 864 087b 66817DFE 		cmpw	$255, -2(%rbp)
 864      FF00
 865 0881 0F865EFE 		jbe	.L46
 865      FFFF
 258:prog.c        **** 	}
 259:prog.c        **** }	
 866              		.loc 2 259 0 is_stmt 1
 867 0887 90       		nop
 868 0888 5D       		popq	%rbp
 869              		.cfi_def_cfa 7, 8
 870 0889 C3       		ret
 871              		.cfi_endproc
 872              	.LFE10:
 874              		.section	.rodata
 875              	.LC10:
 876 0266 64617461 		.string	"dataWrite()"
 876      57726974 
 876      65282900 
 877              		.text
 879              	dataWrite:
 880              	.LFB11:
 260:prog.c        **** 
 261:prog.c        **** // For serial & parallel programming, when the FPGA is ready to accept data, this function sends it
 262:prog.c        **** // one 64-byte block at a time, with a bit-transformation applied to each block.
 263:prog.c        **** //
 264:prog.c        **** // Called by:
 265:prog.c        **** //   xProgram() -> fileWrite() -> dataWrite()
 266:prog.c        **** //   xProgram() -> dataWrite()
 267:prog.c        **** //
 268:prog.c        **** static FLStatus dataWrite(struct FLContext *handle, ProgOp progOp, const uint8 *buf, uint32 len, co
 881              		.loc 2 268 0
 882              		.cfi_startproc
 883 088a 55       		pushq	%rbp
 884              		.cfi_def_cfa_offset 16
 885              		.cfi_offset 6, -16
 886 088b 4889E5   		movq	%rsp, %rbp
 887              		.cfi_def_cfa_register 6
 888 088e 4881EC90 		subq	$144, %rsp
 888      000000
 889 0895 48897D98 		movq	%rdi, -104(%rbp)
 890 0899 897594   		movl	%esi, -108(%rbp)
 891 089c 48895588 		movq	%rdx, -120(%rbp)
 892 08a0 894D90   		movl	%ecx, -112(%rbp)
 893 08a3 4C894580 		movq	%r8, -128(%rbp)
 894 08a7 4C898D78 		movq	%r9, -136(%rbp)
 894      FFFFFF
 895              		.loc 2 268 0
 896 08ae 64488B04 		movq	%fs:40, %rax
 896      25280000 
 896      00
 897 08b7 488945F8 		movq	%rax, -8(%rbp)
 898 08bb 31C0     		xorl	%eax, %eax
 269:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 899              		.loc 2 269 0
 900 08bd C745A800 		movl	$0, -88(%rbp)
 900      000000
 270:prog.c        **** 	uint16 chunkSize;
 271:prog.c        **** 	FLStatus fStatus = beginShift(handle, len, progOp, 0x00, error);
 901              		.loc 2 271 0
 902 08c4 488B8D78 		movq	-136(%rbp), %rcx
 902      FFFFFF
 903 08cb 8B5594   		movl	-108(%rbp), %edx
 904 08ce 8B7590   		movl	-112(%rbp), %esi
 905 08d1 488B4598 		movq	-104(%rbp), %rax
 906 08d5 4989C8   		movq	%rcx, %r8
 907 08d8 B9000000 		movl	$0, %ecx
 907      00
 908 08dd 4889C7   		movq	%rax, %rdi
 909 08e0 E827F7FF 		call	beginShift
 909      FF
 910 08e5 8945AC   		movl	%eax, -84(%rbp)
 272:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "dataWrite()");
 911              		.loc 2 272 0
 912 08e8 837DAC00 		cmpl	$0, -84(%rbp)
 913 08ec 7421     		je	.L48
 914              		.loc 2 272 0 is_stmt 0 discriminator 1
 915 08ee 488B8578 		movq	-136(%rbp), %rax
 915      FFFFFF
 916 08f5 488D3500 		leaq	.LC10(%rip), %rsi
 916      000000
 917 08fc 4889C7   		movq	%rax, %rdi
 918 08ff E8000000 		call	errPrefix@PLT
 918      00
 919 0904 8B45AC   		movl	-84(%rbp), %eax
 920 0907 8945A8   		movl	%eax, -88(%rbp)
 921 090a E9310100 		jmp	.L49
 921      00
 922              	.L48:
 273:prog.c        **** 	if ( lookupTable ) {
 923              		.loc 2 273 0 is_stmt 1
 924 090f 48837D80 		cmpq	$0, -128(%rbp)
 924      00
 925 0914 0F842001 		je	.L58
 925      0000
 926              	.LBB2:
 274:prog.c        **** 		uint8 bitSwap[64];
 275:prog.c        **** 		uint16 i;
 276:prog.c        **** 		while ( len ) {
 927              		.loc 2 276 0
 928 091a E9AA0000 		jmp	.L51
 928      00
 929              	.L57:
 277:prog.c        **** 			chunkSize = (uint16)((len >= 64) ? 64 : len);
 930              		.loc 2 277 0
 931 091f 837D903F 		cmpl	$63, -112(%rbp)
 932 0923 7705     		ja	.L52
 933              		.loc 2 277 0 is_stmt 0 discriminator 1
 934 0925 8B4590   		movl	-112(%rbp), %eax
 935 0928 EB05     		jmp	.L53
 936              	.L52:
 937              		.loc 2 277 0 discriminator 2
 938 092a B8400000 		movl	$64, %eax
 938      00
 939              	.L53:
 940              		.loc 2 277 0 discriminator 4
 941 092f 668945A6 		movw	%ax, -90(%rbp)
 278:prog.c        **** 			for ( i = 0; i < chunkSize; i++ ) {
 942              		.loc 2 278 0 is_stmt 1 discriminator 4
 943 0933 66C745A4 		movw	$0, -92(%rbp)
 943      0000
 944 0939 EB30     		jmp	.L54
 945              	.L55:
 279:prog.c        **** 				bitSwap[i] = lookupTable[buf[i]];
 946              		.loc 2 279 0 discriminator 3
 947 093b 0FB745A4 		movzwl	-92(%rbp), %eax
 948 093f 0FB74DA4 		movzwl	-92(%rbp), %ecx
 949 0943 488B5588 		movq	-120(%rbp), %rdx
 950 0947 4801CA   		addq	%rcx, %rdx
 951 094a 0FB612   		movzbl	(%rdx), %edx
 952 094d 0FB6CA   		movzbl	%dl, %ecx
 953 0950 488B5580 		movq	-128(%rbp), %rdx
 954 0954 4801CA   		addq	%rcx, %rdx
 955 0957 0FB612   		movzbl	(%rdx), %edx
 956 095a 4898     		cltq
 957 095c 885405B0 		movb	%dl, -80(%rbp,%rax)
 278:prog.c        **** 			for ( i = 0; i < chunkSize; i++ ) {
 958              		.loc 2 278 0 discriminator 3
 959 0960 0FB745A4 		movzwl	-92(%rbp), %eax
 960 0964 83C001   		addl	$1, %eax
 961 0967 668945A4 		movw	%ax, -92(%rbp)
 962              	.L54:
 278:prog.c        **** 			for ( i = 0; i < chunkSize; i++ ) {
 963              		.loc 2 278 0 is_stmt 0 discriminator 1
 964 096b 0FB745A4 		movzwl	-92(%rbp), %eax
 965 096f 663B45A6 		cmpw	-90(%rbp), %ax
 966 0973 72C6     		jb	.L55
 280:prog.c        **** 			}
 281:prog.c        **** 			fStatus = doSend(handle, bitSwap, chunkSize, error);
 967              		.loc 2 281 0 is_stmt 1
 968 0975 0FB755A6 		movzwl	-90(%rbp), %edx
 969 0979 488B8D78 		movq	-136(%rbp), %rcx
 969      FFFFFF
 970 0980 488D75B0 		leaq	-80(%rbp), %rsi
 971 0984 488B4598 		movq	-104(%rbp), %rax
 972 0988 4889C7   		movq	%rax, %rdi
 973 098b E82EF7FF 		call	doSend
 973      FF
 974 0990 8945AC   		movl	%eax, -84(%rbp)
 282:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "dataWrite()");
 975              		.loc 2 282 0
 976 0993 837DAC00 		cmpl	$0, -84(%rbp)
 977 0997 7421     		je	.L56
 978              		.loc 2 282 0 is_stmt 0 discriminator 1
 979 0999 488B8578 		movq	-136(%rbp), %rax
 979      FFFFFF
 980 09a0 488D3500 		leaq	.LC10(%rip), %rsi
 980      000000
 981 09a7 4889C7   		movq	%rax, %rdi
 982 09aa E8000000 		call	errPrefix@PLT
 982      00
 983 09af 8B45AC   		movl	-84(%rbp), %eax
 984 09b2 8945A8   		movl	%eax, -88(%rbp)
 985 09b5 E9860000 		jmp	.L49
 985      00
 986              	.L56:
 283:prog.c        **** 			buf += chunkSize;
 987              		.loc 2 283 0 is_stmt 1
 988 09ba 0FB745A6 		movzwl	-90(%rbp), %eax
 989 09be 48014588 		addq	%rax, -120(%rbp)
 284:prog.c        **** 			len -= chunkSize;
 990              		.loc 2 284 0
 991 09c2 0FB745A6 		movzwl	-90(%rbp), %eax
 992 09c6 294590   		subl	%eax, -112(%rbp)
 993              	.L51:
 276:prog.c        **** 			chunkSize = (uint16)((len >= 64) ? 64 : len);
 994              		.loc 2 276 0
 995 09c9 837D9000 		cmpl	$0, -112(%rbp)
 996 09cd 0F854CFF 		jne	.L57
 996      FFFF
 997 09d3 EB6B     		jmp	.L49
 998              	.L62:
 999              	.LBE2:
 285:prog.c        **** 		}
 286:prog.c        **** 	} else {
 287:prog.c        **** 		while ( len ) {
 288:prog.c        **** 			chunkSize = (uint16)((len >= 64) ? 64 : len);
 1000              		.loc 2 288 0
 1001 09d5 837D903F 		cmpl	$63, -112(%rbp)
 1002 09d9 7705     		ja	.L59
 1003              		.loc 2 288 0 is_stmt 0 discriminator 1
 1004 09db 8B4590   		movl	-112(%rbp), %eax
 1005 09de EB05     		jmp	.L60
 1006              	.L59:
 1007              		.loc 2 288 0 discriminator 2
 1008 09e0 B8400000 		movl	$64, %eax
 1008      00
 1009              	.L60:
 1010              		.loc 2 288 0 discriminator 4
 1011 09e5 668945A6 		movw	%ax, -90(%rbp)
 289:prog.c        **** 			fStatus = doSend(handle, buf, chunkSize, error);
 1012              		.loc 2 289 0 is_stmt 1 discriminator 4
 1013 09e9 0FB755A6 		movzwl	-90(%rbp), %edx
 1014 09ed 488B8D78 		movq	-136(%rbp), %rcx
 1014      FFFFFF
 1015 09f4 488B7588 		movq	-120(%rbp), %rsi
 1016 09f8 488B4598 		movq	-104(%rbp), %rax
 1017 09fc 4889C7   		movq	%rax, %rdi
 1018 09ff E8BAF6FF 		call	doSend
 1018      FF
 1019 0a04 8945AC   		movl	%eax, -84(%rbp)
 290:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "dataWrite()");
 1020              		.loc 2 290 0 discriminator 4
 1021 0a07 837DAC00 		cmpl	$0, -84(%rbp)
 1022 0a0b 741E     		je	.L61
 1023              		.loc 2 290 0 is_stmt 0 discriminator 1
 1024 0a0d 488B8578 		movq	-136(%rbp), %rax
 1024      FFFFFF
 1025 0a14 488D3500 		leaq	.LC10(%rip), %rsi
 1025      000000
 1026 0a1b 4889C7   		movq	%rax, %rdi
 1027 0a1e E8000000 		call	errPrefix@PLT
 1027      00
 1028 0a23 8B45AC   		movl	-84(%rbp), %eax
 1029 0a26 8945A8   		movl	%eax, -88(%rbp)
 1030 0a29 EB15     		jmp	.L49
 1031              	.L61:
 291:prog.c        **** 			buf += chunkSize;
 1032              		.loc 2 291 0 is_stmt 1
 1033 0a2b 0FB745A6 		movzwl	-90(%rbp), %eax
 1034 0a2f 48014588 		addq	%rax, -120(%rbp)
 292:prog.c        **** 			len -= chunkSize;
 1035              		.loc 2 292 0
 1036 0a33 0FB745A6 		movzwl	-90(%rbp), %eax
 1037 0a37 294590   		subl	%eax, -112(%rbp)
 1038              	.L58:
 287:prog.c        **** 			chunkSize = (uint16)((len >= 64) ? 64 : len);
 1039              		.loc 2 287 0
 1040 0a3a 837D9000 		cmpl	$0, -112(%rbp)
 1041 0a3e 7595     		jne	.L62
 1042              	.L49:
 293:prog.c        **** 		}
 294:prog.c        **** 	}
 295:prog.c        **** cleanup:
 296:prog.c        **** 	return retVal;
 1043              		.loc 2 296 0
 1044 0a40 8B45A8   		movl	-88(%rbp), %eax
 297:prog.c        **** }
 1045              		.loc 2 297 0
 1046 0a43 488B7DF8 		movq	-8(%rbp), %rdi
 1047 0a47 6448333C 		xorq	%fs:40, %rdi
 1047      25280000 
 1047      00
 1048 0a50 7405     		je	.L64
 1049 0a52 E8000000 		call	__stack_chk_fail@PLT
 1049      00
 1050              	.L64:
 1051 0a57 C9       		leave
 1052              		.cfi_def_cfa 7, 8
 1053 0a58 C3       		ret
 1054              		.cfi_endproc
 1055              	.LFE11:
 1057              		.section	.rodata
 1058 0272 00000000 		.align 8
 1058      0000
 1059              	.LC11:
 1060 0278 7850726F 		.string	"xProgram(): unsupported ProgOp"
 1060      6772616D 
 1060      28293A20 
 1060      756E7375 
 1060      70706F72 
 1061 0297 00       		.align 8
 1062              	.LC12:
 1063 0298 7850726F 		.string	"xProgram(): Unexpected end of config string:\n  %s\n  %s^"
 1063      6772616D 
 1063      28293A20 
 1063      556E6578 
 1063      70656374 
 1064              		.align 8
 1065              	.LC13:
 1066 02d0 7850726F 		.string	"xProgram(): Expecting ':':\n  %s\n  %s^"
 1066      6772616D 
 1066      28293A20 
 1066      45787065 
 1066      6374696E 
 1067 02f6 0000     		.align 8
 1068              	.LC14:
 1069 02f8 7850726F 		.string	"xProgram(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 1069      6772616D 
 1069      28293A20 
 1069      506F7274 
 1069      20697320 
 1070 033b 00000000 		.align 8
 1070      00
 1071              	.LC15:
 1072 0340 7850726F 		.string	"xProgram(): Bit number is not valid:\n  %s\n  %s^"
 1072      6772616D 
 1072      28293A20 
 1072      42697420 
 1072      6E756D62 
 1073              		.align 8
 1074              	.LC16:
 1075 0370 7850726F 		.string	"xProgram(): port '%c%d' is already used:\n  %s\n  %s^"
 1075      6772616D 
 1075      28293A20 
 1075      706F7274 
 1075      20272563 
 1076 03a4 00000000 		.align 8
 1077              	.LC17:
 1078 03a8 7850726F 		.string	"xProgram(): Bit '%c' is not valid at char %d"
 1078      6772616D 
 1078      28293A20 
 1078      42697420 
 1078      27256327 
 1079              	.LC18:
 1080 03d5 7850726F 		.string	"xProgram()"
 1080      6772616D 
 1080      282900
 1081              		.align 8
 1082              	.LC19:
 1083 03e0 7850726F 		.string	"xProgram(): Expecting ']':\n  %s\n  %s^"
 1083      6772616D 
 1083      28293A20 
 1083      45787065 
 1083      6374696E 
 1084 0406 0000     		.align 8
 1085              	.LC20:
 1086 0408 7850726F 		.string	"xProgram(): Expecting ':' or end-of-string:\n  %s\n  %s^"
 1086      6772616D 
 1086      28293A20 
 1086      45787065 
 1086      6374696E 
 1087 043f 00       		.align 8
 1088              	.LC21:
 1089 0440 7850726F 		.string	"xProgram(): DONE did not assert"
 1089      6772616D 
 1089      28293A20 
 1089      444F4E45 
 1089      20646964 
 1090              		.align 8
 1091              	.LC22:
 1092 0460 7850726F 		.string	"xProgram(): INIT unexpectedly low (CRC error during config)"
 1092      6772616D 
 1092      28293A20 
 1092      494E4954 
 1092      20756E65 
 1093              		.text
 1095              	xProgram:
 1096              	.LFB12:
 298:prog.c        **** 
 299:prog.c        **** // This function performs either a serial or a parallel programming operation on Xilinx FPGAs.
 300:prog.c        **** //
 301:prog.c        **** // Called by:
 302:prog.c        **** //   flProgram() -> xProgram()
 303:prog.c        **** //
 304:prog.c        **** static FLStatus xProgram(struct FLContext *handle, ProgOp progOp, const char *portConfig, const uin
 1097              		.loc 2 304 0
 1098              		.cfi_startproc
 1099 0a59 55       		pushq	%rbp
 1100              		.cfi_def_cfa_offset 16
 1101              		.cfi_offset 6, -16
 1102 0a5a 4889E5   		movq	%rsp, %rbp
 1103              		.cfi_def_cfa_register 6
 1104 0a5d 4881ECD0 		subq	$3792, %rsp
 1104      0E0000
 1105 0a64 4889BD58 		movq	%rdi, -3752(%rbp)
 1105      F1FFFF
 1106 0a6b 89B554F1 		movl	%esi, -3756(%rbp)
 1106      FFFF
 1107 0a71 48899548 		movq	%rdx, -3768(%rbp)
 1107      F1FFFF
 1108 0a78 48898D40 		movq	%rcx, -3776(%rbp)
 1108      F1FFFF
 1109 0a7f 44898550 		movl	%r8d, -3760(%rbp)
 1109      F1FFFF
 1110 0a86 4C898D38 		movq	%r9, -3784(%rbp)
 1110      F1FFFF
 1111              		.loc 2 304 0
 1112 0a8d 64488B04 		movq	%fs:40, %rax
 1112      25280000 
 1112      00
 1113 0a96 488945F8 		movq	%rax, -8(%rbp)
 1114 0a9a 31C0     		xorl	%eax, %eax
 305:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 1115              		.loc 2 305 0
 1116 0a9c C78578F1 		movl	$0, -3720(%rbp)
 1116      FFFF0000 
 1116      0000
 306:prog.c        **** 	FLStatus fStatus;
 307:prog.c        **** 	uint8 progPort, progBit;
 308:prog.c        **** 	uint8 initPort, initBit;
 309:prog.c        **** 	uint8 donePort, doneBit;
 310:prog.c        **** 	uint8 cclkPort, cclkBit;
 311:prog.c        **** 	uint8 dataPort, dataBit[8];
 312:prog.c        **** 	uint8 port, bit;
 313:prog.c        **** 	uint8 initStatus, doneStatus;
 314:prog.c        **** 	const char *ptr = portConfig + 2;
 1117              		.loc 2 314 0
 1118 0aa6 488B8548 		movq	-3768(%rbp), %rax
 1118      F1FFFF
 1119 0aad 4883C002 		addq	$2, %rax
 1120 0ab1 48898588 		movq	%rax, -3704(%rbp)
 1120      F1FFFF
 315:prog.c        **** 	PinConfig pinMap[26][32] = {{0,},};
 1121              		.loc 2 315 0
 1122 0ab8 488D9590 		leaq	-3696(%rbp), %rdx
 1122      F1FFFF
 1123 0abf B8000000 		movl	$0, %eax
 1123      00
 1124 0ac4 B9A00100 		movl	$416, %ecx
 1124      00
 1125 0ac9 4889D7   		movq	%rdx, %rdi
 1126 0acc F348AB   		rep stosq
 316:prog.c        **** 	PinConfig thisPin;
 317:prog.c        **** 	const uint8 zeroBlock[64] = {0,};
 1127              		.loc 2 317 0
 1128 0acf 488D95B0 		leaq	-336(%rbp), %rdx
 1128      FEFFFF
 1129 0ad6 B8000000 		movl	$0, %eax
 1129      00
 1130 0adb B9080000 		movl	$8, %ecx
 1130      00
 1131 0ae0 4889D7   		movq	%rdx, %rdi
 1132 0ae3 F348AB   		rep stosq
 318:prog.c        **** 	uint8 lookupTable[256];
 319:prog.c        **** 	int i;
 320:prog.c        **** 	char ch;
 321:prog.c        **** 	CHECK_STATUS(
 1133              		.loc 2 321 0
 1134 0ae6 83BD54F1 		cmpl	$5, -3756(%rbp)
 1134      FFFF05
 1135 0aed 742E     		je	.L66
 1136              		.loc 2 321 0 is_stmt 0 discriminator 1
 1137 0aef 83BD54F1 		cmpl	$6, -3756(%rbp)
 1137      FFFF06
 1138 0af6 7425     		je	.L66
 1139              		.loc 2 321 0 discriminator 2
 1140 0af8 488B8538 		movq	-3784(%rbp), %rax
 1140      F1FFFF
 1141 0aff 488D3500 		leaq	.LC11(%rip), %rsi
 1141      000000
 1142 0b06 4889C7   		movq	%rax, %rdi
 1143 0b09 E8000000 		call	errPrefix@PLT
 1143      00
 1144 0b0e C78578F1 		movl	$11, -3720(%rbp)
 1144      FFFF0B00 
 1144      0000
 1145 0b18 E9461C00 		jmp	.L67
 1145      00
 1146              	.L66:
 322:prog.c        **** 		progOp != PROG_PARALLEL && progOp != PROG_SPI_SEND, FL_CONF_FORMAT, cleanup,
 323:prog.c        **** 		"xProgram(): unsupported ProgOp");
 324:prog.c        **** 	EXPECT_CHAR(':', "xProgram");
 1147              		.loc 2 324 0 is_stmt 1
 1148 0b1d 488B8588 		movq	-3704(%rbp), %rax
 1148      F1FFFF
 1149 0b24 0FB600   		movzbl	(%rax), %eax
 1150 0b27 88856EF1 		movb	%al, -3730(%rbp)
 1150      FFFF
 1151 0b2d 80BD6EF1 		cmpb	$0, -3730(%rbp)
 1151      FFFF00
 1152 0b34 7553     		jne	.L68
 1153              		.loc 2 324 0 is_stmt 0 discriminator 1
 1154 0b36 488B8588 		movq	-3704(%rbp), %rax
 1154      F1FFFF
 1155 0b3d 4889C2   		movq	%rax, %rdx
 1156 0b40 488B8548 		movq	-3768(%rbp), %rax
 1156      F1FFFF
 1157 0b47 4829C2   		subq	%rax, %rdx
 1158 0b4a 4889D0   		movq	%rdx, %rax
 1159 0b4d 4889C7   		movq	%rax, %rdi
 1160 0b50 E85BF6FF 		call	spaces
 1160      FF
 1161 0b55 4889C1   		movq	%rax, %rcx
 1162 0b58 488B9548 		movq	-3768(%rbp), %rdx
 1162      F1FFFF
 1163 0b5f 488B8538 		movq	-3784(%rbp), %rax
 1163      F1FFFF
 1164 0b66 488D3500 		leaq	.LC12(%rip), %rsi
 1164      000000
 1165 0b6d 4889C7   		movq	%rax, %rdi
 1166 0b70 B8000000 		movl	$0, %eax
 1166      00
 1167 0b75 E8000000 		call	errRender@PLT
 1167      00
 1168 0b7a C78578F1 		movl	$11, -3720(%rbp)
 1168      FFFF0B00 
 1168      0000
 1169 0b84 E9DA1B00 		jmp	.L67
 1169      00
 1170              	.L68:
 1171              		.loc 2 324 0 discriminator 2
 1172 0b89 80BD6EF1 		cmpb	$58, -3730(%rbp)
 1172      FFFF3A
 1173 0b90 7453     		je	.L69
 1174              		.loc 2 324 0 discriminator 3
 1175 0b92 488B8588 		movq	-3704(%rbp), %rax
 1175      F1FFFF
 1176 0b99 4889C2   		movq	%rax, %rdx
 1177 0b9c 488B8548 		movq	-3768(%rbp), %rax
 1177      F1FFFF
 1178 0ba3 4829C2   		subq	%rax, %rdx
 1179 0ba6 4889D0   		movq	%rdx, %rax
 1180 0ba9 4889C7   		movq	%rax, %rdi
 1181 0bac E8FFF5FF 		call	spaces
 1181      FF
 1182 0bb1 4889C1   		movq	%rax, %rcx
 1183 0bb4 488B9548 		movq	-3768(%rbp), %rdx
 1183      F1FFFF
 1184 0bbb 488B8538 		movq	-3784(%rbp), %rax
 1184      F1FFFF
 1185 0bc2 488D3500 		leaq	.LC13(%rip), %rsi
 1185      000000
 1186 0bc9 4889C7   		movq	%rax, %rdi
 1187 0bcc B8000000 		movl	$0, %eax
 1187      00
 1188 0bd1 E8000000 		call	errRender@PLT
 1188      00
 1189 0bd6 C78578F1 		movl	$11, -3720(%rbp)
 1189      FFFF0B00 
 1189      0000
 1190 0be0 E97E1B00 		jmp	.L67
 1190      00
 1191              	.L69:
 1192              		.loc 2 324 0 discriminator 4
 1193 0be5 488B8588 		movq	-3704(%rbp), %rax
 1193      F1FFFF
 1194 0bec 4883C001 		addq	$1, %rax
 1195 0bf0 48898588 		movq	%rax, -3704(%rbp)
 1195      F1FFFF
 325:prog.c        **** 
 326:prog.c        **** 	GET_PAIR(progPort, progBit, "xProgram");
 1196              		.loc 2 326 0 is_stmt 1 discriminator 4
 1197 0bf7 488B8588 		movq	-3704(%rbp), %rax
 1197      F1FFFF
 1198 0bfe 0FB600   		movzbl	(%rax), %eax
 1199 0c01 88856EF1 		movb	%al, -3730(%rbp)
 1199      FFFF
 1200 0c07 80BD6EF1 		cmpb	$0, -3730(%rbp)
 1200      FFFF00
 1201 0c0e 7553     		jne	.L70
 1202              		.loc 2 326 0 is_stmt 0 discriminator 1
 1203 0c10 488B8588 		movq	-3704(%rbp), %rax
 1203      F1FFFF
 1204 0c17 4889C2   		movq	%rax, %rdx
 1205 0c1a 488B8548 		movq	-3768(%rbp), %rax
 1205      F1FFFF
 1206 0c21 4829C2   		subq	%rax, %rdx
 1207 0c24 4889D0   		movq	%rdx, %rax
 1208 0c27 4889C7   		movq	%rax, %rdi
 1209 0c2a E881F5FF 		call	spaces
 1209      FF
 1210 0c2f 4889C1   		movq	%rax, %rcx
 1211 0c32 488B9548 		movq	-3768(%rbp), %rdx
 1211      F1FFFF
 1212 0c39 488B8538 		movq	-3784(%rbp), %rax
 1212      F1FFFF
 1213 0c40 488D3500 		leaq	.LC12(%rip), %rsi
 1213      000000
 1214 0c47 4889C7   		movq	%rax, %rdi
 1215 0c4a B8000000 		movl	$0, %eax
 1215      00
 1216 0c4f E8000000 		call	errRender@PLT
 1216      00
 1217 0c54 C78578F1 		movl	$11, -3720(%rbp)
 1217      FFFF0B00 
 1217      0000
 1218 0c5e E9001B00 		jmp	.L67
 1218      00
 1219              	.L70:
 1220              		.loc 2 326 0 discriminator 2
 1221 0c63 80BD6EF1 		cmpb	$64, -3730(%rbp)
 1221      FFFF40
 1222 0c6a 7E09     		jle	.L71
 1223              		.loc 2 326 0 discriminator 4
 1224 0c6c 80BD6EF1 		cmpb	$90, -3730(%rbp)
 1224      FFFF5A
 1225 0c73 7E53     		jle	.L72
 1226              	.L71:
 1227              		.loc 2 326 0 discriminator 5
 1228 0c75 488B8588 		movq	-3704(%rbp), %rax
 1228      F1FFFF
 1229 0c7c 4889C2   		movq	%rax, %rdx
 1230 0c7f 488B8548 		movq	-3768(%rbp), %rax
 1230      F1FFFF
 1231 0c86 4829C2   		subq	%rax, %rdx
 1232 0c89 4889D0   		movq	%rdx, %rax
 1233 0c8c 4889C7   		movq	%rax, %rdi
 1234 0c8f E81CF5FF 		call	spaces
 1234      FF
 1235 0c94 4889C1   		movq	%rax, %rcx
 1236 0c97 488B9548 		movq	-3768(%rbp), %rdx
 1236      F1FFFF
 1237 0c9e 488B8538 		movq	-3784(%rbp), %rax
 1237      F1FFFF
 1238 0ca5 488D3500 		leaq	.LC14(%rip), %rsi
 1238      000000
 1239 0cac 4889C7   		movq	%rax, %rdi
 1240 0caf B8000000 		movl	$0, %eax
 1240      00
 1241 0cb4 E8000000 		call	errRender@PLT
 1241      00
 1242 0cb9 C78578F1 		movl	$11, -3720(%rbp)
 1242      FFFF0B00 
 1242      0000
 1243 0cc3 E99B1A00 		jmp	.L67
 1243      00
 1244              	.L72:
 1245              		.loc 2 326 0 discriminator 6
 1246 0cc8 0FB6856E 		movzbl	-3730(%rbp), %eax
 1246      F1FFFF
 1247 0ccf 83E841   		subl	$65, %eax
 1248 0cd2 88856FF1 		movb	%al, -3729(%rbp)
 1248      FFFF
 1249 0cd8 488B8588 		movq	-3704(%rbp), %rax
 1249      F1FFFF
 1250 0cdf 4883C001 		addq	$1, %rax
 1251 0ce3 48898588 		movq	%rax, -3704(%rbp)
 1251      F1FFFF
 1252 0cea 488B8588 		movq	-3704(%rbp), %rax
 1252      F1FFFF
 1253 0cf1 0FB600   		movzbl	(%rax), %eax
 1254 0cf4 88856EF1 		movb	%al, -3730(%rbp)
 1254      FFFF
 1255 0cfa 80BD6EF1 		cmpb	$0, -3730(%rbp)
 1255      FFFF00
 1256 0d01 7553     		jne	.L73
 1257              		.loc 2 326 0 discriminator 7
 1258 0d03 488B8588 		movq	-3704(%rbp), %rax
 1258      F1FFFF
 1259 0d0a 4889C2   		movq	%rax, %rdx
 1260 0d0d 488B8548 		movq	-3768(%rbp), %rax
 1260      F1FFFF
 1261 0d14 4829C2   		subq	%rax, %rdx
 1262 0d17 4889D0   		movq	%rdx, %rax
 1263 0d1a 4889C7   		movq	%rax, %rdi
 1264 0d1d E88EF4FF 		call	spaces
 1264      FF
 1265 0d22 4889C1   		movq	%rax, %rcx
 1266 0d25 488B9548 		movq	-3768(%rbp), %rdx
 1266      F1FFFF
 1267 0d2c 488B8538 		movq	-3784(%rbp), %rax
 1267      F1FFFF
 1268 0d33 488D3500 		leaq	.LC12(%rip), %rsi
 1268      000000
 1269 0d3a 4889C7   		movq	%rax, %rdi
 1270 0d3d B8000000 		movl	$0, %eax
 1270      00
 1271 0d42 E8000000 		call	errRender@PLT
 1271      00
 1272 0d47 C78578F1 		movl	$11, -3720(%rbp)
 1272      FFFF0B00 
 1272      0000
 1273 0d51 E90D1A00 		jmp	.L67
 1273      00
 1274              	.L73:
 1275              		.loc 2 326 0 discriminator 8
 1276 0d56 80BD6EF1 		cmpb	$47, -3730(%rbp)
 1276      FFFF2F
 1277 0d5d 7E09     		jle	.L74
 1278              		.loc 2 326 0 discriminator 10
 1279 0d5f 80BD6EF1 		cmpb	$57, -3730(%rbp)
 1279      FFFF39
 1280 0d66 7E53     		jle	.L75
 1281              	.L74:
 1282              		.loc 2 326 0 discriminator 11
 1283 0d68 488B8588 		movq	-3704(%rbp), %rax
 1283      F1FFFF
 1284 0d6f 4889C2   		movq	%rax, %rdx
 1285 0d72 488B8548 		movq	-3768(%rbp), %rax
 1285      F1FFFF
 1286 0d79 4829C2   		subq	%rax, %rdx
 1287 0d7c 4889D0   		movq	%rdx, %rax
 1288 0d7f 4889C7   		movq	%rax, %rdi
 1289 0d82 E829F4FF 		call	spaces
 1289      FF
 1290 0d87 4889C1   		movq	%rax, %rcx
 1291 0d8a 488B9548 		movq	-3768(%rbp), %rdx
 1291      F1FFFF
 1292 0d91 488B8538 		movq	-3784(%rbp), %rax
 1292      F1FFFF
 1293 0d98 488D3500 		leaq	.LC15(%rip), %rsi
 1293      000000
 1294 0d9f 4889C7   		movq	%rax, %rdi
 1295 0da2 B8000000 		movl	$0, %eax
 1295      00
 1296 0da7 E8000000 		call	errRender@PLT
 1296      00
 1297 0dac C78578F1 		movl	$11, -3720(%rbp)
 1297      FFFF0B00 
 1297      0000
 1298 0db6 E9A81900 		jmp	.L67
 1298      00
 1299              	.L75:
 1300              		.loc 2 326 0 discriminator 12
 1301 0dbb 488B8588 		movq	-3704(%rbp), %rax
 1301      F1FFFF
 1302 0dc2 488D8D88 		leaq	-3704(%rbp), %rcx
 1302      F1FFFF
 1303 0dc9 BA0A0000 		movl	$10, %edx
 1303      00
 1304 0dce 4889CE   		movq	%rcx, %rsi
 1305 0dd1 4889C7   		movq	%rax, %rdi
 1306 0dd4 E8000000 		call	strtoul@PLT
 1306      00
 1307 0dd9 888570F1 		movb	%al, -3728(%rbp)
 1307      FFFF
 327:prog.c        **** 	SET_BIT(progPort, progBit, PIN_LOW, "xProgram");
 1308              		.loc 2 327 0 is_stmt 1 discriminator 12
 1309 0ddf 0FB6956F 		movzbl	-3729(%rbp), %edx
 1309      F1FFFF
 1310 0de6 0FB68570 		movzbl	-3728(%rbp), %eax
 1310      F1FFFF
 1311 0ded 4898     		cltq
 1312 0def 4863D2   		movslq	%edx, %rdx
 1313 0df2 48C1E205 		salq	$5, %rdx
 1314 0df6 4801D0   		addq	%rdx, %rax
 1315 0df9 8B848590 		movl	-3696(%rbp,%rax,4), %eax
 1315      F1FFFF
 1316 0e00 85C0     		testl	%eax, %eax
 1317 0e02 7472     		je	.L76
 1318              		.loc 2 327 0 is_stmt 0 discriminator 1
 1319 0e04 488B8588 		movq	-3704(%rbp), %rax
 1319      F1FFFF
 1320 0e0b 4889C2   		movq	%rax, %rdx
 1321 0e0e 488B8548 		movq	-3768(%rbp), %rax
 1321      F1FFFF
 1322 0e15 4829C2   		subq	%rax, %rdx
 1323 0e18 4889D0   		movq	%rdx, %rax
 1324 0e1b 4883E801 		subq	$1, %rax
 1325 0e1f 4889C7   		movq	%rax, %rdi
 1326 0e22 E889F3FF 		call	spaces
 1326      FF
 1327 0e27 4889C7   		movq	%rax, %rdi
 1328 0e2a 0FB69570 		movzbl	-3728(%rbp), %edx
 1328      F1FFFF
 1329 0e31 0FB6856F 		movzbl	-3729(%rbp), %eax
 1329      F1FFFF
 1330 0e38 8D7041   		leal	65(%rax), %esi
 1331 0e3b 488B8D48 		movq	-3768(%rbp), %rcx
 1331      F1FFFF
 1332 0e42 488B8538 		movq	-3784(%rbp), %rax
 1332      F1FFFF
 1333 0e49 4989F9   		movq	%rdi, %r9
 1334 0e4c 4989C8   		movq	%rcx, %r8
 1335 0e4f 89D1     		movl	%edx, %ecx
 1336 0e51 89F2     		movl	%esi, %edx
 1337 0e53 488D3500 		leaq	.LC16(%rip), %rsi
 1337      000000
 1338 0e5a 4889C7   		movq	%rax, %rdi
 1339 0e5d B8000000 		movl	$0, %eax
 1339      00
 1340 0e62 E8000000 		call	errRender@PLT
 1340      00
 1341 0e67 C78578F1 		movl	$11, -3720(%rbp)
 1341      FFFF0B00 
 1341      0000
 1342 0e71 E9ED1800 		jmp	.L67
 1342      00
 1343              	.L76:
 1344              		.loc 2 327 0 discriminator 2
 1345 0e76 0FB6956F 		movzbl	-3729(%rbp), %edx
 1345      F1FFFF
 1346 0e7d 0FB68570 		movzbl	-3728(%rbp), %eax
 1346      F1FFFF
 1347 0e84 4898     		cltq
 1348 0e86 4863D2   		movslq	%edx, %rdx
 1349 0e89 48C1E205 		salq	$5, %rdx
 1350 0e8d 4801D0   		addq	%rdx, %rax
 1351 0e90 C7848590 		movl	$2, -3696(%rbp,%rax,4)
 1351      F1FFFF02 
 1351      000000
 328:prog.c        **** 
 329:prog.c        **** 	GET_PAIR(initPort, initBit, "xProgram");
 1352              		.loc 2 329 0 is_stmt 1 discriminator 2
 1353 0e9b 488B8588 		movq	-3704(%rbp), %rax
 1353      F1FFFF
 1354 0ea2 0FB600   		movzbl	(%rax), %eax
 1355 0ea5 88856EF1 		movb	%al, -3730(%rbp)
 1355      FFFF
 1356 0eab 80BD6EF1 		cmpb	$0, -3730(%rbp)
 1356      FFFF00
 1357 0eb2 7553     		jne	.L77
 1358              		.loc 2 329 0 is_stmt 0 discriminator 1
 1359 0eb4 488B8588 		movq	-3704(%rbp), %rax
 1359      F1FFFF
 1360 0ebb 4889C2   		movq	%rax, %rdx
 1361 0ebe 488B8548 		movq	-3768(%rbp), %rax
 1361      F1FFFF
 1362 0ec5 4829C2   		subq	%rax, %rdx
 1363 0ec8 4889D0   		movq	%rdx, %rax
 1364 0ecb 4889C7   		movq	%rax, %rdi
 1365 0ece E8DDF2FF 		call	spaces
 1365      FF
 1366 0ed3 4889C1   		movq	%rax, %rcx
 1367 0ed6 488B9548 		movq	-3768(%rbp), %rdx
 1367      F1FFFF
 1368 0edd 488B8538 		movq	-3784(%rbp), %rax
 1368      F1FFFF
 1369 0ee4 488D3500 		leaq	.LC12(%rip), %rsi
 1369      000000
 1370 0eeb 4889C7   		movq	%rax, %rdi
 1371 0eee B8000000 		movl	$0, %eax
 1371      00
 1372 0ef3 E8000000 		call	errRender@PLT
 1372      00
 1373 0ef8 C78578F1 		movl	$11, -3720(%rbp)
 1373      FFFF0B00 
 1373      0000
 1374 0f02 E95C1800 		jmp	.L67
 1374      00
 1375              	.L77:
 1376              		.loc 2 329 0 discriminator 2
 1377 0f07 80BD6EF1 		cmpb	$64, -3730(%rbp)
 1377      FFFF40
 1378 0f0e 7E09     		jle	.L78
 1379              		.loc 2 329 0 discriminator 4
 1380 0f10 80BD6EF1 		cmpb	$90, -3730(%rbp)
 1380      FFFF5A
 1381 0f17 7E53     		jle	.L79
 1382              	.L78:
 1383              		.loc 2 329 0 discriminator 5
 1384 0f19 488B8588 		movq	-3704(%rbp), %rax
 1384      F1FFFF
 1385 0f20 4889C2   		movq	%rax, %rdx
 1386 0f23 488B8548 		movq	-3768(%rbp), %rax
 1386      F1FFFF
 1387 0f2a 4829C2   		subq	%rax, %rdx
 1388 0f2d 4889D0   		movq	%rdx, %rax
 1389 0f30 4889C7   		movq	%rax, %rdi
 1390 0f33 E878F2FF 		call	spaces
 1390      FF
 1391 0f38 4889C1   		movq	%rax, %rcx
 1392 0f3b 488B9548 		movq	-3768(%rbp), %rdx
 1392      F1FFFF
 1393 0f42 488B8538 		movq	-3784(%rbp), %rax
 1393      F1FFFF
 1394 0f49 488D3500 		leaq	.LC14(%rip), %rsi
 1394      000000
 1395 0f50 4889C7   		movq	%rax, %rdi
 1396 0f53 B8000000 		movl	$0, %eax
 1396      00
 1397 0f58 E8000000 		call	errRender@PLT
 1397      00
 1398 0f5d C78578F1 		movl	$11, -3720(%rbp)
 1398      FFFF0B00 
 1398      0000
 1399 0f67 E9F71700 		jmp	.L67
 1399      00
 1400              	.L79:
 1401              		.loc 2 329 0 discriminator 6
 1402 0f6c 0FB6856E 		movzbl	-3730(%rbp), %eax
 1402      F1FFFF
 1403 0f73 83E841   		subl	$65, %eax
 1404 0f76 888571F1 		movb	%al, -3727(%rbp)
 1404      FFFF
 1405 0f7c 488B8588 		movq	-3704(%rbp), %rax
 1405      F1FFFF
 1406 0f83 4883C001 		addq	$1, %rax
 1407 0f87 48898588 		movq	%rax, -3704(%rbp)
 1407      F1FFFF
 1408 0f8e 488B8588 		movq	-3704(%rbp), %rax
 1408      F1FFFF
 1409 0f95 0FB600   		movzbl	(%rax), %eax
 1410 0f98 88856EF1 		movb	%al, -3730(%rbp)
 1410      FFFF
 1411 0f9e 80BD6EF1 		cmpb	$0, -3730(%rbp)
 1411      FFFF00
 1412 0fa5 7553     		jne	.L80
 1413              		.loc 2 329 0 discriminator 7
 1414 0fa7 488B8588 		movq	-3704(%rbp), %rax
 1414      F1FFFF
 1415 0fae 4889C2   		movq	%rax, %rdx
 1416 0fb1 488B8548 		movq	-3768(%rbp), %rax
 1416      F1FFFF
 1417 0fb8 4829C2   		subq	%rax, %rdx
 1418 0fbb 4889D0   		movq	%rdx, %rax
 1419 0fbe 4889C7   		movq	%rax, %rdi
 1420 0fc1 E8EAF1FF 		call	spaces
 1420      FF
 1421 0fc6 4889C1   		movq	%rax, %rcx
 1422 0fc9 488B9548 		movq	-3768(%rbp), %rdx
 1422      F1FFFF
 1423 0fd0 488B8538 		movq	-3784(%rbp), %rax
 1423      F1FFFF
 1424 0fd7 488D3500 		leaq	.LC12(%rip), %rsi
 1424      000000
 1425 0fde 4889C7   		movq	%rax, %rdi
 1426 0fe1 B8000000 		movl	$0, %eax
 1426      00
 1427 0fe6 E8000000 		call	errRender@PLT
 1427      00
 1428 0feb C78578F1 		movl	$11, -3720(%rbp)
 1428      FFFF0B00 
 1428      0000
 1429 0ff5 E9691700 		jmp	.L67
 1429      00
 1430              	.L80:
 1431              		.loc 2 329 0 discriminator 8
 1432 0ffa 80BD6EF1 		cmpb	$47, -3730(%rbp)
 1432      FFFF2F
 1433 1001 7E09     		jle	.L81
 1434              		.loc 2 329 0 discriminator 10
 1435 1003 80BD6EF1 		cmpb	$57, -3730(%rbp)
 1435      FFFF39
 1436 100a 7E53     		jle	.L82
 1437              	.L81:
 1438              		.loc 2 329 0 discriminator 11
 1439 100c 488B8588 		movq	-3704(%rbp), %rax
 1439      F1FFFF
 1440 1013 4889C2   		movq	%rax, %rdx
 1441 1016 488B8548 		movq	-3768(%rbp), %rax
 1441      F1FFFF
 1442 101d 4829C2   		subq	%rax, %rdx
 1443 1020 4889D0   		movq	%rdx, %rax
 1444 1023 4889C7   		movq	%rax, %rdi
 1445 1026 E885F1FF 		call	spaces
 1445      FF
 1446 102b 4889C1   		movq	%rax, %rcx
 1447 102e 488B9548 		movq	-3768(%rbp), %rdx
 1447      F1FFFF
 1448 1035 488B8538 		movq	-3784(%rbp), %rax
 1448      F1FFFF
 1449 103c 488D3500 		leaq	.LC15(%rip), %rsi
 1449      000000
 1450 1043 4889C7   		movq	%rax, %rdi
 1451 1046 B8000000 		movl	$0, %eax
 1451      00
 1452 104b E8000000 		call	errRender@PLT
 1452      00
 1453 1050 C78578F1 		movl	$11, -3720(%rbp)
 1453      FFFF0B00 
 1453      0000
 1454 105a E9041700 		jmp	.L67
 1454      00
 1455              	.L82:
 1456              		.loc 2 329 0 discriminator 12
 1457 105f 488B8588 		movq	-3704(%rbp), %rax
 1457      F1FFFF
 1458 1066 488D8D88 		leaq	-3704(%rbp), %rcx
 1458      F1FFFF
 1459 106d BA0A0000 		movl	$10, %edx
 1459      00
 1460 1072 4889CE   		movq	%rcx, %rsi
 1461 1075 4889C7   		movq	%rax, %rdi
 1462 1078 E8000000 		call	strtoul@PLT
 1462      00
 1463 107d 888572F1 		movb	%al, -3726(%rbp)
 1463      FFFF
 330:prog.c        **** 	SET_BIT(initPort, initBit, PIN_INPUT, "xProgram");
 1464              		.loc 2 330 0 is_stmt 1 discriminator 12
 1465 1083 0FB69571 		movzbl	-3727(%rbp), %edx
 1465      F1FFFF
 1466 108a 0FB68572 		movzbl	-3726(%rbp), %eax
 1466      F1FFFF
 1467 1091 4898     		cltq
 1468 1093 4863D2   		movslq	%edx, %rdx
 1469 1096 48C1E205 		salq	$5, %rdx
 1470 109a 4801D0   		addq	%rdx, %rax
 1471 109d 8B848590 		movl	-3696(%rbp,%rax,4), %eax
 1471      F1FFFF
 1472 10a4 85C0     		testl	%eax, %eax
 1473 10a6 7472     		je	.L83
 1474              		.loc 2 330 0 is_stmt 0 discriminator 1
 1475 10a8 488B8588 		movq	-3704(%rbp), %rax
 1475      F1FFFF
 1476 10af 4889C2   		movq	%rax, %rdx
 1477 10b2 488B8548 		movq	-3768(%rbp), %rax
 1477      F1FFFF
 1478 10b9 4829C2   		subq	%rax, %rdx
 1479 10bc 4889D0   		movq	%rdx, %rax
 1480 10bf 4883E801 		subq	$1, %rax
 1481 10c3 4889C7   		movq	%rax, %rdi
 1482 10c6 E8E5F0FF 		call	spaces
 1482      FF
 1483 10cb 4889C7   		movq	%rax, %rdi
 1484 10ce 0FB69572 		movzbl	-3726(%rbp), %edx
 1484      F1FFFF
 1485 10d5 0FB68571 		movzbl	-3727(%rbp), %eax
 1485      F1FFFF
 1486 10dc 8D7041   		leal	65(%rax), %esi
 1487 10df 488B8D48 		movq	-3768(%rbp), %rcx
 1487      F1FFFF
 1488 10e6 488B8538 		movq	-3784(%rbp), %rax
 1488      F1FFFF
 1489 10ed 4989F9   		movq	%rdi, %r9
 1490 10f0 4989C8   		movq	%rcx, %r8
 1491 10f3 89D1     		movl	%edx, %ecx
 1492 10f5 89F2     		movl	%esi, %edx
 1493 10f7 488D3500 		leaq	.LC16(%rip), %rsi
 1493      000000
 1494 10fe 4889C7   		movq	%rax, %rdi
 1495 1101 B8000000 		movl	$0, %eax
 1495      00
 1496 1106 E8000000 		call	errRender@PLT
 1496      00
 1497 110b C78578F1 		movl	$11, -3720(%rbp)
 1497      FFFF0B00 
 1497      0000
 1498 1115 E9491600 		jmp	.L67
 1498      00
 1499              	.L83:
 1500              		.loc 2 330 0 discriminator 2
 1501 111a 0FB69571 		movzbl	-3727(%rbp), %edx
 1501      F1FFFF
 1502 1121 0FB68572 		movzbl	-3726(%rbp), %eax
 1502      F1FFFF
 1503 1128 4898     		cltq
 1504 112a 4863D2   		movslq	%edx, %rdx
 1505 112d 48C1E205 		salq	$5, %rdx
 1506 1131 4801D0   		addq	%rdx, %rax
 1507 1134 C7848590 		movl	$3, -3696(%rbp,%rax,4)
 1507      F1FFFF03 
 1507      000000
 331:prog.c        **** 
 332:prog.c        **** 	GET_PAIR(donePort, doneBit, "xProgram");
 1508              		.loc 2 332 0 is_stmt 1 discriminator 2
 1509 113f 488B8588 		movq	-3704(%rbp), %rax
 1509      F1FFFF
 1510 1146 0FB600   		movzbl	(%rax), %eax
 1511 1149 88856EF1 		movb	%al, -3730(%rbp)
 1511      FFFF
 1512 114f 80BD6EF1 		cmpb	$0, -3730(%rbp)
 1512      FFFF00
 1513 1156 7553     		jne	.L84
 1514              		.loc 2 332 0 is_stmt 0 discriminator 1
 1515 1158 488B8588 		movq	-3704(%rbp), %rax
 1515      F1FFFF
 1516 115f 4889C2   		movq	%rax, %rdx
 1517 1162 488B8548 		movq	-3768(%rbp), %rax
 1517      F1FFFF
 1518 1169 4829C2   		subq	%rax, %rdx
 1519 116c 4889D0   		movq	%rdx, %rax
 1520 116f 4889C7   		movq	%rax, %rdi
 1521 1172 E839F0FF 		call	spaces
 1521      FF
 1522 1177 4889C1   		movq	%rax, %rcx
 1523 117a 488B9548 		movq	-3768(%rbp), %rdx
 1523      F1FFFF
 1524 1181 488B8538 		movq	-3784(%rbp), %rax
 1524      F1FFFF
 1525 1188 488D3500 		leaq	.LC12(%rip), %rsi
 1525      000000
 1526 118f 4889C7   		movq	%rax, %rdi
 1527 1192 B8000000 		movl	$0, %eax
 1527      00
 1528 1197 E8000000 		call	errRender@PLT
 1528      00
 1529 119c C78578F1 		movl	$11, -3720(%rbp)
 1529      FFFF0B00 
 1529      0000
 1530 11a6 E9B81500 		jmp	.L67
 1530      00
 1531              	.L84:
 1532              		.loc 2 332 0 discriminator 2
 1533 11ab 80BD6EF1 		cmpb	$64, -3730(%rbp)
 1533      FFFF40
 1534 11b2 7E09     		jle	.L85
 1535              		.loc 2 332 0 discriminator 4
 1536 11b4 80BD6EF1 		cmpb	$90, -3730(%rbp)
 1536      FFFF5A
 1537 11bb 7E53     		jle	.L86
 1538              	.L85:
 1539              		.loc 2 332 0 discriminator 5
 1540 11bd 488B8588 		movq	-3704(%rbp), %rax
 1540      F1FFFF
 1541 11c4 4889C2   		movq	%rax, %rdx
 1542 11c7 488B8548 		movq	-3768(%rbp), %rax
 1542      F1FFFF
 1543 11ce 4829C2   		subq	%rax, %rdx
 1544 11d1 4889D0   		movq	%rdx, %rax
 1545 11d4 4889C7   		movq	%rax, %rdi
 1546 11d7 E8D4EFFF 		call	spaces
 1546      FF
 1547 11dc 4889C1   		movq	%rax, %rcx
 1548 11df 488B9548 		movq	-3768(%rbp), %rdx
 1548      F1FFFF
 1549 11e6 488B8538 		movq	-3784(%rbp), %rax
 1549      F1FFFF
 1550 11ed 488D3500 		leaq	.LC14(%rip), %rsi
 1550      000000
 1551 11f4 4889C7   		movq	%rax, %rdi
 1552 11f7 B8000000 		movl	$0, %eax
 1552      00
 1553 11fc E8000000 		call	errRender@PLT
 1553      00
 1554 1201 C78578F1 		movl	$11, -3720(%rbp)
 1554      FFFF0B00 
 1554      0000
 1555 120b E9531500 		jmp	.L67
 1555      00
 1556              	.L86:
 1557              		.loc 2 332 0 discriminator 6
 1558 1210 0FB6856E 		movzbl	-3730(%rbp), %eax
 1558      F1FFFF
 1559 1217 83E841   		subl	$65, %eax
 1560 121a 888573F1 		movb	%al, -3725(%rbp)
 1560      FFFF
 1561 1220 488B8588 		movq	-3704(%rbp), %rax
 1561      F1FFFF
 1562 1227 4883C001 		addq	$1, %rax
 1563 122b 48898588 		movq	%rax, -3704(%rbp)
 1563      F1FFFF
 1564 1232 488B8588 		movq	-3704(%rbp), %rax
 1564      F1FFFF
 1565 1239 0FB600   		movzbl	(%rax), %eax
 1566 123c 88856EF1 		movb	%al, -3730(%rbp)
 1566      FFFF
 1567 1242 80BD6EF1 		cmpb	$0, -3730(%rbp)
 1567      FFFF00
 1568 1249 7553     		jne	.L87
 1569              		.loc 2 332 0 discriminator 7
 1570 124b 488B8588 		movq	-3704(%rbp), %rax
 1570      F1FFFF
 1571 1252 4889C2   		movq	%rax, %rdx
 1572 1255 488B8548 		movq	-3768(%rbp), %rax
 1572      F1FFFF
 1573 125c 4829C2   		subq	%rax, %rdx
 1574 125f 4889D0   		movq	%rdx, %rax
 1575 1262 4889C7   		movq	%rax, %rdi
 1576 1265 E846EFFF 		call	spaces
 1576      FF
 1577 126a 4889C1   		movq	%rax, %rcx
 1578 126d 488B9548 		movq	-3768(%rbp), %rdx
 1578      F1FFFF
 1579 1274 488B8538 		movq	-3784(%rbp), %rax
 1579      F1FFFF
 1580 127b 488D3500 		leaq	.LC12(%rip), %rsi
 1580      000000
 1581 1282 4889C7   		movq	%rax, %rdi
 1582 1285 B8000000 		movl	$0, %eax
 1582      00
 1583 128a E8000000 		call	errRender@PLT
 1583      00
 1584 128f C78578F1 		movl	$11, -3720(%rbp)
 1584      FFFF0B00 
 1584      0000
 1585 1299 E9C51400 		jmp	.L67
 1585      00
 1586              	.L87:
 1587              		.loc 2 332 0 discriminator 8
 1588 129e 80BD6EF1 		cmpb	$47, -3730(%rbp)
 1588      FFFF2F
 1589 12a5 7E09     		jle	.L88
 1590              		.loc 2 332 0 discriminator 10
 1591 12a7 80BD6EF1 		cmpb	$57, -3730(%rbp)
 1591      FFFF39
 1592 12ae 7E53     		jle	.L89
 1593              	.L88:
 1594              		.loc 2 332 0 discriminator 11
 1595 12b0 488B8588 		movq	-3704(%rbp), %rax
 1595      F1FFFF
 1596 12b7 4889C2   		movq	%rax, %rdx
 1597 12ba 488B8548 		movq	-3768(%rbp), %rax
 1597      F1FFFF
 1598 12c1 4829C2   		subq	%rax, %rdx
 1599 12c4 4889D0   		movq	%rdx, %rax
 1600 12c7 4889C7   		movq	%rax, %rdi
 1601 12ca E8E1EEFF 		call	spaces
 1601      FF
 1602 12cf 4889C1   		movq	%rax, %rcx
 1603 12d2 488B9548 		movq	-3768(%rbp), %rdx
 1603      F1FFFF
 1604 12d9 488B8538 		movq	-3784(%rbp), %rax
 1604      F1FFFF
 1605 12e0 488D3500 		leaq	.LC15(%rip), %rsi
 1605      000000
 1606 12e7 4889C7   		movq	%rax, %rdi
 1607 12ea B8000000 		movl	$0, %eax
 1607      00
 1608 12ef E8000000 		call	errRender@PLT
 1608      00
 1609 12f4 C78578F1 		movl	$11, -3720(%rbp)
 1609      FFFF0B00 
 1609      0000
 1610 12fe E9601400 		jmp	.L67
 1610      00
 1611              	.L89:
 1612              		.loc 2 332 0 discriminator 12
 1613 1303 488B8588 		movq	-3704(%rbp), %rax
 1613      F1FFFF
 1614 130a 488D8D88 		leaq	-3704(%rbp), %rcx
 1614      F1FFFF
 1615 1311 BA0A0000 		movl	$10, %edx
 1615      00
 1616 1316 4889CE   		movq	%rcx, %rsi
 1617 1319 4889C7   		movq	%rax, %rdi
 1618 131c E8000000 		call	strtoul@PLT
 1618      00
 1619 1321 888574F1 		movb	%al, -3724(%rbp)
 1619      FFFF
 333:prog.c        **** 	SET_BIT(donePort, doneBit, PIN_INPUT, "xProgram");
 1620              		.loc 2 333 0 is_stmt 1 discriminator 12
 1621 1327 0FB69573 		movzbl	-3725(%rbp), %edx
 1621      F1FFFF
 1622 132e 0FB68574 		movzbl	-3724(%rbp), %eax
 1622      F1FFFF
 1623 1335 4898     		cltq
 1624 1337 4863D2   		movslq	%edx, %rdx
 1625 133a 48C1E205 		salq	$5, %rdx
 1626 133e 4801D0   		addq	%rdx, %rax
 1627 1341 8B848590 		movl	-3696(%rbp,%rax,4), %eax
 1627      F1FFFF
 1628 1348 85C0     		testl	%eax, %eax
 1629 134a 7472     		je	.L90
 1630              		.loc 2 333 0 is_stmt 0 discriminator 1
 1631 134c 488B8588 		movq	-3704(%rbp), %rax
 1631      F1FFFF
 1632 1353 4889C2   		movq	%rax, %rdx
 1633 1356 488B8548 		movq	-3768(%rbp), %rax
 1633      F1FFFF
 1634 135d 4829C2   		subq	%rax, %rdx
 1635 1360 4889D0   		movq	%rdx, %rax
 1636 1363 4883E801 		subq	$1, %rax
 1637 1367 4889C7   		movq	%rax, %rdi
 1638 136a E841EEFF 		call	spaces
 1638      FF
 1639 136f 4889C7   		movq	%rax, %rdi
 1640 1372 0FB69574 		movzbl	-3724(%rbp), %edx
 1640      F1FFFF
 1641 1379 0FB68573 		movzbl	-3725(%rbp), %eax
 1641      F1FFFF
 1642 1380 8D7041   		leal	65(%rax), %esi
 1643 1383 488B8D48 		movq	-3768(%rbp), %rcx
 1643      F1FFFF
 1644 138a 488B8538 		movq	-3784(%rbp), %rax
 1644      F1FFFF
 1645 1391 4989F9   		movq	%rdi, %r9
 1646 1394 4989C8   		movq	%rcx, %r8
 1647 1397 89D1     		movl	%edx, %ecx
 1648 1399 89F2     		movl	%esi, %edx
 1649 139b 488D3500 		leaq	.LC16(%rip), %rsi
 1649      000000
 1650 13a2 4889C7   		movq	%rax, %rdi
 1651 13a5 B8000000 		movl	$0, %eax
 1651      00
 1652 13aa E8000000 		call	errRender@PLT
 1652      00
 1653 13af C78578F1 		movl	$11, -3720(%rbp)
 1653      FFFF0B00 
 1653      0000
 1654 13b9 E9A51300 		jmp	.L67
 1654      00
 1655              	.L90:
 1656              		.loc 2 333 0 discriminator 2
 1657 13be 0FB69573 		movzbl	-3725(%rbp), %edx
 1657      F1FFFF
 1658 13c5 0FB68574 		movzbl	-3724(%rbp), %eax
 1658      F1FFFF
 1659 13cc 4898     		cltq
 1660 13ce 4863D2   		movslq	%edx, %rdx
 1661 13d1 48C1E205 		salq	$5, %rdx
 1662 13d5 4801D0   		addq	%rdx, %rax
 1663 13d8 C7848590 		movl	$3, -3696(%rbp,%rax,4)
 1663      F1FFFF03 
 1663      000000
 334:prog.c        **** 
 335:prog.c        **** 	GET_PAIR(cclkPort, cclkBit, "xProgram");
 1664              		.loc 2 335 0 is_stmt 1 discriminator 2
 1665 13e3 488B8588 		movq	-3704(%rbp), %rax
 1665      F1FFFF
 1666 13ea 0FB600   		movzbl	(%rax), %eax
 1667 13ed 88856EF1 		movb	%al, -3730(%rbp)
 1667      FFFF
 1668 13f3 80BD6EF1 		cmpb	$0, -3730(%rbp)
 1668      FFFF00
 1669 13fa 7553     		jne	.L91
 1670              		.loc 2 335 0 is_stmt 0 discriminator 1
 1671 13fc 488B8588 		movq	-3704(%rbp), %rax
 1671      F1FFFF
 1672 1403 4889C2   		movq	%rax, %rdx
 1673 1406 488B8548 		movq	-3768(%rbp), %rax
 1673      F1FFFF
 1674 140d 4829C2   		subq	%rax, %rdx
 1675 1410 4889D0   		movq	%rdx, %rax
 1676 1413 4889C7   		movq	%rax, %rdi
 1677 1416 E895EDFF 		call	spaces
 1677      FF
 1678 141b 4889C1   		movq	%rax, %rcx
 1679 141e 488B9548 		movq	-3768(%rbp), %rdx
 1679      F1FFFF
 1680 1425 488B8538 		movq	-3784(%rbp), %rax
 1680      F1FFFF
 1681 142c 488D3500 		leaq	.LC12(%rip), %rsi
 1681      000000
 1682 1433 4889C7   		movq	%rax, %rdi
 1683 1436 B8000000 		movl	$0, %eax
 1683      00
 1684 143b E8000000 		call	errRender@PLT
 1684      00
 1685 1440 C78578F1 		movl	$11, -3720(%rbp)
 1685      FFFF0B00 
 1685      0000
 1686 144a E9141300 		jmp	.L67
 1686      00
 1687              	.L91:
 1688              		.loc 2 335 0 discriminator 2
 1689 144f 80BD6EF1 		cmpb	$64, -3730(%rbp)
 1689      FFFF40
 1690 1456 7E09     		jle	.L92
 1691              		.loc 2 335 0 discriminator 4
 1692 1458 80BD6EF1 		cmpb	$90, -3730(%rbp)
 1692      FFFF5A
 1693 145f 7E53     		jle	.L93
 1694              	.L92:
 1695              		.loc 2 335 0 discriminator 5
 1696 1461 488B8588 		movq	-3704(%rbp), %rax
 1696      F1FFFF
 1697 1468 4889C2   		movq	%rax, %rdx
 1698 146b 488B8548 		movq	-3768(%rbp), %rax
 1698      F1FFFF
 1699 1472 4829C2   		subq	%rax, %rdx
 1700 1475 4889D0   		movq	%rdx, %rax
 1701 1478 4889C7   		movq	%rax, %rdi
 1702 147b E830EDFF 		call	spaces
 1702      FF
 1703 1480 4889C1   		movq	%rax, %rcx
 1704 1483 488B9548 		movq	-3768(%rbp), %rdx
 1704      F1FFFF
 1705 148a 488B8538 		movq	-3784(%rbp), %rax
 1705      F1FFFF
 1706 1491 488D3500 		leaq	.LC14(%rip), %rsi
 1706      000000
 1707 1498 4889C7   		movq	%rax, %rdi
 1708 149b B8000000 		movl	$0, %eax
 1708      00
 1709 14a0 E8000000 		call	errRender@PLT
 1709      00
 1710 14a5 C78578F1 		movl	$11, -3720(%rbp)
 1710      FFFF0B00 
 1710      0000
 1711 14af E9AF1200 		jmp	.L67
 1711      00
 1712              	.L93:
 1713              		.loc 2 335 0 discriminator 6
 1714 14b4 0FB6856E 		movzbl	-3730(%rbp), %eax
 1714      F1FFFF
 1715 14bb 83E841   		subl	$65, %eax
 1716 14be 888575F1 		movb	%al, -3723(%rbp)
 1716      FFFF
 1717 14c4 488B8588 		movq	-3704(%rbp), %rax
 1717      F1FFFF
 1718 14cb 4883C001 		addq	$1, %rax
 1719 14cf 48898588 		movq	%rax, -3704(%rbp)
 1719      F1FFFF
 1720 14d6 488B8588 		movq	-3704(%rbp), %rax
 1720      F1FFFF
 1721 14dd 0FB600   		movzbl	(%rax), %eax
 1722 14e0 88856EF1 		movb	%al, -3730(%rbp)
 1722      FFFF
 1723 14e6 80BD6EF1 		cmpb	$0, -3730(%rbp)
 1723      FFFF00
 1724 14ed 7553     		jne	.L94
 1725              		.loc 2 335 0 discriminator 7
 1726 14ef 488B8588 		movq	-3704(%rbp), %rax
 1726      F1FFFF
 1727 14f6 4889C2   		movq	%rax, %rdx
 1728 14f9 488B8548 		movq	-3768(%rbp), %rax
 1728      F1FFFF
 1729 1500 4829C2   		subq	%rax, %rdx
 1730 1503 4889D0   		movq	%rdx, %rax
 1731 1506 4889C7   		movq	%rax, %rdi
 1732 1509 E8A2ECFF 		call	spaces
 1732      FF
 1733 150e 4889C1   		movq	%rax, %rcx
 1734 1511 488B9548 		movq	-3768(%rbp), %rdx
 1734      F1FFFF
 1735 1518 488B8538 		movq	-3784(%rbp), %rax
 1735      F1FFFF
 1736 151f 488D3500 		leaq	.LC12(%rip), %rsi
 1736      000000
 1737 1526 4889C7   		movq	%rax, %rdi
 1738 1529 B8000000 		movl	$0, %eax
 1738      00
 1739 152e E8000000 		call	errRender@PLT
 1739      00
 1740 1533 C78578F1 		movl	$11, -3720(%rbp)
 1740      FFFF0B00 
 1740      0000
 1741 153d E9211200 		jmp	.L67
 1741      00
 1742              	.L94:
 1743              		.loc 2 335 0 discriminator 8
 1744 1542 80BD6EF1 		cmpb	$47, -3730(%rbp)
 1744      FFFF2F
 1745 1549 7E09     		jle	.L95
 1746              		.loc 2 335 0 discriminator 10
 1747 154b 80BD6EF1 		cmpb	$57, -3730(%rbp)
 1747      FFFF39
 1748 1552 7E53     		jle	.L96
 1749              	.L95:
 1750              		.loc 2 335 0 discriminator 11
 1751 1554 488B8588 		movq	-3704(%rbp), %rax
 1751      F1FFFF
 1752 155b 4889C2   		movq	%rax, %rdx
 1753 155e 488B8548 		movq	-3768(%rbp), %rax
 1753      F1FFFF
 1754 1565 4829C2   		subq	%rax, %rdx
 1755 1568 4889D0   		movq	%rdx, %rax
 1756 156b 4889C7   		movq	%rax, %rdi
 1757 156e E83DECFF 		call	spaces
 1757      FF
 1758 1573 4889C1   		movq	%rax, %rcx
 1759 1576 488B9548 		movq	-3768(%rbp), %rdx
 1759      F1FFFF
 1760 157d 488B8538 		movq	-3784(%rbp), %rax
 1760      F1FFFF
 1761 1584 488D3500 		leaq	.LC15(%rip), %rsi
 1761      000000
 1762 158b 4889C7   		movq	%rax, %rdi
 1763 158e B8000000 		movl	$0, %eax
 1763      00
 1764 1593 E8000000 		call	errRender@PLT
 1764      00
 1765 1598 C78578F1 		movl	$11, -3720(%rbp)
 1765      FFFF0B00 
 1765      0000
 1766 15a2 E9BC1100 		jmp	.L67
 1766      00
 1767              	.L96:
 1768              		.loc 2 335 0 discriminator 12
 1769 15a7 488B8588 		movq	-3704(%rbp), %rax
 1769      F1FFFF
 1770 15ae 488D8D88 		leaq	-3704(%rbp), %rcx
 1770      F1FFFF
 1771 15b5 BA0A0000 		movl	$10, %edx
 1771      00
 1772 15ba 4889CE   		movq	%rcx, %rsi
 1773 15bd 4889C7   		movq	%rax, %rdi
 1774 15c0 E8000000 		call	strtoul@PLT
 1774      00
 1775 15c5 888576F1 		movb	%al, -3722(%rbp)
 1775      FFFF
 336:prog.c        **** 	SET_BIT(cclkPort, cclkBit, PIN_LOW, "xProgram");
 1776              		.loc 2 336 0 is_stmt 1 discriminator 12
 1777 15cb 0FB69575 		movzbl	-3723(%rbp), %edx
 1777      F1FFFF
 1778 15d2 0FB68576 		movzbl	-3722(%rbp), %eax
 1778      F1FFFF
 1779 15d9 4898     		cltq
 1780 15db 4863D2   		movslq	%edx, %rdx
 1781 15de 48C1E205 		salq	$5, %rdx
 1782 15e2 4801D0   		addq	%rdx, %rax
 1783 15e5 8B848590 		movl	-3696(%rbp,%rax,4), %eax
 1783      F1FFFF
 1784 15ec 85C0     		testl	%eax, %eax
 1785 15ee 7472     		je	.L97
 1786              		.loc 2 336 0 is_stmt 0 discriminator 1
 1787 15f0 488B8588 		movq	-3704(%rbp), %rax
 1787      F1FFFF
 1788 15f7 4889C2   		movq	%rax, %rdx
 1789 15fa 488B8548 		movq	-3768(%rbp), %rax
 1789      F1FFFF
 1790 1601 4829C2   		subq	%rax, %rdx
 1791 1604 4889D0   		movq	%rdx, %rax
 1792 1607 4883E801 		subq	$1, %rax
 1793 160b 4889C7   		movq	%rax, %rdi
 1794 160e E89DEBFF 		call	spaces
 1794      FF
 1795 1613 4889C7   		movq	%rax, %rdi
 1796 1616 0FB69576 		movzbl	-3722(%rbp), %edx
 1796      F1FFFF
 1797 161d 0FB68575 		movzbl	-3723(%rbp), %eax
 1797      F1FFFF
 1798 1624 8D7041   		leal	65(%rax), %esi
 1799 1627 488B8D48 		movq	-3768(%rbp), %rcx
 1799      F1FFFF
 1800 162e 488B8538 		movq	-3784(%rbp), %rax
 1800      F1FFFF
 1801 1635 4989F9   		movq	%rdi, %r9
 1802 1638 4989C8   		movq	%rcx, %r8
 1803 163b 89D1     		movl	%edx, %ecx
 1804 163d 89F2     		movl	%esi, %edx
 1805 163f 488D3500 		leaq	.LC16(%rip), %rsi
 1805      000000
 1806 1646 4889C7   		movq	%rax, %rdi
 1807 1649 B8000000 		movl	$0, %eax
 1807      00
 1808 164e E8000000 		call	errRender@PLT
 1808      00
 1809 1653 C78578F1 		movl	$11, -3720(%rbp)
 1809      FFFF0B00 
 1809      0000
 1810 165d E9011100 		jmp	.L67
 1810      00
 1811              	.L97:
 1812              		.loc 2 336 0 discriminator 2
 1813 1662 0FB69575 		movzbl	-3723(%rbp), %edx
 1813      F1FFFF
 1814 1669 0FB68576 		movzbl	-3722(%rbp), %eax
 1814      F1FFFF
 1815 1670 4898     		cltq
 1816 1672 4863D2   		movslq	%edx, %rdx
 1817 1675 48C1E205 		salq	$5, %rdx
 1818 1679 4801D0   		addq	%rdx, %rax
 1819 167c C7848590 		movl	$2, -3696(%rbp,%rax,4)
 1819      F1FFFF02 
 1819      000000
 337:prog.c        **** 
 338:prog.c        **** 	GET_PORT(dataPort, "xProgram");
 1820              		.loc 2 338 0 is_stmt 1 discriminator 2
 1821 1687 488B8588 		movq	-3704(%rbp), %rax
 1821      F1FFFF
 1822 168e 0FB600   		movzbl	(%rax), %eax
 1823 1691 88856EF1 		movb	%al, -3730(%rbp)
 1823      FFFF
 1824 1697 80BD6EF1 		cmpb	$0, -3730(%rbp)
 1824      FFFF00
 1825 169e 7553     		jne	.L98
 1826              		.loc 2 338 0 is_stmt 0 discriminator 1
 1827 16a0 488B8588 		movq	-3704(%rbp), %rax
 1827      F1FFFF
 1828 16a7 4889C2   		movq	%rax, %rdx
 1829 16aa 488B8548 		movq	-3768(%rbp), %rax
 1829      F1FFFF
 1830 16b1 4829C2   		subq	%rax, %rdx
 1831 16b4 4889D0   		movq	%rdx, %rax
 1832 16b7 4889C7   		movq	%rax, %rdi
 1833 16ba E8F1EAFF 		call	spaces
 1833      FF
 1834 16bf 4889C1   		movq	%rax, %rcx
 1835 16c2 488B9548 		movq	-3768(%rbp), %rdx
 1835      F1FFFF
 1836 16c9 488B8538 		movq	-3784(%rbp), %rax
 1836      F1FFFF
 1837 16d0 488D3500 		leaq	.LC12(%rip), %rsi
 1837      000000
 1838 16d7 4889C7   		movq	%rax, %rdi
 1839 16da B8000000 		movl	$0, %eax
 1839      00
 1840 16df E8000000 		call	errRender@PLT
 1840      00
 1841 16e4 C78578F1 		movl	$11, -3720(%rbp)
 1841      FFFF0B00 
 1841      0000
 1842 16ee E9701000 		jmp	.L67
 1842      00
 1843              	.L98:
 1844              		.loc 2 338 0 discriminator 2
 1845 16f3 80BD6EF1 		cmpb	$64, -3730(%rbp)
 1845      FFFF40
 1846 16fa 7E09     		jle	.L99
 1847              		.loc 2 338 0 discriminator 4
 1848 16fc 80BD6EF1 		cmpb	$90, -3730(%rbp)
 1848      FFFF5A
 1849 1703 7E53     		jle	.L100
 1850              	.L99:
 1851              		.loc 2 338 0 discriminator 5
 1852 1705 488B8588 		movq	-3704(%rbp), %rax
 1852      F1FFFF
 1853 170c 4889C2   		movq	%rax, %rdx
 1854 170f 488B8548 		movq	-3768(%rbp), %rax
 1854      F1FFFF
 1855 1716 4829C2   		subq	%rax, %rdx
 1856 1719 4889D0   		movq	%rdx, %rax
 1857 171c 4889C7   		movq	%rax, %rdi
 1858 171f E88CEAFF 		call	spaces
 1858      FF
 1859 1724 4889C1   		movq	%rax, %rcx
 1860 1727 488B9548 		movq	-3768(%rbp), %rdx
 1860      F1FFFF
 1861 172e 488B8538 		movq	-3784(%rbp), %rax
 1861      F1FFFF
 1862 1735 488D3500 		leaq	.LC14(%rip), %rsi
 1862      000000
 1863 173c 4889C7   		movq	%rax, %rdi
 1864 173f B8000000 		movl	$0, %eax
 1864      00
 1865 1744 E8000000 		call	errRender@PLT
 1865      00
 1866 1749 C78578F1 		movl	$11, -3720(%rbp)
 1866      FFFF0B00 
 1866      0000
 1867 1753 E90B1000 		jmp	.L67
 1867      00
 1868              	.L100:
 1869              		.loc 2 338 0 discriminator 6
 1870 1758 0FB6856E 		movzbl	-3730(%rbp), %eax
 1870      F1FFFF
 1871 175f 83E841   		subl	$65, %eax
 1872 1762 888577F1 		movb	%al, -3721(%rbp)
 1872      FFFF
 1873 1768 488B8588 		movq	-3704(%rbp), %rax
 1873      F1FFFF
 1874 176f 4883C001 		addq	$1, %rax
 1875 1773 48898588 		movq	%rax, -3704(%rbp)
 1875      F1FFFF
 339:prog.c        **** 	if ( progOp == PROG_PARALLEL ) {
 1876              		.loc 2 339 0 is_stmt 1 discriminator 6
 1877 177a 83BD54F1 		cmpl	$5, -3756(%rbp)
 1877      FFFF05
 1878 1781 0F851202 		jne	.L101
 1878      0000
 340:prog.c        **** 		for ( i = 0; i < 8; i++ ) {
 1879              		.loc 2 340 0
 1880 1787 C7857CF1 		movl	$0, -3716(%rbp)
 1880      FFFF0000 
 1880      0000
 1881 1791 E9D80100 		jmp	.L102
 1881      00
 1882              	.L107:
 341:prog.c        **** 			GET_DIGIT(dataBit[i], "xProgram");
 1883              		.loc 2 341 0
 1884 1796 488B8588 		movq	-3704(%rbp), %rax
 1884      F1FFFF
 1885 179d 0FB600   		movzbl	(%rax), %eax
 1886 17a0 88856EF1 		movb	%al, -3730(%rbp)
 1886      FFFF
 1887 17a6 80BD6EF1 		cmpb	$0, -3730(%rbp)
 1887      FFFF00
 1888 17ad 7553     		jne	.L103
 1889              		.loc 2 341 0 is_stmt 0 discriminator 1
 1890 17af 488B8588 		movq	-3704(%rbp), %rax
 1890      F1FFFF
 1891 17b6 4889C2   		movq	%rax, %rdx
 1892 17b9 488B8548 		movq	-3768(%rbp), %rax
 1892      F1FFFF
 1893 17c0 4829C2   		subq	%rax, %rdx
 1894 17c3 4889D0   		movq	%rdx, %rax
 1895 17c6 4889C7   		movq	%rax, %rdi
 1896 17c9 E8E2E9FF 		call	spaces
 1896      FF
 1897 17ce 4889C1   		movq	%rax, %rcx
 1898 17d1 488B9548 		movq	-3768(%rbp), %rdx
 1898      F1FFFF
 1899 17d8 488B8538 		movq	-3784(%rbp), %rax
 1899      F1FFFF
 1900 17df 488D3500 		leaq	.LC12(%rip), %rsi
 1900      000000
 1901 17e6 4889C7   		movq	%rax, %rdi
 1902 17e9 B8000000 		movl	$0, %eax
 1902      00
 1903 17ee E8000000 		call	errRender@PLT
 1903      00
 1904 17f3 C78578F1 		movl	$11, -3720(%rbp)
 1904      FFFF0B00 
 1904      0000
 1905 17fd E9610F00 		jmp	.L67
 1905      00
 1906              	.L103:
 1907              		.loc 2 341 0 discriminator 2
 1908 1802 80BD6EF1 		cmpb	$47, -3730(%rbp)
 1908      FFFF2F
 1909 1809 7E09     		jle	.L104
 1910              		.loc 2 341 0 discriminator 4
 1911 180b 80BD6EF1 		cmpb	$55, -3730(%rbp)
 1911      FFFF37
 1912 1812 7E48     		jle	.L105
 1913              	.L104:
 1914              		.loc 2 341 0 discriminator 5
 1915 1814 488B8588 		movq	-3704(%rbp), %rax
 1915      F1FFFF
 1916 181b 4889C2   		movq	%rax, %rdx
 1917 181e 488B8548 		movq	-3768(%rbp), %rax
 1917      F1FFFF
 1918 1825 4889D1   		movq	%rdx, %rcx
 1919 1828 4829C1   		subq	%rax, %rcx
 1920 182b 0FBE956E 		movsbl	-3730(%rbp), %edx
 1920      F1FFFF
 1921 1832 488B8538 		movq	-3784(%rbp), %rax
 1921      F1FFFF
 1922 1839 488D3500 		leaq	.LC17(%rip), %rsi
 1922      000000
 1923 1840 4889C7   		movq	%rax, %rdi
 1924 1843 B8000000 		movl	$0, %eax
 1924      00
 1925 1848 E8000000 		call	errRender@PLT
 1925      00
 1926 184d C78578F1 		movl	$11, -3720(%rbp)
 1926      FFFF0B00 
 1926      0000
 1927 1857 E9070F00 		jmp	.L67
 1927      00
 1928              	.L105:
 1929              		.loc 2 341 0 discriminator 6
 1930 185c 0FB6856E 		movzbl	-3730(%rbp), %eax
 1930      F1FFFF
 1931 1863 8D50D0   		leal	-48(%rax), %edx
 1932 1866 8B857CF1 		movl	-3716(%rbp), %eax
 1932      FFFF
 1933 186c 4898     		cltq
 1934 186e 88940590 		movb	%dl, -368(%rbp,%rax)
 1934      FEFFFF
 1935 1875 488B8588 		movq	-3704(%rbp), %rax
 1935      F1FFFF
 1936 187c 4883C001 		addq	$1, %rax
 1937 1880 48898588 		movq	%rax, -3704(%rbp)
 1937      F1FFFF
 342:prog.c        **** 			SET_BIT(dataPort, dataBit[i], PIN_LOW, "xProgram");
 1938              		.loc 2 342 0 is_stmt 1 discriminator 6
 1939 1887 0FB69577 		movzbl	-3721(%rbp), %edx
 1939      F1FFFF
 1940 188e 8B857CF1 		movl	-3716(%rbp), %eax
 1940      FFFF
 1941 1894 4898     		cltq
 1942 1896 0FB68405 		movzbl	-368(%rbp,%rax), %eax
 1942      90FEFFFF 
 1943 189e 0FB6C0   		movzbl	%al, %eax
 1944 18a1 4898     		cltq
 1945 18a3 4863D2   		movslq	%edx, %rdx
 1946 18a6 48C1E205 		salq	$5, %rdx
 1947 18aa 4801D0   		addq	%rdx, %rax
 1948 18ad 8B848590 		movl	-3696(%rbp,%rax,4), %eax
 1948      F1FFFF
 1949 18b4 85C0     		testl	%eax, %eax
 1950 18b6 747E     		je	.L106
 1951              		.loc 2 342 0 is_stmt 0 discriminator 1
 1952 18b8 488B8588 		movq	-3704(%rbp), %rax
 1952      F1FFFF
 1953 18bf 4889C2   		movq	%rax, %rdx
 1954 18c2 488B8548 		movq	-3768(%rbp), %rax
 1954      F1FFFF
 1955 18c9 4829C2   		subq	%rax, %rdx
 1956 18cc 4889D0   		movq	%rdx, %rax
 1957 18cf 4883E801 		subq	$1, %rax
 1958 18d3 4889C7   		movq	%rax, %rdi
 1959 18d6 E8D5E8FF 		call	spaces
 1959      FF
 1960 18db 4889C7   		movq	%rax, %rdi
 1961 18de 8B857CF1 		movl	-3716(%rbp), %eax
 1961      FFFF
 1962 18e4 4898     		cltq
 1963 18e6 0FB68405 		movzbl	-368(%rbp,%rax), %eax
 1963      90FEFFFF 
 1964 18ee 0FB6D0   		movzbl	%al, %edx
 1965 18f1 0FB68577 		movzbl	-3721(%rbp), %eax
 1965      F1FFFF
 1966 18f8 8D7041   		leal	65(%rax), %esi
 1967 18fb 488B8D48 		movq	-3768(%rbp), %rcx
 1967      F1FFFF
 1968 1902 488B8538 		movq	-3784(%rbp), %rax
 1968      F1FFFF
 1969 1909 4989F9   		movq	%rdi, %r9
 1970 190c 4989C8   		movq	%rcx, %r8
 1971 190f 89D1     		movl	%edx, %ecx
 1972 1911 89F2     		movl	%esi, %edx
 1973 1913 488D3500 		leaq	.LC16(%rip), %rsi
 1973      000000
 1974 191a 4889C7   		movq	%rax, %rdi
 1975 191d B8000000 		movl	$0, %eax
 1975      00
 1976 1922 E8000000 		call	errRender@PLT
 1976      00
 1977 1927 C78578F1 		movl	$11, -3720(%rbp)
 1977      FFFF0B00 
 1977      0000
 1978 1931 E92D0E00 		jmp	.L67
 1978      00
 1979              	.L106:
 1980              		.loc 2 342 0 discriminator 2
 1981 1936 0FB69577 		movzbl	-3721(%rbp), %edx
 1981      F1FFFF
 1982 193d 8B857CF1 		movl	-3716(%rbp), %eax
 1982      FFFF
 1983 1943 4898     		cltq
 1984 1945 0FB68405 		movzbl	-368(%rbp,%rax), %eax
 1984      90FEFFFF 
 1985 194d 0FB6C0   		movzbl	%al, %eax
 1986 1950 4898     		cltq
 1987 1952 4863D2   		movslq	%edx, %rdx
 1988 1955 48C1E205 		salq	$5, %rdx
 1989 1959 4801D0   		addq	%rdx, %rax
 1990 195c C7848590 		movl	$2, -3696(%rbp,%rax,4)
 1990      F1FFFF02 
 1990      000000
 340:prog.c        **** 		for ( i = 0; i < 8; i++ ) {
 1991              		.loc 2 340 0 is_stmt 1 discriminator 2
 1992 1967 83857CF1 		addl	$1, -3716(%rbp)
 1992      FFFF01
 1993              	.L102:
 1994 196e 83BD7CF1 		cmpl	$7, -3716(%rbp)
 1994      FFFF07
 1995 1975 0F8E1BFE 		jle	.L107
 1995      FFFF
 343:prog.c        **** 		}
 344:prog.c        **** 		makeLookup(dataBit, lookupTable);
 1996              		.loc 2 344 0
 1997 197b 488D95F0 		leaq	-272(%rbp), %rdx
 1997      FEFFFF
 1998 1982 488D8590 		leaq	-368(%rbp), %rax
 1998      FEFFFF
 1999 1989 4889D6   		movq	%rdx, %rsi
 2000 198c 4889C7   		movq	%rax, %rdi
 2001 198f E83AEDFF 		call	makeLookup
 2001      FF
 2002 1994 E9190200 		jmp	.L108
 2002      00
 2003              	.L101:
 345:prog.c        **** 	} else if ( progOp == PROG_SPI_SEND ) {
 2004              		.loc 2 345 0
 2005 1999 83BD54F1 		cmpl	$6, -3756(%rbp)
 2005      FFFF06
 2006 19a0 0F850C02 		jne	.L108
 2006      0000
 2007              	.LBB3:
 346:prog.c        **** 		const uint8 bitOrder[8] = {7,6,5,4,3,2,1,0};
 2008              		.loc 2 346 0
 2009 19a6 C685A0FE 		movb	$7, -352(%rbp)
 2009      FFFF07
 2010 19ad C685A1FE 		movb	$6, -351(%rbp)
 2010      FFFF06
 2011 19b4 C685A2FE 		movb	$5, -350(%rbp)
 2011      FFFF05
 2012 19bb C685A3FE 		movb	$4, -349(%rbp)
 2012      FFFF04
 2013 19c2 C685A4FE 		movb	$3, -348(%rbp)
 2013      FFFF03
 2014 19c9 C685A5FE 		movb	$2, -347(%rbp)
 2014      FFFF02
 2015 19d0 C685A6FE 		movb	$1, -346(%rbp)
 2015      FFFF01
 2016 19d7 C685A7FE 		movb	$0, -345(%rbp)
 2016      FFFF00
 347:prog.c        **** 		makeLookup(bitOrder, lookupTable);
 2017              		.loc 2 347 0
 2018 19de 488D95F0 		leaq	-272(%rbp), %rdx
 2018      FEFFFF
 2019 19e5 488D85A0 		leaq	-352(%rbp), %rax
 2019      FEFFFF
 2020 19ec 4889D6   		movq	%rdx, %rsi
 2021 19ef 4889C7   		movq	%rax, %rdi
 2022 19f2 E8D7ECFF 		call	makeLookup
 2022      FF
 348:prog.c        **** 		GET_BIT(dataBit[0], "xProgram");
 2023              		.loc 2 348 0
 2024 19f7 488B8588 		movq	-3704(%rbp), %rax
 2024      F1FFFF
 2025 19fe 0FB600   		movzbl	(%rax), %eax
 2026 1a01 88856EF1 		movb	%al, -3730(%rbp)
 2026      FFFF
 2027 1a07 80BD6EF1 		cmpb	$0, -3730(%rbp)
 2027      FFFF00
 2028 1a0e 7553     		jne	.L109
 2029              		.loc 2 348 0 is_stmt 0 discriminator 1
 2030 1a10 488B8588 		movq	-3704(%rbp), %rax
 2030      F1FFFF
 2031 1a17 4889C2   		movq	%rax, %rdx
 2032 1a1a 488B8548 		movq	-3768(%rbp), %rax
 2032      F1FFFF
 2033 1a21 4829C2   		subq	%rax, %rdx
 2034 1a24 4889D0   		movq	%rdx, %rax
 2035 1a27 4889C7   		movq	%rax, %rdi
 2036 1a2a E881E7FF 		call	spaces
 2036      FF
 2037 1a2f 4889C1   		movq	%rax, %rcx
 2038 1a32 488B9548 		movq	-3768(%rbp), %rdx
 2038      F1FFFF
 2039 1a39 488B8538 		movq	-3784(%rbp), %rax
 2039      F1FFFF
 2040 1a40 488D3500 		leaq	.LC12(%rip), %rsi
 2040      000000
 2041 1a47 4889C7   		movq	%rax, %rdi
 2042 1a4a B8000000 		movl	$0, %eax
 2042      00
 2043 1a4f E8000000 		call	errRender@PLT
 2043      00
 2044 1a54 C78578F1 		movl	$11, -3720(%rbp)
 2044      FFFF0B00 
 2044      0000
 2045 1a5e E9000D00 		jmp	.L67
 2045      00
 2046              	.L109:
 2047              		.loc 2 348 0 discriminator 2
 2048 1a63 80BD6EF1 		cmpb	$47, -3730(%rbp)
 2048      FFFF2F
 2049 1a6a 7E09     		jle	.L111
 2050              		.loc 2 348 0 discriminator 5
 2051 1a6c 80BD6EF1 		cmpb	$57, -3730(%rbp)
 2051      FFFF39
 2052 1a73 7E53     		jle	.L112
 2053              	.L111:
 2054              		.loc 2 348 0 discriminator 6
 2055 1a75 488B8588 		movq	-3704(%rbp), %rax
 2055      F1FFFF
 2056 1a7c 4889C2   		movq	%rax, %rdx
 2057 1a7f 488B8548 		movq	-3768(%rbp), %rax
 2057      F1FFFF
 2058 1a86 4829C2   		subq	%rax, %rdx
 2059 1a89 4889D0   		movq	%rdx, %rax
 2060 1a8c 4889C7   		movq	%rax, %rdi
 2061 1a8f E81CE7FF 		call	spaces
 2061      FF
 2062 1a94 4889C1   		movq	%rax, %rcx
 2063 1a97 488B9548 		movq	-3768(%rbp), %rdx
 2063      F1FFFF
 2064 1a9e 488B8538 		movq	-3784(%rbp), %rax
 2064      F1FFFF
 2065 1aa5 488D3500 		leaq	.LC15(%rip), %rsi
 2065      000000
 2066 1aac 4889C7   		movq	%rax, %rdi
 2067 1aaf B8000000 		movl	$0, %eax
 2067      00
 2068 1ab4 E8000000 		call	errRender@PLT
 2068      00
 2069 1ab9 C78578F1 		movl	$11, -3720(%rbp)
 2069      FFFF0B00 
 2069      0000
 2070 1ac3 E99B0C00 		jmp	.L67
 2070      00
 2071              	.L112:
 2072              		.loc 2 348 0 discriminator 7
 2073 1ac8 488B8588 		movq	-3704(%rbp), %rax
 2073      F1FFFF
 2074 1acf 488D8D88 		leaq	-3704(%rbp), %rcx
 2074      F1FFFF
 2075 1ad6 BA0A0000 		movl	$10, %edx
 2075      00
 2076 1adb 4889CE   		movq	%rcx, %rsi
 2077 1ade 4889C7   		movq	%rax, %rdi
 2078 1ae1 E8000000 		call	strtoul@PLT
 2078      00
 2079 1ae6 888590FE 		movb	%al, -368(%rbp)
 2079      FFFF
 349:prog.c        **** 		SET_BIT(dataPort, dataBit[0], PIN_LOW, "xProgram");
 2080              		.loc 2 349 0 is_stmt 1 discriminator 7
 2081 1aec 0FB69577 		movzbl	-3721(%rbp), %edx
 2081      F1FFFF
 2082 1af3 0FB68590 		movzbl	-368(%rbp), %eax
 2082      FEFFFF
 2083 1afa 0FB6C0   		movzbl	%al, %eax
 2084 1afd 4898     		cltq
 2085 1aff 4863D2   		movslq	%edx, %rdx
 2086 1b02 48C1E205 		salq	$5, %rdx
 2087 1b06 4801D0   		addq	%rdx, %rax
 2088 1b09 8B848590 		movl	-3696(%rbp,%rax,4), %eax
 2088      F1FFFF
 2089 1b10 85C0     		testl	%eax, %eax
 2090 1b12 7476     		je	.L113
 2091              		.loc 2 349 0 is_stmt 0 discriminator 1
 2092 1b14 488B8588 		movq	-3704(%rbp), %rax
 2092      F1FFFF
 2093 1b1b 4889C2   		movq	%rax, %rdx
 2094 1b1e 488B8548 		movq	-3768(%rbp), %rax
 2094      F1FFFF
 2095 1b25 4829C2   		subq	%rax, %rdx
 2096 1b28 4889D0   		movq	%rdx, %rax
 2097 1b2b 4883E801 		subq	$1, %rax
 2098 1b2f 4889C7   		movq	%rax, %rdi
 2099 1b32 E879E6FF 		call	spaces
 2099      FF
 2100 1b37 4889C7   		movq	%rax, %rdi
 2101 1b3a 0FB68590 		movzbl	-368(%rbp), %eax
 2101      FEFFFF
 2102 1b41 0FB6D0   		movzbl	%al, %edx
 2103 1b44 0FB68577 		movzbl	-3721(%rbp), %eax
 2103      F1FFFF
 2104 1b4b 8D7041   		leal	65(%rax), %esi
 2105 1b4e 488B8D48 		movq	-3768(%rbp), %rcx
 2105      F1FFFF
 2106 1b55 488B8538 		movq	-3784(%rbp), %rax
 2106      F1FFFF
 2107 1b5c 4989F9   		movq	%rdi, %r9
 2108 1b5f 4989C8   		movq	%rcx, %r8
 2109 1b62 89D1     		movl	%edx, %ecx
 2110 1b64 89F2     		movl	%esi, %edx
 2111 1b66 488D3500 		leaq	.LC16(%rip), %rsi
 2111      000000
 2112 1b6d 4889C7   		movq	%rax, %rdi
 2113 1b70 B8000000 		movl	$0, %eax
 2113      00
 2114 1b75 E8000000 		call	errRender@PLT
 2114      00
 2115 1b7a C78578F1 		movl	$11, -3720(%rbp)
 2115      FFFF0B00 
 2115      0000
 2116 1b84 90       		nop
 2117 1b85 E9D90B00 		jmp	.L67
 2117      00
 2118              	.L113:
 2119              		.loc 2 349 0 discriminator 2
 2120 1b8a 0FB69577 		movzbl	-3721(%rbp), %edx
 2120      F1FFFF
 2121 1b91 0FB68590 		movzbl	-368(%rbp), %eax
 2121      FEFFFF
 2122 1b98 0FB6C0   		movzbl	%al, %eax
 2123 1b9b 4898     		cltq
 2124 1b9d 4863D2   		movslq	%edx, %rdx
 2125 1ba0 48C1E205 		salq	$5, %rdx
 2126 1ba4 4801D0   		addq	%rdx, %rax
 2127 1ba7 C7848590 		movl	$2, -3696(%rbp,%rax,4)
 2127      F1FFFF02 
 2127      000000
 2128              	.L108:
 2129              	.LBE3:
 350:prog.c        **** 	}
 351:prog.c        **** 
 352:prog.c        **** 	GET_CHAR("xProgram");
 2130              		.loc 2 352 0 is_stmt 1
 2131 1bb2 488B8588 		movq	-3704(%rbp), %rax
 2131      F1FFFF
 2132 1bb9 0FB600   		movzbl	(%rax), %eax
 2133 1bbc 88856EF1 		movb	%al, -3730(%rbp)
 2133      FFFF
 2134 1bc2 80BD6EF1 		cmpb	$0, -3730(%rbp)
 2134      FFFF00
 2135 1bc9 7553     		jne	.L114
 2136              		.loc 2 352 0 is_stmt 0 discriminator 1
 2137 1bcb 488B8588 		movq	-3704(%rbp), %rax
 2137      F1FFFF
 2138 1bd2 4889C2   		movq	%rax, %rdx
 2139 1bd5 488B8548 		movq	-3768(%rbp), %rax
 2139      F1FFFF
 2140 1bdc 4829C2   		subq	%rax, %rdx
 2141 1bdf 4889D0   		movq	%rdx, %rax
 2142 1be2 4889C7   		movq	%rax, %rdi
 2143 1be5 E8C6E5FF 		call	spaces
 2143      FF
 2144 1bea 4889C1   		movq	%rax, %rcx
 2145 1bed 488B9548 		movq	-3768(%rbp), %rdx
 2145      F1FFFF
 2146 1bf4 488B8538 		movq	-3784(%rbp), %rax
 2146      F1FFFF
 2147 1bfb 488D3500 		leaq	.LC12(%rip), %rsi
 2147      000000
 2148 1c02 4889C7   		movq	%rax, %rdi
 2149 1c05 B8000000 		movl	$0, %eax
 2149      00
 2150 1c0a E8000000 		call	errRender@PLT
 2150      00
 2151 1c0f C78578F1 		movl	$11, -3720(%rbp)
 2151      FFFF0B00 
 2151      0000
 2152 1c19 E9450B00 		jmp	.L67
 2152      00
 2153              	.L114:
 353:prog.c        **** 	if ( ch == '[' ) {
 2154              		.loc 2 353 0 is_stmt 1
 2155 1c1e 80BD6EF1 		cmpb	$91, -3730(%rbp)
 2155      FFFF5B
 2156 1c25 0F855001 		jne	.L115
 2156      0000
 354:prog.c        **** 		ptr++;
 2157              		.loc 2 354 0
 2158 1c2b 488B8588 		movq	-3704(%rbp), %rax
 2158      F1FFFF
 2159 1c32 4883C001 		addq	$1, %rax
 2160 1c36 48898588 		movq	%rax, -3704(%rbp)
 2160      F1FFFF
 355:prog.c        **** 		fStatus = populateMap(portConfig, ptr, &ptr, pinMap, error);
 2161              		.loc 2 355 0
 2162 1c3d 488BB588 		movq	-3704(%rbp), %rsi
 2162      F1FFFF
 2163 1c44 488BBD38 		movq	-3784(%rbp), %rdi
 2163      F1FFFF
 2164 1c4b 488D8D90 		leaq	-3696(%rbp), %rcx
 2164      F1FFFF
 2165 1c52 488D9588 		leaq	-3704(%rbp), %rdx
 2165      F1FFFF
 2166 1c59 488B8548 		movq	-3768(%rbp), %rax
 2166      F1FFFF
 2167 1c60 4989F8   		movq	%rdi, %r8
 2168 1c63 4889C7   		movq	%rax, %rdi
 2169 1c66 E86DE5FF 		call	populateMap
 2169      FF
 2170 1c6b 898580F1 		movl	%eax, -3712(%rbp)
 2170      FFFF
 356:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2171              		.loc 2 356 0
 2172 1c71 83BD80F1 		cmpl	$0, -3712(%rbp)
 2172      FFFF00
 2173 1c78 7427     		je	.L116
 2174              		.loc 2 356 0 is_stmt 0 discriminator 1
 2175 1c7a 488B8538 		movq	-3784(%rbp), %rax
 2175      F1FFFF
 2176 1c81 488D3500 		leaq	.LC18(%rip), %rsi
 2176      000000
 2177 1c88 4889C7   		movq	%rax, %rdi
 2178 1c8b E8000000 		call	errPrefix@PLT
 2178      00
 2179 1c90 8B8580F1 		movl	-3712(%rbp), %eax
 2179      FFFF
 2180 1c96 898578F1 		movl	%eax, -3720(%rbp)
 2180      FFFF
 2181 1c9c E9C20A00 		jmp	.L67
 2181      00
 2182              	.L116:
 357:prog.c        **** 		EXPECT_CHAR(']', "xProgram");
 2183              		.loc 2 357 0 is_stmt 1
 2184 1ca1 488B8588 		movq	-3704(%rbp), %rax
 2184      F1FFFF
 2185 1ca8 0FB600   		movzbl	(%rax), %eax
 2186 1cab 88856EF1 		movb	%al, -3730(%rbp)
 2186      FFFF
 2187 1cb1 80BD6EF1 		cmpb	$0, -3730(%rbp)
 2187      FFFF00
 2188 1cb8 7553     		jne	.L117
 2189              		.loc 2 357 0 is_stmt 0 discriminator 1
 2190 1cba 488B8588 		movq	-3704(%rbp), %rax
 2190      F1FFFF
 2191 1cc1 4889C2   		movq	%rax, %rdx
 2192 1cc4 488B8548 		movq	-3768(%rbp), %rax
 2192      F1FFFF
 2193 1ccb 4829C2   		subq	%rax, %rdx
 2194 1cce 4889D0   		movq	%rdx, %rax
 2195 1cd1 4889C7   		movq	%rax, %rdi
 2196 1cd4 E8D7E4FF 		call	spaces
 2196      FF
 2197 1cd9 4889C1   		movq	%rax, %rcx
 2198 1cdc 488B9548 		movq	-3768(%rbp), %rdx
 2198      F1FFFF
 2199 1ce3 488B8538 		movq	-3784(%rbp), %rax
 2199      F1FFFF
 2200 1cea 488D3500 		leaq	.LC12(%rip), %rsi
 2200      000000
 2201 1cf1 4889C7   		movq	%rax, %rdi
 2202 1cf4 B8000000 		movl	$0, %eax
 2202      00
 2203 1cf9 E8000000 		call	errRender@PLT
 2203      00
 2204 1cfe C78578F1 		movl	$11, -3720(%rbp)
 2204      FFFF0B00 
 2204      0000
 2205 1d08 E9560A00 		jmp	.L67
 2205      00
 2206              	.L117:
 2207              		.loc 2 357 0 discriminator 2
 2208 1d0d 80BD6EF1 		cmpb	$93, -3730(%rbp)
 2208      FFFF5D
 2209 1d14 7453     		je	.L118
 2210              		.loc 2 357 0 discriminator 3
 2211 1d16 488B8588 		movq	-3704(%rbp), %rax
 2211      F1FFFF
 2212 1d1d 4889C2   		movq	%rax, %rdx
 2213 1d20 488B8548 		movq	-3768(%rbp), %rax
 2213      F1FFFF
 2214 1d27 4829C2   		subq	%rax, %rdx
 2215 1d2a 4889D0   		movq	%rdx, %rax
 2216 1d2d 4889C7   		movq	%rax, %rdi
 2217 1d30 E87BE4FF 		call	spaces
 2217      FF
 2218 1d35 4889C1   		movq	%rax, %rcx
 2219 1d38 488B9548 		movq	-3768(%rbp), %rdx
 2219      F1FFFF
 2220 1d3f 488B8538 		movq	-3784(%rbp), %rax
 2220      F1FFFF
 2221 1d46 488D3500 		leaq	.LC19(%rip), %rsi
 2221      000000
 2222 1d4d 4889C7   		movq	%rax, %rdi
 2223 1d50 B8000000 		movl	$0, %eax
 2223      00
 2224 1d55 E8000000 		call	errRender@PLT
 2224      00
 2225 1d5a C78578F1 		movl	$11, -3720(%rbp)
 2225      FFFF0B00 
 2225      0000
 2226 1d64 E9FA0900 		jmp	.L67
 2226      00
 2227              	.L118:
 2228              		.loc 2 357 0 discriminator 4
 2229 1d69 488B8588 		movq	-3704(%rbp), %rax
 2229      F1FFFF
 2230 1d70 4883C001 		addq	$1, %rax
 2231 1d74 48898588 		movq	%rax, -3704(%rbp)
 2231      F1FFFF
 2232              	.L115:
 358:prog.c        **** 	}
 359:prog.c        **** 	ch = *ptr;
 2233              		.loc 2 359 0 is_stmt 1
 2234 1d7b 488B8588 		movq	-3704(%rbp), %rax
 2234      F1FFFF
 2235 1d82 0FB600   		movzbl	(%rax), %eax
 2236 1d85 88856EF1 		movb	%al, -3730(%rbp)
 2236      FFFF
 360:prog.c        **** 	CHECK_STATUS(
 2237              		.loc 2 360 0
 2238 1d8b 80BD6EF1 		cmpb	$0, -3730(%rbp)
 2238      FFFF00
 2239 1d92 745C     		je	.L119
 2240              		.loc 2 360 0 is_stmt 0 discriminator 1
 2241 1d94 80BD6EF1 		cmpb	$58, -3730(%rbp)
 2241      FFFF3A
 2242 1d9b 7453     		je	.L119
 2243              		.loc 2 360 0 discriminator 2
 2244 1d9d 488B8588 		movq	-3704(%rbp), %rax
 2244      F1FFFF
 2245 1da4 4889C2   		movq	%rax, %rdx
 2246 1da7 488B8548 		movq	-3768(%rbp), %rax
 2246      F1FFFF
 2247 1dae 4829C2   		subq	%rax, %rdx
 2248 1db1 4889D0   		movq	%rdx, %rax
 2249 1db4 4889C7   		movq	%rax, %rdi
 2250 1db7 E8F4E3FF 		call	spaces
 2250      FF
 2251 1dbc 4889C1   		movq	%rax, %rcx
 2252 1dbf 488B9548 		movq	-3768(%rbp), %rdx
 2252      F1FFFF
 2253 1dc6 488B8538 		movq	-3784(%rbp), %rax
 2253      F1FFFF
 2254 1dcd 488D3500 		leaq	.LC20(%rip), %rsi
 2254      000000
 2255 1dd4 4889C7   		movq	%rax, %rdi
 2256 1dd7 B8000000 		movl	$0, %eax
 2256      00
 2257 1ddc E8000000 		call	errRender@PLT
 2257      00
 2258 1de1 C78578F1 		movl	$11, -3720(%rbp)
 2258      FFFF0B00 
 2258      0000
 2259 1deb E9730900 		jmp	.L67
 2259      00
 2260              	.L119:
 361:prog.c        **** 		ch != '\0' && ch != ':', FL_CONF_FORMAT, cleanup,
 362:prog.c        **** 		"xProgram(): Expecting ':' or end-of-string:\n  %s\n  %s^", portConfig, spaces(ptr-portConfig));
 363:prog.c        **** 
 364:prog.c        **** 	// Map the CCLK bit & the SelectMAP data bus
 365:prog.c        **** 	fStatus = portMap(handle, LP_SCK, cclkPort, cclkBit, error);
 2261              		.loc 2 365 0 is_stmt 1
 2262 1df0 0FB68D76 		movzbl	-3722(%rbp), %ecx
 2262      F1FFFF
 2263 1df7 0FB69575 		movzbl	-3723(%rbp), %edx
 2263      F1FFFF
 2264 1dfe 488BB538 		movq	-3784(%rbp), %rsi
 2264      F1FFFF
 2265 1e05 488B8558 		movq	-3752(%rbp), %rax
 2265      F1FFFF
 2266 1e0c 4989F0   		movq	%rsi, %r8
 2267 1e0f BE040000 		movl	$4, %esi
 2267      00
 2268 1e14 4889C7   		movq	%rax, %rdi
 2269 1e17 E819E8FF 		call	portMap
 2269      FF
 2270 1e1c 898580F1 		movl	%eax, -3712(%rbp)
 2270      FFFF
 366:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2271              		.loc 2 366 0
 2272 1e22 83BD80F1 		cmpl	$0, -3712(%rbp)
 2272      FFFF00
 2273 1e29 7427     		je	.L120
 2274              		.loc 2 366 0 is_stmt 0 discriminator 1
 2275 1e2b 488B8538 		movq	-3784(%rbp), %rax
 2275      F1FFFF
 2276 1e32 488D3500 		leaq	.LC18(%rip), %rsi
 2276      000000
 2277 1e39 4889C7   		movq	%rax, %rdi
 2278 1e3c E8000000 		call	errPrefix@PLT
 2278      00
 2279 1e41 8B8580F1 		movl	-3712(%rbp), %eax
 2279      FFFF
 2280 1e47 898578F1 		movl	%eax, -3720(%rbp)
 2280      FFFF
 2281 1e4d E9110900 		jmp	.L67
 2281      00
 2282              	.L120:
 367:prog.c        **** 	if ( progOp == PROG_PARALLEL ) {
 2283              		.loc 2 367 0 is_stmt 1
 2284 1e52 83BD54F1 		cmpl	$5, -3756(%rbp)
 2284      FFFF05
 2285 1e59 7564     		jne	.L121
 368:prog.c        **** 		fStatus = portMap(handle, LP_D8, dataPort, 0x00, error);
 2286              		.loc 2 368 0
 2287 1e5b 0FB69577 		movzbl	-3721(%rbp), %edx
 2287      F1FFFF
 2288 1e62 488B8D38 		movq	-3784(%rbp), %rcx
 2288      F1FFFF
 2289 1e69 488B8558 		movq	-3752(%rbp), %rax
 2289      F1FFFF
 2290 1e70 4989C8   		movq	%rcx, %r8
 2291 1e73 B9000000 		movl	$0, %ecx
 2291      00
 2292 1e78 BE050000 		movl	$5, %esi
 2292      00
 2293 1e7d 4889C7   		movq	%rax, %rdi
 2294 1e80 E8B0E7FF 		call	portMap
 2294      FF
 2295 1e85 898580F1 		movl	%eax, -3712(%rbp)
 2295      FFFF
 369:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2296              		.loc 2 369 0
 2297 1e8b 83BD80F1 		cmpl	$0, -3712(%rbp)
 2297      FFFF00
 2298 1e92 0F849500 		je	.L122
 2298      0000
 2299              		.loc 2 369 0 is_stmt 0 discriminator 1
 2300 1e98 488B8538 		movq	-3784(%rbp), %rax
 2300      F1FFFF
 2301 1e9f 488D3500 		leaq	.LC18(%rip), %rsi
 2301      000000
 2302 1ea6 4889C7   		movq	%rax, %rdi
 2303 1ea9 E8000000 		call	errPrefix@PLT
 2303      00
 2304 1eae 8B8580F1 		movl	-3712(%rbp), %eax
 2304      FFFF
 2305 1eb4 898578F1 		movl	%eax, -3720(%rbp)
 2305      FFFF
 2306 1eba E9A40800 		jmp	.L67
 2306      00
 2307              	.L121:
 370:prog.c        **** 	} else if ( progOp == PROG_SPI_SEND ) {
 2308              		.loc 2 370 0 is_stmt 1
 2309 1ebf 83BD54F1 		cmpl	$6, -3756(%rbp)
 2309      FFFF06
 2310 1ec6 7565     		jne	.L122
 371:prog.c        **** 		fStatus = portMap(handle, LP_MOSI, dataPort, dataBit[0], error);
 2311              		.loc 2 371 0
 2312 1ec8 0FB68590 		movzbl	-368(%rbp), %eax
 2312      FEFFFF
 2313 1ecf 0FB6C8   		movzbl	%al, %ecx
 2314 1ed2 0FB69577 		movzbl	-3721(%rbp), %edx
 2314      F1FFFF
 2315 1ed9 488BB538 		movq	-3784(%rbp), %rsi
 2315      F1FFFF
 2316 1ee0 488B8558 		movq	-3752(%rbp), %rax
 2316      F1FFFF
 2317 1ee7 4989F0   		movq	%rsi, %r8
 2318 1eea BE020000 		movl	$2, %esi
 2318      00
 2319 1eef 4889C7   		movq	%rax, %rdi
 2320 1ef2 E83EE7FF 		call	portMap
 2320      FF
 2321 1ef7 898580F1 		movl	%eax, -3712(%rbp)
 2321      FFFF
 372:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2322              		.loc 2 372 0
 2323 1efd 83BD80F1 		cmpl	$0, -3712(%rbp)
 2323      FFFF00
 2324 1f04 7427     		je	.L122
 2325              		.loc 2 372 0 is_stmt 0 discriminator 1
 2326 1f06 488B8538 		movq	-3784(%rbp), %rax
 2326      F1FFFF
 2327 1f0d 488D3500 		leaq	.LC18(%rip), %rsi
 2327      000000
 2328 1f14 4889C7   		movq	%rax, %rdi
 2329 1f17 E8000000 		call	errPrefix@PLT
 2329      00
 2330 1f1c 8B8580F1 		movl	-3712(%rbp), %eax
 2330      FFFF
 2331 1f22 898578F1 		movl	%eax, -3720(%rbp)
 2331      FFFF
 2332 1f28 E9360800 		jmp	.L67
 2332      00
 2333              	.L122:
 373:prog.c        **** 	}
 374:prog.c        **** 	fStatus = portMap(handle, LP_CHOOSE, 0x00, 0x00, error);
 2334              		.loc 2 374 0 is_stmt 1
 2335 1f2d 488B9538 		movq	-3784(%rbp), %rdx
 2335      F1FFFF
 2336 1f34 488B8558 		movq	-3752(%rbp), %rax
 2336      F1FFFF
 2337 1f3b 4989D0   		movq	%rdx, %r8
 2338 1f3e B9000000 		movl	$0, %ecx
 2338      00
 2339 1f43 BA000000 		movl	$0, %edx
 2339      00
 2340 1f48 BE000000 		movl	$0, %esi
 2340      00
 2341 1f4d 4889C7   		movq	%rax, %rdi
 2342 1f50 E8E0E6FF 		call	portMap
 2342      FF
 2343 1f55 898580F1 		movl	%eax, -3712(%rbp)
 2343      FFFF
 375:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2344              		.loc 2 375 0
 2345 1f5b 83BD80F1 		cmpl	$0, -3712(%rbp)
 2345      FFFF00
 2346 1f62 7427     		je	.L123
 2347              		.loc 2 375 0 is_stmt 0 discriminator 1
 2348 1f64 488B8538 		movq	-3784(%rbp), %rax
 2348      F1FFFF
 2349 1f6b 488D3500 		leaq	.LC18(%rip), %rsi
 2349      000000
 2350 1f72 4889C7   		movq	%rax, %rdi
 2351 1f75 E8000000 		call	errPrefix@PLT
 2351      00
 2352 1f7a 8B8580F1 		movl	-3712(%rbp), %eax
 2352      FFFF
 2353 1f80 898578F1 		movl	%eax, -3720(%rbp)
 2353      FFFF
 2354 1f86 E9D80700 		jmp	.L67
 2354      00
 2355              	.L123:
 376:prog.c        **** 
 377:prog.c        **** 	// Assert PROG & wait for INIT & DONE to go low
 378:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, initPort, initBit, PIN_INPUT, NULL, error); // INIT is inp
 2356              		.loc 2 378 0 is_stmt 1
 2357 1f8b 0FB69572 		movzbl	-3726(%rbp), %edx
 2357      F1FFFF
 2358 1f92 0FB6B571 		movzbl	-3727(%rbp), %esi
 2358      F1FFFF
 2359 1f99 488B8D38 		movq	-3784(%rbp), %rcx
 2359      F1FFFF
 2360 1fa0 488B8558 		movq	-3752(%rbp), %rax
 2360      F1FFFF
 2361 1fa7 4989C9   		movq	%rcx, %r9
 2362 1faa 41B80000 		movl	$0, %r8d
 2362      0000
 2363 1fb0 B9030000 		movl	$3, %ecx
 2363      00
 2364 1fb5 4889C7   		movq	%rax, %rdi
 2365 1fb8 E8000000 		call	flSingleBitPortAccess@PLT
 2365      00
 2366 1fbd 898580F1 		movl	%eax, -3712(%rbp)
 2366      FFFF
 379:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2367              		.loc 2 379 0
 2368 1fc3 83BD80F1 		cmpl	$0, -3712(%rbp)
 2368      FFFF00
 2369 1fca 7427     		je	.L124
 2370              		.loc 2 379 0 is_stmt 0 discriminator 1
 2371 1fcc 488B8538 		movq	-3784(%rbp), %rax
 2371      F1FFFF
 2372 1fd3 488D3500 		leaq	.LC18(%rip), %rsi
 2372      000000
 2373 1fda 4889C7   		movq	%rax, %rdi
 2374 1fdd E8000000 		call	errPrefix@PLT
 2374      00
 2375 1fe2 8B8580F1 		movl	-3712(%rbp), %eax
 2375      FFFF
 2376 1fe8 898578F1 		movl	%eax, -3720(%rbp)
 2376      FFFF
 2377 1fee E9700700 		jmp	.L67
 2377      00
 2378              	.L124:
 380:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, donePort, doneBit, PIN_INPUT, NULL, error); // DONE is inp
 2379              		.loc 2 380 0 is_stmt 1
 2380 1ff3 0FB69574 		movzbl	-3724(%rbp), %edx
 2380      F1FFFF
 2381 1ffa 0FB6B573 		movzbl	-3725(%rbp), %esi
 2381      F1FFFF
 2382 2001 488B8D38 		movq	-3784(%rbp), %rcx
 2382      F1FFFF
 2383 2008 488B8558 		movq	-3752(%rbp), %rax
 2383      F1FFFF
 2384 200f 4989C9   		movq	%rcx, %r9
 2385 2012 41B80000 		movl	$0, %r8d
 2385      0000
 2386 2018 B9030000 		movl	$3, %ecx
 2386      00
 2387 201d 4889C7   		movq	%rax, %rdi
 2388 2020 E8000000 		call	flSingleBitPortAccess@PLT
 2388      00
 2389 2025 898580F1 		movl	%eax, -3712(%rbp)
 2389      FFFF
 381:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2390              		.loc 2 381 0
 2391 202b 83BD80F1 		cmpl	$0, -3712(%rbp)
 2391      FFFF00
 2392 2032 7427     		je	.L125
 2393              		.loc 2 381 0 is_stmt 0 discriminator 1
 2394 2034 488B8538 		movq	-3784(%rbp), %rax
 2394      F1FFFF
 2395 203b 488D3500 		leaq	.LC18(%rip), %rsi
 2395      000000
 2396 2042 4889C7   		movq	%rax, %rdi
 2397 2045 E8000000 		call	errPrefix@PLT
 2397      00
 2398 204a 8B8580F1 		movl	-3712(%rbp), %eax
 2398      FFFF
 2399 2050 898578F1 		movl	%eax, -3720(%rbp)
 2399      FFFF
 2400 2056 E9080700 		jmp	.L67
 2400      00
 2401              	.L125:
 382:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, progPort, progBit, PIN_LOW, NULL, error); // PROG is low
 2402              		.loc 2 382 0 is_stmt 1
 2403 205b 0FB69570 		movzbl	-3728(%rbp), %edx
 2403      F1FFFF
 2404 2062 0FB6B56F 		movzbl	-3729(%rbp), %esi
 2404      F1FFFF
 2405 2069 488B8D38 		movq	-3784(%rbp), %rcx
 2405      F1FFFF
 2406 2070 488B8558 		movq	-3752(%rbp), %rax
 2406      F1FFFF
 2407 2077 4989C9   		movq	%rcx, %r9
 2408 207a 41B80000 		movl	$0, %r8d
 2408      0000
 2409 2080 B9020000 		movl	$2, %ecx
 2409      00
 2410 2085 4889C7   		movq	%rax, %rdi
 2411 2088 E8000000 		call	flSingleBitPortAccess@PLT
 2411      00
 2412 208d 898580F1 		movl	%eax, -3712(%rbp)
 2412      FFFF
 383:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2413              		.loc 2 383 0
 2414 2093 83BD80F1 		cmpl	$0, -3712(%rbp)
 2414      FFFF00
 2415 209a 7427     		je	.L126
 2416              		.loc 2 383 0 is_stmt 0 discriminator 1
 2417 209c 488B8538 		movq	-3784(%rbp), %rax
 2417      F1FFFF
 2418 20a3 488D3500 		leaq	.LC18(%rip), %rsi
 2418      000000
 2419 20aa 4889C7   		movq	%rax, %rdi
 2420 20ad E8000000 		call	errPrefix@PLT
 2420      00
 2421 20b2 8B8580F1 		movl	-3712(%rbp), %eax
 2421      FFFF
 2422 20b8 898578F1 		movl	%eax, -3720(%rbp)
 2422      FFFF
 2423 20be E9A00600 		jmp	.L67
 2423      00
 2424              	.L126:
 384:prog.c        **** 	do {
 385:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, initPort, initBit, PIN_INPUT, &initStatus, error);
 2425              		.loc 2 385 0 is_stmt 1
 2426 20c3 0FB69572 		movzbl	-3726(%rbp), %edx
 2426      F1FFFF
 2427 20ca 0FB6B571 		movzbl	-3727(%rbp), %esi
 2427      F1FFFF
 2428 20d1 488BBD38 		movq	-3784(%rbp), %rdi
 2428      F1FFFF
 2429 20d8 488D8D6A 		leaq	-3734(%rbp), %rcx
 2429      F1FFFF
 2430 20df 488B8558 		movq	-3752(%rbp), %rax
 2430      F1FFFF
 2431 20e6 4989F9   		movq	%rdi, %r9
 2432 20e9 4989C8   		movq	%rcx, %r8
 2433 20ec B9030000 		movl	$3, %ecx
 2433      00
 2434 20f1 4889C7   		movq	%rax, %rdi
 2435 20f4 E8000000 		call	flSingleBitPortAccess@PLT
 2435      00
 2436 20f9 898580F1 		movl	%eax, -3712(%rbp)
 2436      FFFF
 386:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2437              		.loc 2 386 0
 2438 20ff 83BD80F1 		cmpl	$0, -3712(%rbp)
 2438      FFFF00
 2439 2106 7427     		je	.L127
 2440              		.loc 2 386 0 is_stmt 0 discriminator 1
 2441 2108 488B8538 		movq	-3784(%rbp), %rax
 2441      F1FFFF
 2442 210f 488D3500 		leaq	.LC18(%rip), %rsi
 2442      000000
 2443 2116 4889C7   		movq	%rax, %rdi
 2444 2119 E8000000 		call	errPrefix@PLT
 2444      00
 2445 211e 8B8580F1 		movl	-3712(%rbp), %eax
 2445      FFFF
 2446 2124 898578F1 		movl	%eax, -3720(%rbp)
 2446      FFFF
 2447 212a E9340600 		jmp	.L67
 2447      00
 2448              	.L127:
 387:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, donePort, doneBit, PIN_INPUT, &doneStatus, error);
 2449              		.loc 2 387 0 is_stmt 1
 2450 212f 0FB69574 		movzbl	-3724(%rbp), %edx
 2450      F1FFFF
 2451 2136 0FB6B573 		movzbl	-3725(%rbp), %esi
 2451      F1FFFF
 2452 213d 488BBD38 		movq	-3784(%rbp), %rdi
 2452      F1FFFF
 2453 2144 488D8D6B 		leaq	-3733(%rbp), %rcx
 2453      F1FFFF
 2454 214b 488B8558 		movq	-3752(%rbp), %rax
 2454      F1FFFF
 2455 2152 4989F9   		movq	%rdi, %r9
 2456 2155 4989C8   		movq	%rcx, %r8
 2457 2158 B9030000 		movl	$3, %ecx
 2457      00
 2458 215d 4889C7   		movq	%rax, %rdi
 2459 2160 E8000000 		call	flSingleBitPortAccess@PLT
 2459      00
 2460 2165 898580F1 		movl	%eax, -3712(%rbp)
 2460      FFFF
 388:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2461              		.loc 2 388 0
 2462 216b 83BD80F1 		cmpl	$0, -3712(%rbp)
 2462      FFFF00
 2463 2172 7427     		je	.L128
 2464              		.loc 2 388 0 is_stmt 0 discriminator 1
 2465 2174 488B8538 		movq	-3784(%rbp), %rax
 2465      F1FFFF
 2466 217b 488D3500 		leaq	.LC18(%rip), %rsi
 2466      000000
 2467 2182 4889C7   		movq	%rax, %rdi
 2468 2185 E8000000 		call	errPrefix@PLT
 2468      00
 2469 218a 8B8580F1 		movl	-3712(%rbp), %eax
 2469      FFFF
 2470 2190 898578F1 		movl	%eax, -3720(%rbp)
 2470      FFFF
 2471 2196 E9C80500 		jmp	.L67
 2471      00
 2472              	.L128:
 389:prog.c        **** 	} while ( initStatus || doneStatus );
 2473              		.loc 2 389 0 is_stmt 1
 2474 219b 0FB6856A 		movzbl	-3734(%rbp), %eax
 2474      F1FFFF
 2475 21a2 84C0     		testb	%al, %al
 2476 21a4 0F8519FF 		jne	.L126
 2476      FFFF
 2477              		.loc 2 389 0 is_stmt 0 discriminator 1
 2478 21aa 0FB6856B 		movzbl	-3733(%rbp), %eax
 2478      F1FFFF
 2479 21b1 84C0     		testb	%al, %al
 2480 21b3 0F850AFF 		jne	.L126
 2480      FFFF
 390:prog.c        **** 
 391:prog.c        **** 	// Now it's safe to switch to conduit mode zero (=JTAG, etc)
 392:prog.c        **** 	fStatus = flSelectConduit(handle, 0x00, error);
 2481              		.loc 2 392 0 is_stmt 1
 2482 21b9 488B9538 		movq	-3784(%rbp), %rdx
 2482      F1FFFF
 2483 21c0 488B8558 		movq	-3752(%rbp), %rax
 2483      F1FFFF
 2484 21c7 BE000000 		movl	$0, %esi
 2484      00
 2485 21cc 4889C7   		movq	%rax, %rdi
 2486 21cf E8000000 		call	flSelectConduit@PLT
 2486      00
 2487 21d4 898580F1 		movl	%eax, -3712(%rbp)
 2487      FFFF
 393:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2488              		.loc 2 393 0
 2489 21da 83BD80F1 		cmpl	$0, -3712(%rbp)
 2489      FFFF00
 2490 21e1 7427     		je	.L129
 2491              		.loc 2 393 0 is_stmt 0 discriminator 1
 2492 21e3 488B8538 		movq	-3784(%rbp), %rax
 2492      F1FFFF
 2493 21ea 488D3500 		leaq	.LC18(%rip), %rsi
 2493      000000
 2494 21f1 4889C7   		movq	%rax, %rdi
 2495 21f4 E8000000 		call	errPrefix@PLT
 2495      00
 2496 21f9 8B8580F1 		movl	-3712(%rbp), %eax
 2496      FFFF
 2497 21ff 898578F1 		movl	%eax, -3720(%rbp)
 2497      FFFF
 2498 2205 E9590500 		jmp	.L67
 2498      00
 2499              	.L129:
 394:prog.c        **** 
 395:prog.c        **** 	// Apply requested configuration to each specified pin
 396:prog.c        **** 	pinMap[progPort][progBit] = PIN_UNUSED;
 2500              		.loc 2 396 0 is_stmt 1
 2501 220a 0FB6956F 		movzbl	-3729(%rbp), %edx
 2501      F1FFFF
 2502 2211 0FB68570 		movzbl	-3728(%rbp), %eax
 2502      F1FFFF
 2503 2218 4898     		cltq
 2504 221a 4863D2   		movslq	%edx, %rdx
 2505 221d 48C1E205 		salq	$5, %rdx
 2506 2221 4801D0   		addq	%rdx, %rax
 2507 2224 C7848590 		movl	$0, -3696(%rbp,%rax,4)
 2507      F1FFFF00 
 2507      000000
 397:prog.c        **** 	pinMap[initPort][initBit] = PIN_UNUSED;
 2508              		.loc 2 397 0
 2509 222f 0FB69571 		movzbl	-3727(%rbp), %edx
 2509      F1FFFF
 2510 2236 0FB68572 		movzbl	-3726(%rbp), %eax
 2510      F1FFFF
 2511 223d 4898     		cltq
 2512 223f 4863D2   		movslq	%edx, %rdx
 2513 2242 48C1E205 		salq	$5, %rdx
 2514 2246 4801D0   		addq	%rdx, %rax
 2515 2249 C7848590 		movl	$0, -3696(%rbp,%rax,4)
 2515      F1FFFF00 
 2515      000000
 398:prog.c        **** 	pinMap[donePort][doneBit] = PIN_UNUSED;
 2516              		.loc 2 398 0
 2517 2254 0FB69573 		movzbl	-3725(%rbp), %edx
 2517      F1FFFF
 2518 225b 0FB68574 		movzbl	-3724(%rbp), %eax
 2518      F1FFFF
 2519 2262 4898     		cltq
 2520 2264 4863D2   		movslq	%edx, %rdx
 2521 2267 48C1E205 		salq	$5, %rdx
 2522 226b 4801D0   		addq	%rdx, %rax
 2523 226e C7848590 		movl	$0, -3696(%rbp,%rax,4)
 2523      F1FFFF00 
 2523      000000
 399:prog.c        **** 	for ( port = 0; port < 26; port++ ) {
 2524              		.loc 2 399 0
 2525 2279 C6856CF1 		movb	$0, -3732(%rbp)
 2525      FFFF00
 2526 2280 E9D50000 		jmp	.L130
 2526      00
 2527              	.L134:
 400:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2528              		.loc 2 400 0
 2529 2285 C6856DF1 		movb	$0, -3731(%rbp)
 2529      FFFF00
 2530 228c E9AC0000 		jmp	.L131
 2530      00
 2531              	.L133:
 401:prog.c        **** 			thisPin = pinMap[port][bit];
 2532              		.loc 2 401 0
 2533 2291 0FB6956C 		movzbl	-3732(%rbp), %edx
 2533      F1FFFF
 2534 2298 0FB6856D 		movzbl	-3731(%rbp), %eax
 2534      F1FFFF
 2535 229f 4898     		cltq
 2536 22a1 4863D2   		movslq	%edx, %rdx
 2537 22a4 48C1E205 		salq	$5, %rdx
 2538 22a8 4801D0   		addq	%rdx, %rax
 2539 22ab 8B848590 		movl	-3696(%rbp,%rax,4), %eax
 2539      F1FFFF
 2540 22b2 898584F1 		movl	%eax, -3708(%rbp)
 2540      FFFF
 402:prog.c        **** 			if ( thisPin != PIN_UNUSED ) {
 2541              		.loc 2 402 0
 2542 22b8 83BD84F1 		cmpl	$0, -3708(%rbp)
 2542      FFFF00
 2543 22bf 746C     		je	.L132
 403:prog.c        **** 				fStatus = flSingleBitPortAccess(handle, port, bit, thisPin, NULL, error);
 2544              		.loc 2 403 0
 2545 22c1 8B8584F1 		movl	-3708(%rbp), %eax
 2545      FFFF
 2546 22c7 0FB6C8   		movzbl	%al, %ecx
 2547 22ca 0FB6956D 		movzbl	-3731(%rbp), %edx
 2547      F1FFFF
 2548 22d1 0FB6B56C 		movzbl	-3732(%rbp), %esi
 2548      F1FFFF
 2549 22d8 488BBD38 		movq	-3784(%rbp), %rdi
 2549      F1FFFF
 2550 22df 488B8558 		movq	-3752(%rbp), %rax
 2550      F1FFFF
 2551 22e6 4989F9   		movq	%rdi, %r9
 2552 22e9 41B80000 		movl	$0, %r8d
 2552      0000
 2553 22ef 4889C7   		movq	%rax, %rdi
 2554 22f2 E8000000 		call	flSingleBitPortAccess@PLT
 2554      00
 2555 22f7 898580F1 		movl	%eax, -3712(%rbp)
 2555      FFFF
 404:prog.c        **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2556              		.loc 2 404 0
 2557 22fd 83BD80F1 		cmpl	$0, -3712(%rbp)
 2557      FFFF00
 2558 2304 7427     		je	.L132
 2559              		.loc 2 404 0 is_stmt 0 discriminator 1
 2560 2306 488B8538 		movq	-3784(%rbp), %rax
 2560      F1FFFF
 2561 230d 488D3500 		leaq	.LC18(%rip), %rsi
 2561      000000
 2562 2314 4889C7   		movq	%rax, %rdi
 2563 2317 E8000000 		call	errPrefix@PLT
 2563      00
 2564 231c 8B8580F1 		movl	-3712(%rbp), %eax
 2564      FFFF
 2565 2322 898578F1 		movl	%eax, -3720(%rbp)
 2565      FFFF
 2566 2328 E9360400 		jmp	.L67
 2566      00
 2567              	.L132:
 400:prog.c        **** 			thisPin = pinMap[port][bit];
 2568              		.loc 2 400 0 is_stmt 1 discriminator 2
 2569 232d 0FB6856D 		movzbl	-3731(%rbp), %eax
 2569      F1FFFF
 2570 2334 83C001   		addl	$1, %eax
 2571 2337 88856DF1 		movb	%al, -3731(%rbp)
 2571      FFFF
 2572              	.L131:
 400:prog.c        **** 			thisPin = pinMap[port][bit];
 2573              		.loc 2 400 0 is_stmt 0 discriminator 1
 2574 233d 80BD6DF1 		cmpb	$31, -3731(%rbp)
 2574      FFFF1F
 2575 2344 0F8647FF 		jbe	.L133
 2575      FFFF
 399:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2576              		.loc 2 399 0 is_stmt 1 discriminator 2
 2577 234a 0FB6856C 		movzbl	-3732(%rbp), %eax
 2577      F1FFFF
 2578 2351 83C001   		addl	$1, %eax
 2579 2354 88856CF1 		movb	%al, -3732(%rbp)
 2579      FFFF
 2580              	.L130:
 399:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2581              		.loc 2 399 0 is_stmt 0 discriminator 1
 2582 235a 80BD6CF1 		cmpb	$25, -3732(%rbp)
 2582      FFFF19
 2583 2361 0F861EFF 		jbe	.L134
 2583      FFFF
 405:prog.c        **** 			}
 406:prog.c        **** 		}
 407:prog.c        **** 	}
 408:prog.c        **** 
 409:prog.c        **** 	// Deassert PROG and wait for INIT to go high
 410:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, progPort, progBit, PIN_HIGH, NULL, error); // PROG is high
 2584              		.loc 2 410 0 is_stmt 1
 2585 2367 0FB69570 		movzbl	-3728(%rbp), %edx
 2585      F1FFFF
 2586 236e 0FB6B56F 		movzbl	-3729(%rbp), %esi
 2586      F1FFFF
 2587 2375 488B8D38 		movq	-3784(%rbp), %rcx
 2587      F1FFFF
 2588 237c 488B8558 		movq	-3752(%rbp), %rax
 2588      F1FFFF
 2589 2383 4989C9   		movq	%rcx, %r9
 2590 2386 41B80000 		movl	$0, %r8d
 2590      0000
 2591 238c B9010000 		movl	$1, %ecx
 2591      00
 2592 2391 4889C7   		movq	%rax, %rdi
 2593 2394 E8000000 		call	flSingleBitPortAccess@PLT
 2593      00
 2594 2399 898580F1 		movl	%eax, -3712(%rbp)
 2594      FFFF
 411:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2595              		.loc 2 411 0
 2596 239f 83BD80F1 		cmpl	$0, -3712(%rbp)
 2596      FFFF00
 2597 23a6 7427     		je	.L135
 2598              		.loc 2 411 0 is_stmt 0 discriminator 1
 2599 23a8 488B8538 		movq	-3784(%rbp), %rax
 2599      F1FFFF
 2600 23af 488D3500 		leaq	.LC18(%rip), %rsi
 2600      000000
 2601 23b6 4889C7   		movq	%rax, %rdi
 2602 23b9 E8000000 		call	errPrefix@PLT
 2602      00
 2603 23be 8B8580F1 		movl	-3712(%rbp), %eax
 2603      FFFF
 2604 23c4 898578F1 		movl	%eax, -3720(%rbp)
 2604      FFFF
 2605 23ca E9940300 		jmp	.L67
 2605      00
 2606              	.L135:
 412:prog.c        **** 	do {
 413:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, initPort, initBit, PIN_INPUT, &initStatus, error);
 2607              		.loc 2 413 0 is_stmt 1
 2608 23cf 0FB69572 		movzbl	-3726(%rbp), %edx
 2608      F1FFFF
 2609 23d6 0FB6B571 		movzbl	-3727(%rbp), %esi
 2609      F1FFFF
 2610 23dd 488BBD38 		movq	-3784(%rbp), %rdi
 2610      F1FFFF
 2611 23e4 488D8D6A 		leaq	-3734(%rbp), %rcx
 2611      F1FFFF
 2612 23eb 488B8558 		movq	-3752(%rbp), %rax
 2612      F1FFFF
 2613 23f2 4989F9   		movq	%rdi, %r9
 2614 23f5 4989C8   		movq	%rcx, %r8
 2615 23f8 B9030000 		movl	$3, %ecx
 2615      00
 2616 23fd 4889C7   		movq	%rax, %rdi
 2617 2400 E8000000 		call	flSingleBitPortAccess@PLT
 2617      00
 2618 2405 898580F1 		movl	%eax, -3712(%rbp)
 2618      FFFF
 414:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2619              		.loc 2 414 0
 2620 240b 83BD80F1 		cmpl	$0, -3712(%rbp)
 2620      FFFF00
 2621 2412 7427     		je	.L136
 2622              		.loc 2 414 0 is_stmt 0 discriminator 1
 2623 2414 488B8538 		movq	-3784(%rbp), %rax
 2623      F1FFFF
 2624 241b 488D3500 		leaq	.LC18(%rip), %rsi
 2624      000000
 2625 2422 4889C7   		movq	%rax, %rdi
 2626 2425 E8000000 		call	errPrefix@PLT
 2626      00
 2627 242a 8B8580F1 		movl	-3712(%rbp), %eax
 2627      FFFF
 2628 2430 898578F1 		movl	%eax, -3720(%rbp)
 2628      FFFF
 2629 2436 E9280300 		jmp	.L67
 2629      00
 2630              	.L136:
 415:prog.c        **** 	} while ( !initStatus );
 2631              		.loc 2 415 0 is_stmt 1
 2632 243b 0FB6856A 		movzbl	-3734(%rbp), %eax
 2632      F1FFFF
 2633 2442 84C0     		testb	%al, %al
 2634 2444 7489     		je	.L135
 416:prog.c        **** 
 417:prog.c        **** 	// Write the programming file into the FPGA
 418:prog.c        **** 	fStatus = dataWrite(handle, progOp, data, len, lookupTable, error);
 2635              		.loc 2 418 0
 2636 2446 4C8B8538 		movq	-3784(%rbp), %r8
 2636      F1FFFF
 2637 244d 488DBDF0 		leaq	-272(%rbp), %rdi
 2637      FEFFFF
 2638 2454 8B8D50F1 		movl	-3760(%rbp), %ecx
 2638      FFFF
 2639 245a 488B9540 		movq	-3776(%rbp), %rdx
 2639      F1FFFF
 2640 2461 8BB554F1 		movl	-3756(%rbp), %esi
 2640      FFFF
 2641 2467 488B8558 		movq	-3752(%rbp), %rax
 2641      F1FFFF
 2642 246e 4D89C1   		movq	%r8, %r9
 2643 2471 4989F8   		movq	%rdi, %r8
 2644 2474 4889C7   		movq	%rax, %rdi
 2645 2477 E80EE4FF 		call	dataWrite
 2645      FF
 2646 247c 898580F1 		movl	%eax, -3712(%rbp)
 2646      FFFF
 419:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2647              		.loc 2 419 0
 2648 2482 83BD80F1 		cmpl	$0, -3712(%rbp)
 2648      FFFF00
 2649 2489 7427     		je	.L137
 2650              		.loc 2 419 0 is_stmt 0 discriminator 1
 2651 248b 488B8538 		movq	-3784(%rbp), %rax
 2651      F1FFFF
 2652 2492 488D3500 		leaq	.LC18(%rip), %rsi
 2652      000000
 2653 2499 4889C7   		movq	%rax, %rdi
 2654 249c E8000000 		call	errPrefix@PLT
 2654      00
 2655 24a1 8B8580F1 		movl	-3712(%rbp), %eax
 2655      FFFF
 2656 24a7 898578F1 		movl	%eax, -3720(%rbp)
 2656      FFFF
 2657 24ad E9B10200 		jmp	.L67
 2657      00
 2658              	.L137:
 420:prog.c        **** 
 421:prog.c        **** 	i = 0;
 2659              		.loc 2 421 0 is_stmt 1
 2660 24b2 C7857CF1 		movl	$0, -3716(%rbp)
 2660      FFFF0000 
 2660      0000
 2661              	.L145:
 422:prog.c        **** 	for ( ; ; ) {
 423:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, initPort, initBit, PIN_INPUT, &initStatus, error);
 2662              		.loc 2 423 0
 2663 24bc 0FB69572 		movzbl	-3726(%rbp), %edx
 2663      F1FFFF
 2664 24c3 0FB6B571 		movzbl	-3727(%rbp), %esi
 2664      F1FFFF
 2665 24ca 488BBD38 		movq	-3784(%rbp), %rdi
 2665      F1FFFF
 2666 24d1 488D8D6A 		leaq	-3734(%rbp), %rcx
 2666      F1FFFF
 2667 24d8 488B8558 		movq	-3752(%rbp), %rax
 2667      F1FFFF
 2668 24df 4989F9   		movq	%rdi, %r9
 2669 24e2 4989C8   		movq	%rcx, %r8
 2670 24e5 B9030000 		movl	$3, %ecx
 2670      00
 2671 24ea 4889C7   		movq	%rax, %rdi
 2672 24ed E8000000 		call	flSingleBitPortAccess@PLT
 2672      00
 2673 24f2 898580F1 		movl	%eax, -3712(%rbp)
 2673      FFFF
 424:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2674              		.loc 2 424 0
 2675 24f8 83BD80F1 		cmpl	$0, -3712(%rbp)
 2675      FFFF00
 2676 24ff 7427     		je	.L138
 2677              		.loc 2 424 0 is_stmt 0 discriminator 1
 2678 2501 488B8538 		movq	-3784(%rbp), %rax
 2678      F1FFFF
 2679 2508 488D3500 		leaq	.LC18(%rip), %rsi
 2679      000000
 2680 250f 4889C7   		movq	%rax, %rdi
 2681 2512 E8000000 		call	errPrefix@PLT
 2681      00
 2682 2517 8B8580F1 		movl	-3712(%rbp), %eax
 2682      FFFF
 2683 251d 898578F1 		movl	%eax, -3720(%rbp)
 2683      FFFF
 2684 2523 E93B0200 		jmp	.L67
 2684      00
 2685              	.L138:
 425:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, donePort, doneBit, PIN_INPUT, &doneStatus, error);
 2686              		.loc 2 425 0 is_stmt 1
 2687 2528 0FB69574 		movzbl	-3724(%rbp), %edx
 2687      F1FFFF
 2688 252f 0FB6B573 		movzbl	-3725(%rbp), %esi
 2688      F1FFFF
 2689 2536 488BBD38 		movq	-3784(%rbp), %rdi
 2689      F1FFFF
 2690 253d 488D8D6B 		leaq	-3733(%rbp), %rcx
 2690      F1FFFF
 2691 2544 488B8558 		movq	-3752(%rbp), %rax
 2691      F1FFFF
 2692 254b 4989F9   		movq	%rdi, %r9
 2693 254e 4989C8   		movq	%rcx, %r8
 2694 2551 B9030000 		movl	$3, %ecx
 2694      00
 2695 2556 4889C7   		movq	%rax, %rdi
 2696 2559 E8000000 		call	flSingleBitPortAccess@PLT
 2696      00
 2697 255e 898580F1 		movl	%eax, -3712(%rbp)
 2697      FFFF
 426:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2698              		.loc 2 426 0
 2699 2564 83BD80F1 		cmpl	$0, -3712(%rbp)
 2699      FFFF00
 2700 256b 7427     		je	.L139
 2701              		.loc 2 426 0 is_stmt 0 discriminator 1
 2702 256d 488B8538 		movq	-3784(%rbp), %rax
 2702      F1FFFF
 2703 2574 488D3500 		leaq	.LC18(%rip), %rsi
 2703      000000
 2704 257b 4889C7   		movq	%rax, %rdi
 2705 257e E8000000 		call	errPrefix@PLT
 2705      00
 2706 2583 8B8580F1 		movl	-3712(%rbp), %eax
 2706      FFFF
 2707 2589 898578F1 		movl	%eax, -3720(%rbp)
 2707      FFFF
 2708 258f E9CF0100 		jmp	.L67
 2708      00
 2709              	.L139:
 427:prog.c        **** 		if ( doneStatus ) {
 2710              		.loc 2 427 0 is_stmt 1
 2711 2594 0FB6856B 		movzbl	-3733(%rbp), %eax
 2711      F1FFFF
 2712 259b 84C0     		testb	%al, %al
 2713 259d 0F85D800 		jne	.L154
 2713      0000
 428:prog.c        **** 			// If DONE goes high, we've finished.
 429:prog.c        **** 			break;
 430:prog.c        **** 		} else if ( initStatus ) {
 2714              		.loc 2 430 0
 2715 25a3 0FB6856A 		movzbl	-3734(%rbp), %eax
 2715      F1FFFF
 2716 25aa 84C0     		testb	%al, %al
 2717 25ac 0F84A400 		je	.L142
 2717      0000
 431:prog.c        **** 			// If DONE remains low and INIT remains high, we probably just need more clocks
 432:prog.c        **** 			i++;
 2718              		.loc 2 432 0
 2719 25b2 83857CF1 		addl	$1, -3716(%rbp)
 2719      FFFF01
 433:prog.c        **** 			CHECK_STATUS(i == 10, FL_PROG_ERR, cleanup, "xProgram(): DONE did not assert");
 2720              		.loc 2 433 0
 2721 25b9 83BD7CF1 		cmpl	$10, -3716(%rbp)
 2721      FFFF0A
 2722 25c0 7525     		jne	.L143
 2723              		.loc 2 433 0 is_stmt 0 discriminator 1
 2724 25c2 488B8538 		movq	-3784(%rbp), %rax
 2724      F1FFFF
 2725 25c9 488D3500 		leaq	.LC21(%rip), %rsi
 2725      000000
 2726 25d0 4889C7   		movq	%rax, %rdi
 2727 25d3 E8000000 		call	errPrefix@PLT
 2727      00
 2728 25d8 C78578F1 		movl	$20, -3720(%rbp)
 2728      FFFF1400 
 2728      0000
 2729 25e2 E97C0100 		jmp	.L67
 2729      00
 2730              	.L143:
 434:prog.c        **** 			fStatus = dataWrite(handle, progOp, zeroBlock, 64, lookupTable, error);
 2731              		.loc 2 434 0 is_stmt 1
 2732 25e7 488BBD38 		movq	-3784(%rbp), %rdi
 2732      F1FFFF
 2733 25ee 488D8DF0 		leaq	-272(%rbp), %rcx
 2733      FEFFFF
 2734 25f5 488D95B0 		leaq	-336(%rbp), %rdx
 2734      FEFFFF
 2735 25fc 8BB554F1 		movl	-3756(%rbp), %esi
 2735      FFFF
 2736 2602 488B8558 		movq	-3752(%rbp), %rax
 2736      F1FFFF
 2737 2609 4989F9   		movq	%rdi, %r9
 2738 260c 4989C8   		movq	%rcx, %r8
 2739 260f B9400000 		movl	$64, %ecx
 2739      00
 2740 2614 4889C7   		movq	%rax, %rdi
 2741 2617 E86EE2FF 		call	dataWrite
 2741      FF
 2742 261c 898580F1 		movl	%eax, -3712(%rbp)
 2742      FFFF
 435:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2743              		.loc 2 435 0
 2744 2622 83BD80F1 		cmpl	$0, -3712(%rbp)
 2744      FFFF00
 2745 2629 0F848DFE 		je	.L145
 2745      FFFF
 2746              		.loc 2 435 0 is_stmt 0 discriminator 1
 2747 262f 488B8538 		movq	-3784(%rbp), %rax
 2747      F1FFFF
 2748 2636 488D3500 		leaq	.LC18(%rip), %rsi
 2748      000000
 2749 263d 4889C7   		movq	%rax, %rdi
 2750 2640 E8000000 		call	errPrefix@PLT
 2750      00
 2751 2645 8B8580F1 		movl	-3712(%rbp), %eax
 2751      FFFF
 2752 264b 898578F1 		movl	%eax, -3720(%rbp)
 2752      FFFF
 2753 2651 E90D0100 		jmp	.L67
 2753      00
 2754              	.L142:
 436:prog.c        **** 		} else {
 437:prog.c        **** 			// If DONE remains low and INIT goes low, an error occurred
 438:prog.c        **** 			CHECK_STATUS(
 2755              		.loc 2 438 0 is_stmt 1 discriminator 1
 2756 2656 488B8538 		movq	-3784(%rbp), %rax
 2756      F1FFFF
 2757 265d 488D3500 		leaq	.LC22(%rip), %rsi
 2757      000000
 2758 2664 4889C7   		movq	%rax, %rdi
 2759 2667 E8000000 		call	errPrefix@PLT
 2759      00
 2760 266c C78578F1 		movl	$20, -3720(%rbp)
 2760      FFFF1400 
 2760      0000
 2761 2676 E9E80000 		jmp	.L67
 2761      00
 2762              	.L154:
 429:prog.c        **** 		} else if ( initStatus ) {
 2763              		.loc 2 429 0
 2764 267b 90       		nop
 439:prog.c        **** 				true, FL_PROG_ERR, cleanup,
 440:prog.c        **** 				"xProgram(): INIT unexpectedly low (CRC error during config)");
 441:prog.c        **** 		}
 442:prog.c        **** 	}
 443:prog.c        **** 
 444:prog.c        **** 	// Make all specified pins inputs; leave INIT & DONE as inputs and leave PROG driven high
 445:prog.c        **** 	for ( port = 0; port < 26; port++ ) {
 2765              		.loc 2 445 0
 2766 267c C6856CF1 		movb	$0, -3732(%rbp)
 2766      FFFF00
 2767 2683 E9CE0000 		jmp	.L146
 2767      00
 2768              	.L150:
 446:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2769              		.loc 2 446 0
 2770 2688 C6856DF1 		movb	$0, -3731(%rbp)
 2770      FFFF00
 2771 268f E9A50000 		jmp	.L147
 2771      00
 2772              	.L149:
 447:prog.c        **** 			thisPin = pinMap[port][bit];
 2773              		.loc 2 447 0
 2774 2694 0FB6956C 		movzbl	-3732(%rbp), %edx
 2774      F1FFFF
 2775 269b 0FB6856D 		movzbl	-3731(%rbp), %eax
 2775      F1FFFF
 2776 26a2 4898     		cltq
 2777 26a4 4863D2   		movslq	%edx, %rdx
 2778 26a7 48C1E205 		salq	$5, %rdx
 2779 26ab 4801D0   		addq	%rdx, %rax
 2780 26ae 8B848590 		movl	-3696(%rbp,%rax,4), %eax
 2780      F1FFFF
 2781 26b5 898584F1 		movl	%eax, -3708(%rbp)
 2781      FFFF
 448:prog.c        **** 			if ( thisPin != PIN_UNUSED ) {
 2782              		.loc 2 448 0
 2783 26bb 83BD84F1 		cmpl	$0, -3708(%rbp)
 2783      FFFF00
 2784 26c2 7465     		je	.L148
 449:prog.c        **** 				fStatus = flSingleBitPortAccess(handle, port, bit, PIN_INPUT, NULL, error);
 2785              		.loc 2 449 0
 2786 26c4 0FB6956D 		movzbl	-3731(%rbp), %edx
 2786      F1FFFF
 2787 26cb 0FB6B56C 		movzbl	-3732(%rbp), %esi
 2787      F1FFFF
 2788 26d2 488B8D38 		movq	-3784(%rbp), %rcx
 2788      F1FFFF
 2789 26d9 488B8558 		movq	-3752(%rbp), %rax
 2789      F1FFFF
 2790 26e0 4989C9   		movq	%rcx, %r9
 2791 26e3 41B80000 		movl	$0, %r8d
 2791      0000
 2792 26e9 B9030000 		movl	$3, %ecx
 2792      00
 2793 26ee 4889C7   		movq	%rax, %rdi
 2794 26f1 E8000000 		call	flSingleBitPortAccess@PLT
 2794      00
 2795 26f6 898580F1 		movl	%eax, -3712(%rbp)
 2795      FFFF
 450:prog.c        **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2796              		.loc 2 450 0
 2797 26fc 83BD80F1 		cmpl	$0, -3712(%rbp)
 2797      FFFF00
 2798 2703 7424     		je	.L148
 2799              		.loc 2 450 0 is_stmt 0 discriminator 1
 2800 2705 488B8538 		movq	-3784(%rbp), %rax
 2800      F1FFFF
 2801 270c 488D3500 		leaq	.LC18(%rip), %rsi
 2801      000000
 2802 2713 4889C7   		movq	%rax, %rdi
 2803 2716 E8000000 		call	errPrefix@PLT
 2803      00
 2804 271b 8B8580F1 		movl	-3712(%rbp), %eax
 2804      FFFF
 2805 2721 898578F1 		movl	%eax, -3720(%rbp)
 2805      FFFF
 2806 2727 EB3A     		jmp	.L67
 2807              	.L148:
 446:prog.c        **** 			thisPin = pinMap[port][bit];
 2808              		.loc 2 446 0 is_stmt 1 discriminator 2
 2809 2729 0FB6856D 		movzbl	-3731(%rbp), %eax
 2809      F1FFFF
 2810 2730 83C001   		addl	$1, %eax
 2811 2733 88856DF1 		movb	%al, -3731(%rbp)
 2811      FFFF
 2812              	.L147:
 446:prog.c        **** 			thisPin = pinMap[port][bit];
 2813              		.loc 2 446 0 is_stmt 0 discriminator 1
 2814 2739 80BD6DF1 		cmpb	$31, -3731(%rbp)
 2814      FFFF1F
 2815 2740 0F864EFF 		jbe	.L149
 2815      FFFF
 445:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2816              		.loc 2 445 0 is_stmt 1 discriminator 2
 2817 2746 0FB6856C 		movzbl	-3732(%rbp), %eax
 2817      F1FFFF
 2818 274d 83C001   		addl	$1, %eax
 2819 2750 88856CF1 		movb	%al, -3732(%rbp)
 2819      FFFF
 2820              	.L146:
 445:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2821              		.loc 2 445 0 is_stmt 0 discriminator 1
 2822 2756 80BD6CF1 		cmpb	$25, -3732(%rbp)
 2822      FFFF19
 2823 275d 0F8625FF 		jbe	.L150
 2823      FFFF
 2824              	.L67:
 451:prog.c        **** 			}
 452:prog.c        **** 		}
 453:prog.c        **** 	}
 454:prog.c        **** cleanup:
 455:prog.c        **** 	return retVal;
 2825              		.loc 2 455 0 is_stmt 1
 2826 2763 8B8578F1 		movl	-3720(%rbp), %eax
 2826      FFFF
 456:prog.c        **** }
 2827              		.loc 2 456 0
 2828 2769 488B75F8 		movq	-8(%rbp), %rsi
 2829 276d 64483334 		xorq	%fs:40, %rsi
 2829      25280000 
 2829      00
 2830 2776 7405     		je	.L152
 2831 2778 E8000000 		call	__stack_chk_fail@PLT
 2831      00
 2832              	.L152:
 2833 277d C9       		leave
 2834              		.cfi_def_cfa 7, 8
 2835 277e C3       		ret
 2836              		.cfi_endproc
 2837              	.LFE12:
 2839              		.section	.rodata
 2840 049c 00000000 		.align 8
 2841              	.LC23:
 2842 04a0 6150726F 		.string	"aProgram(): Unexpected end of config string:\n  %s\n  %s^"
 2842      6772616D 
 2842      28293A20 
 2842      556E6578 
 2842      70656374 
 2843              		.align 8
 2844              	.LC24:
 2845 04d8 6150726F 		.string	"aProgram(): Expecting ':':\n  %s\n  %s^"
 2845      6772616D 
 2845      28293A20 
 2845      45787065 
 2845      6374696E 
 2846 04fe 0000     		.align 8
 2847              	.LC25:
 2848 0500 6150726F 		.string	"aProgram(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 2848      6772616D 
 2848      28293A20 
 2848      506F7274 
 2848      20697320 
 2849 0543 00000000 		.align 8
 2849      00
 2850              	.LC26:
 2851 0548 6150726F 		.string	"aProgram(): Bit number is not valid:\n  %s\n  %s^"
 2851      6772616D 
 2851      28293A20 
 2851      42697420 
 2851      6E756D62 
 2852              		.align 8
 2853              	.LC27:
 2854 0578 6150726F 		.string	"aProgram(): port '%c%d' is already used:\n  %s\n  %s^"
 2854      6772616D 
 2854      28293A20 
 2854      706F7274 
 2854      20272563 
 2855              	.LC28:
 2856 05ac 6150726F 		.string	"aProgram()"
 2856      6772616D 
 2856      282900
 2857 05b7 00       		.align 8
 2858              	.LC29:
 2859 05b8 6150726F 		.string	"aProgram(): Expecting ']':\n  %s\n  %s^"
 2859      6772616D 
 2859      28293A20 
 2859      45787065 
 2859      6374696E 
 2860 05de 0000     		.align 8
 2861              	.LC30:
 2862 05e0 6150726F 		.string	"aProgram(): Expecting ':' or end-of-string:\n  %s\n  %s^"
 2862      6772616D 
 2862      28293A20 
 2862      45787065 
 2862      6374696E 
 2863 0617 00       		.align 8
 2864              	.LC31:
 2865 0618 6150726F 		.string	"aProgram(): CONF_DONE remained low (CRC error during config)"
 2865      6772616D 
 2865      28293A20 
 2865      434F4E46 
 2865      5F444F4E 
 2866              		.text
 2868              	aProgram:
 2869              	.LFB13:
 457:prog.c        **** 
 458:prog.c        **** // This function performs a "passive" serial programming operation on Altera FPGAs.
 459:prog.c        **** //
 460:prog.c        **** // Called by:
 461:prog.c        **** //   flProgramBlob() -> xProgram()
 462:prog.c        **** //
 463:prog.c        **** static FLStatus aProgram(struct FLContext *handle, const char *portConfig, const uint8 *data, uint3
 2870              		.loc 2 463 0
 2871              		.cfi_startproc
 2872 277f 55       		pushq	%rbp
 2873              		.cfi_def_cfa_offset 16
 2874              		.cfi_offset 6, -16
 2875 2780 4889E5   		movq	%rsp, %rbp
 2876              		.cfi_def_cfa_register 6
 2877 2783 4881EC70 		subq	$3696, %rsp
 2877      0E0000
 2878 278a 4889BDB8 		movq	%rdi, -3656(%rbp)
 2878      F1FFFF
 2879 2791 4889B5B0 		movq	%rsi, -3664(%rbp)
 2879      F1FFFF
 2880 2798 488995A8 		movq	%rdx, -3672(%rbp)
 2880      F1FFFF
 2881 279f 898DA4F1 		movl	%ecx, -3676(%rbp)
 2881      FFFF
 2882 27a5 4C898598 		movq	%r8, -3688(%rbp)
 2882      F1FFFF
 2883              		.loc 2 463 0
 2884 27ac 64488B04 		movq	%fs:40, %rax
 2884      25280000 
 2884      00
 2885 27b5 488945F8 		movq	%rax, -8(%rbp)
 2886 27b9 31C0     		xorl	%eax, %eax
 464:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 2887              		.loc 2 464 0
 2888 27bb C785CCF1 		movl	$0, -3636(%rbp)
 2888      FFFF0000 
 2888      0000
 465:prog.c        **** 	FLStatus fStatus;
 466:prog.c        **** 	uint8 ncfgPort, ncfgBit;
 467:prog.c        **** 	uint8 donePort, doneBit;
 468:prog.c        **** 	uint8 dclkPort, dclkBit;
 469:prog.c        **** 	uint8 dataPort, dataBit;
 470:prog.c        **** 	uint8 port, bit;
 471:prog.c        **** 	uint8 doneStatus;
 472:prog.c        **** 	const char *ptr = portConfig + 2;
 2889              		.loc 2 472 0
 2890 27c5 488B85B0 		movq	-3664(%rbp), %rax
 2890      F1FFFF
 2891 27cc 4883C002 		addq	$2, %rax
 2892 27d0 488985D8 		movq	%rax, -3624(%rbp)
 2892      F1FFFF
 473:prog.c        **** 	PinConfig pinMap[26][32] = {{0,},};
 2893              		.loc 2 473 0
 2894 27d7 488D95E0 		leaq	-3616(%rbp), %rdx
 2894      F1FFFF
 2895 27de B8000000 		movl	$0, %eax
 2895      00
 2896 27e3 B9A00100 		movl	$416, %ecx
 2896      00
 2897 27e8 4889D7   		movq	%rdx, %rdi
 2898 27eb F348AB   		rep stosq
 474:prog.c        **** 	PinConfig thisPin;
 475:prog.c        **** 	uint8 lookupTable[256];
 476:prog.c        **** 	const uint8 bitOrder[8] = {0,1,2,3,4,5,6,7};
 2899              		.loc 2 476 0
 2900 27ee C685E0FE 		movb	$0, -288(%rbp)
 2900      FFFF00
 2901 27f5 C685E1FE 		movb	$1, -287(%rbp)
 2901      FFFF01
 2902 27fc C685E2FE 		movb	$2, -286(%rbp)
 2902      FFFF02
 2903 2803 C685E3FE 		movb	$3, -285(%rbp)
 2903      FFFF03
 2904 280a C685E4FE 		movb	$4, -284(%rbp)
 2904      FFFF04
 2905 2811 C685E5FE 		movb	$5, -283(%rbp)
 2905      FFFF05
 2906 2818 C685E6FE 		movb	$6, -282(%rbp)
 2906      FFFF06
 2907 281f C685E7FE 		movb	$7, -281(%rbp)
 2907      FFFF07
 477:prog.c        **** 	char ch;
 478:prog.c        **** 	EXPECT_CHAR(':', "aProgram");
 2908              		.loc 2 478 0
 2909 2826 488B85D8 		movq	-3624(%rbp), %rax
 2909      F1FFFF
 2910 282d 0FB600   		movzbl	(%rax), %eax
 2911 2830 8885C3F1 		movb	%al, -3645(%rbp)
 2911      FFFF
 2912 2836 80BDC3F1 		cmpb	$0, -3645(%rbp)
 2912      FFFF00
 2913 283d 7553     		jne	.L156
 2914              		.loc 2 478 0 is_stmt 0 discriminator 1
 2915 283f 488B85D8 		movq	-3624(%rbp), %rax
 2915      F1FFFF
 2916 2846 4889C2   		movq	%rax, %rdx
 2917 2849 488B85B0 		movq	-3664(%rbp), %rax
 2917      F1FFFF
 2918 2850 4829C2   		subq	%rax, %rdx
 2919 2853 4889D0   		movq	%rdx, %rax
 2920 2856 4889C7   		movq	%rax, %rdi
 2921 2859 E852D9FF 		call	spaces
 2921      FF
 2922 285e 4889C1   		movq	%rax, %rcx
 2923 2861 488B95B0 		movq	-3664(%rbp), %rdx
 2923      F1FFFF
 2924 2868 488B8598 		movq	-3688(%rbp), %rax
 2924      F1FFFF
 2925 286f 488D3500 		leaq	.LC23(%rip), %rsi
 2925      000000
 2926 2876 4889C7   		movq	%rax, %rdi
 2927 2879 B8000000 		movl	$0, %eax
 2927      00
 2928 287e E8000000 		call	errRender@PLT
 2928      00
 2929 2883 C785CCF1 		movl	$11, -3636(%rbp)
 2929      FFFF0B00 
 2929      0000
 2930 288d E9991200 		jmp	.L157
 2930      00
 2931              	.L156:
 2932              		.loc 2 478 0 discriminator 2
 2933 2892 80BDC3F1 		cmpb	$58, -3645(%rbp)
 2933      FFFF3A
 2934 2899 7453     		je	.L158
 2935              		.loc 2 478 0 discriminator 3
 2936 289b 488B85D8 		movq	-3624(%rbp), %rax
 2936      F1FFFF
 2937 28a2 4889C2   		movq	%rax, %rdx
 2938 28a5 488B85B0 		movq	-3664(%rbp), %rax
 2938      F1FFFF
 2939 28ac 4829C2   		subq	%rax, %rdx
 2940 28af 4889D0   		movq	%rdx, %rax
 2941 28b2 4889C7   		movq	%rax, %rdi
 2942 28b5 E8F6D8FF 		call	spaces
 2942      FF
 2943 28ba 4889C1   		movq	%rax, %rcx
 2944 28bd 488B95B0 		movq	-3664(%rbp), %rdx
 2944      F1FFFF
 2945 28c4 488B8598 		movq	-3688(%rbp), %rax
 2945      F1FFFF
 2946 28cb 488D3500 		leaq	.LC24(%rip), %rsi
 2946      000000
 2947 28d2 4889C7   		movq	%rax, %rdi
 2948 28d5 B8000000 		movl	$0, %eax
 2948      00
 2949 28da E8000000 		call	errRender@PLT
 2949      00
 2950 28df C785CCF1 		movl	$11, -3636(%rbp)
 2950      FFFF0B00 
 2950      0000
 2951 28e9 E93D1200 		jmp	.L157
 2951      00
 2952              	.L158:
 2953              		.loc 2 478 0 discriminator 4
 2954 28ee 488B85D8 		movq	-3624(%rbp), %rax
 2954      F1FFFF
 2955 28f5 4883C001 		addq	$1, %rax
 2956 28f9 488985D8 		movq	%rax, -3624(%rbp)
 2956      F1FFFF
 479:prog.c        **** 
 480:prog.c        **** 	GET_PAIR(ncfgPort, ncfgBit, "aProgram");
 2957              		.loc 2 480 0 is_stmt 1 discriminator 4
 2958 2900 488B85D8 		movq	-3624(%rbp), %rax
 2958      F1FFFF
 2959 2907 0FB600   		movzbl	(%rax), %eax
 2960 290a 8885C3F1 		movb	%al, -3645(%rbp)
 2960      FFFF
 2961 2910 80BDC3F1 		cmpb	$0, -3645(%rbp)
 2961      FFFF00
 2962 2917 7553     		jne	.L159
 2963              		.loc 2 480 0 is_stmt 0 discriminator 1
 2964 2919 488B85D8 		movq	-3624(%rbp), %rax
 2964      F1FFFF
 2965 2920 4889C2   		movq	%rax, %rdx
 2966 2923 488B85B0 		movq	-3664(%rbp), %rax
 2966      F1FFFF
 2967 292a 4829C2   		subq	%rax, %rdx
 2968 292d 4889D0   		movq	%rdx, %rax
 2969 2930 4889C7   		movq	%rax, %rdi
 2970 2933 E878D8FF 		call	spaces
 2970      FF
 2971 2938 4889C1   		movq	%rax, %rcx
 2972 293b 488B95B0 		movq	-3664(%rbp), %rdx
 2972      F1FFFF
 2973 2942 488B8598 		movq	-3688(%rbp), %rax
 2973      F1FFFF
 2974 2949 488D3500 		leaq	.LC23(%rip), %rsi
 2974      000000
 2975 2950 4889C7   		movq	%rax, %rdi
 2976 2953 B8000000 		movl	$0, %eax
 2976      00
 2977 2958 E8000000 		call	errRender@PLT
 2977      00
 2978 295d C785CCF1 		movl	$11, -3636(%rbp)
 2978      FFFF0B00 
 2978      0000
 2979 2967 E9BF1100 		jmp	.L157
 2979      00
 2980              	.L159:
 2981              		.loc 2 480 0 discriminator 2
 2982 296c 80BDC3F1 		cmpb	$64, -3645(%rbp)
 2982      FFFF40
 2983 2973 7E09     		jle	.L160
 2984              		.loc 2 480 0 discriminator 4
 2985 2975 80BDC3F1 		cmpb	$90, -3645(%rbp)
 2985      FFFF5A
 2986 297c 7E53     		jle	.L161
 2987              	.L160:
 2988              		.loc 2 480 0 discriminator 5
 2989 297e 488B85D8 		movq	-3624(%rbp), %rax
 2989      F1FFFF
 2990 2985 4889C2   		movq	%rax, %rdx
 2991 2988 488B85B0 		movq	-3664(%rbp), %rax
 2991      F1FFFF
 2992 298f 4829C2   		subq	%rax, %rdx
 2993 2992 4889D0   		movq	%rdx, %rax
 2994 2995 4889C7   		movq	%rax, %rdi
 2995 2998 E813D8FF 		call	spaces
 2995      FF
 2996 299d 4889C1   		movq	%rax, %rcx
 2997 29a0 488B95B0 		movq	-3664(%rbp), %rdx
 2997      F1FFFF
 2998 29a7 488B8598 		movq	-3688(%rbp), %rax
 2998      F1FFFF
 2999 29ae 488D3500 		leaq	.LC25(%rip), %rsi
 2999      000000
 3000 29b5 4889C7   		movq	%rax, %rdi
 3001 29b8 B8000000 		movl	$0, %eax
 3001      00
 3002 29bd E8000000 		call	errRender@PLT
 3002      00
 3003 29c2 C785CCF1 		movl	$11, -3636(%rbp)
 3003      FFFF0B00 
 3003      0000
 3004 29cc E95A1100 		jmp	.L157
 3004      00
 3005              	.L161:
 3006              		.loc 2 480 0 discriminator 6
 3007 29d1 0FB685C3 		movzbl	-3645(%rbp), %eax
 3007      F1FFFF
 3008 29d8 83E841   		subl	$65, %eax
 3009 29db 8885C4F1 		movb	%al, -3644(%rbp)
 3009      FFFF
 3010 29e1 488B85D8 		movq	-3624(%rbp), %rax
 3010      F1FFFF
 3011 29e8 4883C001 		addq	$1, %rax
 3012 29ec 488985D8 		movq	%rax, -3624(%rbp)
 3012      F1FFFF
 3013 29f3 488B85D8 		movq	-3624(%rbp), %rax
 3013      F1FFFF
 3014 29fa 0FB600   		movzbl	(%rax), %eax
 3015 29fd 8885C3F1 		movb	%al, -3645(%rbp)
 3015      FFFF
 3016 2a03 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3016      FFFF00
 3017 2a0a 7553     		jne	.L162
 3018              		.loc 2 480 0 discriminator 7
 3019 2a0c 488B85D8 		movq	-3624(%rbp), %rax
 3019      F1FFFF
 3020 2a13 4889C2   		movq	%rax, %rdx
 3021 2a16 488B85B0 		movq	-3664(%rbp), %rax
 3021      F1FFFF
 3022 2a1d 4829C2   		subq	%rax, %rdx
 3023 2a20 4889D0   		movq	%rdx, %rax
 3024 2a23 4889C7   		movq	%rax, %rdi
 3025 2a26 E885D7FF 		call	spaces
 3025      FF
 3026 2a2b 4889C1   		movq	%rax, %rcx
 3027 2a2e 488B95B0 		movq	-3664(%rbp), %rdx
 3027      F1FFFF
 3028 2a35 488B8598 		movq	-3688(%rbp), %rax
 3028      F1FFFF
 3029 2a3c 488D3500 		leaq	.LC23(%rip), %rsi
 3029      000000
 3030 2a43 4889C7   		movq	%rax, %rdi
 3031 2a46 B8000000 		movl	$0, %eax
 3031      00
 3032 2a4b E8000000 		call	errRender@PLT
 3032      00
 3033 2a50 C785CCF1 		movl	$11, -3636(%rbp)
 3033      FFFF0B00 
 3033      0000
 3034 2a5a E9CC1000 		jmp	.L157
 3034      00
 3035              	.L162:
 3036              		.loc 2 480 0 discriminator 8
 3037 2a5f 80BDC3F1 		cmpb	$47, -3645(%rbp)
 3037      FFFF2F
 3038 2a66 7E09     		jle	.L163
 3039              		.loc 2 480 0 discriminator 10
 3040 2a68 80BDC3F1 		cmpb	$57, -3645(%rbp)
 3040      FFFF39
 3041 2a6f 7E53     		jle	.L164
 3042              	.L163:
 3043              		.loc 2 480 0 discriminator 11
 3044 2a71 488B85D8 		movq	-3624(%rbp), %rax
 3044      F1FFFF
 3045 2a78 4889C2   		movq	%rax, %rdx
 3046 2a7b 488B85B0 		movq	-3664(%rbp), %rax
 3046      F1FFFF
 3047 2a82 4829C2   		subq	%rax, %rdx
 3048 2a85 4889D0   		movq	%rdx, %rax
 3049 2a88 4889C7   		movq	%rax, %rdi
 3050 2a8b E820D7FF 		call	spaces
 3050      FF
 3051 2a90 4889C1   		movq	%rax, %rcx
 3052 2a93 488B95B0 		movq	-3664(%rbp), %rdx
 3052      F1FFFF
 3053 2a9a 488B8598 		movq	-3688(%rbp), %rax
 3053      F1FFFF
 3054 2aa1 488D3500 		leaq	.LC26(%rip), %rsi
 3054      000000
 3055 2aa8 4889C7   		movq	%rax, %rdi
 3056 2aab B8000000 		movl	$0, %eax
 3056      00
 3057 2ab0 E8000000 		call	errRender@PLT
 3057      00
 3058 2ab5 C785CCF1 		movl	$11, -3636(%rbp)
 3058      FFFF0B00 
 3058      0000
 3059 2abf E9671000 		jmp	.L157
 3059      00
 3060              	.L164:
 3061              		.loc 2 480 0 discriminator 12
 3062 2ac4 488B85D8 		movq	-3624(%rbp), %rax
 3062      F1FFFF
 3063 2acb 488D8DD8 		leaq	-3624(%rbp), %rcx
 3063      F1FFFF
 3064 2ad2 BA0A0000 		movl	$10, %edx
 3064      00
 3065 2ad7 4889CE   		movq	%rcx, %rsi
 3066 2ada 4889C7   		movq	%rax, %rdi
 3067 2add E8000000 		call	strtoul@PLT
 3067      00
 3068 2ae2 8885C5F1 		movb	%al, -3643(%rbp)
 3068      FFFF
 481:prog.c        **** 	SET_BIT(ncfgPort, ncfgBit, PIN_LOW, "aProgram");
 3069              		.loc 2 481 0 is_stmt 1 discriminator 12
 3070 2ae8 0FB695C4 		movzbl	-3644(%rbp), %edx
 3070      F1FFFF
 3071 2aef 0FB685C5 		movzbl	-3643(%rbp), %eax
 3071      F1FFFF
 3072 2af6 4898     		cltq
 3073 2af8 4863D2   		movslq	%edx, %rdx
 3074 2afb 48C1E205 		salq	$5, %rdx
 3075 2aff 4801D0   		addq	%rdx, %rax
 3076 2b02 8B8485E0 		movl	-3616(%rbp,%rax,4), %eax
 3076      F1FFFF
 3077 2b09 85C0     		testl	%eax, %eax
 3078 2b0b 7472     		je	.L165
 3079              		.loc 2 481 0 is_stmt 0 discriminator 1
 3080 2b0d 488B85D8 		movq	-3624(%rbp), %rax
 3080      F1FFFF
 3081 2b14 4889C2   		movq	%rax, %rdx
 3082 2b17 488B85B0 		movq	-3664(%rbp), %rax
 3082      F1FFFF
 3083 2b1e 4829C2   		subq	%rax, %rdx
 3084 2b21 4889D0   		movq	%rdx, %rax
 3085 2b24 4883E801 		subq	$1, %rax
 3086 2b28 4889C7   		movq	%rax, %rdi
 3087 2b2b E880D6FF 		call	spaces
 3087      FF
 3088 2b30 4889C7   		movq	%rax, %rdi
 3089 2b33 0FB695C5 		movzbl	-3643(%rbp), %edx
 3089      F1FFFF
 3090 2b3a 0FB685C4 		movzbl	-3644(%rbp), %eax
 3090      F1FFFF
 3091 2b41 8D7041   		leal	65(%rax), %esi
 3092 2b44 488B8DB0 		movq	-3664(%rbp), %rcx
 3092      F1FFFF
 3093 2b4b 488B8598 		movq	-3688(%rbp), %rax
 3093      F1FFFF
 3094 2b52 4989F9   		movq	%rdi, %r9
 3095 2b55 4989C8   		movq	%rcx, %r8
 3096 2b58 89D1     		movl	%edx, %ecx
 3097 2b5a 89F2     		movl	%esi, %edx
 3098 2b5c 488D3500 		leaq	.LC27(%rip), %rsi
 3098      000000
 3099 2b63 4889C7   		movq	%rax, %rdi
 3100 2b66 B8000000 		movl	$0, %eax
 3100      00
 3101 2b6b E8000000 		call	errRender@PLT
 3101      00
 3102 2b70 C785CCF1 		movl	$11, -3636(%rbp)
 3102      FFFF0B00 
 3102      0000
 3103 2b7a E9AC0F00 		jmp	.L157
 3103      00
 3104              	.L165:
 3105              		.loc 2 481 0 discriminator 2
 3106 2b7f 0FB695C4 		movzbl	-3644(%rbp), %edx
 3106      F1FFFF
 3107 2b86 0FB685C5 		movzbl	-3643(%rbp), %eax
 3107      F1FFFF
 3108 2b8d 4898     		cltq
 3109 2b8f 4863D2   		movslq	%edx, %rdx
 3110 2b92 48C1E205 		salq	$5, %rdx
 3111 2b96 4801D0   		addq	%rdx, %rax
 3112 2b99 C78485E0 		movl	$2, -3616(%rbp,%rax,4)
 3112      F1FFFF02 
 3112      000000
 482:prog.c        **** 
 483:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, ncfgPort, ncfgBit, PIN_LOW, NULL, error); // nCONFIG is lo
 3113              		.loc 2 483 0 is_stmt 1 discriminator 2
 3114 2ba4 0FB695C5 		movzbl	-3643(%rbp), %edx
 3114      F1FFFF
 3115 2bab 0FB6B5C4 		movzbl	-3644(%rbp), %esi
 3115      F1FFFF
 3116 2bb2 488B8D98 		movq	-3688(%rbp), %rcx
 3116      F1FFFF
 3117 2bb9 488B85B8 		movq	-3656(%rbp), %rax
 3117      F1FFFF
 3118 2bc0 4989C9   		movq	%rcx, %r9
 3119 2bc3 41B80000 		movl	$0, %r8d
 3119      0000
 3120 2bc9 B9020000 		movl	$2, %ecx
 3120      00
 3121 2bce 4889C7   		movq	%rax, %rdi
 3122 2bd1 E8000000 		call	flSingleBitPortAccess@PLT
 3122      00
 3123 2bd6 8985D0F1 		movl	%eax, -3632(%rbp)
 3123      FFFF
 484:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3124              		.loc 2 484 0 discriminator 2
 3125 2bdc 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3125      FFFF00
 3126 2be3 7427     		je	.L166
 3127              		.loc 2 484 0 is_stmt 0 discriminator 1
 3128 2be5 488B8598 		movq	-3688(%rbp), %rax
 3128      F1FFFF
 3129 2bec 488D3500 		leaq	.LC28(%rip), %rsi
 3129      000000
 3130 2bf3 4889C7   		movq	%rax, %rdi
 3131 2bf6 E8000000 		call	errPrefix@PLT
 3131      00
 3132 2bfb 8B85D0F1 		movl	-3632(%rbp), %eax
 3132      FFFF
 3133 2c01 8985CCF1 		movl	%eax, -3636(%rbp)
 3133      FFFF
 3134 2c07 E91F0F00 		jmp	.L157
 3134      00
 3135              	.L166:
 485:prog.c        **** 
 486:prog.c        **** 	GET_PAIR(donePort, doneBit, "aProgram");
 3136              		.loc 2 486 0 is_stmt 1
 3137 2c0c 488B85D8 		movq	-3624(%rbp), %rax
 3137      F1FFFF
 3138 2c13 0FB600   		movzbl	(%rax), %eax
 3139 2c16 8885C3F1 		movb	%al, -3645(%rbp)
 3139      FFFF
 3140 2c1c 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3140      FFFF00
 3141 2c23 7553     		jne	.L167
 3142              		.loc 2 486 0 is_stmt 0 discriminator 1
 3143 2c25 488B85D8 		movq	-3624(%rbp), %rax
 3143      F1FFFF
 3144 2c2c 4889C2   		movq	%rax, %rdx
 3145 2c2f 488B85B0 		movq	-3664(%rbp), %rax
 3145      F1FFFF
 3146 2c36 4829C2   		subq	%rax, %rdx
 3147 2c39 4889D0   		movq	%rdx, %rax
 3148 2c3c 4889C7   		movq	%rax, %rdi
 3149 2c3f E86CD5FF 		call	spaces
 3149      FF
 3150 2c44 4889C1   		movq	%rax, %rcx
 3151 2c47 488B95B0 		movq	-3664(%rbp), %rdx
 3151      F1FFFF
 3152 2c4e 488B8598 		movq	-3688(%rbp), %rax
 3152      F1FFFF
 3153 2c55 488D3500 		leaq	.LC23(%rip), %rsi
 3153      000000
 3154 2c5c 4889C7   		movq	%rax, %rdi
 3155 2c5f B8000000 		movl	$0, %eax
 3155      00
 3156 2c64 E8000000 		call	errRender@PLT
 3156      00
 3157 2c69 C785CCF1 		movl	$11, -3636(%rbp)
 3157      FFFF0B00 
 3157      0000
 3158 2c73 E9B30E00 		jmp	.L157
 3158      00
 3159              	.L167:
 3160              		.loc 2 486 0 discriminator 2
 3161 2c78 80BDC3F1 		cmpb	$64, -3645(%rbp)
 3161      FFFF40
 3162 2c7f 7E09     		jle	.L168
 3163              		.loc 2 486 0 discriminator 4
 3164 2c81 80BDC3F1 		cmpb	$90, -3645(%rbp)
 3164      FFFF5A
 3165 2c88 7E53     		jle	.L169
 3166              	.L168:
 3167              		.loc 2 486 0 discriminator 5
 3168 2c8a 488B85D8 		movq	-3624(%rbp), %rax
 3168      F1FFFF
 3169 2c91 4889C2   		movq	%rax, %rdx
 3170 2c94 488B85B0 		movq	-3664(%rbp), %rax
 3170      F1FFFF
 3171 2c9b 4829C2   		subq	%rax, %rdx
 3172 2c9e 4889D0   		movq	%rdx, %rax
 3173 2ca1 4889C7   		movq	%rax, %rdi
 3174 2ca4 E807D5FF 		call	spaces
 3174      FF
 3175 2ca9 4889C1   		movq	%rax, %rcx
 3176 2cac 488B95B0 		movq	-3664(%rbp), %rdx
 3176      F1FFFF
 3177 2cb3 488B8598 		movq	-3688(%rbp), %rax
 3177      F1FFFF
 3178 2cba 488D3500 		leaq	.LC25(%rip), %rsi
 3178      000000
 3179 2cc1 4889C7   		movq	%rax, %rdi
 3180 2cc4 B8000000 		movl	$0, %eax
 3180      00
 3181 2cc9 E8000000 		call	errRender@PLT
 3181      00
 3182 2cce C785CCF1 		movl	$11, -3636(%rbp)
 3182      FFFF0B00 
 3182      0000
 3183 2cd8 E94E0E00 		jmp	.L157
 3183      00
 3184              	.L169:
 3185              		.loc 2 486 0 discriminator 6
 3186 2cdd 0FB685C3 		movzbl	-3645(%rbp), %eax
 3186      F1FFFF
 3187 2ce4 83E841   		subl	$65, %eax
 3188 2ce7 8885C6F1 		movb	%al, -3642(%rbp)
 3188      FFFF
 3189 2ced 488B85D8 		movq	-3624(%rbp), %rax
 3189      F1FFFF
 3190 2cf4 4883C001 		addq	$1, %rax
 3191 2cf8 488985D8 		movq	%rax, -3624(%rbp)
 3191      F1FFFF
 3192 2cff 488B85D8 		movq	-3624(%rbp), %rax
 3192      F1FFFF
 3193 2d06 0FB600   		movzbl	(%rax), %eax
 3194 2d09 8885C3F1 		movb	%al, -3645(%rbp)
 3194      FFFF
 3195 2d0f 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3195      FFFF00
 3196 2d16 7553     		jne	.L170
 3197              		.loc 2 486 0 discriminator 7
 3198 2d18 488B85D8 		movq	-3624(%rbp), %rax
 3198      F1FFFF
 3199 2d1f 4889C2   		movq	%rax, %rdx
 3200 2d22 488B85B0 		movq	-3664(%rbp), %rax
 3200      F1FFFF
 3201 2d29 4829C2   		subq	%rax, %rdx
 3202 2d2c 4889D0   		movq	%rdx, %rax
 3203 2d2f 4889C7   		movq	%rax, %rdi
 3204 2d32 E879D4FF 		call	spaces
 3204      FF
 3205 2d37 4889C1   		movq	%rax, %rcx
 3206 2d3a 488B95B0 		movq	-3664(%rbp), %rdx
 3206      F1FFFF
 3207 2d41 488B8598 		movq	-3688(%rbp), %rax
 3207      F1FFFF
 3208 2d48 488D3500 		leaq	.LC23(%rip), %rsi
 3208      000000
 3209 2d4f 4889C7   		movq	%rax, %rdi
 3210 2d52 B8000000 		movl	$0, %eax
 3210      00
 3211 2d57 E8000000 		call	errRender@PLT
 3211      00
 3212 2d5c C785CCF1 		movl	$11, -3636(%rbp)
 3212      FFFF0B00 
 3212      0000
 3213 2d66 E9C00D00 		jmp	.L157
 3213      00
 3214              	.L170:
 3215              		.loc 2 486 0 discriminator 8
 3216 2d6b 80BDC3F1 		cmpb	$47, -3645(%rbp)
 3216      FFFF2F
 3217 2d72 7E09     		jle	.L171
 3218              		.loc 2 486 0 discriminator 10
 3219 2d74 80BDC3F1 		cmpb	$57, -3645(%rbp)
 3219      FFFF39
 3220 2d7b 7E53     		jle	.L172
 3221              	.L171:
 3222              		.loc 2 486 0 discriminator 11
 3223 2d7d 488B85D8 		movq	-3624(%rbp), %rax
 3223      F1FFFF
 3224 2d84 4889C2   		movq	%rax, %rdx
 3225 2d87 488B85B0 		movq	-3664(%rbp), %rax
 3225      F1FFFF
 3226 2d8e 4829C2   		subq	%rax, %rdx
 3227 2d91 4889D0   		movq	%rdx, %rax
 3228 2d94 4889C7   		movq	%rax, %rdi
 3229 2d97 E814D4FF 		call	spaces
 3229      FF
 3230 2d9c 4889C1   		movq	%rax, %rcx
 3231 2d9f 488B95B0 		movq	-3664(%rbp), %rdx
 3231      F1FFFF
 3232 2da6 488B8598 		movq	-3688(%rbp), %rax
 3232      F1FFFF
 3233 2dad 488D3500 		leaq	.LC26(%rip), %rsi
 3233      000000
 3234 2db4 4889C7   		movq	%rax, %rdi
 3235 2db7 B8000000 		movl	$0, %eax
 3235      00
 3236 2dbc E8000000 		call	errRender@PLT
 3236      00
 3237 2dc1 C785CCF1 		movl	$11, -3636(%rbp)
 3237      FFFF0B00 
 3237      0000
 3238 2dcb E95B0D00 		jmp	.L157
 3238      00
 3239              	.L172:
 3240              		.loc 2 486 0 discriminator 12
 3241 2dd0 488B85D8 		movq	-3624(%rbp), %rax
 3241      F1FFFF
 3242 2dd7 488D8DD8 		leaq	-3624(%rbp), %rcx
 3242      F1FFFF
 3243 2dde BA0A0000 		movl	$10, %edx
 3243      00
 3244 2de3 4889CE   		movq	%rcx, %rsi
 3245 2de6 4889C7   		movq	%rax, %rdi
 3246 2de9 E8000000 		call	strtoul@PLT
 3246      00
 3247 2dee 8885C7F1 		movb	%al, -3641(%rbp)
 3247      FFFF
 487:prog.c        **** 	SET_BIT(donePort, doneBit, PIN_INPUT, "aProgram");
 3248              		.loc 2 487 0 is_stmt 1 discriminator 12
 3249 2df4 0FB695C6 		movzbl	-3642(%rbp), %edx
 3249      F1FFFF
 3250 2dfb 0FB685C7 		movzbl	-3641(%rbp), %eax
 3250      F1FFFF
 3251 2e02 4898     		cltq
 3252 2e04 4863D2   		movslq	%edx, %rdx
 3253 2e07 48C1E205 		salq	$5, %rdx
 3254 2e0b 4801D0   		addq	%rdx, %rax
 3255 2e0e 8B8485E0 		movl	-3616(%rbp,%rax,4), %eax
 3255      F1FFFF
 3256 2e15 85C0     		testl	%eax, %eax
 3257 2e17 7472     		je	.L173
 3258              		.loc 2 487 0 is_stmt 0 discriminator 1
 3259 2e19 488B85D8 		movq	-3624(%rbp), %rax
 3259      F1FFFF
 3260 2e20 4889C2   		movq	%rax, %rdx
 3261 2e23 488B85B0 		movq	-3664(%rbp), %rax
 3261      F1FFFF
 3262 2e2a 4829C2   		subq	%rax, %rdx
 3263 2e2d 4889D0   		movq	%rdx, %rax
 3264 2e30 4883E801 		subq	$1, %rax
 3265 2e34 4889C7   		movq	%rax, %rdi
 3266 2e37 E874D3FF 		call	spaces
 3266      FF
 3267 2e3c 4889C7   		movq	%rax, %rdi
 3268 2e3f 0FB695C7 		movzbl	-3641(%rbp), %edx
 3268      F1FFFF
 3269 2e46 0FB685C6 		movzbl	-3642(%rbp), %eax
 3269      F1FFFF
 3270 2e4d 8D7041   		leal	65(%rax), %esi
 3271 2e50 488B8DB0 		movq	-3664(%rbp), %rcx
 3271      F1FFFF
 3272 2e57 488B8598 		movq	-3688(%rbp), %rax
 3272      F1FFFF
 3273 2e5e 4989F9   		movq	%rdi, %r9
 3274 2e61 4989C8   		movq	%rcx, %r8
 3275 2e64 89D1     		movl	%edx, %ecx
 3276 2e66 89F2     		movl	%esi, %edx
 3277 2e68 488D3500 		leaq	.LC27(%rip), %rsi
 3277      000000
 3278 2e6f 4889C7   		movq	%rax, %rdi
 3279 2e72 B8000000 		movl	$0, %eax
 3279      00
 3280 2e77 E8000000 		call	errRender@PLT
 3280      00
 3281 2e7c C785CCF1 		movl	$11, -3636(%rbp)
 3281      FFFF0B00 
 3281      0000
 3282 2e86 E9A00C00 		jmp	.L157
 3282      00
 3283              	.L173:
 3284              		.loc 2 487 0 discriminator 2
 3285 2e8b 0FB695C6 		movzbl	-3642(%rbp), %edx
 3285      F1FFFF
 3286 2e92 0FB685C7 		movzbl	-3641(%rbp), %eax
 3286      F1FFFF
 3287 2e99 4898     		cltq
 3288 2e9b 4863D2   		movslq	%edx, %rdx
 3289 2e9e 48C1E205 		salq	$5, %rdx
 3290 2ea2 4801D0   		addq	%rdx, %rax
 3291 2ea5 C78485E0 		movl	$3, -3616(%rbp,%rax,4)
 3291      F1FFFF03 
 3291      000000
 488:prog.c        **** 
 489:prog.c        **** 	GET_PAIR(dclkPort, dclkBit, "aProgram");
 3292              		.loc 2 489 0 is_stmt 1 discriminator 2
 3293 2eb0 488B85D8 		movq	-3624(%rbp), %rax
 3293      F1FFFF
 3294 2eb7 0FB600   		movzbl	(%rax), %eax
 3295 2eba 8885C3F1 		movb	%al, -3645(%rbp)
 3295      FFFF
 3296 2ec0 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3296      FFFF00
 3297 2ec7 7553     		jne	.L174
 3298              		.loc 2 489 0 is_stmt 0 discriminator 1
 3299 2ec9 488B85D8 		movq	-3624(%rbp), %rax
 3299      F1FFFF
 3300 2ed0 4889C2   		movq	%rax, %rdx
 3301 2ed3 488B85B0 		movq	-3664(%rbp), %rax
 3301      F1FFFF
 3302 2eda 4829C2   		subq	%rax, %rdx
 3303 2edd 4889D0   		movq	%rdx, %rax
 3304 2ee0 4889C7   		movq	%rax, %rdi
 3305 2ee3 E8C8D2FF 		call	spaces
 3305      FF
 3306 2ee8 4889C1   		movq	%rax, %rcx
 3307 2eeb 488B95B0 		movq	-3664(%rbp), %rdx
 3307      F1FFFF
 3308 2ef2 488B8598 		movq	-3688(%rbp), %rax
 3308      F1FFFF
 3309 2ef9 488D3500 		leaq	.LC23(%rip), %rsi
 3309      000000
 3310 2f00 4889C7   		movq	%rax, %rdi
 3311 2f03 B8000000 		movl	$0, %eax
 3311      00
 3312 2f08 E8000000 		call	errRender@PLT
 3312      00
 3313 2f0d C785CCF1 		movl	$11, -3636(%rbp)
 3313      FFFF0B00 
 3313      0000
 3314 2f17 E90F0C00 		jmp	.L157
 3314      00
 3315              	.L174:
 3316              		.loc 2 489 0 discriminator 2
 3317 2f1c 80BDC3F1 		cmpb	$64, -3645(%rbp)
 3317      FFFF40
 3318 2f23 7E09     		jle	.L175
 3319              		.loc 2 489 0 discriminator 4
 3320 2f25 80BDC3F1 		cmpb	$90, -3645(%rbp)
 3320      FFFF5A
 3321 2f2c 7E53     		jle	.L176
 3322              	.L175:
 3323              		.loc 2 489 0 discriminator 5
 3324 2f2e 488B85D8 		movq	-3624(%rbp), %rax
 3324      F1FFFF
 3325 2f35 4889C2   		movq	%rax, %rdx
 3326 2f38 488B85B0 		movq	-3664(%rbp), %rax
 3326      F1FFFF
 3327 2f3f 4829C2   		subq	%rax, %rdx
 3328 2f42 4889D0   		movq	%rdx, %rax
 3329 2f45 4889C7   		movq	%rax, %rdi
 3330 2f48 E863D2FF 		call	spaces
 3330      FF
 3331 2f4d 4889C1   		movq	%rax, %rcx
 3332 2f50 488B95B0 		movq	-3664(%rbp), %rdx
 3332      F1FFFF
 3333 2f57 488B8598 		movq	-3688(%rbp), %rax
 3333      F1FFFF
 3334 2f5e 488D3500 		leaq	.LC25(%rip), %rsi
 3334      000000
 3335 2f65 4889C7   		movq	%rax, %rdi
 3336 2f68 B8000000 		movl	$0, %eax
 3336      00
 3337 2f6d E8000000 		call	errRender@PLT
 3337      00
 3338 2f72 C785CCF1 		movl	$11, -3636(%rbp)
 3338      FFFF0B00 
 3338      0000
 3339 2f7c E9AA0B00 		jmp	.L157
 3339      00
 3340              	.L176:
 3341              		.loc 2 489 0 discriminator 6
 3342 2f81 0FB685C3 		movzbl	-3645(%rbp), %eax
 3342      F1FFFF
 3343 2f88 83E841   		subl	$65, %eax
 3344 2f8b 8885C8F1 		movb	%al, -3640(%rbp)
 3344      FFFF
 3345 2f91 488B85D8 		movq	-3624(%rbp), %rax
 3345      F1FFFF
 3346 2f98 4883C001 		addq	$1, %rax
 3347 2f9c 488985D8 		movq	%rax, -3624(%rbp)
 3347      F1FFFF
 3348 2fa3 488B85D8 		movq	-3624(%rbp), %rax
 3348      F1FFFF
 3349 2faa 0FB600   		movzbl	(%rax), %eax
 3350 2fad 8885C3F1 		movb	%al, -3645(%rbp)
 3350      FFFF
 3351 2fb3 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3351      FFFF00
 3352 2fba 7553     		jne	.L177
 3353              		.loc 2 489 0 discriminator 7
 3354 2fbc 488B85D8 		movq	-3624(%rbp), %rax
 3354      F1FFFF
 3355 2fc3 4889C2   		movq	%rax, %rdx
 3356 2fc6 488B85B0 		movq	-3664(%rbp), %rax
 3356      F1FFFF
 3357 2fcd 4829C2   		subq	%rax, %rdx
 3358 2fd0 4889D0   		movq	%rdx, %rax
 3359 2fd3 4889C7   		movq	%rax, %rdi
 3360 2fd6 E8D5D1FF 		call	spaces
 3360      FF
 3361 2fdb 4889C1   		movq	%rax, %rcx
 3362 2fde 488B95B0 		movq	-3664(%rbp), %rdx
 3362      F1FFFF
 3363 2fe5 488B8598 		movq	-3688(%rbp), %rax
 3363      F1FFFF
 3364 2fec 488D3500 		leaq	.LC23(%rip), %rsi
 3364      000000
 3365 2ff3 4889C7   		movq	%rax, %rdi
 3366 2ff6 B8000000 		movl	$0, %eax
 3366      00
 3367 2ffb E8000000 		call	errRender@PLT
 3367      00
 3368 3000 C785CCF1 		movl	$11, -3636(%rbp)
 3368      FFFF0B00 
 3368      0000
 3369 300a E91C0B00 		jmp	.L157
 3369      00
 3370              	.L177:
 3371              		.loc 2 489 0 discriminator 8
 3372 300f 80BDC3F1 		cmpb	$47, -3645(%rbp)
 3372      FFFF2F
 3373 3016 7E09     		jle	.L178
 3374              		.loc 2 489 0 discriminator 10
 3375 3018 80BDC3F1 		cmpb	$57, -3645(%rbp)
 3375      FFFF39
 3376 301f 7E53     		jle	.L179
 3377              	.L178:
 3378              		.loc 2 489 0 discriminator 11
 3379 3021 488B85D8 		movq	-3624(%rbp), %rax
 3379      F1FFFF
 3380 3028 4889C2   		movq	%rax, %rdx
 3381 302b 488B85B0 		movq	-3664(%rbp), %rax
 3381      F1FFFF
 3382 3032 4829C2   		subq	%rax, %rdx
 3383 3035 4889D0   		movq	%rdx, %rax
 3384 3038 4889C7   		movq	%rax, %rdi
 3385 303b E870D1FF 		call	spaces
 3385      FF
 3386 3040 4889C1   		movq	%rax, %rcx
 3387 3043 488B95B0 		movq	-3664(%rbp), %rdx
 3387      F1FFFF
 3388 304a 488B8598 		movq	-3688(%rbp), %rax
 3388      F1FFFF
 3389 3051 488D3500 		leaq	.LC26(%rip), %rsi
 3389      000000
 3390 3058 4889C7   		movq	%rax, %rdi
 3391 305b B8000000 		movl	$0, %eax
 3391      00
 3392 3060 E8000000 		call	errRender@PLT
 3392      00
 3393 3065 C785CCF1 		movl	$11, -3636(%rbp)
 3393      FFFF0B00 
 3393      0000
 3394 306f E9B70A00 		jmp	.L157
 3394      00
 3395              	.L179:
 3396              		.loc 2 489 0 discriminator 12
 3397 3074 488B85D8 		movq	-3624(%rbp), %rax
 3397      F1FFFF
 3398 307b 488D8DD8 		leaq	-3624(%rbp), %rcx
 3398      F1FFFF
 3399 3082 BA0A0000 		movl	$10, %edx
 3399      00
 3400 3087 4889CE   		movq	%rcx, %rsi
 3401 308a 4889C7   		movq	%rax, %rdi
 3402 308d E8000000 		call	strtoul@PLT
 3402      00
 3403 3092 8885C9F1 		movb	%al, -3639(%rbp)
 3403      FFFF
 490:prog.c        **** 	SET_BIT(dclkPort, dclkBit, PIN_LOW, "aProgram");
 3404              		.loc 2 490 0 is_stmt 1 discriminator 12
 3405 3098 0FB695C8 		movzbl	-3640(%rbp), %edx
 3405      F1FFFF
 3406 309f 0FB685C9 		movzbl	-3639(%rbp), %eax
 3406      F1FFFF
 3407 30a6 4898     		cltq
 3408 30a8 4863D2   		movslq	%edx, %rdx
 3409 30ab 48C1E205 		salq	$5, %rdx
 3410 30af 4801D0   		addq	%rdx, %rax
 3411 30b2 8B8485E0 		movl	-3616(%rbp,%rax,4), %eax
 3411      F1FFFF
 3412 30b9 85C0     		testl	%eax, %eax
 3413 30bb 7472     		je	.L180
 3414              		.loc 2 490 0 is_stmt 0 discriminator 1
 3415 30bd 488B85D8 		movq	-3624(%rbp), %rax
 3415      F1FFFF
 3416 30c4 4889C2   		movq	%rax, %rdx
 3417 30c7 488B85B0 		movq	-3664(%rbp), %rax
 3417      F1FFFF
 3418 30ce 4829C2   		subq	%rax, %rdx
 3419 30d1 4889D0   		movq	%rdx, %rax
 3420 30d4 4883E801 		subq	$1, %rax
 3421 30d8 4889C7   		movq	%rax, %rdi
 3422 30db E8D0D0FF 		call	spaces
 3422      FF
 3423 30e0 4889C7   		movq	%rax, %rdi
 3424 30e3 0FB695C9 		movzbl	-3639(%rbp), %edx
 3424      F1FFFF
 3425 30ea 0FB685C8 		movzbl	-3640(%rbp), %eax
 3425      F1FFFF
 3426 30f1 8D7041   		leal	65(%rax), %esi
 3427 30f4 488B8DB0 		movq	-3664(%rbp), %rcx
 3427      F1FFFF
 3428 30fb 488B8598 		movq	-3688(%rbp), %rax
 3428      F1FFFF
 3429 3102 4989F9   		movq	%rdi, %r9
 3430 3105 4989C8   		movq	%rcx, %r8
 3431 3108 89D1     		movl	%edx, %ecx
 3432 310a 89F2     		movl	%esi, %edx
 3433 310c 488D3500 		leaq	.LC27(%rip), %rsi
 3433      000000
 3434 3113 4889C7   		movq	%rax, %rdi
 3435 3116 B8000000 		movl	$0, %eax
 3435      00
 3436 311b E8000000 		call	errRender@PLT
 3436      00
 3437 3120 C785CCF1 		movl	$11, -3636(%rbp)
 3437      FFFF0B00 
 3437      0000
 3438 312a E9FC0900 		jmp	.L157
 3438      00
 3439              	.L180:
 3440              		.loc 2 490 0 discriminator 2
 3441 312f 0FB695C8 		movzbl	-3640(%rbp), %edx
 3441      F1FFFF
 3442 3136 0FB685C9 		movzbl	-3639(%rbp), %eax
 3442      F1FFFF
 3443 313d 4898     		cltq
 3444 313f 4863D2   		movslq	%edx, %rdx
 3445 3142 48C1E205 		salq	$5, %rdx
 3446 3146 4801D0   		addq	%rdx, %rax
 3447 3149 C78485E0 		movl	$2, -3616(%rbp,%rax,4)
 3447      F1FFFF02 
 3447      000000
 491:prog.c        **** 
 492:prog.c        **** 	GET_PAIR(dataPort, dataBit, "aProgram");
 3448              		.loc 2 492 0 is_stmt 1 discriminator 2
 3449 3154 488B85D8 		movq	-3624(%rbp), %rax
 3449      F1FFFF
 3450 315b 0FB600   		movzbl	(%rax), %eax
 3451 315e 8885C3F1 		movb	%al, -3645(%rbp)
 3451      FFFF
 3452 3164 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3452      FFFF00
 3453 316b 7553     		jne	.L181
 3454              		.loc 2 492 0 is_stmt 0 discriminator 1
 3455 316d 488B85D8 		movq	-3624(%rbp), %rax
 3455      F1FFFF
 3456 3174 4889C2   		movq	%rax, %rdx
 3457 3177 488B85B0 		movq	-3664(%rbp), %rax
 3457      F1FFFF
 3458 317e 4829C2   		subq	%rax, %rdx
 3459 3181 4889D0   		movq	%rdx, %rax
 3460 3184 4889C7   		movq	%rax, %rdi
 3461 3187 E824D0FF 		call	spaces
 3461      FF
 3462 318c 4889C1   		movq	%rax, %rcx
 3463 318f 488B95B0 		movq	-3664(%rbp), %rdx
 3463      F1FFFF
 3464 3196 488B8598 		movq	-3688(%rbp), %rax
 3464      F1FFFF
 3465 319d 488D3500 		leaq	.LC23(%rip), %rsi
 3465      000000
 3466 31a4 4889C7   		movq	%rax, %rdi
 3467 31a7 B8000000 		movl	$0, %eax
 3467      00
 3468 31ac E8000000 		call	errRender@PLT
 3468      00
 3469 31b1 C785CCF1 		movl	$11, -3636(%rbp)
 3469      FFFF0B00 
 3469      0000
 3470 31bb E96B0900 		jmp	.L157
 3470      00
 3471              	.L181:
 3472              		.loc 2 492 0 discriminator 2
 3473 31c0 80BDC3F1 		cmpb	$64, -3645(%rbp)
 3473      FFFF40
 3474 31c7 7E09     		jle	.L182
 3475              		.loc 2 492 0 discriminator 4
 3476 31c9 80BDC3F1 		cmpb	$90, -3645(%rbp)
 3476      FFFF5A
 3477 31d0 7E53     		jle	.L183
 3478              	.L182:
 3479              		.loc 2 492 0 discriminator 5
 3480 31d2 488B85D8 		movq	-3624(%rbp), %rax
 3480      F1FFFF
 3481 31d9 4889C2   		movq	%rax, %rdx
 3482 31dc 488B85B0 		movq	-3664(%rbp), %rax
 3482      F1FFFF
 3483 31e3 4829C2   		subq	%rax, %rdx
 3484 31e6 4889D0   		movq	%rdx, %rax
 3485 31e9 4889C7   		movq	%rax, %rdi
 3486 31ec E8BFCFFF 		call	spaces
 3486      FF
 3487 31f1 4889C1   		movq	%rax, %rcx
 3488 31f4 488B95B0 		movq	-3664(%rbp), %rdx
 3488      F1FFFF
 3489 31fb 488B8598 		movq	-3688(%rbp), %rax
 3489      F1FFFF
 3490 3202 488D3500 		leaq	.LC25(%rip), %rsi
 3490      000000
 3491 3209 4889C7   		movq	%rax, %rdi
 3492 320c B8000000 		movl	$0, %eax
 3492      00
 3493 3211 E8000000 		call	errRender@PLT
 3493      00
 3494 3216 C785CCF1 		movl	$11, -3636(%rbp)
 3494      FFFF0B00 
 3494      0000
 3495 3220 E9060900 		jmp	.L157
 3495      00
 3496              	.L183:
 3497              		.loc 2 492 0 discriminator 6
 3498 3225 0FB685C3 		movzbl	-3645(%rbp), %eax
 3498      F1FFFF
 3499 322c 83E841   		subl	$65, %eax
 3500 322f 8885CAF1 		movb	%al, -3638(%rbp)
 3500      FFFF
 3501 3235 488B85D8 		movq	-3624(%rbp), %rax
 3501      F1FFFF
 3502 323c 4883C001 		addq	$1, %rax
 3503 3240 488985D8 		movq	%rax, -3624(%rbp)
 3503      F1FFFF
 3504 3247 488B85D8 		movq	-3624(%rbp), %rax
 3504      F1FFFF
 3505 324e 0FB600   		movzbl	(%rax), %eax
 3506 3251 8885C3F1 		movb	%al, -3645(%rbp)
 3506      FFFF
 3507 3257 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3507      FFFF00
 3508 325e 7553     		jne	.L184
 3509              		.loc 2 492 0 discriminator 7
 3510 3260 488B85D8 		movq	-3624(%rbp), %rax
 3510      F1FFFF
 3511 3267 4889C2   		movq	%rax, %rdx
 3512 326a 488B85B0 		movq	-3664(%rbp), %rax
 3512      F1FFFF
 3513 3271 4829C2   		subq	%rax, %rdx
 3514 3274 4889D0   		movq	%rdx, %rax
 3515 3277 4889C7   		movq	%rax, %rdi
 3516 327a E831CFFF 		call	spaces
 3516      FF
 3517 327f 4889C1   		movq	%rax, %rcx
 3518 3282 488B95B0 		movq	-3664(%rbp), %rdx
 3518      F1FFFF
 3519 3289 488B8598 		movq	-3688(%rbp), %rax
 3519      F1FFFF
 3520 3290 488D3500 		leaq	.LC23(%rip), %rsi
 3520      000000
 3521 3297 4889C7   		movq	%rax, %rdi
 3522 329a B8000000 		movl	$0, %eax
 3522      00
 3523 329f E8000000 		call	errRender@PLT
 3523      00
 3524 32a4 C785CCF1 		movl	$11, -3636(%rbp)
 3524      FFFF0B00 
 3524      0000
 3525 32ae E9780800 		jmp	.L157
 3525      00
 3526              	.L184:
 3527              		.loc 2 492 0 discriminator 8
 3528 32b3 80BDC3F1 		cmpb	$47, -3645(%rbp)
 3528      FFFF2F
 3529 32ba 7E09     		jle	.L185
 3530              		.loc 2 492 0 discriminator 10
 3531 32bc 80BDC3F1 		cmpb	$57, -3645(%rbp)
 3531      FFFF39
 3532 32c3 7E53     		jle	.L186
 3533              	.L185:
 3534              		.loc 2 492 0 discriminator 11
 3535 32c5 488B85D8 		movq	-3624(%rbp), %rax
 3535      F1FFFF
 3536 32cc 4889C2   		movq	%rax, %rdx
 3537 32cf 488B85B0 		movq	-3664(%rbp), %rax
 3537      F1FFFF
 3538 32d6 4829C2   		subq	%rax, %rdx
 3539 32d9 4889D0   		movq	%rdx, %rax
 3540 32dc 4889C7   		movq	%rax, %rdi
 3541 32df E8CCCEFF 		call	spaces
 3541      FF
 3542 32e4 4889C1   		movq	%rax, %rcx
 3543 32e7 488B95B0 		movq	-3664(%rbp), %rdx
 3543      F1FFFF
 3544 32ee 488B8598 		movq	-3688(%rbp), %rax
 3544      F1FFFF
 3545 32f5 488D3500 		leaq	.LC26(%rip), %rsi
 3545      000000
 3546 32fc 4889C7   		movq	%rax, %rdi
 3547 32ff B8000000 		movl	$0, %eax
 3547      00
 3548 3304 E8000000 		call	errRender@PLT
 3548      00
 3549 3309 C785CCF1 		movl	$11, -3636(%rbp)
 3549      FFFF0B00 
 3549      0000
 3550 3313 E9130800 		jmp	.L157
 3550      00
 3551              	.L186:
 3552              		.loc 2 492 0 discriminator 12
 3553 3318 488B85D8 		movq	-3624(%rbp), %rax
 3553      F1FFFF
 3554 331f 488D8DD8 		leaq	-3624(%rbp), %rcx
 3554      F1FFFF
 3555 3326 BA0A0000 		movl	$10, %edx
 3555      00
 3556 332b 4889CE   		movq	%rcx, %rsi
 3557 332e 4889C7   		movq	%rax, %rdi
 3558 3331 E8000000 		call	strtoul@PLT
 3558      00
 3559 3336 8885CBF1 		movb	%al, -3637(%rbp)
 3559      FFFF
 493:prog.c        **** 	SET_BIT(dataPort, dataBit, PIN_LOW, "aProgram");
 3560              		.loc 2 493 0 is_stmt 1 discriminator 12
 3561 333c 0FB695CA 		movzbl	-3638(%rbp), %edx
 3561      F1FFFF
 3562 3343 0FB685CB 		movzbl	-3637(%rbp), %eax
 3562      F1FFFF
 3563 334a 4898     		cltq
 3564 334c 4863D2   		movslq	%edx, %rdx
 3565 334f 48C1E205 		salq	$5, %rdx
 3566 3353 4801D0   		addq	%rdx, %rax
 3567 3356 8B8485E0 		movl	-3616(%rbp,%rax,4), %eax
 3567      F1FFFF
 3568 335d 85C0     		testl	%eax, %eax
 3569 335f 7472     		je	.L187
 3570              		.loc 2 493 0 is_stmt 0 discriminator 1
 3571 3361 488B85D8 		movq	-3624(%rbp), %rax
 3571      F1FFFF
 3572 3368 4889C2   		movq	%rax, %rdx
 3573 336b 488B85B0 		movq	-3664(%rbp), %rax
 3573      F1FFFF
 3574 3372 4829C2   		subq	%rax, %rdx
 3575 3375 4889D0   		movq	%rdx, %rax
 3576 3378 4883E801 		subq	$1, %rax
 3577 337c 4889C7   		movq	%rax, %rdi
 3578 337f E82CCEFF 		call	spaces
 3578      FF
 3579 3384 4889C7   		movq	%rax, %rdi
 3580 3387 0FB695CB 		movzbl	-3637(%rbp), %edx
 3580      F1FFFF
 3581 338e 0FB685CA 		movzbl	-3638(%rbp), %eax
 3581      F1FFFF
 3582 3395 8D7041   		leal	65(%rax), %esi
 3583 3398 488B8DB0 		movq	-3664(%rbp), %rcx
 3583      F1FFFF
 3584 339f 488B8598 		movq	-3688(%rbp), %rax
 3584      F1FFFF
 3585 33a6 4989F9   		movq	%rdi, %r9
 3586 33a9 4989C8   		movq	%rcx, %r8
 3587 33ac 89D1     		movl	%edx, %ecx
 3588 33ae 89F2     		movl	%esi, %edx
 3589 33b0 488D3500 		leaq	.LC27(%rip), %rsi
 3589      000000
 3590 33b7 4889C7   		movq	%rax, %rdi
 3591 33ba B8000000 		movl	$0, %eax
 3591      00
 3592 33bf E8000000 		call	errRender@PLT
 3592      00
 3593 33c4 C785CCF1 		movl	$11, -3636(%rbp)
 3593      FFFF0B00 
 3593      0000
 3594 33ce E9580700 		jmp	.L157
 3594      00
 3595              	.L187:
 3596              		.loc 2 493 0 discriminator 2
 3597 33d3 0FB695CA 		movzbl	-3638(%rbp), %edx
 3597      F1FFFF
 3598 33da 0FB685CB 		movzbl	-3637(%rbp), %eax
 3598      F1FFFF
 3599 33e1 4898     		cltq
 3600 33e3 4863D2   		movslq	%edx, %rdx
 3601 33e6 48C1E205 		salq	$5, %rdx
 3602 33ea 4801D0   		addq	%rdx, %rax
 3603 33ed C78485E0 		movl	$2, -3616(%rbp,%rax,4)
 3603      F1FFFF02 
 3603      000000
 494:prog.c        **** 
 495:prog.c        **** 	GET_CHAR("aProgram");
 3604              		.loc 2 495 0 is_stmt 1 discriminator 2
 3605 33f8 488B85D8 		movq	-3624(%rbp), %rax
 3605      F1FFFF
 3606 33ff 0FB600   		movzbl	(%rax), %eax
 3607 3402 8885C3F1 		movb	%al, -3645(%rbp)
 3607      FFFF
 3608 3408 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3608      FFFF00
 3609 340f 7553     		jne	.L188
 3610              		.loc 2 495 0 is_stmt 0 discriminator 1
 3611 3411 488B85D8 		movq	-3624(%rbp), %rax
 3611      F1FFFF
 3612 3418 4889C2   		movq	%rax, %rdx
 3613 341b 488B85B0 		movq	-3664(%rbp), %rax
 3613      F1FFFF
 3614 3422 4829C2   		subq	%rax, %rdx
 3615 3425 4889D0   		movq	%rdx, %rax
 3616 3428 4889C7   		movq	%rax, %rdi
 3617 342b E880CDFF 		call	spaces
 3617      FF
 3618 3430 4889C1   		movq	%rax, %rcx
 3619 3433 488B95B0 		movq	-3664(%rbp), %rdx
 3619      F1FFFF
 3620 343a 488B8598 		movq	-3688(%rbp), %rax
 3620      F1FFFF
 3621 3441 488D3500 		leaq	.LC23(%rip), %rsi
 3621      000000
 3622 3448 4889C7   		movq	%rax, %rdi
 3623 344b B8000000 		movl	$0, %eax
 3623      00
 3624 3450 E8000000 		call	errRender@PLT
 3624      00
 3625 3455 C785CCF1 		movl	$11, -3636(%rbp)
 3625      FFFF0B00 
 3625      0000
 3626 345f E9C70600 		jmp	.L157
 3626      00
 3627              	.L188:
 496:prog.c        **** 	if ( ch == '[' ) {
 3628              		.loc 2 496 0 is_stmt 1
 3629 3464 80BDC3F1 		cmpb	$91, -3645(%rbp)
 3629      FFFF5B
 3630 346b 0F855001 		jne	.L189
 3630      0000
 497:prog.c        **** 		ptr++;
 3631              		.loc 2 497 0
 3632 3471 488B85D8 		movq	-3624(%rbp), %rax
 3632      F1FFFF
 3633 3478 4883C001 		addq	$1, %rax
 3634 347c 488985D8 		movq	%rax, -3624(%rbp)
 3634      F1FFFF
 498:prog.c        **** 		fStatus = populateMap(portConfig, ptr, &ptr, pinMap, error);
 3635              		.loc 2 498 0
 3636 3483 488BB5D8 		movq	-3624(%rbp), %rsi
 3636      F1FFFF
 3637 348a 488BBD98 		movq	-3688(%rbp), %rdi
 3637      F1FFFF
 3638 3491 488D8DE0 		leaq	-3616(%rbp), %rcx
 3638      F1FFFF
 3639 3498 488D95D8 		leaq	-3624(%rbp), %rdx
 3639      F1FFFF
 3640 349f 488B85B0 		movq	-3664(%rbp), %rax
 3640      F1FFFF
 3641 34a6 4989F8   		movq	%rdi, %r8
 3642 34a9 4889C7   		movq	%rax, %rdi
 3643 34ac E827CDFF 		call	populateMap
 3643      FF
 3644 34b1 8985D0F1 		movl	%eax, -3632(%rbp)
 3644      FFFF
 499:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3645              		.loc 2 499 0
 3646 34b7 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3646      FFFF00
 3647 34be 7427     		je	.L190
 3648              		.loc 2 499 0 is_stmt 0 discriminator 1
 3649 34c0 488B8598 		movq	-3688(%rbp), %rax
 3649      F1FFFF
 3650 34c7 488D3500 		leaq	.LC28(%rip), %rsi
 3650      000000
 3651 34ce 4889C7   		movq	%rax, %rdi
 3652 34d1 E8000000 		call	errPrefix@PLT
 3652      00
 3653 34d6 8B85D0F1 		movl	-3632(%rbp), %eax
 3653      FFFF
 3654 34dc 8985CCF1 		movl	%eax, -3636(%rbp)
 3654      FFFF
 3655 34e2 E9440600 		jmp	.L157
 3655      00
 3656              	.L190:
 500:prog.c        **** 		EXPECT_CHAR(']', "aProgram");
 3657              		.loc 2 500 0 is_stmt 1
 3658 34e7 488B85D8 		movq	-3624(%rbp), %rax
 3658      F1FFFF
 3659 34ee 0FB600   		movzbl	(%rax), %eax
 3660 34f1 8885C3F1 		movb	%al, -3645(%rbp)
 3660      FFFF
 3661 34f7 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3661      FFFF00
 3662 34fe 7553     		jne	.L191
 3663              		.loc 2 500 0 is_stmt 0 discriminator 1
 3664 3500 488B85D8 		movq	-3624(%rbp), %rax
 3664      F1FFFF
 3665 3507 4889C2   		movq	%rax, %rdx
 3666 350a 488B85B0 		movq	-3664(%rbp), %rax
 3666      F1FFFF
 3667 3511 4829C2   		subq	%rax, %rdx
 3668 3514 4889D0   		movq	%rdx, %rax
 3669 3517 4889C7   		movq	%rax, %rdi
 3670 351a E891CCFF 		call	spaces
 3670      FF
 3671 351f 4889C1   		movq	%rax, %rcx
 3672 3522 488B95B0 		movq	-3664(%rbp), %rdx
 3672      F1FFFF
 3673 3529 488B8598 		movq	-3688(%rbp), %rax
 3673      F1FFFF
 3674 3530 488D3500 		leaq	.LC23(%rip), %rsi
 3674      000000
 3675 3537 4889C7   		movq	%rax, %rdi
 3676 353a B8000000 		movl	$0, %eax
 3676      00
 3677 353f E8000000 		call	errRender@PLT
 3677      00
 3678 3544 C785CCF1 		movl	$11, -3636(%rbp)
 3678      FFFF0B00 
 3678      0000
 3679 354e E9D80500 		jmp	.L157
 3679      00
 3680              	.L191:
 3681              		.loc 2 500 0 discriminator 2
 3682 3553 80BDC3F1 		cmpb	$93, -3645(%rbp)
 3682      FFFF5D
 3683 355a 7453     		je	.L192
 3684              		.loc 2 500 0 discriminator 3
 3685 355c 488B85D8 		movq	-3624(%rbp), %rax
 3685      F1FFFF
 3686 3563 4889C2   		movq	%rax, %rdx
 3687 3566 488B85B0 		movq	-3664(%rbp), %rax
 3687      F1FFFF
 3688 356d 4829C2   		subq	%rax, %rdx
 3689 3570 4889D0   		movq	%rdx, %rax
 3690 3573 4889C7   		movq	%rax, %rdi
 3691 3576 E835CCFF 		call	spaces
 3691      FF
 3692 357b 4889C1   		movq	%rax, %rcx
 3693 357e 488B95B0 		movq	-3664(%rbp), %rdx
 3693      F1FFFF
 3694 3585 488B8598 		movq	-3688(%rbp), %rax
 3694      F1FFFF
 3695 358c 488D3500 		leaq	.LC29(%rip), %rsi
 3695      000000
 3696 3593 4889C7   		movq	%rax, %rdi
 3697 3596 B8000000 		movl	$0, %eax
 3697      00
 3698 359b E8000000 		call	errRender@PLT
 3698      00
 3699 35a0 C785CCF1 		movl	$11, -3636(%rbp)
 3699      FFFF0B00 
 3699      0000
 3700 35aa E97C0500 		jmp	.L157
 3700      00
 3701              	.L192:
 3702              		.loc 2 500 0 discriminator 4
 3703 35af 488B85D8 		movq	-3624(%rbp), %rax
 3703      F1FFFF
 3704 35b6 4883C001 		addq	$1, %rax
 3705 35ba 488985D8 		movq	%rax, -3624(%rbp)
 3705      F1FFFF
 3706              	.L189:
 501:prog.c        **** 	}
 502:prog.c        **** 	ch = *ptr;
 3707              		.loc 2 502 0 is_stmt 1
 3708 35c1 488B85D8 		movq	-3624(%rbp), %rax
 3708      F1FFFF
 3709 35c8 0FB600   		movzbl	(%rax), %eax
 3710 35cb 8885C3F1 		movb	%al, -3645(%rbp)
 3710      FFFF
 503:prog.c        **** 	CHECK_STATUS(
 3711              		.loc 2 503 0
 3712 35d1 80BDC3F1 		cmpb	$0, -3645(%rbp)
 3712      FFFF00
 3713 35d8 745C     		je	.L193
 3714              		.loc 2 503 0 is_stmt 0 discriminator 1
 3715 35da 80BDC3F1 		cmpb	$58, -3645(%rbp)
 3715      FFFF3A
 3716 35e1 7453     		je	.L193
 3717              		.loc 2 503 0 discriminator 2
 3718 35e3 488B85D8 		movq	-3624(%rbp), %rax
 3718      F1FFFF
 3719 35ea 4889C2   		movq	%rax, %rdx
 3720 35ed 488B85B0 		movq	-3664(%rbp), %rax
 3720      F1FFFF
 3721 35f4 4829C2   		subq	%rax, %rdx
 3722 35f7 4889D0   		movq	%rdx, %rax
 3723 35fa 4889C7   		movq	%rax, %rdi
 3724 35fd E8AECBFF 		call	spaces
 3724      FF
 3725 3602 4889C1   		movq	%rax, %rcx
 3726 3605 488B95B0 		movq	-3664(%rbp), %rdx
 3726      F1FFFF
 3727 360c 488B8598 		movq	-3688(%rbp), %rax
 3727      F1FFFF
 3728 3613 488D3500 		leaq	.LC30(%rip), %rsi
 3728      000000
 3729 361a 4889C7   		movq	%rax, %rdi
 3730 361d B8000000 		movl	$0, %eax
 3730      00
 3731 3622 E8000000 		call	errRender@PLT
 3731      00
 3732 3627 C785CCF1 		movl	$11, -3636(%rbp)
 3732      FFFF0B00 
 3732      0000
 3733 3631 E9F50400 		jmp	.L157
 3733      00
 3734              	.L193:
 504:prog.c        **** 		ch != '\0' && ch != ':', FL_CONF_FORMAT, cleanup,
 505:prog.c        **** 		"aProgram(): Expecting ':' or end-of-string:\n  %s\n  %s^", portConfig, spaces(ptr-portConfig));
 506:prog.c        **** 
 507:prog.c        **** 	// Make a lookup table to swap the bits
 508:prog.c        **** 	makeLookup(bitOrder, lookupTable);
 3735              		.loc 2 508 0 is_stmt 1
 3736 3636 488D95F0 		leaq	-272(%rbp), %rdx
 3736      FEFFFF
 3737 363d 488D85E0 		leaq	-288(%rbp), %rax
 3737      FEFFFF
 3738 3644 4889D6   		movq	%rdx, %rsi
 3739 3647 4889C7   		movq	%rax, %rdi
 3740 364a E87FD0FF 		call	makeLookup
 3740      FF
 509:prog.c        **** 
 510:prog.c        **** 	// Map DCLK & DATA0
 511:prog.c        **** 	fStatus = portMap(handle, LP_SCK, dclkPort, dclkBit, error);
 3741              		.loc 2 511 0
 3742 364f 0FB68DC9 		movzbl	-3639(%rbp), %ecx
 3742      F1FFFF
 3743 3656 0FB695C8 		movzbl	-3640(%rbp), %edx
 3743      F1FFFF
 3744 365d 488BB598 		movq	-3688(%rbp), %rsi
 3744      F1FFFF
 3745 3664 488B85B8 		movq	-3656(%rbp), %rax
 3745      F1FFFF
 3746 366b 4989F0   		movq	%rsi, %r8
 3747 366e BE040000 		movl	$4, %esi
 3747      00
 3748 3673 4889C7   		movq	%rax, %rdi
 3749 3676 E8BACFFF 		call	portMap
 3749      FF
 3750 367b 8985D0F1 		movl	%eax, -3632(%rbp)
 3750      FFFF
 512:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3751              		.loc 2 512 0
 3752 3681 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3752      FFFF00
 3753 3688 7427     		je	.L194
 3754              		.loc 2 512 0 is_stmt 0 discriminator 1
 3755 368a 488B8598 		movq	-3688(%rbp), %rax
 3755      F1FFFF
 3756 3691 488D3500 		leaq	.LC28(%rip), %rsi
 3756      000000
 3757 3698 4889C7   		movq	%rax, %rdi
 3758 369b E8000000 		call	errPrefix@PLT
 3758      00
 3759 36a0 8B85D0F1 		movl	-3632(%rbp), %eax
 3759      FFFF
 3760 36a6 8985CCF1 		movl	%eax, -3636(%rbp)
 3760      FFFF
 3761 36ac E97A0400 		jmp	.L157
 3761      00
 3762              	.L194:
 513:prog.c        **** 	fStatus = portMap(handle, LP_MOSI, dataPort, dataBit, error);
 3763              		.loc 2 513 0 is_stmt 1
 3764 36b1 0FB68DCB 		movzbl	-3637(%rbp), %ecx
 3764      F1FFFF
 3765 36b8 0FB695CA 		movzbl	-3638(%rbp), %edx
 3765      F1FFFF
 3766 36bf 488BB598 		movq	-3688(%rbp), %rsi
 3766      F1FFFF
 3767 36c6 488B85B8 		movq	-3656(%rbp), %rax
 3767      F1FFFF
 3768 36cd 4989F0   		movq	%rsi, %r8
 3769 36d0 BE020000 		movl	$2, %esi
 3769      00
 3770 36d5 4889C7   		movq	%rax, %rdi
 3771 36d8 E858CFFF 		call	portMap
 3771      FF
 3772 36dd 8985D0F1 		movl	%eax, -3632(%rbp)
 3772      FFFF
 514:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3773              		.loc 2 514 0
 3774 36e3 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3774      FFFF00
 3775 36ea 7427     		je	.L195
 3776              		.loc 2 514 0 is_stmt 0 discriminator 1
 3777 36ec 488B8598 		movq	-3688(%rbp), %rax
 3777      F1FFFF
 3778 36f3 488D3500 		leaq	.LC28(%rip), %rsi
 3778      000000
 3779 36fa 4889C7   		movq	%rax, %rdi
 3780 36fd E8000000 		call	errPrefix@PLT
 3780      00
 3781 3702 8B85D0F1 		movl	-3632(%rbp), %eax
 3781      FFFF
 3782 3708 8985CCF1 		movl	%eax, -3636(%rbp)
 3782      FFFF
 3783 370e E9180400 		jmp	.L157
 3783      00
 3784              	.L195:
 515:prog.c        **** 	fStatus = portMap(handle, LP_CHOOSE, 0x00, 0x00, error);
 3785              		.loc 2 515 0 is_stmt 1
 3786 3713 488B9598 		movq	-3688(%rbp), %rdx
 3786      F1FFFF
 3787 371a 488B85B8 		movq	-3656(%rbp), %rax
 3787      F1FFFF
 3788 3721 4989D0   		movq	%rdx, %r8
 3789 3724 B9000000 		movl	$0, %ecx
 3789      00
 3790 3729 BA000000 		movl	$0, %edx
 3790      00
 3791 372e BE000000 		movl	$0, %esi
 3791      00
 3792 3733 4889C7   		movq	%rax, %rdi
 3793 3736 E8FACEFF 		call	portMap
 3793      FF
 3794 373b 8985D0F1 		movl	%eax, -3632(%rbp)
 3794      FFFF
 516:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3795              		.loc 2 516 0
 3796 3741 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3796      FFFF00
 3797 3748 7427     		je	.L196
 3798              		.loc 2 516 0 is_stmt 0 discriminator 1
 3799 374a 488B8598 		movq	-3688(%rbp), %rax
 3799      F1FFFF
 3800 3751 488D3500 		leaq	.LC28(%rip), %rsi
 3800      000000
 3801 3758 4889C7   		movq	%rax, %rdi
 3802 375b E8000000 		call	errPrefix@PLT
 3802      00
 3803 3760 8B85D0F1 		movl	-3632(%rbp), %eax
 3803      FFFF
 3804 3766 8985CCF1 		movl	%eax, -3636(%rbp)
 3804      FFFF
 3805 376c E9BA0300 		jmp	.L157
 3805      00
 3806              	.L196:
 517:prog.c        **** 
 518:prog.c        **** 	// Switch to conduit mode zero (=JTAG, etc)
 519:prog.c        **** 	fStatus = flSelectConduit(handle, 0x00, error);
 3807              		.loc 2 519 0 is_stmt 1
 3808 3771 488B9598 		movq	-3688(%rbp), %rdx
 3808      F1FFFF
 3809 3778 488B85B8 		movq	-3656(%rbp), %rax
 3809      F1FFFF
 3810 377f BE000000 		movl	$0, %esi
 3810      00
 3811 3784 4889C7   		movq	%rax, %rdi
 3812 3787 E8000000 		call	flSelectConduit@PLT
 3812      00
 3813 378c 8985D0F1 		movl	%eax, -3632(%rbp)
 3813      FFFF
 520:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3814              		.loc 2 520 0
 3815 3792 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3815      FFFF00
 3816 3799 7427     		je	.L197
 3817              		.loc 2 520 0 is_stmt 0 discriminator 1
 3818 379b 488B8598 		movq	-3688(%rbp), %rax
 3818      F1FFFF
 3819 37a2 488D3500 		leaq	.LC28(%rip), %rsi
 3819      000000
 3820 37a9 4889C7   		movq	%rax, %rdi
 3821 37ac E8000000 		call	errPrefix@PLT
 3821      00
 3822 37b1 8B85D0F1 		movl	-3632(%rbp), %eax
 3822      FFFF
 3823 37b7 8985CCF1 		movl	%eax, -3636(%rbp)
 3823      FFFF
 3824 37bd E9690300 		jmp	.L157
 3824      00
 3825              	.L197:
 521:prog.c        **** 
 522:prog.c        **** 	// Apply requested configuration to each specified pin
 523:prog.c        **** 	pinMap[ncfgPort][ncfgBit] = PIN_UNUSED;
 3826              		.loc 2 523 0 is_stmt 1
 3827 37c2 0FB695C4 		movzbl	-3644(%rbp), %edx
 3827      F1FFFF
 3828 37c9 0FB685C5 		movzbl	-3643(%rbp), %eax
 3828      F1FFFF
 3829 37d0 4898     		cltq
 3830 37d2 4863D2   		movslq	%edx, %rdx
 3831 37d5 48C1E205 		salq	$5, %rdx
 3832 37d9 4801D0   		addq	%rdx, %rax
 3833 37dc C78485E0 		movl	$0, -3616(%rbp,%rax,4)
 3833      F1FFFF00 
 3833      000000
 524:prog.c        **** 	for ( port = 0; port < 26; port++ ) {
 3834              		.loc 2 524 0
 3835 37e7 C685C1F1 		movb	$0, -3647(%rbp)
 3835      FFFF00
 3836 37ee E9D50000 		jmp	.L198
 3836      00
 3837              	.L202:
 525:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3838              		.loc 2 525 0
 3839 37f3 C685C2F1 		movb	$0, -3646(%rbp)
 3839      FFFF00
 3840 37fa E9AC0000 		jmp	.L199
 3840      00
 3841              	.L201:
 526:prog.c        **** 			thisPin = pinMap[port][bit];
 3842              		.loc 2 526 0
 3843 37ff 0FB695C1 		movzbl	-3647(%rbp), %edx
 3843      F1FFFF
 3844 3806 0FB685C2 		movzbl	-3646(%rbp), %eax
 3844      F1FFFF
 3845 380d 4898     		cltq
 3846 380f 4863D2   		movslq	%edx, %rdx
 3847 3812 48C1E205 		salq	$5, %rdx
 3848 3816 4801D0   		addq	%rdx, %rax
 3849 3819 8B8485E0 		movl	-3616(%rbp,%rax,4), %eax
 3849      F1FFFF
 3850 3820 8985D4F1 		movl	%eax, -3628(%rbp)
 3850      FFFF
 527:prog.c        **** 			if ( thisPin != PIN_UNUSED ) {
 3851              		.loc 2 527 0
 3852 3826 83BDD4F1 		cmpl	$0, -3628(%rbp)
 3852      FFFF00
 3853 382d 746C     		je	.L200
 528:prog.c        **** 				fStatus = flSingleBitPortAccess(handle, port, bit, thisPin, NULL, error);
 3854              		.loc 2 528 0
 3855 382f 8B85D4F1 		movl	-3628(%rbp), %eax
 3855      FFFF
 3856 3835 0FB6C8   		movzbl	%al, %ecx
 3857 3838 0FB695C2 		movzbl	-3646(%rbp), %edx
 3857      F1FFFF
 3858 383f 0FB6B5C1 		movzbl	-3647(%rbp), %esi
 3858      F1FFFF
 3859 3846 488BBD98 		movq	-3688(%rbp), %rdi
 3859      F1FFFF
 3860 384d 488B85B8 		movq	-3656(%rbp), %rax
 3860      F1FFFF
 3861 3854 4989F9   		movq	%rdi, %r9
 3862 3857 41B80000 		movl	$0, %r8d
 3862      0000
 3863 385d 4889C7   		movq	%rax, %rdi
 3864 3860 E8000000 		call	flSingleBitPortAccess@PLT
 3864      00
 3865 3865 8985D0F1 		movl	%eax, -3632(%rbp)
 3865      FFFF
 529:prog.c        **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3866              		.loc 2 529 0
 3867 386b 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3867      FFFF00
 3868 3872 7427     		je	.L200
 3869              		.loc 2 529 0 is_stmt 0 discriminator 1
 3870 3874 488B8598 		movq	-3688(%rbp), %rax
 3870      F1FFFF
 3871 387b 488D3500 		leaq	.LC28(%rip), %rsi
 3871      000000
 3872 3882 4889C7   		movq	%rax, %rdi
 3873 3885 E8000000 		call	errPrefix@PLT
 3873      00
 3874 388a 8B85D0F1 		movl	-3632(%rbp), %eax
 3874      FFFF
 3875 3890 8985CCF1 		movl	%eax, -3636(%rbp)
 3875      FFFF
 3876 3896 E9900200 		jmp	.L157
 3876      00
 3877              	.L200:
 525:prog.c        **** 			thisPin = pinMap[port][bit];
 3878              		.loc 2 525 0 is_stmt 1 discriminator 2
 3879 389b 0FB685C2 		movzbl	-3646(%rbp), %eax
 3879      F1FFFF
 3880 38a2 83C001   		addl	$1, %eax
 3881 38a5 8885C2F1 		movb	%al, -3646(%rbp)
 3881      FFFF
 3882              	.L199:
 525:prog.c        **** 			thisPin = pinMap[port][bit];
 3883              		.loc 2 525 0 is_stmt 0 discriminator 1
 3884 38ab 80BDC2F1 		cmpb	$31, -3646(%rbp)
 3884      FFFF1F
 3885 38b2 0F8647FF 		jbe	.L201
 3885      FFFF
 524:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3886              		.loc 2 524 0 is_stmt 1 discriminator 2
 3887 38b8 0FB685C1 		movzbl	-3647(%rbp), %eax
 3887      F1FFFF
 3888 38bf 83C001   		addl	$1, %eax
 3889 38c2 8885C1F1 		movb	%al, -3647(%rbp)
 3889      FFFF
 3890              	.L198:
 524:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3891              		.loc 2 524 0 is_stmt 0 discriminator 1
 3892 38c8 80BDC1F1 		cmpb	$25, -3647(%rbp)
 3892      FFFF19
 3893 38cf 0F861EFF 		jbe	.L202
 3893      FFFF
 530:prog.c        **** 			}
 531:prog.c        **** 		}
 532:prog.c        **** 	}
 533:prog.c        **** 
 534:prog.c        **** 	// Deassert nCONFIG
 535:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, ncfgPort, ncfgBit, PIN_INPUT, NULL, error); // nCONFIG pul
 3894              		.loc 2 535 0 is_stmt 1
 3895 38d5 0FB695C5 		movzbl	-3643(%rbp), %edx
 3895      F1FFFF
 3896 38dc 0FB6B5C4 		movzbl	-3644(%rbp), %esi
 3896      F1FFFF
 3897 38e3 488B8D98 		movq	-3688(%rbp), %rcx
 3897      F1FFFF
 3898 38ea 488B85B8 		movq	-3656(%rbp), %rax
 3898      F1FFFF
 3899 38f1 4989C9   		movq	%rcx, %r9
 3900 38f4 41B80000 		movl	$0, %r8d
 3900      0000
 3901 38fa B9030000 		movl	$3, %ecx
 3901      00
 3902 38ff 4889C7   		movq	%rax, %rdi
 3903 3902 E8000000 		call	flSingleBitPortAccess@PLT
 3903      00
 3904 3907 8985D0F1 		movl	%eax, -3632(%rbp)
 3904      FFFF
 536:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3905              		.loc 2 536 0
 3906 390d 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3906      FFFF00
 3907 3914 7427     		je	.L203
 3908              		.loc 2 536 0 is_stmt 0 discriminator 1
 3909 3916 488B8598 		movq	-3688(%rbp), %rax
 3909      F1FFFF
 3910 391d 488D3500 		leaq	.LC28(%rip), %rsi
 3910      000000
 3911 3924 4889C7   		movq	%rax, %rdi
 3912 3927 E8000000 		call	errPrefix@PLT
 3912      00
 3913 392c 8B85D0F1 		movl	-3632(%rbp), %eax
 3913      FFFF
 3914 3932 8985CCF1 		movl	%eax, -3636(%rbp)
 3914      FFFF
 3915 3938 E9EE0100 		jmp	.L157
 3915      00
 3916              	.L203:
 537:prog.c        **** 
 538:prog.c        **** 	// Write the programming file into the FPGA
 539:prog.c        **** 	fStatus = dataWrite(handle, PROG_SPI_SEND, data, len, lookupTable, error);
 3917              		.loc 2 539 0 is_stmt 1
 3918 393d 488BBD98 		movq	-3688(%rbp), %rdi
 3918      F1FFFF
 3919 3944 488DB5F0 		leaq	-272(%rbp), %rsi
 3919      FEFFFF
 3920 394b 8B8DA4F1 		movl	-3676(%rbp), %ecx
 3920      FFFF
 3921 3951 488B95A8 		movq	-3672(%rbp), %rdx
 3921      F1FFFF
 3922 3958 488B85B8 		movq	-3656(%rbp), %rax
 3922      F1FFFF
 3923 395f 4989F9   		movq	%rdi, %r9
 3924 3962 4989F0   		movq	%rsi, %r8
 3925 3965 BE060000 		movl	$6, %esi
 3925      00
 3926 396a 4889C7   		movq	%rax, %rdi
 3927 396d E818CFFF 		call	dataWrite
 3927      FF
 3928 3972 8985D0F1 		movl	%eax, -3632(%rbp)
 3928      FFFF
 540:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3929              		.loc 2 540 0
 3930 3978 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3930      FFFF00
 3931 397f 7427     		je	.L204
 3932              		.loc 2 540 0 is_stmt 0 discriminator 1
 3933 3981 488B8598 		movq	-3688(%rbp), %rax
 3933      F1FFFF
 3934 3988 488D3500 		leaq	.LC28(%rip), %rsi
 3934      000000
 3935 398f 4889C7   		movq	%rax, %rdi
 3936 3992 E8000000 		call	errPrefix@PLT
 3936      00
 3937 3997 8B85D0F1 		movl	-3632(%rbp), %eax
 3937      FFFF
 3938 399d 8985CCF1 		movl	%eax, -3636(%rbp)
 3938      FFFF
 3939 39a3 E9830100 		jmp	.L157
 3939      00
 3940              	.L204:
 541:prog.c        **** 
 542:prog.c        **** 	// Verify that CONF_DONE went high
 543:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, donePort, doneBit, PIN_INPUT, &doneStatus, error);
 3941              		.loc 2 543 0 is_stmt 1
 3942 39a8 0FB695C7 		movzbl	-3641(%rbp), %edx
 3942      F1FFFF
 3943 39af 0FB6B5C6 		movzbl	-3642(%rbp), %esi
 3943      F1FFFF
 3944 39b6 488BBD98 		movq	-3688(%rbp), %rdi
 3944      F1FFFF
 3945 39bd 488D8DC0 		leaq	-3648(%rbp), %rcx
 3945      F1FFFF
 3946 39c4 488B85B8 		movq	-3656(%rbp), %rax
 3946      F1FFFF
 3947 39cb 4989F9   		movq	%rdi, %r9
 3948 39ce 4989C8   		movq	%rcx, %r8
 3949 39d1 B9030000 		movl	$3, %ecx
 3949      00
 3950 39d6 4889C7   		movq	%rax, %rdi
 3951 39d9 E8000000 		call	flSingleBitPortAccess@PLT
 3951      00
 3952 39de 8985D0F1 		movl	%eax, -3632(%rbp)
 3952      FFFF
 544:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3953              		.loc 2 544 0
 3954 39e4 83BDD0F1 		cmpl	$0, -3632(%rbp)
 3954      FFFF00
 3955 39eb 7427     		je	.L205
 3956              		.loc 2 544 0 is_stmt 0 discriminator 1
 3957 39ed 488B8598 		movq	-3688(%rbp), %rax
 3957      F1FFFF
 3958 39f4 488D3500 		leaq	.LC28(%rip), %rsi
 3958      000000
 3959 39fb 4889C7   		movq	%rax, %rdi
 3960 39fe E8000000 		call	errPrefix@PLT
 3960      00
 3961 3a03 8B85D0F1 		movl	-3632(%rbp), %eax
 3961      FFFF
 3962 3a09 8985CCF1 		movl	%eax, -3636(%rbp)
 3962      FFFF
 3963 3a0f E9170100 		jmp	.L157
 3963      00
 3964              	.L205:
 545:prog.c        **** 	CHECK_STATUS(
 3965              		.loc 2 545 0 is_stmt 1
 3966 3a14 0FB685C0 		movzbl	-3648(%rbp), %eax
 3966      F1FFFF
 3967 3a1b 84C0     		testb	%al, %al
 3968 3a1d 7525     		jne	.L206
 3969              		.loc 2 545 0 is_stmt 0 discriminator 1
 3970 3a1f 488B8598 		movq	-3688(%rbp), %rax
 3970      F1FFFF
 3971 3a26 488D3500 		leaq	.LC31(%rip), %rsi
 3971      000000
 3972 3a2d 4889C7   		movq	%rax, %rdi
 3973 3a30 E8000000 		call	errPrefix@PLT
 3973      00
 3974 3a35 C785CCF1 		movl	$20, -3636(%rbp)
 3974      FFFF1400 
 3974      0000
 3975 3a3f E9E70000 		jmp	.L157
 3975      00
 3976              	.L206:
 546:prog.c        **** 		!doneStatus, FL_PROG_ERR, cleanup,
 547:prog.c        **** 		"aProgram(): CONF_DONE remained low (CRC error during config)");
 548:prog.c        **** 
 549:prog.c        **** 	// Make all specified pins inputs; leave CONF_DONE as input and leave nCONFIG driven high
 550:prog.c        **** 	for ( port = 0; port < 26; port++ ) {
 3977              		.loc 2 550 0 is_stmt 1
 3978 3a44 C685C1F1 		movb	$0, -3647(%rbp)
 3978      FFFF00
 3979 3a4b E9CE0000 		jmp	.L207
 3979      00
 3980              	.L211:
 551:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3981              		.loc 2 551 0
 3982 3a50 C685C2F1 		movb	$0, -3646(%rbp)
 3982      FFFF00
 3983 3a57 E9A50000 		jmp	.L208
 3983      00
 3984              	.L210:
 552:prog.c        **** 			thisPin = pinMap[port][bit];
 3985              		.loc 2 552 0
 3986 3a5c 0FB695C1 		movzbl	-3647(%rbp), %edx
 3986      F1FFFF
 3987 3a63 0FB685C2 		movzbl	-3646(%rbp), %eax
 3987      F1FFFF
 3988 3a6a 4898     		cltq
 3989 3a6c 4863D2   		movslq	%edx, %rdx
 3990 3a6f 48C1E205 		salq	$5, %rdx
 3991 3a73 4801D0   		addq	%rdx, %rax
 3992 3a76 8B8485E0 		movl	-3616(%rbp,%rax,4), %eax
 3992      F1FFFF
 3993 3a7d 8985D4F1 		movl	%eax, -3628(%rbp)
 3993      FFFF
 553:prog.c        **** 			if ( thisPin != PIN_UNUSED ) {
 3994              		.loc 2 553 0
 3995 3a83 83BDD4F1 		cmpl	$0, -3628(%rbp)
 3995      FFFF00
 3996 3a8a 7465     		je	.L209
 554:prog.c        **** 				fStatus = flSingleBitPortAccess(handle, port, bit, PIN_INPUT, NULL, error);
 3997              		.loc 2 554 0
 3998 3a8c 0FB695C2 		movzbl	-3646(%rbp), %edx
 3998      F1FFFF
 3999 3a93 0FB6B5C1 		movzbl	-3647(%rbp), %esi
 3999      F1FFFF
 4000 3a9a 488B8D98 		movq	-3688(%rbp), %rcx
 4000      F1FFFF
 4001 3aa1 488B85B8 		movq	-3656(%rbp), %rax
 4001      F1FFFF
 4002 3aa8 4989C9   		movq	%rcx, %r9
 4003 3aab 41B80000 		movl	$0, %r8d
 4003      0000
 4004 3ab1 B9030000 		movl	$3, %ecx
 4004      00
 4005 3ab6 4889C7   		movq	%rax, %rdi
 4006 3ab9 E8000000 		call	flSingleBitPortAccess@PLT
 4006      00
 4007 3abe 8985D0F1 		movl	%eax, -3632(%rbp)
 4007      FFFF
 555:prog.c        **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 4008              		.loc 2 555 0
 4009 3ac4 83BDD0F1 		cmpl	$0, -3632(%rbp)
 4009      FFFF00
 4010 3acb 7424     		je	.L209
 4011              		.loc 2 555 0 is_stmt 0 discriminator 1
 4012 3acd 488B8598 		movq	-3688(%rbp), %rax
 4012      F1FFFF
 4013 3ad4 488D3500 		leaq	.LC28(%rip), %rsi
 4013      000000
 4014 3adb 4889C7   		movq	%rax, %rdi
 4015 3ade E8000000 		call	errPrefix@PLT
 4015      00
 4016 3ae3 8B85D0F1 		movl	-3632(%rbp), %eax
 4016      FFFF
 4017 3ae9 8985CCF1 		movl	%eax, -3636(%rbp)
 4017      FFFF
 4018 3aef EB3A     		jmp	.L157
 4019              	.L209:
 551:prog.c        **** 			thisPin = pinMap[port][bit];
 4020              		.loc 2 551 0 is_stmt 1 discriminator 2
 4021 3af1 0FB685C2 		movzbl	-3646(%rbp), %eax
 4021      F1FFFF
 4022 3af8 83C001   		addl	$1, %eax
 4023 3afb 8885C2F1 		movb	%al, -3646(%rbp)
 4023      FFFF
 4024              	.L208:
 551:prog.c        **** 			thisPin = pinMap[port][bit];
 4025              		.loc 2 551 0 is_stmt 0 discriminator 1
 4026 3b01 80BDC2F1 		cmpb	$31, -3646(%rbp)
 4026      FFFF1F
 4027 3b08 0F864EFF 		jbe	.L210
 4027      FFFF
 550:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 4028              		.loc 2 550 0 is_stmt 1 discriminator 2
 4029 3b0e 0FB685C1 		movzbl	-3647(%rbp), %eax
 4029      F1FFFF
 4030 3b15 83C001   		addl	$1, %eax
 4031 3b18 8885C1F1 		movb	%al, -3647(%rbp)
 4031      FFFF
 4032              	.L207:
 550:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 4033              		.loc 2 550 0 is_stmt 0 discriminator 1
 4034 3b1e 80BDC1F1 		cmpb	$25, -3647(%rbp)
 4034      FFFF19
 4035 3b25 0F8625FF 		jbe	.L211
 4035      FFFF
 4036              	.L157:
 556:prog.c        **** 			}
 557:prog.c        **** 		}
 558:prog.c        **** 	}
 559:prog.c        **** cleanup:
 560:prog.c        **** 	return retVal;
 4037              		.loc 2 560 0 is_stmt 1
 4038 3b2b 8B85CCF1 		movl	-3636(%rbp), %eax
 4038      FFFF
 561:prog.c        **** }
 4039              		.loc 2 561 0
 4040 3b31 488B75F8 		movq	-8(%rbp), %rsi
 4041 3b35 64483334 		xorq	%fs:40, %rsi
 4041      25280000 
 4041      00
 4042 3b3e 7405     		je	.L213
 4043 3b40 E8000000 		call	__stack_chk_fail@PLT
 4043      00
 4044              	.L213:
 4045 3b45 C9       		leave
 4046              		.cfi_def_cfa 7, 8
 4047 3b46 C3       		ret
 4048              		.cfi_endproc
 4049              	.LFE13:
 4051              		.section	.rodata
 4052 0655 000000   		.align 8
 4053              	.LC32:
 4054 0658 70726F67 		.string	"progOpen(): Unexpected end of config string:\n  %s\n  %s^"
 4054      4F70656E 
 4054      28293A20 
 4054      556E6578 
 4054      70656374 
 4055              		.align 8
 4056              	.LC33:
 4057 0690 70726F67 		.string	"progOpen(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 4057      4F70656E 
 4057      28293A20 
 4057      506F7274 
 4057      20697320 
 4058 06d3 00000000 		.align 8
 4058      00
 4059              	.LC34:
 4060 06d8 70726F67 		.string	"progOpen(): Bit number is not valid:\n  %s\n  %s^"
 4060      4F70656E 
 4060      28293A20 
 4060      42697420 
 4060      6E756D62 
 4061              		.align 8
 4062              	.LC35:
 4063 0708 70726F67 		.string	"progOpen(): port '%c%d' is already used:\n  %s\n  %s^"
 4063      4F70656E 
 4063      28293A20 
 4063      706F7274 
 4063      20272563 
 4064              	.LC36:
 4065 073c 70726F67 		.string	"progOpen()"
 4065      4F70656E 
 4065      282900
 4066              		.text
 4068              	progOpenInternal:
 4069              	.LFB14:
 562:prog.c        **** 
 563:prog.c        **** static FLStatus progOpenInternal(struct FLContext *handle, const char *portConfig, const char *ptr,
 4070              		.loc 2 563 0
 4071              		.cfi_startproc
 4072 3b47 55       		pushq	%rbp
 4073              		.cfi_def_cfa_offset 16
 4074              		.cfi_offset 6, -16
 4075 3b48 4889E5   		movq	%rsp, %rbp
 4076              		.cfi_def_cfa_register 6
 4077 3b4b 4881EC50 		subq	$3408, %rsp
 4077      0D0000
 4078 3b52 4889BDC8 		movq	%rdi, -3384(%rbp)
 4078      F2FFFF
 4079 3b59 4889B5C0 		movq	%rsi, -3392(%rbp)
 4079      F2FFFF
 4080 3b60 488995B8 		movq	%rdx, -3400(%rbp)
 4080      F2FFFF
 4081 3b67 48898DB0 		movq	%rcx, -3408(%rbp)
 4081      F2FFFF
 4082              		.loc 2 563 0
 4083 3b6e 64488B04 		movq	%fs:40, %rax
 4083      25280000 
 4083      00
 4084 3b77 488945F8 		movq	%rax, -8(%rbp)
 4085 3b7b 31C0     		xorl	%eax, %eax
 564:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 4086              		.loc 2 564 0
 4087 3b7d C785E8F2 		movl	$0, -3352(%rbp)
 4087      FFFF0000 
 4087      0000
 565:prog.c        **** 	FLStatus fStatus;
 566:prog.c        **** 	uint8 misoPort, misoBit;
 567:prog.c        **** 	uint8 mosiPort, mosiBit;
 568:prog.c        **** 	uint8 ssPort, ssBit;
 569:prog.c        **** 	uint8 sckPort, sckBit;
 570:prog.c        **** 	PinConfig pinMap[26][32] = {{0,},};
 4088              		.loc 2 570 0
 4089 3b87 488D95F0 		leaq	-3344(%rbp), %rdx
 4089      F2FFFF
 4090 3b8e B8000000 		movl	$0, %eax
 4090      00
 4091 3b93 B9A00100 		movl	$416, %ecx
 4091      00
 4092 3b98 4889D7   		movq	%rdx, %rdi
 4093 3b9b F348AB   		rep stosq
 571:prog.c        **** 	char ch;
 572:prog.c        **** 
 573:prog.c        **** 	// Get all four JTAG bits and tell the micro which ones to use
 574:prog.c        **** 	GET_PAIR(misoPort, misoBit, "progOpen");        // MISO/TDO
 4094              		.loc 2 574 0
 4095 3b9e 488B85B8 		movq	-3400(%rbp), %rax
 4095      F2FFFF
 4096 3ba5 0FB600   		movzbl	(%rax), %eax
 4097 3ba8 8885DFF2 		movb	%al, -3361(%rbp)
 4097      FFFF
 4098 3bae 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4098      FFFF00
 4099 3bb5 7553     		jne	.L215
 4100              		.loc 2 574 0 is_stmt 0 discriminator 1
 4101 3bb7 488B85B8 		movq	-3400(%rbp), %rax
 4101      F2FFFF
 4102 3bbe 4889C2   		movq	%rax, %rdx
 4103 3bc1 488B85C0 		movq	-3392(%rbp), %rax
 4103      F2FFFF
 4104 3bc8 4829C2   		subq	%rax, %rdx
 4105 3bcb 4889D0   		movq	%rdx, %rax
 4106 3bce 4889C7   		movq	%rax, %rdi
 4107 3bd1 E8DAC5FF 		call	spaces
 4107      FF
 4108 3bd6 4889C1   		movq	%rax, %rcx
 4109 3bd9 488B95C0 		movq	-3392(%rbp), %rdx
 4109      F2FFFF
 4110 3be0 488B85B0 		movq	-3408(%rbp), %rax
 4110      F2FFFF
 4111 3be7 488D3500 		leaq	.LC32(%rip), %rsi
 4111      000000
 4112 3bee 4889C7   		movq	%rax, %rdi
 4113 3bf1 B8000000 		movl	$0, %eax
 4113      00
 4114 3bf6 E8000000 		call	errRender@PLT
 4114      00
 4115 3bfb C785E8F2 		movl	$11, -3352(%rbp)
 4115      FFFF0B00 
 4115      0000
 4116 3c05 E9320E00 		jmp	.L216
 4116      00
 4117              	.L215:
 4118              		.loc 2 574 0 discriminator 2
 4119 3c0a 80BDDFF2 		cmpb	$64, -3361(%rbp)
 4119      FFFF40
 4120 3c11 7E09     		jle	.L217
 4121              		.loc 2 574 0 discriminator 4
 4122 3c13 80BDDFF2 		cmpb	$90, -3361(%rbp)
 4122      FFFF5A
 4123 3c1a 7E53     		jle	.L218
 4124              	.L217:
 4125              		.loc 2 574 0 discriminator 5
 4126 3c1c 488B85B8 		movq	-3400(%rbp), %rax
 4126      F2FFFF
 4127 3c23 4889C2   		movq	%rax, %rdx
 4128 3c26 488B85C0 		movq	-3392(%rbp), %rax
 4128      F2FFFF
 4129 3c2d 4829C2   		subq	%rax, %rdx
 4130 3c30 4889D0   		movq	%rdx, %rax
 4131 3c33 4889C7   		movq	%rax, %rdi
 4132 3c36 E875C5FF 		call	spaces
 4132      FF
 4133 3c3b 4889C1   		movq	%rax, %rcx
 4134 3c3e 488B95C0 		movq	-3392(%rbp), %rdx
 4134      F2FFFF
 4135 3c45 488B85B0 		movq	-3408(%rbp), %rax
 4135      F2FFFF
 4136 3c4c 488D3500 		leaq	.LC33(%rip), %rsi
 4136      000000
 4137 3c53 4889C7   		movq	%rax, %rdi
 4138 3c56 B8000000 		movl	$0, %eax
 4138      00
 4139 3c5b E8000000 		call	errRender@PLT
 4139      00
 4140 3c60 C785E8F2 		movl	$11, -3352(%rbp)
 4140      FFFF0B00 
 4140      0000
 4141 3c6a E9CD0D00 		jmp	.L216
 4141      00
 4142              	.L218:
 4143              		.loc 2 574 0 discriminator 6
 4144 3c6f 0FB685DF 		movzbl	-3361(%rbp), %eax
 4144      F2FFFF
 4145 3c76 83E841   		subl	$65, %eax
 4146 3c79 8885E0F2 		movb	%al, -3360(%rbp)
 4146      FFFF
 4147 3c7f 488B85B8 		movq	-3400(%rbp), %rax
 4147      F2FFFF
 4148 3c86 4883C001 		addq	$1, %rax
 4149 3c8a 488985B8 		movq	%rax, -3400(%rbp)
 4149      F2FFFF
 4150 3c91 488B85B8 		movq	-3400(%rbp), %rax
 4150      F2FFFF
 4151 3c98 0FB600   		movzbl	(%rax), %eax
 4152 3c9b 8885DFF2 		movb	%al, -3361(%rbp)
 4152      FFFF
 4153 3ca1 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4153      FFFF00
 4154 3ca8 7553     		jne	.L219
 4155              		.loc 2 574 0 discriminator 7
 4156 3caa 488B85B8 		movq	-3400(%rbp), %rax
 4156      F2FFFF
 4157 3cb1 4889C2   		movq	%rax, %rdx
 4158 3cb4 488B85C0 		movq	-3392(%rbp), %rax
 4158      F2FFFF
 4159 3cbb 4829C2   		subq	%rax, %rdx
 4160 3cbe 4889D0   		movq	%rdx, %rax
 4161 3cc1 4889C7   		movq	%rax, %rdi
 4162 3cc4 E8E7C4FF 		call	spaces
 4162      FF
 4163 3cc9 4889C1   		movq	%rax, %rcx
 4164 3ccc 488B95C0 		movq	-3392(%rbp), %rdx
 4164      F2FFFF
 4165 3cd3 488B85B0 		movq	-3408(%rbp), %rax
 4165      F2FFFF
 4166 3cda 488D3500 		leaq	.LC32(%rip), %rsi
 4166      000000
 4167 3ce1 4889C7   		movq	%rax, %rdi
 4168 3ce4 B8000000 		movl	$0, %eax
 4168      00
 4169 3ce9 E8000000 		call	errRender@PLT
 4169      00
 4170 3cee C785E8F2 		movl	$11, -3352(%rbp)
 4170      FFFF0B00 
 4170      0000
 4171 3cf8 E93F0D00 		jmp	.L216
 4171      00
 4172              	.L219:
 4173              		.loc 2 574 0 discriminator 8
 4174 3cfd 80BDDFF2 		cmpb	$47, -3361(%rbp)
 4174      FFFF2F
 4175 3d04 7E09     		jle	.L220
 4176              		.loc 2 574 0 discriminator 10
 4177 3d06 80BDDFF2 		cmpb	$57, -3361(%rbp)
 4177      FFFF39
 4178 3d0d 7E53     		jle	.L221
 4179              	.L220:
 4180              		.loc 2 574 0 discriminator 11
 4181 3d0f 488B85B8 		movq	-3400(%rbp), %rax
 4181      F2FFFF
 4182 3d16 4889C2   		movq	%rax, %rdx
 4183 3d19 488B85C0 		movq	-3392(%rbp), %rax
 4183      F2FFFF
 4184 3d20 4829C2   		subq	%rax, %rdx
 4185 3d23 4889D0   		movq	%rdx, %rax
 4186 3d26 4889C7   		movq	%rax, %rdi
 4187 3d29 E882C4FF 		call	spaces
 4187      FF
 4188 3d2e 4889C1   		movq	%rax, %rcx
 4189 3d31 488B95C0 		movq	-3392(%rbp), %rdx
 4189      F2FFFF
 4190 3d38 488B85B0 		movq	-3408(%rbp), %rax
 4190      F2FFFF
 4191 3d3f 488D3500 		leaq	.LC34(%rip), %rsi
 4191      000000
 4192 3d46 4889C7   		movq	%rax, %rdi
 4193 3d49 B8000000 		movl	$0, %eax
 4193      00
 4194 3d4e E8000000 		call	errRender@PLT
 4194      00
 4195 3d53 C785E8F2 		movl	$11, -3352(%rbp)
 4195      FFFF0B00 
 4195      0000
 4196 3d5d E9DA0C00 		jmp	.L216
 4196      00
 4197              	.L221:
 4198              		.loc 2 574 0 discriminator 12
 4199 3d62 488B85B8 		movq	-3400(%rbp), %rax
 4199      F2FFFF
 4200 3d69 488D8DB8 		leaq	-3400(%rbp), %rcx
 4200      F2FFFF
 4201 3d70 BA0A0000 		movl	$10, %edx
 4201      00
 4202 3d75 4889CE   		movq	%rcx, %rsi
 4203 3d78 4889C7   		movq	%rax, %rdi
 4204 3d7b E8000000 		call	strtoul@PLT
 4204      00
 4205 3d80 8885E1F2 		movb	%al, -3359(%rbp)
 4205      FFFF
 575:prog.c        **** 	SET_BIT(misoPort, misoBit, PIN_INPUT, "progOpen");
 4206              		.loc 2 575 0 is_stmt 1 discriminator 12
 4207 3d86 0FB695E0 		movzbl	-3360(%rbp), %edx
 4207      F2FFFF
 4208 3d8d 0FB685E1 		movzbl	-3359(%rbp), %eax
 4208      F2FFFF
 4209 3d94 4898     		cltq
 4210 3d96 4863D2   		movslq	%edx, %rdx
 4211 3d99 48C1E205 		salq	$5, %rdx
 4212 3d9d 4801D0   		addq	%rdx, %rax
 4213 3da0 8B8485F0 		movl	-3344(%rbp,%rax,4), %eax
 4213      F2FFFF
 4214 3da7 85C0     		testl	%eax, %eax
 4215 3da9 7472     		je	.L222
 4216              		.loc 2 575 0 is_stmt 0 discriminator 1
 4217 3dab 488B85B8 		movq	-3400(%rbp), %rax
 4217      F2FFFF
 4218 3db2 4889C2   		movq	%rax, %rdx
 4219 3db5 488B85C0 		movq	-3392(%rbp), %rax
 4219      F2FFFF
 4220 3dbc 4829C2   		subq	%rax, %rdx
 4221 3dbf 4889D0   		movq	%rdx, %rax
 4222 3dc2 4883E801 		subq	$1, %rax
 4223 3dc6 4889C7   		movq	%rax, %rdi
 4224 3dc9 E8E2C3FF 		call	spaces
 4224      FF
 4225 3dce 4889C7   		movq	%rax, %rdi
 4226 3dd1 0FB695E1 		movzbl	-3359(%rbp), %edx
 4226      F2FFFF
 4227 3dd8 0FB685E0 		movzbl	-3360(%rbp), %eax
 4227      F2FFFF
 4228 3ddf 8D7041   		leal	65(%rax), %esi
 4229 3de2 488B8DC0 		movq	-3392(%rbp), %rcx
 4229      F2FFFF
 4230 3de9 488B85B0 		movq	-3408(%rbp), %rax
 4230      F2FFFF
 4231 3df0 4989F9   		movq	%rdi, %r9
 4232 3df3 4989C8   		movq	%rcx, %r8
 4233 3df6 89D1     		movl	%edx, %ecx
 4234 3df8 89F2     		movl	%esi, %edx
 4235 3dfa 488D3500 		leaq	.LC35(%rip), %rsi
 4235      000000
 4236 3e01 4889C7   		movq	%rax, %rdi
 4237 3e04 B8000000 		movl	$0, %eax
 4237      00
 4238 3e09 E8000000 		call	errRender@PLT
 4238      00
 4239 3e0e C785E8F2 		movl	$11, -3352(%rbp)
 4239      FFFF0B00 
 4239      0000
 4240 3e18 E91F0C00 		jmp	.L216
 4240      00
 4241              	.L222:
 4242              		.loc 2 575 0 discriminator 2
 4243 3e1d 0FB695E0 		movzbl	-3360(%rbp), %edx
 4243      F2FFFF
 4244 3e24 0FB685E1 		movzbl	-3359(%rbp), %eax
 4244      F2FFFF
 4245 3e2b 4898     		cltq
 4246 3e2d 4863D2   		movslq	%edx, %rdx
 4247 3e30 48C1E205 		salq	$5, %rdx
 4248 3e34 4801D0   		addq	%rdx, %rax
 4249 3e37 C78485F0 		movl	$3, -3344(%rbp,%rax,4)
 4249      F2FFFF03 
 4249      000000
 576:prog.c        **** 	fStatus = portMap(handle, LP_MISO, misoPort, misoBit, error);
 4250              		.loc 2 576 0 is_stmt 1 discriminator 2
 4251 3e42 0FB68DE1 		movzbl	-3359(%rbp), %ecx
 4251      F2FFFF
 4252 3e49 0FB695E0 		movzbl	-3360(%rbp), %edx
 4252      F2FFFF
 4253 3e50 488BB5B0 		movq	-3408(%rbp), %rsi
 4253      F2FFFF
 4254 3e57 488B85C8 		movq	-3384(%rbp), %rax
 4254      F2FFFF
 4255 3e5e 4989F0   		movq	%rsi, %r8
 4256 3e61 BE010000 		movl	$1, %esi
 4256      00
 4257 3e66 4889C7   		movq	%rax, %rdi
 4258 3e69 E8C7C7FF 		call	portMap
 4258      FF
 4259 3e6e 8985ECF2 		movl	%eax, -3348(%rbp)
 4259      FFFF
 577:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4260              		.loc 2 577 0 discriminator 2
 4261 3e74 83BDECF2 		cmpl	$0, -3348(%rbp)
 4261      FFFF00
 4262 3e7b 7427     		je	.L223
 4263              		.loc 2 577 0 is_stmt 0 discriminator 1
 4264 3e7d 488B85B0 		movq	-3408(%rbp), %rax
 4264      F2FFFF
 4265 3e84 488D3500 		leaq	.LC36(%rip), %rsi
 4265      000000
 4266 3e8b 4889C7   		movq	%rax, %rdi
 4267 3e8e E8000000 		call	errPrefix@PLT
 4267      00
 4268 3e93 8B85ECF2 		movl	-3348(%rbp), %eax
 4268      FFFF
 4269 3e99 8985E8F2 		movl	%eax, -3352(%rbp)
 4269      FFFF
 4270 3e9f E9980B00 		jmp	.L216
 4270      00
 4271              	.L223:
 578:prog.c        **** 
 579:prog.c        **** 	GET_PAIR(mosiPort, mosiBit, "progOpen");        // MOSI/TDI
 4272              		.loc 2 579 0 is_stmt 1
 4273 3ea4 488B85B8 		movq	-3400(%rbp), %rax
 4273      F2FFFF
 4274 3eab 0FB600   		movzbl	(%rax), %eax
 4275 3eae 8885DFF2 		movb	%al, -3361(%rbp)
 4275      FFFF
 4276 3eb4 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4276      FFFF00
 4277 3ebb 7553     		jne	.L224
 4278              		.loc 2 579 0 is_stmt 0 discriminator 1
 4279 3ebd 488B85B8 		movq	-3400(%rbp), %rax
 4279      F2FFFF
 4280 3ec4 4889C2   		movq	%rax, %rdx
 4281 3ec7 488B85C0 		movq	-3392(%rbp), %rax
 4281      F2FFFF
 4282 3ece 4829C2   		subq	%rax, %rdx
 4283 3ed1 4889D0   		movq	%rdx, %rax
 4284 3ed4 4889C7   		movq	%rax, %rdi
 4285 3ed7 E8D4C2FF 		call	spaces
 4285      FF
 4286 3edc 4889C1   		movq	%rax, %rcx
 4287 3edf 488B95C0 		movq	-3392(%rbp), %rdx
 4287      F2FFFF
 4288 3ee6 488B85B0 		movq	-3408(%rbp), %rax
 4288      F2FFFF
 4289 3eed 488D3500 		leaq	.LC32(%rip), %rsi
 4289      000000
 4290 3ef4 4889C7   		movq	%rax, %rdi
 4291 3ef7 B8000000 		movl	$0, %eax
 4291      00
 4292 3efc E8000000 		call	errRender@PLT
 4292      00
 4293 3f01 C785E8F2 		movl	$11, -3352(%rbp)
 4293      FFFF0B00 
 4293      0000
 4294 3f0b E92C0B00 		jmp	.L216
 4294      00
 4295              	.L224:
 4296              		.loc 2 579 0 discriminator 2
 4297 3f10 80BDDFF2 		cmpb	$64, -3361(%rbp)
 4297      FFFF40
 4298 3f17 7E09     		jle	.L225
 4299              		.loc 2 579 0 discriminator 4
 4300 3f19 80BDDFF2 		cmpb	$90, -3361(%rbp)
 4300      FFFF5A
 4301 3f20 7E53     		jle	.L226
 4302              	.L225:
 4303              		.loc 2 579 0 discriminator 5
 4304 3f22 488B85B8 		movq	-3400(%rbp), %rax
 4304      F2FFFF
 4305 3f29 4889C2   		movq	%rax, %rdx
 4306 3f2c 488B85C0 		movq	-3392(%rbp), %rax
 4306      F2FFFF
 4307 3f33 4829C2   		subq	%rax, %rdx
 4308 3f36 4889D0   		movq	%rdx, %rax
 4309 3f39 4889C7   		movq	%rax, %rdi
 4310 3f3c E86FC2FF 		call	spaces
 4310      FF
 4311 3f41 4889C1   		movq	%rax, %rcx
 4312 3f44 488B95C0 		movq	-3392(%rbp), %rdx
 4312      F2FFFF
 4313 3f4b 488B85B0 		movq	-3408(%rbp), %rax
 4313      F2FFFF
 4314 3f52 488D3500 		leaq	.LC33(%rip), %rsi
 4314      000000
 4315 3f59 4889C7   		movq	%rax, %rdi
 4316 3f5c B8000000 		movl	$0, %eax
 4316      00
 4317 3f61 E8000000 		call	errRender@PLT
 4317      00
 4318 3f66 C785E8F2 		movl	$11, -3352(%rbp)
 4318      FFFF0B00 
 4318      0000
 4319 3f70 E9C70A00 		jmp	.L216
 4319      00
 4320              	.L226:
 4321              		.loc 2 579 0 discriminator 6
 4322 3f75 0FB685DF 		movzbl	-3361(%rbp), %eax
 4322      F2FFFF
 4323 3f7c 83E841   		subl	$65, %eax
 4324 3f7f 8885E2F2 		movb	%al, -3358(%rbp)
 4324      FFFF
 4325 3f85 488B85B8 		movq	-3400(%rbp), %rax
 4325      F2FFFF
 4326 3f8c 4883C001 		addq	$1, %rax
 4327 3f90 488985B8 		movq	%rax, -3400(%rbp)
 4327      F2FFFF
 4328 3f97 488B85B8 		movq	-3400(%rbp), %rax
 4328      F2FFFF
 4329 3f9e 0FB600   		movzbl	(%rax), %eax
 4330 3fa1 8885DFF2 		movb	%al, -3361(%rbp)
 4330      FFFF
 4331 3fa7 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4331      FFFF00
 4332 3fae 7553     		jne	.L227
 4333              		.loc 2 579 0 discriminator 7
 4334 3fb0 488B85B8 		movq	-3400(%rbp), %rax
 4334      F2FFFF
 4335 3fb7 4889C2   		movq	%rax, %rdx
 4336 3fba 488B85C0 		movq	-3392(%rbp), %rax
 4336      F2FFFF
 4337 3fc1 4829C2   		subq	%rax, %rdx
 4338 3fc4 4889D0   		movq	%rdx, %rax
 4339 3fc7 4889C7   		movq	%rax, %rdi
 4340 3fca E8E1C1FF 		call	spaces
 4340      FF
 4341 3fcf 4889C1   		movq	%rax, %rcx
 4342 3fd2 488B95C0 		movq	-3392(%rbp), %rdx
 4342      F2FFFF
 4343 3fd9 488B85B0 		movq	-3408(%rbp), %rax
 4343      F2FFFF
 4344 3fe0 488D3500 		leaq	.LC32(%rip), %rsi
 4344      000000
 4345 3fe7 4889C7   		movq	%rax, %rdi
 4346 3fea B8000000 		movl	$0, %eax
 4346      00
 4347 3fef E8000000 		call	errRender@PLT
 4347      00
 4348 3ff4 C785E8F2 		movl	$11, -3352(%rbp)
 4348      FFFF0B00 
 4348      0000
 4349 3ffe E9390A00 		jmp	.L216
 4349      00
 4350              	.L227:
 4351              		.loc 2 579 0 discriminator 8
 4352 4003 80BDDFF2 		cmpb	$47, -3361(%rbp)
 4352      FFFF2F
 4353 400a 7E09     		jle	.L228
 4354              		.loc 2 579 0 discriminator 10
 4355 400c 80BDDFF2 		cmpb	$57, -3361(%rbp)
 4355      FFFF39
 4356 4013 7E53     		jle	.L229
 4357              	.L228:
 4358              		.loc 2 579 0 discriminator 11
 4359 4015 488B85B8 		movq	-3400(%rbp), %rax
 4359      F2FFFF
 4360 401c 4889C2   		movq	%rax, %rdx
 4361 401f 488B85C0 		movq	-3392(%rbp), %rax
 4361      F2FFFF
 4362 4026 4829C2   		subq	%rax, %rdx
 4363 4029 4889D0   		movq	%rdx, %rax
 4364 402c 4889C7   		movq	%rax, %rdi
 4365 402f E87CC1FF 		call	spaces
 4365      FF
 4366 4034 4889C1   		movq	%rax, %rcx
 4367 4037 488B95C0 		movq	-3392(%rbp), %rdx
 4367      F2FFFF
 4368 403e 488B85B0 		movq	-3408(%rbp), %rax
 4368      F2FFFF
 4369 4045 488D3500 		leaq	.LC34(%rip), %rsi
 4369      000000
 4370 404c 4889C7   		movq	%rax, %rdi
 4371 404f B8000000 		movl	$0, %eax
 4371      00
 4372 4054 E8000000 		call	errRender@PLT
 4372      00
 4373 4059 C785E8F2 		movl	$11, -3352(%rbp)
 4373      FFFF0B00 
 4373      0000
 4374 4063 E9D40900 		jmp	.L216
 4374      00
 4375              	.L229:
 4376              		.loc 2 579 0 discriminator 12
 4377 4068 488B85B8 		movq	-3400(%rbp), %rax
 4377      F2FFFF
 4378 406f 488D8DB8 		leaq	-3400(%rbp), %rcx
 4378      F2FFFF
 4379 4076 BA0A0000 		movl	$10, %edx
 4379      00
 4380 407b 4889CE   		movq	%rcx, %rsi
 4381 407e 4889C7   		movq	%rax, %rdi
 4382 4081 E8000000 		call	strtoul@PLT
 4382      00
 4383 4086 8885E3F2 		movb	%al, -3357(%rbp)
 4383      FFFF
 580:prog.c        **** 	SET_BIT(mosiPort, mosiBit, PIN_LOW, "progOpen");
 4384              		.loc 2 580 0 is_stmt 1 discriminator 12
 4385 408c 0FB695E2 		movzbl	-3358(%rbp), %edx
 4385      F2FFFF
 4386 4093 0FB685E3 		movzbl	-3357(%rbp), %eax
 4386      F2FFFF
 4387 409a 4898     		cltq
 4388 409c 4863D2   		movslq	%edx, %rdx
 4389 409f 48C1E205 		salq	$5, %rdx
 4390 40a3 4801D0   		addq	%rdx, %rax
 4391 40a6 8B8485F0 		movl	-3344(%rbp,%rax,4), %eax
 4391      F2FFFF
 4392 40ad 85C0     		testl	%eax, %eax
 4393 40af 7472     		je	.L230
 4394              		.loc 2 580 0 is_stmt 0 discriminator 1
 4395 40b1 488B85B8 		movq	-3400(%rbp), %rax
 4395      F2FFFF
 4396 40b8 4889C2   		movq	%rax, %rdx
 4397 40bb 488B85C0 		movq	-3392(%rbp), %rax
 4397      F2FFFF
 4398 40c2 4829C2   		subq	%rax, %rdx
 4399 40c5 4889D0   		movq	%rdx, %rax
 4400 40c8 4883E801 		subq	$1, %rax
 4401 40cc 4889C7   		movq	%rax, %rdi
 4402 40cf E8DCC0FF 		call	spaces
 4402      FF
 4403 40d4 4889C7   		movq	%rax, %rdi
 4404 40d7 0FB695E3 		movzbl	-3357(%rbp), %edx
 4404      F2FFFF
 4405 40de 0FB685E2 		movzbl	-3358(%rbp), %eax
 4405      F2FFFF
 4406 40e5 8D7041   		leal	65(%rax), %esi
 4407 40e8 488B8DC0 		movq	-3392(%rbp), %rcx
 4407      F2FFFF
 4408 40ef 488B85B0 		movq	-3408(%rbp), %rax
 4408      F2FFFF
 4409 40f6 4989F9   		movq	%rdi, %r9
 4410 40f9 4989C8   		movq	%rcx, %r8
 4411 40fc 89D1     		movl	%edx, %ecx
 4412 40fe 89F2     		movl	%esi, %edx
 4413 4100 488D3500 		leaq	.LC35(%rip), %rsi
 4413      000000
 4414 4107 4889C7   		movq	%rax, %rdi
 4415 410a B8000000 		movl	$0, %eax
 4415      00
 4416 410f E8000000 		call	errRender@PLT
 4416      00
 4417 4114 C785E8F2 		movl	$11, -3352(%rbp)
 4417      FFFF0B00 
 4417      0000
 4418 411e E9190900 		jmp	.L216
 4418      00
 4419              	.L230:
 4420              		.loc 2 580 0 discriminator 2
 4421 4123 0FB695E2 		movzbl	-3358(%rbp), %edx
 4421      F2FFFF
 4422 412a 0FB685E3 		movzbl	-3357(%rbp), %eax
 4422      F2FFFF
 4423 4131 4898     		cltq
 4424 4133 4863D2   		movslq	%edx, %rdx
 4425 4136 48C1E205 		salq	$5, %rdx
 4426 413a 4801D0   		addq	%rdx, %rax
 4427 413d C78485F0 		movl	$2, -3344(%rbp,%rax,4)
 4427      F2FFFF02 
 4427      000000
 581:prog.c        **** 	fStatus = portMap(handle, LP_MOSI, mosiPort, mosiBit, error);
 4428              		.loc 2 581 0 is_stmt 1 discriminator 2
 4429 4148 0FB68DE3 		movzbl	-3357(%rbp), %ecx
 4429      F2FFFF
 4430 414f 0FB695E2 		movzbl	-3358(%rbp), %edx
 4430      F2FFFF
 4431 4156 488BB5B0 		movq	-3408(%rbp), %rsi
 4431      F2FFFF
 4432 415d 488B85C8 		movq	-3384(%rbp), %rax
 4432      F2FFFF
 4433 4164 4989F0   		movq	%rsi, %r8
 4434 4167 BE020000 		movl	$2, %esi
 4434      00
 4435 416c 4889C7   		movq	%rax, %rdi
 4436 416f E8C1C4FF 		call	portMap
 4436      FF
 4437 4174 8985ECF2 		movl	%eax, -3348(%rbp)
 4437      FFFF
 582:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4438              		.loc 2 582 0 discriminator 2
 4439 417a 83BDECF2 		cmpl	$0, -3348(%rbp)
 4439      FFFF00
 4440 4181 7427     		je	.L231
 4441              		.loc 2 582 0 is_stmt 0 discriminator 1
 4442 4183 488B85B0 		movq	-3408(%rbp), %rax
 4442      F2FFFF
 4443 418a 488D3500 		leaq	.LC36(%rip), %rsi
 4443      000000
 4444 4191 4889C7   		movq	%rax, %rdi
 4445 4194 E8000000 		call	errPrefix@PLT
 4445      00
 4446 4199 8B85ECF2 		movl	-3348(%rbp), %eax
 4446      FFFF
 4447 419f 8985E8F2 		movl	%eax, -3352(%rbp)
 4447      FFFF
 4448 41a5 E9920800 		jmp	.L216
 4448      00
 4449              	.L231:
 583:prog.c        **** 
 584:prog.c        **** 	GET_PAIR(ssPort, ssBit, "progOpen");        // SS/TMS
 4450              		.loc 2 584 0 is_stmt 1
 4451 41aa 488B85B8 		movq	-3400(%rbp), %rax
 4451      F2FFFF
 4452 41b1 0FB600   		movzbl	(%rax), %eax
 4453 41b4 8885DFF2 		movb	%al, -3361(%rbp)
 4453      FFFF
 4454 41ba 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4454      FFFF00
 4455 41c1 7553     		jne	.L232
 4456              		.loc 2 584 0 is_stmt 0 discriminator 1
 4457 41c3 488B85B8 		movq	-3400(%rbp), %rax
 4457      F2FFFF
 4458 41ca 4889C2   		movq	%rax, %rdx
 4459 41cd 488B85C0 		movq	-3392(%rbp), %rax
 4459      F2FFFF
 4460 41d4 4829C2   		subq	%rax, %rdx
 4461 41d7 4889D0   		movq	%rdx, %rax
 4462 41da 4889C7   		movq	%rax, %rdi
 4463 41dd E8CEBFFF 		call	spaces
 4463      FF
 4464 41e2 4889C1   		movq	%rax, %rcx
 4465 41e5 488B95C0 		movq	-3392(%rbp), %rdx
 4465      F2FFFF
 4466 41ec 488B85B0 		movq	-3408(%rbp), %rax
 4466      F2FFFF
 4467 41f3 488D3500 		leaq	.LC32(%rip), %rsi
 4467      000000
 4468 41fa 4889C7   		movq	%rax, %rdi
 4469 41fd B8000000 		movl	$0, %eax
 4469      00
 4470 4202 E8000000 		call	errRender@PLT
 4470      00
 4471 4207 C785E8F2 		movl	$11, -3352(%rbp)
 4471      FFFF0B00 
 4471      0000
 4472 4211 E9260800 		jmp	.L216
 4472      00
 4473              	.L232:
 4474              		.loc 2 584 0 discriminator 2
 4475 4216 80BDDFF2 		cmpb	$64, -3361(%rbp)
 4475      FFFF40
 4476 421d 7E09     		jle	.L233
 4477              		.loc 2 584 0 discriminator 4
 4478 421f 80BDDFF2 		cmpb	$90, -3361(%rbp)
 4478      FFFF5A
 4479 4226 7E53     		jle	.L234
 4480              	.L233:
 4481              		.loc 2 584 0 discriminator 5
 4482 4228 488B85B8 		movq	-3400(%rbp), %rax
 4482      F2FFFF
 4483 422f 4889C2   		movq	%rax, %rdx
 4484 4232 488B85C0 		movq	-3392(%rbp), %rax
 4484      F2FFFF
 4485 4239 4829C2   		subq	%rax, %rdx
 4486 423c 4889D0   		movq	%rdx, %rax
 4487 423f 4889C7   		movq	%rax, %rdi
 4488 4242 E869BFFF 		call	spaces
 4488      FF
 4489 4247 4889C1   		movq	%rax, %rcx
 4490 424a 488B95C0 		movq	-3392(%rbp), %rdx
 4490      F2FFFF
 4491 4251 488B85B0 		movq	-3408(%rbp), %rax
 4491      F2FFFF
 4492 4258 488D3500 		leaq	.LC33(%rip), %rsi
 4492      000000
 4493 425f 4889C7   		movq	%rax, %rdi
 4494 4262 B8000000 		movl	$0, %eax
 4494      00
 4495 4267 E8000000 		call	errRender@PLT
 4495      00
 4496 426c C785E8F2 		movl	$11, -3352(%rbp)
 4496      FFFF0B00 
 4496      0000
 4497 4276 E9C10700 		jmp	.L216
 4497      00
 4498              	.L234:
 4499              		.loc 2 584 0 discriminator 6
 4500 427b 0FB685DF 		movzbl	-3361(%rbp), %eax
 4500      F2FFFF
 4501 4282 83E841   		subl	$65, %eax
 4502 4285 8885E4F2 		movb	%al, -3356(%rbp)
 4502      FFFF
 4503 428b 488B85B8 		movq	-3400(%rbp), %rax
 4503      F2FFFF
 4504 4292 4883C001 		addq	$1, %rax
 4505 4296 488985B8 		movq	%rax, -3400(%rbp)
 4505      F2FFFF
 4506 429d 488B85B8 		movq	-3400(%rbp), %rax
 4506      F2FFFF
 4507 42a4 0FB600   		movzbl	(%rax), %eax
 4508 42a7 8885DFF2 		movb	%al, -3361(%rbp)
 4508      FFFF
 4509 42ad 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4509      FFFF00
 4510 42b4 7553     		jne	.L235
 4511              		.loc 2 584 0 discriminator 7
 4512 42b6 488B85B8 		movq	-3400(%rbp), %rax
 4512      F2FFFF
 4513 42bd 4889C2   		movq	%rax, %rdx
 4514 42c0 488B85C0 		movq	-3392(%rbp), %rax
 4514      F2FFFF
 4515 42c7 4829C2   		subq	%rax, %rdx
 4516 42ca 4889D0   		movq	%rdx, %rax
 4517 42cd 4889C7   		movq	%rax, %rdi
 4518 42d0 E8DBBEFF 		call	spaces
 4518      FF
 4519 42d5 4889C1   		movq	%rax, %rcx
 4520 42d8 488B95C0 		movq	-3392(%rbp), %rdx
 4520      F2FFFF
 4521 42df 488B85B0 		movq	-3408(%rbp), %rax
 4521      F2FFFF
 4522 42e6 488D3500 		leaq	.LC32(%rip), %rsi
 4522      000000
 4523 42ed 4889C7   		movq	%rax, %rdi
 4524 42f0 B8000000 		movl	$0, %eax
 4524      00
 4525 42f5 E8000000 		call	errRender@PLT
 4525      00
 4526 42fa C785E8F2 		movl	$11, -3352(%rbp)
 4526      FFFF0B00 
 4526      0000
 4527 4304 E9330700 		jmp	.L216
 4527      00
 4528              	.L235:
 4529              		.loc 2 584 0 discriminator 8
 4530 4309 80BDDFF2 		cmpb	$47, -3361(%rbp)
 4530      FFFF2F
 4531 4310 7E09     		jle	.L236
 4532              		.loc 2 584 0 discriminator 10
 4533 4312 80BDDFF2 		cmpb	$57, -3361(%rbp)
 4533      FFFF39
 4534 4319 7E53     		jle	.L237
 4535              	.L236:
 4536              		.loc 2 584 0 discriminator 11
 4537 431b 488B85B8 		movq	-3400(%rbp), %rax
 4537      F2FFFF
 4538 4322 4889C2   		movq	%rax, %rdx
 4539 4325 488B85C0 		movq	-3392(%rbp), %rax
 4539      F2FFFF
 4540 432c 4829C2   		subq	%rax, %rdx
 4541 432f 4889D0   		movq	%rdx, %rax
 4542 4332 4889C7   		movq	%rax, %rdi
 4543 4335 E876BEFF 		call	spaces
 4543      FF
 4544 433a 4889C1   		movq	%rax, %rcx
 4545 433d 488B95C0 		movq	-3392(%rbp), %rdx
 4545      F2FFFF
 4546 4344 488B85B0 		movq	-3408(%rbp), %rax
 4546      F2FFFF
 4547 434b 488D3500 		leaq	.LC34(%rip), %rsi
 4547      000000
 4548 4352 4889C7   		movq	%rax, %rdi
 4549 4355 B8000000 		movl	$0, %eax
 4549      00
 4550 435a E8000000 		call	errRender@PLT
 4550      00
 4551 435f C785E8F2 		movl	$11, -3352(%rbp)
 4551      FFFF0B00 
 4551      0000
 4552 4369 E9CE0600 		jmp	.L216
 4552      00
 4553              	.L237:
 4554              		.loc 2 584 0 discriminator 12
 4555 436e 488B85B8 		movq	-3400(%rbp), %rax
 4555      F2FFFF
 4556 4375 488D8DB8 		leaq	-3400(%rbp), %rcx
 4556      F2FFFF
 4557 437c BA0A0000 		movl	$10, %edx
 4557      00
 4558 4381 4889CE   		movq	%rcx, %rsi
 4559 4384 4889C7   		movq	%rax, %rdi
 4560 4387 E8000000 		call	strtoul@PLT
 4560      00
 4561 438c 8885E5F2 		movb	%al, -3355(%rbp)
 4561      FFFF
 585:prog.c        **** 	SET_BIT(ssPort, ssBit, PIN_LOW, "progOpen");
 4562              		.loc 2 585 0 is_stmt 1 discriminator 12
 4563 4392 0FB695E4 		movzbl	-3356(%rbp), %edx
 4563      F2FFFF
 4564 4399 0FB685E5 		movzbl	-3355(%rbp), %eax
 4564      F2FFFF
 4565 43a0 4898     		cltq
 4566 43a2 4863D2   		movslq	%edx, %rdx
 4567 43a5 48C1E205 		salq	$5, %rdx
 4568 43a9 4801D0   		addq	%rdx, %rax
 4569 43ac 8B8485F0 		movl	-3344(%rbp,%rax,4), %eax
 4569      F2FFFF
 4570 43b3 85C0     		testl	%eax, %eax
 4571 43b5 7472     		je	.L238
 4572              		.loc 2 585 0 is_stmt 0 discriminator 1
 4573 43b7 488B85B8 		movq	-3400(%rbp), %rax
 4573      F2FFFF
 4574 43be 4889C2   		movq	%rax, %rdx
 4575 43c1 488B85C0 		movq	-3392(%rbp), %rax
 4575      F2FFFF
 4576 43c8 4829C2   		subq	%rax, %rdx
 4577 43cb 4889D0   		movq	%rdx, %rax
 4578 43ce 4883E801 		subq	$1, %rax
 4579 43d2 4889C7   		movq	%rax, %rdi
 4580 43d5 E8D6BDFF 		call	spaces
 4580      FF
 4581 43da 4889C7   		movq	%rax, %rdi
 4582 43dd 0FB695E5 		movzbl	-3355(%rbp), %edx
 4582      F2FFFF
 4583 43e4 0FB685E4 		movzbl	-3356(%rbp), %eax
 4583      F2FFFF
 4584 43eb 8D7041   		leal	65(%rax), %esi
 4585 43ee 488B8DC0 		movq	-3392(%rbp), %rcx
 4585      F2FFFF
 4586 43f5 488B85B0 		movq	-3408(%rbp), %rax
 4586      F2FFFF
 4587 43fc 4989F9   		movq	%rdi, %r9
 4588 43ff 4989C8   		movq	%rcx, %r8
 4589 4402 89D1     		movl	%edx, %ecx
 4590 4404 89F2     		movl	%esi, %edx
 4591 4406 488D3500 		leaq	.LC35(%rip), %rsi
 4591      000000
 4592 440d 4889C7   		movq	%rax, %rdi
 4593 4410 B8000000 		movl	$0, %eax
 4593      00
 4594 4415 E8000000 		call	errRender@PLT
 4594      00
 4595 441a C785E8F2 		movl	$11, -3352(%rbp)
 4595      FFFF0B00 
 4595      0000
 4596 4424 E9130600 		jmp	.L216
 4596      00
 4597              	.L238:
 4598              		.loc 2 585 0 discriminator 2
 4599 4429 0FB695E4 		movzbl	-3356(%rbp), %edx
 4599      F2FFFF
 4600 4430 0FB685E5 		movzbl	-3355(%rbp), %eax
 4600      F2FFFF
 4601 4437 4898     		cltq
 4602 4439 4863D2   		movslq	%edx, %rdx
 4603 443c 48C1E205 		salq	$5, %rdx
 4604 4440 4801D0   		addq	%rdx, %rax
 4605 4443 C78485F0 		movl	$2, -3344(%rbp,%rax,4)
 4605      F2FFFF02 
 4605      000000
 586:prog.c        **** 	fStatus = portMap(handle, LP_SS, ssPort, ssBit, error);
 4606              		.loc 2 586 0 is_stmt 1 discriminator 2
 4607 444e 0FB68DE5 		movzbl	-3355(%rbp), %ecx
 4607      F2FFFF
 4608 4455 0FB695E4 		movzbl	-3356(%rbp), %edx
 4608      F2FFFF
 4609 445c 488BB5B0 		movq	-3408(%rbp), %rsi
 4609      F2FFFF
 4610 4463 488B85C8 		movq	-3384(%rbp), %rax
 4610      F2FFFF
 4611 446a 4989F0   		movq	%rsi, %r8
 4612 446d BE030000 		movl	$3, %esi
 4612      00
 4613 4472 4889C7   		movq	%rax, %rdi
 4614 4475 E8BBC1FF 		call	portMap
 4614      FF
 4615 447a 8985ECF2 		movl	%eax, -3348(%rbp)
 4615      FFFF
 587:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4616              		.loc 2 587 0 discriminator 2
 4617 4480 83BDECF2 		cmpl	$0, -3348(%rbp)
 4617      FFFF00
 4618 4487 7427     		je	.L239
 4619              		.loc 2 587 0 is_stmt 0 discriminator 1
 4620 4489 488B85B0 		movq	-3408(%rbp), %rax
 4620      F2FFFF
 4621 4490 488D3500 		leaq	.LC36(%rip), %rsi
 4621      000000
 4622 4497 4889C7   		movq	%rax, %rdi
 4623 449a E8000000 		call	errPrefix@PLT
 4623      00
 4624 449f 8B85ECF2 		movl	-3348(%rbp), %eax
 4624      FFFF
 4625 44a5 8985E8F2 		movl	%eax, -3352(%rbp)
 4625      FFFF
 4626 44ab E98C0500 		jmp	.L216
 4626      00
 4627              	.L239:
 588:prog.c        **** 
 589:prog.c        **** 	GET_PAIR(sckPort, sckBit, "progOpen");        // SCK/TCK
 4628              		.loc 2 589 0 is_stmt 1
 4629 44b0 488B85B8 		movq	-3400(%rbp), %rax
 4629      F2FFFF
 4630 44b7 0FB600   		movzbl	(%rax), %eax
 4631 44ba 8885DFF2 		movb	%al, -3361(%rbp)
 4631      FFFF
 4632 44c0 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4632      FFFF00
 4633 44c7 7553     		jne	.L240
 4634              		.loc 2 589 0 is_stmt 0 discriminator 1
 4635 44c9 488B85B8 		movq	-3400(%rbp), %rax
 4635      F2FFFF
 4636 44d0 4889C2   		movq	%rax, %rdx
 4637 44d3 488B85C0 		movq	-3392(%rbp), %rax
 4637      F2FFFF
 4638 44da 4829C2   		subq	%rax, %rdx
 4639 44dd 4889D0   		movq	%rdx, %rax
 4640 44e0 4889C7   		movq	%rax, %rdi
 4641 44e3 E8C8BCFF 		call	spaces
 4641      FF
 4642 44e8 4889C1   		movq	%rax, %rcx
 4643 44eb 488B95C0 		movq	-3392(%rbp), %rdx
 4643      F2FFFF
 4644 44f2 488B85B0 		movq	-3408(%rbp), %rax
 4644      F2FFFF
 4645 44f9 488D3500 		leaq	.LC32(%rip), %rsi
 4645      000000
 4646 4500 4889C7   		movq	%rax, %rdi
 4647 4503 B8000000 		movl	$0, %eax
 4647      00
 4648 4508 E8000000 		call	errRender@PLT
 4648      00
 4649 450d C785E8F2 		movl	$11, -3352(%rbp)
 4649      FFFF0B00 
 4649      0000
 4650 4517 E9200500 		jmp	.L216
 4650      00
 4651              	.L240:
 4652              		.loc 2 589 0 discriminator 2
 4653 451c 80BDDFF2 		cmpb	$64, -3361(%rbp)
 4653      FFFF40
 4654 4523 7E09     		jle	.L241
 4655              		.loc 2 589 0 discriminator 4
 4656 4525 80BDDFF2 		cmpb	$90, -3361(%rbp)
 4656      FFFF5A
 4657 452c 7E53     		jle	.L242
 4658              	.L241:
 4659              		.loc 2 589 0 discriminator 5
 4660 452e 488B85B8 		movq	-3400(%rbp), %rax
 4660      F2FFFF
 4661 4535 4889C2   		movq	%rax, %rdx
 4662 4538 488B85C0 		movq	-3392(%rbp), %rax
 4662      F2FFFF
 4663 453f 4829C2   		subq	%rax, %rdx
 4664 4542 4889D0   		movq	%rdx, %rax
 4665 4545 4889C7   		movq	%rax, %rdi
 4666 4548 E863BCFF 		call	spaces
 4666      FF
 4667 454d 4889C1   		movq	%rax, %rcx
 4668 4550 488B95C0 		movq	-3392(%rbp), %rdx
 4668      F2FFFF
 4669 4557 488B85B0 		movq	-3408(%rbp), %rax
 4669      F2FFFF
 4670 455e 488D3500 		leaq	.LC33(%rip), %rsi
 4670      000000
 4671 4565 4889C7   		movq	%rax, %rdi
 4672 4568 B8000000 		movl	$0, %eax
 4672      00
 4673 456d E8000000 		call	errRender@PLT
 4673      00
 4674 4572 C785E8F2 		movl	$11, -3352(%rbp)
 4674      FFFF0B00 
 4674      0000
 4675 457c E9BB0400 		jmp	.L216
 4675      00
 4676              	.L242:
 4677              		.loc 2 589 0 discriminator 6
 4678 4581 0FB685DF 		movzbl	-3361(%rbp), %eax
 4678      F2FFFF
 4679 4588 83E841   		subl	$65, %eax
 4680 458b 8885E6F2 		movb	%al, -3354(%rbp)
 4680      FFFF
 4681 4591 488B85B8 		movq	-3400(%rbp), %rax
 4681      F2FFFF
 4682 4598 4883C001 		addq	$1, %rax
 4683 459c 488985B8 		movq	%rax, -3400(%rbp)
 4683      F2FFFF
 4684 45a3 488B85B8 		movq	-3400(%rbp), %rax
 4684      F2FFFF
 4685 45aa 0FB600   		movzbl	(%rax), %eax
 4686 45ad 8885DFF2 		movb	%al, -3361(%rbp)
 4686      FFFF
 4687 45b3 80BDDFF2 		cmpb	$0, -3361(%rbp)
 4687      FFFF00
 4688 45ba 7553     		jne	.L243
 4689              		.loc 2 589 0 discriminator 7
 4690 45bc 488B85B8 		movq	-3400(%rbp), %rax
 4690      F2FFFF
 4691 45c3 4889C2   		movq	%rax, %rdx
 4692 45c6 488B85C0 		movq	-3392(%rbp), %rax
 4692      F2FFFF
 4693 45cd 4829C2   		subq	%rax, %rdx
 4694 45d0 4889D0   		movq	%rdx, %rax
 4695 45d3 4889C7   		movq	%rax, %rdi
 4696 45d6 E8D5BBFF 		call	spaces
 4696      FF
 4697 45db 4889C1   		movq	%rax, %rcx
 4698 45de 488B95C0 		movq	-3392(%rbp), %rdx
 4698      F2FFFF
 4699 45e5 488B85B0 		movq	-3408(%rbp), %rax
 4699      F2FFFF
 4700 45ec 488D3500 		leaq	.LC32(%rip), %rsi
 4700      000000
 4701 45f3 4889C7   		movq	%rax, %rdi
 4702 45f6 B8000000 		movl	$0, %eax
 4702      00
 4703 45fb E8000000 		call	errRender@PLT
 4703      00
 4704 4600 C785E8F2 		movl	$11, -3352(%rbp)
 4704      FFFF0B00 
 4704      0000
 4705 460a E92D0400 		jmp	.L216
 4705      00
 4706              	.L243:
 4707              		.loc 2 589 0 discriminator 8
 4708 460f 80BDDFF2 		cmpb	$47, -3361(%rbp)
 4708      FFFF2F
 4709 4616 7E09     		jle	.L244
 4710              		.loc 2 589 0 discriminator 10
 4711 4618 80BDDFF2 		cmpb	$57, -3361(%rbp)
 4711      FFFF39
 4712 461f 7E53     		jle	.L245
 4713              	.L244:
 4714              		.loc 2 589 0 discriminator 11
 4715 4621 488B85B8 		movq	-3400(%rbp), %rax
 4715      F2FFFF
 4716 4628 4889C2   		movq	%rax, %rdx
 4717 462b 488B85C0 		movq	-3392(%rbp), %rax
 4717      F2FFFF
 4718 4632 4829C2   		subq	%rax, %rdx
 4719 4635 4889D0   		movq	%rdx, %rax
 4720 4638 4889C7   		movq	%rax, %rdi
 4721 463b E870BBFF 		call	spaces
 4721      FF
 4722 4640 4889C1   		movq	%rax, %rcx
 4723 4643 488B95C0 		movq	-3392(%rbp), %rdx
 4723      F2FFFF
 4724 464a 488B85B0 		movq	-3408(%rbp), %rax
 4724      F2FFFF
 4725 4651 488D3500 		leaq	.LC34(%rip), %rsi
 4725      000000
 4726 4658 4889C7   		movq	%rax, %rdi
 4727 465b B8000000 		movl	$0, %eax
 4727      00
 4728 4660 E8000000 		call	errRender@PLT
 4728      00
 4729 4665 C785E8F2 		movl	$11, -3352(%rbp)
 4729      FFFF0B00 
 4729      0000
 4730 466f E9C80300 		jmp	.L216
 4730      00
 4731              	.L245:
 4732              		.loc 2 589 0 discriminator 12
 4733 4674 488B85B8 		movq	-3400(%rbp), %rax
 4733      F2FFFF
 4734 467b 488D8DB8 		leaq	-3400(%rbp), %rcx
 4734      F2FFFF
 4735 4682 BA0A0000 		movl	$10, %edx
 4735      00
 4736 4687 4889CE   		movq	%rcx, %rsi
 4737 468a 4889C7   		movq	%rax, %rdi
 4738 468d E8000000 		call	strtoul@PLT
 4738      00
 4739 4692 8885E7F2 		movb	%al, -3353(%rbp)
 4739      FFFF
 590:prog.c        **** 	SET_BIT(sckPort, sckBit, PIN_LOW, "progOpen");
 4740              		.loc 2 590 0 is_stmt 1 discriminator 12
 4741 4698 0FB695E6 		movzbl	-3354(%rbp), %edx
 4741      F2FFFF
 4742 469f 0FB685E7 		movzbl	-3353(%rbp), %eax
 4742      F2FFFF
 4743 46a6 4898     		cltq
 4744 46a8 4863D2   		movslq	%edx, %rdx
 4745 46ab 48C1E205 		salq	$5, %rdx
 4746 46af 4801D0   		addq	%rdx, %rax
 4747 46b2 8B8485F0 		movl	-3344(%rbp,%rax,4), %eax
 4747      F2FFFF
 4748 46b9 85C0     		testl	%eax, %eax
 4749 46bb 7472     		je	.L246
 4750              		.loc 2 590 0 is_stmt 0 discriminator 1
 4751 46bd 488B85B8 		movq	-3400(%rbp), %rax
 4751      F2FFFF
 4752 46c4 4889C2   		movq	%rax, %rdx
 4753 46c7 488B85C0 		movq	-3392(%rbp), %rax
 4753      F2FFFF
 4754 46ce 4829C2   		subq	%rax, %rdx
 4755 46d1 4889D0   		movq	%rdx, %rax
 4756 46d4 4883E801 		subq	$1, %rax
 4757 46d8 4889C7   		movq	%rax, %rdi
 4758 46db E8D0BAFF 		call	spaces
 4758      FF
 4759 46e0 4889C7   		movq	%rax, %rdi
 4760 46e3 0FB695E7 		movzbl	-3353(%rbp), %edx
 4760      F2FFFF
 4761 46ea 0FB685E6 		movzbl	-3354(%rbp), %eax
 4761      F2FFFF
 4762 46f1 8D7041   		leal	65(%rax), %esi
 4763 46f4 488B8DC0 		movq	-3392(%rbp), %rcx
 4763      F2FFFF
 4764 46fb 488B85B0 		movq	-3408(%rbp), %rax
 4764      F2FFFF
 4765 4702 4989F9   		movq	%rdi, %r9
 4766 4705 4989C8   		movq	%rcx, %r8
 4767 4708 89D1     		movl	%edx, %ecx
 4768 470a 89F2     		movl	%esi, %edx
 4769 470c 488D3500 		leaq	.LC35(%rip), %rsi
 4769      000000
 4770 4713 4889C7   		movq	%rax, %rdi
 4771 4716 B8000000 		movl	$0, %eax
 4771      00
 4772 471b E8000000 		call	errRender@PLT
 4772      00
 4773 4720 C785E8F2 		movl	$11, -3352(%rbp)
 4773      FFFF0B00 
 4773      0000
 4774 472a E90D0300 		jmp	.L216
 4774      00
 4775              	.L246:
 4776              		.loc 2 590 0 discriminator 2
 4777 472f 0FB695E6 		movzbl	-3354(%rbp), %edx
 4777      F2FFFF
 4778 4736 0FB685E7 		movzbl	-3353(%rbp), %eax
 4778      F2FFFF
 4779 473d 4898     		cltq
 4780 473f 4863D2   		movslq	%edx, %rdx
 4781 4742 48C1E205 		salq	$5, %rdx
 4782 4746 4801D0   		addq	%rdx, %rax
 4783 4749 C78485F0 		movl	$2, -3344(%rbp,%rax,4)
 4783      F2FFFF02 
 4783      000000
 591:prog.c        **** 	fStatus = portMap(handle, LP_SCK, sckPort, sckBit, error);
 4784              		.loc 2 591 0 is_stmt 1 discriminator 2
 4785 4754 0FB68DE7 		movzbl	-3353(%rbp), %ecx
 4785      F2FFFF
 4786 475b 0FB695E6 		movzbl	-3354(%rbp), %edx
 4786      F2FFFF
 4787 4762 488BB5B0 		movq	-3408(%rbp), %rsi
 4787      F2FFFF
 4788 4769 488B85C8 		movq	-3384(%rbp), %rax
 4788      F2FFFF
 4789 4770 4989F0   		movq	%rsi, %r8
 4790 4773 BE040000 		movl	$4, %esi
 4790      00
 4791 4778 4889C7   		movq	%rax, %rdi
 4792 477b E8B5BEFF 		call	portMap
 4792      FF
 4793 4780 8985ECF2 		movl	%eax, -3348(%rbp)
 4793      FFFF
 592:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4794              		.loc 2 592 0 discriminator 2
 4795 4786 83BDECF2 		cmpl	$0, -3348(%rbp)
 4795      FFFF00
 4796 478d 7427     		je	.L247
 4797              		.loc 2 592 0 is_stmt 0 discriminator 1
 4798 478f 488B85B0 		movq	-3408(%rbp), %rax
 4798      F2FFFF
 4799 4796 488D3500 		leaq	.LC36(%rip), %rsi
 4799      000000
 4800 479d 4889C7   		movq	%rax, %rdi
 4801 47a0 E8000000 		call	errPrefix@PLT
 4801      00
 4802 47a5 8B85ECF2 		movl	-3348(%rbp), %eax
 4802      FFFF
 4803 47ab 8985E8F2 		movl	%eax, -3352(%rbp)
 4803      FFFF
 4804 47b1 E9860200 		jmp	.L216
 4804      00
 4805              	.L247:
 593:prog.c        **** 
 594:prog.c        **** 	fStatus = portMap(handle, LP_CHOOSE, 0x00, 0x00, error);
 4806              		.loc 2 594 0 is_stmt 1
 4807 47b6 488B95B0 		movq	-3408(%rbp), %rdx
 4807      F2FFFF
 4808 47bd 488B85C8 		movq	-3384(%rbp), %rax
 4808      F2FFFF
 4809 47c4 4989D0   		movq	%rdx, %r8
 4810 47c7 B9000000 		movl	$0, %ecx
 4810      00
 4811 47cc BA000000 		movl	$0, %edx
 4811      00
 4812 47d1 BE000000 		movl	$0, %esi
 4812      00
 4813 47d6 4889C7   		movq	%rax, %rdi
 4814 47d9 E857BEFF 		call	portMap
 4814      FF
 4815 47de 8985ECF2 		movl	%eax, -3348(%rbp)
 4815      FFFF
 595:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4816              		.loc 2 595 0
 4817 47e4 83BDECF2 		cmpl	$0, -3348(%rbp)
 4817      FFFF00
 4818 47eb 7427     		je	.L248
 4819              		.loc 2 595 0 is_stmt 0 discriminator 1
 4820 47ed 488B85B0 		movq	-3408(%rbp), %rax
 4820      F2FFFF
 4821 47f4 488D3500 		leaq	.LC36(%rip), %rsi
 4821      000000
 4822 47fb 4889C7   		movq	%rax, %rdi
 4823 47fe E8000000 		call	errPrefix@PLT
 4823      00
 4824 4803 8B85ECF2 		movl	-3348(%rbp), %eax
 4824      FFFF
 4825 4809 8985E8F2 		movl	%eax, -3352(%rbp)
 4825      FFFF
 4826 480f E9280200 		jmp	.L216
 4826      00
 4827              	.L248:
 596:prog.c        **** 
 597:prog.c        **** 	// Set MISO/TDO as an input and the other three as outputs
 598:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, misoPort, misoBit, PIN_INPUT, NULL, error);
 4828              		.loc 2 598 0 is_stmt 1
 4829 4814 0FB695E1 		movzbl	-3359(%rbp), %edx
 4829      F2FFFF
 4830 481b 0FB6B5E0 		movzbl	-3360(%rbp), %esi
 4830      F2FFFF
 4831 4822 488B8DB0 		movq	-3408(%rbp), %rcx
 4831      F2FFFF
 4832 4829 488B85C8 		movq	-3384(%rbp), %rax
 4832      F2FFFF
 4833 4830 4989C9   		movq	%rcx, %r9
 4834 4833 41B80000 		movl	$0, %r8d
 4834      0000
 4835 4839 B9030000 		movl	$3, %ecx
 4835      00
 4836 483e 4889C7   		movq	%rax, %rdi
 4837 4841 E8000000 		call	flSingleBitPortAccess@PLT
 4837      00
 4838 4846 8985ECF2 		movl	%eax, -3348(%rbp)
 4838      FFFF
 599:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4839              		.loc 2 599 0
 4840 484c 83BDECF2 		cmpl	$0, -3348(%rbp)
 4840      FFFF00
 4841 4853 7427     		je	.L249
 4842              		.loc 2 599 0 is_stmt 0 discriminator 1
 4843 4855 488B85B0 		movq	-3408(%rbp), %rax
 4843      F2FFFF
 4844 485c 488D3500 		leaq	.LC36(%rip), %rsi
 4844      000000
 4845 4863 4889C7   		movq	%rax, %rdi
 4846 4866 E8000000 		call	errPrefix@PLT
 4846      00
 4847 486b 8B85ECF2 		movl	-3348(%rbp), %eax
 4847      FFFF
 4848 4871 8985E8F2 		movl	%eax, -3352(%rbp)
 4848      FFFF
 4849 4877 E9C00100 		jmp	.L216
 4849      00
 4850              	.L249:
 600:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, mosiPort, mosiBit, PIN_LOW, NULL, error);
 4851              		.loc 2 600 0 is_stmt 1
 4852 487c 0FB695E3 		movzbl	-3357(%rbp), %edx
 4852      F2FFFF
 4853 4883 0FB6B5E2 		movzbl	-3358(%rbp), %esi
 4853      F2FFFF
 4854 488a 488B8DB0 		movq	-3408(%rbp), %rcx
 4854      F2FFFF
 4855 4891 488B85C8 		movq	-3384(%rbp), %rax
 4855      F2FFFF
 4856 4898 4989C9   		movq	%rcx, %r9
 4857 489b 41B80000 		movl	$0, %r8d
 4857      0000
 4858 48a1 B9020000 		movl	$2, %ecx
 4858      00
 4859 48a6 4889C7   		movq	%rax, %rdi
 4860 48a9 E8000000 		call	flSingleBitPortAccess@PLT
 4860      00
 4861 48ae 8985ECF2 		movl	%eax, -3348(%rbp)
 4861      FFFF
 601:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4862              		.loc 2 601 0
 4863 48b4 83BDECF2 		cmpl	$0, -3348(%rbp)
 4863      FFFF00
 4864 48bb 7427     		je	.L250
 4865              		.loc 2 601 0 is_stmt 0 discriminator 1
 4866 48bd 488B85B0 		movq	-3408(%rbp), %rax
 4866      F2FFFF
 4867 48c4 488D3500 		leaq	.LC36(%rip), %rsi
 4867      000000
 4868 48cb 4889C7   		movq	%rax, %rdi
 4869 48ce E8000000 		call	errPrefix@PLT
 4869      00
 4870 48d3 8B85ECF2 		movl	-3348(%rbp), %eax
 4870      FFFF
 4871 48d9 8985E8F2 		movl	%eax, -3352(%rbp)
 4871      FFFF
 4872 48df E9580100 		jmp	.L216
 4872      00
 4873              	.L250:
 602:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, ssPort, ssBit, PIN_LOW, NULL, error);
 4874              		.loc 2 602 0 is_stmt 1
 4875 48e4 0FB695E5 		movzbl	-3355(%rbp), %edx
 4875      F2FFFF
 4876 48eb 0FB6B5E4 		movzbl	-3356(%rbp), %esi
 4876      F2FFFF
 4877 48f2 488B8DB0 		movq	-3408(%rbp), %rcx
 4877      F2FFFF
 4878 48f9 488B85C8 		movq	-3384(%rbp), %rax
 4878      F2FFFF
 4879 4900 4989C9   		movq	%rcx, %r9
 4880 4903 41B80000 		movl	$0, %r8d
 4880      0000
 4881 4909 B9020000 		movl	$2, %ecx
 4881      00
 4882 490e 4889C7   		movq	%rax, %rdi
 4883 4911 E8000000 		call	flSingleBitPortAccess@PLT
 4883      00
 4884 4916 8985ECF2 		movl	%eax, -3348(%rbp)
 4884      FFFF
 603:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4885              		.loc 2 603 0
 4886 491c 83BDECF2 		cmpl	$0, -3348(%rbp)
 4886      FFFF00
 4887 4923 7427     		je	.L251
 4888              		.loc 2 603 0 is_stmt 0 discriminator 1
 4889 4925 488B85B0 		movq	-3408(%rbp), %rax
 4889      F2FFFF
 4890 492c 488D3500 		leaq	.LC36(%rip), %rsi
 4890      000000
 4891 4933 4889C7   		movq	%rax, %rdi
 4892 4936 E8000000 		call	errPrefix@PLT
 4892      00
 4893 493b 8B85ECF2 		movl	-3348(%rbp), %eax
 4893      FFFF
 4894 4941 8985E8F2 		movl	%eax, -3352(%rbp)
 4894      FFFF
 4895 4947 E9F00000 		jmp	.L216
 4895      00
 4896              	.L251:
 604:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, sckPort, sckBit, PIN_LOW, NULL, error);
 4897              		.loc 2 604 0 is_stmt 1
 4898 494c 0FB695E7 		movzbl	-3353(%rbp), %edx
 4898      F2FFFF
 4899 4953 0FB6B5E6 		movzbl	-3354(%rbp), %esi
 4899      F2FFFF
 4900 495a 488B8DB0 		movq	-3408(%rbp), %rcx
 4900      F2FFFF
 4901 4961 488B85C8 		movq	-3384(%rbp), %rax
 4901      F2FFFF
 4902 4968 4989C9   		movq	%rcx, %r9
 4903 496b 41B80000 		movl	$0, %r8d
 4903      0000
 4904 4971 B9020000 		movl	$2, %ecx
 4904      00
 4905 4976 4889C7   		movq	%rax, %rdi
 4906 4979 E8000000 		call	flSingleBitPortAccess@PLT
 4906      00
 4907 497e 8985ECF2 		movl	%eax, -3348(%rbp)
 4907      FFFF
 605:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4908              		.loc 2 605 0
 4909 4984 83BDECF2 		cmpl	$0, -3348(%rbp)
 4909      FFFF00
 4910 498b 7427     		je	.L252
 4911              		.loc 2 605 0 is_stmt 0 discriminator 1
 4912 498d 488B85B0 		movq	-3408(%rbp), %rax
 4912      F2FFFF
 4913 4994 488D3500 		leaq	.LC36(%rip), %rsi
 4913      000000
 4914 499b 4889C7   		movq	%rax, %rdi
 4915 499e E8000000 		call	errPrefix@PLT
 4915      00
 4916 49a3 8B85ECF2 		movl	-3348(%rbp), %eax
 4916      FFFF
 4917 49a9 8985E8F2 		movl	%eax, -3352(%rbp)
 4917      FFFF
 4918 49af E9880000 		jmp	.L216
 4918      00
 4919              	.L252:
 606:prog.c        **** 
 607:prog.c        **** 	// Remember the ports and bits for the benefit of progClose()
 608:prog.c        **** 	handle->misoPort = misoPort;
 4920              		.loc 2 608 0 is_stmt 1
 4921 49b4 488B85C8 		movq	-3384(%rbp), %rax
 4921      F2FFFF
 4922 49bb 0FB695E0 		movzbl	-3360(%rbp), %edx
 4922      F2FFFF
 4923 49c2 885017   		movb	%dl, 23(%rax)
 609:prog.c        **** 	handle->misoBit = misoBit;
 4924              		.loc 2 609 0
 4925 49c5 488B85C8 		movq	-3384(%rbp), %rax
 4925      F2FFFF
 4926 49cc 0FB695E1 		movzbl	-3359(%rbp), %edx
 4926      F2FFFF
 4927 49d3 885018   		movb	%dl, 24(%rax)
 610:prog.c        **** 	handle->mosiPort = mosiPort;
 4928              		.loc 2 610 0
 4929 49d6 488B85C8 		movq	-3384(%rbp), %rax
 4929      F2FFFF
 4930 49dd 0FB695E2 		movzbl	-3358(%rbp), %edx
 4930      F2FFFF
 4931 49e4 885019   		movb	%dl, 25(%rax)
 611:prog.c        **** 	handle->mosiBit = mosiBit;
 4932              		.loc 2 611 0
 4933 49e7 488B85C8 		movq	-3384(%rbp), %rax
 4933      F2FFFF
 4934 49ee 0FB695E3 		movzbl	-3357(%rbp), %edx
 4934      F2FFFF
 4935 49f5 88501A   		movb	%dl, 26(%rax)
 612:prog.c        **** 	handle->ssPort = ssPort;
 4936              		.loc 2 612 0
 4937 49f8 488B85C8 		movq	-3384(%rbp), %rax
 4937      F2FFFF
 4938 49ff 0FB695E4 		movzbl	-3356(%rbp), %edx
 4938      F2FFFF
 4939 4a06 88501B   		movb	%dl, 27(%rax)
 613:prog.c        **** 	handle->ssBit = ssBit;
 4940              		.loc 2 613 0
 4941 4a09 488B85C8 		movq	-3384(%rbp), %rax
 4941      F2FFFF
 4942 4a10 0FB695E5 		movzbl	-3355(%rbp), %edx
 4942      F2FFFF
 4943 4a17 88501C   		movb	%dl, 28(%rax)
 614:prog.c        **** 	handle->sckPort = sckPort;
 4944              		.loc 2 614 0
 4945 4a1a 488B85C8 		movq	-3384(%rbp), %rax
 4945      F2FFFF
 4946 4a21 0FB695E6 		movzbl	-3354(%rbp), %edx
 4946      F2FFFF
 4947 4a28 88501D   		movb	%dl, 29(%rax)
 615:prog.c        **** 	handle->sckBit = sckBit;
 4948              		.loc 2 615 0
 4949 4a2b 488B85C8 		movq	-3384(%rbp), %rax
 4949      F2FFFF
 4950 4a32 0FB695E7 		movzbl	-3353(%rbp), %edx
 4950      F2FFFF
 4951 4a39 88501E   		movb	%dl, 30(%rax)
 4952              	.L216:
 616:prog.c        **** cleanup:
 617:prog.c        **** 	return retVal;
 4953              		.loc 2 617 0
 4954 4a3c 8B85E8F2 		movl	-3352(%rbp), %eax
 4954      FFFF
 618:prog.c        **** }
 4955              		.loc 2 618 0
 4956 4a42 488B75F8 		movq	-8(%rbp), %rsi
 4957 4a46 64483334 		xorq	%fs:40, %rsi
 4957      25280000 
 4957      00
 4958 4a4f 7405     		je	.L254
 4959 4a51 E8000000 		call	__stack_chk_fail@PLT
 4959      00
 4960              	.L254:
 4961 4a56 C9       		leave
 4962              		.cfi_def_cfa 7, 8
 4963 4a57 C3       		ret
 4964              		.cfi_endproc
 4965              	.LFE14:
 4967              		.section	.rodata
 4968 0747 00       		.align 8
 4969              	.LC37:
 4970 0748 6A50726F 		.string	"jProgram(): Unexpected end of config string:\n  %s\n  %s^"
 4970      6772616D 
 4970      28293A20 
 4970      556E6578 
 4970      70656374 
 4971              		.align 8
 4972              	.LC38:
 4973 0780 6A50726F 		.string	"jProgram(): Expecting ':':\n  %s\n  %s^"
 4973      6772616D 
 4973      28293A20 
 4973      45787065 
 4973      6374696E 
 4974              	.LC39:
 4975 07a6 6A50726F 		.string	"jProgram()"
 4975      6772616D 
 4975      282900
 4976              		.text
 4978              	jProgram:
 4979              	.LFB15:
 619:prog.c        **** 
 620:prog.c        **** // Program a device over JTAG.
 621:prog.c        **** //
 622:prog.c        **** // Called by:
 623:prog.c        **** //   flProgram() -> jProgram()
 624:prog.c        **** //
 625:prog.c        **** static FLStatus jProgram(struct FLContext *handle, const char *portConfig, const uint8 *csvfData, c
 4980              		.loc 2 625 0
 4981              		.cfi_startproc
 4982 4a58 55       		pushq	%rbp
 4983              		.cfi_def_cfa_offset 16
 4984              		.cfi_offset 6, -16
 4985 4a59 4889E5   		movq	%rsp, %rbp
 4986              		.cfi_def_cfa_register 6
 4987 4a5c 4883EC40 		subq	$64, %rsp
 4988 4a60 48897DD8 		movq	%rdi, -40(%rbp)
 4989 4a64 488975D0 		movq	%rsi, -48(%rbp)
 4990 4a68 488955C8 		movq	%rdx, -56(%rbp)
 4991 4a6c 48894DC0 		movq	%rcx, -64(%rbp)
 626:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 4992              		.loc 2 626 0
 4993 4a70 C745F000 		movl	$0, -16(%rbp)
 4993      000000
 627:prog.c        **** 	FLStatus fStatus;
 628:prog.c        **** 	const char *ptr = portConfig + 1;
 4994              		.loc 2 628 0
 4995 4a77 488B45D0 		movq	-48(%rbp), %rax
 4996 4a7b 4883C001 		addq	$1, %rax
 4997 4a7f 488945F8 		movq	%rax, -8(%rbp)
 629:prog.c        **** 	char ch;
 630:prog.c        **** 	EXPECT_CHAR(':', "jProgram");
 4998              		.loc 2 630 0
 4999 4a83 488B45F8 		movq	-8(%rbp), %rax
 5000 4a87 0FB600   		movzbl	(%rax), %eax
 5001 4a8a 8845EF   		movb	%al, -17(%rbp)
 5002 4a8d 807DEF00 		cmpb	$0, -17(%rbp)
 5003 4a91 7541     		jne	.L256
 5004              		.loc 2 630 0 is_stmt 0 discriminator 1
 5005 4a93 488B55F8 		movq	-8(%rbp), %rdx
 5006 4a97 488B45D0 		movq	-48(%rbp), %rax
 5007 4a9b 4829C2   		subq	%rax, %rdx
 5008 4a9e 4889D0   		movq	%rdx, %rax
 5009 4aa1 4889C7   		movq	%rax, %rdi
 5010 4aa4 E807B7FF 		call	spaces
 5010      FF
 5011 4aa9 4889C1   		movq	%rax, %rcx
 5012 4aac 488B55D0 		movq	-48(%rbp), %rdx
 5013 4ab0 488B45C0 		movq	-64(%rbp), %rax
 5014 4ab4 488D3500 		leaq	.LC37(%rip), %rsi
 5014      000000
 5015 4abb 4889C7   		movq	%rax, %rdi
 5016 4abe B8000000 		movl	$0, %eax
 5016      00
 5017 4ac3 E8000000 		call	errRender@PLT
 5017      00
 5018 4ac8 C745F00B 		movl	$11, -16(%rbp)
 5018      000000
 5019 4acf E9F90000 		jmp	.L257
 5019      00
 5020              	.L256:
 5021              		.loc 2 630 0 discriminator 2
 5022 4ad4 807DEF3A 		cmpb	$58, -17(%rbp)
 5023 4ad8 7441     		je	.L258
 5024              		.loc 2 630 0 discriminator 3
 5025 4ada 488B55F8 		movq	-8(%rbp), %rdx
 5026 4ade 488B45D0 		movq	-48(%rbp), %rax
 5027 4ae2 4829C2   		subq	%rax, %rdx
 5028 4ae5 4889D0   		movq	%rdx, %rax
 5029 4ae8 4889C7   		movq	%rax, %rdi
 5030 4aeb E8C0B6FF 		call	spaces
 5030      FF
 5031 4af0 4889C1   		movq	%rax, %rcx
 5032 4af3 488B55D0 		movq	-48(%rbp), %rdx
 5033 4af7 488B45C0 		movq	-64(%rbp), %rax
 5034 4afb 488D3500 		leaq	.LC38(%rip), %rsi
 5034      000000
 5035 4b02 4889C7   		movq	%rax, %rdi
 5036 4b05 B8000000 		movl	$0, %eax
 5036      00
 5037 4b0a E8000000 		call	errRender@PLT
 5037      00
 5038 4b0f C745F00B 		movl	$11, -16(%rbp)
 5038      000000
 5039 4b16 E9B20000 		jmp	.L257
 5039      00
 5040              	.L258:
 5041              		.loc 2 630 0 discriminator 4
 5042 4b1b 488345F8 		addq	$1, -8(%rbp)
 5042      01
 631:prog.c        **** 	fStatus = progOpenInternal(handle, portConfig, ptr, error);
 5043              		.loc 2 631 0 is_stmt 1 discriminator 4
 5044 4b20 488B4DC0 		movq	-64(%rbp), %rcx
 5045 4b24 488B55F8 		movq	-8(%rbp), %rdx
 5046 4b28 488B75D0 		movq	-48(%rbp), %rsi
 5047 4b2c 488B45D8 		movq	-40(%rbp), %rax
 5048 4b30 4889C7   		movq	%rax, %rdi
 5049 4b33 E80FF0FF 		call	progOpenInternal
 5049      FF
 5050 4b38 8945F4   		movl	%eax, -12(%rbp)
 632:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jProgram()");
 5051              		.loc 2 632 0 discriminator 4
 5052 4b3b 837DF400 		cmpl	$0, -12(%rbp)
 5053 4b3f 741B     		je	.L259
 5054              		.loc 2 632 0 is_stmt 0 discriminator 1
 5055 4b41 488B45C0 		movq	-64(%rbp), %rax
 5056 4b45 488D3500 		leaq	.LC39(%rip), %rsi
 5056      000000
 5057 4b4c 4889C7   		movq	%rax, %rdi
 5058 4b4f E8000000 		call	errPrefix@PLT
 5058      00
 5059 4b54 8B45F4   		movl	-12(%rbp), %eax
 5060 4b57 8945F0   		movl	%eax, -16(%rbp)
 5061 4b5a EB71     		jmp	.L257
 5062              	.L259:
 633:prog.c        **** 	fStatus = csvfPlay(handle, csvfData, error);
 5063              		.loc 2 633 0 is_stmt 1
 5064 4b5c 488B55C0 		movq	-64(%rbp), %rdx
 5065 4b60 488B4DC8 		movq	-56(%rbp), %rcx
 5066 4b64 488B45D8 		movq	-40(%rbp), %rax
 5067 4b68 4889CE   		movq	%rcx, %rsi
 5068 4b6b 4889C7   		movq	%rax, %rdi
 5069 4b6e E8000000 		call	csvfPlay@PLT
 5069      00
 5070 4b73 8945F4   		movl	%eax, -12(%rbp)
 634:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jProgram()");
 5071              		.loc 2 634 0
 5072 4b76 837DF400 		cmpl	$0, -12(%rbp)
 5073 4b7a 741B     		je	.L260
 5074              		.loc 2 634 0 is_stmt 0 discriminator 1
 5075 4b7c 488B45C0 		movq	-64(%rbp), %rax
 5076 4b80 488D3500 		leaq	.LC39(%rip), %rsi
 5076      000000
 5077 4b87 4889C7   		movq	%rax, %rdi
 5078 4b8a E8000000 		call	errPrefix@PLT
 5078      00
 5079 4b8f 8B45F4   		movl	-12(%rbp), %eax
 5080 4b92 8945F0   		movl	%eax, -16(%rbp)
 5081 4b95 EB36     		jmp	.L257
 5082              	.L260:
 635:prog.c        **** 	fStatus = progClose(handle, error);
 5083              		.loc 2 635 0 is_stmt 1
 5084 4b97 488B55C0 		movq	-64(%rbp), %rdx
 5085 4b9b 488B45D8 		movq	-40(%rbp), %rax
 5086 4b9f 4889D6   		movq	%rdx, %rsi
 5087 4ba2 4889C7   		movq	%rax, %rdi
 5088 4ba5 E8000000 		call	progClose@PLT
 5088      00
 5089 4baa 8945F4   		movl	%eax, -12(%rbp)
 636:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jProgram()");
 5090              		.loc 2 636 0
 5091 4bad 837DF400 		cmpl	$0, -12(%rbp)
 5092 4bb1 741A     		je	.L257
 5093              		.loc 2 636 0 is_stmt 0 discriminator 1
 5094 4bb3 488B45C0 		movq	-64(%rbp), %rax
 5095 4bb7 488D3500 		leaq	.LC39(%rip), %rsi
 5095      000000
 5096 4bbe 4889C7   		movq	%rax, %rdi
 5097 4bc1 E8000000 		call	errPrefix@PLT
 5097      00
 5098 4bc6 8B45F4   		movl	-12(%rbp), %eax
 5099 4bc9 8945F0   		movl	%eax, -16(%rbp)
 5100 4bcc 90       		nop
 5101              	.L257:
 637:prog.c        **** cleanup:
 638:prog.c        **** 	return retVal;
 5102              		.loc 2 638 0 is_stmt 1
 5103 4bcd 8B45F0   		movl	-16(%rbp), %eax
 639:prog.c        **** }
 5104              		.loc 2 639 0
 5105 4bd0 C9       		leave
 5106              		.cfi_def_cfa 7, 8
 5107 4bd1 C3       		ret
 5108              		.cfi_endproc
 5109              	.LFE15:
 5112              	swap:
 5113              	.LFB16:
 640:prog.c        **** 
 641:prog.c        **** // Reverse the array in-place by swapping the outer items and progressing inward until we meet in
 642:prog.c        **** // the middle.
 643:prog.c        **** //
 644:prog.c        **** // Called by:
 645:prog.c        **** //   jtagScanChain()
 646:prog.c        **** //
 647:prog.c        **** static void swap(uint32 *array, uint32 numWritten) {
 5114              		.loc 2 647 0
 5115              		.cfi_startproc
 5116 4bd2 55       		pushq	%rbp
 5117              		.cfi_def_cfa_offset 16
 5118              		.cfi_offset 6, -16
 5119 4bd3 4889E5   		movq	%rsp, %rbp
 5120              		.cfi_def_cfa_register 6
 5121 4bd6 48897DD8 		movq	%rdi, -40(%rbp)
 5122 4bda 8975D4   		movl	%esi, -44(%rbp)
 648:prog.c        **** 	uint32 *hiPtr = array + numWritten - 1;  // last one
 5123              		.loc 2 648 0
 5124 4bdd 8B45D4   		movl	-44(%rbp), %eax
 5125 4be0 48C1E002 		salq	$2, %rax
 5126 4be4 488D50FC 		leaq	-4(%rax), %rdx
 5127 4be8 488B45D8 		movq	-40(%rbp), %rax
 5128 4bec 4801D0   		addq	%rdx, %rax
 5129 4bef 488945F0 		movq	%rax, -16(%rbp)
 649:prog.c        **** 	uint32 *loPtr = array; // first one
 5130              		.loc 2 649 0
 5131 4bf3 488B45D8 		movq	-40(%rbp), %rax
 5132 4bf7 488945F8 		movq	%rax, -8(%rbp)
 650:prog.c        **** 	uint32 temp;
 651:prog.c        **** 	while ( loPtr < hiPtr ) {
 5133              		.loc 2 651 0
 5134 4bfb EB2E     		jmp	.L263
 5135              	.L264:
 652:prog.c        **** 		temp = *loPtr;
 5136              		.loc 2 652 0
 5137 4bfd 488B45F8 		movq	-8(%rbp), %rax
 5138 4c01 8B00     		movl	(%rax), %eax
 5139 4c03 8945EC   		movl	%eax, -20(%rbp)
 653:prog.c        **** 		*loPtr++ = *hiPtr;
 5140              		.loc 2 653 0
 5141 4c06 488B45F8 		movq	-8(%rbp), %rax
 5142 4c0a 488D5004 		leaq	4(%rax), %rdx
 5143 4c0e 488955F8 		movq	%rdx, -8(%rbp)
 5144 4c12 488B55F0 		movq	-16(%rbp), %rdx
 5145 4c16 8B12     		movl	(%rdx), %edx
 5146 4c18 8910     		movl	%edx, (%rax)
 654:prog.c        **** 		*hiPtr-- = temp;
 5147              		.loc 2 654 0
 5148 4c1a 488B45F0 		movq	-16(%rbp), %rax
 5149 4c1e 488D50FC 		leaq	-4(%rax), %rdx
 5150 4c22 488955F0 		movq	%rdx, -16(%rbp)
 5151 4c26 8B55EC   		movl	-20(%rbp), %edx
 5152 4c29 8910     		movl	%edx, (%rax)
 5153              	.L263:
 651:prog.c        **** 		temp = *loPtr;
 5154              		.loc 2 651 0
 5155 4c2b 488B45F8 		movq	-8(%rbp), %rax
 5156 4c2f 483B45F0 		cmpq	-16(%rbp), %rax
 5157 4c33 72C8     		jb	.L264
 655:prog.c        **** 	}
 656:prog.c        **** }	
 5158              		.loc 2 656 0
 5159 4c35 90       		nop
 5160 4c36 5D       		popq	%rbp
 5161              		.cfi_def_cfa 7, 8
 5162 4c37 C3       		ret
 5163              		.cfi_endproc
 5164              	.LFE16:
 5166              		.globl	progOpen
 5168              	progOpen:
 5169              	.LFB17:
 657:prog.c        **** 
 658:prog.c        **** // ------------------------------------------------------------------------------------------------
 659:prog.c        **** // Implementation of public functions
 660:prog.c        **** // ------------------------------------------------------------------------------------------------
 661:prog.c        **** 
 662:prog.c        **** DLLEXPORT(FLStatus) progOpen(struct FLContext *handle, const char *portConfig, const char **error) 
 5170              		.loc 2 662 0
 5171              		.cfi_startproc
 5172 4c38 55       		pushq	%rbp
 5173              		.cfi_def_cfa_offset 16
 5174              		.cfi_offset 6, -16
 5175 4c39 4889E5   		movq	%rsp, %rbp
 5176              		.cfi_def_cfa_register 6
 5177 4c3c 4883EC20 		subq	$32, %rsp
 5178 4c40 48897DF8 		movq	%rdi, -8(%rbp)
 5179 4c44 488975F0 		movq	%rsi, -16(%rbp)
 5180 4c48 488955E8 		movq	%rdx, -24(%rbp)
 663:prog.c        **** 	return progOpenInternal(handle, portConfig, portConfig, error);
 5181              		.loc 2 663 0
 5182 4c4c 488B4DE8 		movq	-24(%rbp), %rcx
 5183 4c50 488B55F0 		movq	-16(%rbp), %rdx
 5184 4c54 488B75F0 		movq	-16(%rbp), %rsi
 5185 4c58 488B45F8 		movq	-8(%rbp), %rax
 5186 4c5c 4889C7   		movq	%rax, %rdi
 5187 4c5f E8E3EEFF 		call	progOpenInternal
 5187      FF
 664:prog.c        **** }
 5188              		.loc 2 664 0
 5189 4c64 C9       		leave
 5190              		.cfi_def_cfa 7, 8
 5191 4c65 C3       		ret
 5192              		.cfi_endproc
 5193              	.LFE17:
 5195              		.section	.rodata
 5196              	.LC40:
 5197 07b1 70726F67 		.string	"progClose()"
 5197      436C6F73 
 5197      65282900 
 5198              		.text
 5199              		.globl	progClose
 5201              	progClose:
 5202              	.LFB18:
 665:prog.c        **** 
 666:prog.c        **** DLLEXPORT(FLStatus) progClose(struct FLContext *handle, const char **error) {
 5203              		.loc 2 666 0
 5204              		.cfi_startproc
 5205 4c66 55       		pushq	%rbp
 5206              		.cfi_def_cfa_offset 16
 5207              		.cfi_offset 6, -16
 5208 4c67 4889E5   		movq	%rsp, %rbp
 5209              		.cfi_def_cfa_register 6
 5210 4c6a 4883EC20 		subq	$32, %rsp
 5211 4c6e 48897DE8 		movq	%rdi, -24(%rbp)
 5212 4c72 488975E0 		movq	%rsi, -32(%rbp)
 667:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 5213              		.loc 2 667 0
 5214 4c76 C745F800 		movl	$0, -8(%rbp)
 5214      000000
 668:prog.c        **** 	FLStatus fStatus;
 669:prog.c        **** 
 670:prog.c        **** 	// Set MISO/TDO, MOSI/TDI, SS/TMS & SCK/TCK as inputs
 671:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, handle->misoPort, handle->misoBit, PIN_INPUT, NULL, error)
 5215              		.loc 2 671 0
 5216 4c7d 488B45E8 		movq	-24(%rbp), %rax
 5217 4c81 0FB64018 		movzbl	24(%rax), %eax
 5218 4c85 0FB6D0   		movzbl	%al, %edx
 5219 4c88 488B45E8 		movq	-24(%rbp), %rax
 5220 4c8c 0FB64017 		movzbl	23(%rax), %eax
 5221 4c90 0FB6F0   		movzbl	%al, %esi
 5222 4c93 488B4DE0 		movq	-32(%rbp), %rcx
 5223 4c97 488B45E8 		movq	-24(%rbp), %rax
 5224 4c9b 4989C9   		movq	%rcx, %r9
 5225 4c9e 41B80000 		movl	$0, %r8d
 5225      0000
 5226 4ca4 B9030000 		movl	$3, %ecx
 5226      00
 5227 4ca9 4889C7   		movq	%rax, %rdi
 5228 4cac E8000000 		call	flSingleBitPortAccess@PLT
 5228      00
 5229 4cb1 8945FC   		movl	%eax, -4(%rbp)
 672:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progClose()");
 5230              		.loc 2 672 0
 5231 4cb4 837DFC00 		cmpl	$0, -4(%rbp)
 5232 4cb8 741E     		je	.L268
 5233              		.loc 2 672 0 is_stmt 0 discriminator 1
 5234 4cba 488B45E0 		movq	-32(%rbp), %rax
 5235 4cbe 488D3500 		leaq	.LC40(%rip), %rsi
 5235      000000
 5236 4cc5 4889C7   		movq	%rax, %rdi
 5237 4cc8 E8000000 		call	errPrefix@PLT
 5237      00
 5238 4ccd 8B45FC   		movl	-4(%rbp), %eax
 5239 4cd0 8945F8   		movl	%eax, -8(%rbp)
 5240 4cd3 E90A0100 		jmp	.L269
 5240      00
 5241              	.L268:
 673:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, handle->mosiPort, handle->mosiBit, PIN_INPUT, NULL, error)
 5242              		.loc 2 673 0 is_stmt 1
 5243 4cd8 488B45E8 		movq	-24(%rbp), %rax
 5244 4cdc 0FB6401A 		movzbl	26(%rax), %eax
 5245 4ce0 0FB6D0   		movzbl	%al, %edx
 5246 4ce3 488B45E8 		movq	-24(%rbp), %rax
 5247 4ce7 0FB64019 		movzbl	25(%rax), %eax
 5248 4ceb 0FB6F0   		movzbl	%al, %esi
 5249 4cee 488B4DE0 		movq	-32(%rbp), %rcx
 5250 4cf2 488B45E8 		movq	-24(%rbp), %rax
 5251 4cf6 4989C9   		movq	%rcx, %r9
 5252 4cf9 41B80000 		movl	$0, %r8d
 5252      0000
 5253 4cff B9030000 		movl	$3, %ecx
 5253      00
 5254 4d04 4889C7   		movq	%rax, %rdi
 5255 4d07 E8000000 		call	flSingleBitPortAccess@PLT
 5255      00
 5256 4d0c 8945FC   		movl	%eax, -4(%rbp)
 674:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progClose()");
 5257              		.loc 2 674 0
 5258 4d0f 837DFC00 		cmpl	$0, -4(%rbp)
 5259 4d13 741E     		je	.L270
 5260              		.loc 2 674 0 is_stmt 0 discriminator 1
 5261 4d15 488B45E0 		movq	-32(%rbp), %rax
 5262 4d19 488D3500 		leaq	.LC40(%rip), %rsi
 5262      000000
 5263 4d20 4889C7   		movq	%rax, %rdi
 5264 4d23 E8000000 		call	errPrefix@PLT
 5264      00
 5265 4d28 8B45FC   		movl	-4(%rbp), %eax
 5266 4d2b 8945F8   		movl	%eax, -8(%rbp)
 5267 4d2e E9AF0000 		jmp	.L269
 5267      00
 5268              	.L270:
 675:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, handle->ssPort, handle->ssBit, PIN_INPUT, NULL, error);
 5269              		.loc 2 675 0 is_stmt 1
 5270 4d33 488B45E8 		movq	-24(%rbp), %rax
 5271 4d37 0FB6401C 		movzbl	28(%rax), %eax
 5272 4d3b 0FB6D0   		movzbl	%al, %edx
 5273 4d3e 488B45E8 		movq	-24(%rbp), %rax
 5274 4d42 0FB6401B 		movzbl	27(%rax), %eax
 5275 4d46 0FB6F0   		movzbl	%al, %esi
 5276 4d49 488B4DE0 		movq	-32(%rbp), %rcx
 5277 4d4d 488B45E8 		movq	-24(%rbp), %rax
 5278 4d51 4989C9   		movq	%rcx, %r9
 5279 4d54 41B80000 		movl	$0, %r8d
 5279      0000
 5280 4d5a B9030000 		movl	$3, %ecx
 5280      00
 5281 4d5f 4889C7   		movq	%rax, %rdi
 5282 4d62 E8000000 		call	flSingleBitPortAccess@PLT
 5282      00
 5283 4d67 8945FC   		movl	%eax, -4(%rbp)
 676:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progClose()");
 5284              		.loc 2 676 0
 5285 4d6a 837DFC00 		cmpl	$0, -4(%rbp)
 5286 4d6e 741B     		je	.L271
 5287              		.loc 2 676 0 is_stmt 0 discriminator 1
 5288 4d70 488B45E0 		movq	-32(%rbp), %rax
 5289 4d74 488D3500 		leaq	.LC40(%rip), %rsi
 5289      000000
 5290 4d7b 4889C7   		movq	%rax, %rdi
 5291 4d7e E8000000 		call	errPrefix@PLT
 5291      00
 5292 4d83 8B45FC   		movl	-4(%rbp), %eax
 5293 4d86 8945F8   		movl	%eax, -8(%rbp)
 5294 4d89 EB57     		jmp	.L269
 5295              	.L271:
 677:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, handle->sckPort, handle->sckBit, PIN_INPUT, NULL, error);
 5296              		.loc 2 677 0 is_stmt 1
 5297 4d8b 488B45E8 		movq	-24(%rbp), %rax
 5298 4d8f 0FB6401E 		movzbl	30(%rax), %eax
 5299 4d93 0FB6D0   		movzbl	%al, %edx
 5300 4d96 488B45E8 		movq	-24(%rbp), %rax
 5301 4d9a 0FB6401D 		movzbl	29(%rax), %eax
 5302 4d9e 0FB6F0   		movzbl	%al, %esi
 5303 4da1 488B4DE0 		movq	-32(%rbp), %rcx
 5304 4da5 488B45E8 		movq	-24(%rbp), %rax
 5305 4da9 4989C9   		movq	%rcx, %r9
 5306 4dac 41B80000 		movl	$0, %r8d
 5306      0000
 5307 4db2 B9030000 		movl	$3, %ecx
 5307      00
 5308 4db7 4889C7   		movq	%rax, %rdi
 5309 4dba E8000000 		call	flSingleBitPortAccess@PLT
 5309      00
 5310 4dbf 8945FC   		movl	%eax, -4(%rbp)
 678:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progClose()");
 5311              		.loc 2 678 0
 5312 4dc2 837DFC00 		cmpl	$0, -4(%rbp)
 5313 4dc6 741A     		je	.L269
 5314              		.loc 2 678 0 is_stmt 0 discriminator 1
 5315 4dc8 488B45E0 		movq	-32(%rbp), %rax
 5316 4dcc 488D3500 		leaq	.LC40(%rip), %rsi
 5316      000000
 5317 4dd3 4889C7   		movq	%rax, %rdi
 5318 4dd6 E8000000 		call	errPrefix@PLT
 5318      00
 5319 4ddb 8B45FC   		movl	-4(%rbp), %eax
 5320 4dde 8945F8   		movl	%eax, -8(%rbp)
 5321 4de1 90       		nop
 5322              	.L269:
 679:prog.c        **** cleanup:
 680:prog.c        **** 	return retVal;
 5323              		.loc 2 680 0 is_stmt 1
 5324 4de2 8B45F8   		movl	-8(%rbp), %eax
 681:prog.c        **** }
 5325              		.loc 2 681 0
 5326 4de5 C9       		leave
 5327              		.cfi_def_cfa 7, 8
 5328 4de6 C3       		ret
 5329              		.cfi_endproc
 5330              	.LFE18:
 5332              		.section	.rodata
 5333              	.LC41:
 5334 07bd 6A746167 		.string	"jtagShiftInOut()"
 5334      53686966 
 5334      74496E4F 
 5334      75742829 
 5334      00
 5335              		.text
 5336              		.globl	jtagShiftInOut
 5338              	jtagShiftInOut:
 5339              	.LFB19:
 682:prog.c        **** 
 683:prog.c        **** // Shift data into and out of JTAG chain.
 684:prog.c        **** //   In pointer may be SHIFT_ZEROS (shift in zeros) or SHIFT_ONES (shift in ones).
 685:prog.c        **** //   Out pointer may be NULL (not interested in data shifted out of the chain).
 686:prog.c        **** //
 687:prog.c        **** DLLEXPORT(FLStatus) jtagShiftInOut(
 688:prog.c        **** 	struct FLContext *handle, uint32 numBits, const uint8 *inData, uint8 *outData, uint8 isLast,
 689:prog.c        **** 	const char **error)
 690:prog.c        **** {
 5340              		.loc 2 690 0
 5341              		.cfi_startproc
 5342 4de7 55       		pushq	%rbp
 5343              		.cfi_def_cfa_offset 16
 5344              		.cfi_offset 6, -16
 5345 4de8 4889E5   		movq	%rsp, %rbp
 5346              		.cfi_def_cfa_register 6
 5347 4deb 4883EC40 		subq	$64, %rsp
 5348 4def 48897DE8 		movq	%rdi, -24(%rbp)
 5349 4df3 8975E4   		movl	%esi, -28(%rbp)
 5350 4df6 488955D8 		movq	%rdx, -40(%rbp)
 5351 4dfa 48894DD0 		movq	%rcx, -48(%rbp)
 5352 4dfe 4489C0   		movl	%r8d, %eax
 5353 4e01 4C894DC8 		movq	%r9, -56(%rbp)
 5354 4e05 8845E0   		movb	%al, -32(%rbp)
 691:prog.c        **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 5355              		.loc 2 691 0
 5356 4e08 C745F400 		movl	$0, -12(%rbp)
 5356      000000
 692:prog.c        **** 	uint32 numBytes = bitsToBytes(numBits);
 5357              		.loc 2 692 0
 5358 4e0f 8B45E4   		movl	-28(%rbp), %eax
 5359 4e12 C1E803   		shrl	$3, %eax
 5360 4e15 89C2     		movl	%eax, %edx
 5361 4e17 8B45E4   		movl	-28(%rbp), %eax
 5362 4e1a 83E007   		andl	$7, %eax
 5363 4e1d 85C0     		testl	%eax, %eax
 5364 4e1f 7407     		je	.L274
 5365              		.loc 2 692 0 is_stmt 0 discriminator 1
 5366 4e21 B8010000 		movl	$1, %eax
 5366      00
 5367 4e26 EB05     		jmp	.L275
 5368              	.L274:
 5369              		.loc 2 692 0 discriminator 2
 5370 4e28 B8000000 		movl	$0, %eax
 5370      00
 5371              	.L275:
 5372              		.loc 2 692 0 discriminator 4
 5373 4e2d 01D0     		addl	%edx, %eax
 5374 4e2f 8945F8   		movl	%eax, -8(%rbp)
 693:prog.c        **** 	uint16 chunkSize;
 694:prog.c        **** 	uint8 mode = 0x00;
 5375              		.loc 2 694 0 is_stmt 1 discriminator 4
 5376 4e32 C645F000 		movb	$0, -16(%rbp)
 695:prog.c        **** 	bool isSending = false;
 5377              		.loc 2 695 0 discriminator 4
 5378 4e36 C645F100 		movb	$0, -15(%rbp)
 696:prog.c        **** 
 697:prog.c        **** 	if ( inData == SHIFT_ONES ) {
 5379              		.loc 2 697 0 discriminator 4
 5380 4e3a 48837DD8 		cmpq	$-1, -40(%rbp)
 5380      FF
 5381 4e3f 7506     		jne	.L276
 698:prog.c        **** 		mode |= bmSENDONES;
 5382              		.loc 2 698 0
 5383 4e41 804DF002 		orb	$2, -16(%rbp)
 5384 4e45 EB0B     		jmp	.L277
 5385              	.L276:
 699:prog.c        **** 	} else if ( inData != SHIFT_ZEROS ) {
 5386              		.loc 2 699 0
 5387 4e47 48837DD8 		cmpq	$0, -40(%rbp)
 5387      00
 5388 4e4c 7404     		je	.L277
 700:prog.c        **** 		isSending = true;
 5389              		.loc 2 700 0
 5390 4e4e C645F101 		movb	$1, -15(%rbp)
 5391              	.L277:
 701:prog.c        **** 	}
 702:prog.c        **** 	if ( isLast ) {
 5392              		.loc 2 702 0
 5393 4e52 807DE000 		cmpb	$0, -32(%rbp)
 5394 4e56 7404     		je	.L278
 703:prog.c        **** 		mode |= bmISLAST;
 5395              		.loc 2 703 0
 5396 4e58 804DF001 		orb	$1, -16(%rbp)
 5397              	.L278:
 704:prog.c        **** 	}
 705:prog.c        **** 	if ( isSending ) {
 5398              		.loc 2 705 0
 5399 4e5c 807DF100 		cmpb	$0, -15(%rbp)
 5400 4e60 0F840401 		je	.L279
 5400      0000
 706:prog.c        **** 		fStatus = beginShift(handle, numBits, PROG_JTAG_ISSENDING_ISRECEIVING, mode, error);
 5401              		.loc 2 706 0
 5402 4e66 0FB655F0 		movzbl	-16(%rbp), %edx
 5403 4e6a 488B4DC8 		movq	-56(%rbp), %rcx
 5404 4e6e 8B75E4   		movl	-28(%rbp), %esi
 5405 4e71 488B45E8 		movq	-24(%rbp), %rax
 5406 4e75 4989C8   		movq	%rcx, %r8
 5407 4e78 89D1     		movl	%edx, %ecx
 5408 4e7a BA010000 		movl	$1, %edx
 5408      00
 5409 4e7f 4889C7   		movq	%rax, %rdi
 5410 4e82 E885B1FF 		call	beginShift
 5410      FF
 5411 4e87 8945FC   		movl	%eax, -4(%rbp)
 707:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5412              		.loc 2 707 0
 5413 4e8a 837DFC00 		cmpl	$0, -4(%rbp)
 5414 4e8e 0F84C700 		je	.L282
 5414      0000
 5415              		.loc 2 707 0 is_stmt 0 discriminator 1
 5416 4e94 488B45C8 		movq	-56(%rbp), %rax
 5417 4e98 488D3500 		leaq	.LC41(%rip), %rsi
 5417      000000
 5418 4e9f 4889C7   		movq	%rax, %rdi
 5419 4ea2 E8000000 		call	errPrefix@PLT
 5419      00
 5420 4ea7 8B45FC   		movl	-4(%rbp), %eax
 5421 4eaa 8945F4   		movl	%eax, -12(%rbp)
 5422 4ead E9620100 		jmp	.L281
 5422      00
 5423              	.L287:
 708:prog.c        **** 		while ( numBytes ) {
 709:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5424              		.loc 2 709 0 is_stmt 1
 5425 4eb2 837DF83F 		cmpl	$63, -8(%rbp)
 5426 4eb6 7705     		ja	.L283
 5427              		.loc 2 709 0 is_stmt 0 discriminator 1
 5428 4eb8 8B45F8   		movl	-8(%rbp), %eax
 5429 4ebb EB05     		jmp	.L284
 5430              	.L283:
 5431              		.loc 2 709 0 discriminator 2
 5432 4ebd B8400000 		movl	$64, %eax
 5432      00
 5433              	.L284:
 5434              		.loc 2 709 0 discriminator 4
 5435 4ec2 668945F2 		movw	%ax, -14(%rbp)
 710:prog.c        **** 			fStatus = doSend(handle, inData, chunkSize, error);
 5436              		.loc 2 710 0 is_stmt 1 discriminator 4
 5437 4ec6 0FB755F2 		movzwl	-14(%rbp), %edx
 5438 4eca 488B4DC8 		movq	-56(%rbp), %rcx
 5439 4ece 488B75D8 		movq	-40(%rbp), %rsi
 5440 4ed2 488B45E8 		movq	-24(%rbp), %rax
 5441 4ed6 4889C7   		movq	%rax, %rdi
 5442 4ed9 E8E0B1FF 		call	doSend
 5442      FF
 5443 4ede 8945FC   		movl	%eax, -4(%rbp)
 711:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5444              		.loc 2 711 0 discriminator 4
 5445 4ee1 837DFC00 		cmpl	$0, -4(%rbp)
 5446 4ee5 741E     		je	.L285
 5447              		.loc 2 711 0 is_stmt 0 discriminator 1
 5448 4ee7 488B45C8 		movq	-56(%rbp), %rax
 5449 4eeb 488D3500 		leaq	.LC41(%rip), %rsi
 5449      000000
 5450 4ef2 4889C7   		movq	%rax, %rdi
 5451 4ef5 E8000000 		call	errPrefix@PLT
 5451      00
 5452 4efa 8B45FC   		movl	-4(%rbp), %eax
 5453 4efd 8945F4   		movl	%eax, -12(%rbp)
 5454 4f00 E90F0100 		jmp	.L281
 5454      00
 5455              	.L285:
 712:prog.c        **** 			inData += chunkSize;
 5456              		.loc 2 712 0 is_stmt 1
 5457 4f05 0FB745F2 		movzwl	-14(%rbp), %eax
 5458 4f09 480145D8 		addq	%rax, -40(%rbp)
 713:prog.c        **** 			fStatus = doReceive(handle, outData, chunkSize, error);
 5459              		.loc 2 713 0
 5460 4f0d 0FB755F2 		movzwl	-14(%rbp), %edx
 5461 4f11 488B4DC8 		movq	-56(%rbp), %rcx
 5462 4f15 488B75D0 		movq	-48(%rbp), %rsi
 5463 4f19 488B45E8 		movq	-24(%rbp), %rax
 5464 4f1d 4889C7   		movq	%rax, %rdi
 5465 4f20 E812B2FF 		call	doReceive
 5465      FF
 5466 4f25 8945FC   		movl	%eax, -4(%rbp)
 714:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5467              		.loc 2 714 0
 5468 4f28 837DFC00 		cmpl	$0, -4(%rbp)
 5469 4f2c 741E     		je	.L286
 5470              		.loc 2 714 0 is_stmt 0 discriminator 1
 5471 4f2e 488B45C8 		movq	-56(%rbp), %rax
 5472 4f32 488D3500 		leaq	.LC41(%rip), %rsi
 5472      000000
 5473 4f39 4889C7   		movq	%rax, %rdi
 5474 4f3c E8000000 		call	errPrefix@PLT
 5474      00
 5475 4f41 8B45FC   		movl	-4(%rbp), %eax
 5476 4f44 8945F4   		movl	%eax, -12(%rbp)
 5477 4f47 E9C80000 		jmp	.L281
 5477      00
 5478              	.L286:
 715:prog.c        **** 			outData += chunkSize;
 5479              		.loc 2 715 0 is_stmt 1
 5480 4f4c 0FB745F2 		movzwl	-14(%rbp), %eax
 5481 4f50 480145D0 		addq	%rax, -48(%rbp)
 716:prog.c        **** 			numBytes -= chunkSize;
 5482              		.loc 2 716 0
 5483 4f54 0FB745F2 		movzwl	-14(%rbp), %eax
 5484 4f58 2945F8   		subl	%eax, -8(%rbp)
 5485              	.L282:
 708:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5486              		.loc 2 708 0
 5487 4f5b 837DF800 		cmpl	$0, -8(%rbp)
 5488 4f5f 0F854DFF 		jne	.L287
 5488      FFFF
 5489 4f65 E9AA0000 		jmp	.L281
 5489      00
 5490              	.L279:
 717:prog.c        **** 		}
 718:prog.c        **** 	} else {
 719:prog.c        **** 		fStatus = beginShift(handle, numBits, PROG_JTAG_NOTSENDING_ISRECEIVING, mode, error);
 5491              		.loc 2 719 0
 5492 4f6a 0FB655F0 		movzbl	-16(%rbp), %edx
 5493 4f6e 488B4DC8 		movq	-56(%rbp), %rcx
 5494 4f72 8B75E4   		movl	-28(%rbp), %esi
 5495 4f75 488B45E8 		movq	-24(%rbp), %rax
 5496 4f79 4989C8   		movq	%rcx, %r8
 5497 4f7c 89D1     		movl	%edx, %ecx
 5498 4f7e BA030000 		movl	$3, %edx
 5498      00
 5499 4f83 4889C7   		movq	%rax, %rdi
 5500 4f86 E881B0FF 		call	beginShift
 5500      FF
 5501 4f8b 8945FC   		movl	%eax, -4(%rbp)
 720:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5502              		.loc 2 720 0
 5503 4f8e 837DFC00 		cmpl	$0, -4(%rbp)
 5504 4f92 747A     		je	.L289
 5505              		.loc 2 720 0 is_stmt 0 discriminator 1
 5506 4f94 488B45C8 		movq	-56(%rbp), %rax
 5507 4f98 488D3500 		leaq	.LC41(%rip), %rsi
 5507      000000
 5508 4f9f 4889C7   		movq	%rax, %rdi
 5509 4fa2 E8000000 		call	errPrefix@PLT
 5509      00
 5510 4fa7 8B45FC   		movl	-4(%rbp), %eax
 5511 4faa 8945F4   		movl	%eax, -12(%rbp)
 5512 4fad EB65     		jmp	.L281
 5513              	.L293:
 721:prog.c        **** 		while ( numBytes ) {
 722:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5514              		.loc 2 722 0 is_stmt 1
 5515 4faf 837DF83F 		cmpl	$63, -8(%rbp)
 5516 4fb3 7705     		ja	.L290
 5517              		.loc 2 722 0 is_stmt 0 discriminator 1
 5518 4fb5 8B45F8   		movl	-8(%rbp), %eax
 5519 4fb8 EB05     		jmp	.L291
 5520              	.L290:
 5521              		.loc 2 722 0 discriminator 2
 5522 4fba B8400000 		movl	$64, %eax
 5522      00
 5523              	.L291:
 5524              		.loc 2 722 0 discriminator 4
 5525 4fbf 668945F2 		movw	%ax, -14(%rbp)
 723:prog.c        **** 			fStatus = doReceive(handle, outData, chunkSize, error);
 5526              		.loc 2 723 0 is_stmt 1 discriminator 4
 5527 4fc3 0FB755F2 		movzwl	-14(%rbp), %edx
 5528 4fc7 488B4DC8 		movq	-56(%rbp), %rcx
 5529 4fcb 488B75D0 		movq	-48(%rbp), %rsi
 5530 4fcf 488B45E8 		movq	-24(%rbp), %rax
 5531 4fd3 4889C7   		movq	%rax, %rdi
 5532 4fd6 E85CB1FF 		call	doReceive
 5532      FF
 5533 4fdb 8945FC   		movl	%eax, -4(%rbp)
 724:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5534              		.loc 2 724 0 discriminator 4
 5535 4fde 837DFC00 		cmpl	$0, -4(%rbp)
 5536 4fe2 741B     		je	.L292
 5537              		.loc 2 724 0 is_stmt 0 discriminator 1
 5538 4fe4 488B45C8 		movq	-56(%rbp), %rax
 5539 4fe8 488D3500 		leaq	.LC41(%rip), %rsi
 5539      000000
 5540 4fef 4889C7   		movq	%rax, %rdi
 5541 4ff2 E8000000 		call	errPrefix@PLT
 5541      00
 5542 4ff7 8B45FC   		movl	-4(%rbp), %eax
 5543 4ffa 8945F4   		movl	%eax, -12(%rbp)
 5544 4ffd EB15     		jmp	.L281
 5545              	.L292:
 725:prog.c        **** 			outData += chunkSize;
 5546              		.loc 2 725 0 is_stmt 1
 5547 4fff 0FB745F2 		movzwl	-14(%rbp), %eax
 5548 5003 480145D0 		addq	%rax, -48(%rbp)
 726:prog.c        **** 			numBytes -= chunkSize;
 5549              		.loc 2 726 0
 5550 5007 0FB745F2 		movzwl	-14(%rbp), %eax
 5551 500b 2945F8   		subl	%eax, -8(%rbp)
 5552              	.L289:
 721:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5553              		.loc 2 721 0
 5554 500e 837DF800 		cmpl	$0, -8(%rbp)
 5555 5012 759B     		jne	.L293
 5556              	.L281:
 727:prog.c        **** 		}
 728:prog.c        **** 	}
 729:prog.c        **** cleanup:
 730:prog.c        **** 	return retVal;
 5557              		.loc 2 730 0
 5558 5014 8B45F4   		movl	-12(%rbp), %eax
 731:prog.c        **** }
 5559              		.loc 2 731 0
 5560 5017 C9       		leave
 5561              		.cfi_def_cfa 7, 8
 5562 5018 C3       		ret
 5563              		.cfi_endproc
 5564              	.LFE19:
 5566              		.globl	jtagShiftInOnly
 5568              	jtagShiftInOnly:
 5569              	.LFB20:
 732:prog.c        **** 
 733:prog.c        **** DLLEXPORT(FLStatus) jtagShiftInOnly(
 734:prog.c        **** 	struct FLContext *handle, uint32 numBits, const uint8 *inData, uint8 isLast,
 735:prog.c        **** 	const char **error)
 736:prog.c        **** {
 5570              		.loc 2 736 0
 5571              		.cfi_startproc
 5572 5019 55       		pushq	%rbp
 5573              		.cfi_def_cfa_offset 16
 5574              		.cfi_offset 6, -16
 5575 501a 4889E5   		movq	%rsp, %rbp
 5576              		.cfi_def_cfa_register 6
 5577 501d 4883EC30 		subq	$48, %rsp
 5578 5021 48897DE8 		movq	%rdi, -24(%rbp)
 5579 5025 8975E4   		movl	%esi, -28(%rbp)
 5580 5028 488955D8 		movq	%rdx, -40(%rbp)
 5581 502c 89C8     		movl	%ecx, %eax
 5582 502e 4C8945D0 		movq	%r8, -48(%rbp)
 5583 5032 8845E0   		movb	%al, -32(%rbp)
 737:prog.c        **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 5584              		.loc 2 737 0
 5585 5035 C745F400 		movl	$0, -12(%rbp)
 5585      000000
 738:prog.c        **** 	uint32 numBytes = bitsToBytes(numBits);
 5586              		.loc 2 738 0
 5587 503c 8B45E4   		movl	-28(%rbp), %eax
 5588 503f C1E803   		shrl	$3, %eax
 5589 5042 89C2     		movl	%eax, %edx
 5590 5044 8B45E4   		movl	-28(%rbp), %eax
 5591 5047 83E007   		andl	$7, %eax
 5592 504a 85C0     		testl	%eax, %eax
 5593 504c 7407     		je	.L296
 5594              		.loc 2 738 0 is_stmt 0 discriminator 1
 5595 504e B8010000 		movl	$1, %eax
 5595      00
 5596 5053 EB05     		jmp	.L297
 5597              	.L296:
 5598              		.loc 2 738 0 discriminator 2
 5599 5055 B8000000 		movl	$0, %eax
 5599      00
 5600              	.L297:
 5601              		.loc 2 738 0 discriminator 4
 5602 505a 01D0     		addl	%edx, %eax
 5603 505c 8945F8   		movl	%eax, -8(%rbp)
 739:prog.c        **** 	uint16 chunkSize;
 740:prog.c        **** 	uint8 mode = 0x00;
 5604              		.loc 2 740 0 is_stmt 1 discriminator 4
 5605 505f C645F000 		movb	$0, -16(%rbp)
 741:prog.c        **** 	bool isSending = false;
 5606              		.loc 2 741 0 discriminator 4
 5607 5063 C645F100 		movb	$0, -15(%rbp)
 742:prog.c        **** 	if ( inData == SHIFT_ONES ) {
 5608              		.loc 2 742 0 discriminator 4
 5609 5067 48837DD8 		cmpq	$-1, -40(%rbp)
 5609      FF
 5610 506c 7506     		jne	.L298
 743:prog.c        **** 		mode |= bmSENDONES;
 5611              		.loc 2 743 0
 5612 506e 804DF002 		orb	$2, -16(%rbp)
 5613 5072 EB0B     		jmp	.L299
 5614              	.L298:
 744:prog.c        **** 	} else if ( inData != SHIFT_ZEROS ) {
 5615              		.loc 2 744 0
 5616 5074 48837DD8 		cmpq	$0, -40(%rbp)
 5616      00
 5617 5079 7404     		je	.L299
 745:prog.c        **** 		isSending = true;
 5618              		.loc 2 745 0
 5619 507b C645F101 		movb	$1, -15(%rbp)
 5620              	.L299:
 746:prog.c        **** 	}
 747:prog.c        **** 	if ( isLast ) {
 5621              		.loc 2 747 0
 5622 507f 807DE000 		cmpb	$0, -32(%rbp)
 5623 5083 7404     		je	.L300
 748:prog.c        **** 		mode |= bmISLAST;
 5624              		.loc 2 748 0
 5625 5085 804DF001 		orb	$1, -16(%rbp)
 5626              	.L300:
 749:prog.c        **** 	}
 750:prog.c        **** 	if ( isSending ) {
 5627              		.loc 2 750 0
 5628 5089 807DF100 		cmpb	$0, -15(%rbp)
 5629 508d 0F84AF00 		je	.L301
 5629      0000
 751:prog.c        **** 		fStatus = beginShift(handle, numBits, PROG_JTAG_ISSENDING_NOTRECEIVING, mode, error);
 5630              		.loc 2 751 0
 5631 5093 0FB655F0 		movzbl	-16(%rbp), %edx
 5632 5097 488B4DD0 		movq	-48(%rbp), %rcx
 5633 509b 8B75E4   		movl	-28(%rbp), %esi
 5634 509e 488B45E8 		movq	-24(%rbp), %rax
 5635 50a2 4989C8   		movq	%rcx, %r8
 5636 50a5 89D1     		movl	%edx, %ecx
 5637 50a7 BA020000 		movl	$2, %edx
 5637      00
 5638 50ac 4889C7   		movq	%rax, %rdi
 5639 50af E858AFFF 		call	beginShift
 5639      FF
 5640 50b4 8945FC   		movl	%eax, -4(%rbp)
 752:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5641              		.loc 2 752 0
 5642 50b7 837DFC00 		cmpl	$0, -4(%rbp)
 5643 50bb 747D     		je	.L304
 5644              		.loc 2 752 0 is_stmt 0 discriminator 1
 5645 50bd 488B45D0 		movq	-48(%rbp), %rax
 5646 50c1 488D3500 		leaq	.LC41(%rip), %rsi
 5646      000000
 5647 50c8 4889C7   		movq	%rax, %rdi
 5648 50cb E8000000 		call	errPrefix@PLT
 5648      00
 5649 50d0 8B45FC   		movl	-4(%rbp), %eax
 5650 50d3 8945F4   		movl	%eax, -12(%rbp)
 5651 50d6 E9AB0000 		jmp	.L303
 5651      00
 5652              	.L308:
 753:prog.c        **** 		while ( numBytes ) {
 754:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5653              		.loc 2 754 0 is_stmt 1
 5654 50db 837DF83F 		cmpl	$63, -8(%rbp)
 5655 50df 7705     		ja	.L305
 5656              		.loc 2 754 0 is_stmt 0 discriminator 1
 5657 50e1 8B45F8   		movl	-8(%rbp), %eax
 5658 50e4 EB05     		jmp	.L306
 5659              	.L305:
 5660              		.loc 2 754 0 discriminator 2
 5661 50e6 B8400000 		movl	$64, %eax
 5661      00
 5662              	.L306:
 5663              		.loc 2 754 0 discriminator 4
 5664 50eb 668945F2 		movw	%ax, -14(%rbp)
 755:prog.c        **** 			fStatus = doSend(handle, inData, chunkSize, error);
 5665              		.loc 2 755 0 is_stmt 1 discriminator 4
 5666 50ef 0FB755F2 		movzwl	-14(%rbp), %edx
 5667 50f3 488B4DD0 		movq	-48(%rbp), %rcx
 5668 50f7 488B75D8 		movq	-40(%rbp), %rsi
 5669 50fb 488B45E8 		movq	-24(%rbp), %rax
 5670 50ff 4889C7   		movq	%rax, %rdi
 5671 5102 E8B7AFFF 		call	doSend
 5671      FF
 5672 5107 8945FC   		movl	%eax, -4(%rbp)
 756:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5673              		.loc 2 756 0 discriminator 4
 5674 510a 837DFC00 		cmpl	$0, -4(%rbp)
 5675 510e 741B     		je	.L307
 5676              		.loc 2 756 0 is_stmt 0 discriminator 1
 5677 5110 488B45D0 		movq	-48(%rbp), %rax
 5678 5114 488D3500 		leaq	.LC41(%rip), %rsi
 5678      000000
 5679 511b 4889C7   		movq	%rax, %rdi
 5680 511e E8000000 		call	errPrefix@PLT
 5680      00
 5681 5123 8B45FC   		movl	-4(%rbp), %eax
 5682 5126 8945F4   		movl	%eax, -12(%rbp)
 5683 5129 EB5B     		jmp	.L303
 5684              	.L307:
 757:prog.c        **** 			inData += chunkSize;
 5685              		.loc 2 757 0 is_stmt 1
 5686 512b 0FB745F2 		movzwl	-14(%rbp), %eax
 5687 512f 480145D8 		addq	%rax, -40(%rbp)
 758:prog.c        **** 			numBytes -= chunkSize;
 5688              		.loc 2 758 0
 5689 5133 0FB745F2 		movzwl	-14(%rbp), %eax
 5690 5137 2945F8   		subl	%eax, -8(%rbp)
 5691              	.L304:
 753:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5692              		.loc 2 753 0
 5693 513a 837DF800 		cmpl	$0, -8(%rbp)
 5694 513e 759B     		jne	.L308
 5695 5140 EB44     		jmp	.L303
 5696              	.L301:
 759:prog.c        **** 		}
 760:prog.c        **** 	} else {
 761:prog.c        **** 		fStatus = beginShift(handle, numBits, PROG_JTAG_NOTSENDING_NOTRECEIVING, mode, error);
 5697              		.loc 2 761 0
 5698 5142 0FB655F0 		movzbl	-16(%rbp), %edx
 5699 5146 488B4DD0 		movq	-48(%rbp), %rcx
 5700 514a 8B75E4   		movl	-28(%rbp), %esi
 5701 514d 488B45E8 		movq	-24(%rbp), %rax
 5702 5151 4989C8   		movq	%rcx, %r8
 5703 5154 89D1     		movl	%edx, %ecx
 5704 5156 BA040000 		movl	$4, %edx
 5704      00
 5705 515b 4889C7   		movq	%rax, %rdi
 5706 515e E8A9AEFF 		call	beginShift
 5706      FF
 5707 5163 8945FC   		movl	%eax, -4(%rbp)
 762:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5708              		.loc 2 762 0
 5709 5166 837DFC00 		cmpl	$0, -4(%rbp)
 5710 516a 741A     		je	.L303
 5711              		.loc 2 762 0 is_stmt 0 discriminator 1
 5712 516c 488B45D0 		movq	-48(%rbp), %rax
 5713 5170 488D3500 		leaq	.LC41(%rip), %rsi
 5713      000000
 5714 5177 4889C7   		movq	%rax, %rdi
 5715 517a E8000000 		call	errPrefix@PLT
 5715      00
 5716 517f 8B45FC   		movl	-4(%rbp), %eax
 5717 5182 8945F4   		movl	%eax, -12(%rbp)
 5718 5185 90       		nop
 5719              	.L303:
 763:prog.c        **** 	}
 764:prog.c        **** cleanup:
 765:prog.c        **** 	return retVal;
 5720              		.loc 2 765 0 is_stmt 1
 5721 5186 8B45F4   		movl	-12(%rbp), %eax
 766:prog.c        **** }
 5722              		.loc 2 766 0
 5723 5189 C9       		leave
 5724              		.cfi_def_cfa 7, 8
 5725 518a C3       		ret
 5726              		.cfi_endproc
 5727              	.LFE20:
 5729              		.section	.rodata
 5730              	.LC42:
 5731 07ce 6A746167 		.string	"jtagClockFSM()"
 5731      436C6F63 
 5731      6B46534D 
 5731      282900
 5732              		.text
 5733              		.globl	jtagClockFSM
 5735              	jtagClockFSM:
 5736              	.LFB21:
 767:prog.c        **** 
 768:prog.c        **** // Apply the supplied bit pattern to SS/TMS, to move the TAP to a specific state.
 769:prog.c        **** //
 770:prog.c        **** DLLEXPORT(FLStatus) jtagClockFSM(
 771:prog.c        **** 	struct FLContext *handle, uint32 bitPattern, uint8 transitionCount, const char **error)
 772:prog.c        **** {
 5737              		.loc 2 772 0
 5738              		.cfi_startproc
 5739 518b 55       		pushq	%rbp
 5740              		.cfi_def_cfa_offset 16
 5741              		.cfi_offset 6, -16
 5742 518c 4889E5   		movq	%rsp, %rbp
 5743              		.cfi_def_cfa_register 6
 5744 518f 4883EC40 		subq	$64, %rsp
 5745 5193 48897DD8 		movq	%rdi, -40(%rbp)
 5746 5197 8975D4   		movl	%esi, -44(%rbp)
 5747 519a 89D0     		movl	%edx, %eax
 5748 519c 48894DC8 		movq	%rcx, -56(%rbp)
 5749 51a0 8845D0   		movb	%al, -48(%rbp)
 5750              		.loc 2 772 0
 5751 51a3 64488B04 		movq	%fs:40, %rax
 5751      25280000 
 5751      00
 5752 51ac 488945F8 		movq	%rax, -8(%rbp)
 5753 51b0 31C0     		xorl	%eax, %eax
 773:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 5754              		.loc 2 773 0
 5755 51b2 C745E800 		movl	$0, -24(%rbp)
 5755      000000
 774:prog.c        **** 	USBStatus uStatus;
 775:prog.c        **** 	union {
 776:prog.c        **** 		uint32 u32;
 777:prog.c        **** 		uint8 bytes[4];
 778:prog.c        **** 	} lePattern;
 779:prog.c        **** 	lePattern.u32 = littleEndian32(bitPattern);
 5756              		.loc 2 779 0
 5757 51b9 8B45D4   		movl	-44(%rbp), %eax
 5758 51bc 89C7     		movl	%eax, %edi
 5759 51be E83DAEFF 		call	littleEndian32
 5759      FF
 5760 51c3 8945F0   		movl	%eax, -16(%rbp)
 780:prog.c        **** 	uStatus = usbControlWrite(
 5761              		.loc 2 780 0
 5762 51c6 0FB655D0 		movzbl	-48(%rbp), %edx
 5763 51ca 488B45D8 		movq	-40(%rbp), %rax
 5764 51ce 488B00   		movq	(%rax), %rax
 5765 51d1 488D4DF0 		leaq	-16(%rbp), %rcx
 5766 51d5 FF75C8   		pushq	-56(%rbp)
 5767 51d8 68881300 		pushq	$5000
 5767      00
 5768 51dd 41B90400 		movl	$4, %r9d
 5768      0000
 5769 51e3 4989C8   		movq	%rcx, %r8
 5770 51e6 B9000000 		movl	$0, %ecx
 5770      00
 5771 51eb BE820000 		movl	$130, %esi
 5771      00
 5772 51f0 4889C7   		movq	%rax, %rdi
 5773 51f3 E8000000 		call	usbControlWrite@PLT
 5773      00
 5774 51f8 4883C410 		addq	$16, %rsp
 5775 51fc 8945EC   		movl	%eax, -20(%rbp)
 781:prog.c        **** 		handle->device,
 782:prog.c        **** 		CMD_JTAG_CLOCK_FSM,       // bRequest
 783:prog.c        **** 		(uint16)transitionCount,  // wValue
 784:prog.c        **** 		0x0000,                   // wIndex
 785:prog.c        **** 		lePattern.bytes,          // bit pattern
 786:prog.c        **** 		4,                        // wLength
 787:prog.c        **** 		5000,                     // timeout (ms)
 788:prog.c        **** 		error
 789:prog.c        **** 	);
 790:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_JTAG_FSM, cleanup, "jtagClockFSM()");
 5776              		.loc 2 790 0
 5777 51ff 837DEC00 		cmpl	$0, -20(%rbp)
 5778 5203 741B     		je	.L311
 5779              		.loc 2 790 0 is_stmt 0 discriminator 1
 5780 5205 488B45C8 		movq	-56(%rbp), %rax
 5781 5209 488D3500 		leaq	.LC42(%rip), %rsi
 5781      000000
 5782 5210 4889C7   		movq	%rax, %rdi
 5783 5213 E8000000 		call	errPrefix@PLT
 5783      00
 5784 5218 C745E810 		movl	$16, -24(%rbp)
 5784      000000
 5785 521f 90       		nop
 5786              	.L311:
 791:prog.c        **** cleanup:
 792:prog.c        **** 	return retVal;
 5787              		.loc 2 792 0 is_stmt 1
 5788 5220 8B45E8   		movl	-24(%rbp), %eax
 793:prog.c        **** }
 5789              		.loc 2 793 0
 5790 5223 488B75F8 		movq	-8(%rbp), %rsi
 5791 5227 64483334 		xorq	%fs:40, %rsi
 5791      25280000 
 5791      00
 5792 5230 7405     		je	.L313
 5793 5232 E8000000 		call	__stack_chk_fail@PLT
 5793      00
 5794              	.L313:
 5795 5237 C9       		leave
 5796              		.cfi_def_cfa 7, 8
 5797 5238 C3       		ret
 5798              		.cfi_endproc
 5799              	.LFE21:
 5801              		.section	.rodata
 5802              	.LC43:
 5803 07dd 6A746167 		.string	"jtagClocks()"
 5803      436C6F63 
 5803      6B732829 
 5803      00
 5804              		.text
 5805              		.globl	jtagClocks
 5807              	jtagClocks:
 5808              	.LFB22:
 794:prog.c        **** 
 795:prog.c        **** // Cycle the SCK/TCK line for the given number of times.
 796:prog.c        **** //
 797:prog.c        **** DLLEXPORT(FLStatus) jtagClocks(struct FLContext *handle, uint32 numClocks, const char **error) {
 5809              		.loc 2 797 0
 5810              		.cfi_startproc
 5811 5239 55       		pushq	%rbp
 5812              		.cfi_def_cfa_offset 16
 5813              		.cfi_offset 6, -16
 5814 523a 4889E5   		movq	%rsp, %rbp
 5815              		.cfi_def_cfa_register 6
 5816 523d 4883EC30 		subq	$48, %rsp
 5817 5241 48897DE8 		movq	%rdi, -24(%rbp)
 5818 5245 8975E4   		movl	%esi, -28(%rbp)
 5819 5248 488955D8 		movq	%rdx, -40(%rbp)
 798:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 5820              		.loc 2 798 0
 5821 524c C745F800 		movl	$0, -8(%rbp)
 5821      000000
 799:prog.c        **** 	USBStatus uStatus = usbControlWrite(
 800:prog.c        **** 		handle->device,
 801:prog.c        **** 		CMD_JTAG_CLOCK,                // bRequest
 802:prog.c        **** 		(uint16)(numClocks & 0xFFFF),  // wValue
 803:prog.c        **** 		(uint16)(numClocks >> 16),     // wIndex
 5822              		.loc 2 803 0
 5823 5253 8B45E4   		movl	-28(%rbp), %eax
 5824 5256 C1E810   		shrl	$16, %eax
 799:prog.c        **** 	USBStatus uStatus = usbControlWrite(
 5825              		.loc 2 799 0
 5826 5259 89C1     		movl	%eax, %ecx
 5827 525b 8B45E4   		movl	-28(%rbp), %eax
 5828 525e 0FB7D0   		movzwl	%ax, %edx
 5829 5261 488B45E8 		movq	-24(%rbp), %rax
 5830 5265 488B00   		movq	(%rax), %rax
 5831 5268 FF75D8   		pushq	-40(%rbp)
 5832 526b 6860EA00 		pushq	$60000
 5832      00
 5833 5270 41B90000 		movl	$0, %r9d
 5833      0000
 5834 5276 41B80000 		movl	$0, %r8d
 5834      0000
 5835 527c BE830000 		movl	$131, %esi
 5835      00
 5836 5281 4889C7   		movq	%rax, %rdi
 5837 5284 E8000000 		call	usbControlWrite@PLT
 5837      00
 5838 5289 4883C410 		addq	$16, %rsp
 5839 528d 8945FC   		movl	%eax, -4(%rbp)
 804:prog.c        **** 		NULL,                          // no data
 805:prog.c        **** 		0,                             // wLength
 806:prog.c        **** 		60000,                         // timeout (ms)
 807:prog.c        **** 		error
 808:prog.c        **** 	);
 809:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_JTAG_CLOCKS, cleanup, "jtagClocks()");
 5840              		.loc 2 809 0
 5841 5290 837DFC00 		cmpl	$0, -4(%rbp)
 5842 5294 741B     		je	.L315
 5843              		.loc 2 809 0 is_stmt 0 discriminator 1
 5844 5296 488B45D8 		movq	-40(%rbp), %rax
 5845 529a 488D3500 		leaq	.LC43(%rip), %rsi
 5845      000000
 5846 52a1 4889C7   		movq	%rax, %rdi
 5847 52a4 E8000000 		call	errPrefix@PLT
 5847      00
 5848 52a9 C745F811 		movl	$17, -8(%rbp)
 5848      000000
 5849 52b0 90       		nop
 5850              	.L315:
 810:prog.c        **** cleanup:
 811:prog.c        **** 	return retVal;
 5851              		.loc 2 811 0 is_stmt 1
 5852 52b1 8B45F8   		movl	-8(%rbp), %eax
 812:prog.c        **** }
 5853              		.loc 2 812 0
 5854 52b4 C9       		leave
 5855              		.cfi_def_cfa 7, 8
 5856 52b5 C3       		ret
 5857              		.cfi_endproc
 5858              	.LFE22:
 5860              		.section	.rodata
 5861              	.LC44:
 5862 07ea 6A746167 		.string	"jtagScanChain()"
 5862      5363616E 
 5862      43686169 
 5862      6E282900 
 5863              		.text
 5864              		.globl	jtagScanChain
 5866              	jtagScanChain:
 5867              	.LFB23:
 813:prog.c        **** 
 814:prog.c        **** // Scan the JTAG chain and return an array of IDCODEs
 815:prog.c        **** //
 816:prog.c        **** DLLEXPORT(FLStatus) jtagScanChain(
 817:prog.c        **** 	struct FLContext *handle, const char *portConfig,
 818:prog.c        **** 	uint32 *numDevices, uint32 *deviceArray, uint32 arraySize,
 819:prog.c        **** 	const char **error)
 820:prog.c        **** {
 5868              		.loc 2 820 0
 5869              		.cfi_startproc
 5870 52b6 55       		pushq	%rbp
 5871              		.cfi_def_cfa_offset 16
 5872              		.cfi_offset 6, -16
 5873 52b7 4889E5   		movq	%rsp, %rbp
 5874              		.cfi_def_cfa_register 6
 5875 52ba 53       		pushq	%rbx
 5876 52bb 4883EC58 		subq	$88, %rsp
 5877              		.cfi_offset 3, -24
 5878 52bf 48897DC8 		movq	%rdi, -56(%rbp)
 5879 52c3 488975C0 		movq	%rsi, -64(%rbp)
 5880 52c7 488955B8 		movq	%rdx, -72(%rbp)
 5881 52cb 48894DB0 		movq	%rcx, -80(%rbp)
 5882 52cf 448945AC 		movl	%r8d, -84(%rbp)
 5883 52d3 4C894DA0 		movq	%r9, -96(%rbp)
 5884              		.loc 2 820 0
 5885 52d7 64488B04 		movq	%fs:40, %rax
 5885      25280000 
 5885      00
 5886 52e0 488945E8 		movq	%rax, -24(%rbp)
 5887 52e4 31C0     		xorl	%eax, %eax
 821:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 5888              		.loc 2 821 0
 5889 52e6 C745D400 		movl	$0, -44(%rbp)
 5889      000000
 822:prog.c        **** 	FLStatus fStatus;
 823:prog.c        **** 	uint32 i = 0;
 5890              		.loc 2 823 0
 5891 52ed C745D800 		movl	$0, -40(%rbp)
 5891      000000
 824:prog.c        **** 	union {
 825:prog.c        **** 		uint32 idCode;
 826:prog.c        **** 		uint8 bytes[4];
 827:prog.c        **** 	} u;
 828:prog.c        **** 	fStatus = progOpenInternal(handle, portConfig, portConfig, error);
 5892              		.loc 2 828 0
 5893 52f4 488B4DA0 		movq	-96(%rbp), %rcx
 5894 52f8 488B55C0 		movq	-64(%rbp), %rdx
 5895 52fc 488B75C0 		movq	-64(%rbp), %rsi
 5896 5300 488B45C8 		movq	-56(%rbp), %rax
 5897 5304 4889C7   		movq	%rax, %rdi
 5898 5307 E83BE8FF 		call	progOpenInternal
 5898      FF
 5899 530c 8945DC   		movl	%eax, -36(%rbp)
 829:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jtagScanChain()");
 5900              		.loc 2 829 0
 5901 530f 837DDC00 		cmpl	$0, -36(%rbp)
 5902 5313 741E     		je	.L318
 5903              		.loc 2 829 0 is_stmt 0 discriminator 1
 5904 5315 488B45A0 		movq	-96(%rbp), %rax
 5905 5319 488D3500 		leaq	.LC44(%rip), %rsi
 5905      000000
 5906 5320 4889C7   		movq	%rax, %rdi
 5907 5323 E8000000 		call	errPrefix@PLT
 5907      00
 5908 5328 8B45DC   		movl	-36(%rbp), %eax
 5909 532b 8945D4   		movl	%eax, -44(%rbp)
 5910 532e E94F0100 		jmp	.L319
 5910      00
 5911              	.L318:
 830:prog.c        **** 
 831:prog.c        **** 	i = 0;
 5912              		.loc 2 831 0 is_stmt 1
 5913 5333 C745D800 		movl	$0, -40(%rbp)
 5913      000000
 832:prog.c        **** 	fStatus = jtagClockFSM(handle, 0x0000005F, 9, error);  // Reset TAP, goto Shift-DR
 5914              		.loc 2 832 0
 5915 533a 488B55A0 		movq	-96(%rbp), %rdx
 5916 533e 488B45C8 		movq	-56(%rbp), %rax
 5917 5342 4889D1   		movq	%rdx, %rcx
 5918 5345 BA090000 		movl	$9, %edx
 5918      00
 5919 534a BE5F0000 		movl	$95, %esi
 5919      00
 5920 534f 4889C7   		movq	%rax, %rdi
 5921 5352 E8000000 		call	jtagClockFSM@PLT
 5921      00
 5922 5357 8945DC   		movl	%eax, -36(%rbp)
 833:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jtagScanChain()");
 5923              		.loc 2 833 0
 5924 535a 837DDC00 		cmpl	$0, -36(%rbp)
 5925 535e 741E     		je	.L320
 5926              		.loc 2 833 0 is_stmt 0 discriminator 1
 5927 5360 488B45A0 		movq	-96(%rbp), %rax
 5928 5364 488D3500 		leaq	.LC44(%rip), %rsi
 5928      000000
 5929 536b 4889C7   		movq	%rax, %rdi
 5930 536e E8000000 		call	errPrefix@PLT
 5930      00
 5931 5373 8B45DC   		movl	-36(%rbp), %eax
 5932 5376 8945D4   		movl	%eax, -44(%rbp)
 5933 5379 E9040100 		jmp	.L319
 5933      00
 5934              	.L320:
 834:prog.c        **** 	for ( ; ; ) {
 835:prog.c        **** 		fStatus = jtagShiftInOut(handle, 32, SHIFT_ZEROS, u.bytes, false, error);
 5935              		.loc 2 835 0 is_stmt 1
 5936 537e 488B4DA0 		movq	-96(%rbp), %rcx
 5937 5382 488D55E0 		leaq	-32(%rbp), %rdx
 5938 5386 488B45C8 		movq	-56(%rbp), %rax
 5939 538a 4989C9   		movq	%rcx, %r9
 5940 538d 41B80000 		movl	$0, %r8d
 5940      0000
 5941 5393 4889D1   		movq	%rdx, %rcx
 5942 5396 BA000000 		movl	$0, %edx
 5942      00
 5943 539b BE200000 		movl	$32, %esi
 5943      00
 5944 53a0 4889C7   		movq	%rax, %rdi
 5945 53a3 E8000000 		call	jtagShiftInOut@PLT
 5945      00
 5946 53a8 8945DC   		movl	%eax, -36(%rbp)
 836:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagScanChain()");
 5947              		.loc 2 836 0
 5948 53ab 837DDC00 		cmpl	$0, -36(%rbp)
 5949 53af 741E     		je	.L321
 5950              		.loc 2 836 0 is_stmt 0 discriminator 1
 5951 53b1 488B45A0 		movq	-96(%rbp), %rax
 5952 53b5 488D3500 		leaq	.LC44(%rip), %rsi
 5952      000000
 5953 53bc 4889C7   		movq	%rax, %rdi
 5954 53bf E8000000 		call	errPrefix@PLT
 5954      00
 5955 53c4 8B45DC   		movl	-36(%rbp), %eax
 5956 53c7 8945D4   		movl	%eax, -44(%rbp)
 5957 53ca E9B30000 		jmp	.L319
 5957      00
 5958              	.L321:
 837:prog.c        **** 		if ( u.idCode == 0x00000000 || u.idCode == U32MAX ) {
 5959              		.loc 2 837 0 is_stmt 1
 5960 53cf 8B45E0   		movl	-32(%rbp), %eax
 5961 53d2 85C0     		testl	%eax, %eax
 5962 53d4 743F     		je	.L322
 5963              		.loc 2 837 0 is_stmt 0 discriminator 1
 5964 53d6 8B45E0   		movl	-32(%rbp), %eax
 5965 53d9 83F8FF   		cmpl	$-1, %eax
 5966 53dc 7437     		je	.L322
 838:prog.c        **** 			break;
 839:prog.c        **** 		}
 840:prog.c        **** 		if ( deviceArray && i < arraySize ) {
 5967              		.loc 2 840 0 is_stmt 1
 5968 53de 48837DB0 		cmpq	$0, -80(%rbp)
 5968      00
 5969 53e3 7427     		je	.L323
 5970              		.loc 2 840 0 is_stmt 0 discriminator 1
 5971 53e5 8B45D8   		movl	-40(%rbp), %eax
 5972 53e8 3B45AC   		cmpl	-84(%rbp), %eax
 5973 53eb 731F     		jnb	.L323
 841:prog.c        **** 			deviceArray[i] = littleEndian32(u.idCode);
 5974              		.loc 2 841 0 is_stmt 1
 5975 53ed 8B45D8   		movl	-40(%rbp), %eax
 5976 53f0 488D1485 		leaq	0(,%rax,4), %rdx
 5976      00000000 
 5977 53f8 488B45B0 		movq	-80(%rbp), %rax
 5978 53fc 488D1C02 		leaq	(%rdx,%rax), %rbx
 5979 5400 8B45E0   		movl	-32(%rbp), %eax
 5980 5403 89C7     		movl	%eax, %edi
 5981 5405 E8F6ABFF 		call	littleEndian32
 5981      FF
 5982 540a 8903     		movl	%eax, (%rbx)
 5983              	.L323:
 842:prog.c        **** 		}
 843:prog.c        **** 		i++;
 5984              		.loc 2 843 0
 5985 540c 8345D801 		addl	$1, -40(%rbp)
 844:prog.c        **** 	}
 5986              		.loc 2 844 0
 5987 5410 E969FFFF 		jmp	.L320
 5987      FF
 5988              	.L322:
 845:prog.c        **** 	if ( deviceArray && i ) {
 5989              		.loc 2 845 0
 5990 5415 48837DB0 		cmpq	$0, -80(%rbp)
 5990      00
 5991 541a 7420     		je	.L324
 5992              		.loc 2 845 0 is_stmt 0 discriminator 1
 5993 541c 837DD800 		cmpl	$0, -40(%rbp)
 5994 5420 741A     		je	.L324
 846:prog.c        **** 		// The IDCODEs we have are in reverse order, so swap them to get the correct chain order.
 847:prog.c        **** 		swap(deviceArray, (i > arraySize) ? arraySize : i);
 5995              		.loc 2 847 0 is_stmt 1
 5996 5422 8B45AC   		movl	-84(%rbp), %eax
 5997 5425 3945D8   		cmpl	%eax, -40(%rbp)
 5998 5428 0F4645D8 		cmovbe	-40(%rbp), %eax
 5999 542c 89C2     		movl	%eax, %edx
 6000 542e 488B45B0 		movq	-80(%rbp), %rax
 6001 5432 89D6     		movl	%edx, %esi
 6002 5434 4889C7   		movq	%rax, %rdi
 6003 5437 E896F7FF 		call	swap
 6003      FF
 6004              	.L324:
 848:prog.c        **** 	}
 849:prog.c        **** 	if ( numDevices ) {
 6005              		.loc 2 849 0
 6006 543c 48837DB8 		cmpq	$0, -72(%rbp)
 6006      00
 6007 5441 7409     		je	.L325
 850:prog.c        **** 		*numDevices = i;
 6008              		.loc 2 850 0
 6009 5443 488B45B8 		movq	-72(%rbp), %rax
 6010 5447 8B55D8   		movl	-40(%rbp), %edx
 6011 544a 8910     		movl	%edx, (%rax)
 6012              	.L325:
 851:prog.c        **** 	}
 852:prog.c        **** 
 853:prog.c        **** 	fStatus = progClose(handle, error);
 6013              		.loc 2 853 0
 6014 544c 488B55A0 		movq	-96(%rbp), %rdx
 6015 5450 488B45C8 		movq	-56(%rbp), %rax
 6016 5454 4889D6   		movq	%rdx, %rsi
 6017 5457 4889C7   		movq	%rax, %rdi
 6018 545a E8000000 		call	progClose@PLT
 6018      00
 6019 545f 8945DC   		movl	%eax, -36(%rbp)
 854:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jtagScanChain()");
 6020              		.loc 2 854 0
 6021 5462 837DDC00 		cmpl	$0, -36(%rbp)
 6022 5466 741A     		je	.L319
 6023              		.loc 2 854 0 is_stmt 0 discriminator 1
 6024 5468 488B45A0 		movq	-96(%rbp), %rax
 6025 546c 488D3500 		leaq	.LC44(%rip), %rsi
 6025      000000
 6026 5473 4889C7   		movq	%rax, %rdi
 6027 5476 E8000000 		call	errPrefix@PLT
 6027      00
 6028 547b 8B45DC   		movl	-36(%rbp), %eax
 6029 547e 8945D4   		movl	%eax, -44(%rbp)
 6030 5481 90       		nop
 6031              	.L319:
 855:prog.c        **** 
 856:prog.c        **** cleanup:
 857:prog.c        **** 	return retVal;
 6032              		.loc 2 857 0 is_stmt 1
 6033 5482 8B45D4   		movl	-44(%rbp), %eax
 858:prog.c        **** }
 6034              		.loc 2 858 0
 6035 5485 488B5DE8 		movq	-24(%rbp), %rbx
 6036 5489 6448331C 		xorq	%fs:40, %rbx
 6036      25280000 
 6036      00
 6037 5492 7405     		je	.L327
 6038 5494 E8000000 		call	__stack_chk_fail@PLT
 6038      00
 6039              	.L327:
 6040 5499 4883C458 		addq	$88, %rsp
 6041 549d 5B       		popq	%rbx
 6042 549e 5D       		popq	%rbp
 6043              		.cfi_def_cfa 7, 8
 6044 549f C3       		ret
 6045              		.cfi_endproc
 6046              	.LFE23:
 6048              		.section	.rodata
 6049 07fa 00000000 		.align 8
 6049      0000
 6050              	.LC45:
 6051 0800 666C5072 		.string	"flProgram(): Missing Xilinx algorithm code"
 6051      6F677261 
 6051      6D28293A 
 6051      204D6973 
 6051      73696E67 
 6052 082b 00000000 		.align 8
 6052      00
 6053              	.LC46:
 6054 0830 666C5072 		.string	"flProgram(): '%c' is not a valid Xilinx algorithm code"
 6054      6F677261 
 6054      6D28293A 
 6054      20272563 
 6054      27206973 
 6055 0867 00       		.align 8
 6056              	.LC47:
 6057 0868 666C5072 		.string	"flProgram(): Missing Altera algorithm code"
 6057      6F677261 
 6057      6D28293A 
 6057      204D6973 
 6057      73696E67 
 6058 0893 00000000 		.align 8
 6058      00
 6059              	.LC48:
 6060 0898 666C5072 		.string	"flProgram(): '%c' is not a valid Altera algorithm code"
 6060      6F677261 
 6060      6D28293A 
 6060      20272563 
 6060      27206973 
 6061 08cf 00       		.align 8
 6062              	.LC49:
 6063 08d0 666C5072 		.string	"flProgram(): Missing algorithm vendor code"
 6063      6F677261 
 6063      6D28293A 
 6063      204D6973 
 6063      73696E67 
 6064 08fb 00000000 		.align 8
 6064      00
 6065              	.LC50:
 6066 0900 666C5072 		.string	"flProgram(): '%c' is not a valid algorithm vendor code"
 6066      6F677261 
 6066      6D28293A 
 6066      20272563 
 6066      27206973 
 6067              		.text
 6068              		.globl	flProgramBlob
 6070              	flProgramBlob:
 6071              	.LFB24:
 859:prog.c        **** 
 860:prog.c        **** // Programs a device using in-memory configuration information
 861:prog.c        **** //
 862:prog.c        **** DLLEXPORT(FLStatus) flProgramBlob(
 863:prog.c        **** 	struct FLContext *handle, const char *portConfig, uint32 blobLength, const uint8 *blobData,
 864:prog.c        **** 	const char **error)
 865:prog.c        **** {
 6072              		.loc 2 865 0
 6073              		.cfi_startproc
 6074 54a0 55       		pushq	%rbp
 6075              		.cfi_def_cfa_offset 16
 6076              		.cfi_offset 6, -16
 6077 54a1 4889E5   		movq	%rsp, %rbp
 6078              		.cfi_def_cfa_register 6
 6079 54a4 4883EC40 		subq	$64, %rsp
 6080 54a8 48897DE8 		movq	%rdi, -24(%rbp)
 6081 54ac 488975E0 		movq	%rsi, -32(%rbp)
 6082 54b0 8955DC   		movl	%edx, -36(%rbp)
 6083 54b3 48894DD0 		movq	%rcx, -48(%rbp)
 6084 54b7 4C8945C8 		movq	%r8, -56(%rbp)
 866:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 6085              		.loc 2 866 0
 6086 54bb C745FC00 		movl	$0, -4(%rbp)
 6086      000000
 867:prog.c        **** 	const char algoVendor = portConfig[0];
 6087              		.loc 2 867 0
 6088 54c2 488B45E0 		movq	-32(%rbp), %rax
 6089 54c6 0FB600   		movzbl	(%rax), %eax
 6090 54c9 8845F9   		movb	%al, -7(%rbp)
 868:prog.c        **** 	if ( algoVendor == 'X' ) {
 6091              		.loc 2 868 0
 6092 54cc 807DF958 		cmpb	$88, -7(%rbp)
 6093 54d0 0F85BA00 		jne	.L329
 6093      0000
 6094              	.LBB4:
 869:prog.c        **** 		// This is a Xilinx algorithm
 870:prog.c        **** 		const char algoType = portConfig[1];
 6095              		.loc 2 870 0
 6096 54d6 488B45E0 		movq	-32(%rbp), %rax
 6097 54da 0FB64001 		movzbl	1(%rax), %eax
 6098 54de 8845FA   		movb	%al, -6(%rbp)
 871:prog.c        **** 		if ( algoType == 'P' ) {
 6099              		.loc 2 871 0
 6100 54e1 807DFA50 		cmpb	$80, -6(%rbp)
 6101 54e5 752B     		jne	.L330
 872:prog.c        **** 			// This is Xilinx Slave Parallel ("SelectMAP")
 873:prog.c        **** 			return xProgram(handle, PROG_PARALLEL, portConfig, blobData, blobLength, error);
 6102              		.loc 2 873 0
 6103 54e7 488B7DC8 		movq	-56(%rbp), %rdi
 6104 54eb 8B75DC   		movl	-36(%rbp), %esi
 6105 54ee 488B4DD0 		movq	-48(%rbp), %rcx
 6106 54f2 488B55E0 		movq	-32(%rbp), %rdx
 6107 54f6 488B45E8 		movq	-24(%rbp), %rax
 6108 54fa 4989F9   		movq	%rdi, %r9
 6109 54fd 4189F0   		movl	%esi, %r8d
 6110 5500 BE050000 		movl	$5, %esi
 6110      00
 6111 5505 4889C7   		movq	%rax, %rdi
 6112 5508 E84CB5FF 		call	xProgram
 6112      FF
 6113 550d E96B0100 		jmp	.L331
 6113      00
 6114              	.L330:
 874:prog.c        **** 		} else if ( algoType == 'S' ) {
 6115              		.loc 2 874 0
 6116 5512 807DFA53 		cmpb	$83, -6(%rbp)
 6117 5516 752B     		jne	.L332
 875:prog.c        **** 			// This is Xilinx Slave Serial
 876:prog.c        **** 			return xProgram(handle, PROG_SPI_SEND, portConfig, blobData, blobLength, error);
 6118              		.loc 2 876 0
 6119 5518 488B7DC8 		movq	-56(%rbp), %rdi
 6120 551c 8B75DC   		movl	-36(%rbp), %esi
 6121 551f 488B4DD0 		movq	-48(%rbp), %rcx
 6122 5523 488B55E0 		movq	-32(%rbp), %rdx
 6123 5527 488B45E8 		movq	-24(%rbp), %rax
 6124 552b 4989F9   		movq	%rdi, %r9
 6125 552e 4189F0   		movl	%esi, %r8d
 6126 5531 BE060000 		movl	$6, %esi
 6126      00
 6127 5536 4889C7   		movq	%rax, %rdi
 6128 5539 E81BB5FF 		call	xProgram
 6128      FF
 6129 553e E93A0100 		jmp	.L331
 6129      00
 6130              	.L332:
 877:prog.c        **** 		} else if ( algoType == '\0' ) {
 6131              		.loc 2 877 0
 6132 5543 807DFA00 		cmpb	$0, -6(%rbp)
 6133 5547 751F     		jne	.L333
 878:prog.c        **** 			CHECK_STATUS(true, FL_CONF_FORMAT, cleanup, "flProgram(): Missing Xilinx algorithm code");
 6134              		.loc 2 878 0 discriminator 1
 6135 5549 488B45C8 		movq	-56(%rbp), %rax
 6136 554d 488D3500 		leaq	.LC45(%rip), %rsi
 6136      000000
 6137 5554 4889C7   		movq	%rax, %rdi
 6138 5557 E8000000 		call	errPrefix@PLT
 6138      00
 6139 555c C745FC0B 		movl	$11, -4(%rbp)
 6139      000000
 6140 5563 E9120100 		jmp	.L334
 6140      00
 6141              	.L333:
 879:prog.c        **** 		} else {
 880:prog.c        **** 			CHECK_STATUS(
 6142              		.loc 2 880 0 discriminator 1
 6143 5568 0FBE55FA 		movsbl	-6(%rbp), %edx
 6144 556c 488B45C8 		movq	-56(%rbp), %rax
 6145 5570 488D3500 		leaq	.LC46(%rip), %rsi
 6145      000000
 6146 5577 4889C7   		movq	%rax, %rdi
 6147 557a B8000000 		movl	$0, %eax
 6147      00
 6148 557f E8000000 		call	errRender@PLT
 6148      00
 6149 5584 C745FC0B 		movl	$11, -4(%rbp)
 6149      000000
 6150 558b E9EA0000 		jmp	.L334
 6150      00
 6151              	.L329:
 6152              	.LBE4:
 881:prog.c        **** 				true, FL_CONF_FORMAT, cleanup,
 882:prog.c        **** 				"flProgram(): '%c' is not a valid Xilinx algorithm code", algoType);
 883:prog.c        **** 		}
 884:prog.c        **** 	} else if ( algoVendor == 'A' ) {
 6153              		.loc 2 884 0
 6154 5590 807DF941 		cmpb	$65, -7(%rbp)
 6155 5594 757E     		jne	.L335
 6156              	.LBB5:
 885:prog.c        **** 		// This is an Altera algorithm
 886:prog.c        **** 		const char algoType = portConfig[1];
 6157              		.loc 2 886 0
 6158 5596 488B45E0 		movq	-32(%rbp), %rax
 6159 559a 0FB64001 		movzbl	1(%rax), %eax
 6160 559e 8845FB   		movb	%al, -5(%rbp)
 887:prog.c        **** 		if ( algoType == 'S' ) {
 6161              		.loc 2 887 0
 6162 55a1 807DFB53 		cmpb	$83, -5(%rbp)
 6163 55a5 7523     		jne	.L336
 888:prog.c        **** 			// This is Altera Passive Serial
 889:prog.c        **** 			return aProgram(handle, portConfig, blobData, blobLength, error);
 6164              		.loc 2 889 0
 6165 55a7 488B7DC8 		movq	-56(%rbp), %rdi
 6166 55ab 8B4DDC   		movl	-36(%rbp), %ecx
 6167 55ae 488B55D0 		movq	-48(%rbp), %rdx
 6168 55b2 488B75E0 		movq	-32(%rbp), %rsi
 6169 55b6 488B45E8 		movq	-24(%rbp), %rax
 6170 55ba 4989F8   		movq	%rdi, %r8
 6171 55bd 4889C7   		movq	%rax, %rdi
 6172 55c0 E8BAD1FF 		call	aProgram
 6172      FF
 6173 55c5 E9B30000 		jmp	.L331
 6173      00
 6174              	.L336:
 890:prog.c        **** 		} else if ( algoType == '\0' ) {
 6175              		.loc 2 890 0
 6176 55ca 807DFB00 		cmpb	$0, -5(%rbp)
 6177 55ce 751F     		jne	.L337
 891:prog.c        **** 			CHECK_STATUS(true, FL_CONF_FORMAT, cleanup, "flProgram(): Missing Altera algorithm code");
 6178              		.loc 2 891 0 discriminator 1
 6179 55d0 488B45C8 		movq	-56(%rbp), %rax
 6180 55d4 488D3500 		leaq	.LC47(%rip), %rsi
 6180      000000
 6181 55db 4889C7   		movq	%rax, %rdi
 6182 55de E8000000 		call	errPrefix@PLT
 6182      00
 6183 55e3 C745FC0B 		movl	$11, -4(%rbp)
 6183      000000
 6184 55ea E98B0000 		jmp	.L334
 6184      00
 6185              	.L337:
 892:prog.c        **** 		} else {
 893:prog.c        **** 			CHECK_STATUS(
 6186              		.loc 2 893 0 discriminator 1
 6187 55ef 0FBE55FB 		movsbl	-5(%rbp), %edx
 6188 55f3 488B45C8 		movq	-56(%rbp), %rax
 6189 55f7 488D3500 		leaq	.LC48(%rip), %rsi
 6189      000000
 6190 55fe 4889C7   		movq	%rax, %rdi
 6191 5601 B8000000 		movl	$0, %eax
 6191      00
 6192 5606 E8000000 		call	errRender@PLT
 6192      00
 6193 560b C745FC0B 		movl	$11, -4(%rbp)
 6193      000000
 6194 5612 EB66     		jmp	.L334
 6195              	.L335:
 6196              	.LBE5:
 894:prog.c        **** 				true, FL_CONF_FORMAT, cleanup,
 895:prog.c        **** 				"flProgram(): '%c' is not a valid Altera algorithm code", algoType);
 896:prog.c        **** 		}
 897:prog.c        **** 	} else if ( algoVendor == 'J' ) {
 6197              		.loc 2 897 0
 6198 5614 807DF94A 		cmpb	$74, -7(%rbp)
 6199 5618 751A     		jne	.L338
 898:prog.c        **** 		// This is a JTAG algorithm
 899:prog.c        **** 		return jProgram(handle, portConfig, blobData, error);
 6200              		.loc 2 899 0
 6201 561a 488B4DC8 		movq	-56(%rbp), %rcx
 6202 561e 488B55D0 		movq	-48(%rbp), %rdx
 6203 5622 488B75E0 		movq	-32(%rbp), %rsi
 6204 5626 488B45E8 		movq	-24(%rbp), %rax
 6205 562a 4889C7   		movq	%rax, %rdi
 6206 562d E826F4FF 		call	jProgram
 6206      FF
 6207 5632 EB49     		jmp	.L331
 6208              	.L338:
 900:prog.c        **** 	} else if ( algoVendor == '\0' ) {
 6209              		.loc 2 900 0
 6210 5634 807DF900 		cmpb	$0, -7(%rbp)
 6211 5638 751C     		jne	.L339
 901:prog.c        **** 		CHECK_STATUS(true, FL_CONF_FORMAT, cleanup, "flProgram(): Missing algorithm vendor code");
 6212              		.loc 2 901 0 discriminator 1
 6213 563a 488B45C8 		movq	-56(%rbp), %rax
 6214 563e 488D3500 		leaq	.LC49(%rip), %rsi
 6214      000000
 6215 5645 4889C7   		movq	%rax, %rdi
 6216 5648 E8000000 		call	errPrefix@PLT
 6216      00
 6217 564d C745FC0B 		movl	$11, -4(%rbp)
 6217      000000
 6218 5654 EB24     		jmp	.L334
 6219              	.L339:
 902:prog.c        **** 	} else {
 903:prog.c        **** 		CHECK_STATUS(
 6220              		.loc 2 903 0 discriminator 1
 6221 5656 0FBE55F9 		movsbl	-7(%rbp), %edx
 6222 565a 488B45C8 		movq	-56(%rbp), %rax
 6223 565e 488D3500 		leaq	.LC50(%rip), %rsi
 6223      000000
 6224 5665 4889C7   		movq	%rax, %rdi
 6225 5668 B8000000 		movl	$0, %eax
 6225      00
 6226 566d E8000000 		call	errRender@PLT
 6226      00
 6227 5672 C745FC0B 		movl	$11, -4(%rbp)
 6227      000000
 6228 5679 90       		nop
 6229              	.L334:
 904:prog.c        **** 			true, FL_CONF_FORMAT, cleanup,
 905:prog.c        **** 			"flProgram(): '%c' is not a valid algorithm vendor code", algoVendor);
 906:prog.c        **** 	}
 907:prog.c        **** cleanup:
 908:prog.c        **** 	return retVal;
 6230              		.loc 2 908 0
 6231 567a 8B45FC   		movl	-4(%rbp), %eax
 6232              	.L331:
 909:prog.c        **** }
 6233              		.loc 2 909 0
 6234 567d C9       		leave
 6235              		.cfi_def_cfa 7, 8
 6236 567e C3       		ret
 6237              		.cfi_endproc
 6238              	.LFE24:
 6240              		.section	.rodata
 6241              	.LC51:
 6242 0937 706C6179 		.string	"playSVF()"
 6242      53564628 
 6242      2900
 6243 0941 00000000 		.align 8
 6243      000000
 6244              	.LC52:
 6245 0948 666C5072 		.string	"flProgram(): portConfig terminated before first ':'"
 6245      6F677261 
 6245      6D28293A 
 6245      20706F72 
 6245      74436F6E 
 6246 097c 00000000 		.align 8
 6247              	.LC53:
 6248 0980 666C5072 		.string	"flProgram(): progFile was NULL, and portConfig didn't specify a file"
 6248      6F677261 
 6248      6D28293A 
 6248      2070726F 
 6248      6746696C 
 6249              	.LC54:
 6250 09c5 2E737666 		.string	".svf"
 6250      00
 6251              	.LC55:
 6252 09ca 666C5072 		.string	"flProgram()"
 6252      6F677261 
 6252      6D282900 
 6253              	.LC56:
 6254 09d6 2E787376 		.string	".xsvf"
 6254      6600
 6255              	.LC57:
 6256 09dc 2E637376 		.string	".csvf"
 6256      6600
 6257 09e2 00000000 		.align 8
 6257      0000
 6258              	.LC58:
 6259 09e8 666C5072 		.string	"flProgram(): JTAG files should have .svf, .xsvf or .csvf extension"
 6259      6F677261 
 6259      6D28293A 
 6259      204A5441 
 6259      47206669 
 6260              		.text
 6261              		.globl	flProgram
 6263              	flProgram:
 6264              	.LFB25:
 910:prog.c        **** 	
 911:prog.c        **** // Programs a device using configuration information loaded from a file. If progFile is NULL,
 912:prog.c        **** // it expects to find a filename at the end of portConfig.
 913:prog.c        **** //
 914:prog.c        **** DLLEXPORT(FLStatus) flProgram(
 915:prog.c        **** 	struct FLContext *handle, const char *portConfig, const char *progFile, const char **error) {
 6265              		.loc 2 915 0
 6266              		.cfi_startproc
 6267 567f 55       		pushq	%rbp
 6268              		.cfi_def_cfa_offset 16
 6269              		.cfi_offset 6, -16
 6270 5680 4889E5   		movq	%rsp, %rbp
 6271              		.cfi_def_cfa_register 6
 6272 5683 4883EC70 		subq	$112, %rsp
 6273 5687 48897DA8 		movq	%rdi, -88(%rbp)
 6274 568b 488975A0 		movq	%rsi, -96(%rbp)
 6275 568f 48895598 		movq	%rdx, -104(%rbp)
 6276 5693 48894D90 		movq	%rcx, -112(%rbp)
 6277              		.loc 2 915 0
 6278 5697 64488B04 		movq	%fs:40, %rax
 6278      25280000 
 6278      00
 6279 56a0 488945F8 		movq	%rax, -8(%rbp)
 6280 56a4 31C0     		xorl	%eax, %eax
 916:prog.c        **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 6281              		.loc 2 916 0
 6282 56a6 C745BC00 		movl	$0, -68(%rbp)
 6282      000000
 917:prog.c        **** 	const char algoVendor = portConfig[0];
 6283              		.loc 2 917 0
 6284 56ad 488B45A0 		movq	-96(%rbp), %rax
 6285 56b1 0FB600   		movzbl	(%rax), %eax
 6286 56b4 8845BB   		movb	%al, -69(%rbp)
 918:prog.c        **** 	struct Buffer fileBuf = {0,};
 6287              		.loc 2 918 0
 6288 56b7 48C745D0 		movq	$0, -48(%rbp)
 6288      00000000 
 6289 56bf 48C745D8 		movq	$0, -40(%rbp)
 6289      00000000 
 6290 56c7 48C745E0 		movq	$0, -32(%rbp)
 6290      00000000 
 6291 56cf 48C745E8 		movq	$0, -24(%rbp)
 6291      00000000 
 919:prog.c        **** 	BufferStatus bStatus = bufInitialise(&fileBuf, 0x20000, 0, error);
 6292              		.loc 2 919 0
 6293 56d7 488B5590 		movq	-112(%rbp), %rdx
 6294 56db 488D45D0 		leaq	-48(%rbp), %rax
 6295 56df 4889D1   		movq	%rdx, %rcx
 6296 56e2 BA000000 		movl	$0, %edx
 6296      00
 6297 56e7 BE000002 		movl	$131072, %esi
 6297      00
 6298 56ec 4889C7   		movq	%rax, %rdi
 6299 56ef E8000000 		call	bufInitialise@PLT
 6299      00
 6300 56f4 8945C0   		movl	%eax, -64(%rbp)
 920:prog.c        **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "playSVF()");
 6301              		.loc 2 920 0
 6302 56f7 837DC000 		cmpl	$0, -64(%rbp)
 6303 56fb 741F     		je	.L341
 6304              		.loc 2 920 0 is_stmt 0 discriminator 1
 6305 56fd 488B4590 		movq	-112(%rbp), %rax
 6306 5701 488D3500 		leaq	.LC51(%rip), %rsi
 6306      000000
 6307 5708 4889C7   		movq	%rax, %rdi
 6308 570b E8000000 		call	errPrefix@PLT
 6308      00
 6309 5710 C745BC01 		movl	$1, -68(%rbp)
 6309      000000
 6310 5717 E98A0200 		jmp	.L342
 6310      00
 6311              	.L341:
 921:prog.c        **** 	if ( progFile == NULL ) {
 6312              		.loc 2 921 0 is_stmt 1
 6313 571c 48837D98 		cmpq	$0, -104(%rbp)
 6313      00
 6314 5721 0F85A000 		jne	.L343
 6314      0000
 922:prog.c        **** 		// Expect to find prog file at the end of portConfig
 923:prog.c        **** 		progFile = portConfig;
 6315              		.loc 2 923 0
 6316 5727 488B45A0 		movq	-96(%rbp), %rax
 6317 572b 48894598 		movq	%rax, -104(%rbp)
 924:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6318              		.loc 2 924 0
 6319 572f EB05     		jmp	.L344
 6320              	.L346:
 925:prog.c        **** 			progFile++;
 6321              		.loc 2 925 0
 6322 5731 48834598 		addq	$1, -104(%rbp)
 6322      01
 6323              	.L344:
 924:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6324              		.loc 2 924 0
 6325 5736 488B4598 		movq	-104(%rbp), %rax
 6326 573a 0FB600   		movzbl	(%rax), %eax
 6327 573d 84C0     		testb	%al, %al
 6328 573f 740B     		je	.L345
 924:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6329              		.loc 2 924 0 is_stmt 0 discriminator 1
 6330 5741 488B4598 		movq	-104(%rbp), %rax
 6331 5745 0FB600   		movzbl	(%rax), %eax
 6332 5748 3C3A     		cmpb	$58, %al
 6333 574a 75E5     		jne	.L346
 6334              	.L345:
 926:prog.c        **** 		}
 927:prog.c        **** 		CHECK_STATUS(
 6335              		.loc 2 927 0 is_stmt 1
 6336 574c 488B4598 		movq	-104(%rbp), %rax
 6337 5750 0FB600   		movzbl	(%rax), %eax
 6338 5753 84C0     		testb	%al, %al
 6339 5755 751F     		jne	.L347
 6340              		.loc 2 927 0 is_stmt 0 discriminator 1
 6341 5757 488B4590 		movq	-112(%rbp), %rax
 6342 575b 488D3500 		leaq	.LC52(%rip), %rsi
 6342      000000
 6343 5762 4889C7   		movq	%rax, %rdi
 6344 5765 E8000000 		call	errPrefix@PLT
 6344      00
 6345 576a C745BC0B 		movl	$11, -68(%rbp)
 6345      000000
 6346 5771 E9300200 		jmp	.L342
 6346      00
 6347              	.L347:
 928:prog.c        **** 			*progFile == '\0', FL_CONF_FORMAT, cleanup,
 929:prog.c        **** 			"flProgram(): portConfig terminated before first ':'");
 930:prog.c        **** 		progFile++;
 6348              		.loc 2 930 0 is_stmt 1
 6349 5776 48834598 		addq	$1, -104(%rbp)
 6349      01
 931:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6350              		.loc 2 931 0
 6351 577b EB05     		jmp	.L348
 6352              	.L350:
 932:prog.c        **** 			progFile++;
 6353              		.loc 2 932 0
 6354 577d 48834598 		addq	$1, -104(%rbp)
 6354      01
 6355              	.L348:
 931:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6356              		.loc 2 931 0
 6357 5782 488B4598 		movq	-104(%rbp), %rax
 6358 5786 0FB600   		movzbl	(%rax), %eax
 6359 5789 84C0     		testb	%al, %al
 6360 578b 740B     		je	.L349
 931:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6361              		.loc 2 931 0 is_stmt 0 discriminator 1
 6362 578d 488B4598 		movq	-104(%rbp), %rax
 6363 5791 0FB600   		movzbl	(%rax), %eax
 6364 5794 3C3A     		cmpb	$58, %al
 6365 5796 75E5     		jne	.L350
 6366              	.L349:
 933:prog.c        **** 		}
 934:prog.c        **** 		CHECK_STATUS(
 6367              		.loc 2 934 0 is_stmt 1
 6368 5798 488B4598 		movq	-104(%rbp), %rax
 6369 579c 0FB600   		movzbl	(%rax), %eax
 6370 579f 84C0     		testb	%al, %al
 6371 57a1 751F     		jne	.L351
 6372              		.loc 2 934 0 is_stmt 0 discriminator 1
 6373 57a3 488B4590 		movq	-112(%rbp), %rax
 6374 57a7 488D3500 		leaq	.LC53(%rip), %rsi
 6374      000000
 6375 57ae 4889C7   		movq	%rax, %rdi
 6376 57b1 E8000000 		call	errPrefix@PLT
 6376      00
 6377 57b6 C745BC0B 		movl	$11, -68(%rbp)
 6377      000000
 6378 57bd E9E40100 		jmp	.L342
 6378      00
 6379              	.L351:
 935:prog.c        **** 			*progFile == '\0', FL_CONF_FORMAT, cleanup,
 936:prog.c        **** 			"flProgram(): progFile was NULL, and portConfig didn't specify a file");
 937:prog.c        **** 		progFile++;
 6380              		.loc 2 937 0 is_stmt 1
 6381 57c2 48834598 		addq	$1, -104(%rbp)
 6381      01
 6382              	.L343:
 938:prog.c        **** 	}
 939:prog.c        **** 	if ( algoVendor == 'J' ) {
 6383              		.loc 2 939 0
 6384 57c7 807DBB4A 		cmpb	$74, -69(%rbp)
 6385 57cb 0F855001 		jne	.L352
 6385      0000
 6386              	.LBB6:
 940:prog.c        **** 		// JTAG file
 941:prog.c        **** 		const char *const ext = progFile + strlen(progFile) - 5;
 6387              		.loc 2 941 0
 6388 57d1 488B4598 		movq	-104(%rbp), %rax
 6389 57d5 4889C7   		movq	%rax, %rdi
 6390 57d8 E8000000 		call	strlen@PLT
 6390      00
 6391 57dd 488D50FB 		leaq	-5(%rax), %rdx
 6392 57e1 488B4598 		movq	-104(%rbp), %rax
 6393 57e5 4801D0   		addq	%rdx, %rax
 6394 57e8 488945C8 		movq	%rax, -56(%rbp)
 942:prog.c        **** 		if ( strcmp(".svf", ext+1) == 0 ) {
 6395              		.loc 2 942 0
 6396 57ec 488B45C8 		movq	-56(%rbp), %rax
 6397 57f0 4883C001 		addq	$1, %rax
 6398 57f4 4889C6   		movq	%rax, %rsi
 6399 57f7 488D3D00 		leaq	.LC54(%rip), %rdi
 6399      000000
 6400 57fe E8000000 		call	strcmp@PLT
 6400      00
 6401 5803 85C0     		testl	%eax, %eax
 6402 5805 7547     		jne	.L353
 943:prog.c        **** 			fStatus = flLoadSvfAndConvertToCsvf(progFile, &fileBuf, NULL, error);
 6403              		.loc 2 943 0
 6404 5807 488B5590 		movq	-112(%rbp), %rdx
 6405 580b 488D75D0 		leaq	-48(%rbp), %rsi
 6406 580f 488B4598 		movq	-104(%rbp), %rax
 6407 5813 4889D1   		movq	%rdx, %rcx
 6408 5816 BA000000 		movl	$0, %edx
 6408      00
 6409 581b 4889C7   		movq	%rax, %rdi
 6410 581e E8000000 		call	flLoadSvfAndConvertToCsvf@PLT
 6410      00
 6411 5823 8945C4   		movl	%eax, -60(%rbp)
 944:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "flProgram()");
 6412              		.loc 2 944 0
 6413 5826 837DC400 		cmpl	$0, -60(%rbp)
 6414 582a 0F842D01 		je	.L357
 6414      0000
 6415              		.loc 2 944 0 is_stmt 0 discriminator 1
 6416 5830 488B4590 		movq	-112(%rbp), %rax
 6417 5834 488D3500 		leaq	.LC55(%rip), %rsi
 6417      000000
 6418 583b 4889C7   		movq	%rax, %rdi
 6419 583e E8000000 		call	errPrefix@PLT
 6419      00
 6420 5843 8B45C4   		movl	-60(%rbp), %eax
 6421 5846 8945BC   		movl	%eax, -68(%rbp)
 6422 5849 E9580100 		jmp	.L342
 6422      00
 6423              	.L353:
 945:prog.c        **** 		} else if ( strcmp(".xsvf", ext) == 0 ) {
 6424              		.loc 2 945 0 is_stmt 1
 6425 584e 488B45C8 		movq	-56(%rbp), %rax
 6426 5852 4889C6   		movq	%rax, %rsi
 6427 5855 488D3D00 		leaq	.LC56(%rip), %rdi
 6427      000000
 6428 585c E8000000 		call	strcmp@PLT
 6428      00
 6429 5861 85C0     		testl	%eax, %eax
 6430 5863 7547     		jne	.L355
 946:prog.c        **** 			fStatus = flLoadXsvfAndConvertToCsvf(progFile, &fileBuf, NULL, error);
 6431              		.loc 2 946 0
 6432 5865 488B5590 		movq	-112(%rbp), %rdx
 6433 5869 488D75D0 		leaq	-48(%rbp), %rsi
 6434 586d 488B4598 		movq	-104(%rbp), %rax
 6435 5871 4889D1   		movq	%rdx, %rcx
 6436 5874 BA000000 		movl	$0, %edx
 6436      00
 6437 5879 4889C7   		movq	%rax, %rdi
 6438 587c E8000000 		call	flLoadXsvfAndConvertToCsvf@PLT
 6438      00
 6439 5881 8945C4   		movl	%eax, -60(%rbp)
 947:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "flProgram()");
 6440              		.loc 2 947 0
 6441 5884 837DC400 		cmpl	$0, -60(%rbp)
 6442 5888 0F84CF00 		je	.L357
 6442      0000
 6443              		.loc 2 947 0 is_stmt 0 discriminator 1
 6444 588e 488B4590 		movq	-112(%rbp), %rax
 6445 5892 488D3500 		leaq	.LC55(%rip), %rsi
 6445      000000
 6446 5899 4889C7   		movq	%rax, %rdi
 6447 589c E8000000 		call	errPrefix@PLT
 6447      00
 6448 58a1 8B45C4   		movl	-60(%rbp), %eax
 6449 58a4 8945BC   		movl	%eax, -68(%rbp)
 6450 58a7 E9FA0000 		jmp	.L342
 6450      00
 6451              	.L355:
 948:prog.c        **** 		} else if ( strcmp(".csvf", ext) == 0 ) {
 6452              		.loc 2 948 0 is_stmt 1
 6453 58ac 488B45C8 		movq	-56(%rbp), %rax
 6454 58b0 4889C6   		movq	%rax, %rsi
 6455 58b3 488D3D00 		leaq	.LC57(%rip), %rdi
 6455      000000
 6456 58ba E8000000 		call	strcmp@PLT
 6456      00
 6457 58bf 85C0     		testl	%eax, %eax
 6458 58c1 753F     		jne	.L356
 949:prog.c        **** 			bStatus = bufAppendFromBinaryFile(&fileBuf, progFile, error);
 6459              		.loc 2 949 0
 6460 58c3 488B5590 		movq	-112(%rbp), %rdx
 6461 58c7 488B4D98 		movq	-104(%rbp), %rcx
 6462 58cb 488D45D0 		leaq	-48(%rbp), %rax
 6463 58cf 4889CE   		movq	%rcx, %rsi
 6464 58d2 4889C7   		movq	%rax, %rdi
 6465 58d5 E8000000 		call	bufAppendFromBinaryFile@PLT
 6465      00
 6466 58da 8945C0   		movl	%eax, -64(%rbp)
 950:prog.c        **** 			CHECK_STATUS(bStatus, FL_FILE_ERR, cleanup, "flProgram()");
 6467              		.loc 2 950 0
 6468 58dd 837DC000 		cmpl	$0, -64(%rbp)
 6469 58e1 747A     		je	.L357
 6470              		.loc 2 950 0 is_stmt 0 discriminator 1
 6471 58e3 488B4590 		movq	-112(%rbp), %rax
 6472 58e7 488D3500 		leaq	.LC55(%rip), %rsi
 6472      000000
 6473 58ee 4889C7   		movq	%rax, %rdi
 6474 58f1 E8000000 		call	errPrefix@PLT
 6474      00
 6475 58f6 C745BC06 		movl	$6, -68(%rbp)
 6475      000000
 6476 58fd E9A40000 		jmp	.L342
 6476      00
 6477              	.L356:
 951:prog.c        **** 		} else {
 952:prog.c        **** 			CHECK_STATUS(
 6478              		.loc 2 952 0 is_stmt 1 discriminator 1
 6479 5902 488B4590 		movq	-112(%rbp), %rax
 6480 5906 488D3500 		leaq	.LC58(%rip), %rsi
 6480      000000
 6481 590d 4889C7   		movq	%rax, %rdi
 6482 5910 E8000000 		call	errPrefix@PLT
 6482      00
 6483 5915 C745BC06 		movl	$6, -68(%rbp)
 6483      000000
 6484 591c E9850000 		jmp	.L342
 6484      00
 6485              	.L352:
 6486              	.LBE6:
 953:prog.c        **** 				true, FL_FILE_ERR, cleanup,
 954:prog.c        **** 				"flProgram(): JTAG files should have .svf, .xsvf or .csvf extension");
 955:prog.c        **** 		}
 956:prog.c        **** 	} else {
 957:prog.c        **** 		// Just load it
 958:prog.c        **** 		bStatus = bufAppendFromBinaryFile(&fileBuf, progFile, error);
 6487              		.loc 2 958 0
 6488 5921 488B5590 		movq	-112(%rbp), %rdx
 6489 5925 488B4D98 		movq	-104(%rbp), %rcx
 6490 5929 488D45D0 		leaq	-48(%rbp), %rax
 6491 592d 4889CE   		movq	%rcx, %rsi
 6492 5930 4889C7   		movq	%rax, %rdi
 6493 5933 E8000000 		call	bufAppendFromBinaryFile@PLT
 6493      00
 6494 5938 8945C0   		movl	%eax, -64(%rbp)
 959:prog.c        **** 		CHECK_STATUS(bStatus, FL_FILE_ERR, cleanup, "flProgram()");
 6495              		.loc 2 959 0
 6496 593b 837DC000 		cmpl	$0, -64(%rbp)
 6497 593f 741C     		je	.L357
 6498              		.loc 2 959 0 is_stmt 0 discriminator 1
 6499 5941 488B4590 		movq	-112(%rbp), %rax
 6500 5945 488D3500 		leaq	.LC55(%rip), %rsi
 6500      000000
 6501 594c 4889C7   		movq	%rax, %rdi
 6502 594f E8000000 		call	errPrefix@PLT
 6502      00
 6503 5954 C745BC06 		movl	$6, -68(%rbp)
 6503      000000
 6504 595b EB49     		jmp	.L342
 6505              	.L357:
 960:prog.c        **** 	}
 961:prog.c        **** 	fStatus = flProgramBlob(handle, portConfig, (uint32)fileBuf.length, fileBuf.data, error);
 6506              		.loc 2 961 0 is_stmt 1
 6507 595d 488B55D0 		movq	-48(%rbp), %rdx
 6508 5961 488B45D8 		movq	-40(%rbp), %rax
 6509 5965 89C7     		movl	%eax, %edi
 6510 5967 488B4D90 		movq	-112(%rbp), %rcx
 6511 596b 488B75A0 		movq	-96(%rbp), %rsi
 6512 596f 488B45A8 		movq	-88(%rbp), %rax
 6513 5973 4989C8   		movq	%rcx, %r8
 6514 5976 4889D1   		movq	%rdx, %rcx
 6515 5979 89FA     		movl	%edi, %edx
 6516 597b 4889C7   		movq	%rax, %rdi
 6517 597e E8000000 		call	flProgramBlob@PLT
 6517      00
 6518 5983 8945C4   		movl	%eax, -60(%rbp)
 962:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "flProgram()");
 6519              		.loc 2 962 0
 6520 5986 837DC400 		cmpl	$0, -60(%rbp)
 6521 598a 741A     		je	.L342
 6522              		.loc 2 962 0 is_stmt 0 discriminator 1
 6523 598c 488B4590 		movq	-112(%rbp), %rax
 6524 5990 488D3500 		leaq	.LC55(%rip), %rsi
 6524      000000
 6525 5997 4889C7   		movq	%rax, %rdi
 6526 599a E8000000 		call	errPrefix@PLT
 6526      00
 6527 599f 8B45C4   		movl	-60(%rbp), %eax
 6528 59a2 8945BC   		movl	%eax, -68(%rbp)
 6529 59a5 90       		nop
 6530              	.L342:
 963:prog.c        **** cleanup:
 964:prog.c        **** 	bufDestroy(&fileBuf);
 6531              		.loc 2 964 0 is_stmt 1
 6532 59a6 488D45D0 		leaq	-48(%rbp), %rax
 6533 59aa 4889C7   		movq	%rax, %rdi
 6534 59ad E8000000 		call	bufDestroy@PLT
 6534      00
 965:prog.c        **** 	return retVal;
 6535              		.loc 2 965 0
 6536 59b2 8B45BC   		movl	-68(%rbp), %eax
 966:prog.c        **** }
 6537              		.loc 2 966 0
 6538 59b5 488B4DF8 		movq	-8(%rbp), %rcx
 6539 59b9 6448330C 		xorq	%fs:40, %rcx
 6539      25280000 
 6539      00
 6540 59c2 7405     		je	.L359
 6541 59c4 E8000000 		call	__stack_chk_fail@PLT
 6541      00
 6542              	.L359:
 6543 59c9 C9       		leave
 6544              		.cfi_def_cfa 7, 8
 6545 59ca C3       		ret
 6546              		.cfi_endproc
 6547              	.LFE25:
 6549              		.section	.rodata
 6550 0a2b 00000000 		.align 8
 6550      00
 6553              	indexValues:
 6558              	.LC59:
 6559 0a38 666C5369 		.string	"flSingleBitPortAccess()"
 6559      6E676C65 
 6559      42697450 
 6559      6F727441 
 6559      63636573 
 6560              		.text
 6561              		.globl	flSingleBitPortAccess
 6563              	flSingleBitPortAccess:
 6564              	.LFB26:
 967:prog.c        **** 
 968:prog.c        **** // Actual values to send to microcontroller for PIN_UNUSED, PIN_HIGH, PIN_LOW and PIN_INPUT:
 969:prog.c        **** static const uint16 indexValues[] = {0xFFFF, 0x0101, 0x0001, 0x0000};
 970:prog.c        **** 
 971:prog.c        **** DLLEXPORT(FLStatus) flSingleBitPortAccess(
 972:prog.c        **** 	struct FLContext *handle, uint8 portNumber, uint8 bitNumber,
 973:prog.c        ****    uint8 pinConfig, uint8 *pinRead, const char **error)
 974:prog.c        **** {
 6565              		.loc 2 974 0
 6566              		.cfi_startproc
 6567 59cb 55       		pushq	%rbp
 6568              		.cfi_def_cfa_offset 16
 6569              		.cfi_offset 6, -16
 6570 59cc 4889E5   		movq	%rsp, %rbp
 6571              		.cfi_def_cfa_register 6
 6572 59cf 4883EC50 		subq	$80, %rsp
 6573 59d3 48897DD8 		movq	%rdi, -40(%rbp)
 6574 59d7 89C8     		movl	%ecx, %eax
 6575 59d9 4C8945C0 		movq	%r8, -64(%rbp)
 6576 59dd 4C894DB8 		movq	%r9, -72(%rbp)
 6577 59e1 408875D4 		movb	%sil, -44(%rbp)
 6578 59e5 8855D0   		movb	%dl, -48(%rbp)
 6579 59e8 8845CC   		movb	%al, -52(%rbp)
 6580              		.loc 2 974 0
 6581 59eb 64488B04 		movq	%fs:40, %rax
 6581      25280000 
 6581      00
 6582 59f4 488945F8 		movq	%rax, -8(%rbp)
 6583 59f8 31C0     		xorl	%eax, %eax
 975:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 6584              		.loc 2 975 0
 6585 59fa C745F000 		movl	$0, -16(%rbp)
 6585      000000
 976:prog.c        **** 	USBStatus uStatus;
 977:prog.c        **** 	uint8 byte;
 978:prog.c        **** 	const uint16 value = (uint16)((bitNumber << 8) | portNumber);
 6586              		.loc 2 978 0
 6587 5a01 0FB645D0 		movzbl	-48(%rbp), %eax
 6588 5a05 C1E008   		sall	$8, %eax
 6589 5a08 89C2     		movl	%eax, %edx
 6590 5a0a 0FB645D4 		movzbl	-44(%rbp), %eax
 6591 5a0e 09D0     		orl	%edx, %eax
 6592 5a10 668945EC 		movw	%ax, -20(%rbp)
 979:prog.c        **** 	const uint16 index = indexValues[pinConfig];
 6593              		.loc 2 979 0
 6594 5a14 0FB645CC 		movzbl	-52(%rbp), %eax
 6595 5a18 4898     		cltq
 6596 5a1a 488D1400 		leaq	(%rax,%rax), %rdx
 6597 5a1e 488D0500 		leaq	indexValues(%rip), %rax
 6597      000000
 6598 5a25 0FB70402 		movzwl	(%rdx,%rax), %eax
 6599 5a29 668945EE 		movw	%ax, -18(%rbp)
 980:prog.c        **** 	uStatus = usbControlRead(
 6600              		.loc 2 980 0
 6601 5a2d 0FB74DEE 		movzwl	-18(%rbp), %ecx
 6602 5a31 0FB755EC 		movzwl	-20(%rbp), %edx
 6603 5a35 488B45D8 		movq	-40(%rbp), %rax
 6604 5a39 488B00   		movq	(%rax), %rax
 6605 5a3c 488D75EB 		leaq	-21(%rbp), %rsi
 6606 5a40 FF75B8   		pushq	-72(%rbp)
 6607 5a43 68E80300 		pushq	$1000
 6607      00
 6608 5a48 41B90100 		movl	$1, %r9d
 6608      0000
 6609 5a4e 4989F0   		movq	%rsi, %r8
 6610 5a51 BE850000 		movl	$133, %esi
 6610      00
 6611 5a56 4889C7   		movq	%rax, %rdi
 6612 5a59 E8000000 		call	usbControlRead@PLT
 6612      00
 6613 5a5e 4883C410 		addq	$16, %rsp
 6614 5a62 8945F4   		movl	%eax, -12(%rbp)
 981:prog.c        **** 		handle->device,
 982:prog.c        **** 		CMD_PORT_BIT_IO, // bRequest
 983:prog.c        **** 		value,           // wValue
 984:prog.c        **** 		index,           // wIndex
 985:prog.c        **** 		&byte,           // buffer to receive current state of ports
 986:prog.c        **** 		1,               // wLength
 987:prog.c        **** 		1000,            // timeout (ms)
 988:prog.c        **** 		error
 989:prog.c        **** 	);
 990:prog.c        **** 	CHECK_STATUS(uStatus, FL_PORT_IO, cleanup, "flSingleBitPortAccess()");
 6615              		.loc 2 990 0
 6616 5a65 837DF400 		cmpl	$0, -12(%rbp)
 6617 5a69 741C     		je	.L361
 6618              		.loc 2 990 0 is_stmt 0 discriminator 1
 6619 5a6b 488B45B8 		movq	-72(%rbp), %rax
 6620 5a6f 488D3500 		leaq	.LC59(%rip), %rsi
 6620      000000
 6621 5a76 4889C7   		movq	%rax, %rdi
 6622 5a79 E8000000 		call	errPrefix@PLT
 6622      00
 6623 5a7e C745F015 		movl	$21, -16(%rbp)
 6623      000000
 6624 5a85 EB11     		jmp	.L362
 6625              	.L361:
 991:prog.c        **** 	if ( pinRead ) {
 6626              		.loc 2 991 0 is_stmt 1
 6627 5a87 48837DC0 		cmpq	$0, -64(%rbp)
 6627      00
 6628 5a8c 740A     		je	.L362
 992:prog.c        **** 		*pinRead = byte;
 6629              		.loc 2 992 0
 6630 5a8e 0FB655EB 		movzbl	-21(%rbp), %edx
 6631 5a92 488B45C0 		movq	-64(%rbp), %rax
 6632 5a96 8810     		movb	%dl, (%rax)
 6633              	.L362:
 993:prog.c        **** 	}
 994:prog.c        **** cleanup:
 995:prog.c        **** 	return retVal;
 6634              		.loc 2 995 0
 6635 5a98 8B45F0   		movl	-16(%rbp), %eax
 996:prog.c        **** }
 6636              		.loc 2 996 0
 6637 5a9b 488B7DF8 		movq	-8(%rbp), %rdi
 6638 5a9f 6448333C 		xorq	%fs:40, %rdi
 6638      25280000 
 6638      00
 6639 5aa8 7405     		je	.L364
 6640 5aaa E8000000 		call	__stack_chk_fail@PLT
 6640      00
 6641              	.L364:
 6642 5aaf C9       		leave
 6643              		.cfi_def_cfa 7, 8
 6644 5ab0 C3       		ret
 6645              		.cfi_endproc
 6646              	.LFE26:
 6648              		.section	.rodata
 6649              		.align 8
 6650              	.LC60:
 6651 0a50 666C4D75 		.string	"flMultiBitPortAccess(): Unexpected end of config string:\n  %s\n  %s^"
 6651      6C746942 
 6651      6974506F 
 6651      72744163 
 6651      63657373 
 6652 0a94 00000000 		.align 8
 6653              	.LC61:
 6654 0a98 666C4D75 		.string	"flMultiBitPortAccess(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 6654      6C746942 
 6654      6974506F 
 6654      72744163 
 6654      63657373 
 6655 0ae7 00       		.align 8
 6656              	.LC62:
 6657 0ae8 666C4D75 		.string	"flMultiBitPortAccess(): Bit number is not valid:\n  %s\n  %s^"
 6657      6C746942 
 6657      6974506F 
 6657      72744163 
 6657      63657373 
 6658 0b24 00000000 		.align 8
 6659              	.LC63:
 6660 0b28 666C4D75 		.string	"flMultiBitPortAccess(): Expecting '+', '-' or '?':\n  %s\n  %s^"
 6660      6C746942 
 6660      6974506F 
 6660      72744163 
 6660      63657373 
 6661 0b66 0000     		.align 8
 6662              	.LC64:
 6663 0b68 666C4D75 		.string	"flMultiBitPortAccess(): Expecting ',' or '\\0' here:\n  %s\n  %s^"
 6663      6C746942 
 6663      6974506F 
 6663      72744163 
 6663      63657373 
 6664              		.text
 6665              		.globl	flMultiBitPortAccess
 6667              	flMultiBitPortAccess:
 6668              	.LFB27:
 997:prog.c        **** 
 998:prog.c        **** DLLEXPORT(FLStatus) flMultiBitPortAccess(
 999:prog.c        **** 	struct FLContext *handle, const char *portConfig, uint32 *readState, const char **error)
1000:prog.c        **** {
 6669              		.loc 2 1000 0
 6670              		.cfi_startproc
 6671 5ab1 55       		pushq	%rbp
 6672              		.cfi_def_cfa_offset 16
 6673              		.cfi_offset 6, -16
 6674 5ab2 4889E5   		movq	%rsp, %rbp
 6675              		.cfi_def_cfa_register 6
 6676 5ab5 4883EC50 		subq	$80, %rsp
 6677 5ab9 48897DC8 		movq	%rdi, -56(%rbp)
 6678 5abd 488975C0 		movq	%rsi, -64(%rbp)
 6679 5ac1 488955B8 		movq	%rdx, -72(%rbp)
 6680 5ac5 48894DB0 		movq	%rcx, -80(%rbp)
 6681              		.loc 2 1000 0
 6682 5ac9 64488B04 		movq	%fs:40, %rax
 6682      25280000 
 6682      00
 6683 5ad2 488945F8 		movq	%rax, -8(%rbp)
 6684 5ad6 31C0     		xorl	%eax, %eax
1001:prog.c        **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 6685              		.loc 2 1001 0
 6686 5ad8 C745E000 		movl	$0, -32(%rbp)
 6686      000000
1002:prog.c        **** 	const char *ptr = portConfig;
 6687              		.loc 2 1002 0
 6688 5adf 488B45C0 		movq	-64(%rbp), %rax
 6689 5ae3 488945F0 		movq	%rax, -16(%rbp)
1003:prog.c        **** 	uint32 result = 0;
 6690              		.loc 2 1003 0
 6691 5ae7 C745E400 		movl	$0, -28(%rbp)
 6691      000000
 6692              	.L380:
1004:prog.c        **** 	uint8 thisPort, thisBit;
1005:prog.c        **** 	char ch;
1006:prog.c        **** 	PinConfig pinConfig;
1007:prog.c        **** 	uint8 bitState;
1008:prog.c        **** 	do {
1009:prog.c        **** 		GET_PAIR(thisPort, thisBit, "flMultiBitPortAccess");
 6693              		.loc 2 1009 0
 6694 5aee 488B45F0 		movq	-16(%rbp), %rax
 6695 5af2 0FB600   		movzbl	(%rax), %eax
 6696 5af5 8845DD   		movb	%al, -35(%rbp)
 6697 5af8 807DDD00 		cmpb	$0, -35(%rbp)
 6698 5afc 7544     		jne	.L366
 6699              		.loc 2 1009 0 is_stmt 0 discriminator 1
 6700 5afe 488B45F0 		movq	-16(%rbp), %rax
 6701 5b02 4889C2   		movq	%rax, %rdx
 6702 5b05 488B45C0 		movq	-64(%rbp), %rax
 6703 5b09 4829C2   		subq	%rax, %rdx
 6704 5b0c 4889D0   		movq	%rdx, %rax
 6705 5b0f 4889C7   		movq	%rax, %rdi
 6706 5b12 E899A6FF 		call	spaces
 6706      FF
 6707 5b17 4889C1   		movq	%rax, %rcx
 6708 5b1a 488B55C0 		movq	-64(%rbp), %rdx
 6709 5b1e 488B45B0 		movq	-80(%rbp), %rax
 6710 5b22 488D3500 		leaq	.LC60(%rip), %rsi
 6710      000000
 6711 5b29 4889C7   		movq	%rax, %rdi
 6712 5b2c B8000000 		movl	$0, %eax
 6712      00
 6713 5b31 E8000000 		call	errRender@PLT
 6713      00
 6714 5b36 C745E00B 		movl	$11, -32(%rbp)
 6714      000000
 6715 5b3d E9B80200 		jmp	.L367
 6715      00
 6716              	.L366:
 6717              		.loc 2 1009 0 discriminator 2
 6718 5b42 807DDD40 		cmpb	$64, -35(%rbp)
 6719 5b46 7E06     		jle	.L368
 6720              		.loc 2 1009 0 discriminator 4
 6721 5b48 807DDD5A 		cmpb	$90, -35(%rbp)
 6722 5b4c 7E44     		jle	.L369
 6723              	.L368:
 6724              		.loc 2 1009 0 discriminator 5
 6725 5b4e 488B45F0 		movq	-16(%rbp), %rax
 6726 5b52 4889C2   		movq	%rax, %rdx
 6727 5b55 488B45C0 		movq	-64(%rbp), %rax
 6728 5b59 4829C2   		subq	%rax, %rdx
 6729 5b5c 4889D0   		movq	%rdx, %rax
 6730 5b5f 4889C7   		movq	%rax, %rdi
 6731 5b62 E849A6FF 		call	spaces
 6731      FF
 6732 5b67 4889C1   		movq	%rax, %rcx
 6733 5b6a 488B55C0 		movq	-64(%rbp), %rdx
 6734 5b6e 488B45B0 		movq	-80(%rbp), %rax
 6735 5b72 488D3500 		leaq	.LC61(%rip), %rsi
 6735      000000
 6736 5b79 4889C7   		movq	%rax, %rdi
 6737 5b7c B8000000 		movl	$0, %eax
 6737      00
 6738 5b81 E8000000 		call	errRender@PLT
 6738      00
 6739 5b86 C745E00B 		movl	$11, -32(%rbp)
 6739      000000
 6740 5b8d E9680200 		jmp	.L367
 6740      00
 6741              	.L369:
 6742              		.loc 2 1009 0 discriminator 6
 6743 5b92 0FB645DD 		movzbl	-35(%rbp), %eax
 6744 5b96 83E841   		subl	$65, %eax
 6745 5b99 8845DE   		movb	%al, -34(%rbp)
 6746 5b9c 488B45F0 		movq	-16(%rbp), %rax
 6747 5ba0 4883C001 		addq	$1, %rax
 6748 5ba4 488945F0 		movq	%rax, -16(%rbp)
 6749 5ba8 488B45F0 		movq	-16(%rbp), %rax
 6750 5bac 0FB600   		movzbl	(%rax), %eax
 6751 5baf 8845DD   		movb	%al, -35(%rbp)
 6752 5bb2 807DDD00 		cmpb	$0, -35(%rbp)
 6753 5bb6 7544     		jne	.L370
 6754              		.loc 2 1009 0 discriminator 7
 6755 5bb8 488B45F0 		movq	-16(%rbp), %rax
 6756 5bbc 4889C2   		movq	%rax, %rdx
 6757 5bbf 488B45C0 		movq	-64(%rbp), %rax
 6758 5bc3 4829C2   		subq	%rax, %rdx
 6759 5bc6 4889D0   		movq	%rdx, %rax
 6760 5bc9 4889C7   		movq	%rax, %rdi
 6761 5bcc E8DFA5FF 		call	spaces
 6761      FF
 6762 5bd1 4889C1   		movq	%rax, %rcx
 6763 5bd4 488B55C0 		movq	-64(%rbp), %rdx
 6764 5bd8 488B45B0 		movq	-80(%rbp), %rax
 6765 5bdc 488D3500 		leaq	.LC60(%rip), %rsi
 6765      000000
 6766 5be3 4889C7   		movq	%rax, %rdi
 6767 5be6 B8000000 		movl	$0, %eax
 6767      00
 6768 5beb E8000000 		call	errRender@PLT
 6768      00
 6769 5bf0 C745E00B 		movl	$11, -32(%rbp)
 6769      000000
 6770 5bf7 E9FE0100 		jmp	.L367
 6770      00
 6771              	.L370:
 6772              		.loc 2 1009 0 discriminator 8
 6773 5bfc 807DDD2F 		cmpb	$47, -35(%rbp)
 6774 5c00 7E06     		jle	.L371
 6775              		.loc 2 1009 0 discriminator 10
 6776 5c02 807DDD39 		cmpb	$57, -35(%rbp)
 6777 5c06 7E44     		jle	.L372
 6778              	.L371:
 6779              		.loc 2 1009 0 discriminator 11
 6780 5c08 488B45F0 		movq	-16(%rbp), %rax
 6781 5c0c 4889C2   		movq	%rax, %rdx
 6782 5c0f 488B45C0 		movq	-64(%rbp), %rax
 6783 5c13 4829C2   		subq	%rax, %rdx
 6784 5c16 4889D0   		movq	%rdx, %rax
 6785 5c19 4889C7   		movq	%rax, %rdi
 6786 5c1c E88FA5FF 		call	spaces
 6786      FF
 6787 5c21 4889C1   		movq	%rax, %rcx
 6788 5c24 488B55C0 		movq	-64(%rbp), %rdx
 6789 5c28 488B45B0 		movq	-80(%rbp), %rax
 6790 5c2c 488D3500 		leaq	.LC62(%rip), %rsi
 6790      000000
 6791 5c33 4889C7   		movq	%rax, %rdi
 6792 5c36 B8000000 		movl	$0, %eax
 6792      00
 6793 5c3b E8000000 		call	errRender@PLT
 6793      00
 6794 5c40 C745E00B 		movl	$11, -32(%rbp)
 6794      000000
 6795 5c47 E9AE0100 		jmp	.L367
 6795      00
 6796              	.L372:
 6797              		.loc 2 1009 0 discriminator 12
 6798 5c4c 488B45F0 		movq	-16(%rbp), %rax
 6799 5c50 488D4DF0 		leaq	-16(%rbp), %rcx
 6800 5c54 BA0A0000 		movl	$10, %edx
 6800      00
 6801 5c59 4889CE   		movq	%rcx, %rsi
 6802 5c5c 4889C7   		movq	%rax, %rdi
 6803 5c5f E8000000 		call	strtoul@PLT
 6803      00
 6804 5c64 8845DF   		movb	%al, -33(%rbp)
1010:prog.c        **** 		GET_CHAR("flMultiBitPortAccess");
 6805              		.loc 2 1010 0 is_stmt 1 discriminator 12
 6806 5c67 488B45F0 		movq	-16(%rbp), %rax
 6807 5c6b 0FB600   		movzbl	(%rax), %eax
 6808 5c6e 8845DD   		movb	%al, -35(%rbp)
 6809 5c71 807DDD00 		cmpb	$0, -35(%rbp)
 6810 5c75 7544     		jne	.L373
 6811              		.loc 2 1010 0 is_stmt 0 discriminator 1
 6812 5c77 488B45F0 		movq	-16(%rbp), %rax
 6813 5c7b 4889C2   		movq	%rax, %rdx
 6814 5c7e 488B45C0 		movq	-64(%rbp), %rax
 6815 5c82 4829C2   		subq	%rax, %rdx
 6816 5c85 4889D0   		movq	%rdx, %rax
 6817 5c88 4889C7   		movq	%rax, %rdi
 6818 5c8b E820A5FF 		call	spaces
 6818      FF
 6819 5c90 4889C1   		movq	%rax, %rcx
 6820 5c93 488B55C0 		movq	-64(%rbp), %rdx
 6821 5c97 488B45B0 		movq	-80(%rbp), %rax
 6822 5c9b 488D3500 		leaq	.LC60(%rip), %rsi
 6822      000000
 6823 5ca2 4889C7   		movq	%rax, %rdi
 6824 5ca5 B8000000 		movl	$0, %eax
 6824      00
 6825 5caa E8000000 		call	errRender@PLT
 6825      00
 6826 5caf C745E00B 		movl	$11, -32(%rbp)
 6826      000000
 6827 5cb6 E93F0100 		jmp	.L367
 6827      00
 6828              	.L373:
1011:prog.c        **** 		if ( ch == '+' ) {
 6829              		.loc 2 1011 0 is_stmt 1
 6830 5cbb 807DDD2B 		cmpb	$43, -35(%rbp)
 6831 5cbf 7509     		jne	.L374
1012:prog.c        **** 			pinConfig = PIN_HIGH;
 6832              		.loc 2 1012 0
 6833 5cc1 C745E801 		movl	$1, -24(%rbp)
 6833      000000
 6834 5cc8 EB62     		jmp	.L375
 6835              	.L374:
1013:prog.c        **** 		} else if ( ch == '-' ) {
 6836              		.loc 2 1013 0
 6837 5cca 807DDD2D 		cmpb	$45, -35(%rbp)
 6838 5cce 7509     		jne	.L376
1014:prog.c        **** 			pinConfig = PIN_LOW;
 6839              		.loc 2 1014 0
 6840 5cd0 C745E802 		movl	$2, -24(%rbp)
 6840      000000
 6841 5cd7 EB53     		jmp	.L375
 6842              	.L376:
1015:prog.c        **** 		} else if ( ch == '?' ) {
 6843              		.loc 2 1015 0
 6844 5cd9 807DDD3F 		cmpb	$63, -35(%rbp)
 6845 5cdd 7509     		jne	.L377
1016:prog.c        **** 			pinConfig = PIN_INPUT;
 6846              		.loc 2 1016 0
 6847 5cdf C745E803 		movl	$3, -24(%rbp)
 6847      000000
 6848 5ce6 EB44     		jmp	.L375
 6849              	.L377:
1017:prog.c        **** 		} else {
1018:prog.c        **** 			CHECK_STATUS(
 6850              		.loc 2 1018 0 discriminator 1
 6851 5ce8 488B45F0 		movq	-16(%rbp), %rax
 6852 5cec 4889C2   		movq	%rax, %rdx
 6853 5cef 488B45C0 		movq	-64(%rbp), %rax
 6854 5cf3 4829C2   		subq	%rax, %rdx
 6855 5cf6 4889D0   		movq	%rdx, %rax
 6856 5cf9 4889C7   		movq	%rax, %rdi
 6857 5cfc E8AFA4FF 		call	spaces
 6857      FF
 6858 5d01 4889C1   		movq	%rax, %rcx
 6859 5d04 488B55C0 		movq	-64(%rbp), %rdx
 6860 5d08 488B45B0 		movq	-80(%rbp), %rax
 6861 5d0c 488D3500 		leaq	.LC63(%rip), %rsi
 6861      000000
 6862 5d13 4889C7   		movq	%rax, %rdi
 6863 5d16 B8000000 		movl	$0, %eax
 6863      00
 6864 5d1b E8000000 		call	errRender@PLT
 6864      00
 6865 5d20 C745E00B 		movl	$11, -32(%rbp)
 6865      000000
 6866 5d27 E9CE0000 		jmp	.L367
 6866      00
 6867              	.L375:
1019:prog.c        **** 				true, FL_CONF_FORMAT, cleanup,
1020:prog.c        **** 				"flMultiBitPortAccess(): Expecting '+', '-' or '?':\n  %s\n  %s^", portConfig, spaces(ptr-portC
1021:prog.c        **** 		}
1022:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, thisPort, thisBit, pinConfig, &bitState, error);
 6868              		.loc 2 1022 0
 6869 5d2c 8B45E8   		movl	-24(%rbp), %eax
 6870 5d2f 0FB6C8   		movzbl	%al, %ecx
 6871 5d32 0FB655DF 		movzbl	-33(%rbp), %edx
 6872 5d36 0FB675DE 		movzbl	-34(%rbp), %esi
 6873 5d3a 4C8B45B0 		movq	-80(%rbp), %r8
 6874 5d3e 488D7DDC 		leaq	-36(%rbp), %rdi
 6875 5d42 488B45C8 		movq	-56(%rbp), %rax
 6876 5d46 4D89C1   		movq	%r8, %r9
 6877 5d49 4989F8   		movq	%rdi, %r8
 6878 5d4c 4889C7   		movq	%rax, %rdi
 6879 5d4f E8000000 		call	flSingleBitPortAccess@PLT
 6879      00
 6880 5d54 8945EC   		movl	%eax, -20(%rbp)
1023:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup);
 6881              		.loc 2 1023 0
 6882 5d57 837DEC00 		cmpl	$0, -20(%rbp)
 6883 5d5b 740B     		je	.L378
 6884              		.loc 2 1023 0 is_stmt 0 discriminator 1
 6885 5d5d 8B45EC   		movl	-20(%rbp), %eax
 6886 5d60 8945E0   		movl	%eax, -32(%rbp)
 6887 5d63 E9920000 		jmp	.L367
 6887      00
 6888              	.L378:
1024:prog.c        **** 		result <<= 1;
 6889              		.loc 2 1024 0 is_stmt 1
 6890 5d68 D165E4   		sall	-28(%rbp)
1025:prog.c        **** 		if ( bitState ) {
 6891              		.loc 2 1025 0
 6892 5d6b 0FB645DC 		movzbl	-36(%rbp), %eax
 6893 5d6f 84C0     		testb	%al, %al
 6894 5d71 7404     		je	.L379
1026:prog.c        **** 			result |= 1;
 6895              		.loc 2 1026 0
 6896 5d73 834DE401 		orl	$1, -28(%rbp)
 6897              	.L379:
1027:prog.c        **** 		}
1028:prog.c        **** 		ptr++;
 6898              		.loc 2 1028 0
 6899 5d77 488B45F0 		movq	-16(%rbp), %rax
 6900 5d7b 4883C001 		addq	$1, %rax
 6901 5d7f 488945F0 		movq	%rax, -16(%rbp)
1029:prog.c        **** 		ch = *ptr++;
 6902              		.loc 2 1029 0
 6903 5d83 488B45F0 		movq	-16(%rbp), %rax
 6904 5d87 488D5001 		leaq	1(%rax), %rdx
 6905 5d8b 488955F0 		movq	%rdx, -16(%rbp)
 6906 5d8f 0FB600   		movzbl	(%rax), %eax
 6907 5d92 8845DD   		movb	%al, -35(%rbp)
1030:prog.c        **** 	} while ( ch == ',' );
 6908              		.loc 2 1030 0
 6909 5d95 807DDD2C 		cmpb	$44, -35(%rbp)
 6910 5d99 0F844FFD 		je	.L380
 6910      FFFF
1031:prog.c        **** 	CHECK_STATUS(
 6911              		.loc 2 1031 0
 6912 5d9f 807DDD00 		cmpb	$0, -35(%rbp)
 6913 5da3 7445     		je	.L381
 6914              		.loc 2 1031 0 is_stmt 0 discriminator 1
 6915 5da5 488B45F0 		movq	-16(%rbp), %rax
 6916 5da9 4889C2   		movq	%rax, %rdx
 6917 5dac 488B45C0 		movq	-64(%rbp), %rax
 6918 5db0 4829C2   		subq	%rax, %rdx
 6919 5db3 4889D0   		movq	%rdx, %rax
 6920 5db6 4883E801 		subq	$1, %rax
 6921 5dba 4889C7   		movq	%rax, %rdi
 6922 5dbd E8EEA3FF 		call	spaces
 6922      FF
 6923 5dc2 4889C1   		movq	%rax, %rcx
 6924 5dc5 488B55C0 		movq	-64(%rbp), %rdx
 6925 5dc9 488B45B0 		movq	-80(%rbp), %rax
 6926 5dcd 488D3500 		leaq	.LC64(%rip), %rsi
 6926      000000
 6927 5dd4 4889C7   		movq	%rax, %rdi
 6928 5dd7 B8000000 		movl	$0, %eax
 6928      00
 6929 5ddc E8000000 		call	errRender@PLT
 6929      00
 6930 5de1 C745E00B 		movl	$11, -32(%rbp)
 6930      000000
 6931 5de8 EB10     		jmp	.L367
 6932              	.L381:
1032:prog.c        **** 		ch != '\0', FL_CONF_FORMAT, cleanup,
1033:prog.c        **** 		"flMultiBitPortAccess(): Expecting ',' or '\\0' here:\n  %s\n  %s^", portConfig, spaces(ptr-portC
1034:prog.c        **** 	if ( readState ) {
 6933              		.loc 2 1034 0 is_stmt 1
 6934 5dea 48837DB8 		cmpq	$0, -72(%rbp)
 6934      00
 6935 5def 7409     		je	.L367
1035:prog.c        **** 		*readState = result;
 6936              		.loc 2 1035 0
 6937 5df1 488B45B8 		movq	-72(%rbp), %rax
 6938 5df5 8B55E4   		movl	-28(%rbp), %edx
 6939 5df8 8910     		movl	%edx, (%rax)
 6940              	.L367:
1036:prog.c        **** 	}
1037:prog.c        **** cleanup:
1038:prog.c        **** 	return retVal;
 6941              		.loc 2 1038 0
 6942 5dfa 8B45E0   		movl	-32(%rbp), %eax
1039:prog.c        **** }
 6943              		.loc 2 1039 0
 6944 5dfd 488B75F8 		movq	-8(%rbp), %rsi
 6945 5e01 64483334 		xorq	%fs:40, %rsi
 6945      25280000 
 6945      00
 6946 5e0a 7405     		je	.L383
 6947 5e0c E8000000 		call	__stack_chk_fail@PLT
 6947      00
 6948              	.L383:
 6949 5e11 C9       		leave
 6950              		.cfi_def_cfa 7, 8
 6951 5e12 C3       		ret
 6952              		.cfi_endproc
 6953              	.LFE27:
 6955              	.Letext0:
 6956              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 6957              		.file 4 "/home/shubham/20140524/makestuff/libs/libusbwrap/libusbwrap.h"
 6958              		.file 5 "libfpgalink.h"
 6959              		.file 6 "/home/shubham/20140524/makestuff/libs/libbuffer/libbuffer.h"
 6960              		.file 7 "private.h"
 6961              		.file 8 "vendorCommands.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 prog.c
     /tmp/cc9agNo8.s:5      .text:0000000000000000 littleEndian32
     /tmp/cc9agNo8.s:30     .text:000000000000000c beginShift
     /tmp/cc9agNo8.s:104    .text:00000000000000be doSend
     /tmp/cc9agNo8.s:162    .text:0000000000000137 doReceive
     /tmp/cc9agNo8.s:221    .text:00000000000001b0 spaces
     /tmp/cc9agNo8.s:265    .text:00000000000001d8 populateMap
     /tmp/cc9agNo8.s:621    .text:0000000000000635 portMap
     /tmp/cc9agNo8.s:684    .text:00000000000006ce makeLookup
     /tmp/cc9agNo8.s:879    .text:000000000000088a dataWrite
     /tmp/cc9agNo8.s:1095   .text:0000000000000a59 xProgram
     /tmp/cc9agNo8.s:6563   .text:00000000000059cb flSingleBitPortAccess
     /tmp/cc9agNo8.s:2868   .text:000000000000277f aProgram
     /tmp/cc9agNo8.s:4068   .text:0000000000003b47 progOpenInternal
     /tmp/cc9agNo8.s:4978   .text:0000000000004a58 jProgram
     /tmp/cc9agNo8.s:5201   .text:0000000000004c66 progClose
     /tmp/cc9agNo8.s:5112   .text:0000000000004bd2 swap
     /tmp/cc9agNo8.s:5168   .text:0000000000004c38 progOpen
     /tmp/cc9agNo8.s:5338   .text:0000000000004de7 jtagShiftInOut
     /tmp/cc9agNo8.s:5568   .text:0000000000005019 jtagShiftInOnly
     /tmp/cc9agNo8.s:5735   .text:000000000000518b jtagClockFSM
     /tmp/cc9agNo8.s:5807   .text:0000000000005239 jtagClocks
     /tmp/cc9agNo8.s:5866   .text:00000000000052b6 jtagScanChain
     /tmp/cc9agNo8.s:6070   .text:00000000000054a0 flProgramBlob
     /tmp/cc9agNo8.s:6263   .text:000000000000567f flProgram
     /tmp/cc9agNo8.s:6553   .rodata:0000000000000a30 indexValues
     /tmp/cc9agNo8.s:6667   .text:0000000000005ab1 flMultiBitPortAccess

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
usbControlWrite
errPrefix
__stack_chk_fail
usbBulkWrite
usbBulkRead
errRender
strtoul
flSelectConduit
csvfPlay
bufInitialise
strlen
strcmp
flLoadSvfAndConvertToCsvf
flLoadXsvfAndConvertToCsvf
bufAppendFromBinaryFile
bufDestroy
usbControlRead
