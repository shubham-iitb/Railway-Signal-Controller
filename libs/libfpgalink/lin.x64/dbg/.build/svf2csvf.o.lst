   1              		.file	"svf2csvf.c"
   2              		.text
   3              	.Ltext0:
   5              	getHexNibble:
   6              	.LFB4:
   7              		.file 1 "svf2csvf.c"
   1:svf2csvf.c    **** /*
   2:svf2csvf.c    ****  * Copyright (C) 2009-2012 Chris McClelland
   3:svf2csvf.c    ****  *
   4:svf2csvf.c    ****  * This program is free software: you can redistribute it and/or modify
   5:svf2csvf.c    ****  * it under the terms of the GNU Lesser General Public License as published by
   6:svf2csvf.c    ****  * the Free Software Foundation, either version 3 of the License, or
   7:svf2csvf.c    ****  * (at your option) any later version.
   8:svf2csvf.c    ****  *
   9:svf2csvf.c    ****  * This program is distributed in the hope that it will be useful,
  10:svf2csvf.c    ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:svf2csvf.c    ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:svf2csvf.c    ****  * GNU Lesser General Public License for more details.
  13:svf2csvf.c    ****  *
  14:svf2csvf.c    ****  * You should have received a copy of the GNU Lesser General Public License
  15:svf2csvf.c    ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:svf2csvf.c    ****  */
  17:svf2csvf.c    **** #include <stdlib.h>
  18:svf2csvf.c    **** #include <string.h>
  19:svf2csvf.c    **** #include <makestuff.h>
  20:svf2csvf.c    **** #include <libbuffer.h>
  21:svf2csvf.c    **** #include <liberror.h>
  22:svf2csvf.c    **** #include "svf2csvf.h"
  23:svf2csvf.c    **** #include "xsvf.h"
  24:svf2csvf.c    **** #include "private.h"
  25:svf2csvf.c    **** 
  26:svf2csvf.c    **** static FLStatus shiftLeft(
  27:svf2csvf.c    **** 	struct Buffer *buffer, uint32 numBits, uint32 shiftCount, const char **error
  28:svf2csvf.c    **** ) WARN_UNUSED_RESULT;
  29:svf2csvf.c    **** 
  30:svf2csvf.c    **** static FLStatus initBitStore(
  31:svf2csvf.c    **** 	struct BitStore *store, const char **error
  32:svf2csvf.c    **** ) WARN_UNUSED_RESULT;
  33:svf2csvf.c    **** 
  34:svf2csvf.c    **** static FLStatus processLine(
  35:svf2csvf.c    **** 	struct BitStore *store,
  36:svf2csvf.c    **** 	uint32 newLength, const char *tdi, const char *tdo, const char *mask,
  37:svf2csvf.c    **** 	const char **error
  38:svf2csvf.c    **** ) WARN_UNUSED_RESULT;
  39:svf2csvf.c    **** 
  40:svf2csvf.c    **** static FLStatus appendSwapped(
  41:svf2csvf.c    **** 	struct Buffer *buf, const uint8 *src, uint32 count, const char **error
  42:svf2csvf.c    **** ) WARN_UNUSED_RESULT;
  43:svf2csvf.c    **** 
  44:svf2csvf.c    **** static bool getHexNibble(char hexDigit, uint8 *nibble) {
   8              		.loc 1 44 0
   9              		.cfi_startproc
  10 0000 55       		pushq	%rbp
  11              		.cfi_def_cfa_offset 16
  12              		.cfi_offset 6, -16
  13 0001 4889E5   		movq	%rsp, %rbp
  14              		.cfi_def_cfa_register 6
  15 0004 89F8     		movl	%edi, %eax
  16 0006 488975F0 		movq	%rsi, -16(%rbp)
  17 000a 8845FC   		movb	%al, -4(%rbp)
  45:svf2csvf.c    **** 	if ( hexDigit >= '0' && hexDigit <= '9' ) {
  18              		.loc 1 45 0
  19 000d 807DFC2F 		cmpb	$47, -4(%rbp)
  20 0011 7E1A     		jle	.L2
  21              		.loc 1 45 0 is_stmt 0 discriminator 1
  22 0013 807DFC39 		cmpb	$57, -4(%rbp)
  23 0017 7F14     		jg	.L2
  46:svf2csvf.c    **** 		*nibble = (uint8)(hexDigit - '0');
  24              		.loc 1 46 0 is_stmt 1
  25 0019 0FB645FC 		movzbl	-4(%rbp), %eax
  26 001d 8D50D0   		leal	-48(%rax), %edx
  27 0020 488B45F0 		movq	-16(%rbp), %rax
  28 0024 8810     		movb	%dl, (%rax)
  47:svf2csvf.c    **** 		return false;
  29              		.loc 1 47 0
  30 0026 B8000000 		movl	$0, %eax
  30      00
  31 002b EB45     		jmp	.L3
  32              	.L2:
  48:svf2csvf.c    **** 	} else if ( hexDigit >= 'a' && hexDigit <= 'f' ) {
  33              		.loc 1 48 0
  34 002d 807DFC60 		cmpb	$96, -4(%rbp)
  35 0031 7E1A     		jle	.L4
  36              		.loc 1 48 0 is_stmt 0 discriminator 1
  37 0033 807DFC66 		cmpb	$102, -4(%rbp)
  38 0037 7F14     		jg	.L4
  49:svf2csvf.c    **** 		*nibble = (uint8)(hexDigit - 'a' + 10);
  39              		.loc 1 49 0 is_stmt 1
  40 0039 0FB645FC 		movzbl	-4(%rbp), %eax
  41 003d 8D50A9   		leal	-87(%rax), %edx
  42 0040 488B45F0 		movq	-16(%rbp), %rax
  43 0044 8810     		movb	%dl, (%rax)
  50:svf2csvf.c    **** 		return false;
  44              		.loc 1 50 0
  45 0046 B8000000 		movl	$0, %eax
  45      00
  46 004b EB25     		jmp	.L3
  47              	.L4:
  51:svf2csvf.c    **** 	} else if ( hexDigit >= 'A' && hexDigit <= 'F' ) {
  48              		.loc 1 51 0
  49 004d 807DFC40 		cmpb	$64, -4(%rbp)
  50 0051 7E1A     		jle	.L5
  51              		.loc 1 51 0 is_stmt 0 discriminator 1
  52 0053 807DFC46 		cmpb	$70, -4(%rbp)
  53 0057 7F14     		jg	.L5
  52:svf2csvf.c    **** 		*nibble = (uint8)(hexDigit - 'A' + 10);
  54              		.loc 1 52 0 is_stmt 1
  55 0059 0FB645FC 		movzbl	-4(%rbp), %eax
  56 005d 8D50C9   		leal	-55(%rax), %edx
  57 0060 488B45F0 		movq	-16(%rbp), %rax
  58 0064 8810     		movb	%dl, (%rax)
  53:svf2csvf.c    **** 		return false;
  59              		.loc 1 53 0
  60 0066 B8000000 		movl	$0, %eax
  60      00
  61 006b EB05     		jmp	.L3
  62              	.L5:
  54:svf2csvf.c    **** 	} else {
  55:svf2csvf.c    **** 		return true;
  63              		.loc 1 55 0
  64 006d B8010000 		movl	$1, %eax
  64      00
  65              	.L3:
  56:svf2csvf.c    **** 	}
  57:svf2csvf.c    **** }
  66              		.loc 1 57 0
  67 0072 5D       		popq	%rbp
  68              		.cfi_def_cfa 7, 8
  69 0073 C3       		ret
  70              		.cfi_endproc
  71              	.LFE4:
  74              	getHexByte:
  75              	.LFB5:
  58:svf2csvf.c    **** 
  59:svf2csvf.c    **** static int getHexByte(const char *p, uint8 *byte) {
  76              		.loc 1 59 0
  77              		.cfi_startproc
  78 0074 55       		pushq	%rbp
  79              		.cfi_def_cfa_offset 16
  80              		.cfi_offset 6, -16
  81 0075 4889E5   		movq	%rsp, %rbp
  82              		.cfi_def_cfa_register 6
  83 0078 4883EC20 		subq	$32, %rsp
  84 007c 48897DE8 		movq	%rdi, -24(%rbp)
  85 0080 488975E0 		movq	%rsi, -32(%rbp)
  86              		.loc 1 59 0
  87 0084 64488B04 		movq	%fs:40, %rax
  87      25280000 
  87      00
  88 008d 488945F8 		movq	%rax, -8(%rbp)
  89 0091 31C0     		xorl	%eax, %eax
  60:svf2csvf.c    **** 	uint8 upperNibble;
  61:svf2csvf.c    **** 	uint8 lowerNibble;
  62:svf2csvf.c    **** 	if ( !getHexNibble(p[0], &upperNibble) && !getHexNibble(p[1], &lowerNibble) ) {
  90              		.loc 1 62 0
  91 0093 488B45E8 		movq	-24(%rbp), %rax
  92 0097 0FB600   		movzbl	(%rax), %eax
  93 009a 0FBEC0   		movsbl	%al, %eax
  94 009d 488D55F6 		leaq	-10(%rbp), %rdx
  95 00a1 4889D6   		movq	%rdx, %rsi
  96 00a4 89C7     		movl	%eax, %edi
  97 00a6 E855FFFF 		call	getHexNibble
  97      FF
  98 00ab 83F001   		xorl	$1, %eax
  99 00ae 84C0     		testb	%al, %al
 100 00b0 7449     		je	.L7
 101              		.loc 1 62 0 is_stmt 0 discriminator 1
 102 00b2 488B45E8 		movq	-24(%rbp), %rax
 103 00b6 4883C001 		addq	$1, %rax
 104 00ba 0FB600   		movzbl	(%rax), %eax
 105 00bd 0FBEC0   		movsbl	%al, %eax
 106 00c0 488D55F7 		leaq	-9(%rbp), %rdx
 107 00c4 4889D6   		movq	%rdx, %rsi
 108 00c7 89C7     		movl	%eax, %edi
 109 00c9 E832FFFF 		call	getHexNibble
 109      FF
 110 00ce 83F001   		xorl	$1, %eax
 111 00d1 84C0     		testb	%al, %al
 112 00d3 7426     		je	.L7
  63:svf2csvf.c    **** 		*byte = (uint8)((upperNibble << 4) | lowerNibble);
 113              		.loc 1 63 0 is_stmt 1
 114 00d5 0FB645F6 		movzbl	-10(%rbp), %eax
 115 00d9 0FB6C0   		movzbl	%al, %eax
 116 00dc C1E004   		sall	$4, %eax
 117 00df 89C2     		movl	%eax, %edx
 118 00e1 0FB645F7 		movzbl	-9(%rbp), %eax
 119 00e5 09D0     		orl	%edx, %eax
 120 00e7 89C2     		movl	%eax, %edx
 121 00e9 488B45E0 		movq	-32(%rbp), %rax
 122 00ed 8810     		movb	%dl, (%rax)
  64:svf2csvf.c    **** 		byte += 2;
 123              		.loc 1 64 0
 124 00ef 488345E0 		addq	$2, -32(%rbp)
 124      02
  65:svf2csvf.c    **** 		return 0;
 125              		.loc 1 65 0
 126 00f4 B8000000 		movl	$0, %eax
 126      00
 127 00f9 EB05     		jmp	.L9
 128              	.L7:
  66:svf2csvf.c    **** 	} else {
  67:svf2csvf.c    **** 		return 1;
 129              		.loc 1 67 0
 130 00fb B8010000 		movl	$1, %eax
 130      00
 131              	.L9:
  68:svf2csvf.c    **** 	}
  69:svf2csvf.c    **** }
 132              		.loc 1 69 0 discriminator 1
 133 0100 488B4DF8 		movq	-8(%rbp), %rcx
 134 0104 6448330C 		xorq	%fs:40, %rcx
 134      25280000 
 134      00
 135 010d 7405     		je	.L10
 136              		.loc 1 69 0 is_stmt 0
 137 010f E8000000 		call	__stack_chk_fail@PLT
 137      00
 138              	.L10:
 139 0114 C9       		leave
 140              		.cfi_def_cfa 7, 8
 141 0115 C3       		ret
 142              		.cfi_endproc
 143              	.LFE5:
 145              		.globl	readLongBE
 147              	readLongBE:
 148              	.LFB6:
  70:svf2csvf.c    **** 
  71:svf2csvf.c    **** uint32 readLongBE(const uint8 *p) {
 149              		.loc 1 71 0 is_stmt 1
 150              		.cfi_startproc
 151 0116 55       		pushq	%rbp
 152              		.cfi_def_cfa_offset 16
 153              		.cfi_offset 6, -16
 154 0117 4889E5   		movq	%rsp, %rbp
 155              		.cfi_def_cfa_register 6
 156 011a 48897DE8 		movq	%rdi, -24(%rbp)
  72:svf2csvf.c    **** 	uint32 result;
  73:svf2csvf.c    **** 	result = p[0];
 157              		.loc 1 73 0
 158 011e 488B45E8 		movq	-24(%rbp), %rax
 159 0122 0FB600   		movzbl	(%rax), %eax
 160 0125 0FB6C0   		movzbl	%al, %eax
 161 0128 8945FC   		movl	%eax, -4(%rbp)
  74:svf2csvf.c    **** 	result <<= 8;
 162              		.loc 1 74 0
 163 012b C165FC08 		sall	$8, -4(%rbp)
  75:svf2csvf.c    **** 	result |= p[1];
 164              		.loc 1 75 0
 165 012f 488B45E8 		movq	-24(%rbp), %rax
 166 0133 4883C001 		addq	$1, %rax
 167 0137 0FB600   		movzbl	(%rax), %eax
 168 013a 0FB6C0   		movzbl	%al, %eax
 169 013d 0945FC   		orl	%eax, -4(%rbp)
  76:svf2csvf.c    **** 	result <<= 8;
 170              		.loc 1 76 0
 171 0140 C165FC08 		sall	$8, -4(%rbp)
  77:svf2csvf.c    **** 	result |= p[2];
 172              		.loc 1 77 0
 173 0144 488B45E8 		movq	-24(%rbp), %rax
 174 0148 4883C002 		addq	$2, %rax
 175 014c 0FB600   		movzbl	(%rax), %eax
 176 014f 0FB6C0   		movzbl	%al, %eax
 177 0152 0945FC   		orl	%eax, -4(%rbp)
  78:svf2csvf.c    **** 	result <<= 8;
 178              		.loc 1 78 0
 179 0155 C165FC08 		sall	$8, -4(%rbp)
  79:svf2csvf.c    **** 	result |= p[3];
 180              		.loc 1 79 0
 181 0159 488B45E8 		movq	-24(%rbp), %rax
 182 015d 4883C003 		addq	$3, %rax
 183 0161 0FB600   		movzbl	(%rax), %eax
 184 0164 0FB6C0   		movzbl	%al, %eax
 185 0167 0945FC   		orl	%eax, -4(%rbp)
  80:svf2csvf.c    **** 	return result;
 186              		.loc 1 80 0
 187 016a 8B45FC   		movl	-4(%rbp), %eax
  81:svf2csvf.c    **** }
 188              		.loc 1 81 0
 189 016d 5D       		popq	%rbp
 190              		.cfi_def_cfa 7, 8
 191 016e C3       		ret
 192              		.cfi_endproc
 193              	.LFE6:
 195              		.section	.rodata
 196              		.align 8
 197              	.LC0:
 198 0000 72656164 		.string	"readBytes(): I need an even number of hex digits"
 198      42797465 
 198      7328293A 
 198      2049206E 
 198      65656420 
 199              	.LC1:
 200 0031 72656164 		.string	"readBytes()"
 200      42797465 
 200      73282900 
 201              		.text
 202              		.globl	readBytes
 204              	readBytes:
 205              	.LFB7:
  82:svf2csvf.c    **** 
  83:svf2csvf.c    **** FLStatus readBytes(
  84:svf2csvf.c    **** 	struct Buffer *buffer, const char *hexDigits, const char **error)
  85:svf2csvf.c    **** {
 206              		.loc 1 85 0
 207              		.cfi_startproc
 208 016f 55       		pushq	%rbp
 209              		.cfi_def_cfa_offset 16
 210              		.cfi_offset 6, -16
 211 0170 4889E5   		movq	%rsp, %rbp
 212              		.cfi_def_cfa_register 6
 213 0173 4883EC40 		subq	$64, %rsp
 214 0177 48897DD8 		movq	%rdi, -40(%rbp)
 215 017b 488975D0 		movq	%rsi, -48(%rbp)
 216 017f 488955C8 		movq	%rdx, -56(%rbp)
  86:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 217              		.loc 1 86 0
 218 0183 C745EC00 		movl	$0, -20(%rbp)
 218      000000
  87:svf2csvf.c    **** 	uint32 length = (uint32)strlen(hexDigits);
 219              		.loc 1 87 0
 220 018a 488B45D0 		movq	-48(%rbp), %rax
 221 018e 4889C7   		movq	%rax, %rdi
 222 0191 E8000000 		call	strlen@PLT
 222      00
 223 0196 8945F0   		movl	%eax, -16(%rbp)
  88:svf2csvf.c    **** 	uint8 *p = buffer->data;
 224              		.loc 1 88 0
 225 0199 488B45D8 		movq	-40(%rbp), %rax
 226 019d 488B00   		movq	(%rax), %rax
 227 01a0 488945F8 		movq	%rax, -8(%rbp)
  89:svf2csvf.c    **** 	BufferStatus bStatus;
  90:svf2csvf.c    **** 	CHECK_STATUS(
 228              		.loc 1 90 0
 229 01a4 8B45F0   		movl	-16(%rbp), %eax
 230 01a7 83E001   		andl	$1, %eax
 231 01aa 85C0     		testl	%eax, %eax
 232 01ac 741F     		je	.L14
 233              		.loc 1 90 0 is_stmt 0 discriminator 1
 234 01ae 488B45C8 		movq	-56(%rbp), %rax
 235 01b2 488D3500 		leaq	.LC0(%rip), %rsi
 235      000000
 236 01b9 4889C7   		movq	%rax, %rdi
 237 01bc E8000000 		call	errPrefix@PLT
 237      00
 238 01c1 C745EC0A 		movl	$10, -20(%rbp)
 238      000000
 239 01c8 E9990000 		jmp	.L15
 239      00
 240              	.L14:
  91:svf2csvf.c    **** 		length & 1, FL_SVF_PARSE_ERR, cleanup,
  92:svf2csvf.c    **** 		"readBytes(): I need an even number of hex digits");
  93:svf2csvf.c    **** 	bufZeroLength(buffer);
 241              		.loc 1 93 0 is_stmt 1
 242 01cd 488B45D8 		movq	-40(%rbp), %rax
 243 01d1 4889C7   		movq	%rax, %rdi
 244 01d4 E8000000 		call	bufZeroLength@PLT
 244      00
  94:svf2csvf.c    **** 	length >>= 1;  // Number of bytes
 245              		.loc 1 94 0
 246 01d9 D16DF0   		shrl	-16(%rbp)
  95:svf2csvf.c    **** 	bStatus = bufAppendConst(buffer, 0x00, length, error);
 247              		.loc 1 95 0
 248 01dc 8B55F0   		movl	-16(%rbp), %edx
 249 01df 488B4DC8 		movq	-56(%rbp), %rcx
 250 01e3 488B45D8 		movq	-40(%rbp), %rax
 251 01e7 BE000000 		movl	$0, %esi
 251      00
 252 01ec 4889C7   		movq	%rax, %rdi
 253 01ef E8000000 		call	bufAppendConst@PLT
 253      00
 254 01f4 8945F4   		movl	%eax, -12(%rbp)
  96:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "readBytes()");
 255              		.loc 1 96 0
 256 01f7 837DF400 		cmpl	$0, -12(%rbp)
 257 01fb 745C     		je	.L17
 258              		.loc 1 96 0 is_stmt 0 discriminator 1
 259 01fd 488B45C8 		movq	-56(%rbp), %rax
 260 0201 488D3500 		leaq	.LC1(%rip), %rsi
 260      000000
 261 0208 4889C7   		movq	%rax, %rdi
 262 020b E8000000 		call	errPrefix@PLT
 262      00
 263 0210 C745EC01 		movl	$1, -20(%rbp)
 263      000000
 264 0217 EB4D     		jmp	.L15
 265              	.L19:
  97:svf2csvf.c    **** 	while ( length-- ) {
  98:svf2csvf.c    **** 		CHECK_STATUS(getHexByte(hexDigits, p++), FL_SVF_PARSE_ERR, cleanup, "readBytes()");
 266              		.loc 1 98 0 is_stmt 1
 267 0219 488B45F8 		movq	-8(%rbp), %rax
 268 021d 488D5001 		leaq	1(%rax), %rdx
 269 0221 488955F8 		movq	%rdx, -8(%rbp)
 270 0225 488B55D0 		movq	-48(%rbp), %rdx
 271 0229 4889C6   		movq	%rax, %rsi
 272 022c 4889D7   		movq	%rdx, %rdi
 273 022f E840FEFF 		call	getHexByte
 273      FF
 274 0234 85C0     		testl	%eax, %eax
 275 0236 741C     		je	.L18
 276              		.loc 1 98 0 is_stmt 0 discriminator 1
 277 0238 488B45C8 		movq	-56(%rbp), %rax
 278 023c 488D3500 		leaq	.LC1(%rip), %rsi
 278      000000
 279 0243 4889C7   		movq	%rax, %rdi
 280 0246 E8000000 		call	errPrefix@PLT
 280      00
 281 024b C745EC0A 		movl	$10, -20(%rbp)
 281      000000
 282 0252 EB12     		jmp	.L15
 283              	.L18:
  99:svf2csvf.c    **** 		hexDigits += 2;
 284              		.loc 1 99 0 is_stmt 1
 285 0254 488345D0 		addq	$2, -48(%rbp)
 285      02
 286              	.L17:
  97:svf2csvf.c    **** 	while ( length-- ) {
 287              		.loc 1 97 0
 288 0259 8B45F0   		movl	-16(%rbp), %eax
 289 025c 8D50FF   		leal	-1(%rax), %edx
 290 025f 8955F0   		movl	%edx, -16(%rbp)
 291 0262 85C0     		testl	%eax, %eax
 292 0264 75B3     		jne	.L19
 293              	.L15:
 100:svf2csvf.c    **** 	}
 101:svf2csvf.c    **** cleanup:
 102:svf2csvf.c    **** 	return retVal;
 294              		.loc 1 102 0
 295 0266 8B45EC   		movl	-20(%rbp), %eax
 103:svf2csvf.c    **** }
 296              		.loc 1 103 0
 297 0269 C9       		leave
 298              		.cfi_def_cfa 7, 8
 299 026a C3       		ret
 300              		.cfi_endproc
 301              	.LFE7:
 303              		.section	.rodata
 304              	.LC2:
 305 003d 73686966 		.string	"shiftLeft()"
 305      744C6566 
 305      74282900 
 306              		.text
 308              	shiftLeft:
 309              	.LFB8:
 104:svf2csvf.c    **** 
 105:svf2csvf.c    **** static FLStatus shiftLeft(
 106:svf2csvf.c    **** 	struct Buffer *buffer, uint32 numBits, uint32 shiftCount, const char **error)
 107:svf2csvf.c    **** {
 310              		.loc 1 107 0
 311              		.cfi_startproc
 312 026b 55       		pushq	%rbp
 313              		.cfi_def_cfa_offset 16
 314              		.cfi_offset 6, -16
 315 026c 4889E5   		movq	%rsp, %rbp
 316              		.cfi_def_cfa_register 6
 317 026f 4883C480 		addq	$-128, %rsp
 318 0273 48897D98 		movq	%rdi, -104(%rbp)
 319 0277 897594   		movl	%esi, -108(%rbp)
 320 027a 895590   		movl	%edx, -112(%rbp)
 321 027d 48894D88 		movq	%rcx, -120(%rbp)
 322              		.loc 1 107 0
 323 0281 64488B04 		movq	%fs:40, %rax
 323      25280000 
 323      00
 324 028a 488945F8 		movq	%rax, -8(%rbp)
 325 028e 31C0     		xorl	%eax, %eax
 108:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 326              		.loc 1 108 0
 327 0290 C745B000 		movl	$0, -80(%rbp)
 327      000000
 109:svf2csvf.c    **** 	uint32 shiftBytes = shiftCount>>3;
 328              		.loc 1 109 0
 329 0297 8B4590   		movl	-112(%rbp), %eax
 330 029a C1E803   		shrl	$3, %eax
 331 029d 8945B4   		movl	%eax, -76(%rbp)
 110:svf2csvf.c    **** 	uint32 shiftBits = shiftCount&7;
 332              		.loc 1 110 0
 333 02a0 8B4590   		movl	-112(%rbp), %eax
 334 02a3 83E007   		andl	$7, %eax
 335 02a6 8945B8   		movl	%eax, -72(%rbp)
 111:svf2csvf.c    **** 	uint16 accum;
 112:svf2csvf.c    **** 	const uint8 *p = buffer->data;
 336              		.loc 1 112 0
 337 02a9 488B4598 		movq	-104(%rbp), %rax
 338 02ad 488B00   		movq	(%rax), %rax
 339 02b0 488945C0 		movq	%rax, -64(%rbp)
 113:svf2csvf.c    **** 	const uint8 *const end = buffer->data + buffer->length;
 340              		.loc 1 113 0
 341 02b4 488B4598 		movq	-104(%rbp), %rax
 342 02b8 488B10   		movq	(%rax), %rdx
 343 02bb 488B4598 		movq	-104(%rbp), %rax
 344 02bf 488B4008 		movq	8(%rax), %rax
 345 02c3 4801D0   		addq	%rdx, %rax
 346 02c6 488945C8 		movq	%rax, -56(%rbp)
 114:svf2csvf.c    **** 	struct Buffer newBuffer = {0,};
 347              		.loc 1 114 0
 348 02ca 48C745D0 		movq	$0, -48(%rbp)
 348      00000000 
 349 02d2 48C745D8 		movq	$0, -40(%rbp)
 349      00000000 
 350 02da 48C745E0 		movq	$0, -32(%rbp)
 350      00000000 
 351 02e2 48C745E8 		movq	$0, -24(%rbp)
 351      00000000 
 115:svf2csvf.c    **** 	BufferStatus bStatus;
 116:svf2csvf.c    **** 	if ( shiftBits ) {
 352              		.loc 1 116 0
 353 02ea 837DB800 		cmpl	$0, -72(%rbp)
 354 02ee 0F84F901 		je	.L22
 354      0000
 117:svf2csvf.c    **** 		bStatus = bufInitialise(&newBuffer, 1024, 0x00, error);
 355              		.loc 1 117 0
 356 02f4 488B5588 		movq	-120(%rbp), %rdx
 357 02f8 488D45D0 		leaq	-48(%rbp), %rax
 358 02fc 4889D1   		movq	%rdx, %rcx
 359 02ff BA000000 		movl	$0, %edx
 359      00
 360 0304 BE000400 		movl	$1024, %esi
 360      00
 361 0309 4889C7   		movq	%rax, %rdi
 362 030c E8000000 		call	bufInitialise@PLT
 362      00
 363 0311 8945BC   		movl	%eax, -68(%rbp)
 118:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 364              		.loc 1 118 0
 365 0314 837DBC00 		cmpl	$0, -68(%rbp)
 366 0318 741F     		je	.L23
 367              		.loc 1 118 0 is_stmt 0 discriminator 1
 368 031a 488B4588 		movq	-120(%rbp), %rax
 369 031e 488D3500 		leaq	.LC2(%rip), %rsi
 369      000000
 370 0325 4889C7   		movq	%rax, %rdi
 371 0328 E8000000 		call	errPrefix@PLT
 371      00
 372 032d C745B001 		movl	$1, -80(%rbp)
 372      000000
 373 0334 E9F60100 		jmp	.L24
 373      00
 374              	.L23:
 119:svf2csvf.c    **** 		numBits &= 7;  // Now the number of significant bits in first byte.
 375              		.loc 1 119 0 is_stmt 1
 376 0339 83659407 		andl	$7, -108(%rbp)
 120:svf2csvf.c    **** 		if ( numBits ) {
 377              		.loc 1 120 0
 378 033d 837D9400 		cmpl	$0, -108(%rbp)
 379 0341 740B     		je	.L25
 121:svf2csvf.c    **** 			numBits = 8 - numBits; // Now the number of insignificant bits in first byte.
 380              		.loc 1 121 0
 381 0343 B8080000 		movl	$8, %eax
 381      00
 382 0348 2B4594   		subl	-108(%rbp), %eax
 383 034b 894594   		movl	%eax, -108(%rbp)
 384              	.L25:
 122:svf2csvf.c    **** 		}
 123:svf2csvf.c    **** 		accum = p[0];
 385              		.loc 1 123 0
 386 034e 488B45C0 		movq	-64(%rbp), %rax
 387 0352 0FB600   		movzbl	(%rax), %eax
 388 0355 0FB6C0   		movzbl	%al, %eax
 389 0358 668945AE 		movw	%ax, -82(%rbp)
 124:svf2csvf.c    **** 		if ( p < end ) {
 390              		.loc 1 124 0
 391 035c 488B45C0 		movq	-64(%rbp), %rax
 392 0360 483B45C8 		cmpq	-56(%rbp), %rax
 393 0364 0F831601 		jnb	.L26
 393      0000
 125:svf2csvf.c    **** 			accum = (uint16)(accum >> (8-shiftBits));
 394              		.loc 1 125 0
 395 036a 0FB755AE 		movzwl	-82(%rbp), %edx
 396 036e B8080000 		movl	$8, %eax
 396      00
 397 0373 2B45B8   		subl	-72(%rbp), %eax
 398 0376 89C1     		movl	%eax, %ecx
 399 0378 D3FA     		sarl	%cl, %edx
 400 037a 89D0     		movl	%edx, %eax
 401 037c 668945AE 		movw	%ax, -82(%rbp)
 126:svf2csvf.c    **** 			if ( shiftBits > numBits ) {
 402              		.loc 1 126 0
 403 0380 8B45B8   		movl	-72(%rbp), %eax
 404 0383 3B4594   		cmpl	-108(%rbp), %eax
 405 0386 7641     		jbe	.L27
 127:svf2csvf.c    **** 				// We're shifting by more than the number of insignificant bits
 128:svf2csvf.c    **** 				bStatus = bufAppendByte(&newBuffer, (uint8)(accum&0xFF), error);
 406              		.loc 1 128 0
 407 0388 0FB745AE 		movzwl	-82(%rbp), %eax
 408 038c 0FB6C8   		movzbl	%al, %ecx
 409 038f 488B5588 		movq	-120(%rbp), %rdx
 410 0393 488D45D0 		leaq	-48(%rbp), %rax
 411 0397 89CE     		movl	%ecx, %esi
 412 0399 4889C7   		movq	%rax, %rdi
 413 039c E8000000 		call	bufAppendByte@PLT
 413      00
 414 03a1 8945BC   		movl	%eax, -68(%rbp)
 129:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 415              		.loc 1 129 0
 416 03a4 837DBC00 		cmpl	$0, -68(%rbp)
 417 03a8 741F     		je	.L27
 418              		.loc 1 129 0 is_stmt 0 discriminator 1
 419 03aa 488B4588 		movq	-120(%rbp), %rax
 420 03ae 488D3500 		leaq	.LC2(%rip), %rsi
 420      000000
 421 03b5 4889C7   		movq	%rax, %rdi
 422 03b8 E8000000 		call	errPrefix@PLT
 422      00
 423 03bd C745B001 		movl	$1, -80(%rbp)
 423      000000
 424 03c4 E9660100 		jmp	.L24
 424      00
 425              	.L27:
 130:svf2csvf.c    **** 			}
 131:svf2csvf.c    **** 			accum = (uint16)((p[0]<<8) + p[1]);
 426              		.loc 1 131 0 is_stmt 1
 427 03c9 488B45C0 		movq	-64(%rbp), %rax
 428 03cd 0FB600   		movzbl	(%rax), %eax
 429 03d0 0FB6C0   		movzbl	%al, %eax
 430 03d3 C1E008   		sall	$8, %eax
 431 03d6 89C2     		movl	%eax, %edx
 432 03d8 488B45C0 		movq	-64(%rbp), %rax
 433 03dc 4883C001 		addq	$1, %rax
 434 03e0 0FB600   		movzbl	(%rax), %eax
 435 03e3 0FB6C0   		movzbl	%al, %eax
 436 03e6 01D0     		addl	%edx, %eax
 437 03e8 668945AE 		movw	%ax, -82(%rbp)
 132:svf2csvf.c    **** 			p++;
 438              		.loc 1 132 0
 439 03ec 488345C0 		addq	$1, -64(%rbp)
 439      01
 133:svf2csvf.c    **** 			while ( p < end ) {
 440              		.loc 1 133 0
 441 03f1 EB7F     		jmp	.L28
 442              	.L30:
 134:svf2csvf.c    **** 				accum = (uint16)(accum >> (8-shiftBits));
 443              		.loc 1 134 0
 444 03f3 0FB755AE 		movzwl	-82(%rbp), %edx
 445 03f7 B8080000 		movl	$8, %eax
 445      00
 446 03fc 2B45B8   		subl	-72(%rbp), %eax
 447 03ff 89C1     		movl	%eax, %ecx
 448 0401 D3FA     		sarl	%cl, %edx
 449 0403 89D0     		movl	%edx, %eax
 450 0405 668945AE 		movw	%ax, -82(%rbp)
 135:svf2csvf.c    **** 				bStatus = bufAppendByte(&newBuffer, (uint8)(accum&0xFF), error);
 451              		.loc 1 135 0
 452 0409 0FB745AE 		movzwl	-82(%rbp), %eax
 453 040d 0FB6C8   		movzbl	%al, %ecx
 454 0410 488B5588 		movq	-120(%rbp), %rdx
 455 0414 488D45D0 		leaq	-48(%rbp), %rax
 456 0418 89CE     		movl	%ecx, %esi
 457 041a 4889C7   		movq	%rax, %rdi
 458 041d E8000000 		call	bufAppendByte@PLT
 458      00
 459 0422 8945BC   		movl	%eax, -68(%rbp)
 136:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 460              		.loc 1 136 0
 461 0425 837DBC00 		cmpl	$0, -68(%rbp)
 462 0429 741F     		je	.L29
 463              		.loc 1 136 0 is_stmt 0 discriminator 1
 464 042b 488B4588 		movq	-120(%rbp), %rax
 465 042f 488D3500 		leaq	.LC2(%rip), %rsi
 465      000000
 466 0436 4889C7   		movq	%rax, %rdi
 467 0439 E8000000 		call	errPrefix@PLT
 467      00
 468 043e C745B001 		movl	$1, -80(%rbp)
 468      000000
 469 0445 E9E50000 		jmp	.L24
 469      00
 470              	.L29:
 137:svf2csvf.c    **** 				accum = (uint16)((p[0]<<8) + p[1]);
 471              		.loc 1 137 0 is_stmt 1
 472 044a 488B45C0 		movq	-64(%rbp), %rax
 473 044e 0FB600   		movzbl	(%rax), %eax
 474 0451 0FB6C0   		movzbl	%al, %eax
 475 0454 C1E008   		sall	$8, %eax
 476 0457 89C2     		movl	%eax, %edx
 477 0459 488B45C0 		movq	-64(%rbp), %rax
 478 045d 4883C001 		addq	$1, %rax
 479 0461 0FB600   		movzbl	(%rax), %eax
 480 0464 0FB6C0   		movzbl	%al, %eax
 481 0467 01D0     		addl	%edx, %eax
 482 0469 668945AE 		movw	%ax, -82(%rbp)
 138:svf2csvf.c    **** 				p++;
 483              		.loc 1 138 0
 484 046d 488345C0 		addq	$1, -64(%rbp)
 484      01
 485              	.L28:
 133:svf2csvf.c    **** 				accum = (uint16)(accum >> (8-shiftBits));
 486              		.loc 1 133 0
 487 0472 488B45C0 		movq	-64(%rbp), %rax
 488 0476 483B45C8 		cmpq	-56(%rbp), %rax
 489 047a 0F8273FF 		jb	.L30
 489      FFFF
 490              	.L26:
 139:svf2csvf.c    **** 			}
 140:svf2csvf.c    **** 		}
 141:svf2csvf.c    **** 		accum &= 0xFF00;
 491              		.loc 1 141 0
 492 0480 668165AE 		andw	$-256, -82(%rbp)
 492      00FF
 142:svf2csvf.c    **** 		accum = (uint16)(accum >> (8-shiftBits));
 493              		.loc 1 142 0
 494 0486 0FB755AE 		movzwl	-82(%rbp), %edx
 495 048a B8080000 		movl	$8, %eax
 495      00
 496 048f 2B45B8   		subl	-72(%rbp), %eax
 497 0492 89C1     		movl	%eax, %ecx
 498 0494 D3FA     		sarl	%cl, %edx
 499 0496 89D0     		movl	%edx, %eax
 500 0498 668945AE 		movw	%ax, -82(%rbp)
 143:svf2csvf.c    **** 		bStatus = bufAppendByte(&newBuffer, (uint8)(accum&0xFF), error);
 501              		.loc 1 143 0
 502 049c 0FB745AE 		movzwl	-82(%rbp), %eax
 503 04a0 0FB6C8   		movzbl	%al, %ecx
 504 04a3 488B5588 		movq	-120(%rbp), %rdx
 505 04a7 488D45D0 		leaq	-48(%rbp), %rax
 506 04ab 89CE     		movl	%ecx, %esi
 507 04ad 4889C7   		movq	%rax, %rdi
 508 04b0 E8000000 		call	bufAppendByte@PLT
 508      00
 509 04b5 8945BC   		movl	%eax, -68(%rbp)
 144:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 510              		.loc 1 144 0
 511 04b8 837DBC00 		cmpl	$0, -68(%rbp)
 512 04bc 741C     		je	.L31
 513              		.loc 1 144 0 is_stmt 0 discriminator 1
 514 04be 488B4588 		movq	-120(%rbp), %rax
 515 04c2 488D3500 		leaq	.LC2(%rip), %rsi
 515      000000
 516 04c9 4889C7   		movq	%rax, %rdi
 517 04cc E8000000 		call	errPrefix@PLT
 517      00
 518 04d1 C745B001 		movl	$1, -80(%rbp)
 518      000000
 519 04d8 EB55     		jmp	.L24
 520              	.L31:
 145:svf2csvf.c    **** 		bufSwap(&newBuffer, buffer);
 521              		.loc 1 145 0 is_stmt 1
 522 04da 488B5598 		movq	-104(%rbp), %rdx
 523 04de 488D45D0 		leaq	-48(%rbp), %rax
 524 04e2 4889D6   		movq	%rdx, %rsi
 525 04e5 4889C7   		movq	%rax, %rdi
 526 04e8 E8000000 		call	bufSwap@PLT
 526      00
 527              	.L22:
 146:svf2csvf.c    **** 	}
 147:svf2csvf.c    **** 	if ( shiftBytes ) {
 528              		.loc 1 147 0
 529 04ed 837DB400 		cmpl	$0, -76(%rbp)
 530 04f1 743C     		je	.L24
 148:svf2csvf.c    **** 		bStatus = bufAppendConst(buffer, 0x00, shiftBytes, error);
 531              		.loc 1 148 0
 532 04f3 8B55B4   		movl	-76(%rbp), %edx
 533 04f6 488B4D88 		movq	-120(%rbp), %rcx
 534 04fa 488B4598 		movq	-104(%rbp), %rax
 535 04fe BE000000 		movl	$0, %esi
 535      00
 536 0503 4889C7   		movq	%rax, %rdi
 537 0506 E8000000 		call	bufAppendConst@PLT
 537      00
 538 050b 8945BC   		movl	%eax, -68(%rbp)
 149:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 539              		.loc 1 149 0
 540 050e 837DBC00 		cmpl	$0, -68(%rbp)
 541 0512 741B     		je	.L24
 542              		.loc 1 149 0 is_stmt 0 discriminator 1
 543 0514 488B4588 		movq	-120(%rbp), %rax
 544 0518 488D3500 		leaq	.LC2(%rip), %rsi
 544      000000
 545 051f 4889C7   		movq	%rax, %rdi
 546 0522 E8000000 		call	errPrefix@PLT
 546      00
 547 0527 C745B001 		movl	$1, -80(%rbp)
 547      000000
 548 052e 90       		nop
 549              	.L24:
 150:svf2csvf.c    **** 	}
 151:svf2csvf.c    **** cleanup:
 152:svf2csvf.c    **** 	bufDestroy(&newBuffer);
 550              		.loc 1 152 0 is_stmt 1
 551 052f 488D45D0 		leaq	-48(%rbp), %rax
 552 0533 4889C7   		movq	%rax, %rdi
 553 0536 E8000000 		call	bufDestroy@PLT
 553      00
 153:svf2csvf.c    **** 	return retVal;
 554              		.loc 1 153 0
 555 053b 8B45B0   		movl	-80(%rbp), %eax
 154:svf2csvf.c    **** }
 556              		.loc 1 154 0
 557 053e 488B75F8 		movq	-8(%rbp), %rsi
 558 0542 64483334 		xorq	%fs:40, %rsi
 558      25280000 
 558      00
 559 054b 7405     		je	.L33
 560 054d E8000000 		call	__stack_chk_fail@PLT
 560      00
 561              	.L33:
 562 0552 C9       		leave
 563              		.cfi_def_cfa 7, 8
 564 0553 C3       		ret
 565              		.cfi_endproc
 566              	.LFE8:
 568              		.section	.rodata
 569              	.LC3:
 570 0049 68656164 		.string	"headTail()"
 570      5461696C 
 570      282900
 571              	.LC4:
 572 0054 68656164 		.string	"headTail(): Internal error"
 572      5461696C 
 572      28293A20 
 572      496E7465 
 572      726E616C 
 573              		.text
 574              		.globl	headTail
 576              	headTail:
 577              	.LFB9:
 155:svf2csvf.c    **** 
 156:svf2csvf.c    **** FLStatus headTail(
 157:svf2csvf.c    **** 	struct Buffer *dataBuf, struct Buffer *headBuf, struct Buffer *tailBuf,
 158:svf2csvf.c    **** 	uint32 dataBits, uint32 headBits, uint32 tailBits, const char **error)
 159:svf2csvf.c    **** {
 578              		.loc 1 159 0
 579              		.cfi_startproc
 580 0554 55       		pushq	%rbp
 581              		.cfi_def_cfa_offset 16
 582              		.cfi_offset 6, -16
 583 0555 4889E5   		movq	%rsp, %rbp
 584              		.cfi_def_cfa_register 6
 585 0558 4881EC90 		subq	$144, %rsp
 585      000000
 586 055f 48897D98 		movq	%rdi, -104(%rbp)
 587 0563 48897590 		movq	%rsi, -112(%rbp)
 588 0567 48895588 		movq	%rdx, -120(%rbp)
 589 056b 894D84   		movl	%ecx, -124(%rbp)
 590 056e 44894580 		movl	%r8d, -128(%rbp)
 591 0572 44898D7C 		movl	%r9d, -132(%rbp)
 591      FFFFFF
 592 0579 488B4510 		movq	16(%rbp), %rax
 593 057d 48898570 		movq	%rax, -144(%rbp)
 593      FFFFFF
 594              		.loc 1 159 0
 595 0584 64488B04 		movq	%fs:40, %rax
 595      25280000 
 595      00
 596 058d 488945F8 		movq	%rax, -8(%rbp)
 597 0591 31C0     		xorl	%eax, %eax
 160:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 598              		.loc 1 160 0
 599 0593 C745A400 		movl	$0, -92(%rbp)
 599      000000
 161:svf2csvf.c    **** 	const uint8 *src = headBuf->data;
 600              		.loc 1 161 0
 601 059a 488B4590 		movq	-112(%rbp), %rax
 602 059e 488B00   		movq	(%rax), %rax
 603 05a1 488945B8 		movq	%rax, -72(%rbp)
 162:svf2csvf.c    **** 	const uint8 *dstEnd;
 163:svf2csvf.c    **** 	uint8 *dst;
 164:svf2csvf.c    **** 	struct Buffer newBuffer = {0,};
 604              		.loc 1 164 0
 605 05a5 48C745D0 		movq	$0, -48(%rbp)
 605      00000000 
 606 05ad 48C745D8 		movq	$0, -40(%rbp)
 606      00000000 
 607 05b5 48C745E0 		movq	$0, -32(%rbp)
 607      00000000 
 608 05bd 48C745E8 		movq	$0, -24(%rbp)
 608      00000000 
 165:svf2csvf.c    **** 	BufferStatus bStatus;
 166:svf2csvf.c    **** 
 167:svf2csvf.c    **** 	// Shift data left by headBits
 168:svf2csvf.c    **** 	fStatus = shiftLeft(dataBuf, dataBits, headBits, error);
 609              		.loc 1 168 0
 610 05c5 488B8D70 		movq	-144(%rbp), %rcx
 610      FFFFFF
 611 05cc 8B5580   		movl	-128(%rbp), %edx
 612 05cf 8B7584   		movl	-124(%rbp), %esi
 613 05d2 488B4598 		movq	-104(%rbp), %rax
 614 05d6 4889C7   		movq	%rax, %rdi
 615 05d9 E88DFCFF 		call	shiftLeft
 615      FF
 616 05de 8945A8   		movl	%eax, -88(%rbp)
 169:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "headTail()");
 617              		.loc 1 169 0
 618 05e1 837DA800 		cmpl	$0, -88(%rbp)
 619 05e5 7421     		je	.L35
 620              		.loc 1 169 0 is_stmt 0 discriminator 1
 621 05e7 488B8570 		movq	-144(%rbp), %rax
 621      FFFFFF
 622 05ee 488D3500 		leaq	.LC3(%rip), %rsi
 622      000000
 623 05f5 4889C7   		movq	%rax, %rdi
 624 05f8 E8000000 		call	errPrefix@PLT
 624      00
 625 05fd 8B45A8   		movl	-88(%rbp), %eax
 626 0600 8945A4   		movl	%eax, -92(%rbp)
 627 0603 E9690300 		jmp	.L36
 627      00
 628              	.L35:
 170:svf2csvf.c    **** 
 171:svf2csvf.c    **** 	//dumpSimple(dataBuf->data, dataBuf->length);
 172:svf2csvf.c    **** 
 173:svf2csvf.c    **** 	// Add headBits to dataBits to get the new total
 174:svf2csvf.c    **** 	dataBits += headBits;
 629              		.loc 1 174 0 is_stmt 1
 630 0608 8B4580   		movl	-128(%rbp), %eax
 631 060b 014584   		addl	%eax, -124(%rbp)
 175:svf2csvf.c    **** 
 176:svf2csvf.c    **** 	// Add header
 177:svf2csvf.c    **** 	dstEnd = dst = dataBuf->data + dataBuf->length;
 632              		.loc 1 177 0
 633 060e 488B4598 		movq	-104(%rbp), %rax
 634 0612 488B10   		movq	(%rax), %rdx
 635 0615 488B4598 		movq	-104(%rbp), %rax
 636 0619 488B4008 		movq	8(%rax), %rax
 637 061d 4801D0   		addq	%rdx, %rax
 638 0620 488945C0 		movq	%rax, -64(%rbp)
 639 0624 488B45C0 		movq	-64(%rbp), %rax
 640 0628 488945C8 		movq	%rax, -56(%rbp)
 178:svf2csvf.c    **** 	dst -= headBuf->length;
 641              		.loc 1 178 0
 642 062c 488B4590 		movq	-112(%rbp), %rax
 643 0630 488B4008 		movq	8(%rax), %rax
 644 0634 48F7D8   		negq	%rax
 645 0637 480145C0 		addq	%rax, -64(%rbp)
 179:svf2csvf.c    **** 	while ( dst < dstEnd ) {
 646              		.loc 1 179 0
 647 063b EB22     		jmp	.L37
 648              	.L38:
 180:svf2csvf.c    **** 		*dst++ |= *src++;
 649              		.loc 1 180 0
 650 063d 488B45B8 		movq	-72(%rbp), %rax
 651 0641 488D5001 		leaq	1(%rax), %rdx
 652 0645 488955B8 		movq	%rdx, -72(%rbp)
 653 0649 0FB608   		movzbl	(%rax), %ecx
 654 064c 488B45C0 		movq	-64(%rbp), %rax
 655 0650 488D5001 		leaq	1(%rax), %rdx
 656 0654 488955C0 		movq	%rdx, -64(%rbp)
 657 0658 0FB610   		movzbl	(%rax), %edx
 658 065b 09CA     		orl	%ecx, %edx
 659 065d 8810     		movb	%dl, (%rax)
 660              	.L37:
 179:svf2csvf.c    **** 	while ( dst < dstEnd ) {
 661              		.loc 1 179 0
 662 065f 488B45C0 		movq	-64(%rbp), %rax
 663 0663 483B45C8 		cmpq	-56(%rbp), %rax
 664 0667 72D4     		jb	.L38
 181:svf2csvf.c    **** 	}
 182:svf2csvf.c    **** 
 183:svf2csvf.c    **** 	if ( tailBits ) {
 665              		.loc 1 183 0
 666 0669 83BD7CFF 		cmpl	$0, -132(%rbp)
 666      FFFF00
 667 0670 0F84FB02 		je	.L36
 667      0000
 668              	.LBB2:
 184:svf2csvf.c    **** 		uint32 tailShift = dataBits & 7;
 669              		.loc 1 184 0
 670 0676 8B4584   		movl	-124(%rbp), %eax
 671 0679 83E007   		andl	$7, %eax
 672 067c 8945AC   		movl	%eax, -84(%rbp)
 185:svf2csvf.c    **** 		uint32 bytesFromTail;
 186:svf2csvf.c    **** 		// Shift the tail to align with the MSB of the data
 187:svf2csvf.c    **** 		if ( tailShift ) {
 673              		.loc 1 187 0
 674 067f 837DAC00 		cmpl	$0, -84(%rbp)
 675 0683 7446     		je	.L39
 188:svf2csvf.c    **** 			fStatus = shiftLeft(tailBuf, tailBits, tailShift, error);
 676              		.loc 1 188 0
 677 0685 488B8D70 		movq	-144(%rbp), %rcx
 677      FFFFFF
 678 068c 8B55AC   		movl	-84(%rbp), %edx
 679 068f 8BB57CFF 		movl	-132(%rbp), %esi
 679      FFFF
 680 0695 488B4588 		movq	-120(%rbp), %rax
 681 0699 4889C7   		movq	%rax, %rdi
 682 069c E8CAFBFF 		call	shiftLeft
 682      FF
 683 06a1 8945A8   		movl	%eax, -88(%rbp)
 189:svf2csvf.c    **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "headTail()");
 684              		.loc 1 189 0
 685 06a4 837DA800 		cmpl	$0, -88(%rbp)
 686 06a8 7421     		je	.L39
 687              		.loc 1 189 0 is_stmt 0 discriminator 1
 688 06aa 488B8570 		movq	-144(%rbp), %rax
 688      FFFFFF
 689 06b1 488D3500 		leaq	.LC3(%rip), %rsi
 689      000000
 690 06b8 4889C7   		movq	%rax, %rdi
 691 06bb E8000000 		call	errPrefix@PLT
 691      00
 692 06c0 8B45A8   		movl	-88(%rbp), %eax
 693 06c3 8945A4   		movl	%eax, -92(%rbp)
 694 06c6 E9A60200 		jmp	.L36
 694      00
 695              	.L39:
 190:svf2csvf.c    **** 		}
 191:svf2csvf.c    **** 
 192:svf2csvf.c    **** 		// How much data do we need to copy from the tail?
 193:svf2csvf.c    **** 		bytesFromTail = (uint32)tailBuf->length;
 696              		.loc 1 193 0 is_stmt 1
 697 06cb 488B4588 		movq	-120(%rbp), %rax
 698 06cf 488B4008 		movq	8(%rax), %rax
 699 06d3 8945B0   		movl	%eax, -80(%rbp)
 194:svf2csvf.c    **** 		src = tailBuf->data;
 700              		.loc 1 194 0
 701 06d6 488B4588 		movq	-120(%rbp), %rax
 702 06da 488B00   		movq	(%rax), %rax
 703 06dd 488945B8 		movq	%rax, -72(%rbp)
 195:svf2csvf.c    **** 
 196:svf2csvf.c    **** 		// Init new buffer
 197:svf2csvf.c    **** 		bStatus = bufInitialise(&newBuffer, 1024, 0x00, error);
 704              		.loc 1 197 0
 705 06e1 488B9570 		movq	-144(%rbp), %rdx
 705      FFFFFF
 706 06e8 488D45D0 		leaq	-48(%rbp), %rax
 707 06ec 4889D1   		movq	%rdx, %rcx
 708 06ef BA000000 		movl	$0, %edx
 708      00
 709 06f4 BE000400 		movl	$1024, %esi
 709      00
 710 06f9 4889C7   		movq	%rax, %rdi
 711 06fc E8000000 		call	bufInitialise@PLT
 711      00
 712 0701 8945B4   		movl	%eax, -76(%rbp)
 198:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 713              		.loc 1 198 0
 714 0704 837DB400 		cmpl	$0, -76(%rbp)
 715 0708 7422     		je	.L40
 716              		.loc 1 198 0 is_stmt 0 discriminator 1
 717 070a 488B8570 		movq	-144(%rbp), %rax
 717      FFFFFF
 718 0711 488D3500 		leaq	.LC3(%rip), %rsi
 718      000000
 719 0718 4889C7   		movq	%rax, %rdi
 720 071b E8000000 		call	errPrefix@PLT
 720      00
 721 0720 C745A401 		movl	$1, -92(%rbp)
 721      000000
 722 0727 E9450200 		jmp	.L36
 722      00
 723              	.L40:
 199:svf2csvf.c    **** 
 200:svf2csvf.c    **** 		dataBits += tailBits;
 724              		.loc 1 200 0 is_stmt 1
 725 072c 8B857CFF 		movl	-132(%rbp), %eax
 725      FFFF
 726 0732 014584   		addl	%eax, -124(%rbp)
 201:svf2csvf.c    **** 		if ( bitsToBytes(dataBits) == dataBuf->length + bytesFromTail ) {
 727              		.loc 1 201 0
 728 0735 8B4584   		movl	-124(%rbp), %eax
 729 0738 C1E803   		shrl	$3, %eax
 730 073b 89C2     		movl	%eax, %edx
 731 073d 8B4584   		movl	-124(%rbp), %eax
 732 0740 83E007   		andl	$7, %eax
 733 0743 85C0     		testl	%eax, %eax
 734 0745 7407     		je	.L41
 735              		.loc 1 201 0 is_stmt 0 discriminator 1
 736 0747 B8010000 		movl	$1, %eax
 736      00
 737 074c EB05     		jmp	.L42
 738              	.L41:
 739              		.loc 1 201 0 discriminator 2
 740 074e B8000000 		movl	$0, %eax
 740      00
 741              	.L42:
 742              		.loc 1 201 0 discriminator 4
 743 0753 01D0     		addl	%edx, %eax
 744 0755 89C1     		movl	%eax, %ecx
 745 0757 488B4598 		movq	-104(%rbp), %rax
 746 075b 488B5008 		movq	8(%rax), %rdx
 747 075f 8B45B0   		movl	-80(%rbp), %eax
 748 0762 4801D0   		addq	%rdx, %rax
 749 0765 4839C1   		cmpq	%rax, %rcx
 750 0768 0F859600 		jne	.L43
 750      0000
 202:svf2csvf.c    **** 			// There's no overlap, so copy back-to-back
 203:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuffer, src, bytesFromTail, error);
 751              		.loc 1 203 0 is_stmt 1
 752 076e 8B55B0   		movl	-80(%rbp), %edx
 753 0771 488B8D70 		movq	-144(%rbp), %rcx
 753      FFFFFF
 754 0778 488B75B8 		movq	-72(%rbp), %rsi
 755 077c 488D45D0 		leaq	-48(%rbp), %rax
 756 0780 4889C7   		movq	%rax, %rdi
 757 0783 E8000000 		call	bufAppendBlock@PLT
 757      00
 758 0788 8945B4   		movl	%eax, -76(%rbp)
 204:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 759              		.loc 1 204 0
 760 078b 837DB400 		cmpl	$0, -76(%rbp)
 761 078f 7422     		je	.L44
 762              		.loc 1 204 0 is_stmt 0 discriminator 1
 763 0791 488B8570 		movq	-144(%rbp), %rax
 763      FFFFFF
 764 0798 488D3500 		leaq	.LC3(%rip), %rsi
 764      000000
 765 079f 4889C7   		movq	%rax, %rdi
 766 07a2 E8000000 		call	errPrefix@PLT
 766      00
 767 07a7 C745A401 		movl	$1, -92(%rbp)
 767      000000
 768 07ae E9BE0100 		jmp	.L36
 768      00
 769              	.L44:
 205:svf2csvf.c    **** 			bStatus = bufAppendByte(&newBuffer, *dataBuf->data, error);
 770              		.loc 1 205 0 is_stmt 1
 771 07b3 488B4598 		movq	-104(%rbp), %rax
 772 07b7 488B00   		movq	(%rax), %rax
 773 07ba 0FB600   		movzbl	(%rax), %eax
 774 07bd 0FB6C8   		movzbl	%al, %ecx
 775 07c0 488B9570 		movq	-144(%rbp), %rdx
 775      FFFFFF
 776 07c7 488D45D0 		leaq	-48(%rbp), %rax
 777 07cb 89CE     		movl	%ecx, %esi
 778 07cd 4889C7   		movq	%rax, %rdi
 779 07d0 E8000000 		call	bufAppendByte@PLT
 779      00
 780 07d5 8945B4   		movl	%eax, -76(%rbp)
 206:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 781              		.loc 1 206 0
 782 07d8 837DB400 		cmpl	$0, -76(%rbp)
 783 07dc 0F842401 		je	.L45
 783      0000
 784              		.loc 1 206 0 is_stmt 0 discriminator 1
 785 07e2 488B8570 		movq	-144(%rbp), %rax
 785      FFFFFF
 786 07e9 488D3500 		leaq	.LC3(%rip), %rsi
 786      000000
 787 07f0 4889C7   		movq	%rax, %rdi
 788 07f3 E8000000 		call	errPrefix@PLT
 788      00
 789 07f8 C745A401 		movl	$1, -92(%rbp)
 789      000000
 790 07ff E96D0100 		jmp	.L36
 790      00
 791              	.L43:
 207:svf2csvf.c    **** 		} else if ( bitsToBytes(dataBits) == dataBuf->length + bytesFromTail - 1 ) {
 792              		.loc 1 207 0 is_stmt 1
 793 0804 8B4584   		movl	-124(%rbp), %eax
 794 0807 C1E803   		shrl	$3, %eax
 795 080a 89C2     		movl	%eax, %edx
 796 080c 8B4584   		movl	-124(%rbp), %eax
 797 080f 83E007   		andl	$7, %eax
 798 0812 85C0     		testl	%eax, %eax
 799 0814 7407     		je	.L46
 800              		.loc 1 207 0 is_stmt 0 discriminator 1
 801 0816 B8010000 		movl	$1, %eax
 801      00
 802 081b EB05     		jmp	.L47
 803              	.L46:
 804              		.loc 1 207 0 discriminator 2
 805 081d B8000000 		movl	$0, %eax
 805      00
 806              	.L47:
 807              		.loc 1 207 0 discriminator 4
 808 0822 01D0     		addl	%edx, %eax
 809 0824 89C1     		movl	%eax, %ecx
 810 0826 488B4598 		movq	-104(%rbp), %rax
 811 082a 488B5008 		movq	8(%rax), %rdx
 812 082e 8B45B0   		movl	-80(%rbp), %eax
 813 0831 4801D0   		addq	%rdx, %rax
 814 0834 4883E801 		subq	$1, %rax
 815 0838 4839C1   		cmpq	%rax, %rcx
 816 083b 0F85A600 		jne	.L48
 816      0000
 208:svf2csvf.c    **** 			// There's a single byte overlap, so OR the overlap byte
 209:svf2csvf.c    **** 			bytesFromTail--;
 817              		.loc 1 209 0 is_stmt 1
 818 0841 836DB001 		subl	$1, -80(%rbp)
 210:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuffer, src, bytesFromTail, error);
 819              		.loc 1 210 0
 820 0845 8B55B0   		movl	-80(%rbp), %edx
 821 0848 488B8D70 		movq	-144(%rbp), %rcx
 821      FFFFFF
 822 084f 488B75B8 		movq	-72(%rbp), %rsi
 823 0853 488D45D0 		leaq	-48(%rbp), %rax
 824 0857 4889C7   		movq	%rax, %rdi
 825 085a E8000000 		call	bufAppendBlock@PLT
 825      00
 826 085f 8945B4   		movl	%eax, -76(%rbp)
 211:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 827              		.loc 1 211 0
 828 0862 837DB400 		cmpl	$0, -76(%rbp)
 829 0866 7422     		je	.L49
 830              		.loc 1 211 0 is_stmt 0 discriminator 1
 831 0868 488B8570 		movq	-144(%rbp), %rax
 831      FFFFFF
 832 086f 488D3500 		leaq	.LC3(%rip), %rsi
 832      000000
 833 0876 4889C7   		movq	%rax, %rdi
 834 0879 E8000000 		call	errPrefix@PLT
 834      00
 835 087e C745A401 		movl	$1, -92(%rbp)
 835      000000
 836 0885 E9E70000 		jmp	.L36
 836      00
 837              	.L49:
 212:svf2csvf.c    **** 			src += bytesFromTail;
 838              		.loc 1 212 0 is_stmt 1
 839 088a 8B45B0   		movl	-80(%rbp), %eax
 840 088d 480145B8 		addq	%rax, -72(%rbp)
 213:svf2csvf.c    **** 			bStatus = bufAppendByte(&newBuffer, *src | *dataBuf->data, error);
 841              		.loc 1 213 0
 842 0891 488B45B8 		movq	-72(%rbp), %rax
 843 0895 0FB610   		movzbl	(%rax), %edx
 844 0898 488B4598 		movq	-104(%rbp), %rax
 845 089c 488B00   		movq	(%rax), %rax
 846 089f 0FB600   		movzbl	(%rax), %eax
 847 08a2 09D0     		orl	%edx, %eax
 848 08a4 0FB6C8   		movzbl	%al, %ecx
 849 08a7 488B9570 		movq	-144(%rbp), %rdx
 849      FFFFFF
 850 08ae 488D45D0 		leaq	-48(%rbp), %rax
 851 08b2 89CE     		movl	%ecx, %esi
 852 08b4 4889C7   		movq	%rax, %rdi
 853 08b7 E8000000 		call	bufAppendByte@PLT
 853      00
 854 08bc 8945B4   		movl	%eax, -76(%rbp)
 214:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 855              		.loc 1 214 0
 856 08bf 837DB400 		cmpl	$0, -76(%rbp)
 857 08c3 7441     		je	.L45
 858              		.loc 1 214 0 is_stmt 0 discriminator 1
 859 08c5 488B8570 		movq	-144(%rbp), %rax
 859      FFFFFF
 860 08cc 488D3500 		leaq	.LC3(%rip), %rsi
 860      000000
 861 08d3 4889C7   		movq	%rax, %rdi
 862 08d6 E8000000 		call	errPrefix@PLT
 862      00
 863 08db C745A401 		movl	$1, -92(%rbp)
 863      000000
 864 08e2 E98A0000 		jmp	.L36
 864      00
 865              	.L48:
 215:svf2csvf.c    **** 		} else {
 216:svf2csvf.c    **** 			// Ooops, this should never happen!
 217:svf2csvf.c    **** 			CHECK_STATUS(true, FL_INTERNAL_ERR, cleanup, "headTail(): Internal error");
 866              		.loc 1 217 0 is_stmt 1 discriminator 1
 867 08e7 488B8570 		movq	-144(%rbp), %rax
 867      FFFFFF
 868 08ee 488D3500 		leaq	.LC4(%rip), %rsi
 868      000000
 869 08f5 4889C7   		movq	%rax, %rdi
 870 08f8 E8000000 		call	errPrefix@PLT
 870      00
 871 08fd C745A417 		movl	$23, -92(%rbp)
 871      000000
 872 0904 EB6B     		jmp	.L36
 873              	.L45:
 218:svf2csvf.c    **** 		}
 219:svf2csvf.c    **** 		bStatus = bufAppendBlock(&newBuffer, dataBuf->data+1, dataBuf->length-1, error);
 874              		.loc 1 219 0
 875 0906 488B4598 		movq	-104(%rbp), %rax
 876 090a 488B4008 		movq	8(%rax), %rax
 877 090e 488D78FF 		leaq	-1(%rax), %rdi
 878 0912 488B4598 		movq	-104(%rbp), %rax
 879 0916 488B00   		movq	(%rax), %rax
 880 0919 488D7001 		leaq	1(%rax), %rsi
 881 091d 488B9570 		movq	-144(%rbp), %rdx
 881      FFFFFF
 882 0924 488D45D0 		leaq	-48(%rbp), %rax
 883 0928 4889D1   		movq	%rdx, %rcx
 884 092b 4889FA   		movq	%rdi, %rdx
 885 092e 4889C7   		movq	%rax, %rdi
 886 0931 E8000000 		call	bufAppendBlock@PLT
 886      00
 887 0936 8945B4   		movl	%eax, -76(%rbp)
 220:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 888              		.loc 1 220 0
 889 0939 837DB400 		cmpl	$0, -76(%rbp)
 890 093d 741F     		je	.L50
 891              		.loc 1 220 0 is_stmt 0 discriminator 1
 892 093f 488B8570 		movq	-144(%rbp), %rax
 892      FFFFFF
 893 0946 488D3500 		leaq	.LC3(%rip), %rsi
 893      000000
 894 094d 4889C7   		movq	%rax, %rdi
 895 0950 E8000000 		call	errPrefix@PLT
 895      00
 896 0955 C745A401 		movl	$1, -92(%rbp)
 896      000000
 897 095c EB13     		jmp	.L36
 898              	.L50:
 221:svf2csvf.c    **** 		bufSwap(&newBuffer, dataBuf);
 899              		.loc 1 221 0 is_stmt 1
 900 095e 488B5598 		movq	-104(%rbp), %rdx
 901 0962 488D45D0 		leaq	-48(%rbp), %rax
 902 0966 4889D6   		movq	%rdx, %rsi
 903 0969 4889C7   		movq	%rax, %rdi
 904 096c E8000000 		call	bufSwap@PLT
 904      00
 905              	.L36:
 906              	.LBE2:
 222:svf2csvf.c    **** 	}
 223:svf2csvf.c    **** 	
 224:svf2csvf.c    **** cleanup:
 225:svf2csvf.c    **** 	bufDestroy(&newBuffer);
 907              		.loc 1 225 0
 908 0971 488D45D0 		leaq	-48(%rbp), %rax
 909 0975 4889C7   		movq	%rax, %rdi
 910 0978 E8000000 		call	bufDestroy@PLT
 910      00
 226:svf2csvf.c    **** 	return retVal;
 911              		.loc 1 226 0
 912 097d 8B45A4   		movl	-92(%rbp), %eax
 227:svf2csvf.c    **** }
 913              		.loc 1 227 0
 914 0980 488B7DF8 		movq	-8(%rbp), %rdi
 915 0984 6448333C 		xorq	%fs:40, %rdi
 915      25280000 
 915      00
 916 098d 7405     		je	.L52
 917 098f E8000000 		call	__stack_chk_fail@PLT
 917      00
 918              	.L52:
 919 0994 C9       		leave
 920              		.cfi_def_cfa 7, 8
 921 0995 C3       		ret
 922              		.cfi_endproc
 923              	.LFE9:
 925              		.section	.rodata
 926              	.LC5:
 927 006f 696E6974 		.string	"initBitStore()"
 927      42697453 
 927      746F7265 
 927      282900
 928              		.text
 930              	initBitStore:
 931              	.LFB10:
 228:svf2csvf.c    **** 
 229:svf2csvf.c    **** static FLStatus initBitStore(struct BitStore *store, const char **error) {
 932              		.loc 1 229 0
 933              		.cfi_startproc
 934 0996 55       		pushq	%rbp
 935              		.cfi_def_cfa_offset 16
 936              		.cfi_offset 6, -16
 937 0997 4889E5   		movq	%rsp, %rbp
 938              		.cfi_def_cfa_register 6
 939 099a 4883EC20 		subq	$32, %rsp
 940 099e 48897DE8 		movq	%rdi, -24(%rbp)
 941 09a2 488975E0 		movq	%rsi, -32(%rbp)
 230:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 942              		.loc 1 230 0
 943 09a6 C745F800 		movl	$0, -8(%rbp)
 943      000000
 231:svf2csvf.c    **** 	BufferStatus bStatus;
 232:svf2csvf.c    **** 	store->numBits = 0;
 944              		.loc 1 232 0
 945 09ad 488B45E8 		movq	-24(%rbp), %rax
 946 09b1 C7000000 		movl	$0, (%rax)
 946      0000
 233:svf2csvf.c    **** 	bStatus = bufInitialise(&store->tdi, 1024, 0x00, error);
 947              		.loc 1 233 0
 948 09b7 488B45E8 		movq	-24(%rbp), %rax
 949 09bb 488D7808 		leaq	8(%rax), %rdi
 950 09bf 488B45E0 		movq	-32(%rbp), %rax
 951 09c3 4889C1   		movq	%rax, %rcx
 952 09c6 BA000000 		movl	$0, %edx
 952      00
 953 09cb BE000400 		movl	$1024, %esi
 953      00
 954 09d0 E8000000 		call	bufInitialise@PLT
 954      00
 955 09d5 8945FC   		movl	%eax, -4(%rbp)
 234:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "initBitStore()");
 956              		.loc 1 234 0
 957 09d8 837DFC00 		cmpl	$0, -4(%rbp)
 958 09dc 741F     		je	.L54
 959              		.loc 1 234 0 is_stmt 0 discriminator 1
 960 09de 488B45E0 		movq	-32(%rbp), %rax
 961 09e2 488D3500 		leaq	.LC5(%rip), %rsi
 961      000000
 962 09e9 4889C7   		movq	%rax, %rdi
 963 09ec E8000000 		call	errPrefix@PLT
 963      00
 964 09f1 C745F801 		movl	$1, -8(%rbp)
 964      000000
 965 09f8 E9850000 		jmp	.L55
 965      00
 966              	.L54:
 235:svf2csvf.c    **** 	bStatus = bufInitialise(&store->tdo, 1024, 0x00, error);
 967              		.loc 1 235 0 is_stmt 1
 968 09fd 488B45E8 		movq	-24(%rbp), %rax
 969 0a01 488D7828 		leaq	40(%rax), %rdi
 970 0a05 488B45E0 		movq	-32(%rbp), %rax
 971 0a09 4889C1   		movq	%rax, %rcx
 972 0a0c BA000000 		movl	$0, %edx
 972      00
 973 0a11 BE000400 		movl	$1024, %esi
 973      00
 974 0a16 E8000000 		call	bufInitialise@PLT
 974      00
 975 0a1b 8945FC   		movl	%eax, -4(%rbp)
 236:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "initBitStore()");
 976              		.loc 1 236 0
 977 0a1e 837DFC00 		cmpl	$0, -4(%rbp)
 978 0a22 741C     		je	.L56
 979              		.loc 1 236 0 is_stmt 0 discriminator 1
 980 0a24 488B45E0 		movq	-32(%rbp), %rax
 981 0a28 488D3500 		leaq	.LC5(%rip), %rsi
 981      000000
 982 0a2f 4889C7   		movq	%rax, %rdi
 983 0a32 E8000000 		call	errPrefix@PLT
 983      00
 984 0a37 C745F801 		movl	$1, -8(%rbp)
 984      000000
 985 0a3e EB42     		jmp	.L55
 986              	.L56:
 237:svf2csvf.c    **** 	bStatus = bufInitialise(&store->mask, 1024, 0x00, error);
 987              		.loc 1 237 0 is_stmt 1
 988 0a40 488B45E8 		movq	-24(%rbp), %rax
 989 0a44 488D7848 		leaq	72(%rax), %rdi
 990 0a48 488B45E0 		movq	-32(%rbp), %rax
 991 0a4c 4889C1   		movq	%rax, %rcx
 992 0a4f BA000000 		movl	$0, %edx
 992      00
 993 0a54 BE000400 		movl	$1024, %esi
 993      00
 994 0a59 E8000000 		call	bufInitialise@PLT
 994      00
 995 0a5e 8945FC   		movl	%eax, -4(%rbp)
 238:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "initBitStore()");
 996              		.loc 1 238 0
 997 0a61 837DFC00 		cmpl	$0, -4(%rbp)
 998 0a65 741B     		je	.L55
 999              		.loc 1 238 0 is_stmt 0 discriminator 1
 1000 0a67 488B45E0 		movq	-32(%rbp), %rax
 1001 0a6b 488D3500 		leaq	.LC5(%rip), %rsi
 1001      000000
 1002 0a72 4889C7   		movq	%rax, %rdi
 1003 0a75 E8000000 		call	errPrefix@PLT
 1003      00
 1004 0a7a C745F801 		movl	$1, -8(%rbp)
 1004      000000
 1005 0a81 90       		nop
 1006              	.L55:
 239:svf2csvf.c    **** cleanup:
 240:svf2csvf.c    **** 	return retVal;
 1007              		.loc 1 240 0 is_stmt 1
 1008 0a82 8B45F8   		movl	-8(%rbp), %eax
 241:svf2csvf.c    **** }
 1009              		.loc 1 241 0
 1010 0a85 C9       		leave
 1011              		.cfi_def_cfa 7, 8
 1012 0a86 C3       		ret
 1013              		.cfi_endproc
 1014              	.LFE10:
 1017              	destroyBitStore:
 1018              	.LFB11:
 242:svf2csvf.c    **** 
 243:svf2csvf.c    **** static void destroyBitStore(struct BitStore *store) {
 1019              		.loc 1 243 0
 1020              		.cfi_startproc
 1021 0a87 55       		pushq	%rbp
 1022              		.cfi_def_cfa_offset 16
 1023              		.cfi_offset 6, -16
 1024 0a88 4889E5   		movq	%rsp, %rbp
 1025              		.cfi_def_cfa_register 6
 1026 0a8b 4883EC10 		subq	$16, %rsp
 1027 0a8f 48897DF8 		movq	%rdi, -8(%rbp)
 244:svf2csvf.c    **** 	store->numBits = 0;
 1028              		.loc 1 244 0
 1029 0a93 488B45F8 		movq	-8(%rbp), %rax
 1030 0a97 C7000000 		movl	$0, (%rax)
 1030      0000
 245:svf2csvf.c    **** 	bufDestroy(&store->tdi);
 1031              		.loc 1 245 0
 1032 0a9d 488B45F8 		movq	-8(%rbp), %rax
 1033 0aa1 4883C008 		addq	$8, %rax
 1034 0aa5 4889C7   		movq	%rax, %rdi
 1035 0aa8 E8000000 		call	bufDestroy@PLT
 1035      00
 246:svf2csvf.c    **** 	bufDestroy(&store->tdo);
 1036              		.loc 1 246 0
 1037 0aad 488B45F8 		movq	-8(%rbp), %rax
 1038 0ab1 4883C028 		addq	$40, %rax
 1039 0ab5 4889C7   		movq	%rax, %rdi
 1040 0ab8 E8000000 		call	bufDestroy@PLT
 1040      00
 247:svf2csvf.c    **** 	bufDestroy(&store->mask);
 1041              		.loc 1 247 0
 1042 0abd 488B45F8 		movq	-8(%rbp), %rax
 1043 0ac1 4883C048 		addq	$72, %rax
 1044 0ac5 4889C7   		movq	%rax, %rdi
 1045 0ac8 E8000000 		call	bufDestroy@PLT
 1045      00
 248:svf2csvf.c    **** }
 1046              		.loc 1 248 0
 1047 0acd 90       		nop
 1048 0ace C9       		leave
 1049              		.cfi_def_cfa 7, 8
 1050 0acf C3       		ret
 1051              		.cfi_endproc
 1052              	.LFE11:
 1054              		.section	.rodata
 1055              	.LC6:
 1056 007e 63787449 		.string	"cxtInitialise()"
 1056      6E697469 
 1056      616C6973 
 1056      65282900 
 1057              		.text
 1058              		.globl	cxtInitialise
 1060              	cxtInitialise:
 1061              	.LFB12:
 249:svf2csvf.c    **** 
 250:svf2csvf.c    **** FLStatus cxtInitialise(struct ParseContext *cxt, const char **error) {
 1062              		.loc 1 250 0
 1063              		.cfi_startproc
 1064 0ad0 55       		pushq	%rbp
 1065              		.cfi_def_cfa_offset 16
 1066              		.cfi_offset 6, -16
 1067 0ad1 4889E5   		movq	%rsp, %rbp
 1068              		.cfi_def_cfa_register 6
 1069 0ad4 4883EC20 		subq	$32, %rsp
 1070 0ad8 48897DE8 		movq	%rdi, -24(%rbp)
 1071 0adc 488975E0 		movq	%rsi, -32(%rbp)
 251:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 1072              		.loc 1 251 0
 1073 0ae0 C745F400 		movl	$0, -12(%rbp)
 1073      000000
 252:svf2csvf.c    **** 	BufferStatus bStatus;
 253:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->dataHead, error);
 1074              		.loc 1 253 0
 1075 0ae7 488B45E8 		movq	-24(%rbp), %rax
 1076 0aeb 488B55E0 		movq	-32(%rbp), %rdx
 1077 0aef 4889D6   		movq	%rdx, %rsi
 1078 0af2 4889C7   		movq	%rax, %rdi
 1079 0af5 E89CFEFF 		call	initBitStore
 1079      FF
 1080 0afa 8945F8   		movl	%eax, -8(%rbp)
 254:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1081              		.loc 1 254 0
 1082 0afd 837DF800 		cmpl	$0, -8(%rbp)
 1083 0b01 741E     		je	.L60
 1084              		.loc 1 254 0 is_stmt 0 discriminator 1
 1085 0b03 488B45E0 		movq	-32(%rbp), %rax
 1086 0b07 488D3500 		leaq	.LC6(%rip), %rsi
 1086      000000
 1087 0b0e 4889C7   		movq	%rax, %rdi
 1088 0b11 E8000000 		call	errPrefix@PLT
 1088      00
 1089 0b16 8B45F8   		movl	-8(%rbp), %eax
 1090 0b19 8945F4   		movl	%eax, -12(%rbp)
 1091 0b1c E9BA0100 		jmp	.L61
 1091      00
 1092              	.L60:
 255:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->dataBody, error);
 1093              		.loc 1 255 0 is_stmt 1
 1094 0b21 488B45E8 		movq	-24(%rbp), %rax
 1095 0b25 488D90D0 		leaq	208(%rax), %rdx
 1095      000000
 1096 0b2c 488B45E0 		movq	-32(%rbp), %rax
 1097 0b30 4889C6   		movq	%rax, %rsi
 1098 0b33 4889D7   		movq	%rdx, %rdi
 1099 0b36 E85BFEFF 		call	initBitStore
 1099      FF
 1100 0b3b 8945F8   		movl	%eax, -8(%rbp)
 256:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1101              		.loc 1 256 0
 1102 0b3e 837DF800 		cmpl	$0, -8(%rbp)
 1103 0b42 741E     		je	.L62
 1104              		.loc 1 256 0 is_stmt 0 discriminator 1
 1105 0b44 488B45E0 		movq	-32(%rbp), %rax
 1106 0b48 488D3500 		leaq	.LC6(%rip), %rsi
 1106      000000
 1107 0b4f 4889C7   		movq	%rax, %rdi
 1108 0b52 E8000000 		call	errPrefix@PLT
 1108      00
 1109 0b57 8B45F8   		movl	-8(%rbp), %eax
 1110 0b5a 8945F4   		movl	%eax, -12(%rbp)
 1111 0b5d E9790100 		jmp	.L61
 1111      00
 1112              	.L62:
 257:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->dataTail, error);
 1113              		.loc 1 257 0 is_stmt 1
 1114 0b62 488B45E8 		movq	-24(%rbp), %rax
 1115 0b66 488D90A0 		leaq	416(%rax), %rdx
 1115      010000
 1116 0b6d 488B45E0 		movq	-32(%rbp), %rax
 1117 0b71 4889C6   		movq	%rax, %rsi
 1118 0b74 4889D7   		movq	%rdx, %rdi
 1119 0b77 E81AFEFF 		call	initBitStore
 1119      FF
 1120 0b7c 8945F8   		movl	%eax, -8(%rbp)
 258:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1121              		.loc 1 258 0
 1122 0b7f 837DF800 		cmpl	$0, -8(%rbp)
 1123 0b83 741E     		je	.L63
 1124              		.loc 1 258 0 is_stmt 0 discriminator 1
 1125 0b85 488B45E0 		movq	-32(%rbp), %rax
 1126 0b89 488D3500 		leaq	.LC6(%rip), %rsi
 1126      000000
 1127 0b90 4889C7   		movq	%rax, %rdi
 1128 0b93 E8000000 		call	errPrefix@PLT
 1128      00
 1129 0b98 8B45F8   		movl	-8(%rbp), %eax
 1130 0b9b 8945F4   		movl	%eax, -12(%rbp)
 1131 0b9e E9380100 		jmp	.L61
 1131      00
 1132              	.L63:
 259:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->insnHead, error);
 1133              		.loc 1 259 0 is_stmt 1
 1134 0ba3 488B45E8 		movq	-24(%rbp), %rax
 1135 0ba7 488D5068 		leaq	104(%rax), %rdx
 1136 0bab 488B45E0 		movq	-32(%rbp), %rax
 1137 0baf 4889C6   		movq	%rax, %rsi
 1138 0bb2 4889D7   		movq	%rdx, %rdi
 1139 0bb5 E8DCFDFF 		call	initBitStore
 1139      FF
 1140 0bba 8945F8   		movl	%eax, -8(%rbp)
 260:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1141              		.loc 1 260 0
 1142 0bbd 837DF800 		cmpl	$0, -8(%rbp)
 1143 0bc1 741E     		je	.L64
 1144              		.loc 1 260 0 is_stmt 0 discriminator 1
 1145 0bc3 488B45E0 		movq	-32(%rbp), %rax
 1146 0bc7 488D3500 		leaq	.LC6(%rip), %rsi
 1146      000000
 1147 0bce 4889C7   		movq	%rax, %rdi
 1148 0bd1 E8000000 		call	errPrefix@PLT
 1148      00
 1149 0bd6 8B45F8   		movl	-8(%rbp), %eax
 1150 0bd9 8945F4   		movl	%eax, -12(%rbp)
 1151 0bdc E9FA0000 		jmp	.L61
 1151      00
 1152              	.L64:
 261:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->insnBody, error);
 1153              		.loc 1 261 0 is_stmt 1
 1154 0be1 488B45E8 		movq	-24(%rbp), %rax
 1155 0be5 488D9038 		leaq	312(%rax), %rdx
 1155      010000
 1156 0bec 488B45E0 		movq	-32(%rbp), %rax
 1157 0bf0 4889C6   		movq	%rax, %rsi
 1158 0bf3 4889D7   		movq	%rdx, %rdi
 1159 0bf6 E89BFDFF 		call	initBitStore
 1159      FF
 1160 0bfb 8945F8   		movl	%eax, -8(%rbp)
 262:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1161              		.loc 1 262 0
 1162 0bfe 837DF800 		cmpl	$0, -8(%rbp)
 1163 0c02 741E     		je	.L65
 1164              		.loc 1 262 0 is_stmt 0 discriminator 1
 1165 0c04 488B45E0 		movq	-32(%rbp), %rax
 1166 0c08 488D3500 		leaq	.LC6(%rip), %rsi
 1166      000000
 1167 0c0f 4889C7   		movq	%rax, %rdi
 1168 0c12 E8000000 		call	errPrefix@PLT
 1168      00
 1169 0c17 8B45F8   		movl	-8(%rbp), %eax
 1170 0c1a 8945F4   		movl	%eax, -12(%rbp)
 1171 0c1d E9B90000 		jmp	.L61
 1171      00
 1172              	.L65:
 263:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->insnTail, error);
 1173              		.loc 1 263 0 is_stmt 1
 1174 0c22 488B45E8 		movq	-24(%rbp), %rax
 1175 0c26 488D9008 		leaq	520(%rax), %rdx
 1175      020000
 1176 0c2d 488B45E0 		movq	-32(%rbp), %rax
 1177 0c31 4889C6   		movq	%rax, %rsi
 1178 0c34 4889D7   		movq	%rdx, %rdi
 1179 0c37 E85AFDFF 		call	initBitStore
 1179      FF
 1180 0c3c 8945F8   		movl	%eax, -8(%rbp)
 264:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1181              		.loc 1 264 0
 1182 0c3f 837DF800 		cmpl	$0, -8(%rbp)
 1183 0c43 741B     		je	.L66
 1184              		.loc 1 264 0 is_stmt 0 discriminator 1
 1185 0c45 488B45E0 		movq	-32(%rbp), %rax
 1186 0c49 488D3500 		leaq	.LC6(%rip), %rsi
 1186      000000
 1187 0c50 4889C7   		movq	%rax, %rdi
 1188 0c53 E8000000 		call	errPrefix@PLT
 1188      00
 1189 0c58 8B45F8   		movl	-8(%rbp), %eax
 1190 0c5b 8945F4   		movl	%eax, -12(%rbp)
 1191 0c5e EB7B     		jmp	.L61
 1192              	.L66:
 265:svf2csvf.c    **** 	cxt->curLength = 0;
 1193              		.loc 1 265 0 is_stmt 1
 1194 0c60 488B45E8 		movq	-24(%rbp), %rax
 1195 0c64 C7807002 		movl	$0, 624(%rax)
 1195      00000000 
 1195      0000
 266:svf2csvf.c    **** 	bStatus = bufInitialise(&cxt->curMaskBuf, 1024, 0x00, error);
 1196              		.loc 1 266 0
 1197 0c6e 488B45E8 		movq	-24(%rbp), %rax
 1198 0c72 488DB878 		leaq	632(%rax), %rdi
 1198      020000
 1199 0c79 488B45E0 		movq	-32(%rbp), %rax
 1200 0c7d 4889C1   		movq	%rax, %rcx
 1201 0c80 BA000000 		movl	$0, %edx
 1201      00
 1202 0c85 BE000400 		movl	$1024, %esi
 1202      00
 1203 0c8a E8000000 		call	bufInitialise@PLT
 1203      00
 1204 0c8f 8945FC   		movl	%eax, -4(%rbp)
 267:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "cxtInitialise()");
 1205              		.loc 1 267 0
 1206 0c92 837DFC00 		cmpl	$0, -4(%rbp)
 1207 0c96 741C     		je	.L67
 1208              		.loc 1 267 0 is_stmt 0 discriminator 1
 1209 0c98 488B45E0 		movq	-32(%rbp), %rax
 1210 0c9c 488D3500 		leaq	.LC6(%rip), %rsi
 1210      000000
 1211 0ca3 4889C7   		movq	%rax, %rdi
 1212 0ca6 E8000000 		call	errPrefix@PLT
 1212      00
 1213 0cab C745F401 		movl	$1, -12(%rbp)
 1213      000000
 1214 0cb2 EB27     		jmp	.L61
 1215              	.L67:
 268:svf2csvf.c    **** 	cxt->curMaskBits = 0;
 1216              		.loc 1 268 0 is_stmt 1
 1217 0cb4 488B45E8 		movq	-24(%rbp), %rax
 1218 0cb8 C7809802 		movl	$0, 664(%rax)
 1218      00000000 
 1218      0000
 269:svf2csvf.c    **** 	cxt->numCommands = 0;
 1219              		.loc 1 269 0
 1220 0cc2 488B45E8 		movq	-24(%rbp), %rax
 1221 0cc6 C7809C02 		movl	$0, 668(%rax)
 1221      00000000 
 1221      0000
 270:svf2csvf.c    **** 	cxt->newMaskWritten = false;
 1222              		.loc 1 270 0
 1223 0cd0 488B45E8 		movq	-24(%rbp), %rax
 1224 0cd4 C680A002 		movb	$0, 672(%rax)
 1224      000000
 1225              	.L61:
 271:svf2csvf.c    **** cleanup:
 272:svf2csvf.c    **** 	return retVal;
 1226              		.loc 1 272 0
 1227 0cdb 8B45F4   		movl	-12(%rbp), %eax
 273:svf2csvf.c    **** }
 1228              		.loc 1 273 0
 1229 0cde C9       		leave
 1230              		.cfi_def_cfa 7, 8
 1231 0cdf C3       		ret
 1232              		.cfi_endproc
 1233              	.LFE12:
 1235              		.globl	cxtDestroy
 1237              	cxtDestroy:
 1238              	.LFB13:
 274:svf2csvf.c    **** 
 275:svf2csvf.c    **** void cxtDestroy(struct ParseContext *cxt) {
 1239              		.loc 1 275 0
 1240              		.cfi_startproc
 1241 0ce0 55       		pushq	%rbp
 1242              		.cfi_def_cfa_offset 16
 1243              		.cfi_offset 6, -16
 1244 0ce1 4889E5   		movq	%rsp, %rbp
 1245              		.cfi_def_cfa_register 6
 1246 0ce4 4883EC10 		subq	$16, %rsp
 1247 0ce8 48897DF8 		movq	%rdi, -8(%rbp)
 276:svf2csvf.c    **** 	destroyBitStore(&cxt->dataHead);
 1248              		.loc 1 276 0
 1249 0cec 488B45F8 		movq	-8(%rbp), %rax
 1250 0cf0 4889C7   		movq	%rax, %rdi
 1251 0cf3 E88FFDFF 		call	destroyBitStore
 1251      FF
 277:svf2csvf.c    **** 	destroyBitStore(&cxt->dataBody);
 1252              		.loc 1 277 0
 1253 0cf8 488B45F8 		movq	-8(%rbp), %rax
 1254 0cfc 4805D000 		addq	$208, %rax
 1254      0000
 1255 0d02 4889C7   		movq	%rax, %rdi
 1256 0d05 E87DFDFF 		call	destroyBitStore
 1256      FF
 278:svf2csvf.c    **** 	destroyBitStore(&cxt->dataTail);
 1257              		.loc 1 278 0
 1258 0d0a 488B45F8 		movq	-8(%rbp), %rax
 1259 0d0e 4805A001 		addq	$416, %rax
 1259      0000
 1260 0d14 4889C7   		movq	%rax, %rdi
 1261 0d17 E86BFDFF 		call	destroyBitStore
 1261      FF
 279:svf2csvf.c    **** 	destroyBitStore(&cxt->insnHead);
 1262              		.loc 1 279 0
 1263 0d1c 488B45F8 		movq	-8(%rbp), %rax
 1264 0d20 4883C068 		addq	$104, %rax
 1265 0d24 4889C7   		movq	%rax, %rdi
 1266 0d27 E85BFDFF 		call	destroyBitStore
 1266      FF
 280:svf2csvf.c    **** 	destroyBitStore(&cxt->insnBody);
 1267              		.loc 1 280 0
 1268 0d2c 488B45F8 		movq	-8(%rbp), %rax
 1269 0d30 48053801 		addq	$312, %rax
 1269      0000
 1270 0d36 4889C7   		movq	%rax, %rdi
 1271 0d39 E849FDFF 		call	destroyBitStore
 1271      FF
 281:svf2csvf.c    **** 	destroyBitStore(&cxt->insnTail);
 1272              		.loc 1 281 0
 1273 0d3e 488B45F8 		movq	-8(%rbp), %rax
 1274 0d42 48050802 		addq	$520, %rax
 1274      0000
 1275 0d48 4889C7   		movq	%rax, %rdi
 1276 0d4b E837FDFF 		call	destroyBitStore
 1276      FF
 282:svf2csvf.c    **** 	bufDestroy(&cxt->curMaskBuf);
 1277              		.loc 1 282 0
 1278 0d50 488B45F8 		movq	-8(%rbp), %rax
 1279 0d54 48057802 		addq	$632, %rax
 1279      0000
 1280 0d5a 4889C7   		movq	%rax, %rdi
 1281 0d5d E8000000 		call	bufDestroy@PLT
 1281      00
 283:svf2csvf.c    **** }
 1282              		.loc 1 283 0
 1283 0d62 90       		nop
 1284 0d63 C9       		leave
 1285              		.cfi_def_cfa 7, 8
 1286 0d64 C3       		ret
 1287              		.cfi_endproc
 1288              	.LFE13:
 1290              		.section	.rodata
 1291              	.LC7:
 1292 008e 70726F63 		.string	"processLine()"
 1292      6573734C 
 1292      696E6528 
 1292      2900
 1293              		.text
 1295              	processLine:
 1296              	.LFB14:
 284:svf2csvf.c    **** 
 285:svf2csvf.c    **** typedef enum {
 286:svf2csvf.c    **** 	HEAD = 'H',
 287:svf2csvf.c    **** 	TAIL = 'T',
 288:svf2csvf.c    **** 	BODY = 'S'
 289:svf2csvf.c    **** } ShiftOperation;
 290:svf2csvf.c    **** 
 291:svf2csvf.c    **** /**
 292:svf2csvf.c    ****  * Read the data from the tdi, tdo and mask ASCII hex byte sequences into the supplied BitStore as
 293:svf2csvf.c    ****  * binary data.
 294:svf2csvf.c    ****  */
 295:svf2csvf.c    **** static FLStatus processLine(
 296:svf2csvf.c    **** 	struct BitStore *store,
 297:svf2csvf.c    **** 	uint32 newLength, const char *tdi, const char *tdo, const char *mask,
 298:svf2csvf.c    **** 	const char **error)
 299:svf2csvf.c    **** {
 1297              		.loc 1 299 0
 1298              		.cfi_startproc
 1299 0d65 55       		pushq	%rbp
 1300              		.cfi_def_cfa_offset 16
 1301              		.cfi_offset 6, -16
 1302 0d66 4889E5   		movq	%rsp, %rbp
 1303              		.cfi_def_cfa_register 6
 1304 0d69 4883EC40 		subq	$64, %rsp
 1305 0d6d 48897DE8 		movq	%rdi, -24(%rbp)
 1306 0d71 8975E4   		movl	%esi, -28(%rbp)
 1307 0d74 488955D8 		movq	%rdx, -40(%rbp)
 1308 0d78 48894DD0 		movq	%rcx, -48(%rbp)
 1309 0d7c 4C8945C8 		movq	%r8, -56(%rbp)
 1310 0d80 4C894DC0 		movq	%r9, -64(%rbp)
 300:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 1311              		.loc 1 300 0
 1312 0d84 C745F400 		movl	$0, -12(%rbp)
 1312      000000
 301:svf2csvf.c    **** 	BufferStatus bStatus;
 302:svf2csvf.c    **** 
 303:svf2csvf.c    **** 	// The TDI & MASK values are remembered; the TDO value defaults to all zeros. If the length
 304:svf2csvf.c    **** 	// changes, all remembered values are forgotten.
 305:svf2csvf.c    **** 	bufZeroLength(&store->tdo);
 1313              		.loc 1 305 0
 1314 0d8b 488B45E8 		movq	-24(%rbp), %rax
 1315 0d8f 4883C028 		addq	$40, %rax
 1316 0d93 4889C7   		movq	%rax, %rdi
 1317 0d96 E8000000 		call	bufZeroLength@PLT
 1317      00
 306:svf2csvf.c    **** 	if ( newLength ) {
 1318              		.loc 1 306 0
 1319 0d9b 837DE400 		cmpl	$0, -28(%rbp)
 1320 0d9f 7463     		je	.L71
 307:svf2csvf.c    **** 		bStatus = bufAppendConst(&store->tdo, 0x00, bitsToBytes(newLength), error);
 1321              		.loc 1 307 0
 1322 0da1 8B45E4   		movl	-28(%rbp), %eax
 1323 0da4 C1E803   		shrl	$3, %eax
 1324 0da7 89C2     		movl	%eax, %edx
 1325 0da9 8B45E4   		movl	-28(%rbp), %eax
 1326 0dac 83E007   		andl	$7, %eax
 1327 0daf 85C0     		testl	%eax, %eax
 1328 0db1 7407     		je	.L72
 1329              		.loc 1 307 0 is_stmt 0 discriminator 1
 1330 0db3 B8010000 		movl	$1, %eax
 1330      00
 1331 0db8 EB05     		jmp	.L73
 1332              	.L72:
 1333              		.loc 1 307 0 discriminator 2
 1334 0dba B8000000 		movl	$0, %eax
 1334      00
 1335              	.L73:
 1336              		.loc 1 307 0 discriminator 4
 1337 0dbf 01D0     		addl	%edx, %eax
 1338 0dc1 89C2     		movl	%eax, %edx
 1339 0dc3 488B45E8 		movq	-24(%rbp), %rax
 1340 0dc7 488D7828 		leaq	40(%rax), %rdi
 1341 0dcb 488B45C0 		movq	-64(%rbp), %rax
 1342 0dcf 4889C1   		movq	%rax, %rcx
 1343 0dd2 BE000000 		movl	$0, %esi
 1343      00
 1344 0dd7 E8000000 		call	bufAppendConst@PLT
 1344      00
 1345 0ddc 8945F8   		movl	%eax, -8(%rbp)
 308:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "processLine()");
 1346              		.loc 1 308 0 is_stmt 1 discriminator 4
 1347 0ddf 837DF800 		cmpl	$0, -8(%rbp)
 1348 0de3 741F     		je	.L71
 1349              		.loc 1 308 0 is_stmt 0 discriminator 1
 1350 0de5 488B45C0 		movq	-64(%rbp), %rax
 1351 0de9 488D3500 		leaq	.LC7(%rip), %rsi
 1351      000000
 1352 0df0 4889C7   		movq	%rax, %rdi
 1353 0df3 E8000000 		call	errPrefix@PLT
 1353      00
 1354 0df8 C745F401 		movl	$1, -12(%rbp)
 1354      000000
 1355 0dff E9DC0100 		jmp	.L74
 1355      00
 1356              	.L71:
 309:svf2csvf.c    **** 	}
 310:svf2csvf.c    **** 	if ( store->numBits != newLength ) {
 1357              		.loc 1 310 0 is_stmt 1
 1358 0e04 488B45E8 		movq	-24(%rbp), %rax
 1359 0e08 8B00     		movl	(%rax), %eax
 1360 0e0a 3B45E4   		cmpl	-28(%rbp), %eax
 1361 0e0d 0F84F000 		je	.L75
 1361      0000
 311:svf2csvf.c    **** 		// The length changed, so we can't reuse previous values, and new TDI data is required:
 312:svf2csvf.c    **** 		// "The TDI parameter must be explicitly specified for the first command or when the
 313:svf2csvf.c    **** 		// length changes."
 314:svf2csvf.c    **** 		bufZeroLength(&store->tdi);
 1362              		.loc 1 314 0
 1363 0e13 488B45E8 		movq	-24(%rbp), %rax
 1364 0e17 4883C008 		addq	$8, %rax
 1365 0e1b 4889C7   		movq	%rax, %rdi
 1366 0e1e E8000000 		call	bufZeroLength@PLT
 1366      00
 315:svf2csvf.c    **** 		bufZeroLength(&store->mask);
 1367              		.loc 1 315 0
 1368 0e23 488B45E8 		movq	-24(%rbp), %rax
 1369 0e27 4883C048 		addq	$72, %rax
 1370 0e2b 4889C7   		movq	%rax, %rdi
 1371 0e2e E8000000 		call	bufZeroLength@PLT
 1371      00
 316:svf2csvf.c    **** 		if ( newLength ) {
 1372              		.loc 1 316 0
 1373 0e33 837DE400 		cmpl	$0, -28(%rbp)
 1374 0e37 0F84C600 		je	.L75
 1374      0000
 317:svf2csvf.c    **** 			bStatus = bufAppendConst(&store->tdi, 0x00, bitsToBytes(newLength), error);
 1375              		.loc 1 317 0
 1376 0e3d 8B45E4   		movl	-28(%rbp), %eax
 1377 0e40 C1E803   		shrl	$3, %eax
 1378 0e43 89C2     		movl	%eax, %edx
 1379 0e45 8B45E4   		movl	-28(%rbp), %eax
 1380 0e48 83E007   		andl	$7, %eax
 1381 0e4b 85C0     		testl	%eax, %eax
 1382 0e4d 7407     		je	.L76
 1383              		.loc 1 317 0 is_stmt 0 discriminator 1
 1384 0e4f B8010000 		movl	$1, %eax
 1384      00
 1385 0e54 EB05     		jmp	.L77
 1386              	.L76:
 1387              		.loc 1 317 0 discriminator 2
 1388 0e56 B8000000 		movl	$0, %eax
 1388      00
 1389              	.L77:
 1390              		.loc 1 317 0 discriminator 4
 1391 0e5b 01D0     		addl	%edx, %eax
 1392 0e5d 89C2     		movl	%eax, %edx
 1393 0e5f 488B45E8 		movq	-24(%rbp), %rax
 1394 0e63 488D7808 		leaq	8(%rax), %rdi
 1395 0e67 488B45C0 		movq	-64(%rbp), %rax
 1396 0e6b 4889C1   		movq	%rax, %rcx
 1397 0e6e BE000000 		movl	$0, %esi
 1397      00
 1398 0e73 E8000000 		call	bufAppendConst@PLT
 1398      00
 1399 0e78 8945F8   		movl	%eax, -8(%rbp)
 318:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "processLine()");
 1400              		.loc 1 318 0 is_stmt 1 discriminator 4
 1401 0e7b 837DF800 		cmpl	$0, -8(%rbp)
 1402 0e7f 741F     		je	.L78
 1403              		.loc 1 318 0 is_stmt 0 discriminator 1
 1404 0e81 488B45C0 		movq	-64(%rbp), %rax
 1405 0e85 488D3500 		leaq	.LC7(%rip), %rsi
 1405      000000
 1406 0e8c 4889C7   		movq	%rax, %rdi
 1407 0e8f E8000000 		call	errPrefix@PLT
 1407      00
 1408 0e94 C745F401 		movl	$1, -12(%rbp)
 1408      000000
 1409 0e9b E9400100 		jmp	.L74
 1409      00
 1410              	.L78:
 319:svf2csvf.c    **** 			bStatus = bufAppendConst(&store->mask, 0xFF, bitsToBytes(newLength), error);
 1411              		.loc 1 319 0 is_stmt 1
 1412 0ea0 8B45E4   		movl	-28(%rbp), %eax
 1413 0ea3 C1E803   		shrl	$3, %eax
 1414 0ea6 89C2     		movl	%eax, %edx
 1415 0ea8 8B45E4   		movl	-28(%rbp), %eax
 1416 0eab 83E007   		andl	$7, %eax
 1417 0eae 85C0     		testl	%eax, %eax
 1418 0eb0 7407     		je	.L79
 1419              		.loc 1 319 0 is_stmt 0 discriminator 1
 1420 0eb2 B8010000 		movl	$1, %eax
 1420      00
 1421 0eb7 EB05     		jmp	.L80
 1422              	.L79:
 1423              		.loc 1 319 0 discriminator 2
 1424 0eb9 B8000000 		movl	$0, %eax
 1424      00
 1425              	.L80:
 1426              		.loc 1 319 0 discriminator 4
 1427 0ebe 01D0     		addl	%edx, %eax
 1428 0ec0 89C2     		movl	%eax, %edx
 1429 0ec2 488B45E8 		movq	-24(%rbp), %rax
 1430 0ec6 488D7848 		leaq	72(%rax), %rdi
 1431 0eca 488B45C0 		movq	-64(%rbp), %rax
 1432 0ece 4889C1   		movq	%rax, %rcx
 1433 0ed1 BEFF0000 		movl	$255, %esi
 1433      00
 1434 0ed6 E8000000 		call	bufAppendConst@PLT
 1434      00
 1435 0edb 8945F8   		movl	%eax, -8(%rbp)
 320:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "processLine()");
 1436              		.loc 1 320 0 is_stmt 1 discriminator 4
 1437 0ede 837DF800 		cmpl	$0, -8(%rbp)
 1438 0ee2 741F     		je	.L75
 1439              		.loc 1 320 0 is_stmt 0 discriminator 1
 1440 0ee4 488B45C0 		movq	-64(%rbp), %rax
 1441 0ee8 488D3500 		leaq	.LC7(%rip), %rsi
 1441      000000
 1442 0eef 4889C7   		movq	%rax, %rdi
 1443 0ef2 E8000000 		call	errPrefix@PLT
 1443      00
 1444 0ef7 C745F401 		movl	$1, -12(%rbp)
 1444      000000
 1445 0efe E9DD0000 		jmp	.L74
 1445      00
 1446              	.L75:
 321:svf2csvf.c    **** 		}
 322:svf2csvf.c    **** 	}
 323:svf2csvf.c    **** 	store->numBits = newLength;
 1447              		.loc 1 323 0 is_stmt 1
 1448 0f03 488B45E8 		movq	-24(%rbp), %rax
 1449 0f07 8B55E4   		movl	-28(%rbp), %edx
 1450 0f0a 8910     		movl	%edx, (%rax)
 324:svf2csvf.c    **** 	if ( tdi ) {
 1451              		.loc 1 324 0
 1452 0f0c 48837DD8 		cmpq	$0, -40(%rbp)
 1452      00
 1453 0f11 7442     		je	.L81
 325:svf2csvf.c    **** 		fStatus = readBytes(&store->tdi, tdi, error);
 1454              		.loc 1 325 0
 1455 0f13 488B45E8 		movq	-24(%rbp), %rax
 1456 0f17 488D4808 		leaq	8(%rax), %rcx
 1457 0f1b 488B55C0 		movq	-64(%rbp), %rdx
 1458 0f1f 488B45D8 		movq	-40(%rbp), %rax
 1459 0f23 4889C6   		movq	%rax, %rsi
 1460 0f26 4889CF   		movq	%rcx, %rdi
 1461 0f29 E8000000 		call	readBytes@PLT
 1461      00
 1462 0f2e 8945FC   		movl	%eax, -4(%rbp)
 326:svf2csvf.c    **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "processLine()");
 1463              		.loc 1 326 0
 1464 0f31 837DFC00 		cmpl	$0, -4(%rbp)
 1465 0f35 741E     		je	.L81
 1466              		.loc 1 326 0 is_stmt 0 discriminator 1
 1467 0f37 488B45C0 		movq	-64(%rbp), %rax
 1468 0f3b 488D3500 		leaq	.LC7(%rip), %rsi
 1468      000000
 1469 0f42 4889C7   		movq	%rax, %rdi
 1470 0f45 E8000000 		call	errPrefix@PLT
 1470      00
 1471 0f4a 8B45FC   		movl	-4(%rbp), %eax
 1472 0f4d 8945F4   		movl	%eax, -12(%rbp)
 1473 0f50 E98B0000 		jmp	.L74
 1473      00
 1474              	.L81:
 327:svf2csvf.c    **** 	}
 328:svf2csvf.c    **** 	if ( tdo ) {
 1475              		.loc 1 328 0 is_stmt 1
 1476 0f55 48837DD0 		cmpq	$0, -48(%rbp)
 1476      00
 1477 0f5a 743F     		je	.L82
 329:svf2csvf.c    **** 		fStatus = readBytes(&store->tdo, tdo, error);
 1478              		.loc 1 329 0
 1479 0f5c 488B45E8 		movq	-24(%rbp), %rax
 1480 0f60 488D4828 		leaq	40(%rax), %rcx
 1481 0f64 488B55C0 		movq	-64(%rbp), %rdx
 1482 0f68 488B45D0 		movq	-48(%rbp), %rax
 1483 0f6c 4889C6   		movq	%rax, %rsi
 1484 0f6f 4889CF   		movq	%rcx, %rdi
 1485 0f72 E8000000 		call	readBytes@PLT
 1485      00
 1486 0f77 8945FC   		movl	%eax, -4(%rbp)
 330:svf2csvf.c    **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "processLine()");
 1487              		.loc 1 330 0
 1488 0f7a 837DFC00 		cmpl	$0, -4(%rbp)
 1489 0f7e 741B     		je	.L82
 1490              		.loc 1 330 0 is_stmt 0 discriminator 1
 1491 0f80 488B45C0 		movq	-64(%rbp), %rax
 1492 0f84 488D3500 		leaq	.LC7(%rip), %rsi
 1492      000000
 1493 0f8b 4889C7   		movq	%rax, %rdi
 1494 0f8e E8000000 		call	errPrefix@PLT
 1494      00
 1495 0f93 8B45FC   		movl	-4(%rbp), %eax
 1496 0f96 8945F4   		movl	%eax, -12(%rbp)
 1497 0f99 EB45     		jmp	.L74
 1498              	.L82:
 331:svf2csvf.c    **** 	}
 332:svf2csvf.c    **** 	if ( mask ) {
 1499              		.loc 1 332 0 is_stmt 1
 1500 0f9b 48837DC8 		cmpq	$0, -56(%rbp)
 1500      00
 1501 0fa0 743E     		je	.L74
 333:svf2csvf.c    **** 		fStatus = readBytes(&store->mask, mask, error);
 1502              		.loc 1 333 0
 1503 0fa2 488B45E8 		movq	-24(%rbp), %rax
 1504 0fa6 488D4848 		leaq	72(%rax), %rcx
 1505 0faa 488B55C0 		movq	-64(%rbp), %rdx
 1506 0fae 488B45C8 		movq	-56(%rbp), %rax
 1507 0fb2 4889C6   		movq	%rax, %rsi
 1508 0fb5 4889CF   		movq	%rcx, %rdi
 1509 0fb8 E8000000 		call	readBytes@PLT
 1509      00
 1510 0fbd 8945FC   		movl	%eax, -4(%rbp)
 334:svf2csvf.c    **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "processLine()");
 1511              		.loc 1 334 0
 1512 0fc0 837DFC00 		cmpl	$0, -4(%rbp)
 1513 0fc4 741A     		je	.L74
 1514              		.loc 1 334 0 is_stmt 0 discriminator 1
 1515 0fc6 488B45C0 		movq	-64(%rbp), %rax
 1516 0fca 488D3500 		leaq	.LC7(%rip), %rsi
 1516      000000
 1517 0fd1 4889C7   		movq	%rax, %rdi
 1518 0fd4 E8000000 		call	errPrefix@PLT
 1518      00
 1519 0fd9 8B45FC   		movl	-4(%rbp), %eax
 1520 0fdc 8945F4   		movl	%eax, -12(%rbp)
 1521 0fdf 90       		nop
 1522              	.L74:
 335:svf2csvf.c    **** 	}
 336:svf2csvf.c    **** 
 337:svf2csvf.c    **** cleanup:
 338:svf2csvf.c    **** 	return retVal;
 1523              		.loc 1 338 0 is_stmt 1
 1524 0fe0 8B45F4   		movl	-12(%rbp), %eax
 339:svf2csvf.c    **** }
 1525              		.loc 1 339 0
 1526 0fe3 C9       		leave
 1527              		.cfi_def_cfa 7, 8
 1528 0fe4 C3       		ret
 1529              		.cfi_endproc
 1530              	.LFE14:
 1533              	isAllZero:
 1534              	.LFB15:
 340:svf2csvf.c    **** 
 341:svf2csvf.c    **** /**
 342:svf2csvf.c    ****  * Return true if the buffer is all zeros
 343:svf2csvf.c    ****  */
 344:svf2csvf.c    **** static bool isAllZero(struct Buffer *buf) {
 1535              		.loc 1 344 0
 1536              		.cfi_startproc
 1537 0fe5 55       		pushq	%rbp
 1538              		.cfi_def_cfa_offset 16
 1539              		.cfi_offset 6, -16
 1540 0fe6 4889E5   		movq	%rsp, %rbp
 1541              		.cfi_def_cfa_register 6
 1542 0fe9 48897DE8 		movq	%rdi, -24(%rbp)
 345:svf2csvf.c    **** 	const uint8 *p = buf->data;
 1543              		.loc 1 345 0
 1544 0fed 488B45E8 		movq	-24(%rbp), %rax
 1545 0ff1 488B00   		movq	(%rax), %rax
 1546 0ff4 488945F8 		movq	%rax, -8(%rbp)
 346:svf2csvf.c    **** 	uint32 length = (uint32)buf->length;
 1547              		.loc 1 346 0
 1548 0ff8 488B45E8 		movq	-24(%rbp), %rax
 1549 0ffc 488B4008 		movq	8(%rax), %rax
 1550 1000 8945F4   		movl	%eax, -12(%rbp)
 347:svf2csvf.c    **** 	while ( length-- ) {
 1551              		.loc 1 347 0
 1552 1003 EB1A     		jmp	.L85
 1553              	.L87:
 348:svf2csvf.c    **** 		if ( *p++ ) {
 1554              		.loc 1 348 0
 1555 1005 488B45F8 		movq	-8(%rbp), %rax
 1556 1009 488D5001 		leaq	1(%rax), %rdx
 1557 100d 488955F8 		movq	%rdx, -8(%rbp)
 1558 1011 0FB600   		movzbl	(%rax), %eax
 1559 1014 84C0     		testb	%al, %al
 1560 1016 7407     		je	.L85
 349:svf2csvf.c    **** 			return false;
 1561              		.loc 1 349 0
 1562 1018 B8000000 		movl	$0, %eax
 1562      00
 1563 101d EB12     		jmp	.L86
 1564              	.L85:
 347:svf2csvf.c    **** 	while ( length-- ) {
 1565              		.loc 1 347 0
 1566 101f 8B45F4   		movl	-12(%rbp), %eax
 1567 1022 8D50FF   		leal	-1(%rax), %edx
 1568 1025 8955F4   		movl	%edx, -12(%rbp)
 1569 1028 85C0     		testl	%eax, %eax
 1570 102a 75D9     		jne	.L87
 350:svf2csvf.c    **** 		}
 351:svf2csvf.c    **** 	}
 352:svf2csvf.c    **** 	return true;
 1571              		.loc 1 352 0
 1572 102c B8010000 		movl	$1, %eax
 1572      00
 1573              	.L86:
 353:svf2csvf.c    **** }
 1574              		.loc 1 353 0
 1575 1031 5D       		popq	%rbp
 1576              		.cfi_def_cfa 7, 8
 1577 1032 C3       		ret
 1578              		.cfi_endproc
 1579              	.LFE15:
 1581              		.section	.rodata
 1582              	.LC8:
 1583 009c 61707065 		.string	"appendSwapped()"
 1583      6E645377 
 1583      61707065 
 1583      64282900 
 1584              		.text
 1586              	appendSwappedAndInterleaved:
 1587              	.LFB16:
 354:svf2csvf.c    **** 
 355:svf2csvf.c    **** // Reverse and interleave the incoming tdi, tdoExpected arrays:
 356:svf2csvf.c    **** // 0123456789ABCDEFGHIJ -> 9J8I7H6G5F4E3D2C1B0A
 357:svf2csvf.c    **** //
 358:svf2csvf.c    **** static FLStatus appendSwappedAndInterleaved(
 359:svf2csvf.c    **** 	struct Buffer *buf, const uint8 *tdi, const uint8 *exp, uint32 count, const char **error)
 360:svf2csvf.c    **** {
 1588              		.loc 1 360 0
 1589              		.cfi_startproc
 1590 1033 55       		pushq	%rbp
 1591              		.cfi_def_cfa_offset 16
 1592              		.cfi_offset 6, -16
 1593 1034 4889E5   		movq	%rsp, %rbp
 1594              		.cfi_def_cfa_register 6
 1595 1037 4883EC50 		subq	$80, %rsp
 1596 103b 48897DD8 		movq	%rdi, -40(%rbp)
 1597 103f 488975D0 		movq	%rsi, -48(%rbp)
 1598 1043 488955C8 		movq	%rdx, -56(%rbp)
 1599 1047 894DC4   		movl	%ecx, -60(%rbp)
 1600 104a 4C8945B8 		movq	%r8, -72(%rbp)
 361:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 1601              		.loc 1 361 0
 1602 104e C745E800 		movl	$0, -24(%rbp)
 1602      000000
 362:svf2csvf.c    **** 	BufferStatus bStatus;
 363:svf2csvf.c    **** 	const uint8 *tdiPtr = tdi + count - 1;
 1603              		.loc 1 363 0
 1604 1055 8B45C4   		movl	-60(%rbp), %eax
 1605 1058 488D50FF 		leaq	-1(%rax), %rdx
 1606 105c 488B45D0 		movq	-48(%rbp), %rax
 1607 1060 4801D0   		addq	%rdx, %rax
 1608 1063 488945F0 		movq	%rax, -16(%rbp)
 364:svf2csvf.c    **** 	const uint8 *expPtr = exp + count - 1;
 1609              		.loc 1 364 0
 1610 1067 8B45C4   		movl	-60(%rbp), %eax
 1611 106a 488D50FF 		leaq	-1(%rax), %rdx
 1612 106e 488B45C8 		movq	-56(%rbp), %rax
 1613 1072 4801D0   		addq	%rdx, %rax
 1614 1075 488945F8 		movq	%rax, -8(%rbp)
 365:svf2csvf.c    **** 	while ( count-- ) {
 1615              		.loc 1 365 0
 1616 1079 E9920000 		jmp	.L89
 1616      00
 1617              	.L92:
 366:svf2csvf.c    **** 		bStatus = bufAppendByte(buf, *tdiPtr--, error);
 1618              		.loc 1 366 0
 1619 107e 488B45F0 		movq	-16(%rbp), %rax
 1620 1082 488D50FF 		leaq	-1(%rax), %rdx
 1621 1086 488955F0 		movq	%rdx, -16(%rbp)
 1622 108a 0FB600   		movzbl	(%rax), %eax
 1623 108d 0FB6C8   		movzbl	%al, %ecx
 1624 1090 488B55B8 		movq	-72(%rbp), %rdx
 1625 1094 488B45D8 		movq	-40(%rbp), %rax
 1626 1098 89CE     		movl	%ecx, %esi
 1627 109a 4889C7   		movq	%rax, %rdi
 1628 109d E8000000 		call	bufAppendByte@PLT
 1628      00
 1629 10a2 8945EC   		movl	%eax, -20(%rbp)
 367:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "appendSwapped()");
 1630              		.loc 1 367 0
 1631 10a5 837DEC00 		cmpl	$0, -20(%rbp)
 1632 10a9 741C     		je	.L90
 1633              		.loc 1 367 0 is_stmt 0 discriminator 1
 1634 10ab 488B45B8 		movq	-72(%rbp), %rax
 1635 10af 488D3500 		leaq	.LC8(%rip), %rsi
 1635      000000
 1636 10b6 4889C7   		movq	%rax, %rdi
 1637 10b9 E8000000 		call	errPrefix@PLT
 1637      00
 1638 10be C745E801 		movl	$1, -24(%rbp)
 1638      000000
 1639 10c5 EB5A     		jmp	.L91
 1640              	.L90:
 368:svf2csvf.c    **** 		bStatus = bufAppendByte(buf, *expPtr--, error);
 1641              		.loc 1 368 0 is_stmt 1
 1642 10c7 488B45F8 		movq	-8(%rbp), %rax
 1643 10cb 488D50FF 		leaq	-1(%rax), %rdx
 1644 10cf 488955F8 		movq	%rdx, -8(%rbp)
 1645 10d3 0FB600   		movzbl	(%rax), %eax
 1646 10d6 0FB6C8   		movzbl	%al, %ecx
 1647 10d9 488B55B8 		movq	-72(%rbp), %rdx
 1648 10dd 488B45D8 		movq	-40(%rbp), %rax
 1649 10e1 89CE     		movl	%ecx, %esi
 1650 10e3 4889C7   		movq	%rax, %rdi
 1651 10e6 E8000000 		call	bufAppendByte@PLT
 1651      00
 1652 10eb 8945EC   		movl	%eax, -20(%rbp)
 369:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "appendSwapped()");
 1653              		.loc 1 369 0
 1654 10ee 837DEC00 		cmpl	$0, -20(%rbp)
 1655 10f2 741C     		je	.L89
 1656              		.loc 1 369 0 is_stmt 0 discriminator 1
 1657 10f4 488B45B8 		movq	-72(%rbp), %rax
 1658 10f8 488D3500 		leaq	.LC8(%rip), %rsi
 1658      000000
 1659 10ff 4889C7   		movq	%rax, %rdi
 1660 1102 E8000000 		call	errPrefix@PLT
 1660      00
 1661 1107 C745E801 		movl	$1, -24(%rbp)
 1661      000000
 1662 110e EB11     		jmp	.L91
 1663              	.L89:
 365:svf2csvf.c    **** 		bStatus = bufAppendByte(buf, *tdiPtr--, error);
 1664              		.loc 1 365 0 is_stmt 1
 1665 1110 8B45C4   		movl	-60(%rbp), %eax
 1666 1113 8D50FF   		leal	-1(%rax), %edx
 1667 1116 8955C4   		movl	%edx, -60(%rbp)
 1668 1119 85C0     		testl	%eax, %eax
 1669 111b 0F855DFF 		jne	.L92
 1669      FFFF
 1670              	.L91:
 370:svf2csvf.c    **** 	}
 371:svf2csvf.c    **** cleanup:
 372:svf2csvf.c    **** 	return retVal;
 1671              		.loc 1 372 0
 1672 1121 8B45E8   		movl	-24(%rbp), %eax
 373:svf2csvf.c    **** }
 1673              		.loc 1 373 0
 1674 1124 C9       		leave
 1675              		.cfi_def_cfa 7, 8
 1676 1125 C3       		ret
 1677              		.cfi_endproc
 1678              	.LFE16:
 1681              	appendSwapped:
 1682              	.LFB17:
 374:svf2csvf.c    **** 
 375:svf2csvf.c    **** static FLStatus appendSwapped(
 376:svf2csvf.c    **** 	struct Buffer *buf, const uint8 *src, uint32 count, const char **error)
 377:svf2csvf.c    **** {
 1683              		.loc 1 377 0
 1684              		.cfi_startproc
 1685 1126 55       		pushq	%rbp
 1686              		.cfi_def_cfa_offset 16
 1687              		.cfi_offset 6, -16
 1688 1127 4889E5   		movq	%rsp, %rbp
 1689              		.cfi_def_cfa_register 6
 1690 112a 4883EC30 		subq	$48, %rsp
 1691 112e 48897DE8 		movq	%rdi, -24(%rbp)
 1692 1132 488975E0 		movq	%rsi, -32(%rbp)
 1693 1136 8955DC   		movl	%edx, -36(%rbp)
 1694 1139 48894DD0 		movq	%rcx, -48(%rbp)
 378:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 1695              		.loc 1 378 0
 1696 113d C745F800 		movl	$0, -8(%rbp)
 1696      000000
 379:svf2csvf.c    **** 	BufferStatus bStatus;
 380:svf2csvf.c    **** 	src += count - 1;
 1697              		.loc 1 380 0
 1698 1144 8B45DC   		movl	-36(%rbp), %eax
 1699 1147 83E801   		subl	$1, %eax
 1700 114a 89C0     		movl	%eax, %eax
 1701 114c 480145E0 		addq	%rax, -32(%rbp)
 381:svf2csvf.c    **** 	while ( count-- ) {
 1702              		.loc 1 381 0
 1703 1150 EB49     		jmp	.L95
 1704              	.L97:
 382:svf2csvf.c    **** 		bStatus = bufAppendByte(buf, *src--, error);
 1705              		.loc 1 382 0
 1706 1152 488B45E0 		movq	-32(%rbp), %rax
 1707 1156 488D50FF 		leaq	-1(%rax), %rdx
 1708 115a 488955E0 		movq	%rdx, -32(%rbp)
 1709 115e 0FB600   		movzbl	(%rax), %eax
 1710 1161 0FB6C8   		movzbl	%al, %ecx
 1711 1164 488B55D0 		movq	-48(%rbp), %rdx
 1712 1168 488B45E8 		movq	-24(%rbp), %rax
 1713 116c 89CE     		movl	%ecx, %esi
 1714 116e 4889C7   		movq	%rax, %rdi
 1715 1171 E8000000 		call	bufAppendByte@PLT
 1715      00
 1716 1176 8945FC   		movl	%eax, -4(%rbp)
 383:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "appendSwapped()");
 1717              		.loc 1 383 0
 1718 1179 837DFC00 		cmpl	$0, -4(%rbp)
 1719 117d 741C     		je	.L95
 1720              		.loc 1 383 0 is_stmt 0 discriminator 1
 1721 117f 488B45D0 		movq	-48(%rbp), %rax
 1722 1183 488D3500 		leaq	.LC8(%rip), %rsi
 1722      000000
 1723 118a 4889C7   		movq	%rax, %rdi
 1724 118d E8000000 		call	errPrefix@PLT
 1724      00
 1725 1192 C745F801 		movl	$1, -8(%rbp)
 1725      000000
 1726 1199 EB0D     		jmp	.L96
 1727              	.L95:
 381:svf2csvf.c    **** 	while ( count-- ) {
 1728              		.loc 1 381 0 is_stmt 1
 1729 119b 8B45DC   		movl	-36(%rbp), %eax
 1730 119e 8D50FF   		leal	-1(%rax), %edx
 1731 11a1 8955DC   		movl	%edx, -36(%rbp)
 1732 11a4 85C0     		testl	%eax, %eax
 1733 11a6 75AA     		jne	.L97
 1734              	.L96:
 384:svf2csvf.c    **** 	}
 385:svf2csvf.c    **** cleanup:
 386:svf2csvf.c    **** 	return retVal;
 1735              		.loc 1 386 0
 1736 11a8 8B45F8   		movl	-8(%rbp), %eax
 387:svf2csvf.c    **** }
 1737              		.loc 1 387 0
 1738 11ab C9       		leave
 1739              		.cfi_def_cfa 7, 8
 1740 11ac C3       		ret
 1741              		.cfi_endproc
 1742              	.LFE17:
 1744              		.section	.rodata
 1745              	.LC9:
 1746 00ac 52554E54 		.string	"RUNTEST"
 1746      45535400 
 1747              	.LC10:
 1748 00b4 49444C45 		.string	"IDLE"
 1748      00
 1749              	.LC11:
 1750 00b9 54434B00 		.string	"TCK"
 1751              	.LC12:
 1752 00bd 53454300 		.string	"SEC"
 1753 00c1 00000000 		.align 8
 1753      000000
 1754              	.LC14:
 1755 00c8 70617273 		.string	"parseLine(): RUNTEST must be of the form \"RUNTEST [IDLE] <number> TCK|SEC [<number> TCK|
 1755      654C696E 
 1755      6528293A 
 1755      2052554E 
 1755      54455354 
 1756              	.LC15:
 1757 0136 454E4453 		.string	"ENDSTATE IDLE"
 1757      54415445 
 1757      2049444C 
 1757      4500
 1758              	.LC16:
 1759 0144 70617273 		.string	"parseLine()"
 1759      654C696E 
 1759      65282900 
 1760              	.LC17:
 1761 0150 54444900 		.string	"TDI"
 1762 0154 00000000 		.align 8
 1763              	.LC18:
 1764 0158 70617273 		.string	"parseLine(): %sR must be of the form \"%sR ... TDI (<tdi>)\""
 1764      654C696E 
 1764      6528293A 
 1764      20257352 
 1764      206D7573 
 1765              	.LC19:
 1766 0193 534D4153 		.string	"SMASK"
 1766      4B00
 1767 0199 00000000 		.align 8
 1767      000000
 1768              	.LC20:
 1769 01a0 70617273 		.string	"parseLine(): %sR must be of the form \"%sR ... SMASK (<smask>)\""
 1769      654C696E 
 1769      6528293A 
 1769      20257352 
 1769      206D7573 
 1770              	.LC21:
 1771 01df 54444F00 		.string	"TDO"
 1772 01e3 00000000 		.align 8
 1772      00
 1773              	.LC22:
 1774 01e8 70617273 		.string	"parseLine(): %sR must be of the form \"%sR ... TDO (<tdo>)\""
 1774      654C696E 
 1774      6528293A 
 1774      20257352 
 1774      206D7573 
 1775              	.LC23:
 1776 0223 4D41534B 		.string	"MASK"
 1776      00
 1777              		.align 8
 1778              	.LC24:
 1779 0228 70617273 		.string	"parseLine(): %sR must be of the form \"%sR ... MASK (<mask>)\""
 1779      654C696E 
 1779      6528293A 
 1779      20257352 
 1779      206D7573 
 1780 0265 000000   		.align 8
 1781              	.LC25:
 1782 0268 70617273 		.string	"parseLine(): Junk in [HTS][IR]R line at column %d"
 1782      654C696E 
 1782      6528293A 
 1782      204A756E 
 1782      6B20696E 
 1783 029a 00000000 		.align 8
 1783      0000
 1784              	.LC26:
 1785 02a0 70617273 		.string	"parseLine(): Unrecognised command \"%s\"\n"
 1785      654C696E 
 1785      6528293A 
 1785      20556E72 
 1785      65636F67 
 1786              		.text
 1787              		.globl	parseLine
 1789              	parseLine:
 1790              	.LFB18:
 388:svf2csvf.c    **** 
 389:svf2csvf.c    **** /**
 390:svf2csvf.c    ****  * Parse the supplied SVF line, calling processLine() for shift operations as necessary.
 391:svf2csvf.c    ****  */
 392:svf2csvf.c    **** FLStatus parseLine(
 393:svf2csvf.c    **** 	struct ParseContext *cxt, const struct Buffer *lineBuf, struct Buffer *csvfBuf,
 394:svf2csvf.c    **** 	uint32 *maxBufSize, const char **error)
 395:svf2csvf.c    **** {
 1791              		.loc 1 395 0
 1792              		.cfi_startproc
 1793 11ad 55       		pushq	%rbp
 1794              		.cfi_def_cfa_offset 16
 1795              		.cfi_offset 6, -16
 1796 11ae 4889E5   		movq	%rsp, %rbp
 1797              		.cfi_def_cfa_register 6
 1798 11b1 4881EC30 		subq	$304, %rsp
 1798      010000
 1799 11b8 4889BDF8 		movq	%rdi, -264(%rbp)
 1799      FEFFFF
 1800 11bf 4889B5F0 		movq	%rsi, -272(%rbp)
 1800      FEFFFF
 1801 11c6 488995E8 		movq	%rdx, -280(%rbp)
 1801      FEFFFF
 1802 11cd 48898DE0 		movq	%rcx, -288(%rbp)
 1802      FEFFFF
 1803 11d4 4C8985D8 		movq	%r8, -296(%rbp)
 1803      FEFFFF
 1804              		.loc 1 395 0
 1805 11db 64488B04 		movq	%fs:40, %rax
 1805      25280000 
 1805      00
 1806 11e4 488945F8 		movq	%rax, -8(%rbp)
 1807 11e8 31C0     		xorl	%eax, %eax
 396:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 1808              		.loc 1 396 0
 1809 11ea C78504FF 		movl	$0, -252(%rbp)
 1809      FFFF0000 
 1809      0000
 397:svf2csvf.c    **** 	BufferStatus bStatus;
 398:svf2csvf.c    **** 	char *const line = (char *)lineBuf->data;
 1810              		.loc 1 398 0
 1811 11f4 488B85F0 		movq	-272(%rbp), %rax
 1811      FEFFFF
 1812 11fb 488B00   		movq	(%rax), %rax
 1813 11fe 48898558 		movq	%rax, -168(%rbp)
 1813      FFFFFF
 399:svf2csvf.c    **** 	char *const lineEnd = (char *)lineBuf->data + lineBuf->length - 1;  // Space for NUL-terminator
 1814              		.loc 1 399 0
 1815 1205 488B85F0 		movq	-272(%rbp), %rax
 1815      FEFFFF
 1816 120c 488B10   		movq	(%rax), %rdx
 1817 120f 488B85F0 		movq	-272(%rbp), %rax
 1817      FEFFFF
 1818 1216 488B4008 		movq	8(%rax), %rax
 1819 121a 4883E801 		subq	$1, %rax
 1820 121e 4801D0   		addq	%rdx, %rax
 1821 1221 48898560 		movq	%rax, -160(%rbp)
 1821      FFFFFF
 400:svf2csvf.c    **** 	struct Buffer tmpHead = {0,};
 1822              		.loc 1 400 0
 1823 1228 48C78570 		movq	$0, -144(%rbp)
 1823      FFFFFF00 
 1823      000000
 1824 1233 48C78578 		movq	$0, -136(%rbp)
 1824      FFFFFF00 
 1824      000000
 1825 123e 48C74580 		movq	$0, -128(%rbp)
 1825      00000000 
 1826 1246 48C74588 		movq	$0, -120(%rbp)
 1826      00000000 
 401:svf2csvf.c    **** 	struct Buffer tmpBody1 = {0,};
 1827              		.loc 1 401 0
 1828 124e 48C74590 		movq	$0, -112(%rbp)
 1828      00000000 
 1829 1256 48C74598 		movq	$0, -104(%rbp)
 1829      00000000 
 1830 125e 48C745A0 		movq	$0, -96(%rbp)
 1830      00000000 
 1831 1266 48C745A8 		movq	$0, -88(%rbp)
 1831      00000000 
 402:svf2csvf.c    **** 	struct Buffer tmpBody2 = {0,};
 1832              		.loc 1 402 0
 1833 126e 48C745B0 		movq	$0, -80(%rbp)
 1833      00000000 
 1834 1276 48C745B8 		movq	$0, -72(%rbp)
 1834      00000000 
 1835 127e 48C745C0 		movq	$0, -64(%rbp)
 1835      00000000 
 1836 1286 48C745C8 		movq	$0, -56(%rbp)
 1836      00000000 
 403:svf2csvf.c    **** 	struct Buffer tmpTail = {0,};
 1837              		.loc 1 403 0
 1838 128e 48C745D0 		movq	$0, -48(%rbp)
 1838      00000000 
 1839 1296 48C745D8 		movq	$0, -40(%rbp)
 1839      00000000 
 1840 129e 48C745E0 		movq	$0, -32(%rbp)
 1840      00000000 
 1841 12a6 48C745E8 		movq	$0, -24(%rbp)
 1841      00000000 
 404:svf2csvf.c    **** 	if ( !strncmp(line, "RUNTEST", 7) ) {
 1842              		.loc 1 404 0
 1843 12ae 488B8558 		movq	-168(%rbp), %rax
 1843      FFFFFF
 1844 12b5 BA070000 		movl	$7, %edx
 1844      00
 1845 12ba 488D3500 		leaq	.LC9(%rip), %rsi
 1845      000000
 1846 12c1 4889C7   		movq	%rax, %rdi
 1847 12c4 E8000000 		call	strncmp@PLT
 1847      00
 1848 12c9 85C0     		testl	%eax, %eax
 1849 12cb 0F855504 		jne	.L100
 1849      0000
 1850              	.LBB3:
 405:svf2csvf.c    **** 		// RUNTEST line is of the form "RUNTEST [IDLE] <count> TCK [ENDSTATE IDLE]"
 406:svf2csvf.c    **** 		const char *p = line + 7;
 1851              		.loc 1 406 0
 1852 12d1 488B8558 		movq	-168(%rbp), %rax
 1852      FFFFFF
 1853 12d8 4883C007 		addq	$7, %rax
 1854 12dc 48898520 		movq	%rax, -224(%rbp)
 1854      FFFFFF
 407:svf2csvf.c    **** 		char *end;
 408:svf2csvf.c    **** 		double count1, count2;
 409:svf2csvf.c    **** 		CHOMP();
 1855              		.loc 1 409 0
 1856 12e3 EB08     		jmp	.L101
 1857              	.L102:
 1858              		.loc 1 409 0 is_stmt 0 discriminator 4
 1859 12e5 48838520 		addq	$1, -224(%rbp)
 1859      FFFFFF01 
 1860              	.L101:
 1861              		.loc 1 409 0 discriminator 1
 1862 12ed 488B8520 		movq	-224(%rbp), %rax
 1862      FFFFFF
 1863 12f4 0FB600   		movzbl	(%rax), %eax
 1864 12f7 3C20     		cmpb	$32, %al
 1865 12f9 74EA     		je	.L102
 1866              		.loc 1 409 0 discriminator 3
 1867 12fb 488B8520 		movq	-224(%rbp), %rax
 1867      FFFFFF
 1868 1302 0FB600   		movzbl	(%rax), %eax
 1869 1305 3C09     		cmpb	$9, %al
 1870 1307 74DC     		je	.L102
 410:svf2csvf.c    **** 		if ( !strncmp(p, "IDLE", 4) ) {
 1871              		.loc 1 410 0 is_stmt 1
 1872 1309 488B8520 		movq	-224(%rbp), %rax
 1872      FFFFFF
 1873 1310 BA040000 		movl	$4, %edx
 1873      00
 1874 1315 488D3500 		leaq	.LC10(%rip), %rsi
 1874      000000
 1875 131c 4889C7   		movq	%rax, %rdi
 1876 131f E8000000 		call	strncmp@PLT
 1876      00
 1877 1324 85C0     		testl	%eax, %eax
 1878 1326 752E     		jne	.L103
 411:svf2csvf.c    **** 			p += 4;
 1879              		.loc 1 411 0
 1880 1328 48838520 		addq	$4, -224(%rbp)
 1880      FFFFFF04 
 412:svf2csvf.c    **** 			CHOMP();
 1881              		.loc 1 412 0
 1882 1330 EB08     		jmp	.L104
 1883              	.L105:
 1884              		.loc 1 412 0 is_stmt 0 discriminator 4
 1885 1332 48838520 		addq	$1, -224(%rbp)
 1885      FFFFFF01 
 1886              	.L104:
 1887              		.loc 1 412 0 discriminator 1
 1888 133a 488B8520 		movq	-224(%rbp), %rax
 1888      FFFFFF
 1889 1341 0FB600   		movzbl	(%rax), %eax
 1890 1344 3C20     		cmpb	$32, %al
 1891 1346 74EA     		je	.L105
 1892              		.loc 1 412 0 discriminator 3
 1893 1348 488B8520 		movq	-224(%rbp), %rax
 1893      FFFFFF
 1894 134f 0FB600   		movzbl	(%rax), %eax
 1895 1352 3C09     		cmpb	$9, %al
 1896 1354 74DC     		je	.L105
 1897              	.L103:
 413:svf2csvf.c    **** 		}
 414:svf2csvf.c    **** 		count1 = strtod(p, &end);
 1898              		.loc 1 414 0 is_stmt 1
 1899 1356 488D9518 		leaq	-232(%rbp), %rdx
 1899      FFFFFF
 1900 135d 488B8520 		movq	-224(%rbp), %rax
 1900      FFFFFF
 1901 1364 4889D6   		movq	%rdx, %rsi
 1902 1367 4889C7   		movq	%rax, %rdi
 1903 136a E8000000 		call	strtod@PLT
 1903      00
 1904 136f 66480F7E 		movq	%xmm0, %rax
 1904      C0
 1905 1374 48898528 		movq	%rax, -216(%rbp)
 1905      FFFFFF
 415:svf2csvf.c    **** 		p = end;
 1906              		.loc 1 415 0
 1907 137b 488B8518 		movq	-232(%rbp), %rax
 1907      FFFFFF
 1908 1382 48898520 		movq	%rax, -224(%rbp)
 1908      FFFFFF
 416:svf2csvf.c    **** 		CHOMP();
 1909              		.loc 1 416 0
 1910 1389 EB08     		jmp	.L106
 1911              	.L107:
 1912              		.loc 1 416 0 is_stmt 0 discriminator 4
 1913 138b 48838520 		addq	$1, -224(%rbp)
 1913      FFFFFF01 
 1914              	.L106:
 1915              		.loc 1 416 0 discriminator 1
 1916 1393 488B8520 		movq	-224(%rbp), %rax
 1916      FFFFFF
 1917 139a 0FB600   		movzbl	(%rax), %eax
 1918 139d 3C20     		cmpb	$32, %al
 1919 139f 74EA     		je	.L107
 1920              		.loc 1 416 0 discriminator 3
 1921 13a1 488B8520 		movq	-224(%rbp), %rax
 1921      FFFFFF
 1922 13a8 0FB600   		movzbl	(%rax), %eax
 1923 13ab 3C09     		cmpb	$9, %al
 1924 13ad 74DC     		je	.L107
 417:svf2csvf.c    **** 		if ( !strncmp(p, "TCK", 3) ) {
 1925              		.loc 1 417 0 is_stmt 1
 1926 13af 488B8520 		movq	-224(%rbp), %rax
 1926      FFFFFF
 1927 13b6 BA030000 		movl	$3, %edx
 1927      00
 1928 13bb 488D3500 		leaq	.LC11(%rip), %rsi
 1928      000000
 1929 13c2 4889C7   		movq	%rax, %rdi
 1930 13c5 E8000000 		call	strncmp@PLT
 1930      00
 1931 13ca 85C0     		testl	%eax, %eax
 1932 13cc 7533     		jne	.L108
 418:svf2csvf.c    **** 			p += 3;
 1933              		.loc 1 418 0
 1934 13ce 48838520 		addq	$3, -224(%rbp)
 1934      FFFFFF03 
 419:svf2csvf.c    **** 			CHOMP();
 1935              		.loc 1 419 0
 1936 13d6 EB08     		jmp	.L109
 1937              	.L110:
 1938              		.loc 1 419 0 is_stmt 0 discriminator 4
 1939 13d8 48838520 		addq	$1, -224(%rbp)
 1939      FFFFFF01 
 1940              	.L109:
 1941              		.loc 1 419 0 discriminator 1
 1942 13e0 488B8520 		movq	-224(%rbp), %rax
 1942      FFFFFF
 1943 13e7 0FB600   		movzbl	(%rax), %eax
 1944 13ea 3C20     		cmpb	$32, %al
 1945 13ec 74EA     		je	.L110
 1946              		.loc 1 419 0 discriminator 3
 1947 13ee 488B8520 		movq	-224(%rbp), %rax
 1947      FFFFFF
 1948 13f5 0FB600   		movzbl	(%rax), %eax
 1949 13f8 3C09     		cmpb	$9, %al
 1950 13fa 74DC     		je	.L110
 1951 13fc E9900000 		jmp	.L111
 1951      00
 1952              	.L108:
 420:svf2csvf.c    **** 		} else if ( !strncmp(p, "SEC", 3) ) {
 1953              		.loc 1 420 0 is_stmt 1
 1954 1401 488B8520 		movq	-224(%rbp), %rax
 1954      FFFFFF
 1955 1408 BA030000 		movl	$3, %edx
 1955      00
 1956 140d 488D3500 		leaq	.LC12(%rip), %rsi
 1956      000000
 1957 1414 4889C7   		movq	%rax, %rdi
 1958 1417 E8000000 		call	strncmp@PLT
 1958      00
 1959 141c 85C0     		testl	%eax, %eax
 1960 141e 754C     		jne	.L112
 421:svf2csvf.c    **** 			count1 *= 1000000.0;
 1961              		.loc 1 421 0
 1962 1420 F20F108D 		movsd	-216(%rbp), %xmm1
 1962      28FFFFFF 
 1963 1428 F20F1005 		movsd	.LC13(%rip), %xmm0
 1963      00000000 
 1964 1430 F20F59C1 		mulsd	%xmm1, %xmm0
 1965 1434 F20F1185 		movsd	%xmm0, -216(%rbp)
 1965      28FFFFFF 
 422:svf2csvf.c    **** 			p += 3;
 1966              		.loc 1 422 0
 1967 143c 48838520 		addq	$3, -224(%rbp)
 1967      FFFFFF03 
 423:svf2csvf.c    **** 			CHOMP();
 1968              		.loc 1 423 0
 1969 1444 EB08     		jmp	.L113
 1970              	.L114:
 1971              		.loc 1 423 0 is_stmt 0 discriminator 4
 1972 1446 48838520 		addq	$1, -224(%rbp)
 1972      FFFFFF01 
 1973              	.L113:
 1974              		.loc 1 423 0 discriminator 1
 1975 144e 488B8520 		movq	-224(%rbp), %rax
 1975      FFFFFF
 1976 1455 0FB600   		movzbl	(%rax), %eax
 1977 1458 3C20     		cmpb	$32, %al
 1978 145a 74EA     		je	.L114
 1979              		.loc 1 423 0 discriminator 3
 1980 145c 488B8520 		movq	-224(%rbp), %rax
 1980      FFFFFF
 1981 1463 0FB600   		movzbl	(%rax), %eax
 1982 1466 3C09     		cmpb	$9, %al
 1983 1468 74DC     		je	.L114
 1984 146a EB25     		jmp	.L111
 1985              	.L112:
 424:svf2csvf.c    **** 		} else {
 425:svf2csvf.c    **** 			CHECK_STATUS(
 1986              		.loc 1 425 0 is_stmt 1 discriminator 1
 1987 146c 488B85D8 		movq	-296(%rbp), %rax
 1987      FEFFFF
 1988 1473 488D3500 		leaq	.LC14(%rip), %rsi
 1988      000000
 1989 147a 4889C7   		movq	%rax, %rdi
 1990 147d E8000000 		call	errPrefix@PLT
 1990      00
 1991 1482 C78504FF 		movl	$10, -252(%rbp)
 1991      FFFF0A00 
 1991      0000
 1992 148c E91F1900 		jmp	.L132
 1992      00
 1993              	.L111:
 426:svf2csvf.c    **** 				true, FL_SVF_PARSE_ERR, cleanup,
 427:svf2csvf.c    **** 				"parseLine(): RUNTEST must be of the form \"RUNTEST [IDLE] <number> TCK|SEC [<number> TCK|SEC] 
 428:svf2csvf.c    **** 		}
 429:svf2csvf.c    **** 		count2 = strtod(p, &end);
 1994              		.loc 1 429 0
 1995 1491 488D9518 		leaq	-232(%rbp), %rdx
 1995      FFFFFF
 1996 1498 488B8520 		movq	-224(%rbp), %rax
 1996      FFFFFF
 1997 149f 4889D6   		movq	%rdx, %rsi
 1998 14a2 4889C7   		movq	%rax, %rdi
 1999 14a5 E8000000 		call	strtod@PLT
 1999      00
 2000 14aa 66480F7E 		movq	%xmm0, %rax
 2000      C0
 2001 14af 48898530 		movq	%rax, -208(%rbp)
 2001      FFFFFF
 430:svf2csvf.c    **** 		if ( end != p ) {
 2002              		.loc 1 430 0
 2003 14b6 488B8518 		movq	-232(%rbp), %rax
 2003      FFFFFF
 2004 14bd 483B8520 		cmpq	-224(%rbp), %rax
 2004      FFFFFF
 2005 14c4 0F84EC00 		je	.L116
 2005      0000
 431:svf2csvf.c    **** 			p = end;
 2006              		.loc 1 431 0
 2007 14ca 488B8518 		movq	-232(%rbp), %rax
 2007      FFFFFF
 2008 14d1 48898520 		movq	%rax, -224(%rbp)
 2008      FFFFFF
 432:svf2csvf.c    **** 			CHOMP();
 2009              		.loc 1 432 0
 2010 14d8 EB08     		jmp	.L117
 2011              	.L118:
 2012              		.loc 1 432 0 is_stmt 0 discriminator 4
 2013 14da 48838520 		addq	$1, -224(%rbp)
 2013      FFFFFF01 
 2014              	.L117:
 2015              		.loc 1 432 0 discriminator 1
 2016 14e2 488B8520 		movq	-224(%rbp), %rax
 2016      FFFFFF
 2017 14e9 0FB600   		movzbl	(%rax), %eax
 2018 14ec 3C20     		cmpb	$32, %al
 2019 14ee 74EA     		je	.L118
 2020              		.loc 1 432 0 discriminator 3
 2021 14f0 488B8520 		movq	-224(%rbp), %rax
 2021      FFFFFF
 2022 14f7 0FB600   		movzbl	(%rax), %eax
 2023 14fa 3C09     		cmpb	$9, %al
 2024 14fc 74DC     		je	.L118
 433:svf2csvf.c    **** 			if ( !strncmp(p, "TCK", 3) ) {
 2025              		.loc 1 433 0 is_stmt 1
 2026 14fe 488B8520 		movq	-224(%rbp), %rax
 2026      FFFFFF
 2027 1505 BA030000 		movl	$3, %edx
 2027      00
 2028 150a 488D3500 		leaq	.LC11(%rip), %rsi
 2028      000000
 2029 1511 4889C7   		movq	%rax, %rdi
 2030 1514 E8000000 		call	strncmp@PLT
 2030      00
 2031 1519 85C0     		testl	%eax, %eax
 2032 151b 7530     		jne	.L119
 434:svf2csvf.c    **** 				p += 3;
 2033              		.loc 1 434 0
 2034 151d 48838520 		addq	$3, -224(%rbp)
 2034      FFFFFF03 
 435:svf2csvf.c    **** 				CHOMP();
 2035              		.loc 1 435 0
 2036 1525 EB08     		jmp	.L120
 2037              	.L121:
 2038              		.loc 1 435 0 is_stmt 0 discriminator 4
 2039 1527 48838520 		addq	$1, -224(%rbp)
 2039      FFFFFF01 
 2040              	.L120:
 2041              		.loc 1 435 0 discriminator 1
 2042 152f 488B8520 		movq	-224(%rbp), %rax
 2042      FFFFFF
 2043 1536 0FB600   		movzbl	(%rax), %eax
 2044 1539 3C20     		cmpb	$32, %al
 2045 153b 74EA     		je	.L121
 2046              		.loc 1 435 0 discriminator 3
 2047 153d 488B8520 		movq	-224(%rbp), %rax
 2047      FFFFFF
 2048 1544 0FB600   		movzbl	(%rax), %eax
 2049 1547 3C09     		cmpb	$9, %al
 2050 1549 74DC     		je	.L121
 2051 154b EB69     		jmp	.L116
 2052              	.L119:
 436:svf2csvf.c    **** 			} else if ( !strncmp(p, "SEC", 3) ) {
 2053              		.loc 1 436 0 is_stmt 1
 2054 154d 488B8520 		movq	-224(%rbp), %rax
 2054      FFFFFF
 2055 1554 BA030000 		movl	$3, %edx
 2055      00
 2056 1559 488D3500 		leaq	.LC12(%rip), %rsi
 2056      000000
 2057 1560 4889C7   		movq	%rax, %rdi
 2058 1563 E8000000 		call	strncmp@PLT
 2058      00
 2059 1568 85C0     		testl	%eax, %eax
 2060 156a 754A     		jne	.L116
 437:svf2csvf.c    **** 				count2 *= 1000000.0;
 2061              		.loc 1 437 0
 2062 156c F20F108D 		movsd	-208(%rbp), %xmm1
 2062      30FFFFFF 
 2063 1574 F20F1005 		movsd	.LC13(%rip), %xmm0
 2063      00000000 
 2064 157c F20F59C1 		mulsd	%xmm1, %xmm0
 2065 1580 F20F1185 		movsd	%xmm0, -208(%rbp)
 2065      30FFFFFF 
 438:svf2csvf.c    **** 				p += 3;
 2066              		.loc 1 438 0
 2067 1588 48838520 		addq	$3, -224(%rbp)
 2067      FFFFFF03 
 439:svf2csvf.c    **** 				CHOMP();
 2068              		.loc 1 439 0
 2069 1590 EB08     		jmp	.L122
 2070              	.L123:
 2071              		.loc 1 439 0 is_stmt 0 discriminator 4
 2072 1592 48838520 		addq	$1, -224(%rbp)
 2072      FFFFFF01 
 2073              	.L122:
 2074              		.loc 1 439 0 discriminator 1
 2075 159a 488B8520 		movq	-224(%rbp), %rax
 2075      FFFFFF
 2076 15a1 0FB600   		movzbl	(%rax), %eax
 2077 15a4 3C20     		cmpb	$32, %al
 2078 15a6 74EA     		je	.L123
 2079              		.loc 1 439 0 discriminator 3
 2080 15a8 488B8520 		movq	-224(%rbp), %rax
 2080      FFFFFF
 2081 15af 0FB600   		movzbl	(%rax), %eax
 2082 15b2 3C09     		cmpb	$9, %al
 2083 15b4 74DC     		je	.L123
 2084              	.L116:
 440:svf2csvf.c    **** 			}
 441:svf2csvf.c    **** 		}
 442:svf2csvf.c    **** 		if ( !strncmp(p, "ENDSTATE IDLE", 13) ) {
 2085              		.loc 1 442 0 is_stmt 1
 2086 15b6 488B8520 		movq	-224(%rbp), %rax
 2086      FFFFFF
 2087 15bd BA0D0000 		movl	$13, %edx
 2087      00
 2088 15c2 488D3500 		leaq	.LC15(%rip), %rsi
 2088      000000
 2089 15c9 4889C7   		movq	%rax, %rdi
 2090 15cc E8000000 		call	strncmp@PLT
 2090      00
 2091 15d1 85C0     		testl	%eax, %eax
 2092 15d3 7512     		jne	.L125
 443:svf2csvf.c    **** 			p += 13;
 2093              		.loc 1 443 0
 2094 15d5 48838520 		addq	$13, -224(%rbp)
 2094      FFFFFF0D 
 444:svf2csvf.c    **** 		}
 445:svf2csvf.c    **** 		CHOMP();
 2095              		.loc 1 445 0
 2096 15dd EB08     		jmp	.L125
 2097              	.L126:
 2098              		.loc 1 445 0 is_stmt 0 discriminator 4
 2099 15df 48838520 		addq	$1, -224(%rbp)
 2099      FFFFFF01 
 2100              	.L125:
 2101              		.loc 1 445 0 discriminator 1
 2102 15e7 488B8520 		movq	-224(%rbp), %rax
 2102      FFFFFF
 2103 15ee 0FB600   		movzbl	(%rax), %eax
 2104 15f1 3C20     		cmpb	$32, %al
 2105 15f3 74EA     		je	.L126
 2106              		.loc 1 445 0 discriminator 3
 2107 15f5 488B8520 		movq	-224(%rbp), %rax
 2107      FFFFFF
 2108 15fc 0FB600   		movzbl	(%rax), %eax
 2109 15ff 3C09     		cmpb	$9, %al
 2110 1601 74DC     		je	.L126
 446:svf2csvf.c    **** 		if ( count2 > count1 ) {
 2111              		.loc 1 446 0 is_stmt 1
 2112 1603 F20F1085 		movsd	-208(%rbp), %xmm0
 2112      30FFFFFF 
 2113 160b 660F2E85 		ucomisd	-216(%rbp), %xmm0
 2113      28FFFFFF 
 2114 1613 7610     		jbe	.L127
 447:svf2csvf.c    **** 			count1 = count2;
 2115              		.loc 1 447 0
 2116 1615 F20F1085 		movsd	-208(%rbp), %xmm0
 2116      30FFFFFF 
 2117 161d F20F1185 		movsd	%xmm0, -216(%rbp)
 2117      28FFFFFF 
 2118              	.L127:
 448:svf2csvf.c    **** 		}
 449:svf2csvf.c    **** 		CHECK_STATUS(
 2119              		.loc 1 449 0
 2120 1625 488B8520 		movq	-224(%rbp), %rax
 2120      FFFFFF
 2121 162c 483B8560 		cmpq	-160(%rbp), %rax
 2121      FFFFFF
 2122 1633 7425     		je	.L129
 2123              		.loc 1 449 0 is_stmt 0 discriminator 1
 2124 1635 488B85D8 		movq	-296(%rbp), %rax
 2124      FEFFFF
 2125 163c 488D3500 		leaq	.LC14(%rip), %rsi
 2125      000000
 2126 1643 4889C7   		movq	%rax, %rdi
 2127 1646 E8000000 		call	errPrefix@PLT
 2127      00
 2128 164b C78504FF 		movl	$10, -252(%rbp)
 2128      FFFF0A00 
 2128      0000
 2129 1655 E9561700 		jmp	.L132
 2129      00
 2130              	.L129:
 450:svf2csvf.c    **** 			p != lineEnd, FL_SVF_PARSE_ERR, cleanup,
 451:svf2csvf.c    **** 			"parseLine(): RUNTEST must be of the form \"RUNTEST [IDLE] <number> TCK|SEC [<number> TCK|SEC] [
 452:svf2csvf.c    **** 		cxt->numCommands++;
 2131              		.loc 1 452 0 is_stmt 1
 2132 165a 488B85F8 		movq	-264(%rbp), %rax
 2132      FEFFFF
 2133 1661 8B809C02 		movl	668(%rax), %eax
 2133      0000
 2134 1667 8D5001   		leal	1(%rax), %edx
 2135 166a 488B85F8 		movq	-264(%rbp), %rax
 2135      FEFFFF
 2136 1671 89909C02 		movl	%edx, 668(%rax)
 2136      0000
 453:svf2csvf.c    **** 		bStatus = bufAppendByte(csvfBuf, XRUNTEST, error);
 2137              		.loc 1 453 0
 2138 1677 488B95D8 		movq	-296(%rbp), %rdx
 2138      FEFFFF
 2139 167e 488B85E8 		movq	-280(%rbp), %rax
 2139      FEFFFF
 2140 1685 BE040000 		movl	$4, %esi
 2140      00
 2141 168a 4889C7   		movq	%rax, %rdi
 2142 168d E8000000 		call	bufAppendByte@PLT
 2142      00
 2143 1692 89850CFF 		movl	%eax, -244(%rbp)
 2143      FFFF
 454:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2144              		.loc 1 454 0
 2145 1698 83BD0CFF 		cmpl	$0, -244(%rbp)
 2145      FFFF00
 2146 169f 7425     		je	.L130
 2147              		.loc 1 454 0 is_stmt 0 discriminator 1
 2148 16a1 488B85D8 		movq	-296(%rbp), %rax
 2148      FEFFFF
 2149 16a8 488D3500 		leaq	.LC16(%rip), %rsi
 2149      000000
 2150 16af 4889C7   		movq	%rax, %rdi
 2151 16b2 E8000000 		call	errPrefix@PLT
 2151      00
 2152 16b7 C78504FF 		movl	$1, -252(%rbp)
 2152      FFFF0100 
 2152      0000
 2153 16c1 E9EA1600 		jmp	.L132
 2153      00
 2154              	.L130:
 455:svf2csvf.c    **** 		bStatus = bufAppendLongBE(csvfBuf, (uint32)count1, error);
 2155              		.loc 1 455 0 is_stmt 1
 2156 16c6 F20F1085 		movsd	-216(%rbp), %xmm0
 2156      28FFFFFF 
 2157 16ce F2480F2C 		cvttsd2siq	%xmm0, %rax
 2157      C0
 2158 16d3 89C1     		movl	%eax, %ecx
 2159 16d5 488B95D8 		movq	-296(%rbp), %rdx
 2159      FEFFFF
 2160 16dc 488B85E8 		movq	-280(%rbp), %rax
 2160      FEFFFF
 2161 16e3 89CE     		movl	%ecx, %esi
 2162 16e5 4889C7   		movq	%rax, %rdi
 2163 16e8 E8000000 		call	bufAppendLongBE@PLT
 2163      00
 2164 16ed 89850CFF 		movl	%eax, -244(%rbp)
 2164      FFFF
 456:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2165              		.loc 1 456 0
 2166 16f3 83BD0CFF 		cmpl	$0, -244(%rbp)
 2166      FFFF00
 2167 16fa 0F84B016 		je	.L132
 2167      0000
 2168              		.loc 1 456 0 is_stmt 0 discriminator 1
 2169 1700 488B85D8 		movq	-296(%rbp), %rax
 2169      FEFFFF
 2170 1707 488D3500 		leaq	.LC16(%rip), %rsi
 2170      000000
 2171 170e 4889C7   		movq	%rax, %rdi
 2172 1711 E8000000 		call	errPrefix@PLT
 2172      00
 2173 1716 C78504FF 		movl	$1, -252(%rbp)
 2173      FFFF0100 
 2173      0000
 2174 1720 90       		nop
 2175 1721 E98A1600 		jmp	.L132
 2175      00
 2176              	.L100:
 2177              	.LBE3:
 457:svf2csvf.c    **** 	} else if (
 458:svf2csvf.c    **** 		(line[0] == 'H' || line[0] == 'S' || line[0] == 'T') &&
 2178              		.loc 1 458 0 is_stmt 1
 2179 1726 488B8558 		movq	-168(%rbp), %rax
 2179      FFFFFF
 2180 172d 0FB600   		movzbl	(%rax), %eax
 457:svf2csvf.c    **** 	} else if (
 2181              		.loc 1 457 0
 2182 1730 3C48     		cmpb	$72, %al
 2183 1732 7420     		je	.L133
 2184              		.loc 1 458 0
 2185 1734 488B8558 		movq	-168(%rbp), %rax
 2185      FFFFFF
 2186 173b 0FB600   		movzbl	(%rax), %eax
 2187 173e 3C53     		cmpb	$83, %al
 2188 1740 7412     		je	.L133
 2189              		.loc 1 458 0 is_stmt 0 discriminator 2
 2190 1742 488B8558 		movq	-168(%rbp), %rax
 2190      FFFFFF
 2191 1749 0FB600   		movzbl	(%rax), %eax
 2192 174c 3C54     		cmpb	$84, %al
 2193 174e 0F852F16 		jne	.L134
 2193      0000
 2194              	.L133:
 459:svf2csvf.c    **** 		(line[1] == 'I' || line[1] == 'D') &&
 2195              		.loc 1 459 0 is_stmt 1 discriminator 3
 2196 1754 488B8558 		movq	-168(%rbp), %rax
 2196      FFFFFF
 2197 175b 4883C001 		addq	$1, %rax
 2198 175f 0FB600   		movzbl	(%rax), %eax
 458:svf2csvf.c    **** 		(line[1] == 'I' || line[1] == 'D') &&
 2199              		.loc 1 458 0 discriminator 3
 2200 1762 3C49     		cmpb	$73, %al
 2201 1764 7416     		je	.L135
 2202              		.loc 1 459 0
 2203 1766 488B8558 		movq	-168(%rbp), %rax
 2203      FFFFFF
 2204 176d 4883C001 		addq	$1, %rax
 2205 1771 0FB600   		movzbl	(%rax), %eax
 2206 1774 3C44     		cmpb	$68, %al
 2207 1776 0F850716 		jne	.L134
 2207      0000
 2208              	.L135:
 460:svf2csvf.c    **** 		line[2] == 'R' && (line[3] == ' ' || line[3] == '\t')
 2209              		.loc 1 460 0 discriminator 1
 2210 177c 488B8558 		movq	-168(%rbp), %rax
 2210      FFFFFF
 2211 1783 4883C002 		addq	$2, %rax
 2212 1787 0FB600   		movzbl	(%rax), %eax
 459:svf2csvf.c    **** 		(line[1] == 'I' || line[1] == 'D') &&
 2213              		.loc 1 459 0 discriminator 1
 2214 178a 3C52     		cmpb	$82, %al
 2215 178c 0F85F115 		jne	.L134
 2215      0000
 2216              		.loc 1 460 0
 2217 1792 488B8558 		movq	-168(%rbp), %rax
 2217      FFFFFF
 2218 1799 4883C003 		addq	$3, %rax
 2219 179d 0FB600   		movzbl	(%rax), %eax
 2220 17a0 3C20     		cmpb	$32, %al
 2221 17a2 7416     		je	.L136
 2222              		.loc 1 460 0 is_stmt 0 discriminator 1
 2223 17a4 488B8558 		movq	-168(%rbp), %rax
 2223      FFFFFF
 2224 17ab 4883C003 		addq	$3, %rax
 2225 17af 0FB600   		movzbl	(%rax), %eax
 2226 17b2 3C09     		cmpb	$9, %al
 2227 17b4 0F85C915 		jne	.L134
 2227      0000
 2228              	.L136:
 2229              	.LBB4:
 461:svf2csvf.c    **** 	) {
 462:svf2csvf.c    **** 		// HIR/HDR, TIR/TDR, SIR/SDR are of the form "**R <length> [TDI (<tdi>)] [TDO (<tdo>)] [MASK (<ma
 463:svf2csvf.c    **** 		char *p = line + 3;
 2230              		.loc 1 463 0 is_stmt 1
 2231 17ba 488B8558 		movq	-168(%rbp), %rax
 2231      FFFFFF
 2232 17c1 4883C003 		addq	$3, %rax
 2233 17c5 48898538 		movq	%rax, -200(%rbp)
 2233      FFFFFF
 464:svf2csvf.c    **** 		char *tmp;
 465:svf2csvf.c    **** 		const char *tdi = NULL, *tdo =  NULL, *mask = NULL, *smask = NULL;
 2234              		.loc 1 465 0
 2235 17cc 48C78540 		movq	$0, -192(%rbp)
 2235      FFFFFF00 
 2235      000000
 2236 17d7 48C78548 		movq	$0, -184(%rbp)
 2236      FFFFFF00 
 2236      000000
 2237 17e2 48C78550 		movq	$0, -176(%rbp)
 2237      FFFFFF00 
 2237      000000
 2238 17ed 48C78568 		movq	$0, -152(%rbp)
 2238      FFFFFF00 
 2238      000000
 466:svf2csvf.c    **** 		uint32 length;
 467:svf2csvf.c    **** 		const bool isDataReg = (line[1] == 'D');
 2239              		.loc 1 467 0
 2240 17f8 488B8558 		movq	-168(%rbp), %rax
 2240      FFFFFF
 2241 17ff 4883C001 		addq	$1, %rax
 2242 1803 0FB600   		movzbl	(%rax), %eax
 2243 1806 3C44     		cmpb	$68, %al
 2244 1808 0F94C0   		sete	%al
 2245 180b 888502FF 		movb	%al, -254(%rbp)
 2245      FFFF
 468:svf2csvf.c    **** 		ShiftOperation op;
 469:svf2csvf.c    **** 		line[2] = '\0';
 2246              		.loc 1 469 0
 2247 1811 488B8558 		movq	-168(%rbp), %rax
 2247      FFFFFF
 2248 1818 4883C002 		addq	$2, %rax
 2249 181c C60000   		movb	$0, (%rax)
 470:svf2csvf.c    **** 		switch ( line[0] ) {
 2250              		.loc 1 470 0
 2251 181f 488B8558 		movq	-168(%rbp), %rax
 2251      FFFFFF
 2252 1826 0FB600   		movzbl	(%rax), %eax
 2253 1829 0FBEC0   		movsbl	%al, %eax
 2254 182c 83F848   		cmpl	$72, %eax
 2255 182f 7407     		je	.L138
 2256 1831 83F854   		cmpl	$84, %eax
 2257 1834 740E     		je	.L139
 2258 1836 EB18     		jmp	.L234
 2259              	.L138:
 471:svf2csvf.c    **** 		case 'H':
 472:svf2csvf.c    **** 			op = HEAD;
 2260              		.loc 1 472 0
 2261 1838 C78508FF 		movl	$72, -248(%rbp)
 2261      FFFF4800 
 2261      0000
 473:svf2csvf.c    **** 			break;
 2262              		.loc 1 473 0
 2263 1842 EB17     		jmp	.L140
 2264              	.L139:
 474:svf2csvf.c    **** 		case 'T':
 475:svf2csvf.c    **** 			op = TAIL;
 2265              		.loc 1 475 0
 2266 1844 C78508FF 		movl	$84, -248(%rbp)
 2266      FFFF5400 
 2266      0000
 476:svf2csvf.c    **** 			break;
 2267              		.loc 1 476 0
 2268 184e EB0B     		jmp	.L140
 2269              	.L234:
 477:svf2csvf.c    **** 		default:
 478:svf2csvf.c    **** 			op = BODY;
 2270              		.loc 1 478 0
 2271 1850 C78508FF 		movl	$83, -248(%rbp)
 2271      FFFF5300 
 2271      0000
 479:svf2csvf.c    **** 			break;
 2272              		.loc 1 479 0
 2273 185a 90       		nop
 2274              	.L140:
 480:svf2csvf.c    **** 		}
 481:svf2csvf.c    **** 		CHOMP();
 2275              		.loc 1 481 0
 2276 185b EB08     		jmp	.L141
 2277              	.L142:
 2278              		.loc 1 481 0 is_stmt 0 discriminator 4
 2279 185d 48838538 		addq	$1, -200(%rbp)
 2279      FFFFFF01 
 2280              	.L141:
 2281              		.loc 1 481 0 discriminator 1
 2282 1865 488B8538 		movq	-200(%rbp), %rax
 2282      FFFFFF
 2283 186c 0FB600   		movzbl	(%rax), %eax
 2284 186f 3C20     		cmpb	$32, %al
 2285 1871 74EA     		je	.L142
 2286              		.loc 1 481 0 discriminator 3
 2287 1873 488B8538 		movq	-200(%rbp), %rax
 2287      FFFFFF
 2288 187a 0FB600   		movzbl	(%rax), %eax
 2289 187d 3C09     		cmpb	$9, %al
 2290 187f 74DC     		je	.L142
 482:svf2csvf.c    **** 		length = (uint32)strtoul(p, &tmp, 10);
 2291              		.loc 1 482 0 is_stmt 1
 2292 1881 488D8D18 		leaq	-232(%rbp), %rcx
 2292      FFFFFF
 2293 1888 488B8538 		movq	-200(%rbp), %rax
 2293      FFFFFF
 2294 188f BA0A0000 		movl	$10, %edx
 2294      00
 2295 1894 4889CE   		movq	%rcx, %rsi
 2296 1897 4889C7   		movq	%rax, %rdi
 2297 189a E8000000 		call	strtoul@PLT
 2297      00
 2298 189f 898510FF 		movl	%eax, -240(%rbp)
 2298      FFFF
 483:svf2csvf.c    **** 		p = tmp;
 2299              		.loc 1 483 0
 2300 18a5 488B8518 		movq	-232(%rbp), %rax
 2300      FFFFFF
 2301 18ac 48898538 		movq	%rax, -200(%rbp)
 2301      FFFFFF
 484:svf2csvf.c    **** 		CHOMP();
 2302              		.loc 1 484 0
 2303 18b3 EB08     		jmp	.L143
 2304              	.L144:
 2305              		.loc 1 484 0 is_stmt 0 discriminator 4
 2306 18b5 48838538 		addq	$1, -200(%rbp)
 2306      FFFFFF01 
 2307              	.L143:
 2308              		.loc 1 484 0 discriminator 1
 2309 18bd 488B8538 		movq	-200(%rbp), %rax
 2309      FFFFFF
 2310 18c4 0FB600   		movzbl	(%rax), %eax
 2311 18c7 3C20     		cmpb	$32, %al
 2312 18c9 74EA     		je	.L144
 2313              		.loc 1 484 0 discriminator 3
 2314 18cb 488B8538 		movq	-200(%rbp), %rax
 2314      FFFFFF
 2315 18d2 0FB600   		movzbl	(%rax), %eax
 2316 18d5 3C09     		cmpb	$9, %al
 2317 18d7 74DC     		je	.L144
 485:svf2csvf.c    **** 		while ( *p ) {
 2318              		.loc 1 485 0 is_stmt 1
 2319 18d9 E9180600 		jmp	.L145
 2319      00
 2320              	.L186:
 486:svf2csvf.c    **** 			if ( !strncmp(p, "TDI", 3) ) {
 2321              		.loc 1 486 0
 2322 18de 488B8538 		movq	-200(%rbp), %rax
 2322      FFFFFF
 2323 18e5 BA030000 		movl	$3, %edx
 2323      00
 2324 18ea 488D3500 		leaq	.LC17(%rip), %rsi
 2324      000000
 2325 18f1 4889C7   		movq	%rax, %rdi
 2326 18f4 E8000000 		call	strncmp@PLT
 2326      00
 2327 18f9 85C0     		testl	%eax, %eax
 2328 18fb 0F854D01 		jne	.L146
 2328      0000
 487:svf2csvf.c    **** 				p += 3;
 2329              		.loc 1 487 0
 2330 1901 48838538 		addq	$3, -200(%rbp)
 2330      FFFFFF03 
 488:svf2csvf.c    **** 				CHOMP();
 2331              		.loc 1 488 0
 2332 1909 EB08     		jmp	.L147
 2333              	.L148:
 2334              		.loc 1 488 0 is_stmt 0 discriminator 4
 2335 190b 48838538 		addq	$1, -200(%rbp)
 2335      FFFFFF01 
 2336              	.L147:
 2337              		.loc 1 488 0 discriminator 1
 2338 1913 488B8538 		movq	-200(%rbp), %rax
 2338      FFFFFF
 2339 191a 0FB600   		movzbl	(%rax), %eax
 2340 191d 3C20     		cmpb	$32, %al
 2341 191f 74EA     		je	.L148
 2342              		.loc 1 488 0 discriminator 3
 2343 1921 488B8538 		movq	-200(%rbp), %rax
 2343      FFFFFF
 2344 1928 0FB600   		movzbl	(%rax), %eax
 2345 192b 3C09     		cmpb	$9, %al
 2346 192d 74DC     		je	.L148
 489:svf2csvf.c    **** 				#define EXPECT_CHAR(x, y) \
 490:svf2csvf.c    **** 					CHECK_STATUS( \
 491:svf2csvf.c    **** 						*p != x, FL_SVF_PARSE_ERR, cleanup, \
 492:svf2csvf.c    **** 						"parseLine(): %sR must be of the form \"%sR ... " y "\"", line, line);
 493:svf2csvf.c    **** 				#define FIX_ODD(x) \
 494:svf2csvf.c    **** 					if ( strlen(x) & 1 ) { \
 495:svf2csvf.c    **** 						x--; \
 496:svf2csvf.c    **** 					}
 497:svf2csvf.c    **** 				EXPECT_CHAR('(', "TDI (<tdi>)");
 2347              		.loc 1 497 0 is_stmt 1
 2348 192f 488B8538 		movq	-200(%rbp), %rax
 2348      FFFFFF
 2349 1936 0FB600   		movzbl	(%rax), %eax
 2350 1939 3C28     		cmpb	$40, %al
 2351 193b 7438     		je	.L149
 2352              		.loc 1 497 0 is_stmt 0 discriminator 1
 2353 193d 488B8D58 		movq	-168(%rbp), %rcx
 2353      FFFFFF
 2354 1944 488B9558 		movq	-168(%rbp), %rdx
 2354      FFFFFF
 2355 194b 488B85D8 		movq	-296(%rbp), %rax
 2355      FEFFFF
 2356 1952 488D3500 		leaq	.LC18(%rip), %rsi
 2356      000000
 2357 1959 4889C7   		movq	%rax, %rdi
 2358 195c B8000000 		movl	$0, %eax
 2358      00
 2359 1961 E8000000 		call	errRender@PLT
 2359      00
 2360 1966 C78504FF 		movl	$10, -252(%rbp)
 2360      FFFF0A00 
 2360      0000
 2361 1970 E93B1400 		jmp	.L132
 2361      00
 2362              	.L149:
 498:svf2csvf.c    **** 				*p++ = '0';
 2363              		.loc 1 498 0 is_stmt 1
 2364 1975 488B8538 		movq	-200(%rbp), %rax
 2364      FFFFFF
 2365 197c 488D5001 		leaq	1(%rax), %rdx
 2366 1980 48899538 		movq	%rdx, -200(%rbp)
 2366      FFFFFF
 2367 1987 C60030   		movb	$48, (%rax)
 499:svf2csvf.c    **** 				tdi = p++;
 2368              		.loc 1 499 0
 2369 198a 488B8538 		movq	-200(%rbp), %rax
 2369      FFFFFF
 2370 1991 488D5001 		leaq	1(%rax), %rdx
 2371 1995 48899538 		movq	%rdx, -200(%rbp)
 2371      FFFFFF
 2372 199c 48898540 		movq	%rax, -192(%rbp)
 2372      FFFFFF
 500:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2373              		.loc 1 500 0
 2374 19a3 EB08     		jmp	.L151
 2375              	.L153:
 501:svf2csvf.c    **** 					p++;
 2376              		.loc 1 501 0
 2377 19a5 48838538 		addq	$1, -200(%rbp)
 2377      FFFFFF01 
 2378              	.L151:
 500:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2379              		.loc 1 500 0
 2380 19ad 488B8538 		movq	-200(%rbp), %rax
 2380      FFFFFF
 2381 19b4 483B8560 		cmpq	-160(%rbp), %rax
 2381      FFFFFF
 2382 19bb 730E     		jnb	.L152
 500:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2383              		.loc 1 500 0 is_stmt 0 discriminator 1
 2384 19bd 488B8538 		movq	-200(%rbp), %rax
 2384      FFFFFF
 2385 19c4 0FB600   		movzbl	(%rax), %eax
 2386 19c7 3C29     		cmpb	$41, %al
 2387 19c9 75DA     		jne	.L153
 2388              	.L152:
 502:svf2csvf.c    **** 				}
 503:svf2csvf.c    **** 				EXPECT_CHAR(')', "TDI (<tdi>)");
 2389              		.loc 1 503 0 is_stmt 1
 2390 19cb 488B8538 		movq	-200(%rbp), %rax
 2390      FFFFFF
 2391 19d2 0FB600   		movzbl	(%rax), %eax
 2392 19d5 3C29     		cmpb	$41, %al
 2393 19d7 7438     		je	.L154
 2394              		.loc 1 503 0 is_stmt 0 discriminator 1
 2395 19d9 488B8D58 		movq	-168(%rbp), %rcx
 2395      FFFFFF
 2396 19e0 488B9558 		movq	-168(%rbp), %rdx
 2396      FFFFFF
 2397 19e7 488B85D8 		movq	-296(%rbp), %rax
 2397      FEFFFF
 2398 19ee 488D3500 		leaq	.LC18(%rip), %rsi
 2398      000000
 2399 19f5 4889C7   		movq	%rax, %rdi
 2400 19f8 B8000000 		movl	$0, %eax
 2400      00
 2401 19fd E8000000 		call	errRender@PLT
 2401      00
 2402 1a02 C78504FF 		movl	$10, -252(%rbp)
 2402      FFFF0A00 
 2402      0000
 2403 1a0c E99F1300 		jmp	.L132
 2403      00
 2404              	.L154:
 504:svf2csvf.c    **** 				*p++ = '\0';
 2405              		.loc 1 504 0 is_stmt 1
 2406 1a11 488B8538 		movq	-200(%rbp), %rax
 2406      FFFFFF
 2407 1a18 488D5001 		leaq	1(%rax), %rdx
 2408 1a1c 48899538 		movq	%rdx, -200(%rbp)
 2408      FFFFFF
 2409 1a23 C60000   		movb	$0, (%rax)
 505:svf2csvf.c    **** 				FIX_ODD(tdi);
 2410              		.loc 1 505 0
 2411 1a26 488B8540 		movq	-192(%rbp), %rax
 2411      FFFFFF
 2412 1a2d 4889C7   		movq	%rax, %rdi
 2413 1a30 E8000000 		call	strlen@PLT
 2413      00
 2414 1a35 83E001   		andl	$1, %eax
 2415 1a38 4885C0   		testq	%rax, %rax
 2416 1a3b 0F849904 		je	.L184
 2416      0000
 2417              		.loc 1 505 0 is_stmt 0 discriminator 1
 2418 1a41 4883AD40 		subq	$1, -192(%rbp)
 2418      FFFFFF01 
 2419 1a49 E98C0400 		jmp	.L184
 2419      00
 2420              	.L146:
 506:svf2csvf.c    **** 			} else if ( !strncmp(p, "SMASK", 5) ) {
 2421              		.loc 1 506 0 is_stmt 1
 2422 1a4e 488B8538 		movq	-200(%rbp), %rax
 2422      FFFFFF
 2423 1a55 BA050000 		movl	$5, %edx
 2423      00
 2424 1a5a 488D3500 		leaq	.LC19(%rip), %rsi
 2424      000000
 2425 1a61 4889C7   		movq	%rax, %rdi
 2426 1a64 E8000000 		call	strncmp@PLT
 2426      00
 2427 1a69 85C0     		testl	%eax, %eax
 2428 1a6b 0F854D01 		jne	.L157
 2428      0000
 507:svf2csvf.c    **** 				p += 5;
 2429              		.loc 1 507 0
 2430 1a71 48838538 		addq	$5, -200(%rbp)
 2430      FFFFFF05 
 508:svf2csvf.c    **** 				CHOMP();
 2431              		.loc 1 508 0
 2432 1a79 EB08     		jmp	.L158
 2433              	.L159:
 2434              		.loc 1 508 0 is_stmt 0 discriminator 4
 2435 1a7b 48838538 		addq	$1, -200(%rbp)
 2435      FFFFFF01 
 2436              	.L158:
 2437              		.loc 1 508 0 discriminator 1
 2438 1a83 488B8538 		movq	-200(%rbp), %rax
 2438      FFFFFF
 2439 1a8a 0FB600   		movzbl	(%rax), %eax
 2440 1a8d 3C20     		cmpb	$32, %al
 2441 1a8f 74EA     		je	.L159
 2442              		.loc 1 508 0 discriminator 3
 2443 1a91 488B8538 		movq	-200(%rbp), %rax
 2443      FFFFFF
 2444 1a98 0FB600   		movzbl	(%rax), %eax
 2445 1a9b 3C09     		cmpb	$9, %al
 2446 1a9d 74DC     		je	.L159
 509:svf2csvf.c    **** 				EXPECT_CHAR('(', "SMASK (<smask>)");
 2447              		.loc 1 509 0 is_stmt 1
 2448 1a9f 488B8538 		movq	-200(%rbp), %rax
 2448      FFFFFF
 2449 1aa6 0FB600   		movzbl	(%rax), %eax
 2450 1aa9 3C28     		cmpb	$40, %al
 2451 1aab 7438     		je	.L160
 2452              		.loc 1 509 0 is_stmt 0 discriminator 1
 2453 1aad 488B8D58 		movq	-168(%rbp), %rcx
 2453      FFFFFF
 2454 1ab4 488B9558 		movq	-168(%rbp), %rdx
 2454      FFFFFF
 2455 1abb 488B85D8 		movq	-296(%rbp), %rax
 2455      FEFFFF
 2456 1ac2 488D3500 		leaq	.LC20(%rip), %rsi
 2456      000000
 2457 1ac9 4889C7   		movq	%rax, %rdi
 2458 1acc B8000000 		movl	$0, %eax
 2458      00
 2459 1ad1 E8000000 		call	errRender@PLT
 2459      00
 2460 1ad6 C78504FF 		movl	$10, -252(%rbp)
 2460      FFFF0A00 
 2460      0000
 2461 1ae0 E9CB1200 		jmp	.L132
 2461      00
 2462              	.L160:
 510:svf2csvf.c    **** 				*p++ = '0';
 2463              		.loc 1 510 0 is_stmt 1
 2464 1ae5 488B8538 		movq	-200(%rbp), %rax
 2464      FFFFFF
 2465 1aec 488D5001 		leaq	1(%rax), %rdx
 2466 1af0 48899538 		movq	%rdx, -200(%rbp)
 2466      FFFFFF
 2467 1af7 C60030   		movb	$48, (%rax)
 511:svf2csvf.c    **** 				smask = p++;
 2468              		.loc 1 511 0
 2469 1afa 488B8538 		movq	-200(%rbp), %rax
 2469      FFFFFF
 2470 1b01 488D5001 		leaq	1(%rax), %rdx
 2471 1b05 48899538 		movq	%rdx, -200(%rbp)
 2471      FFFFFF
 2472 1b0c 48898568 		movq	%rax, -152(%rbp)
 2472      FFFFFF
 512:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2473              		.loc 1 512 0
 2474 1b13 EB08     		jmp	.L161
 2475              	.L163:
 513:svf2csvf.c    **** 					p++;
 2476              		.loc 1 513 0
 2477 1b15 48838538 		addq	$1, -200(%rbp)
 2477      FFFFFF01 
 2478              	.L161:
 512:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2479              		.loc 1 512 0
 2480 1b1d 488B8538 		movq	-200(%rbp), %rax
 2480      FFFFFF
 2481 1b24 483B8560 		cmpq	-160(%rbp), %rax
 2481      FFFFFF
 2482 1b2b 730E     		jnb	.L162
 512:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2483              		.loc 1 512 0 is_stmt 0 discriminator 1
 2484 1b2d 488B8538 		movq	-200(%rbp), %rax
 2484      FFFFFF
 2485 1b34 0FB600   		movzbl	(%rax), %eax
 2486 1b37 3C29     		cmpb	$41, %al
 2487 1b39 75DA     		jne	.L163
 2488              	.L162:
 514:svf2csvf.c    **** 				}
 515:svf2csvf.c    **** 				EXPECT_CHAR(')', "SMASK (<smask>)");
 2489              		.loc 1 515 0 is_stmt 1
 2490 1b3b 488B8538 		movq	-200(%rbp), %rax
 2490      FFFFFF
 2491 1b42 0FB600   		movzbl	(%rax), %eax
 2492 1b45 3C29     		cmpb	$41, %al
 2493 1b47 7438     		je	.L164
 2494              		.loc 1 515 0 is_stmt 0 discriminator 1
 2495 1b49 488B8D58 		movq	-168(%rbp), %rcx
 2495      FFFFFF
 2496 1b50 488B9558 		movq	-168(%rbp), %rdx
 2496      FFFFFF
 2497 1b57 488B85D8 		movq	-296(%rbp), %rax
 2497      FEFFFF
 2498 1b5e 488D3500 		leaq	.LC20(%rip), %rsi
 2498      000000
 2499 1b65 4889C7   		movq	%rax, %rdi
 2500 1b68 B8000000 		movl	$0, %eax
 2500      00
 2501 1b6d E8000000 		call	errRender@PLT
 2501      00
 2502 1b72 C78504FF 		movl	$10, -252(%rbp)
 2502      FFFF0A00 
 2502      0000
 2503 1b7c E92F1200 		jmp	.L132
 2503      00
 2504              	.L164:
 516:svf2csvf.c    **** 				*p++ = '\0';
 2505              		.loc 1 516 0 is_stmt 1
 2506 1b81 488B8538 		movq	-200(%rbp), %rax
 2506      FFFFFF
 2507 1b88 488D5001 		leaq	1(%rax), %rdx
 2508 1b8c 48899538 		movq	%rdx, -200(%rbp)
 2508      FFFFFF
 2509 1b93 C60000   		movb	$0, (%rax)
 517:svf2csvf.c    **** 				FIX_ODD(smask);
 2510              		.loc 1 517 0
 2511 1b96 488B8568 		movq	-152(%rbp), %rax
 2511      FFFFFF
 2512 1b9d 4889C7   		movq	%rax, %rdi
 2513 1ba0 E8000000 		call	strlen@PLT
 2513      00
 2514 1ba5 83E001   		andl	$1, %eax
 2515 1ba8 4885C0   		testq	%rax, %rax
 2516 1bab 0F842903 		je	.L184
 2516      0000
 2517              		.loc 1 517 0 is_stmt 0 discriminator 1
 2518 1bb1 4883AD68 		subq	$1, -152(%rbp)
 2518      FFFFFF01 
 2519 1bb9 E91C0300 		jmp	.L184
 2519      00
 2520              	.L157:
 518:svf2csvf.c    **** 			} else if ( !strncmp(p, "TDO", 3) ) {
 2521              		.loc 1 518 0 is_stmt 1
 2522 1bbe 488B8538 		movq	-200(%rbp), %rax
 2522      FFFFFF
 2523 1bc5 BA030000 		movl	$3, %edx
 2523      00
 2524 1bca 488D3500 		leaq	.LC21(%rip), %rsi
 2524      000000
 2525 1bd1 4889C7   		movq	%rax, %rdi
 2526 1bd4 E8000000 		call	strncmp@PLT
 2526      00
 2527 1bd9 85C0     		testl	%eax, %eax
 2528 1bdb 0F854D01 		jne	.L166
 2528      0000
 519:svf2csvf.c    **** 				p += 3;
 2529              		.loc 1 519 0
 2530 1be1 48838538 		addq	$3, -200(%rbp)
 2530      FFFFFF03 
 520:svf2csvf.c    **** 				CHOMP();
 2531              		.loc 1 520 0
 2532 1be9 EB08     		jmp	.L167
 2533              	.L168:
 2534              		.loc 1 520 0 is_stmt 0 discriminator 4
 2535 1beb 48838538 		addq	$1, -200(%rbp)
 2535      FFFFFF01 
 2536              	.L167:
 2537              		.loc 1 520 0 discriminator 1
 2538 1bf3 488B8538 		movq	-200(%rbp), %rax
 2538      FFFFFF
 2539 1bfa 0FB600   		movzbl	(%rax), %eax
 2540 1bfd 3C20     		cmpb	$32, %al
 2541 1bff 74EA     		je	.L168
 2542              		.loc 1 520 0 discriminator 3
 2543 1c01 488B8538 		movq	-200(%rbp), %rax
 2543      FFFFFF
 2544 1c08 0FB600   		movzbl	(%rax), %eax
 2545 1c0b 3C09     		cmpb	$9, %al
 2546 1c0d 74DC     		je	.L168
 521:svf2csvf.c    **** 				EXPECT_CHAR('(', "TDO (<tdo>)");
 2547              		.loc 1 521 0 is_stmt 1
 2548 1c0f 488B8538 		movq	-200(%rbp), %rax
 2548      FFFFFF
 2549 1c16 0FB600   		movzbl	(%rax), %eax
 2550 1c19 3C28     		cmpb	$40, %al
 2551 1c1b 7438     		je	.L169
 2552              		.loc 1 521 0 is_stmt 0 discriminator 1
 2553 1c1d 488B8D58 		movq	-168(%rbp), %rcx
 2553      FFFFFF
 2554 1c24 488B9558 		movq	-168(%rbp), %rdx
 2554      FFFFFF
 2555 1c2b 488B85D8 		movq	-296(%rbp), %rax
 2555      FEFFFF
 2556 1c32 488D3500 		leaq	.LC22(%rip), %rsi
 2556      000000
 2557 1c39 4889C7   		movq	%rax, %rdi
 2558 1c3c B8000000 		movl	$0, %eax
 2558      00
 2559 1c41 E8000000 		call	errRender@PLT
 2559      00
 2560 1c46 C78504FF 		movl	$10, -252(%rbp)
 2560      FFFF0A00 
 2560      0000
 2561 1c50 E95B1100 		jmp	.L132
 2561      00
 2562              	.L169:
 522:svf2csvf.c    **** 				*p++ = '0';
 2563              		.loc 1 522 0 is_stmt 1
 2564 1c55 488B8538 		movq	-200(%rbp), %rax
 2564      FFFFFF
 2565 1c5c 488D5001 		leaq	1(%rax), %rdx
 2566 1c60 48899538 		movq	%rdx, -200(%rbp)
 2566      FFFFFF
 2567 1c67 C60030   		movb	$48, (%rax)
 523:svf2csvf.c    **** 				tdo = p++;
 2568              		.loc 1 523 0
 2569 1c6a 488B8538 		movq	-200(%rbp), %rax
 2569      FFFFFF
 2570 1c71 488D5001 		leaq	1(%rax), %rdx
 2571 1c75 48899538 		movq	%rdx, -200(%rbp)
 2571      FFFFFF
 2572 1c7c 48898548 		movq	%rax, -184(%rbp)
 2572      FFFFFF
 524:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2573              		.loc 1 524 0
 2574 1c83 EB08     		jmp	.L170
 2575              	.L172:
 525:svf2csvf.c    **** 					p++;
 2576              		.loc 1 525 0
 2577 1c85 48838538 		addq	$1, -200(%rbp)
 2577      FFFFFF01 
 2578              	.L170:
 524:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2579              		.loc 1 524 0
 2580 1c8d 488B8538 		movq	-200(%rbp), %rax
 2580      FFFFFF
 2581 1c94 483B8560 		cmpq	-160(%rbp), %rax
 2581      FFFFFF
 2582 1c9b 730E     		jnb	.L171
 524:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2583              		.loc 1 524 0 is_stmt 0 discriminator 1
 2584 1c9d 488B8538 		movq	-200(%rbp), %rax
 2584      FFFFFF
 2585 1ca4 0FB600   		movzbl	(%rax), %eax
 2586 1ca7 3C29     		cmpb	$41, %al
 2587 1ca9 75DA     		jne	.L172
 2588              	.L171:
 526:svf2csvf.c    **** 				}
 527:svf2csvf.c    **** 				EXPECT_CHAR(')', "TDO (<tdo>)");
 2589              		.loc 1 527 0 is_stmt 1
 2590 1cab 488B8538 		movq	-200(%rbp), %rax
 2590      FFFFFF
 2591 1cb2 0FB600   		movzbl	(%rax), %eax
 2592 1cb5 3C29     		cmpb	$41, %al
 2593 1cb7 7438     		je	.L173
 2594              		.loc 1 527 0 is_stmt 0 discriminator 1
 2595 1cb9 488B8D58 		movq	-168(%rbp), %rcx
 2595      FFFFFF
 2596 1cc0 488B9558 		movq	-168(%rbp), %rdx
 2596      FFFFFF
 2597 1cc7 488B85D8 		movq	-296(%rbp), %rax
 2597      FEFFFF
 2598 1cce 488D3500 		leaq	.LC22(%rip), %rsi
 2598      000000
 2599 1cd5 4889C7   		movq	%rax, %rdi
 2600 1cd8 B8000000 		movl	$0, %eax
 2600      00
 2601 1cdd E8000000 		call	errRender@PLT
 2601      00
 2602 1ce2 C78504FF 		movl	$10, -252(%rbp)
 2602      FFFF0A00 
 2602      0000
 2603 1cec E9BF1000 		jmp	.L132
 2603      00
 2604              	.L173:
 528:svf2csvf.c    **** 				*p++ = '\0';
 2605              		.loc 1 528 0 is_stmt 1
 2606 1cf1 488B8538 		movq	-200(%rbp), %rax
 2606      FFFFFF
 2607 1cf8 488D5001 		leaq	1(%rax), %rdx
 2608 1cfc 48899538 		movq	%rdx, -200(%rbp)
 2608      FFFFFF
 2609 1d03 C60000   		movb	$0, (%rax)
 529:svf2csvf.c    **** 				FIX_ODD(tdo);
 2610              		.loc 1 529 0
 2611 1d06 488B8548 		movq	-184(%rbp), %rax
 2611      FFFFFF
 2612 1d0d 4889C7   		movq	%rax, %rdi
 2613 1d10 E8000000 		call	strlen@PLT
 2613      00
 2614 1d15 83E001   		andl	$1, %eax
 2615 1d18 4885C0   		testq	%rax, %rax
 2616 1d1b 0F84B901 		je	.L184
 2616      0000
 2617              		.loc 1 529 0 is_stmt 0 discriminator 1
 2618 1d21 4883AD48 		subq	$1, -184(%rbp)
 2618      FFFFFF01 
 2619 1d29 E9AC0100 		jmp	.L184
 2619      00
 2620              	.L166:
 530:svf2csvf.c    **** 			} else if ( !strncmp(p, "MASK", 4) ) {
 2621              		.loc 1 530 0 is_stmt 1
 2622 1d2e 488B8538 		movq	-200(%rbp), %rax
 2622      FFFFFF
 2623 1d35 BA040000 		movl	$4, %edx
 2623      00
 2624 1d3a 488D3500 		leaq	.LC23(%rip), %rsi
 2624      000000
 2625 1d41 4889C7   		movq	%rax, %rdi
 2626 1d44 E8000000 		call	strncmp@PLT
 2626      00
 2627 1d49 85C0     		testl	%eax, %eax
 2628 1d4b 0F854601 		jne	.L175
 2628      0000
 531:svf2csvf.c    **** 				p += 4;
 2629              		.loc 1 531 0
 2630 1d51 48838538 		addq	$4, -200(%rbp)
 2630      FFFFFF04 
 532:svf2csvf.c    **** 				CHOMP();
 2631              		.loc 1 532 0
 2632 1d59 EB08     		jmp	.L176
 2633              	.L177:
 2634              		.loc 1 532 0 is_stmt 0 discriminator 4
 2635 1d5b 48838538 		addq	$1, -200(%rbp)
 2635      FFFFFF01 
 2636              	.L176:
 2637              		.loc 1 532 0 discriminator 1
 2638 1d63 488B8538 		movq	-200(%rbp), %rax
 2638      FFFFFF
 2639 1d6a 0FB600   		movzbl	(%rax), %eax
 2640 1d6d 3C20     		cmpb	$32, %al
 2641 1d6f 74EA     		je	.L177
 2642              		.loc 1 532 0 discriminator 3
 2643 1d71 488B8538 		movq	-200(%rbp), %rax
 2643      FFFFFF
 2644 1d78 0FB600   		movzbl	(%rax), %eax
 2645 1d7b 3C09     		cmpb	$9, %al
 2646 1d7d 74DC     		je	.L177
 533:svf2csvf.c    **** 				EXPECT_CHAR('(', "MASK (<mask>)");
 2647              		.loc 1 533 0 is_stmt 1
 2648 1d7f 488B8538 		movq	-200(%rbp), %rax
 2648      FFFFFF
 2649 1d86 0FB600   		movzbl	(%rax), %eax
 2650 1d89 3C28     		cmpb	$40, %al
 2651 1d8b 7438     		je	.L178
 2652              		.loc 1 533 0 is_stmt 0 discriminator 1
 2653 1d8d 488B8D58 		movq	-168(%rbp), %rcx
 2653      FFFFFF
 2654 1d94 488B9558 		movq	-168(%rbp), %rdx
 2654      FFFFFF
 2655 1d9b 488B85D8 		movq	-296(%rbp), %rax
 2655      FEFFFF
 2656 1da2 488D3500 		leaq	.LC24(%rip), %rsi
 2656      000000
 2657 1da9 4889C7   		movq	%rax, %rdi
 2658 1dac B8000000 		movl	$0, %eax
 2658      00
 2659 1db1 E8000000 		call	errRender@PLT
 2659      00
 2660 1db6 C78504FF 		movl	$10, -252(%rbp)
 2660      FFFF0A00 
 2660      0000
 2661 1dc0 E9EB0F00 		jmp	.L132
 2661      00
 2662              	.L178:
 534:svf2csvf.c    **** 				*p++ = '0';
 2663              		.loc 1 534 0 is_stmt 1
 2664 1dc5 488B8538 		movq	-200(%rbp), %rax
 2664      FFFFFF
 2665 1dcc 488D5001 		leaq	1(%rax), %rdx
 2666 1dd0 48899538 		movq	%rdx, -200(%rbp)
 2666      FFFFFF
 2667 1dd7 C60030   		movb	$48, (%rax)
 535:svf2csvf.c    **** 				mask = p++;
 2668              		.loc 1 535 0
 2669 1dda 488B8538 		movq	-200(%rbp), %rax
 2669      FFFFFF
 2670 1de1 488D5001 		leaq	1(%rax), %rdx
 2671 1de5 48899538 		movq	%rdx, -200(%rbp)
 2671      FFFFFF
 2672 1dec 48898550 		movq	%rax, -176(%rbp)
 2672      FFFFFF
 536:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2673              		.loc 1 536 0
 2674 1df3 EB08     		jmp	.L179
 2675              	.L181:
 537:svf2csvf.c    **** 					p++;
 2676              		.loc 1 537 0
 2677 1df5 48838538 		addq	$1, -200(%rbp)
 2677      FFFFFF01 
 2678              	.L179:
 536:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2679              		.loc 1 536 0
 2680 1dfd 488B8538 		movq	-200(%rbp), %rax
 2680      FFFFFF
 2681 1e04 483B8560 		cmpq	-160(%rbp), %rax
 2681      FFFFFF
 2682 1e0b 730E     		jnb	.L180
 536:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2683              		.loc 1 536 0 is_stmt 0 discriminator 1
 2684 1e0d 488B8538 		movq	-200(%rbp), %rax
 2684      FFFFFF
 2685 1e14 0FB600   		movzbl	(%rax), %eax
 2686 1e17 3C29     		cmpb	$41, %al
 2687 1e19 75DA     		jne	.L181
 2688              	.L180:
 538:svf2csvf.c    **** 				}
 539:svf2csvf.c    **** 				EXPECT_CHAR(')', "MASK (<mask>)");
 2689              		.loc 1 539 0 is_stmt 1
 2690 1e1b 488B8538 		movq	-200(%rbp), %rax
 2690      FFFFFF
 2691 1e22 0FB600   		movzbl	(%rax), %eax
 2692 1e25 3C29     		cmpb	$41, %al
 2693 1e27 7438     		je	.L182
 2694              		.loc 1 539 0 is_stmt 0 discriminator 1
 2695 1e29 488B8D58 		movq	-168(%rbp), %rcx
 2695      FFFFFF
 2696 1e30 488B9558 		movq	-168(%rbp), %rdx
 2696      FFFFFF
 2697 1e37 488B85D8 		movq	-296(%rbp), %rax
 2697      FEFFFF
 2698 1e3e 488D3500 		leaq	.LC24(%rip), %rsi
 2698      000000
 2699 1e45 4889C7   		movq	%rax, %rdi
 2700 1e48 B8000000 		movl	$0, %eax
 2700      00
 2701 1e4d E8000000 		call	errRender@PLT
 2701      00
 2702 1e52 C78504FF 		movl	$10, -252(%rbp)
 2702      FFFF0A00 
 2702      0000
 2703 1e5c E94F0F00 		jmp	.L132
 2703      00
 2704              	.L182:
 540:svf2csvf.c    **** 				*p++ = '\0';
 2705              		.loc 1 540 0 is_stmt 1
 2706 1e61 488B8538 		movq	-200(%rbp), %rax
 2706      FFFFFF
 2707 1e68 488D5001 		leaq	1(%rax), %rdx
 2708 1e6c 48899538 		movq	%rdx, -200(%rbp)
 2708      FFFFFF
 2709 1e73 C60000   		movb	$0, (%rax)
 541:svf2csvf.c    **** 				FIX_ODD(mask);
 2710              		.loc 1 541 0
 2711 1e76 488B8550 		movq	-176(%rbp), %rax
 2711      FFFFFF
 2712 1e7d 4889C7   		movq	%rax, %rdi
 2713 1e80 E8000000 		call	strlen@PLT
 2713      00
 2714 1e85 83E001   		andl	$1, %eax
 2715 1e88 4885C0   		testq	%rax, %rax
 2716 1e8b 744D     		je	.L184
 2717              		.loc 1 541 0 is_stmt 0 discriminator 1
 2718 1e8d 4883AD50 		subq	$1, -176(%rbp)
 2718      FFFFFF01 
 2719 1e95 EB43     		jmp	.L184
 2720              	.L175:
 542:svf2csvf.c    **** 			} else {
 543:svf2csvf.c    **** 				CHECK_STATUS(
 2721              		.loc 1 543 0 is_stmt 1 discriminator 1
 2722 1e97 488B9538 		movq	-200(%rbp), %rdx
 2722      FFFFFF
 2723 1e9e 488B8558 		movq	-168(%rbp), %rax
 2723      FFFFFF
 2724 1ea5 4829C2   		subq	%rax, %rdx
 2725 1ea8 488B85D8 		movq	-296(%rbp), %rax
 2725      FEFFFF
 2726 1eaf 488D3500 		leaq	.LC25(%rip), %rsi
 2726      000000
 2727 1eb6 4889C7   		movq	%rax, %rdi
 2728 1eb9 B8000000 		movl	$0, %eax
 2728      00
 2729 1ebe E8000000 		call	errRender@PLT
 2729      00
 2730 1ec3 C78504FF 		movl	$10, -252(%rbp)
 2730      FFFF0A00 
 2730      0000
 2731 1ecd E9DE0E00 		jmp	.L132
 2731      00
 2732              	.L185:
 544:svf2csvf.c    **** 					true, FL_SVF_PARSE_ERR, cleanup,
 545:svf2csvf.c    **** 					"parseLine(): Junk in [HTS][IR]R line at column %d", p-line);
 546:svf2csvf.c    **** 			}
 547:svf2csvf.c    **** 			CHOMP();
 2733              		.loc 1 547 0 discriminator 4
 2734 1ed2 48838538 		addq	$1, -200(%rbp)
 2734      FFFFFF01 
 2735              	.L184:
 2736              		.loc 1 547 0 is_stmt 0 discriminator 1
 2737 1eda 488B8538 		movq	-200(%rbp), %rax
 2737      FFFFFF
 2738 1ee1 0FB600   		movzbl	(%rax), %eax
 2739 1ee4 3C20     		cmpb	$32, %al
 2740 1ee6 74EA     		je	.L185
 2741              		.loc 1 547 0 discriminator 3
 2742 1ee8 488B8538 		movq	-200(%rbp), %rax
 2742      FFFFFF
 2743 1eef 0FB600   		movzbl	(%rax), %eax
 2744 1ef2 3C09     		cmpb	$9, %al
 2745 1ef4 74DC     		je	.L185
 2746              	.L145:
 485:svf2csvf.c    **** 			if ( !strncmp(p, "TDI", 3) ) {
 2747              		.loc 1 485 0 is_stmt 1
 2748 1ef6 488B8538 		movq	-200(%rbp), %rax
 2748      FFFFFF
 2749 1efd 0FB600   		movzbl	(%rax), %eax
 2750 1f00 84C0     		testb	%al, %al
 2751 1f02 0F85D6F9 		jne	.L186
 2751      FFFF
 548:svf2csvf.c    **** 		}
 549:svf2csvf.c    **** 		if ( isDataReg ) {
 2752              		.loc 1 549 0
 2753 1f08 80BD02FF 		cmpb	$0, -254(%rbp)
 2753      FFFF00
 2754 1f0f 0F84440A 		je	.L187
 2754      0000
 2755              	.LBB5:
 550:svf2csvf.c    **** 			bool zeroMask;
 551:svf2csvf.c    **** 			switch ( op ) {
 2756              		.loc 1 551 0
 2757 1f15 8B8508FF 		movl	-248(%rbp), %eax
 2757      FFFF
 2758 1f1b 83F853   		cmpl	$83, %eax
 2759 1f1e 0F84F700 		je	.L189
 2759      0000
 2760 1f24 83F854   		cmpl	$84, %eax
 2761 1f27 747B     		je	.L190
 2762 1f29 83F848   		cmpl	$72, %eax
 2763 1f2c 7405     		je	.L191
 2764              	.LBE5:
 2765              	.LBE4:
 461:svf2csvf.c    **** 		// HIR/HDR, TIR/TDR, SIR/SDR are of the form "**R <length> [TDI (<tdi>)] [TDO (<tdo>)] [MASK (<ma
 2766              		.loc 1 461 0
 2767 1f2e E97D0E00 		jmp	.L132
 2767      00
 2768              	.L191:
 2769              	.LBB8:
 2770              	.LBB6:
 552:svf2csvf.c    **** 			case HEAD:
 553:svf2csvf.c    **** 				fStatus = processLine(&cxt->dataHead, length, tdi, tdo, mask, error);
 2771              		.loc 1 553 0
 2772 1f33 488B85F8 		movq	-264(%rbp), %rax
 2772      FEFFFF
 2773 1f3a 4C8B85D8 		movq	-296(%rbp), %r8
 2773      FEFFFF
 2774 1f41 488BBD50 		movq	-176(%rbp), %rdi
 2774      FFFFFF
 2775 1f48 488B8D48 		movq	-184(%rbp), %rcx
 2775      FFFFFF
 2776 1f4f 488B9540 		movq	-192(%rbp), %rdx
 2776      FFFFFF
 2777 1f56 8BB510FF 		movl	-240(%rbp), %esi
 2777      FFFF
 2778 1f5c 4D89C1   		movq	%r8, %r9
 2779 1f5f 4989F8   		movq	%rdi, %r8
 2780 1f62 4889C7   		movq	%rax, %rdi
 2781 1f65 E8FBEDFF 		call	processLine
 2781      FF
 2782 1f6a 898514FF 		movl	%eax, -236(%rbp)
 2782      FFFF
 554:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 2783              		.loc 1 554 0
 2784 1f70 83BD14FF 		cmpl	$0, -236(%rbp)
 2784      FFFF00
 2785 1f77 0F84F40D 		je	.L235
 2785      0000
 2786              		.loc 1 554 0 is_stmt 0 discriminator 1
 2787 1f7d 488B85D8 		movq	-296(%rbp), %rax
 2787      FEFFFF
 2788 1f84 488D3500 		leaq	.LC16(%rip), %rsi
 2788      000000
 2789 1f8b 4889C7   		movq	%rax, %rdi
 2790 1f8e E8000000 		call	errPrefix@PLT
 2790      00
 2791 1f93 8B8514FF 		movl	-236(%rbp), %eax
 2791      FFFF
 2792 1f99 898504FF 		movl	%eax, -252(%rbp)
 2792      FFFF
 2793 1f9f E90C0E00 		jmp	.L132
 2793      00
 2794              	.L190:
 555:svf2csvf.c    **** 				break;
 556:svf2csvf.c    **** 			case TAIL:
 557:svf2csvf.c    **** 				fStatus = processLine(&cxt->dataTail, length, tdi, tdo, mask, error);
 2795              		.loc 1 557 0 is_stmt 1
 2796 1fa4 488B85F8 		movq	-264(%rbp), %rax
 2796      FEFFFF
 2797 1fab 488DB8A0 		leaq	416(%rax), %rdi
 2797      010000
 2798 1fb2 4C8B85D8 		movq	-296(%rbp), %r8
 2798      FEFFFF
 2799 1fb9 488BB550 		movq	-176(%rbp), %rsi
 2799      FFFFFF
 2800 1fc0 488B8D48 		movq	-184(%rbp), %rcx
 2800      FFFFFF
 2801 1fc7 488B9540 		movq	-192(%rbp), %rdx
 2801      FFFFFF
 2802 1fce 8B8510FF 		movl	-240(%rbp), %eax
 2802      FFFF
 2803 1fd4 4D89C1   		movq	%r8, %r9
 2804 1fd7 4989F0   		movq	%rsi, %r8
 2805 1fda 89C6     		movl	%eax, %esi
 2806 1fdc E884EDFF 		call	processLine
 2806      FF
 2807 1fe1 898514FF 		movl	%eax, -236(%rbp)
 2807      FFFF
 558:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 2808              		.loc 1 558 0
 2809 1fe7 83BD14FF 		cmpl	$0, -236(%rbp)
 2809      FFFF00
 2810 1fee 0F84800D 		je	.L236
 2810      0000
 2811              		.loc 1 558 0 is_stmt 0 discriminator 1
 2812 1ff4 488B85D8 		movq	-296(%rbp), %rax
 2812      FEFFFF
 2813 1ffb 488D3500 		leaq	.LC16(%rip), %rsi
 2813      000000
 2814 2002 4889C7   		movq	%rax, %rdi
 2815 2005 E8000000 		call	errPrefix@PLT
 2815      00
 2816 200a 8B8514FF 		movl	-236(%rbp), %eax
 2816      FFFF
 2817 2010 898504FF 		movl	%eax, -252(%rbp)
 2817      FFFF
 2818 2016 E9950D00 		jmp	.L132
 2818      00
 2819              	.L189:
 559:svf2csvf.c    **** 				break;
 560:svf2csvf.c    **** 			case BODY:
 561:svf2csvf.c    **** 				fStatus = processLine(&cxt->dataBody, length, tdi, tdo, mask, error);
 2820              		.loc 1 561 0 is_stmt 1
 2821 201b 488B85F8 		movq	-264(%rbp), %rax
 2821      FEFFFF
 2822 2022 488DB8D0 		leaq	208(%rax), %rdi
 2822      000000
 2823 2029 4C8B85D8 		movq	-296(%rbp), %r8
 2823      FEFFFF
 2824 2030 488BB550 		movq	-176(%rbp), %rsi
 2824      FFFFFF
 2825 2037 488B8D48 		movq	-184(%rbp), %rcx
 2825      FFFFFF
 2826 203e 488B9540 		movq	-192(%rbp), %rdx
 2826      FFFFFF
 2827 2045 8B8510FF 		movl	-240(%rbp), %eax
 2827      FFFF
 2828 204b 4D89C1   		movq	%r8, %r9
 2829 204e 4989F0   		movq	%rsi, %r8
 2830 2051 89C6     		movl	%eax, %esi
 2831 2053 E80DEDFF 		call	processLine
 2831      FF
 2832 2058 898514FF 		movl	%eax, -236(%rbp)
 2832      FFFF
 562:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 2833              		.loc 1 562 0
 2834 205e 83BD14FF 		cmpl	$0, -236(%rbp)
 2834      FFFF00
 2835 2065 7427     		je	.L194
 2836              		.loc 1 562 0 is_stmt 0 discriminator 1
 2837 2067 488B85D8 		movq	-296(%rbp), %rax
 2837      FEFFFF
 2838 206e 488D3500 		leaq	.LC16(%rip), %rsi
 2838      000000
 2839 2075 4889C7   		movq	%rax, %rdi
 2840 2078 E8000000 		call	errPrefix@PLT
 2840      00
 2841 207d 8B8514FF 		movl	-236(%rbp), %eax
 2841      FFFF
 2842 2083 898504FF 		movl	%eax, -252(%rbp)
 2842      FFFF
 2843 2089 E9220D00 		jmp	.L132
 2843      00
 2844              	.L194:
 563:svf2csvf.c    **** 				if (
 564:svf2csvf.c    **** 					cxt->dataHead.numBits + cxt->dataBody.numBits + cxt->dataTail.numBits
 2845              		.loc 1 564 0 is_stmt 1
 2846 208e 488B85F8 		movq	-264(%rbp), %rax
 2846      FEFFFF
 2847 2095 8B10     		movl	(%rax), %edx
 2848 2097 488B85F8 		movq	-264(%rbp), %rax
 2848      FEFFFF
 2849 209e 8B80D000 		movl	208(%rax), %eax
 2849      0000
 2850 20a4 01C2     		addl	%eax, %edx
 2851 20a6 488B85F8 		movq	-264(%rbp), %rax
 2851      FEFFFF
 2852 20ad 8B80A001 		movl	416(%rax), %eax
 2852      0000
 2853 20b3 01C2     		addl	%eax, %edx
 565:svf2csvf.c    **** 					!= cxt->curLength
 2854              		.loc 1 565 0
 2855 20b5 488B85F8 		movq	-264(%rbp), %rax
 2855      FEFFFF
 2856 20bc 8B807002 		movl	624(%rax), %eax
 2856      0000
 563:svf2csvf.c    **** 				if (
 2857              		.loc 1 563 0
 2858 20c2 39C2     		cmpl	%eax, %edx
 2859 20c4 0F84F900 		je	.L195
 2859      0000
 566:svf2csvf.c    **** 				) {
 567:svf2csvf.c    **** 					cxt->curLength = cxt->dataHead.numBits + cxt->dataBody.numBits + cxt->dataTail.numBits;
 2860              		.loc 1 567 0
 2861 20ca 488B85F8 		movq	-264(%rbp), %rax
 2861      FEFFFF
 2862 20d1 8B10     		movl	(%rax), %edx
 2863 20d3 488B85F8 		movq	-264(%rbp), %rax
 2863      FEFFFF
 2864 20da 8B80D000 		movl	208(%rax), %eax
 2864      0000
 2865 20e0 01C2     		addl	%eax, %edx
 2866 20e2 488B85F8 		movq	-264(%rbp), %rax
 2866      FEFFFF
 2867 20e9 8B80A001 		movl	416(%rax), %eax
 2867      0000
 2868 20ef 01C2     		addl	%eax, %edx
 2869 20f1 488B85F8 		movq	-264(%rbp), %rax
 2869      FEFFFF
 2870 20f8 89907002 		movl	%edx, 624(%rax)
 2870      0000
 568:svf2csvf.c    **** 					cxt->numCommands++;
 2871              		.loc 1 568 0
 2872 20fe 488B85F8 		movq	-264(%rbp), %rax
 2872      FEFFFF
 2873 2105 8B809C02 		movl	668(%rax), %eax
 2873      0000
 2874 210b 8D5001   		leal	1(%rax), %edx
 2875 210e 488B85F8 		movq	-264(%rbp), %rax
 2875      FEFFFF
 2876 2115 89909C02 		movl	%edx, 668(%rax)
 2876      0000
 569:svf2csvf.c    **** 					bStatus = bufAppendByte(csvfBuf, XSDRSIZE, error);
 2877              		.loc 1 569 0
 2878 211b 488B95D8 		movq	-296(%rbp), %rdx
 2878      FEFFFF
 2879 2122 488B85E8 		movq	-280(%rbp), %rax
 2879      FEFFFF
 2880 2129 BE080000 		movl	$8, %esi
 2880      00
 2881 212e 4889C7   		movq	%rax, %rdi
 2882 2131 E8000000 		call	bufAppendByte@PLT
 2882      00
 2883 2136 89850CFF 		movl	%eax, -244(%rbp)
 2883      FFFF
 570:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2884              		.loc 1 570 0
 2885 213c 83BD0CFF 		cmpl	$0, -244(%rbp)
 2885      FFFF00
 2886 2143 7425     		je	.L196
 2887              		.loc 1 570 0 is_stmt 0 discriminator 1
 2888 2145 488B85D8 		movq	-296(%rbp), %rax
 2888      FEFFFF
 2889 214c 488D3500 		leaq	.LC16(%rip), %rsi
 2889      000000
 2890 2153 4889C7   		movq	%rax, %rdi
 2891 2156 E8000000 		call	errPrefix@PLT
 2891      00
 2892 215b C78504FF 		movl	$1, -252(%rbp)
 2892      FFFF0100 
 2892      0000
 2893 2165 E9460C00 		jmp	.L132
 2893      00
 2894              	.L196:
 571:svf2csvf.c    **** 					bStatus = bufAppendLongBE(csvfBuf, cxt->curLength, error);
 2895              		.loc 1 571 0 is_stmt 1
 2896 216a 488B85F8 		movq	-264(%rbp), %rax
 2896      FEFFFF
 2897 2171 8B887002 		movl	624(%rax), %ecx
 2897      0000
 2898 2177 488B95D8 		movq	-296(%rbp), %rdx
 2898      FEFFFF
 2899 217e 488B85E8 		movq	-280(%rbp), %rax
 2899      FEFFFF
 2900 2185 89CE     		movl	%ecx, %esi
 2901 2187 4889C7   		movq	%rax, %rdi
 2902 218a E8000000 		call	bufAppendLongBE@PLT
 2902      00
 2903 218f 89850CFF 		movl	%eax, -244(%rbp)
 2903      FFFF
 572:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2904              		.loc 1 572 0
 2905 2195 83BD0CFF 		cmpl	$0, -244(%rbp)
 2905      FFFF00
 2906 219c 7425     		je	.L195
 2907              		.loc 1 572 0 is_stmt 0 discriminator 1
 2908 219e 488B85D8 		movq	-296(%rbp), %rax
 2908      FEFFFF
 2909 21a5 488D3500 		leaq	.LC16(%rip), %rsi
 2909      000000
 2910 21ac 4889C7   		movq	%rax, %rdi
 2911 21af E8000000 		call	errPrefix@PLT
 2911      00
 2912 21b4 C78504FF 		movl	$1, -252(%rbp)
 2912      FFFF0100 
 2912      0000
 2913 21be E9ED0B00 		jmp	.L132
 2913      00
 2914              	.L195:
 573:svf2csvf.c    **** 				}
 574:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpHead, &cxt->dataHead.mask, error);
 2915              		.loc 1 574 0 is_stmt 1
 2916 21c3 488B85F8 		movq	-264(%rbp), %rax
 2916      FEFFFF
 2917 21ca 488D4848 		leaq	72(%rax), %rcx
 2918 21ce 488B95D8 		movq	-296(%rbp), %rdx
 2918      FEFFFF
 2919 21d5 488D8570 		leaq	-144(%rbp), %rax
 2919      FFFFFF
 2920 21dc 4889CE   		movq	%rcx, %rsi
 2921 21df 4889C7   		movq	%rax, %rdi
 2922 21e2 E8000000 		call	bufDeepCopy@PLT
 2922      00
 2923 21e7 89850CFF 		movl	%eax, -244(%rbp)
 2923      FFFF
 575:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2924              		.loc 1 575 0
 2925 21ed 83BD0CFF 		cmpl	$0, -244(%rbp)
 2925      FFFF00
 2926 21f4 7425     		je	.L197
 2927              		.loc 1 575 0 is_stmt 0 discriminator 1
 2928 21f6 488B85D8 		movq	-296(%rbp), %rax
 2928      FEFFFF
 2929 21fd 488D3500 		leaq	.LC16(%rip), %rsi
 2929      000000
 2930 2204 4889C7   		movq	%rax, %rdi
 2931 2207 E8000000 		call	errPrefix@PLT
 2931      00
 2932 220c C78504FF 		movl	$1, -252(%rbp)
 2932      FFFF0100 
 2932      0000
 2933 2216 E9950B00 		jmp	.L132
 2933      00
 2934              	.L197:
 576:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpBody1, &cxt->dataBody.mask, error);
 2935              		.loc 1 576 0 is_stmt 1
 2936 221b 488B85F8 		movq	-264(%rbp), %rax
 2936      FEFFFF
 2937 2222 488D8818 		leaq	280(%rax), %rcx
 2937      010000
 2938 2229 488B95D8 		movq	-296(%rbp), %rdx
 2938      FEFFFF
 2939 2230 488D4590 		leaq	-112(%rbp), %rax
 2940 2234 4889CE   		movq	%rcx, %rsi
 2941 2237 4889C7   		movq	%rax, %rdi
 2942 223a E8000000 		call	bufDeepCopy@PLT
 2942      00
 2943 223f 89850CFF 		movl	%eax, -244(%rbp)
 2943      FFFF
 577:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2944              		.loc 1 577 0
 2945 2245 83BD0CFF 		cmpl	$0, -244(%rbp)
 2945      FFFF00
 2946 224c 7425     		je	.L198
 2947              		.loc 1 577 0 is_stmt 0 discriminator 1
 2948 224e 488B85D8 		movq	-296(%rbp), %rax
 2948      FEFFFF
 2949 2255 488D3500 		leaq	.LC16(%rip), %rsi
 2949      000000
 2950 225c 4889C7   		movq	%rax, %rdi
 2951 225f E8000000 		call	errPrefix@PLT
 2951      00
 2952 2264 C78504FF 		movl	$1, -252(%rbp)
 2952      FFFF0100 
 2952      0000
 2953 226e E93D0B00 		jmp	.L132
 2953      00
 2954              	.L198:
 578:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpTail, &cxt->dataTail.mask, error);
 2955              		.loc 1 578 0 is_stmt 1
 2956 2273 488B85F8 		movq	-264(%rbp), %rax
 2956      FEFFFF
 2957 227a 488D88E8 		leaq	488(%rax), %rcx
 2957      010000
 2958 2281 488B95D8 		movq	-296(%rbp), %rdx
 2958      FEFFFF
 2959 2288 488D45D0 		leaq	-48(%rbp), %rax
 2960 228c 4889CE   		movq	%rcx, %rsi
 2961 228f 4889C7   		movq	%rax, %rdi
 2962 2292 E8000000 		call	bufDeepCopy@PLT
 2962      00
 2963 2297 89850CFF 		movl	%eax, -244(%rbp)
 2963      FFFF
 579:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2964              		.loc 1 579 0
 2965 229d 83BD0CFF 		cmpl	$0, -244(%rbp)
 2965      FFFF00
 2966 22a4 7425     		je	.L199
 2967              		.loc 1 579 0 is_stmt 0 discriminator 1
 2968 22a6 488B85D8 		movq	-296(%rbp), %rax
 2968      FEFFFF
 2969 22ad 488D3500 		leaq	.LC16(%rip), %rsi
 2969      000000
 2970 22b4 4889C7   		movq	%rax, %rdi
 2971 22b7 E8000000 		call	errPrefix@PLT
 2971      00
 2972 22bc C78504FF 		movl	$1, -252(%rbp)
 2972      FFFF0100 
 2972      0000
 2973 22c6 E9E50A00 		jmp	.L132
 2973      00
 2974              	.L199:
 580:svf2csvf.c    **** 				fStatus = headTail(
 2975              		.loc 1 580 0 is_stmt 1
 2976 22cb 488B85F8 		movq	-264(%rbp), %rax
 2976      FEFFFF
 2977 22d2 448B80A0 		movl	416(%rax), %r8d
 2977      010000
 2978 22d9 488B85F8 		movq	-264(%rbp), %rax
 2978      FEFFFF
 2979 22e0 8B38     		movl	(%rax), %edi
 2980 22e2 488B85F8 		movq	-264(%rbp), %rax
 2980      FEFFFF
 2981 22e9 8B88D000 		movl	208(%rax), %ecx
 2981      0000
 2982 22ef 488D55D0 		leaq	-48(%rbp), %rdx
 2983 22f3 488DB570 		leaq	-144(%rbp), %rsi
 2983      FFFFFF
 2984 22fa 488D4590 		leaq	-112(%rbp), %rax
 2985 22fe 4883EC08 		subq	$8, %rsp
 2986 2302 FFB5D8FE 		pushq	-296(%rbp)
 2986      FFFF
 2987 2308 4589C1   		movl	%r8d, %r9d
 2988 230b 4189F8   		movl	%edi, %r8d
 2989 230e 4889C7   		movq	%rax, %rdi
 2990 2311 E8000000 		call	headTail@PLT
 2990      00
 2991 2316 4883C410 		addq	$16, %rsp
 2992 231a 898514FF 		movl	%eax, -236(%rbp)
 2992      FFFF
 581:svf2csvf.c    **** 					&tmpBody1, &tmpHead, &tmpTail,
 582:svf2csvf.c    **** 					cxt->dataBody.numBits, cxt->dataHead.numBits, cxt->dataTail.numBits,
 583:svf2csvf.c    **** 					error);
 584:svf2csvf.c    **** 				zeroMask = isAllZero(&tmpBody1);
 2993              		.loc 1 584 0
 2994 2320 488D4590 		leaq	-112(%rbp), %rax
 2995 2324 4889C7   		movq	%rax, %rdi
 2996 2327 E8B9ECFF 		call	isAllZero
 2996      FF
 2997 232c 888503FF 		movb	%al, -253(%rbp)
 2997      FFFF
 585:svf2csvf.c    **** 				if (
 586:svf2csvf.c    **** 					tmpBody1.length != cxt->curMaskBuf.length ||
 2998              		.loc 1 586 0
 2999 2332 488B5598 		movq	-104(%rbp), %rdx
 3000 2336 488B85F8 		movq	-264(%rbp), %rax
 3000      FEFFFF
 3001 233d 488B8080 		movq	640(%rax), %rax
 3001      020000
 585:svf2csvf.c    **** 				if (
 3002              		.loc 1 585 0
 3003 2344 4839C2   		cmpq	%rax, %rdx
 3004 2347 7525     		jne	.L200
 587:svf2csvf.c    **** 					memcmp(tmpBody1.data, cxt->curMaskBuf.data, tmpBody1.length)
 3005              		.loc 1 587 0
 3006 2349 488B5598 		movq	-104(%rbp), %rdx
 3007 234d 488B85F8 		movq	-264(%rbp), %rax
 3007      FEFFFF
 3008 2354 488B8878 		movq	632(%rax), %rcx
 3008      020000
 3009 235b 488B4590 		movq	-112(%rbp), %rax
 3010 235f 4889CE   		movq	%rcx, %rsi
 3011 2362 4889C7   		movq	%rax, %rdi
 3012 2365 E8000000 		call	memcmp@PLT
 3012      00
 586:svf2csvf.c    **** 					memcmp(tmpBody1.data, cxt->curMaskBuf.data, tmpBody1.length)
 3013              		.loc 1 586 0
 3014 236a 85C0     		testl	%eax, %eax
 3015 236c 742B     		je	.L201
 3016              	.L200:
 588:svf2csvf.c    **** 				) {
 589:svf2csvf.c    **** 					bufSwap(&cxt->curMaskBuf, &tmpBody1);
 3017              		.loc 1 589 0
 3018 236e 488B85F8 		movq	-264(%rbp), %rax
 3018      FEFFFF
 3019 2375 488D9078 		leaq	632(%rax), %rdx
 3019      020000
 3020 237c 488D4590 		leaq	-112(%rbp), %rax
 3021 2380 4889C6   		movq	%rax, %rsi
 3022 2383 4889D7   		movq	%rdx, %rdi
 3023 2386 E8000000 		call	bufSwap@PLT
 3023      00
 590:svf2csvf.c    **** 					cxt->newMaskWritten = false;
 3024              		.loc 1 590 0
 3025 238b 488B85F8 		movq	-264(%rbp), %rax
 3025      FEFFFF
 3026 2392 C680A002 		movb	$0, 672(%rax)
 3026      000000
 3027              	.L201:
 591:svf2csvf.c    **** 				}
 592:svf2csvf.c    **** 				if ( !zeroMask && tdo && !cxt->newMaskWritten ) {
 3028              		.loc 1 592 0
 3029 2399 0FB68503 		movzbl	-253(%rbp), %eax
 3029      FFFFFF
 3030 23a0 83F001   		xorl	$1, %eax
 3031 23a3 84C0     		testb	%al, %al
 3032 23a5 0F841001 		je	.L202
 3032      0000
 3033              		.loc 1 592 0 is_stmt 0 discriminator 1
 3034 23ab 4883BD48 		cmpq	$0, -184(%rbp)
 3034      FFFFFF00 
 3035 23b3 0F840201 		je	.L202
 3035      0000
 3036              		.loc 1 592 0 discriminator 2
 3037 23b9 488B85F8 		movq	-264(%rbp), %rax
 3037      FEFFFF
 3038 23c0 0FB680A0 		movzbl	672(%rax), %eax
 3038      020000
 3039 23c7 83F001   		xorl	$1, %eax
 3040 23ca 84C0     		testb	%al, %al
 3041 23cc 0F84E900 		je	.L202
 3041      0000
 593:svf2csvf.c    **** 					// New mask is nonzero and different from the last one sent
 594:svf2csvf.c    **** 					cxt->numCommands++;
 3042              		.loc 1 594 0 is_stmt 1
 3043 23d2 488B85F8 		movq	-264(%rbp), %rax
 3043      FEFFFF
 3044 23d9 8B809C02 		movl	668(%rax), %eax
 3044      0000
 3045 23df 8D5001   		leal	1(%rax), %edx
 3046 23e2 488B85F8 		movq	-264(%rbp), %rax
 3046      FEFFFF
 3047 23e9 89909C02 		movl	%edx, 668(%rax)
 3047      0000
 595:svf2csvf.c    **** 					bStatus = bufAppendByte(csvfBuf, XTDOMASK, error);
 3048              		.loc 1 595 0
 3049 23ef 488B95D8 		movq	-296(%rbp), %rdx
 3049      FEFFFF
 3050 23f6 488B85E8 		movq	-280(%rbp), %rax
 3050      FEFFFF
 3051 23fd BE010000 		movl	$1, %esi
 3051      00
 3052 2402 4889C7   		movq	%rax, %rdi
 3053 2405 E8000000 		call	bufAppendByte@PLT
 3053      00
 3054 240a 89850CFF 		movl	%eax, -244(%rbp)
 3054      FFFF
 596:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3055              		.loc 1 596 0
 3056 2410 83BD0CFF 		cmpl	$0, -244(%rbp)
 3056      FFFF00
 3057 2417 7425     		je	.L203
 3058              		.loc 1 596 0 is_stmt 0 discriminator 1
 3059 2419 488B85D8 		movq	-296(%rbp), %rax
 3059      FEFFFF
 3060 2420 488D3500 		leaq	.LC16(%rip), %rsi
 3060      000000
 3061 2427 4889C7   		movq	%rax, %rdi
 3062 242a E8000000 		call	errPrefix@PLT
 3062      00
 3063 242f C78504FF 		movl	$1, -252(%rbp)
 3063      FFFF0100 
 3063      0000
 3064 2439 E9720900 		jmp	.L132
 3064      00
 3065              	.L203:
 597:svf2csvf.c    **** 					fStatus = appendSwapped(csvfBuf, cxt->curMaskBuf.data, (uint32)cxt->curMaskBuf.length, error);
 3066              		.loc 1 597 0 is_stmt 1
 3067 243e 488B85F8 		movq	-264(%rbp), %rax
 3067      FEFFFF
 3068 2445 488B8080 		movq	640(%rax), %rax
 3068      020000
 3069 244c 89C7     		movl	%eax, %edi
 3070 244e 488B85F8 		movq	-264(%rbp), %rax
 3070      FEFFFF
 3071 2455 488BB078 		movq	632(%rax), %rsi
 3071      020000
 3072 245c 488B95D8 		movq	-296(%rbp), %rdx
 3072      FEFFFF
 3073 2463 488B85E8 		movq	-280(%rbp), %rax
 3073      FEFFFF
 3074 246a 4889D1   		movq	%rdx, %rcx
 3075 246d 89FA     		movl	%edi, %edx
 3076 246f 4889C7   		movq	%rax, %rdi
 3077 2472 E8AFECFF 		call	appendSwapped
 3077      FF
 3078 2477 898514FF 		movl	%eax, -236(%rbp)
 3078      FFFF
 598:svf2csvf.c    **** 					CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3079              		.loc 1 598 0
 3080 247d 83BD14FF 		cmpl	$0, -236(%rbp)
 3080      FFFF00
 3081 2484 7427     		je	.L204
 3082              		.loc 1 598 0 is_stmt 0 discriminator 1
 3083 2486 488B85D8 		movq	-296(%rbp), %rax
 3083      FEFFFF
 3084 248d 488D3500 		leaq	.LC16(%rip), %rsi
 3084      000000
 3085 2494 4889C7   		movq	%rax, %rdi
 3086 2497 E8000000 		call	errPrefix@PLT
 3086      00
 3087 249c 8B8514FF 		movl	-236(%rbp), %eax
 3087      FFFF
 3088 24a2 898504FF 		movl	%eax, -252(%rbp)
 3088      FFFF
 3089 24a8 E9030900 		jmp	.L132
 3089      00
 3090              	.L204:
 599:svf2csvf.c    **** 					cxt->newMaskWritten = true;
 3091              		.loc 1 599 0 is_stmt 1
 3092 24ad 488B85F8 		movq	-264(%rbp), %rax
 3092      FEFFFF
 3093 24b4 C680A002 		movb	$1, 672(%rax)
 3093      000001
 3094              	.L202:
 600:svf2csvf.c    **** 				}
 601:svf2csvf.c    **** 
 602:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpHead, &cxt->dataHead.tdi, error);
 3095              		.loc 1 602 0
 3096 24bb 488B85F8 		movq	-264(%rbp), %rax
 3096      FEFFFF
 3097 24c2 488D4808 		leaq	8(%rax), %rcx
 3098 24c6 488B95D8 		movq	-296(%rbp), %rdx
 3098      FEFFFF
 3099 24cd 488D8570 		leaq	-144(%rbp), %rax
 3099      FFFFFF
 3100 24d4 4889CE   		movq	%rcx, %rsi
 3101 24d7 4889C7   		movq	%rax, %rdi
 3102 24da E8000000 		call	bufDeepCopy@PLT
 3102      00
 3103 24df 89850CFF 		movl	%eax, -244(%rbp)
 3103      FFFF
 603:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3104              		.loc 1 603 0
 3105 24e5 83BD0CFF 		cmpl	$0, -244(%rbp)
 3105      FFFF00
 3106 24ec 7425     		je	.L205
 3107              		.loc 1 603 0 is_stmt 0 discriminator 1
 3108 24ee 488B85D8 		movq	-296(%rbp), %rax
 3108      FEFFFF
 3109 24f5 488D3500 		leaq	.LC16(%rip), %rsi
 3109      000000
 3110 24fc 4889C7   		movq	%rax, %rdi
 3111 24ff E8000000 		call	errPrefix@PLT
 3111      00
 3112 2504 C78504FF 		movl	$1, -252(%rbp)
 3112      FFFF0100 
 3112      0000
 3113 250e E99D0800 		jmp	.L132
 3113      00
 3114              	.L205:
 604:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpBody1, &cxt->dataBody.tdi, error);
 3115              		.loc 1 604 0 is_stmt 1
 3116 2513 488B85F8 		movq	-264(%rbp), %rax
 3116      FEFFFF
 3117 251a 488D88D8 		leaq	216(%rax), %rcx
 3117      000000
 3118 2521 488B95D8 		movq	-296(%rbp), %rdx
 3118      FEFFFF
 3119 2528 488D4590 		leaq	-112(%rbp), %rax
 3120 252c 4889CE   		movq	%rcx, %rsi
 3121 252f 4889C7   		movq	%rax, %rdi
 3122 2532 E8000000 		call	bufDeepCopy@PLT
 3122      00
 3123 2537 89850CFF 		movl	%eax, -244(%rbp)
 3123      FFFF
 605:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3124              		.loc 1 605 0
 3125 253d 83BD0CFF 		cmpl	$0, -244(%rbp)
 3125      FFFF00
 3126 2544 7425     		je	.L206
 3127              		.loc 1 605 0 is_stmt 0 discriminator 1
 3128 2546 488B85D8 		movq	-296(%rbp), %rax
 3128      FEFFFF
 3129 254d 488D3500 		leaq	.LC16(%rip), %rsi
 3129      000000
 3130 2554 4889C7   		movq	%rax, %rdi
 3131 2557 E8000000 		call	errPrefix@PLT
 3131      00
 3132 255c C78504FF 		movl	$1, -252(%rbp)
 3132      FFFF0100 
 3132      0000
 3133 2566 E9450800 		jmp	.L132
 3133      00
 3134              	.L206:
 606:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpTail, &cxt->dataTail.tdi, error);
 3135              		.loc 1 606 0 is_stmt 1
 3136 256b 488B85F8 		movq	-264(%rbp), %rax
 3136      FEFFFF
 3137 2572 488D88A8 		leaq	424(%rax), %rcx
 3137      010000
 3138 2579 488B95D8 		movq	-296(%rbp), %rdx
 3138      FEFFFF
 3139 2580 488D45D0 		leaq	-48(%rbp), %rax
 3140 2584 4889CE   		movq	%rcx, %rsi
 3141 2587 4889C7   		movq	%rax, %rdi
 3142 258a E8000000 		call	bufDeepCopy@PLT
 3142      00
 3143 258f 89850CFF 		movl	%eax, -244(%rbp)
 3143      FFFF
 607:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3144              		.loc 1 607 0
 3145 2595 83BD0CFF 		cmpl	$0, -244(%rbp)
 3145      FFFF00
 3146 259c 7425     		je	.L207
 3147              		.loc 1 607 0 is_stmt 0 discriminator 1
 3148 259e 488B85D8 		movq	-296(%rbp), %rax
 3148      FEFFFF
 3149 25a5 488D3500 		leaq	.LC16(%rip), %rsi
 3149      000000
 3150 25ac 4889C7   		movq	%rax, %rdi
 3151 25af E8000000 		call	errPrefix@PLT
 3151      00
 3152 25b4 C78504FF 		movl	$1, -252(%rbp)
 3152      FFFF0100 
 3152      0000
 3153 25be E9ED0700 		jmp	.L132
 3153      00
 3154              	.L207:
 608:svf2csvf.c    **** 				fStatus = headTail(
 3155              		.loc 1 608 0 is_stmt 1
 3156 25c3 488B85F8 		movq	-264(%rbp), %rax
 3156      FEFFFF
 3157 25ca 448B80A0 		movl	416(%rax), %r8d
 3157      010000
 3158 25d1 488B85F8 		movq	-264(%rbp), %rax
 3158      FEFFFF
 3159 25d8 8B38     		movl	(%rax), %edi
 3160 25da 488B85F8 		movq	-264(%rbp), %rax
 3160      FEFFFF
 3161 25e1 8B88D000 		movl	208(%rax), %ecx
 3161      0000
 3162 25e7 488D55D0 		leaq	-48(%rbp), %rdx
 3163 25eb 488DB570 		leaq	-144(%rbp), %rsi
 3163      FFFFFF
 3164 25f2 488D4590 		leaq	-112(%rbp), %rax
 3165 25f6 4883EC08 		subq	$8, %rsp
 3166 25fa FFB5D8FE 		pushq	-296(%rbp)
 3166      FFFF
 3167 2600 4589C1   		movl	%r8d, %r9d
 3168 2603 4189F8   		movl	%edi, %r8d
 3169 2606 4889C7   		movq	%rax, %rdi
 3170 2609 E8000000 		call	headTail@PLT
 3170      00
 3171 260e 4883C410 		addq	$16, %rsp
 3172 2612 898514FF 		movl	%eax, -236(%rbp)
 3172      FFFF
 609:svf2csvf.c    **** 					&tmpBody1, &tmpHead, &tmpTail,
 610:svf2csvf.c    **** 					cxt->dataBody.numBits, cxt->dataHead.numBits, cxt->dataTail.numBits,
 611:svf2csvf.c    **** 					error);
 612:svf2csvf.c    **** 				if ( zeroMask || !tdo ) {
 3173              		.loc 1 612 0
 3174 2618 80BD03FF 		cmpb	$0, -253(%rbp)
 3174      FFFF00
 3175 261f 750E     		jne	.L208
 3176              		.loc 1 612 0 is_stmt 0 discriminator 1
 3177 2621 4883BD48 		cmpq	$0, -184(%rbp)
 3177      FFFFFF00 
 3178 2629 0F85CB00 		jne	.L209
 3178      0000
 3179              	.L208:
 613:svf2csvf.c    **** 					cxt->numCommands++;
 3180              		.loc 1 613 0 is_stmt 1
 3181 262f 488B85F8 		movq	-264(%rbp), %rax
 3181      FEFFFF
 3182 2636 8B809C02 		movl	668(%rax), %eax
 3182      0000
 3183 263c 8D5001   		leal	1(%rax), %edx
 3184 263f 488B85F8 		movq	-264(%rbp), %rax
 3184      FEFFFF
 3185 2646 89909C02 		movl	%edx, 668(%rax)
 3185      0000
 614:svf2csvf.c    **** 					bStatus = bufAppendByte(csvfBuf, XSDR, error);
 3186              		.loc 1 614 0
 3187 264c 488B95D8 		movq	-296(%rbp), %rdx
 3187      FEFFFF
 3188 2653 488B85E8 		movq	-280(%rbp), %rax
 3188      FEFFFF
 3189 265a BE030000 		movl	$3, %esi
 3189      00
 3190 265f 4889C7   		movq	%rax, %rdi
 3191 2662 E8000000 		call	bufAppendByte@PLT
 3191      00
 3192 2667 89850CFF 		movl	%eax, -244(%rbp)
 3192      FFFF
 615:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3193              		.loc 1 615 0
 3194 266d 83BD0CFF 		cmpl	$0, -244(%rbp)
 3194      FFFF00
 3195 2674 7425     		je	.L210
 3196              		.loc 1 615 0 is_stmt 0 discriminator 1
 3197 2676 488B85D8 		movq	-296(%rbp), %rax
 3197      FEFFFF
 3198 267d 488D3500 		leaq	.LC16(%rip), %rsi
 3198      000000
 3199 2684 4889C7   		movq	%rax, %rdi
 3200 2687 E8000000 		call	errPrefix@PLT
 3200      00
 3201 268c C78504FF 		movl	$1, -252(%rbp)
 3201      FFFF0100 
 3201      0000
 3202 2696 E9150700 		jmp	.L132
 3202      00
 3203              	.L210:
 616:svf2csvf.c    **** 					fStatus = appendSwapped(csvfBuf, tmpBody1.data, (uint32)tmpBody1.length, error);
 3204              		.loc 1 616 0 is_stmt 1
 3205 269b 488B4598 		movq	-104(%rbp), %rax
 3206 269f 89C7     		movl	%eax, %edi
 3207 26a1 488B7590 		movq	-112(%rbp), %rsi
 3208 26a5 488B95D8 		movq	-296(%rbp), %rdx
 3208      FEFFFF
 3209 26ac 488B85E8 		movq	-280(%rbp), %rax
 3209      FEFFFF
 3210 26b3 4889D1   		movq	%rdx, %rcx
 3211 26b6 89FA     		movl	%edi, %edx
 3212 26b8 4889C7   		movq	%rax, %rdi
 3213 26bb E866EAFF 		call	appendSwapped
 3213      FF
 3214 26c0 898514FF 		movl	%eax, -236(%rbp)
 3214      FFFF
 617:svf2csvf.c    **** 					CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3215              		.loc 1 617 0
 3216 26c6 83BD14FF 		cmpl	$0, -236(%rbp)
 3216      FFFF00
 3217 26cd 0F848002 		je	.L212
 3217      0000
 3218              		.loc 1 617 0 is_stmt 0 discriminator 1
 3219 26d3 488B85D8 		movq	-296(%rbp), %rax
 3219      FEFFFF
 3220 26da 488D3500 		leaq	.LC16(%rip), %rsi
 3220      000000
 3221 26e1 4889C7   		movq	%rax, %rdi
 3222 26e4 E8000000 		call	errPrefix@PLT
 3222      00
 3223 26e9 8B8514FF 		movl	-236(%rbp), %eax
 3223      FFFF
 3224 26ef 898504FF 		movl	%eax, -252(%rbp)
 3224      FFFF
 3225 26f5 E9B60600 		jmp	.L132
 3225      00
 3226              	.L209:
 618:svf2csvf.c    **** 				} else {
 619:svf2csvf.c    **** 					bStatus = bufDeepCopy(&tmpHead, &cxt->dataHead.tdo, error);
 3227              		.loc 1 619 0 is_stmt 1
 3228 26fa 488B85F8 		movq	-264(%rbp), %rax
 3228      FEFFFF
 3229 2701 488D4828 		leaq	40(%rax), %rcx
 3230 2705 488B95D8 		movq	-296(%rbp), %rdx
 3230      FEFFFF
 3231 270c 488D8570 		leaq	-144(%rbp), %rax
 3231      FFFFFF
 3232 2713 4889CE   		movq	%rcx, %rsi
 3233 2716 4889C7   		movq	%rax, %rdi
 3234 2719 E8000000 		call	bufDeepCopy@PLT
 3234      00
 3235 271e 89850CFF 		movl	%eax, -244(%rbp)
 3235      FFFF
 620:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3236              		.loc 1 620 0
 3237 2724 83BD0CFF 		cmpl	$0, -244(%rbp)
 3237      FFFF00
 3238 272b 7425     		je	.L213
 3239              		.loc 1 620 0 is_stmt 0 discriminator 1
 3240 272d 488B85D8 		movq	-296(%rbp), %rax
 3240      FEFFFF
 3241 2734 488D3500 		leaq	.LC16(%rip), %rsi
 3241      000000
 3242 273b 4889C7   		movq	%rax, %rdi
 3243 273e E8000000 		call	errPrefix@PLT
 3243      00
 3244 2743 C78504FF 		movl	$1, -252(%rbp)
 3244      FFFF0100 
 3244      0000
 3245 274d E95E0600 		jmp	.L132
 3245      00
 3246              	.L213:
 621:svf2csvf.c    **** 					bStatus = bufDeepCopy(&tmpBody2, &cxt->dataBody.tdo, error);
 3247              		.loc 1 621 0 is_stmt 1
 3248 2752 488B85F8 		movq	-264(%rbp), %rax
 3248      FEFFFF
 3249 2759 488D88F8 		leaq	248(%rax), %rcx
 3249      000000
 3250 2760 488B95D8 		movq	-296(%rbp), %rdx
 3250      FEFFFF
 3251 2767 488D45B0 		leaq	-80(%rbp), %rax
 3252 276b 4889CE   		movq	%rcx, %rsi
 3253 276e 4889C7   		movq	%rax, %rdi
 3254 2771 E8000000 		call	bufDeepCopy@PLT
 3254      00
 3255 2776 89850CFF 		movl	%eax, -244(%rbp)
 3255      FFFF
 622:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3256              		.loc 1 622 0
 3257 277c 83BD0CFF 		cmpl	$0, -244(%rbp)
 3257      FFFF00
 3258 2783 7425     		je	.L214
 3259              		.loc 1 622 0 is_stmt 0 discriminator 1
 3260 2785 488B85D8 		movq	-296(%rbp), %rax
 3260      FEFFFF
 3261 278c 488D3500 		leaq	.LC16(%rip), %rsi
 3261      000000
 3262 2793 4889C7   		movq	%rax, %rdi
 3263 2796 E8000000 		call	errPrefix@PLT
 3263      00
 3264 279b C78504FF 		movl	$1, -252(%rbp)
 3264      FFFF0100 
 3264      0000
 3265 27a5 E9060600 		jmp	.L132
 3265      00
 3266              	.L214:
 623:svf2csvf.c    **** 					bStatus = bufDeepCopy(&tmpTail, &cxt->dataTail.tdo, error);
 3267              		.loc 1 623 0 is_stmt 1
 3268 27aa 488B85F8 		movq	-264(%rbp), %rax
 3268      FEFFFF
 3269 27b1 488D88C8 		leaq	456(%rax), %rcx
 3269      010000
 3270 27b8 488B95D8 		movq	-296(%rbp), %rdx
 3270      FEFFFF
 3271 27bf 488D45D0 		leaq	-48(%rbp), %rax
 3272 27c3 4889CE   		movq	%rcx, %rsi
 3273 27c6 4889C7   		movq	%rax, %rdi
 3274 27c9 E8000000 		call	bufDeepCopy@PLT
 3274      00
 3275 27ce 89850CFF 		movl	%eax, -244(%rbp)
 3275      FFFF
 624:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3276              		.loc 1 624 0
 3277 27d4 83BD0CFF 		cmpl	$0, -244(%rbp)
 3277      FFFF00
 3278 27db 7425     		je	.L215
 3279              		.loc 1 624 0 is_stmt 0 discriminator 1
 3280 27dd 488B85D8 		movq	-296(%rbp), %rax
 3280      FEFFFF
 3281 27e4 488D3500 		leaq	.LC16(%rip), %rsi
 3281      000000
 3282 27eb 4889C7   		movq	%rax, %rdi
 3283 27ee E8000000 		call	errPrefix@PLT
 3283      00
 3284 27f3 C78504FF 		movl	$1, -252(%rbp)
 3284      FFFF0100 
 3284      0000
 3285 27fd E9AE0500 		jmp	.L132
 3285      00
 3286              	.L215:
 625:svf2csvf.c    **** 					fStatus = headTail(
 3287              		.loc 1 625 0 is_stmt 1
 3288 2802 488B85F8 		movq	-264(%rbp), %rax
 3288      FEFFFF
 3289 2809 448B80A0 		movl	416(%rax), %r8d
 3289      010000
 3290 2810 488B85F8 		movq	-264(%rbp), %rax
 3290      FEFFFF
 3291 2817 8B38     		movl	(%rax), %edi
 3292 2819 488B85F8 		movq	-264(%rbp), %rax
 3292      FEFFFF
 3293 2820 8B88D000 		movl	208(%rax), %ecx
 3293      0000
 3294 2826 488D55D0 		leaq	-48(%rbp), %rdx
 3295 282a 488DB570 		leaq	-144(%rbp), %rsi
 3295      FFFFFF
 3296 2831 488D45B0 		leaq	-80(%rbp), %rax
 3297 2835 4883EC08 		subq	$8, %rsp
 3298 2839 FFB5D8FE 		pushq	-296(%rbp)
 3298      FFFF
 3299 283f 4589C1   		movl	%r8d, %r9d
 3300 2842 4189F8   		movl	%edi, %r8d
 3301 2845 4889C7   		movq	%rax, %rdi
 3302 2848 E8000000 		call	headTail@PLT
 3302      00
 3303 284d 4883C410 		addq	$16, %rsp
 3304 2851 898514FF 		movl	%eax, -236(%rbp)
 3304      FFFF
 626:svf2csvf.c    **** 						&tmpBody2, &tmpHead, &tmpTail,
 627:svf2csvf.c    **** 						cxt->dataBody.numBits, cxt->dataHead.numBits, cxt->dataTail.numBits,
 628:svf2csvf.c    **** 						error);
 629:svf2csvf.c    **** 					if ( maxBufSize && tmpBody2.length > *maxBufSize ) {
 3305              		.loc 1 629 0
 3306 2857 4883BDE0 		cmpq	$0, -288(%rbp)
 3306      FEFFFF00 
 3307 285f 7423     		je	.L216
 3308              		.loc 1 629 0 is_stmt 0 discriminator 1
 3309 2861 488B55B8 		movq	-72(%rbp), %rdx
 3310 2865 488B85E0 		movq	-288(%rbp), %rax
 3310      FEFFFF
 3311 286c 8B00     		movl	(%rax), %eax
 3312 286e 89C0     		movl	%eax, %eax
 3313 2870 4839C2   		cmpq	%rax, %rdx
 3314 2873 760F     		jbe	.L216
 630:svf2csvf.c    **** 						*maxBufSize = (uint32)tmpBody2.length;
 3315              		.loc 1 630 0 is_stmt 1
 3316 2875 488B45B8 		movq	-72(%rbp), %rax
 3317 2879 89C2     		movl	%eax, %edx
 3318 287b 488B85E0 		movq	-288(%rbp), %rax
 3318      FEFFFF
 3319 2882 8910     		movl	%edx, (%rax)
 3320              	.L216:
 631:svf2csvf.c    **** 					}
 632:svf2csvf.c    **** 					cxt->numCommands++;
 3321              		.loc 1 632 0
 3322 2884 488B85F8 		movq	-264(%rbp), %rax
 3322      FEFFFF
 3323 288b 8B809C02 		movl	668(%rax), %eax
 3323      0000
 3324 2891 8D5001   		leal	1(%rax), %edx
 3325 2894 488B85F8 		movq	-264(%rbp), %rax
 3325      FEFFFF
 3326 289b 89909C02 		movl	%edx, 668(%rax)
 3326      0000
 633:svf2csvf.c    **** 					bStatus = bufAppendByte(csvfBuf, XSDRTDO, error);
 3327              		.loc 1 633 0
 3328 28a1 488B95D8 		movq	-296(%rbp), %rdx
 3328      FEFFFF
 3329 28a8 488B85E8 		movq	-280(%rbp), %rax
 3329      FEFFFF
 3330 28af BE090000 		movl	$9, %esi
 3330      00
 3331 28b4 4889C7   		movq	%rax, %rdi
 3332 28b7 E8000000 		call	bufAppendByte@PLT
 3332      00
 3333 28bc 89850CFF 		movl	%eax, -244(%rbp)
 3333      FFFF
 634:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3334              		.loc 1 634 0
 3335 28c2 83BD0CFF 		cmpl	$0, -244(%rbp)
 3335      FFFF00
 3336 28c9 7425     		je	.L217
 3337              		.loc 1 634 0 is_stmt 0 discriminator 1
 3338 28cb 488B85D8 		movq	-296(%rbp), %rax
 3338      FEFFFF
 3339 28d2 488D3500 		leaq	.LC16(%rip), %rsi
 3339      000000
 3340 28d9 4889C7   		movq	%rax, %rdi
 3341 28dc E8000000 		call	errPrefix@PLT
 3341      00
 3342 28e1 C78504FF 		movl	$1, -252(%rbp)
 3342      FFFF0100 
 3342      0000
 3343 28eb E9C00400 		jmp	.L132
 3343      00
 3344              	.L217:
 635:svf2csvf.c    **** 					fStatus = appendSwappedAndInterleaved(
 636:svf2csvf.c    **** 						csvfBuf, tmpBody1.data, tmpBody2.data, (uint32)tmpBody2.length, error);
 3345              		.loc 1 636 0 is_stmt 1
 3346 28f0 488B45B8 		movq	-72(%rbp), %rax
 635:svf2csvf.c    **** 					fStatus = appendSwappedAndInterleaved(
 3347              		.loc 1 635 0
 3348 28f4 89C7     		movl	%eax, %edi
 3349              		.loc 1 636 0
 3350 28f6 488B55B0 		movq	-80(%rbp), %rdx
 3351 28fa 488B7590 		movq	-112(%rbp), %rsi
 635:svf2csvf.c    **** 					fStatus = appendSwappedAndInterleaved(
 3352              		.loc 1 635 0
 3353 28fe 488B8DD8 		movq	-296(%rbp), %rcx
 3353      FEFFFF
 3354 2905 488B85E8 		movq	-280(%rbp), %rax
 3354      FEFFFF
 3355 290c 4989C8   		movq	%rcx, %r8
 3356 290f 89F9     		movl	%edi, %ecx
 3357 2911 4889C7   		movq	%rax, %rdi
 3358 2914 E81AE7FF 		call	appendSwappedAndInterleaved
 3358      FF
 3359 2919 898514FF 		movl	%eax, -236(%rbp)
 3359      FFFF
 637:svf2csvf.c    **** 					CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3360              		.loc 1 637 0
 3361 291f 83BD14FF 		cmpl	$0, -236(%rbp)
 3361      FFFF00
 3362 2926 0F844B04 		je	.L237
 3362      0000
 3363              		.loc 1 637 0 is_stmt 0 discriminator 1
 3364 292c 488B85D8 		movq	-296(%rbp), %rax
 3364      FEFFFF
 3365 2933 488D3500 		leaq	.LC16(%rip), %rsi
 3365      000000
 3366 293a 4889C7   		movq	%rax, %rdi
 3367 293d E8000000 		call	errPrefix@PLT
 3367      00
 3368 2942 8B8514FF 		movl	-236(%rbp), %eax
 3368      FFFF
 3369 2948 898504FF 		movl	%eax, -252(%rbp)
 3369      FFFF
 3370 294e E95D0400 		jmp	.L132
 3370      00
 3371              	.L212:
 638:svf2csvf.c    **** 				}
 639:svf2csvf.c    **** 				break;
 3372              		.loc 1 639 0 is_stmt 1 discriminator 8
 3373 2953 90       		nop
 3374 2954 E91E0400 		jmp	.L237
 3374      00
 3375              	.L187:
 3376              	.LBE6:
 640:svf2csvf.c    **** 			}
 641:svf2csvf.c    **** 		} else {
 642:svf2csvf.c    **** 			switch ( op ) {
 3377              		.loc 1 642 0
 3378 2959 8B8508FF 		movl	-248(%rbp), %eax
 3378      FFFF
 3379 295f 83F853   		cmpl	$83, %eax
 3380 2962 0F84FA00 		je	.L219
 3380      0000
 3381 2968 83F854   		cmpl	$84, %eax
 3382 296b 747E     		je	.L220
 3383 296d 83F848   		cmpl	$72, %eax
 3384 2970 7405     		je	.L221
 3385              	.LBE8:
 461:svf2csvf.c    **** 		// HIR/HDR, TIR/TDR, SIR/SDR are of the form "**R <length> [TDI (<tdi>)] [TDO (<tdo>)] [MASK (<ma
 3386              		.loc 1 461 0
 3387 2972 E9390400 		jmp	.L132
 3387      00
 3388              	.L221:
 3389              	.LBB9:
 643:svf2csvf.c    **** 			case HEAD:
 644:svf2csvf.c    **** 				fStatus = processLine(&cxt->insnHead, length, tdi, tdo, mask, error);
 3390              		.loc 1 644 0
 3391 2977 488B85F8 		movq	-264(%rbp), %rax
 3391      FEFFFF
 3392 297e 488D7868 		leaq	104(%rax), %rdi
 3393 2982 4C8B85D8 		movq	-296(%rbp), %r8
 3393      FEFFFF
 3394 2989 488BB550 		movq	-176(%rbp), %rsi
 3394      FFFFFF
 3395 2990 488B8D48 		movq	-184(%rbp), %rcx
 3395      FFFFFF
 3396 2997 488B9540 		movq	-192(%rbp), %rdx
 3396      FFFFFF
 3397 299e 8B8510FF 		movl	-240(%rbp), %eax
 3397      FFFF
 3398 29a4 4D89C1   		movq	%r8, %r9
 3399 29a7 4989F0   		movq	%rsi, %r8
 3400 29aa 89C6     		movl	%eax, %esi
 3401 29ac E8B4E3FF 		call	processLine
 3401      FF
 3402 29b1 898514FF 		movl	%eax, -236(%rbp)
 3402      FFFF
 645:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3403              		.loc 1 645 0
 3404 29b7 83BD14FF 		cmpl	$0, -236(%rbp)
 3404      FFFF00
 3405 29be 0F84B603 		je	.L238
 3405      0000
 3406              		.loc 1 645 0 is_stmt 0 discriminator 1
 3407 29c4 488B85D8 		movq	-296(%rbp), %rax
 3407      FEFFFF
 3408 29cb 488D3500 		leaq	.LC16(%rip), %rsi
 3408      000000
 3409 29d2 4889C7   		movq	%rax, %rdi
 3410 29d5 E8000000 		call	errPrefix@PLT
 3410      00
 3411 29da 8B8514FF 		movl	-236(%rbp), %eax
 3411      FFFF
 3412 29e0 898504FF 		movl	%eax, -252(%rbp)
 3412      FFFF
 3413 29e6 E9C50300 		jmp	.L132
 3413      00
 3414              	.L220:
 646:svf2csvf.c    **** 				break;
 647:svf2csvf.c    **** 			case TAIL:
 648:svf2csvf.c    **** 				fStatus = processLine(&cxt->insnTail, length, tdi, tdo, mask, error);
 3415              		.loc 1 648 0 is_stmt 1
 3416 29eb 488B85F8 		movq	-264(%rbp), %rax
 3416      FEFFFF
 3417 29f2 488DB808 		leaq	520(%rax), %rdi
 3417      020000
 3418 29f9 4C8B85D8 		movq	-296(%rbp), %r8
 3418      FEFFFF
 3419 2a00 488BB550 		movq	-176(%rbp), %rsi
 3419      FFFFFF
 3420 2a07 488B8D48 		movq	-184(%rbp), %rcx
 3420      FFFFFF
 3421 2a0e 488B9540 		movq	-192(%rbp), %rdx
 3421      FFFFFF
 3422 2a15 8B8510FF 		movl	-240(%rbp), %eax
 3422      FFFF
 3423 2a1b 4D89C1   		movq	%r8, %r9
 3424 2a1e 4989F0   		movq	%rsi, %r8
 3425 2a21 89C6     		movl	%eax, %esi
 3426 2a23 E83DE3FF 		call	processLine
 3426      FF
 3427 2a28 898514FF 		movl	%eax, -236(%rbp)
 3427      FFFF
 649:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3428              		.loc 1 649 0
 3429 2a2e 83BD14FF 		cmpl	$0, -236(%rbp)
 3429      FFFF00
 3430 2a35 0F844203 		je	.L239
 3430      0000
 3431              		.loc 1 649 0 is_stmt 0 discriminator 1
 3432 2a3b 488B85D8 		movq	-296(%rbp), %rax
 3432      FEFFFF
 3433 2a42 488D3500 		leaq	.LC16(%rip), %rsi
 3433      000000
 3434 2a49 4889C7   		movq	%rax, %rdi
 3435 2a4c E8000000 		call	errPrefix@PLT
 3435      00
 3436 2a51 8B8514FF 		movl	-236(%rbp), %eax
 3436      FFFF
 3437 2a57 898504FF 		movl	%eax, -252(%rbp)
 3437      FFFF
 3438 2a5d E94E0300 		jmp	.L132
 3438      00
 3439              	.L219:
 650:svf2csvf.c    **** 				break;
 651:svf2csvf.c    **** 			case BODY:
 652:svf2csvf.c    **** 				fStatus = processLine(&cxt->insnBody, length, tdi, tdo, mask, error);
 3440              		.loc 1 652 0 is_stmt 1
 3441 2a62 488B85F8 		movq	-264(%rbp), %rax
 3441      FEFFFF
 3442 2a69 488DB838 		leaq	312(%rax), %rdi
 3442      010000
 3443 2a70 4C8B85D8 		movq	-296(%rbp), %r8
 3443      FEFFFF
 3444 2a77 488BB550 		movq	-176(%rbp), %rsi
 3444      FFFFFF
 3445 2a7e 488B8D48 		movq	-184(%rbp), %rcx
 3445      FFFFFF
 3446 2a85 488B9540 		movq	-192(%rbp), %rdx
 3446      FFFFFF
 3447 2a8c 8B8510FF 		movl	-240(%rbp), %eax
 3447      FFFF
 3448 2a92 4D89C1   		movq	%r8, %r9
 3449 2a95 4989F0   		movq	%rsi, %r8
 3450 2a98 89C6     		movl	%eax, %esi
 3451 2a9a E8C6E2FF 		call	processLine
 3451      FF
 3452 2a9f 898514FF 		movl	%eax, -236(%rbp)
 3452      FFFF
 653:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3453              		.loc 1 653 0
 3454 2aa5 83BD14FF 		cmpl	$0, -236(%rbp)
 3454      FFFF00
 3455 2aac 7427     		je	.L224
 3456              		.loc 1 653 0 is_stmt 0 discriminator 1
 3457 2aae 488B85D8 		movq	-296(%rbp), %rax
 3457      FEFFFF
 3458 2ab5 488D3500 		leaq	.LC16(%rip), %rsi
 3458      000000
 3459 2abc 4889C7   		movq	%rax, %rdi
 3460 2abf E8000000 		call	errPrefix@PLT
 3460      00
 3461 2ac4 8B8514FF 		movl	-236(%rbp), %eax
 3461      FFFF
 3462 2aca 898504FF 		movl	%eax, -252(%rbp)
 3462      FFFF
 3463 2ad0 E9DB0200 		jmp	.L132
 3463      00
 3464              	.L224:
 654:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpHead, &cxt->insnHead.tdi, error);
 3465              		.loc 1 654 0 is_stmt 1
 3466 2ad5 488B85F8 		movq	-264(%rbp), %rax
 3466      FEFFFF
 3467 2adc 488D4870 		leaq	112(%rax), %rcx
 3468 2ae0 488B95D8 		movq	-296(%rbp), %rdx
 3468      FEFFFF
 3469 2ae7 488D8570 		leaq	-144(%rbp), %rax
 3469      FFFFFF
 3470 2aee 4889CE   		movq	%rcx, %rsi
 3471 2af1 4889C7   		movq	%rax, %rdi
 3472 2af4 E8000000 		call	bufDeepCopy@PLT
 3472      00
 3473 2af9 89850CFF 		movl	%eax, -244(%rbp)
 3473      FFFF
 655:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3474              		.loc 1 655 0
 3475 2aff 83BD0CFF 		cmpl	$0, -244(%rbp)
 3475      FFFF00
 3476 2b06 7425     		je	.L225
 3477              		.loc 1 655 0 is_stmt 0 discriminator 1
 3478 2b08 488B85D8 		movq	-296(%rbp), %rax
 3478      FEFFFF
 3479 2b0f 488D3500 		leaq	.LC16(%rip), %rsi
 3479      000000
 3480 2b16 4889C7   		movq	%rax, %rdi
 3481 2b19 E8000000 		call	errPrefix@PLT
 3481      00
 3482 2b1e C78504FF 		movl	$1, -252(%rbp)
 3482      FFFF0100 
 3482      0000
 3483 2b28 E9830200 		jmp	.L132
 3483      00
 3484              	.L225:
 656:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpBody1, &cxt->insnBody.tdi, error);
 3485              		.loc 1 656 0 is_stmt 1
 3486 2b2d 488B85F8 		movq	-264(%rbp), %rax
 3486      FEFFFF
 3487 2b34 488D8840 		leaq	320(%rax), %rcx
 3487      010000
 3488 2b3b 488B95D8 		movq	-296(%rbp), %rdx
 3488      FEFFFF
 3489 2b42 488D4590 		leaq	-112(%rbp), %rax
 3490 2b46 4889CE   		movq	%rcx, %rsi
 3491 2b49 4889C7   		movq	%rax, %rdi
 3492 2b4c E8000000 		call	bufDeepCopy@PLT
 3492      00
 3493 2b51 89850CFF 		movl	%eax, -244(%rbp)
 3493      FFFF
 657:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3494              		.loc 1 657 0
 3495 2b57 83BD0CFF 		cmpl	$0, -244(%rbp)
 3495      FFFF00
 3496 2b5e 7425     		je	.L226
 3497              		.loc 1 657 0 is_stmt 0 discriminator 1
 3498 2b60 488B85D8 		movq	-296(%rbp), %rax
 3498      FEFFFF
 3499 2b67 488D3500 		leaq	.LC16(%rip), %rsi
 3499      000000
 3500 2b6e 4889C7   		movq	%rax, %rdi
 3501 2b71 E8000000 		call	errPrefix@PLT
 3501      00
 3502 2b76 C78504FF 		movl	$1, -252(%rbp)
 3502      FFFF0100 
 3502      0000
 3503 2b80 E92B0200 		jmp	.L132
 3503      00
 3504              	.L226:
 658:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpTail, &cxt->insnTail.tdi, error);
 3505              		.loc 1 658 0 is_stmt 1
 3506 2b85 488B85F8 		movq	-264(%rbp), %rax
 3506      FEFFFF
 3507 2b8c 488D8810 		leaq	528(%rax), %rcx
 3507      020000
 3508 2b93 488B95D8 		movq	-296(%rbp), %rdx
 3508      FEFFFF
 3509 2b9a 488D45D0 		leaq	-48(%rbp), %rax
 3510 2b9e 4889CE   		movq	%rcx, %rsi
 3511 2ba1 4889C7   		movq	%rax, %rdi
 3512 2ba4 E8000000 		call	bufDeepCopy@PLT
 3512      00
 3513 2ba9 89850CFF 		movl	%eax, -244(%rbp)
 3513      FFFF
 659:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3514              		.loc 1 659 0
 3515 2baf 83BD0CFF 		cmpl	$0, -244(%rbp)
 3515      FFFF00
 3516 2bb6 7425     		je	.L227
 3517              		.loc 1 659 0 is_stmt 0 discriminator 1
 3518 2bb8 488B85D8 		movq	-296(%rbp), %rax
 3518      FEFFFF
 3519 2bbf 488D3500 		leaq	.LC16(%rip), %rsi
 3519      000000
 3520 2bc6 4889C7   		movq	%rax, %rdi
 3521 2bc9 E8000000 		call	errPrefix@PLT
 3521      00
 3522 2bce C78504FF 		movl	$1, -252(%rbp)
 3522      FFFF0100 
 3522      0000
 3523 2bd8 E9D30100 		jmp	.L132
 3523      00
 3524              	.L227:
 660:svf2csvf.c    **** 				fStatus = headTail(
 3525              		.loc 1 660 0 is_stmt 1
 3526 2bdd 488B85F8 		movq	-264(%rbp), %rax
 3526      FEFFFF
 3527 2be4 448B8008 		movl	520(%rax), %r8d
 3527      020000
 3528 2beb 488B85F8 		movq	-264(%rbp), %rax
 3528      FEFFFF
 3529 2bf2 8B7868   		movl	104(%rax), %edi
 3530 2bf5 488B85F8 		movq	-264(%rbp), %rax
 3530      FEFFFF
 3531 2bfc 8B883801 		movl	312(%rax), %ecx
 3531      0000
 3532 2c02 488D55D0 		leaq	-48(%rbp), %rdx
 3533 2c06 488DB570 		leaq	-144(%rbp), %rsi
 3533      FFFFFF
 3534 2c0d 488D4590 		leaq	-112(%rbp), %rax
 3535 2c11 4883EC08 		subq	$8, %rsp
 3536 2c15 FFB5D8FE 		pushq	-296(%rbp)
 3536      FFFF
 3537 2c1b 4589C1   		movl	%r8d, %r9d
 3538 2c1e 4189F8   		movl	%edi, %r8d
 3539 2c21 4889C7   		movq	%rax, %rdi
 3540 2c24 E8000000 		call	headTail@PLT
 3540      00
 3541 2c29 4883C410 		addq	$16, %rsp
 3542 2c2d 898514FF 		movl	%eax, -236(%rbp)
 3542      FFFF
 661:svf2csvf.c    **** 					&tmpBody1, &tmpHead, &tmpTail,
 662:svf2csvf.c    **** 					cxt->insnBody.numBits, cxt->insnHead.numBits, cxt->insnTail.numBits,
 663:svf2csvf.c    **** 					error);
 664:svf2csvf.c    **** 				cxt->numCommands++;
 3543              		.loc 1 664 0
 3544 2c33 488B85F8 		movq	-264(%rbp), %rax
 3544      FEFFFF
 3545 2c3a 8B809C02 		movl	668(%rax), %eax
 3545      0000
 3546 2c40 8D5001   		leal	1(%rax), %edx
 3547 2c43 488B85F8 		movq	-264(%rbp), %rax
 3547      FEFFFF
 3548 2c4a 89909C02 		movl	%edx, 668(%rax)
 3548      0000
 665:svf2csvf.c    **** 				bStatus = bufAppendByte(csvfBuf, XSIR, error);
 3549              		.loc 1 665 0
 3550 2c50 488B95D8 		movq	-296(%rbp), %rdx
 3550      FEFFFF
 3551 2c57 488B85E8 		movq	-280(%rbp), %rax
 3551      FEFFFF
 3552 2c5e BE020000 		movl	$2, %esi
 3552      00
 3553 2c63 4889C7   		movq	%rax, %rdi
 3554 2c66 E8000000 		call	bufAppendByte@PLT
 3554      00
 3555 2c6b 89850CFF 		movl	%eax, -244(%rbp)
 3555      FFFF
 666:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3556              		.loc 1 666 0
 3557 2c71 83BD0CFF 		cmpl	$0, -244(%rbp)
 3557      FFFF00
 3558 2c78 7425     		je	.L228
 3559              		.loc 1 666 0 is_stmt 0 discriminator 1
 3560 2c7a 488B85D8 		movq	-296(%rbp), %rax
 3560      FEFFFF
 3561 2c81 488D3500 		leaq	.LC16(%rip), %rsi
 3561      000000
 3562 2c88 4889C7   		movq	%rax, %rdi
 3563 2c8b E8000000 		call	errPrefix@PLT
 3563      00
 3564 2c90 C78504FF 		movl	$1, -252(%rbp)
 3564      FFFF0100 
 3564      0000
 3565 2c9a E9110100 		jmp	.L132
 3565      00
 3566              	.L228:
 667:svf2csvf.c    **** 				bStatus = bufAppendByte(csvfBuf, (uint8)(cxt->insnBody.numBits + cxt->insnHead.numBits + cxt->i
 3567              		.loc 1 667 0 is_stmt 1
 3568 2c9f 488B85F8 		movq	-264(%rbp), %rax
 3568      FEFFFF
 3569 2ca6 8B803801 		movl	312(%rax), %eax
 3569      0000
 3570 2cac 89C2     		movl	%eax, %edx
 3571 2cae 488B85F8 		movq	-264(%rbp), %rax
 3571      FEFFFF
 3572 2cb5 8B4068   		movl	104(%rax), %eax
 3573 2cb8 01C2     		addl	%eax, %edx
 3574 2cba 488B85F8 		movq	-264(%rbp), %rax
 3574      FEFFFF
 3575 2cc1 8B800802 		movl	520(%rax), %eax
 3575      0000
 3576 2cc7 01D0     		addl	%edx, %eax
 3577 2cc9 0FB6C8   		movzbl	%al, %ecx
 3578 2ccc 488B95D8 		movq	-296(%rbp), %rdx
 3578      FEFFFF
 3579 2cd3 488B85E8 		movq	-280(%rbp), %rax
 3579      FEFFFF
 3580 2cda 89CE     		movl	%ecx, %esi
 3581 2cdc 4889C7   		movq	%rax, %rdi
 3582 2cdf E8000000 		call	bufAppendByte@PLT
 3582      00
 3583 2ce4 89850CFF 		movl	%eax, -244(%rbp)
 3583      FFFF
 668:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3584              		.loc 1 668 0
 3585 2cea 83BD0CFF 		cmpl	$0, -244(%rbp)
 3585      FFFF00
 3586 2cf1 7425     		je	.L229
 3587              		.loc 1 668 0 is_stmt 0 discriminator 1
 3588 2cf3 488B85D8 		movq	-296(%rbp), %rax
 3588      FEFFFF
 3589 2cfa 488D3500 		leaq	.LC16(%rip), %rsi
 3589      000000
 3590 2d01 4889C7   		movq	%rax, %rdi
 3591 2d04 E8000000 		call	errPrefix@PLT
 3591      00
 3592 2d09 C78504FF 		movl	$1, -252(%rbp)
 3592      FFFF0100 
 3592      0000
 3593 2d13 E9980000 		jmp	.L132
 3593      00
 3594              	.L229:
 669:svf2csvf.c    **** 				fStatus = appendSwapped(csvfBuf, tmpBody1.data, (uint32)tmpBody1.length, error);
 3595              		.loc 1 669 0 is_stmt 1
 3596 2d18 488B4598 		movq	-104(%rbp), %rax
 3597 2d1c 89C7     		movl	%eax, %edi
 3598 2d1e 488B7590 		movq	-112(%rbp), %rsi
 3599 2d22 488B95D8 		movq	-296(%rbp), %rdx
 3599      FEFFFF
 3600 2d29 488B85E8 		movq	-280(%rbp), %rax
 3600      FEFFFF
 3601 2d30 4889D1   		movq	%rdx, %rcx
 3602 2d33 89FA     		movl	%edi, %edx
 3603 2d35 4889C7   		movq	%rax, %rdi
 3604 2d38 E8E9E3FF 		call	appendSwapped
 3604      FF
 3605 2d3d 898514FF 		movl	%eax, -236(%rbp)
 3605      FFFF
 670:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3606              		.loc 1 670 0
 3607 2d43 83BD14FF 		cmpl	$0, -236(%rbp)
 3607      FFFF00
 3608 2d4a 7434     		je	.L240
 3609              		.loc 1 670 0 is_stmt 0 discriminator 1
 3610 2d4c 488B85D8 		movq	-296(%rbp), %rax
 3610      FEFFFF
 3611 2d53 488D3500 		leaq	.LC16(%rip), %rsi
 3611      000000
 3612 2d5a 4889C7   		movq	%rax, %rdi
 3613 2d5d E8000000 		call	errPrefix@PLT
 3613      00
 3614 2d62 8B8514FF 		movl	-236(%rbp), %eax
 3614      FFFF
 3615 2d68 898504FF 		movl	%eax, -252(%rbp)
 3615      FFFF
 3616 2d6e 90       		nop
 3617 2d6f EB3F     		jmp	.L132
 3618              	.L235:
 3619              	.LBB7:
 555:svf2csvf.c    **** 			case TAIL:
 3620              		.loc 1 555 0 is_stmt 1
 3621 2d71 90       		nop
 3622 2d72 EB3C     		jmp	.L132
 3623              	.L236:
 559:svf2csvf.c    **** 			case BODY:
 3624              		.loc 1 559 0
 3625 2d74 90       		nop
 3626 2d75 EB39     		jmp	.L132
 3627              	.L237:
 639:svf2csvf.c    **** 			}
 3628              		.loc 1 639 0
 3629 2d77 90       		nop
 3630 2d78 EB36     		jmp	.L132
 3631              	.L238:
 3632              	.LBE7:
 646:svf2csvf.c    **** 			case TAIL:
 3633              		.loc 1 646 0
 3634 2d7a 90       		nop
 3635 2d7b EB33     		jmp	.L132
 3636              	.L239:
 650:svf2csvf.c    **** 			case BODY:
 3637              		.loc 1 650 0
 3638 2d7d 90       		nop
 3639 2d7e EB30     		jmp	.L132
 3640              	.L240:
 671:svf2csvf.c    **** 				break;
 3641              		.loc 1 671 0
 3642 2d80 90       		nop
 3643              	.LBE9:
 461:svf2csvf.c    **** 		// HIR/HDR, TIR/TDR, SIR/SDR are of the form "**R <length> [TDI (<tdi>)] [TDO (<tdo>)] [MASK (<ma
 3644              		.loc 1 461 0
 3645 2d81 EB2D     		jmp	.L132
 3646              	.L134:
 672:svf2csvf.c    **** 			}
 673:svf2csvf.c    **** 		}
 674:svf2csvf.c    **** 	} else {
 675:svf2csvf.c    **** 		CHECK_STATUS(
 3647              		.loc 1 675 0 discriminator 1
 3648 2d83 488B9558 		movq	-168(%rbp), %rdx
 3648      FFFFFF
 3649 2d8a 488B85D8 		movq	-296(%rbp), %rax
 3649      FEFFFF
 3650 2d91 488D3500 		leaq	.LC26(%rip), %rsi
 3650      000000
 3651 2d98 4889C7   		movq	%rax, %rdi
 3652 2d9b B8000000 		movl	$0, %eax
 3652      00
 3653 2da0 E8000000 		call	errRender@PLT
 3653      00
 3654 2da5 C78504FF 		movl	$10, -252(%rbp)
 3654      FFFF0A00 
 3654      0000
 3655 2daf 90       		nop
 3656              	.L132:
 676:svf2csvf.c    **** 			true, FL_SVF_PARSE_ERR, cleanup,
 677:svf2csvf.c    **** 			"parseLine(): Unrecognised command \"%s\"\n", line);
 678:svf2csvf.c    **** 	}
 679:svf2csvf.c    **** cleanup:
 680:svf2csvf.c    **** 	bufDestroy(&tmpHead);
 3657              		.loc 1 680 0
 3658 2db0 488D8570 		leaq	-144(%rbp), %rax
 3658      FFFFFF
 3659 2db7 4889C7   		movq	%rax, %rdi
 3660 2dba E8000000 		call	bufDestroy@PLT
 3660      00
 681:svf2csvf.c    **** 	bufDestroy(&tmpBody1);
 3661              		.loc 1 681 0
 3662 2dbf 488D4590 		leaq	-112(%rbp), %rax
 3663 2dc3 4889C7   		movq	%rax, %rdi
 3664 2dc6 E8000000 		call	bufDestroy@PLT
 3664      00
 682:svf2csvf.c    **** 	bufDestroy(&tmpBody2);
 3665              		.loc 1 682 0
 3666 2dcb 488D45B0 		leaq	-80(%rbp), %rax
 3667 2dcf 4889C7   		movq	%rax, %rdi
 3668 2dd2 E8000000 		call	bufDestroy@PLT
 3668      00
 683:svf2csvf.c    **** 	bufDestroy(&tmpTail);
 3669              		.loc 1 683 0
 3670 2dd7 488D45D0 		leaq	-48(%rbp), %rax
 3671 2ddb 4889C7   		movq	%rax, %rdi
 3672 2dde E8000000 		call	bufDestroy@PLT
 3672      00
 684:svf2csvf.c    **** 	return retVal;
 3673              		.loc 1 684 0
 3674 2de3 8B8504FF 		movl	-252(%rbp), %eax
 3674      FFFF
 685:svf2csvf.c    **** }
 3675              		.loc 1 685 0
 3676 2de9 488B4DF8 		movq	-8(%rbp), %rcx
 3677 2ded 6448330C 		xorq	%fs:40, %rcx
 3677      25280000 
 3677      00
 3678 2df6 7405     		je	.L232
 3679 2df8 E8000000 		call	__stack_chk_fail@PLT
 3679      00
 3680              	.L232:
 3681 2dfd C9       		leave
 3682              		.cfi_def_cfa 7, 8
 3683 2dfe C3       		ret
 3684              		.cfi_endproc
 3685              	.LFE18:
 3687              		.section	.rodata
 3688              	.LC27:
 3689 02c8 58434F4D 		.string	"XCOMPLETE"
 3689      504C4554 
 3689      4500
 3690              	.LC28:
 3691 02d2 5854444F 		.string	"XTDOMASK"
 3691      4D41534B 
 3691      00
 3692              	.LC29:
 3693 02db 58534952 		.string	"XSIR"
 3693      00
 3694              	.LC30:
 3695 02e0 58534452 		.string	"XSDR"
 3695      00
 3696              	.LC31:
 3697 02e5 5852554E 		.string	"XRUNTEST"
 3697      54455354 
 3697      00
 3698              	.LC32:
 3699 02ee 494C4C45 		.string	"ILLEGAL"
 3699      47414C00 
 3700              	.LC33:
 3701 02f6 58524550 		.string	"XREPEAT"
 3701      45415400 
 3702              	.LC34:
 3703 02fe 58534452 		.string	"XSDRSIZE"
 3703      53495A45 
 3703      00
 3704              	.LC35:
 3705 0307 58534452 		.string	"XSDRTDO"
 3705      54444F00 
 3706              	.LC36:
 3707 030f 58534554 		.string	"XSETSDRMASKS"
 3707      5344524D 
 3707      41534B53 
 3707      00
 3708              	.LC37:
 3709 031c 58534452 		.string	"XSDRINC"
 3709      494E4300 
 3710              	.LC38:
 3711 0324 58534452 		.string	"XSDRB"
 3711      4200
 3712              	.LC39:
 3713 032a 58534452 		.string	"XSDRC"
 3713      4300
 3714              	.LC40:
 3715 0330 58534452 		.string	"XSDRE"
 3715      4500
 3716              	.LC41:
 3717 0336 58534452 		.string	"XSDRTDOB"
 3717      54444F42 
 3717      00
 3718              	.LC42:
 3719 033f 58534452 		.string	"XSDRTDOC"
 3719      54444F43 
 3719      00
 3720              	.LC43:
 3721 0348 58534452 		.string	"XSDRTDOE"
 3721      54444F45 
 3721      00
 3722              	.LC44:
 3723 0351 58535441 		.string	"XSTATE"
 3723      544500
 3724              	.LC45:
 3725 0358 58454E44 		.string	"XENDIR"
 3725      495200
 3726              	.LC46:
 3727 035f 58454E44 		.string	"XENDDR"
 3727      445200
 3728              	.LC47:
 3729 0366 58534952 		.string	"XSIR2"
 3729      3200
 3730              	.LC48:
 3731 036c 58434F4D 		.string	"XCOMMENT"
 3731      4D454E54 
 3731      00
 3732              	.LC49:
 3733 0375 58574149 		.string	"XWAIT"
 3733      5400
 3734              		.section	.data.rel.ro.local,"aw",@progbits
 3735              		.align 32
 3738              	cmdNames:
 3739 0000 00000000 		.quad	.LC27
 3739      00000000 
 3740 0008 00000000 		.quad	.LC28
 3740      00000000 
 3741 0010 00000000 		.quad	.LC29
 3741      00000000 
 3742 0018 00000000 		.quad	.LC30
 3742      00000000 
 3743 0020 00000000 		.quad	.LC31
 3743      00000000 
 3744 0028 00000000 		.quad	.LC32
 3744      00000000 
 3745 0030 00000000 		.quad	.LC32
 3745      00000000 
 3746 0038 00000000 		.quad	.LC33
 3746      00000000 
 3747 0040 00000000 		.quad	.LC34
 3747      00000000 
 3748 0048 00000000 		.quad	.LC35
 3748      00000000 
 3749 0050 00000000 		.quad	.LC36
 3749      00000000 
 3750 0058 00000000 		.quad	.LC37
 3750      00000000 
 3751 0060 00000000 		.quad	.LC38
 3751      00000000 
 3752 0068 00000000 		.quad	.LC39
 3752      00000000 
 3753 0070 00000000 		.quad	.LC40
 3753      00000000 
 3754 0078 00000000 		.quad	.LC41
 3754      00000000 
 3755 0080 00000000 		.quad	.LC42
 3755      00000000 
 3756 0088 00000000 		.quad	.LC43
 3756      00000000 
 3757 0090 00000000 		.quad	.LC44
 3757      00000000 
 3758 0098 00000000 		.quad	.LC45
 3758      00000000 
 3759 00a0 00000000 		.quad	.LC46
 3759      00000000 
 3760 00a8 00000000 		.quad	.LC47
 3760      00000000 
 3761 00b0 00000000 		.quad	.LC48
 3761      00000000 
 3762 00b8 00000000 		.quad	.LC49
 3762      00000000 
 3763              		.text
 3764              		.globl	getCmdName
 3766              	getCmdName:
 3767              	.LFB19:
 686:svf2csvf.c    **** 
 687:svf2csvf.c    **** static const char *const cmdNames[] = {
 688:svf2csvf.c    **** 	"XCOMPLETE",    // 0
 689:svf2csvf.c    **** 	"XTDOMASK",     // 1
 690:svf2csvf.c    **** 	"XSIR",         // 2
 691:svf2csvf.c    **** 	"XSDR",         // 3
 692:svf2csvf.c    **** 	"XRUNTEST",     // 4
 693:svf2csvf.c    **** 	"ILLEGAL",      // 5
 694:svf2csvf.c    **** 	"ILLEGAL",      // 6
 695:svf2csvf.c    **** 	"XREPEAT",      // 7
 696:svf2csvf.c    **** 	"XSDRSIZE",     // 8
 697:svf2csvf.c    **** 	"XSDRTDO",      // 9
 698:svf2csvf.c    **** 	"XSETSDRMASKS", // A
 699:svf2csvf.c    **** 	"XSDRINC",      // B
 700:svf2csvf.c    **** 	"XSDRB",        // C
 701:svf2csvf.c    **** 	"XSDRC",        // D
 702:svf2csvf.c    **** 	"XSDRE",        // E
 703:svf2csvf.c    **** 	"XSDRTDOB",     // F
 704:svf2csvf.c    **** 	"XSDRTDOC",     // 10
 705:svf2csvf.c    **** 	"XSDRTDOE",     // 11
 706:svf2csvf.c    **** 	"XSTATE",       // 12
 707:svf2csvf.c    **** 	"XENDIR",       // 13
 708:svf2csvf.c    **** 	"XENDDR",       // 14
 709:svf2csvf.c    **** 	"XSIR2",        // 15
 710:svf2csvf.c    **** 	"XCOMMENT",     // 16
 711:svf2csvf.c    **** 	"XWAIT"         // 17
 712:svf2csvf.c    **** };
 713:svf2csvf.c    **** 
 714:svf2csvf.c    **** const char *getCmdName(CmdPtr cmd) {
 3768              		.loc 1 714 0
 3769              		.cfi_startproc
 3770 2dff 55       		pushq	%rbp
 3771              		.cfi_def_cfa_offset 16
 3772              		.cfi_offset 6, -16
 3773 2e00 4889E5   		movq	%rsp, %rbp
 3774              		.cfi_def_cfa_register 6
 3775 2e03 48897DE8 		movq	%rdi, -24(%rbp)
 715:svf2csvf.c    **** 	const uint8 op = *cmd;
 3776              		.loc 1 715 0
 3777 2e07 488B45E8 		movq	-24(%rbp), %rax
 3778 2e0b 0FB600   		movzbl	(%rax), %eax
 3779 2e0e 8845FF   		movb	%al, -1(%rbp)
 716:svf2csvf.c    **** 	return cmdNames[op];
 3780              		.loc 1 716 0
 3781 2e11 0FB645FF 		movzbl	-1(%rbp), %eax
 3782 2e15 4898     		cltq
 3783 2e17 488D14C5 		leaq	0(,%rax,8), %rdx
 3783      00000000 
 3784 2e1f 488D0500 		leaq	cmdNames(%rip), %rax
 3784      000000
 3785 2e26 488B0402 		movq	(%rdx,%rax), %rax
 717:svf2csvf.c    **** }
 3786              		.loc 1 717 0
 3787 2e2a 5D       		popq	%rbp
 3788              		.cfi_def_cfa 7, 8
 3789 2e2b C3       		ret
 3790              		.cfi_endproc
 3791              	.LFE19:
 3793              		.section	.rodata
 3796              	xrtZero:
 3797 037b 04       		.byte	4
 3798 037c 00       		.byte	0
 3799 037d 00       		.byte	0
 3800 037e 00       		.byte	0
 3801 037f 00       		.byte	0
 3802              		.align 4
 3805              	illegal32:
 3806 0380 FFFFFFFF 		.long	-1
 3807              		.text
 3808              		.globl	processIndex
 3810              	processIndex:
 3811              	.LFB20:
 718:svf2csvf.c    **** 
 719:svf2csvf.c    **** #define SET_BYTES(rt) rt.b[0] = (*ptr)[1]; rt.b[1] = (*ptr)[2]; rt.b[2] = (*ptr)[3]; rt.b[3] = (*pt
 720:svf2csvf.c    **** static const uint8 xrtZero[] = {XRUNTEST, 0, 0, 0, 0};
 721:svf2csvf.c    **** static const uint32 illegal32 = U32MAX;
 722:svf2csvf.c    **** 
 723:svf2csvf.c    **** void processIndex(const CmdPtr *srcIndex, CmdPtr *dstIndex) {
 3812              		.loc 1 723 0
 3813              		.cfi_startproc
 3814 2e2c 55       		pushq	%rbp
 3815              		.cfi_def_cfa_offset 16
 3816              		.cfi_offset 6, -16
 3817 2e2d 4889E5   		movq	%rsp, %rbp
 3818              		.cfi_def_cfa_register 6
 3819 2e30 4883EC40 		subq	$64, %rsp
 3820 2e34 48897DC8 		movq	%rdi, -56(%rbp)
 3821 2e38 488975C0 		movq	%rsi, -64(%rbp)
 3822              		.loc 1 723 0
 3823 2e3c 64488B04 		movq	%fs:40, %rax
 3823      25280000 
 3823      00
 3824 2e45 488945F8 		movq	%rax, -8(%rbp)
 3825 2e49 31C0     		xorl	%eax, %eax
 724:svf2csvf.c    **** 	union {
 725:svf2csvf.c    **** 		uint32 i;
 726:svf2csvf.c    **** 		uint8 b[4];
 727:svf2csvf.c    **** 	} oldrt, newrt;
 728:svf2csvf.c    **** 	const CmdPtr *ptr = srcIndex;
 3826              		.loc 1 728 0
 3827 2e4b 488B45C8 		movq	-56(%rbp), %rax
 3828 2e4f 488945D8 		movq	%rax, -40(%rbp)
 729:svf2csvf.c    **** 	uint8 thisCmd = **ptr;
 3829              		.loc 1 729 0
 3830 2e53 488B45D8 		movq	-40(%rbp), %rax
 3831 2e57 488B00   		movq	(%rax), %rax
 3832 2e5a 0FB600   		movzbl	(%rax), %eax
 3833 2e5d 8845D7   		movb	%al, -41(%rbp)
 730:svf2csvf.c    **** 	oldrt.i = illegal32;
 3834              		.loc 1 730 0
 3835 2e60 B8FFFFFF 		movl	$-1, %eax
 3835      FF
 3836 2e65 8945E0   		movl	%eax, -32(%rbp)
 731:svf2csvf.c    **** 	newrt.i = 0;
 3837              		.loc 1 731 0
 3838 2e68 C745F000 		movl	$0, -16(%rbp)
 3838      000000
 732:svf2csvf.c    **** 	while ( thisCmd != XCOMPLETE ) {
 3839              		.loc 1 732 0
 3840 2e6f E94F0100 		jmp	.L244
 3840      00
 3841              	.L247:
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 734:svf2csvf.c    **** 			thisCmd = **++ptr;
 3842              		.loc 1 734 0
 3843 2e74 488345D8 		addq	$8, -40(%rbp)
 3843      08
 3844 2e79 488B45D8 		movq	-40(%rbp), %rax
 3845 2e7d 488B00   		movq	(%rax), %rax
 3846 2e80 0FB600   		movzbl	(%rax), %eax
 3847 2e83 8845D7   		movb	%al, -41(%rbp)
 3848              	.L245:
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 3849              		.loc 1 733 0
 3850 2e86 807DD700 		cmpb	$0, -41(%rbp)
 3851 2e8a 7412     		je	.L246
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 3852              		.loc 1 733 0 is_stmt 0 discriminator 1
 3853 2e8c 807DD703 		cmpb	$3, -41(%rbp)
 3854 2e90 740C     		je	.L246
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 3855              		.loc 1 733 0 discriminator 2
 3856 2e92 807DD709 		cmpb	$9, -41(%rbp)
 3857 2e96 7406     		je	.L246
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 3858              		.loc 1 733 0 discriminator 3
 3859 2e98 807DD702 		cmpb	$2, -41(%rbp)
 3860 2e9c 75D6     		jne	.L247
 3861              	.L246:
 735:svf2csvf.c    **** 		}
 736:svf2csvf.c    **** 		if ( thisCmd != XCOMPLETE ) {
 3862              		.loc 1 736 0 is_stmt 1
 3863 2e9e 807DD700 		cmpb	$0, -41(%rbp)
 3864 2ea2 7412     		je	.L248
 737:svf2csvf.c    **** 			thisCmd = **++ptr;  // now points at command AFTER shift command
 3865              		.loc 1 737 0
 3866 2ea4 488345D8 		addq	$8, -40(%rbp)
 3866      08
 3867 2ea9 488B45D8 		movq	-40(%rbp), %rax
 3868 2ead 488B00   		movq	(%rax), %rax
 3869 2eb0 0FB600   		movzbl	(%rax), %eax
 3870 2eb3 8845D7   		movb	%al, -41(%rbp)
 3871              	.L248:
 738:svf2csvf.c    **** 		}
 739:svf2csvf.c    **** 		if ( thisCmd == XRUNTEST ) {
 3872              		.loc 1 739 0
 3873 2eb6 807DD704 		cmpb	$4, -41(%rbp)
 3874 2eba 0F85A400 		jne	.L249
 3874      0000
 740:svf2csvf.c    **** 			// There is an explicit XRUNTEST, so hoist it to the top, maybe...
 741:svf2csvf.c    **** 			SET_BYTES(newrt);
 3875              		.loc 1 741 0
 3876 2ec0 488B45D8 		movq	-40(%rbp), %rax
 3877 2ec4 488B00   		movq	(%rax), %rax
 3878 2ec7 0FB64001 		movzbl	1(%rax), %eax
 3879 2ecb 8845F0   		movb	%al, -16(%rbp)
 3880 2ece 488B45D8 		movq	-40(%rbp), %rax
 3881 2ed2 488B00   		movq	(%rax), %rax
 3882 2ed5 0FB64002 		movzbl	2(%rax), %eax
 3883 2ed9 8845F1   		movb	%al, -15(%rbp)
 3884 2edc 488B45D8 		movq	-40(%rbp), %rax
 3885 2ee0 488B00   		movq	(%rax), %rax
 3886 2ee3 0FB64003 		movzbl	3(%rax), %eax
 3887 2ee7 8845F2   		movb	%al, -14(%rbp)
 3888 2eea 488B45D8 		movq	-40(%rbp), %rax
 3889 2eee 488B00   		movq	(%rax), %rax
 3890 2ef1 0FB64004 		movzbl	4(%rax), %eax
 3891 2ef5 8845F3   		movb	%al, -13(%rbp)
 742:svf2csvf.c    **** 			if ( newrt.i != oldrt.i ) {
 3892              		.loc 1 742 0
 3893 2ef8 8B55F0   		movl	-16(%rbp), %edx
 3894 2efb 8B45E0   		movl	-32(%rbp), %eax
 3895 2efe 39C2     		cmpl	%eax, %edx
 3896 2f00 743C     		je	.L251
 743:svf2csvf.c    **** 				*dstIndex++ = *ptr;
 3897              		.loc 1 743 0
 3898 2f02 488B45C0 		movq	-64(%rbp), %rax
 3899 2f06 488D5008 		leaq	8(%rax), %rdx
 3900 2f0a 488955C0 		movq	%rdx, -64(%rbp)
 3901 2f0e 488B55D8 		movq	-40(%rbp), %rdx
 3902 2f12 488B12   		movq	(%rdx), %rdx
 3903 2f15 488910   		movq	%rdx, (%rax)
 744:svf2csvf.c    **** 				oldrt = newrt;
 3904              		.loc 1 744 0
 3905 2f18 8B45F0   		movl	-16(%rbp), %eax
 3906 2f1b 8945E0   		movl	%eax, -32(%rbp)
 745:svf2csvf.c    **** 			}
 746:svf2csvf.c    **** 
 747:svf2csvf.c    **** 			// ...then copy the commands...
 748:svf2csvf.c    **** 			while ( srcIndex < ptr ) {
 3907              		.loc 1 748 0
 3908 2f1e EB1E     		jmp	.L251
 3909              	.L252:
 749:svf2csvf.c    **** 				*dstIndex++ = *srcIndex++;
 3910              		.loc 1 749 0
 3911 2f20 488B45C0 		movq	-64(%rbp), %rax
 3912 2f24 488D5008 		leaq	8(%rax), %rdx
 3913 2f28 488955C0 		movq	%rdx, -64(%rbp)
 3914 2f2c 488B55C8 		movq	-56(%rbp), %rdx
 3915 2f30 488D4A08 		leaq	8(%rdx), %rcx
 3916 2f34 48894DC8 		movq	%rcx, -56(%rbp)
 3917 2f38 488B12   		movq	(%rdx), %rdx
 3918 2f3b 488910   		movq	%rdx, (%rax)
 3919              	.L251:
 748:svf2csvf.c    **** 				*dstIndex++ = *srcIndex++;
 3920              		.loc 1 748 0
 3921 2f3e 488B45C8 		movq	-56(%rbp), %rax
 3922 2f42 483B45D8 		cmpq	-40(%rbp), %rax
 3923 2f46 72D8     		jb	.L252
 750:svf2csvf.c    **** 			}
 751:svf2csvf.c    **** 
 752:svf2csvf.c    **** 			// ...and finally get the next command
 753:svf2csvf.c    **** 			ptr++;  // now points at command after XRUNTEST, ready for next loop
 3924              		.loc 1 753 0
 3925 2f48 488345D8 		addq	$8, -40(%rbp)
 3925      08
 754:svf2csvf.c    **** 			srcIndex = ptr;
 3926              		.loc 1 754 0
 3927 2f4d 488B45D8 		movq	-40(%rbp), %rax
 3928 2f51 488945C8 		movq	%rax, -56(%rbp)
 755:svf2csvf.c    **** 			thisCmd = **ptr;
 3929              		.loc 1 755 0
 3930 2f55 488B45D8 		movq	-40(%rbp), %rax
 3931 2f59 488B00   		movq	(%rax), %rax
 3932 2f5c 0FB600   		movzbl	(%rax), %eax
 3933 2f5f 8845D7   		movb	%al, -41(%rbp)
 3934 2f62 EB5F     		jmp	.L244
 3935              	.L249:
 756:svf2csvf.c    **** 		} else {
 757:svf2csvf.c    **** 			// There is not an explicit XRUNTEST, meaning it's implicitly zero:
 758:svf2csvf.c    **** 			newrt.i = 0;
 3936              		.loc 1 758 0
 3937 2f64 C745F000 		movl	$0, -16(%rbp)
 3937      000000
 759:svf2csvf.c    **** 			if ( newrt.i != oldrt.i ) {
 3938              		.loc 1 759 0
 3939 2f6b 8B55F0   		movl	-16(%rbp), %edx
 3940 2f6e 8B45E0   		movl	-32(%rbp), %eax
 3941 2f71 39C2     		cmpl	%eax, %edx
 3942 2f73 743C     		je	.L254
 760:svf2csvf.c    **** 				*dstIndex++ = xrtZero;
 3943              		.loc 1 760 0
 3944 2f75 488B45C0 		movq	-64(%rbp), %rax
 3945 2f79 488D5008 		leaq	8(%rax), %rdx
 3946 2f7d 488955C0 		movq	%rdx, -64(%rbp)
 3947 2f81 488D1500 		leaq	xrtZero(%rip), %rdx
 3947      000000
 3948 2f88 488910   		movq	%rdx, (%rax)
 761:svf2csvf.c    **** 				oldrt = newrt;
 3949              		.loc 1 761 0
 3950 2f8b 8B45F0   		movl	-16(%rbp), %eax
 3951 2f8e 8945E0   		movl	%eax, -32(%rbp)
 762:svf2csvf.c    **** 			}
 763:svf2csvf.c    **** 
 764:svf2csvf.c    **** 			// Copy the backlog
 765:svf2csvf.c    **** 			while ( srcIndex < ptr ) {
 3952              		.loc 1 765 0
 3953 2f91 EB1E     		jmp	.L254
 3954              	.L255:
 766:svf2csvf.c    **** 				*dstIndex++ = *srcIndex++;
 3955              		.loc 1 766 0
 3956 2f93 488B45C0 		movq	-64(%rbp), %rax
 3957 2f97 488D5008 		leaq	8(%rax), %rdx
 3958 2f9b 488955C0 		movq	%rdx, -64(%rbp)
 3959 2f9f 488B55C8 		movq	-56(%rbp), %rdx
 3960 2fa3 488D4A08 		leaq	8(%rdx), %rcx
 3961 2fa7 48894DC8 		movq	%rcx, -56(%rbp)
 3962 2fab 488B12   		movq	(%rdx), %rdx
 3963 2fae 488910   		movq	%rdx, (%rax)
 3964              	.L254:
 765:svf2csvf.c    **** 				*dstIndex++ = *srcIndex++;
 3965              		.loc 1 765 0
 3966 2fb1 488B45C8 		movq	-56(%rbp), %rax
 3967 2fb5 483B45D8 		cmpq	-40(%rbp), %rax
 3968 2fb9 72D8     		jb	.L255
 767:svf2csvf.c    **** 			}
 768:svf2csvf.c    **** 			srcIndex = ptr;
 3969              		.loc 1 768 0
 3970 2fbb 488B45D8 		movq	-40(%rbp), %rax
 3971 2fbf 488945C8 		movq	%rax, -56(%rbp)
 3972              	.L244:
 732:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 3973              		.loc 1 732 0
 3974 2fc3 807DD700 		cmpb	$0, -41(%rbp)
 3975 2fc7 0F85B9FE 		jne	.L245
 3975      FFFF
 769:svf2csvf.c    **** 		}
 770:svf2csvf.c    **** 	}
 771:svf2csvf.c    **** 	*dstIndex = *ptr;
 3976              		.loc 1 771 0
 3977 2fcd 488B45D8 		movq	-40(%rbp), %rax
 3978 2fd1 488B10   		movq	(%rax), %rdx
 3979 2fd4 488B45C0 		movq	-64(%rbp), %rax
 3980 2fd8 488910   		movq	%rdx, (%rax)
 772:svf2csvf.c    **** }
 3981              		.loc 1 772 0
 3982 2fdb 90       		nop
 3983 2fdc 488B45F8 		movq	-8(%rbp), %rax
 3984 2fe0 64483304 		xorq	%fs:40, %rax
 3984      25280000 
 3984      00
 3985 2fe9 7405     		je	.L257
 3986 2feb E8000000 		call	__stack_chk_fail@PLT
 3986      00
 3987              	.L257:
 3988 2ff0 C9       		leave
 3989              		.cfi_def_cfa 7, 8
 3990 2ff1 C3       		ret
 3991              		.cfi_endproc
 3992              	.LFE20:
 3994              		.section	.rodata
 3995              	.LC50:
 3996 0384 6275696C 		.string	"buildIndex()"
 3996      64496E64 
 3996      65782829 
 3996      00
 3997 0391 00000000 		.align 8
 3997      000000
 3998              	.LC51:
 3999 0398 6275696C 		.string	"buildIndex(): No XSDRSIZE before shift operation!"
 3999      64496E64 
 3999      65782829 
 3999      3A204E6F 
 3999      20585344 
 4000 03ca 00000000 		.align 8
 4000      0000
 4001              	.LC52:
 4002 03d0 6275696C 		.string	"buildIndex(): Unrecognised CSVF command (cmd=0x%02X, srcOffset=%d)!"
 4002      64496E64 
 4002      65782829 
 4002      3A20556E 
 4002      7265636F 
 4003 0414 00000000 		.align 8
 4004              	.LC53:
 4005 0418 6275696C 		.string	"buildIndex(): Unrecognised CSVF command (cmd=0x%02X)!"
 4005      64496E64 
 4005      65782829 
 4005      3A20556E 
 4005      7265636F 
 4006              		.text
 4007              		.globl	buildIndex
 4009              	buildIndex:
 4010              	.LFB21:
 773:svf2csvf.c    **** 
 774:svf2csvf.c    **** FLStatus buildIndex(struct ParseContext *cxt, struct Buffer *csvfBuf, const char **error) {
 4011              		.loc 1 774 0
 4012              		.cfi_startproc
 4013 2ff2 55       		pushq	%rbp
 4014              		.cfi_def_cfa_offset 16
 4015              		.cfi_offset 6, -16
 4016 2ff3 4889E5   		movq	%rsp, %rbp
 4017              		.cfi_def_cfa_register 6
 4018 2ff6 53       		pushq	%rbx
 4019 2ff7 4881EC98 		subq	$152, %rsp
 4019      000000
 4020              		.cfi_offset 3, -24
 4021 2ffe 4889BD78 		movq	%rdi, -136(%rbp)
 4021      FFFFFF
 4022 3005 4889B570 		movq	%rsi, -144(%rbp)
 4022      FFFFFF
 4023 300c 48899568 		movq	%rdx, -152(%rbp)
 4023      FFFFFF
 4024              		.loc 1 774 0
 4025 3013 64488B04 		movq	%fs:40, %rax
 4025      25280000 
 4025      00
 4026 301c 488945E8 		movq	%rax, -24(%rbp)
 4027 3020 31C0     		xorl	%eax, %eax
 775:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 4028              		.loc 1 775 0
 4029 3022 C7458400 		movl	$0, -124(%rbp)
 4029      000000
 776:svf2csvf.c    **** 	const uint8 *const start = csvfBuf->data;
 4030              		.loc 1 776 0
 4031 3029 488B8570 		movq	-144(%rbp), %rax
 4031      FFFFFF
 4032 3030 488B00   		movq	(%rax), %rax
 4033 3033 488945A8 		movq	%rax, -88(%rbp)
 777:svf2csvf.c    **** 	const uint8 *ptr = start;
 4034              		.loc 1 777 0
 4035 3037 488B45A8 		movq	-88(%rbp), %rax
 4036 303b 48894598 		movq	%rax, -104(%rbp)
 778:svf2csvf.c    **** 	struct Buffer newBuf = {0,};
 4037              		.loc 1 778 0
 4038 303f 48C745C0 		movq	$0, -64(%rbp)
 4038      00000000 
 4039 3047 48C745C8 		movq	$0, -56(%rbp)
 4039      00000000 
 4040 304f 48C745D0 		movq	$0, -48(%rbp)
 4040      00000000 
 4041 3057 48C745D8 		movq	$0, -40(%rbp)
 4041      00000000 
 779:svf2csvf.c    **** 	uint32 numBytes;
 780:svf2csvf.c    **** 	uint8 thisByte = *ptr;
 4042              		.loc 1 780 0
 4043 305f 488B4598 		movq	-104(%rbp), %rax
 4044 3063 0FB600   		movzbl	(%rax), %eax
 4045 3066 884583   		movb	%al, -125(%rbp)
 781:svf2csvf.c    **** 	int i = 0;
 4046              		.loc 1 781 0
 4047 3069 C7458C00 		movl	$0, -116(%rbp)
 4047      000000
 782:svf2csvf.c    **** 	int offset;
 783:svf2csvf.c    **** 	const CmdPtr *cmdPtr;
 784:svf2csvf.c    **** 	BufferStatus bStatus;
 785:svf2csvf.c    **** 	const uint8 **const srcIndex = malloc(sizeof(const uint8*) * cxt->numCommands);
 4048              		.loc 1 785 0
 4049 3070 488B8578 		movq	-136(%rbp), %rax
 4049      FFFFFF
 4050 3077 8B809C02 		movl	668(%rax), %eax
 4050      0000
 4051 307d 89C0     		movl	%eax, %eax
 4052 307f 48C1E003 		salq	$3, %rax
 4053 3083 4889C7   		movq	%rax, %rdi
 4054 3086 E8000000 		call	malloc@PLT
 4054      00
 4055 308b 488945B0 		movq	%rax, -80(%rbp)
 786:svf2csvf.c    **** 	const uint8 **const dstIndex = malloc(sizeof(const uint8*) * cxt->numCommands * 3 / 2); // abs wor
 4056              		.loc 1 786 0
 4057 308f 488B8578 		movq	-136(%rbp), %rax
 4057      FFFFFF
 4058 3096 8B809C02 		movl	668(%rax), %eax
 4058      0000
 4059 309c 89C2     		movl	%eax, %edx
 4060 309e 4889D0   		movq	%rdx, %rax
 4061 30a1 4801C0   		addq	%rax, %rax
 4062 30a4 4801D0   		addq	%rdx, %rax
 4063 30a7 48C1E003 		salq	$3, %rax
 4064 30ab 48D1E8   		shrq	%rax
 4065 30ae 4889C7   		movq	%rax, %rdi
 4066 30b1 E8000000 		call	malloc@PLT
 4066      00
 4067 30b6 488945B8 		movq	%rax, -72(%rbp)
 787:svf2csvf.c    **** 	CHECK_STATUS(srcIndex == NULL, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4068              		.loc 1 787 0
 4069 30ba 48837DB0 		cmpq	$0, -80(%rbp)
 4069      00
 4070 30bf 7522     		jne	.L259
 4071              		.loc 1 787 0 is_stmt 0 discriminator 1
 4072 30c1 488B8568 		movq	-152(%rbp), %rax
 4072      FFFFFF
 4073 30c8 488D3500 		leaq	.LC50(%rip), %rsi
 4073      000000
 4074 30cf 4889C7   		movq	%rax, %rdi
 4075 30d2 E8000000 		call	errPrefix@PLT
 4075      00
 4076 30d7 C7458401 		movl	$1, -124(%rbp)
 4076      000000
 4077 30de E9710500 		jmp	.L260
 4077      00
 4078              	.L259:
 788:svf2csvf.c    **** 	CHECK_STATUS(dstIndex == NULL, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4079              		.loc 1 788 0 is_stmt 1
 4080 30e3 48837DB8 		cmpq	$0, -72(%rbp)
 4080      00
 4081 30e8 7522     		jne	.L261
 4082              		.loc 1 788 0 is_stmt 0 discriminator 1
 4083 30ea 488B8568 		movq	-152(%rbp), %rax
 4083      FFFFFF
 4084 30f1 488D3500 		leaq	.LC50(%rip), %rsi
 4084      000000
 4085 30f8 4889C7   		movq	%rax, %rdi
 4086 30fb E8000000 		call	errPrefix@PLT
 4086      00
 4087 3100 C7458401 		movl	$1, -124(%rbp)
 4087      000000
 4088 3107 E9480500 		jmp	.L260
 4088      00
 4089              	.L261:
 789:svf2csvf.c    **** 	bStatus = bufInitialise(&newBuf, csvfBuf->length * 4 / 3, 0x00, error);  // common worst case
 4090              		.loc 1 789 0 is_stmt 1
 4091 310c 488B8570 		movq	-144(%rbp), %rax
 4091      FFFFFF
 4092 3113 488B4008 		movq	8(%rax), %rax
 4093 3117 48C1E002 		salq	$2, %rax
 4094 311b 48BAABAA 		movabsq	$-6148914691236517205, %rdx
 4094      AAAAAAAA 
 4094      AAAA
 4095 3125 48F7E2   		mulq	%rdx
 4096 3128 4889D6   		movq	%rdx, %rsi
 4097 312b 48D1EE   		shrq	%rsi
 4098 312e 488B9568 		movq	-152(%rbp), %rdx
 4098      FFFFFF
 4099 3135 488D45C0 		leaq	-64(%rbp), %rax
 4100 3139 4889D1   		movq	%rdx, %rcx
 4101 313c BA000000 		movl	$0, %edx
 4101      00
 4102 3141 4889C7   		movq	%rax, %rdi
 4103 3144 E8000000 		call	bufInitialise@PLT
 4103      00
 4104 3149 894590   		movl	%eax, -112(%rbp)
 790:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4105              		.loc 1 790 0
 4106 314c 837D9000 		cmpl	$0, -112(%rbp)
 4107 3150 7422     		je	.L262
 4108              		.loc 1 790 0 is_stmt 0 discriminator 1
 4109 3152 488B8568 		movq	-152(%rbp), %rax
 4109      FFFFFF
 4110 3159 488D3500 		leaq	.LC50(%rip), %rsi
 4110      000000
 4111 3160 4889C7   		movq	%rax, %rdi
 4112 3163 E8000000 		call	errPrefix@PLT
 4112      00
 4113 3168 C7458401 		movl	$1, -124(%rbp)
 4113      000000
 4114 316f E9E00400 		jmp	.L260
 4114      00
 4115              	.L262:
 791:svf2csvf.c    **** 	numBytes = illegal32;
 4116              		.loc 1 791 0 is_stmt 1
 4117 3174 C74588FF 		movl	$-1, -120(%rbp)
 4117      FFFFFF
 792:svf2csvf.c    **** 	while ( thisByte != XCOMPLETE ) {
 4118              		.loc 1 792 0
 4119 317b E9820100 		jmp	.L263
 4119      00
 4120              	.L276:
 793:svf2csvf.c    **** 		srcIndex[i++] = ptr++;
 4121              		.loc 1 793 0
 4122 3180 8B458C   		movl	-116(%rbp), %eax
 4123 3183 8D5001   		leal	1(%rax), %edx
 4124 3186 89558C   		movl	%edx, -116(%rbp)
 4125 3189 4898     		cltq
 4126 318b 488D14C5 		leaq	0(,%rax,8), %rdx
 4126      00000000 
 4127 3193 488B45B0 		movq	-80(%rbp), %rax
 4128 3197 488D0C02 		leaq	(%rdx,%rax), %rcx
 4129 319b 488B4598 		movq	-104(%rbp), %rax
 4130 319f 488D5001 		leaq	1(%rax), %rdx
 4131 31a3 48895598 		movq	%rdx, -104(%rbp)
 4132 31a7 488901   		movq	%rax, (%rcx)
 794:svf2csvf.c    **** 		switch ( thisByte ) {
 4133              		.loc 1 794 0
 4134 31aa 0FB64583 		movzbl	-125(%rbp), %eax
 4135 31ae 83F809   		cmpl	$9, %eax
 4136 31b1 0F870801 		ja	.L264
 4136      0000
 4137 31b7 89C0     		movl	%eax, %eax
 4138 31b9 488D1485 		leaq	0(,%rax,4), %rdx
 4138      00000000 
 4139 31c1 488D0500 		leaq	.L266(%rip), %rax
 4139      000000
 4140 31c8 8B0402   		movl	(%rdx,%rax), %eax
 4141 31cb 4863D0   		movslq	%eax, %rdx
 4142 31ce 488D0500 		leaq	.L266(%rip), %rax
 4142      000000
 4143 31d5 4801D0   		addq	%rdx, %rax
 4144 31d8 FFE0     		jmp	*%rax
 4145              		.section	.rodata
 4146 044e 0000     		.align 4
 4147              		.align 4
 4148              	.L266:
 4149 0450 00000000 		.long	.L264-.L266
 4150 0454 00000000 		.long	.L265-.L266
 4151 0458 00000000 		.long	.L267-.L266
 4152 045c 00000000 		.long	.L265-.L266
 4153 0460 00000000 		.long	.L268-.L266
 4154 0464 00000000 		.long	.L264-.L266
 4155 0468 00000000 		.long	.L264-.L266
 4156 046c 00000000 		.long	.L264-.L266
 4157 0470 00000000 		.long	.L269-.L266
 4158 0474 00000000 		.long	.L270-.L266
 4159              		.text
 4160              	.L269:
 795:svf2csvf.c    **** 		case XSDRSIZE:
 796:svf2csvf.c    **** 			numBytes = bitsToBytes(readLongBE(ptr));
 4161              		.loc 1 796 0
 4162 31da 488B4598 		movq	-104(%rbp), %rax
 4163 31de 4889C7   		movq	%rax, %rdi
 4164 31e1 E8000000 		call	readLongBE@PLT
 4164      00
 4165 31e6 C1E803   		shrl	$3, %eax
 4166 31e9 89C3     		movl	%eax, %ebx
 4167 31eb 488B4598 		movq	-104(%rbp), %rax
 4168 31ef 4889C7   		movq	%rax, %rdi
 4169 31f2 E8000000 		call	readLongBE@PLT
 4169      00
 4170 31f7 83E007   		andl	$7, %eax
 4171 31fa 85C0     		testl	%eax, %eax
 4172 31fc 7407     		je	.L271
 4173              		.loc 1 796 0 is_stmt 0 discriminator 1
 4174 31fe B8010000 		movl	$1, %eax
 4174      00
 4175 3203 EB05     		jmp	.L272
 4176              	.L271:
 4177              		.loc 1 796 0 discriminator 2
 4178 3205 B8000000 		movl	$0, %eax
 4178      00
 4179              	.L272:
 4180              		.loc 1 796 0 discriminator 4
 4181 320a 01D8     		addl	%ebx, %eax
 4182 320c 894588   		movl	%eax, -120(%rbp)
 4183              	.L268:
 797:svf2csvf.c    **** 		case XRUNTEST:
 798:svf2csvf.c    **** 			ptr += 4;
 4184              		.loc 1 798 0 is_stmt 1
 4185 320f 48834598 		addq	$4, -104(%rbp)
 4185      04
 799:svf2csvf.c    **** 			break;
 4186              		.loc 1 799 0
 4187 3214 E9DF0000 		jmp	.L273
 4187      00
 4188              	.L265:
 800:svf2csvf.c    **** 		case XTDOMASK:
 801:svf2csvf.c    **** 		case XSDR:
 802:svf2csvf.c    **** 			CHECK_STATUS(numBytes == illegal32, FL_INTERNAL_ERR, cleanup, "buildIndex(): No XSDRSIZE before 
 4189              		.loc 1 802 0
 4190 3219 B8FFFFFF 		movl	$-1, %eax
 4190      FF
 4191 321e 394588   		cmpl	%eax, -120(%rbp)
 4192 3221 7522     		jne	.L274
 4193              		.loc 1 802 0 is_stmt 0 discriminator 1
 4194 3223 488B8568 		movq	-152(%rbp), %rax
 4194      FFFFFF
 4195 322a 488D3500 		leaq	.LC51(%rip), %rsi
 4195      000000
 4196 3231 4889C7   		movq	%rax, %rdi
 4197 3234 E8000000 		call	errPrefix@PLT
 4197      00
 4198 3239 C7458417 		movl	$23, -124(%rbp)
 4198      000000
 4199 3240 E90F0400 		jmp	.L260
 4199      00
 4200              	.L274:
 803:svf2csvf.c    **** 			ptr += numBytes;
 4201              		.loc 1 803 0 is_stmt 1
 4202 3245 8B4588   		movl	-120(%rbp), %eax
 4203 3248 48014598 		addq	%rax, -104(%rbp)
 804:svf2csvf.c    **** 			break;
 4204              		.loc 1 804 0
 4205 324c E9A70000 		jmp	.L273
 4205      00
 4206              	.L270:
 805:svf2csvf.c    **** 		case XSDRTDO:
 806:svf2csvf.c    **** 			CHECK_STATUS(numBytes == illegal32, FL_INTERNAL_ERR, cleanup, "buildIndex(): No XSDRSIZE before 
 4207              		.loc 1 806 0
 4208 3251 B8FFFFFF 		movl	$-1, %eax
 4208      FF
 4209 3256 394588   		cmpl	%eax, -120(%rbp)
 4210 3259 7522     		jne	.L275
 4211              		.loc 1 806 0 is_stmt 0 discriminator 1
 4212 325b 488B8568 		movq	-152(%rbp), %rax
 4212      FFFFFF
 4213 3262 488D3500 		leaq	.LC51(%rip), %rsi
 4213      000000
 4214 3269 4889C7   		movq	%rax, %rdi
 4215 326c E8000000 		call	errPrefix@PLT
 4215      00
 4216 3271 C7458417 		movl	$23, -124(%rbp)
 4216      000000
 4217 3278 E9D70300 		jmp	.L260
 4217      00
 4218              	.L275:
 807:svf2csvf.c    **** 			ptr += 2*numBytes;
 4219              		.loc 1 807 0 is_stmt 1
 4220 327d 8B4588   		movl	-120(%rbp), %eax
 4221 3280 01C0     		addl	%eax, %eax
 4222 3282 89C0     		movl	%eax, %eax
 4223 3284 48014598 		addq	%rax, -104(%rbp)
 808:svf2csvf.c    **** 			break;
 4224              		.loc 1 808 0
 4225 3288 EB6E     		jmp	.L273
 4226              	.L267:
 809:svf2csvf.c    **** 		case XSIR:
 810:svf2csvf.c    **** 			offset = *ptr++;
 4227              		.loc 1 810 0
 4228 328a 488B4598 		movq	-104(%rbp), %rax
 4229 328e 488D5001 		leaq	1(%rax), %rdx
 4230 3292 48895598 		movq	%rdx, -104(%rbp)
 4231 3296 0FB600   		movzbl	(%rax), %eax
 4232 3299 0FB6C0   		movzbl	%al, %eax
 4233 329c 894594   		movl	%eax, -108(%rbp)
 811:svf2csvf.c    **** 			ptr += bitsToBytes(offset);
 4234              		.loc 1 811 0
 4235 329f 8B4594   		movl	-108(%rbp), %eax
 4236 32a2 C1F803   		sarl	$3, %eax
 4237 32a5 89C2     		movl	%eax, %edx
 4238 32a7 8B4594   		movl	-108(%rbp), %eax
 4239 32aa 83E007   		andl	$7, %eax
 4240 32ad 85C0     		testl	%eax, %eax
 4241 32af 0F95C0   		setne	%al
 4242 32b2 0FB6C0   		movzbl	%al, %eax
 4243 32b5 01D0     		addl	%edx, %eax
 4244 32b7 4898     		cltq
 4245 32b9 48014598 		addq	%rax, -104(%rbp)
 812:svf2csvf.c    **** 			break;
 4246              		.loc 1 812 0
 4247 32bd EB39     		jmp	.L273
 4248              	.L264:
 813:svf2csvf.c    **** 		default:
 814:svf2csvf.c    **** 			CHECK_STATUS(
 4249              		.loc 1 814 0
 4250 32bf 488B5598 		movq	-104(%rbp), %rdx
 4251 32c3 488B45A8 		movq	-88(%rbp), %rax
 4252 32c7 4889D1   		movq	%rdx, %rcx
 4253 32ca 4829C1   		subq	%rax, %rcx
 4254 32cd 0FB65583 		movzbl	-125(%rbp), %edx
 4255 32d1 488B8568 		movq	-152(%rbp), %rax
 4255      FFFFFF
 4256 32d8 488D3500 		leaq	.LC52(%rip), %rsi
 4256      000000
 4257 32df 4889C7   		movq	%rax, %rdi
 4258 32e2 B8000000 		movl	$0, %eax
 4258      00
 4259 32e7 E8000000 		call	errRender@PLT
 4259      00
 4260 32ec C7458417 		movl	$23, -124(%rbp)
 4260      000000
 4261 32f3 E95C0300 		jmp	.L260
 4261      00
 4262              	.L273:
 815:svf2csvf.c    **** 				true, FL_INTERNAL_ERR, cleanup,
 816:svf2csvf.c    **** 				"buildIndex(): Unrecognised CSVF command (cmd=0x%02X, srcOffset=%d)!", thisByte, ptr - start);
 817:svf2csvf.c    **** 		}
 818:svf2csvf.c    **** 		thisByte = *ptr;
 4263              		.loc 1 818 0
 4264 32f8 488B4598 		movq	-104(%rbp), %rax
 4265 32fc 0FB600   		movzbl	(%rax), %eax
 4266 32ff 884583   		movb	%al, -125(%rbp)
 4267              	.L263:
 792:svf2csvf.c    **** 		srcIndex[i++] = ptr++;
 4268              		.loc 1 792 0
 4269 3302 807D8300 		cmpb	$0, -125(%rbp)
 4270 3306 0F8574FE 		jne	.L276
 4270      FFFF
 819:svf2csvf.c    **** 	}
 820:svf2csvf.c    **** 	srcIndex[i++] = ptr++;
 4271              		.loc 1 820 0
 4272 330c 8B458C   		movl	-116(%rbp), %eax
 4273 330f 8D5001   		leal	1(%rax), %edx
 4274 3312 89558C   		movl	%edx, -116(%rbp)
 4275 3315 4898     		cltq
 4276 3317 488D14C5 		leaq	0(,%rax,8), %rdx
 4276      00000000 
 4277 331f 488B45B0 		movq	-80(%rbp), %rax
 4278 3323 488D0C02 		leaq	(%rdx,%rax), %rcx
 4279 3327 488B4598 		movq	-104(%rbp), %rax
 4280 332b 488D5001 		leaq	1(%rax), %rdx
 4281 332f 48895598 		movq	%rdx, -104(%rbp)
 4282 3333 488901   		movq	%rax, (%rcx)
 821:svf2csvf.c    **** 	processIndex(srcIndex, dstIndex);
 4283              		.loc 1 821 0
 4284 3336 488B55B8 		movq	-72(%rbp), %rdx
 4285 333a 488B45B0 		movq	-80(%rbp), %rax
 4286 333e 4889D6   		movq	%rdx, %rsi
 4287 3341 4889C7   		movq	%rax, %rdi
 4288 3344 E8000000 		call	processIndex@PLT
 4288      00
 822:svf2csvf.c    **** 	cmdPtr = dstIndex;
 4289              		.loc 1 822 0
 4290 3349 488B45B8 		movq	-72(%rbp), %rax
 4291 334d 488945A0 		movq	%rax, -96(%rbp)
 823:svf2csvf.c    **** 	ptr = *cmdPtr;
 4292              		.loc 1 823 0
 4293 3351 488B45A0 		movq	-96(%rbp), %rax
 4294 3355 488B00   		movq	(%rax), %rax
 4295 3358 48894598 		movq	%rax, -104(%rbp)
 824:svf2csvf.c    **** 	thisByte = *ptr;
 4296              		.loc 1 824 0
 4297 335c 488B4598 		movq	-104(%rbp), %rax
 4298 3360 0FB600   		movzbl	(%rax), %eax
 4299 3363 884583   		movb	%al, -125(%rbp)
 825:svf2csvf.c    **** 	numBytes = illegal32;
 4300              		.loc 1 825 0
 4301 3366 C74588FF 		movl	$-1, -120(%rbp)
 4301      FFFFFF
 826:svf2csvf.c    **** 	while ( thisByte != XCOMPLETE ) {
 4302              		.loc 1 826 0
 4303 336d E9820200 		jmp	.L277
 4303      00
 4304              	.L294:
 827:svf2csvf.c    **** 		switch ( thisByte ) {
 4305              		.loc 1 827 0
 4306 3372 0FB64583 		movzbl	-125(%rbp), %eax
 4307 3376 83F809   		cmpl	$9, %eax
 4308 3379 0F872602 		ja	.L278
 4308      0000
 4309 337f 89C0     		movl	%eax, %eax
 4310 3381 488D1485 		leaq	0(,%rax,4), %rdx
 4310      00000000 
 4311 3389 488D0500 		leaq	.L280(%rip), %rax
 4311      000000
 4312 3390 8B0402   		movl	(%rdx,%rax), %eax
 4313 3393 4863D0   		movslq	%eax, %rdx
 4314 3396 488D0500 		leaq	.L280(%rip), %rax
 4314      000000
 4315 339d 4801D0   		addq	%rdx, %rax
 4316 33a0 FFE0     		jmp	*%rax
 4317              		.section	.rodata
 4318              		.align 4
 4319              		.align 4
 4320              	.L280:
 4321 0478 00000000 		.long	.L278-.L280
 4322 047c 00000000 		.long	.L279-.L280
 4323 0480 00000000 		.long	.L281-.L280
 4324 0484 00000000 		.long	.L279-.L280
 4325 0488 00000000 		.long	.L282-.L280
 4326 048c 00000000 		.long	.L278-.L280
 4327 0490 00000000 		.long	.L278-.L280
 4328 0494 00000000 		.long	.L278-.L280
 4329 0498 00000000 		.long	.L283-.L280
 4330 049c 00000000 		.long	.L284-.L280
 4331              		.text
 4332              	.L283:
 828:svf2csvf.c    **** 		case XSDRSIZE:
 829:svf2csvf.c    **** 			numBytes = bitsToBytes(readLongBE(ptr + 1));
 4333              		.loc 1 829 0
 4334 33a2 488B4598 		movq	-104(%rbp), %rax
 4335 33a6 4883C001 		addq	$1, %rax
 4336 33aa 4889C7   		movq	%rax, %rdi
 4337 33ad E8000000 		call	readLongBE@PLT
 4337      00
 4338 33b2 C1E803   		shrl	$3, %eax
 4339 33b5 89C3     		movl	%eax, %ebx
 4340 33b7 488B4598 		movq	-104(%rbp), %rax
 4341 33bb 4883C001 		addq	$1, %rax
 4342 33bf 4889C7   		movq	%rax, %rdi
 4343 33c2 E8000000 		call	readLongBE@PLT
 4343      00
 4344 33c7 83E007   		andl	$7, %eax
 4345 33ca 85C0     		testl	%eax, %eax
 4346 33cc 7407     		je	.L285
 4347              		.loc 1 829 0 is_stmt 0 discriminator 1
 4348 33ce B8010000 		movl	$1, %eax
 4348      00
 4349 33d3 EB05     		jmp	.L286
 4350              	.L285:
 4351              		.loc 1 829 0 discriminator 2
 4352 33d5 B8000000 		movl	$0, %eax
 4352      00
 4353              	.L286:
 4354              		.loc 1 829 0 discriminator 4
 4355 33da 01D8     		addl	%ebx, %eax
 4356 33dc 894588   		movl	%eax, -120(%rbp)
 4357              	.L282:
 830:svf2csvf.c    **** 		case XRUNTEST:
 831:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuf, ptr, 5, error);
 4358              		.loc 1 831 0 is_stmt 1
 4359 33df 488B9568 		movq	-152(%rbp), %rdx
 4359      FFFFFF
 4360 33e6 488B7598 		movq	-104(%rbp), %rsi
 4361 33ea 488D45C0 		leaq	-64(%rbp), %rax
 4362 33ee 4889D1   		movq	%rdx, %rcx
 4363 33f1 BA050000 		movl	$5, %edx
 4363      00
 4364 33f6 4889C7   		movq	%rax, %rdi
 4365 33f9 E8000000 		call	bufAppendBlock@PLT
 4365      00
 4366 33fe 894590   		movl	%eax, -112(%rbp)
 832:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4367              		.loc 1 832 0
 4368 3401 837D9000 		cmpl	$0, -112(%rbp)
 4369 3405 0F84C501 		je	.L300
 4369      0000
 4370              		.loc 1 832 0 is_stmt 0 discriminator 1
 4371 340b 488B8568 		movq	-152(%rbp), %rax
 4371      FFFFFF
 4372 3412 488D3500 		leaq	.LC50(%rip), %rsi
 4372      000000
 4373 3419 4889C7   		movq	%rax, %rdi
 4374 341c E8000000 		call	errPrefix@PLT
 4374      00
 4375 3421 C7458401 		movl	$1, -124(%rbp)
 4375      000000
 4376 3428 E9270200 		jmp	.L260
 4376      00
 4377              	.L279:
 833:svf2csvf.c    **** 			break;
 834:svf2csvf.c    **** 		case XTDOMASK:
 835:svf2csvf.c    **** 		case XSDR:
 836:svf2csvf.c    **** 			CHECK_STATUS(numBytes == illegal32, FL_INTERNAL_ERR, cleanup, "buildIndex(): No XSDRSIZE before 
 4378              		.loc 1 836 0 is_stmt 1
 4379 342d B8FFFFFF 		movl	$-1, %eax
 4379      FF
 4380 3432 394588   		cmpl	%eax, -120(%rbp)
 4381 3435 7522     		jne	.L289
 4382              		.loc 1 836 0 is_stmt 0 discriminator 1
 4383 3437 488B8568 		movq	-152(%rbp), %rax
 4383      FFFFFF
 4384 343e 488D3500 		leaq	.LC51(%rip), %rsi
 4384      000000
 4385 3445 4889C7   		movq	%rax, %rdi
 4386 3448 E8000000 		call	errPrefix@PLT
 4386      00
 4387 344d C7458417 		movl	$23, -124(%rbp)
 4387      000000
 4388 3454 E9FB0100 		jmp	.L260
 4388      00
 4389              	.L289:
 837:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuf, ptr, numBytes + 1, error);
 4390              		.loc 1 837 0 is_stmt 1
 4391 3459 8B4588   		movl	-120(%rbp), %eax
 4392 345c 83C001   		addl	$1, %eax
 4393 345f 89C7     		movl	%eax, %edi
 4394 3461 488B9568 		movq	-152(%rbp), %rdx
 4394      FFFFFF
 4395 3468 488B7598 		movq	-104(%rbp), %rsi
 4396 346c 488D45C0 		leaq	-64(%rbp), %rax
 4397 3470 4889D1   		movq	%rdx, %rcx
 4398 3473 4889FA   		movq	%rdi, %rdx
 4399 3476 4889C7   		movq	%rax, %rdi
 4400 3479 E8000000 		call	bufAppendBlock@PLT
 4400      00
 4401 347e 894590   		movl	%eax, -112(%rbp)
 838:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4402              		.loc 1 838 0
 4403 3481 837D9000 		cmpl	$0, -112(%rbp)
 4404 3485 0F844801 		je	.L301
 4404      0000
 4405              		.loc 1 838 0 is_stmt 0 discriminator 1
 4406 348b 488B8568 		movq	-152(%rbp), %rax
 4406      FFFFFF
 4407 3492 488D3500 		leaq	.LC50(%rip), %rsi
 4407      000000
 4408 3499 4889C7   		movq	%rax, %rdi
 4409 349c E8000000 		call	errPrefix@PLT
 4409      00
 4410 34a1 C7458401 		movl	$1, -124(%rbp)
 4410      000000
 4411 34a8 E9A70100 		jmp	.L260
 4411      00
 4412              	.L284:
 839:svf2csvf.c    **** 			break;
 840:svf2csvf.c    **** 		case XSDRTDO:
 841:svf2csvf.c    **** 			CHECK_STATUS(numBytes == illegal32, FL_INTERNAL_ERR, cleanup, "buildIndex(): No XSDRSIZE before 
 4413              		.loc 1 841 0 is_stmt 1
 4414 34ad B8FFFFFF 		movl	$-1, %eax
 4414      FF
 4415 34b2 394588   		cmpl	%eax, -120(%rbp)
 4416 34b5 7522     		jne	.L291
 4417              		.loc 1 841 0 is_stmt 0 discriminator 1
 4418 34b7 488B8568 		movq	-152(%rbp), %rax
 4418      FFFFFF
 4419 34be 488D3500 		leaq	.LC51(%rip), %rsi
 4419      000000
 4420 34c5 4889C7   		movq	%rax, %rdi
 4421 34c8 E8000000 		call	errPrefix@PLT
 4421      00
 4422 34cd C7458417 		movl	$23, -124(%rbp)
 4422      000000
 4423 34d4 E97B0100 		jmp	.L260
 4423      00
 4424              	.L291:
 842:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuf, ptr, 2*numBytes + 1, error);
 4425              		.loc 1 842 0 is_stmt 1
 4426 34d9 8B4588   		movl	-120(%rbp), %eax
 4427 34dc 01C0     		addl	%eax, %eax
 4428 34de 83C001   		addl	$1, %eax
 4429 34e1 89C7     		movl	%eax, %edi
 4430 34e3 488B9568 		movq	-152(%rbp), %rdx
 4430      FFFFFF
 4431 34ea 488B7598 		movq	-104(%rbp), %rsi
 4432 34ee 488D45C0 		leaq	-64(%rbp), %rax
 4433 34f2 4889D1   		movq	%rdx, %rcx
 4434 34f5 4889FA   		movq	%rdi, %rdx
 4435 34f8 4889C7   		movq	%rax, %rdi
 4436 34fb E8000000 		call	bufAppendBlock@PLT
 4436      00
 4437 3500 894590   		movl	%eax, -112(%rbp)
 843:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4438              		.loc 1 843 0
 4439 3503 837D9000 		cmpl	$0, -112(%rbp)
 4440 3507 0F84C900 		je	.L302
 4440      0000
 4441              		.loc 1 843 0 is_stmt 0 discriminator 1
 4442 350d 488B8568 		movq	-152(%rbp), %rax
 4442      FFFFFF
 4443 3514 488D3500 		leaq	.LC50(%rip), %rsi
 4443      000000
 4444 351b 4889C7   		movq	%rax, %rdi
 4445 351e E8000000 		call	errPrefix@PLT
 4445      00
 4446 3523 C7458401 		movl	$1, -124(%rbp)
 4446      000000
 4447 352a E9250100 		jmp	.L260
 4447      00
 4448              	.L281:
 844:svf2csvf.c    **** 			break;
 845:svf2csvf.c    **** 		case XSIR:
 846:svf2csvf.c    **** 			offset = ptr[1];
 4449              		.loc 1 846 0 is_stmt 1
 4450 352f 488B4598 		movq	-104(%rbp), %rax
 4451 3533 4883C001 		addq	$1, %rax
 4452 3537 0FB600   		movzbl	(%rax), %eax
 4453 353a 0FB6C0   		movzbl	%al, %eax
 4454 353d 894594   		movl	%eax, -108(%rbp)
 847:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuf, ptr, (uint32)(bitsToBytes(offset) + 2), error);
 4455              		.loc 1 847 0
 4456 3540 8B4594   		movl	-108(%rbp), %eax
 4457 3543 C1F803   		sarl	$3, %eax
 4458 3546 89C2     		movl	%eax, %edx
 4459 3548 8B4594   		movl	-108(%rbp), %eax
 4460 354b 83E007   		andl	$7, %eax
 4461 354e 85C0     		testl	%eax, %eax
 4462 3550 0F95C0   		setne	%al
 4463 3553 0FB6C0   		movzbl	%al, %eax
 4464 3556 01D0     		addl	%edx, %eax
 4465 3558 83C002   		addl	$2, %eax
 4466 355b 89C7     		movl	%eax, %edi
 4467 355d 488B9568 		movq	-152(%rbp), %rdx
 4467      FFFFFF
 4468 3564 488B7598 		movq	-104(%rbp), %rsi
 4469 3568 488D45C0 		leaq	-64(%rbp), %rax
 4470 356c 4889D1   		movq	%rdx, %rcx
 4471 356f 4889FA   		movq	%rdi, %rdx
 4472 3572 4889C7   		movq	%rax, %rdi
 4473 3575 E8000000 		call	bufAppendBlock@PLT
 4473      00
 4474 357a 894590   		movl	%eax, -112(%rbp)
 848:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4475              		.loc 1 848 0
 4476 357d 837D9000 		cmpl	$0, -112(%rbp)
 4477 3581 7456     		je	.L303
 4478              		.loc 1 848 0 is_stmt 0 discriminator 1
 4479 3583 488B8568 		movq	-152(%rbp), %rax
 4479      FFFFFF
 4480 358a 488D3500 		leaq	.LC50(%rip), %rsi
 4480      000000
 4481 3591 4889C7   		movq	%rax, %rdi
 4482 3594 E8000000 		call	errPrefix@PLT
 4482      00
 4483 3599 C7458401 		movl	$1, -124(%rbp)
 4483      000000
 4484 35a0 E9AF0000 		jmp	.L260
 4484      00
 4485              	.L278:
 849:svf2csvf.c    **** 			break;
 850:svf2csvf.c    **** 		default:
 851:svf2csvf.c    **** 			CHECK_STATUS(
 4486              		.loc 1 851 0 is_stmt 1
 4487 35a5 0FB65583 		movzbl	-125(%rbp), %edx
 4488 35a9 488B8568 		movq	-152(%rbp), %rax
 4488      FFFFFF
 4489 35b0 488D3500 		leaq	.LC53(%rip), %rsi
 4489      000000
 4490 35b7 4889C7   		movq	%rax, %rdi
 4491 35ba B8000000 		movl	$0, %eax
 4491      00
 4492 35bf E8000000 		call	errRender@PLT
 4492      00
 4493 35c4 C7458417 		movl	$23, -124(%rbp)
 4493      000000
 4494 35cb E9840000 		jmp	.L260
 4494      00
 4495              	.L300:
 833:svf2csvf.c    **** 		case XTDOMASK:
 4496              		.loc 1 833 0
 4497 35d0 90       		nop
 4498 35d1 EB07     		jmp	.L288
 4499              	.L301:
 839:svf2csvf.c    **** 		case XSDRTDO:
 4500              		.loc 1 839 0
 4501 35d3 90       		nop
 4502 35d4 EB04     		jmp	.L288
 4503              	.L302:
 844:svf2csvf.c    **** 		case XSIR:
 4504              		.loc 1 844 0
 4505 35d6 90       		nop
 4506 35d7 EB01     		jmp	.L288
 4507              	.L303:
 849:svf2csvf.c    **** 		default:
 4508              		.loc 1 849 0
 4509 35d9 90       		nop
 4510              	.L288:
 852:svf2csvf.c    **** 				true, FL_INTERNAL_ERR, cleanup,
 853:svf2csvf.c    **** 				"buildIndex(): Unrecognised CSVF command (cmd=0x%02X)!", thisByte);
 854:svf2csvf.c    **** 		}
 855:svf2csvf.c    **** 		cmdPtr++;
 4511              		.loc 1 855 0
 4512 35da 488345A0 		addq	$8, -96(%rbp)
 4512      08
 856:svf2csvf.c    **** 		ptr = *cmdPtr;
 4513              		.loc 1 856 0
 4514 35df 488B45A0 		movq	-96(%rbp), %rax
 4515 35e3 488B00   		movq	(%rax), %rax
 4516 35e6 48894598 		movq	%rax, -104(%rbp)
 857:svf2csvf.c    **** 		thisByte = *ptr;
 4517              		.loc 1 857 0
 4518 35ea 488B4598 		movq	-104(%rbp), %rax
 4519 35ee 0FB600   		movzbl	(%rax), %eax
 4520 35f1 884583   		movb	%al, -125(%rbp)
 4521              	.L277:
 826:svf2csvf.c    **** 		switch ( thisByte ) {
 4522              		.loc 1 826 0
 4523 35f4 807D8300 		cmpb	$0, -125(%rbp)
 4524 35f8 0F8574FD 		jne	.L294
 4524      FFFF
 858:svf2csvf.c    **** 	}
 859:svf2csvf.c    **** 	bStatus = bufAppendByte(&newBuf, XCOMPLETE, error);
 4525              		.loc 1 859 0
 4526 35fe 488B9568 		movq	-152(%rbp), %rdx
 4526      FFFFFF
 4527 3605 488D45C0 		leaq	-64(%rbp), %rax
 4528 3609 BE000000 		movl	$0, %esi
 4528      00
 4529 360e 4889C7   		movq	%rax, %rdi
 4530 3611 E8000000 		call	bufAppendByte@PLT
 4530      00
 4531 3616 894590   		movl	%eax, -112(%rbp)
 860:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4532              		.loc 1 860 0
 4533 3619 837D9000 		cmpl	$0, -112(%rbp)
 4534 361d 741F     		je	.L295
 4535              		.loc 1 860 0 is_stmt 0 discriminator 1
 4536 361f 488B8568 		movq	-152(%rbp), %rax
 4536      FFFFFF
 4537 3626 488D3500 		leaq	.LC50(%rip), %rsi
 4537      000000
 4538 362d 4889C7   		movq	%rax, %rdi
 4539 3630 E8000000 		call	errPrefix@PLT
 4539      00
 4540 3635 C7458401 		movl	$1, -124(%rbp)
 4540      000000
 4541 363c EB16     		jmp	.L260
 4542              	.L295:
 861:svf2csvf.c    **** 	bufSwap(&newBuf, csvfBuf);
 4543              		.loc 1 861 0 is_stmt 1
 4544 363e 488B9570 		movq	-144(%rbp), %rdx
 4544      FFFFFF
 4545 3645 488D45C0 		leaq	-64(%rbp), %rax
 4546 3649 4889D6   		movq	%rdx, %rsi
 4547 364c 4889C7   		movq	%rax, %rdi
 4548 364f E8000000 		call	bufSwap@PLT
 4548      00
 4549              	.L260:
 862:svf2csvf.c    **** cleanup:
 863:svf2csvf.c    **** 	if ( dstIndex ) {
 4550              		.loc 1 863 0
 4551 3654 48837DB8 		cmpq	$0, -72(%rbp)
 4551      00
 4552 3659 740C     		je	.L296
 864:svf2csvf.c    **** 		free((void*)dstIndex);
 4553              		.loc 1 864 0
 4554 365b 488B45B8 		movq	-72(%rbp), %rax
 4555 365f 4889C7   		movq	%rax, %rdi
 4556 3662 E8000000 		call	free@PLT
 4556      00
 4557              	.L296:
 865:svf2csvf.c    **** 	}
 866:svf2csvf.c    **** 	if ( srcIndex ) {
 4558              		.loc 1 866 0
 4559 3667 48837DB0 		cmpq	$0, -80(%rbp)
 4559      00
 4560 366c 740C     		je	.L297
 867:svf2csvf.c    **** 		free((void*)srcIndex);
 4561              		.loc 1 867 0
 4562 366e 488B45B0 		movq	-80(%rbp), %rax
 4563 3672 4889C7   		movq	%rax, %rdi
 4564 3675 E8000000 		call	free@PLT
 4564      00
 4565              	.L297:
 868:svf2csvf.c    **** 	}
 869:svf2csvf.c    **** 	bufDestroy(&newBuf);
 4566              		.loc 1 869 0
 4567 367a 488D45C0 		leaq	-64(%rbp), %rax
 4568 367e 4889C7   		movq	%rax, %rdi
 4569 3681 E8000000 		call	bufDestroy@PLT
 4569      00
 870:svf2csvf.c    **** 	return retVal;
 4570              		.loc 1 870 0
 4571 3686 8B4584   		movl	-124(%rbp), %eax
 871:svf2csvf.c    **** }
 4572              		.loc 1 871 0
 4573 3689 488B5DE8 		movq	-24(%rbp), %rbx
 4574 368d 6448331C 		xorq	%fs:40, %rbx
 4574      25280000 
 4574      00
 4575 3696 7405     		je	.L299
 4576 3698 E8000000 		call	__stack_chk_fail@PLT
 4576      00
 4577              	.L299:
 4578 369d 4881C498 		addq	$152, %rsp
 4578      000000
 4579 36a4 5B       		popq	%rbx
 4580 36a5 5D       		popq	%rbp
 4581              		.cfi_def_cfa 7, 8
 4582 36a6 C3       		ret
 4583              		.cfi_endproc
 4584              	.LFE21:
 4586              		.section	.rodata
 4587              	.LC54:
 4588 04a0 666C4C6F 		.string	"flLoadSvfAndConvertToCsvf()"
 4588      61645376 
 4588      66416E64 
 4588      436F6E76 
 4588      65727454 
 4589              	.LC55:
 4590 04bc 54525354 		.string	"TRST"
 4590      00
 4591              	.LC56:
 4592 04c1 454E4400 		.string	"END"
 4593              	.LC57:
 4594 04c5 53544154 		.string	"STATE"
 4594      4500
 4595              	.LC58:
 4596 04cb 46524551 		.string	"FREQ"
 4596      00
 4597              		.text
 4598              		.globl	flLoadSvfAndConvertToCsvf
 4600              	flLoadSvfAndConvertToCsvf:
 4601              	.LFB22:
 872:svf2csvf.c    **** 
 873:svf2csvf.c    **** DLLEXPORT(FLStatus) flLoadSvfAndConvertToCsvf(
 874:svf2csvf.c    **** 	const char *svfFile, struct Buffer *csvfBuf, uint32 *maxBufSize, const char **error)
 875:svf2csvf.c    **** {
 4602              		.loc 1 875 0
 4603              		.cfi_startproc
 4604 36a7 55       		pushq	%rbp
 4605              		.cfi_def_cfa_offset 16
 4606              		.cfi_offset 6, -16
 4607 36a8 4889E5   		movq	%rsp, %rbp
 4608              		.cfi_def_cfa_register 6
 4609 36ab 4881EC30 		subq	$816, %rsp
 4609      030000
 4610 36b2 4889BDE8 		movq	%rdi, -792(%rbp)
 4610      FCFFFF
 4611 36b9 4889B5E0 		movq	%rsi, -800(%rbp)
 4611      FCFFFF
 4612 36c0 488995D8 		movq	%rdx, -808(%rbp)
 4612      FCFFFF
 4613 36c7 48898DD0 		movq	%rcx, -816(%rbp)
 4613      FCFFFF
 4614              		.loc 1 875 0
 4615 36ce 64488B04 		movq	%fs:40, %rax
 4615      25280000 
 4615      00
 4616 36d7 488945F8 		movq	%rax, -8(%rbp)
 4617 36db 31C0     		xorl	%eax, %eax
 876:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 4618              		.loc 1 876 0
 4619 36dd C785FCFC 		movl	$0, -772(%rbp)
 4619      FFFF0000 
 4619      0000
 877:svf2csvf.c    **** 	struct Buffer lineBuf = {0,};
 4620              		.loc 1 877 0
 4621 36e7 48C78530 		movq	$0, -720(%rbp)
 4621      FDFFFF00 
 4621      000000
 4622 36f2 48C78538 		movq	$0, -712(%rbp)
 4622      FDFFFF00 
 4622      000000
 4623 36fd 48C78540 		movq	$0, -704(%rbp)
 4623      FDFFFF00 
 4623      000000
 4624 3708 48C78548 		movq	$0, -696(%rbp)
 4624      FDFFFF00 
 4624      000000
 878:svf2csvf.c    **** 	BufferStatus bStatus;
 879:svf2csvf.c    **** 	FLStatus fStatus;
 880:svf2csvf.c    **** 	const uint8 *buffer = NULL, *p, *end, *line;
 4625              		.loc 1 880 0
 4626 3713 48C78510 		movq	$0, -752(%rbp)
 4626      FDFFFF00 
 4626      000000
 881:svf2csvf.c    **** 	size_t fileLength;
 882:svf2csvf.c    **** 	bool gotSemicolon;
 883:svf2csvf.c    **** 	struct ParseContext cxt = {{0,},};
 4627              		.loc 1 883 0
 4628 371e 488D9550 		leaq	-688(%rbp), %rdx
 4628      FDFFFF
 4629 3725 B8000000 		movl	$0, %eax
 4629      00
 4630 372a B9550000 		movl	$85, %ecx
 4630      00
 4631 372f 4889D7   		movq	%rdx, %rdi
 4632 3732 F348AB   		rep stosq
 884:svf2csvf.c    **** 
 885:svf2csvf.c    **** 	// Initialise context and line buffer
 886:svf2csvf.c    **** 	fStatus = cxtInitialise(&cxt, error);
 4633              		.loc 1 886 0
 4634 3735 488B95D0 		movq	-816(%rbp), %rdx
 4634      FCFFFF
 4635 373c 488D8550 		leaq	-688(%rbp), %rax
 4635      FDFFFF
 4636 3743 4889D6   		movq	%rdx, %rsi
 4637 3746 4889C7   		movq	%rax, %rdi
 4638 3749 E8000000 		call	cxtInitialise@PLT
 4638      00
 4639 374e 898500FD 		movl	%eax, -768(%rbp)
 4639      FFFF
 887:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "flLoadSvfAndConvertToCsvf()");
 4640              		.loc 1 887 0
 4641 3754 83BD00FD 		cmpl	$0, -768(%rbp)
 4641      FFFF00
 4642 375b 7427     		je	.L305
 4643              		.loc 1 887 0 is_stmt 0 discriminator 1
 4644 375d 488B85D0 		movq	-816(%rbp), %rax
 4644      FCFFFF
 4645 3764 488D3500 		leaq	.LC54(%rip), %rsi
 4645      000000
 4646 376b 4889C7   		movq	%rax, %rdi
 4647 376e E8000000 		call	errPrefix@PLT
 4647      00
 4648 3773 8B8500FD 		movl	-768(%rbp), %eax
 4648      FFFF
 4649 3779 8985FCFC 		movl	%eax, -772(%rbp)
 4649      FFFF
 4650 377f E9160500 		jmp	.L306
 4650      00
 4651              	.L305:
 888:svf2csvf.c    **** 	bStatus = bufInitialise(&lineBuf, 1024, 0x00, error);
 4652              		.loc 1 888 0 is_stmt 1
 4653 3784 488B95D0 		movq	-816(%rbp), %rdx
 4653      FCFFFF
 4654 378b 488D8530 		leaq	-720(%rbp), %rax
 4654      FDFFFF
 4655 3792 4889D1   		movq	%rdx, %rcx
 4656 3795 BA000000 		movl	$0, %edx
 4656      00
 4657 379a BE000400 		movl	$1024, %esi
 4657      00
 4658 379f 4889C7   		movq	%rax, %rdi
 4659 37a2 E8000000 		call	bufInitialise@PLT
 4659      00
 4660 37a7 898504FD 		movl	%eax, -764(%rbp)
 4660      FFFF
 889:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "flLoadSvfAndConvertToCsvf()");
 4661              		.loc 1 889 0
 4662 37ad 83BD04FD 		cmpl	$0, -764(%rbp)
 4662      FFFF00
 4663 37b4 7425     		je	.L307
 4664              		.loc 1 889 0 is_stmt 0 discriminator 1
 4665 37b6 488B85D0 		movq	-816(%rbp), %rax
 4665      FCFFFF
 4666 37bd 488D3500 		leaq	.LC54(%rip), %rsi
 4666      000000
 4667 37c4 4889C7   		movq	%rax, %rdi
 4668 37c7 E8000000 		call	errPrefix@PLT
 4668      00
 4669 37cc C785FCFC 		movl	$1, -772(%rbp)
 4669      FFFF0100 
 4669      0000
 4670 37d6 E9BF0400 		jmp	.L306
 4670      00
 4671              	.L307:
 890:svf2csvf.c    **** 
 891:svf2csvf.c    **** 	// Load SVF file
 892:svf2csvf.c    **** 	buffer = flLoadFile(svfFile, &fileLength);
 4672              		.loc 1 892 0 is_stmt 1
 4673 37db 488D9508 		leaq	-760(%rbp), %rdx
 4673      FDFFFF
 4674 37e2 488B85E8 		movq	-792(%rbp), %rax
 4674      FCFFFF
 4675 37e9 4889D6   		movq	%rdx, %rsi
 4676 37ec 4889C7   		movq	%rax, %rdi
 4677 37ef E8000000 		call	flLoadFile@PLT
 4677      00
 4678 37f4 48898510 		movq	%rax, -752(%rbp)
 4678      FDFFFF
 893:svf2csvf.c    **** 	if ( !buffer ) {
 4679              		.loc 1 893 0
 4680 37fb 4883BD10 		cmpq	$0, -752(%rbp)
 4680      FDFFFF00 
 4681 3803 7534     		jne	.L308
 894:svf2csvf.c    **** 		//errRender(error, "flLoadSvfAndConvertToCsvf(): Unable to load SVF file %s", svfFile);
 895:svf2csvf.c    **** 		errRenderStd(error);
 4682              		.loc 1 895 0
 4683 3805 488B85D0 		movq	-816(%rbp), %rax
 4683      FCFFFF
 4684 380c 4889C7   		movq	%rax, %rdi
 4685 380f E8000000 		call	errRenderStd@PLT
 4685      00
 896:svf2csvf.c    **** 		errPrefix(error, "flLoadSvfAndConvertToCsvf()");
 4686              		.loc 1 896 0
 4687 3814 488B85D0 		movq	-816(%rbp), %rax
 4687      FCFFFF
 4688 381b 488D3500 		leaq	.LC54(%rip), %rsi
 4688      000000
 4689 3822 4889C7   		movq	%rax, %rdi
 4690 3825 E8000000 		call	errPrefix@PLT
 4690      00
 897:svf2csvf.c    **** 		FAIL(FL_FILE_ERR, cleanup);
 4691              		.loc 1 897 0
 4692 382a C785FCFC 		movl	$6, -772(%rbp)
 4692      FFFF0600 
 4692      0000
 4693 3834 E9610400 		jmp	.L306
 4693      00
 4694              	.L308:
 898:svf2csvf.c    **** 	}
 899:svf2csvf.c    **** 	end = buffer + fileLength;
 4695              		.loc 1 899 0
 4696 3839 488B9508 		movq	-760(%rbp), %rdx
 4696      FDFFFF
 4697 3840 488B8510 		movq	-752(%rbp), %rax
 4697      FDFFFF
 4698 3847 4801D0   		addq	%rdx, %rax
 4699 384a 48898520 		movq	%rax, -736(%rbp)
 4699      FDFFFF
 900:svf2csvf.c    **** 	p = buffer;
 4700              		.loc 1 900 0
 4701 3851 488B8510 		movq	-752(%rbp), %rax
 4701      FDFFFF
 4702 3858 48898518 		movq	%rax, -744(%rbp)
 4702      FDFFFF
 901:svf2csvf.c    **** 	while ( p < end ) {
 4703              		.loc 1 901 0
 4704 385f E97B0300 		jmp	.L309
 4704      00
 4705              	.L330:
 902:svf2csvf.c    **** 		if ( p[0] == '\n' || p[0] == '\r' ) {
 4706              		.loc 1 902 0
 4707 3864 488B8518 		movq	-744(%rbp), %rax
 4707      FDFFFF
 4708 386b 0FB600   		movzbl	(%rax), %eax
 4709 386e 3C0A     		cmpb	$10, %al
 4710 3870 740E     		je	.L310
 4711              		.loc 1 902 0 is_stmt 0 discriminator 1
 4712 3872 488B8518 		movq	-744(%rbp), %rax
 4712      FDFFFF
 4713 3879 0FB600   		movzbl	(%rax), %eax
 4714 387c 3C0D     		cmpb	$13, %al
 4715 387e 750D     		jne	.L311
 4716              	.L310:
 903:svf2csvf.c    **** 			p++;
 4717              		.loc 1 903 0 is_stmt 1
 4718 3880 48838518 		addq	$1, -744(%rbp)
 4718      FDFFFF01 
 4719 3888 E9520300 		jmp	.L309
 4719      00
 4720              	.L311:
 904:svf2csvf.c    **** 		} else if (
 905:svf2csvf.c    **** 			p[0] == '!' ||
 4721              		.loc 1 905 0
 4722 388d 488B8518 		movq	-744(%rbp), %rax
 4722      FDFFFF
 4723 3894 0FB600   		movzbl	(%rax), %eax
 904:svf2csvf.c    **** 		} else if (
 4724              		.loc 1 904 0
 4725 3897 3C21     		cmpb	$33, %al
 4726 3899 0F84AA00 		je	.L315
 4726      0000
 906:svf2csvf.c    **** 			(p[0] == '/' && p[1] == '/') ||
 4727              		.loc 1 906 0
 4728 389f 488B8518 		movq	-744(%rbp), %rax
 4728      FDFFFF
 4729 38a6 0FB600   		movzbl	(%rax), %eax
 905:svf2csvf.c    **** 			(p[0] == '/' && p[1] == '/') ||
 4730              		.loc 1 905 0
 4731 38a9 3C2F     		cmpb	$47, %al
 4732 38ab 7516     		jne	.L313
 4733              		.loc 1 906 0
 4734 38ad 488B8518 		movq	-744(%rbp), %rax
 4734      FDFFFF
 4735 38b4 4883C001 		addq	$1, %rax
 4736 38b8 0FB600   		movzbl	(%rax), %eax
 4737 38bb 3C2F     		cmpb	$47, %al
 4738 38bd 0F848600 		je	.L315
 4738      0000
 4739              	.L313:
 907:svf2csvf.c    **** 			!memcmp(p, "TRST", 4) ||
 4740              		.loc 1 907 0 discriminator 1
 4741 38c3 488B8518 		movq	-744(%rbp), %rax
 4741      FDFFFF
 4742 38ca BA040000 		movl	$4, %edx
 4742      00
 4743 38cf 488D3500 		leaq	.LC55(%rip), %rsi
 4743      000000
 4744 38d6 4889C7   		movq	%rax, %rdi
 4745 38d9 E8000000 		call	memcmp@PLT
 4745      00
 906:svf2csvf.c    **** 			(p[0] == '/' && p[1] == '/') ||
 4746              		.loc 1 906 0 discriminator 1
 4747 38de 85C0     		testl	%eax, %eax
 4748 38e0 7467     		je	.L315
 908:svf2csvf.c    **** 			!memcmp(p, "END", 3) ||
 4749              		.loc 1 908 0
 4750 38e2 488B8518 		movq	-744(%rbp), %rax
 4750      FDFFFF
 4751 38e9 BA030000 		movl	$3, %edx
 4751      00
 4752 38ee 488D3500 		leaq	.LC56(%rip), %rsi
 4752      000000
 4753 38f5 4889C7   		movq	%rax, %rdi
 4754 38f8 E8000000 		call	memcmp@PLT
 4754      00
 907:svf2csvf.c    **** 			!memcmp(p, "TRST", 4) ||
 4755              		.loc 1 907 0
 4756 38fd 85C0     		testl	%eax, %eax
 4757 38ff 7448     		je	.L315
 909:svf2csvf.c    **** 			!memcmp(p, "STATE", 5) ||
 4758              		.loc 1 909 0
 4759 3901 488B8518 		movq	-744(%rbp), %rax
 4759      FDFFFF
 4760 3908 BA050000 		movl	$5, %edx
 4760      00
 4761 390d 488D3500 		leaq	.LC57(%rip), %rsi
 4761      000000
 4762 3914 4889C7   		movq	%rax, %rdi
 4763 3917 E8000000 		call	memcmp@PLT
 4763      00
 908:svf2csvf.c    **** 			!memcmp(p, "END", 3) ||
 4764              		.loc 1 908 0
 4765 391c 85C0     		testl	%eax, %eax
 4766 391e 7429     		je	.L315
 910:svf2csvf.c    **** 			!memcmp(p, "FREQ", 4)
 4767              		.loc 1 910 0
 4768 3920 488B8518 		movq	-744(%rbp), %rax
 4768      FDFFFF
 4769 3927 BA040000 		movl	$4, %edx
 4769      00
 4770 392c 488D3500 		leaq	.LC58(%rip), %rsi
 4770      000000
 4771 3933 4889C7   		movq	%rax, %rdi
 4772 3936 E8000000 		call	memcmp@PLT
 4772      00
 909:svf2csvf.c    **** 			!memcmp(p, "STATE", 5) ||
 4773              		.loc 1 909 0
 4774 393b 85C0     		testl	%eax, %eax
 4775 393d 754B     		jne	.L318
 911:svf2csvf.c    **** 		) {
 912:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' ) {
 4776              		.loc 1 912 0
 4777 393f EB08     		jmp	.L315
 4778              	.L317:
 913:svf2csvf.c    **** 				p++;
 4779              		.loc 1 913 0
 4780 3941 48838518 		addq	$1, -744(%rbp)
 4780      FDFFFF01 
 4781              	.L315:
 912:svf2csvf.c    **** 				p++;
 4782              		.loc 1 912 0
 4783 3949 488B8518 		movq	-744(%rbp), %rax
 4783      FDFFFF
 4784 3950 483B8520 		cmpq	-736(%rbp), %rax
 4784      FDFFFF
 4785 3957 731C     		jnb	.L316
 912:svf2csvf.c    **** 				p++;
 4786              		.loc 1 912 0 is_stmt 0 discriminator 1
 4787 3959 488B8518 		movq	-744(%rbp), %rax
 4787      FDFFFF
 4788 3960 0FB600   		movzbl	(%rax), %eax
 4789 3963 3C0A     		cmpb	$10, %al
 4790 3965 740E     		je	.L316
 912:svf2csvf.c    **** 				p++;
 4791              		.loc 1 912 0 discriminator 2
 4792 3967 488B8518 		movq	-744(%rbp), %rax
 4792      FDFFFF
 4793 396e 0FB600   		movzbl	(%rax), %eax
 4794 3971 3C0D     		cmpb	$13, %al
 4795 3973 75CC     		jne	.L317
 4796              	.L316:
 914:svf2csvf.c    **** 			}
 915:svf2csvf.c    **** 			p++;
 4797              		.loc 1 915 0 is_stmt 1
 4798 3975 48838518 		addq	$1, -744(%rbp)
 4798      FDFFFF01 
 4799 397d E95D0200 		jmp	.L309
 4799      00
 4800              	.L319:
 916:svf2csvf.c    **** 		} else {
 917:svf2csvf.c    **** 			CHOMP();
 4801              		.loc 1 917 0 discriminator 4
 4802 3982 48838518 		addq	$1, -744(%rbp)
 4802      FDFFFF01 
 4803              	.L318:
 4804              		.loc 1 917 0 is_stmt 0 discriminator 1
 4805 398a 488B8518 		movq	-744(%rbp), %rax
 4805      FDFFFF
 4806 3991 0FB600   		movzbl	(%rax), %eax
 4807 3994 3C20     		cmpb	$32, %al
 4808 3996 74EA     		je	.L319
 4809              		.loc 1 917 0 discriminator 3
 4810 3998 488B8518 		movq	-744(%rbp), %rax
 4810      FDFFFF
 4811 399f 0FB600   		movzbl	(%rax), %eax
 4812 39a2 3C09     		cmpb	$9, %al
 4813 39a4 74DC     		je	.L319
 918:svf2csvf.c    **** 			line = p;
 4814              		.loc 1 918 0 is_stmt 1
 4815 39a6 488B8518 		movq	-744(%rbp), %rax
 4815      FDFFFF
 4816 39ad 48898528 		movq	%rax, -728(%rbp)
 4816      FDFFFF
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 4817              		.loc 1 919 0
 4818 39b4 EB08     		jmp	.L320
 4819              	.L322:
 920:svf2csvf.c    **** 				p++;
 4820              		.loc 1 920 0
 4821 39b6 48838518 		addq	$1, -744(%rbp)
 4821      FDFFFF01 
 4822              	.L320:
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 4823              		.loc 1 919 0
 4824 39be 488B8518 		movq	-744(%rbp), %rax
 4824      FDFFFF
 4825 39c5 483B8520 		cmpq	-736(%rbp), %rax
 4825      FDFFFF
 4826 39cc 732A     		jnb	.L321
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 4827              		.loc 1 919 0 is_stmt 0 discriminator 1
 4828 39ce 488B8518 		movq	-744(%rbp), %rax
 4828      FDFFFF
 4829 39d5 0FB600   		movzbl	(%rax), %eax
 4830 39d8 3C0A     		cmpb	$10, %al
 4831 39da 741C     		je	.L321
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 4832              		.loc 1 919 0 discriminator 2
 4833 39dc 488B8518 		movq	-744(%rbp), %rax
 4833      FDFFFF
 4834 39e3 0FB600   		movzbl	(%rax), %eax
 4835 39e6 3C0D     		cmpb	$13, %al
 4836 39e8 740E     		je	.L321
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 4837              		.loc 1 919 0 discriminator 3
 4838 39ea 488B8518 		movq	-744(%rbp), %rax
 4838      FDFFFF
 4839 39f1 0FB600   		movzbl	(%rax), %eax
 4840 39f4 3C3B     		cmpb	$59, %al
 4841 39f6 75BE     		jne	.L322
 4842              	.L321:
 921:svf2csvf.c    **** 			}
 922:svf2csvf.c    **** 			gotSemicolon = (*p == ';');
 4843              		.loc 1 922 0 is_stmt 1
 4844 39f8 488B8518 		movq	-744(%rbp), %rax
 4844      FDFFFF
 4845 39ff 0FB600   		movzbl	(%rax), %eax
 4846 3a02 3C3B     		cmpb	$59, %al
 4847 3a04 0F94C0   		sete	%al
 4848 3a07 8885FBFC 		movb	%al, -773(%rbp)
 4848      FFFF
 923:svf2csvf.c    **** 			if ( *p == '\n' || *p == '\r' || *p == ';' ) {
 4849              		.loc 1 923 0
 4850 3a0d 488B8518 		movq	-744(%rbp), %rax
 4850      FDFFFF
 4851 3a14 0FB600   		movzbl	(%rax), %eax
 4852 3a17 3C0A     		cmpb	$10, %al
 4853 3a19 7420     		je	.L323
 4854              		.loc 1 923 0 is_stmt 0 discriminator 1
 4855 3a1b 488B8518 		movq	-744(%rbp), %rax
 4855      FDFFFF
 4856 3a22 0FB600   		movzbl	(%rax), %eax
 4857 3a25 3C0D     		cmpb	$13, %al
 4858 3a27 7412     		je	.L323
 4859              		.loc 1 923 0 discriminator 2
 4860 3a29 488B8518 		movq	-744(%rbp), %rax
 4860      FDFFFF
 4861 3a30 0FB600   		movzbl	(%rax), %eax
 4862 3a33 3C3B     		cmpb	$59, %al
 4863 3a35 0F85A401 		jne	.L309
 4863      0000
 4864              	.L323:
 924:svf2csvf.c    **** 				do {
 925:svf2csvf.c    **** 					p--;
 4865              		.loc 1 925 0 is_stmt 1 discriminator 3
 4866 3a3b 4883AD18 		subq	$1, -744(%rbp)
 4866      FDFFFF01 
 926:svf2csvf.c    **** 				} while ( *p == ' ' || *p == '\t' );
 4867              		.loc 1 926 0 discriminator 3
 4868 3a43 488B8518 		movq	-744(%rbp), %rax
 4868      FDFFFF
 4869 3a4a 0FB600   		movzbl	(%rax), %eax
 4870 3a4d 3C20     		cmpb	$32, %al
 4871 3a4f 74EA     		je	.L323
 4872              		.loc 1 926 0 is_stmt 0 discriminator 2
 4873 3a51 488B8518 		movq	-744(%rbp), %rax
 4873      FDFFFF
 4874 3a58 0FB600   		movzbl	(%rax), %eax
 4875 3a5b 3C09     		cmpb	$9, %al
 4876 3a5d 74DC     		je	.L323
 927:svf2csvf.c    **** 				p++; // go back to first space char
 4877              		.loc 1 927 0 is_stmt 1
 4878 3a5f 48838518 		addq	$1, -744(%rbp)
 4878      FDFFFF01 
 928:svf2csvf.c    **** 				bStatus = bufAppendBlock(&lineBuf, line, (uint32)(p - line), error);
 4879              		.loc 1 928 0
 4880 3a67 488B9518 		movq	-744(%rbp), %rdx
 4880      FDFFFF
 4881 3a6e 488B8528 		movq	-728(%rbp), %rax
 4881      FDFFFF
 4882 3a75 4829C2   		subq	%rax, %rdx
 4883 3a78 4889D0   		movq	%rdx, %rax
 4884 3a7b 89C7     		movl	%eax, %edi
 4885 3a7d 488B95D0 		movq	-816(%rbp), %rdx
 4885      FCFFFF
 4886 3a84 488BB528 		movq	-728(%rbp), %rsi
 4886      FDFFFF
 4887 3a8b 488D8530 		leaq	-720(%rbp), %rax
 4887      FDFFFF
 4888 3a92 4889D1   		movq	%rdx, %rcx
 4889 3a95 4889FA   		movq	%rdi, %rdx
 4890 3a98 4889C7   		movq	%rax, %rdi
 4891 3a9b E8000000 		call	bufAppendBlock@PLT
 4891      00
 4892 3aa0 898504FD 		movl	%eax, -764(%rbp)
 4892      FFFF
 929:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "flLoadSvfAndConvertToCsvf()");
 4893              		.loc 1 929 0
 4894 3aa6 83BD04FD 		cmpl	$0, -764(%rbp)
 4894      FFFF00
 4895 3aad 742D     		je	.L325
 4896              		.loc 1 929 0 is_stmt 0 discriminator 1
 4897 3aaf 488B85D0 		movq	-816(%rbp), %rax
 4897      FCFFFF
 4898 3ab6 488D3500 		leaq	.LC54(%rip), %rsi
 4898      000000
 4899 3abd 4889C7   		movq	%rax, %rdi
 4900 3ac0 E8000000 		call	errPrefix@PLT
 4900      00
 4901 3ac5 C785FCFC 		movl	$1, -772(%rbp)
 4901      FFFF0100 
 4901      0000
 4902 3acf E9C60100 		jmp	.L306
 4902      00
 4903              	.L327:
 930:svf2csvf.c    **** 				while ( p < end && *p != '\n' && *p != '\r' ) {
 931:svf2csvf.c    **** 					p++;
 4904              		.loc 1 931 0 is_stmt 1
 4905 3ad4 48838518 		addq	$1, -744(%rbp)
 4905      FDFFFF01 
 4906              	.L325:
 930:svf2csvf.c    **** 				while ( p < end && *p != '\n' && *p != '\r' ) {
 4907              		.loc 1 930 0
 4908 3adc 488B8518 		movq	-744(%rbp), %rax
 4908      FDFFFF
 4909 3ae3 483B8520 		cmpq	-736(%rbp), %rax
 4909      FDFFFF
 4910 3aea 731C     		jnb	.L326
 930:svf2csvf.c    **** 				while ( p < end && *p != '\n' && *p != '\r' ) {
 4911              		.loc 1 930 0 is_stmt 0 discriminator 1
 4912 3aec 488B8518 		movq	-744(%rbp), %rax
 4912      FDFFFF
 4913 3af3 0FB600   		movzbl	(%rax), %eax
 4914 3af6 3C0A     		cmpb	$10, %al
 4915 3af8 740E     		je	.L326
 930:svf2csvf.c    **** 				while ( p < end && *p != '\n' && *p != '\r' ) {
 4916              		.loc 1 930 0 discriminator 2
 4917 3afa 488B8518 		movq	-744(%rbp), %rax
 4917      FDFFFF
 4918 3b01 0FB600   		movzbl	(%rax), %eax
 4919 3b04 3C0D     		cmpb	$13, %al
 4920 3b06 75CC     		jne	.L327
 4921              	.L326:
 932:svf2csvf.c    **** 				}
 933:svf2csvf.c    **** 				p++; // Skip over CR
 4922              		.loc 1 933 0 is_stmt 1
 4923 3b08 48838518 		addq	$1, -744(%rbp)
 4923      FDFFFF01 
 934:svf2csvf.c    **** 				if ( gotSemicolon ) {
 4924              		.loc 1 934 0
 4925 3b10 80BDFBFC 		cmpb	$0, -773(%rbp)
 4925      FFFF00
 4926 3b17 0F84C200 		je	.L309
 4926      0000
 935:svf2csvf.c    **** 					bStatus = bufAppendByte(&lineBuf, '\0', error);
 4927              		.loc 1 935 0
 4928 3b1d 488B95D0 		movq	-816(%rbp), %rdx
 4928      FCFFFF
 4929 3b24 488D8530 		leaq	-720(%rbp), %rax
 4929      FDFFFF
 4930 3b2b BE000000 		movl	$0, %esi
 4930      00
 4931 3b30 4889C7   		movq	%rax, %rdi
 4932 3b33 E8000000 		call	bufAppendByte@PLT
 4932      00
 4933 3b38 898504FD 		movl	%eax, -764(%rbp)
 4933      FFFF
 936:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "flLoadSvfAndConvertToCsvf()");
 4934              		.loc 1 936 0
 4935 3b3e 83BD04FD 		cmpl	$0, -764(%rbp)
 4935      FFFF00
 4936 3b45 7425     		je	.L328
 4937              		.loc 1 936 0 is_stmt 0 discriminator 1
 4938 3b47 488B85D0 		movq	-816(%rbp), %rax
 4938      FCFFFF
 4939 3b4e 488D3500 		leaq	.LC54(%rip), %rsi
 4939      000000
 4940 3b55 4889C7   		movq	%rax, %rdi
 4941 3b58 E8000000 		call	errPrefix@PLT
 4941      00
 4942 3b5d C785FCFC 		movl	$1, -772(%rbp)
 4942      FFFF0100 
 4942      0000
 4943 3b67 E92E0100 		jmp	.L306
 4943      00
 4944              	.L328:
 937:svf2csvf.c    **** 					fStatus = parseLine(&cxt, &lineBuf, csvfBuf, maxBufSize, error);
 4945              		.loc 1 937 0 is_stmt 1
 4946 3b6c 488BBDD0 		movq	-816(%rbp), %rdi
 4946      FCFFFF
 4947 3b73 488B8DD8 		movq	-808(%rbp), %rcx
 4947      FCFFFF
 4948 3b7a 488B95E0 		movq	-800(%rbp), %rdx
 4948      FCFFFF
 4949 3b81 488DB530 		leaq	-720(%rbp), %rsi
 4949      FDFFFF
 4950 3b88 488D8550 		leaq	-688(%rbp), %rax
 4950      FDFFFF
 4951 3b8f 4989F8   		movq	%rdi, %r8
 4952 3b92 4889C7   		movq	%rax, %rdi
 4953 3b95 E8000000 		call	parseLine@PLT
 4953      00
 4954 3b9a 898500FD 		movl	%eax, -768(%rbp)
 4954      FFFF
 938:svf2csvf.c    **** 					CHECK_STATUS(fStatus, fStatus, cleanup, "flLoadSvfAndConvertToCsvf()");
 4955              		.loc 1 938 0
 4956 3ba0 83BD00FD 		cmpl	$0, -768(%rbp)
 4956      FFFF00
 4957 3ba7 7427     		je	.L329
 4958              		.loc 1 938 0 is_stmt 0 discriminator 1
 4959 3ba9 488B85D0 		movq	-816(%rbp), %rax
 4959      FCFFFF
 4960 3bb0 488D3500 		leaq	.LC54(%rip), %rsi
 4960      000000
 4961 3bb7 4889C7   		movq	%rax, %rdi
 4962 3bba E8000000 		call	errPrefix@PLT
 4962      00
 4963 3bbf 8B8500FD 		movl	-768(%rbp), %eax
 4963      FFFF
 4964 3bc5 8985FCFC 		movl	%eax, -772(%rbp)
 4964      FFFF
 4965 3bcb E9CA0000 		jmp	.L306
 4965      00
 4966              	.L329:
 939:svf2csvf.c    **** 					bufZeroLength(&lineBuf);
 4967              		.loc 1 939 0 is_stmt 1
 4968 3bd0 488D8530 		leaq	-720(%rbp), %rax
 4968      FDFFFF
 4969 3bd7 4889C7   		movq	%rax, %rdi
 4970 3bda E8000000 		call	bufZeroLength@PLT
 4970      00
 4971              	.L309:
 901:svf2csvf.c    **** 		if ( p[0] == '\n' || p[0] == '\r' ) {
 4972              		.loc 1 901 0
 4973 3bdf 488B8518 		movq	-744(%rbp), %rax
 4973      FDFFFF
 4974 3be6 483B8520 		cmpq	-736(%rbp), %rax
 4974      FDFFFF
 4975 3bed 0F8271FC 		jb	.L330
 4975      FFFF
 940:svf2csvf.c    **** 				}
 941:svf2csvf.c    **** 			}
 942:svf2csvf.c    **** 		}
 943:svf2csvf.c    **** 	}
 944:svf2csvf.c    **** 	bStatus = bufAppendByte(csvfBuf, XCOMPLETE, error);
 4976              		.loc 1 944 0
 4977 3bf3 488B95D0 		movq	-816(%rbp), %rdx
 4977      FCFFFF
 4978 3bfa 488B85E0 		movq	-800(%rbp), %rax
 4978      FCFFFF
 4979 3c01 BE000000 		movl	$0, %esi
 4979      00
 4980 3c06 4889C7   		movq	%rax, %rdi
 4981 3c09 E8000000 		call	bufAppendByte@PLT
 4981      00
 4982 3c0e 898504FD 		movl	%eax, -764(%rbp)
 4982      FFFF
 945:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "flLoadSvfAndConvertToCsvf()");
 4983              		.loc 1 945 0
 4984 3c14 83BD04FD 		cmpl	$0, -764(%rbp)
 4984      FFFF00
 4985 3c1b 7422     		je	.L331
 4986              		.loc 1 945 0 is_stmt 0 discriminator 1
 4987 3c1d 488B85D0 		movq	-816(%rbp), %rax
 4987      FCFFFF
 4988 3c24 488D3500 		leaq	.LC54(%rip), %rsi
 4988      000000
 4989 3c2b 4889C7   		movq	%rax, %rdi
 4990 3c2e E8000000 		call	errPrefix@PLT
 4990      00
 4991 3c33 C785FCFC 		movl	$1, -772(%rbp)
 4991      FFFF0100 
 4991      0000
 4992 3c3d EB5B     		jmp	.L306
 4993              	.L331:
 946:svf2csvf.c    **** 	cxt.numCommands++;
 4994              		.loc 1 946 0 is_stmt 1
 4995 3c3f 8B45EC   		movl	-20(%rbp), %eax
 4996 3c42 83C001   		addl	$1, %eax
 4997 3c45 8945EC   		movl	%eax, -20(%rbp)
 947:svf2csvf.c    **** 
 948:svf2csvf.c    **** 	fStatus = buildIndex(&cxt, csvfBuf, error);
 4998              		.loc 1 948 0
 4999 3c48 488B95D0 		movq	-816(%rbp), %rdx
 4999      FCFFFF
 5000 3c4f 488B8DE0 		movq	-800(%rbp), %rcx
 5000      FCFFFF
 5001 3c56 488D8550 		leaq	-688(%rbp), %rax
 5001      FDFFFF
 5002 3c5d 4889CE   		movq	%rcx, %rsi
 5003 3c60 4889C7   		movq	%rax, %rdi
 5004 3c63 E8000000 		call	buildIndex@PLT
 5004      00
 5005 3c68 898500FD 		movl	%eax, -768(%rbp)
 5005      FFFF
 949:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "flLoadSvfAndConvertToCsvf()");
 5006              		.loc 1 949 0
 5007 3c6e 83BD00FD 		cmpl	$0, -768(%rbp)
 5007      FFFF00
 5008 3c75 7423     		je	.L306
 5009              		.loc 1 949 0 is_stmt 0 discriminator 1
 5010 3c77 488B85D0 		movq	-816(%rbp), %rax
 5010      FCFFFF
 5011 3c7e 488D3500 		leaq	.LC54(%rip), %rsi
 5011      000000
 5012 3c85 4889C7   		movq	%rax, %rdi
 5013 3c88 E8000000 		call	errPrefix@PLT
 5013      00
 5014 3c8d 8B8500FD 		movl	-768(%rbp), %eax
 5014      FFFF
 5015 3c93 8985FCFC 		movl	%eax, -772(%rbp)
 5015      FFFF
 5016 3c99 90       		nop
 5017              	.L306:
 950:svf2csvf.c    **** cleanup:
 951:svf2csvf.c    **** 	cxtDestroy(&cxt);
 5018              		.loc 1 951 0 is_stmt 1
 5019 3c9a 488D8550 		leaq	-688(%rbp), %rax
 5019      FDFFFF
 5020 3ca1 4889C7   		movq	%rax, %rdi
 5021 3ca4 E8000000 		call	cxtDestroy@PLT
 5021      00
 952:svf2csvf.c    **** 	bufDestroy(&lineBuf);
 5022              		.loc 1 952 0
 5023 3ca9 488D8530 		leaq	-720(%rbp), %rax
 5023      FDFFFF
 5024 3cb0 4889C7   		movq	%rax, %rdi
 5025 3cb3 E8000000 		call	bufDestroy@PLT
 5025      00
 953:svf2csvf.c    **** 	flFreeFile((void*)buffer);
 5026              		.loc 1 953 0
 5027 3cb8 488B8510 		movq	-752(%rbp), %rax
 5027      FDFFFF
 5028 3cbf 4889C7   		movq	%rax, %rdi
 5029 3cc2 E8000000 		call	flFreeFile@PLT
 5029      00
 954:svf2csvf.c    **** 	return retVal;
 5030              		.loc 1 954 0
 5031 3cc7 8B85FCFC 		movl	-772(%rbp), %eax
 5031      FFFF
 955:svf2csvf.c    **** }	
 5032              		.loc 1 955 0
 5033 3ccd 488B4DF8 		movq	-8(%rbp), %rcx
 5034 3cd1 6448330C 		xorq	%fs:40, %rcx
 5034      25280000 
 5034      00
 5035 3cda 7405     		je	.L333
 5036 3cdc E8000000 		call	__stack_chk_fail@PLT
 5036      00
 5037              	.L333:
 5038 3ce1 C9       		leave
 5039              		.cfi_def_cfa 7, 8
 5040 3ce2 C3       		ret
 5041              		.cfi_endproc
 5042              	.LFE22:
 5044              		.section	.rodata
 5045              		.align 8
 5046              	.LC13:
 5047 04d0 00000000 		.long	0
 5048 04d4 80842E41 		.long	1093567616
 5049              		.text
 5050              	.Letext0:
 5051              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 5052              		.file 3 "/home/shubham/20140524/makestuff/common/makestuff.h"
 5053              		.file 4 "/home/shubham/20140524/makestuff/libs/libbuffer/libbuffer.h"
 5054              		.file 5 "libfpgalink.h"
 5055              		.file 6 "svf2csvf.h"
 5056              		.file 7 "xsvf.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 svf2csvf.c
     /tmp/ccpftv7t.s:5      .text:0000000000000000 getHexNibble
     /tmp/ccpftv7t.s:74     .text:0000000000000074 getHexByte
     /tmp/ccpftv7t.s:147    .text:0000000000000116 readLongBE
     /tmp/ccpftv7t.s:204    .text:000000000000016f readBytes
     /tmp/ccpftv7t.s:308    .text:000000000000026b shiftLeft
     /tmp/ccpftv7t.s:576    .text:0000000000000554 headTail
     /tmp/ccpftv7t.s:930    .text:0000000000000996 initBitStore
     /tmp/ccpftv7t.s:1017   .text:0000000000000a87 destroyBitStore
     /tmp/ccpftv7t.s:1060   .text:0000000000000ad0 cxtInitialise
     /tmp/ccpftv7t.s:1237   .text:0000000000000ce0 cxtDestroy
     /tmp/ccpftv7t.s:1295   .text:0000000000000d65 processLine
     /tmp/ccpftv7t.s:1533   .text:0000000000000fe5 isAllZero
     /tmp/ccpftv7t.s:1586   .text:0000000000001033 appendSwappedAndInterleaved
     /tmp/ccpftv7t.s:1681   .text:0000000000001126 appendSwapped
     /tmp/ccpftv7t.s:1789   .text:00000000000011ad parseLine
     /tmp/ccpftv7t.s:3738   .data.rel.ro.local:0000000000000000 cmdNames
     /tmp/ccpftv7t.s:3766   .text:0000000000002dff getCmdName
     /tmp/ccpftv7t.s:3796   .rodata:000000000000037b xrtZero
     /tmp/ccpftv7t.s:3805   .rodata:0000000000000380 illegal32
     /tmp/ccpftv7t.s:3810   .text:0000000000002e2c processIndex
     /tmp/ccpftv7t.s:4009   .text:0000000000002ff2 buildIndex
     /tmp/ccpftv7t.s:4600   .text:00000000000036a7 flLoadSvfAndConvertToCsvf

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
__stack_chk_fail
strlen
errPrefix
bufZeroLength
bufAppendConst
bufInitialise
bufAppendByte
bufSwap
bufDestroy
bufAppendBlock
strncmp
strtod
bufAppendLongBE
strtoul
errRender
bufDeepCopy
memcmp
malloc
free
flLoadFile
errRenderStd
flFreeFile
