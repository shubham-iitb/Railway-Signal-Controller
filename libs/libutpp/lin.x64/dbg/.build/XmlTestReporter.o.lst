   1              		.file	"XmlTestReporter.cpp"
   2              		.text
   3              	.Ltext0:
   4              		.local	_ZStL8__ioinit
   5              		.comm	_ZStL8__ioinit,1,1
   7              	_ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_:
   8              	.LFB1316:
   9              		.file 1 "XmlTestReporter.cpp"
   1:XmlTestReporter.cpp **** #include "XmlTestReporter.h"
   2:XmlTestReporter.cpp **** #include "Config.h"
   3:XmlTestReporter.cpp **** 
   4:XmlTestReporter.cpp **** #include <iostream>
   5:XmlTestReporter.cpp **** #include <sstream>
   6:XmlTestReporter.cpp **** #include <string>
   7:XmlTestReporter.cpp **** 
   8:XmlTestReporter.cpp **** using std::string;
   9:XmlTestReporter.cpp **** using std::ostringstream;
  10:XmlTestReporter.cpp **** using std::ostream;
  11:XmlTestReporter.cpp **** 
  12:XmlTestReporter.cpp **** namespace {
  13:XmlTestReporter.cpp **** 
  14:XmlTestReporter.cpp **** void ReplaceChar(string& str, char c, string const& replacement)
  15:XmlTestReporter.cpp **** {
  10              		.loc 1 15 0
  11              		.cfi_startproc
  12 0000 55       		pushq	%rbp
  13              		.cfi_def_cfa_offset 16
  14              		.cfi_offset 6, -16
  15 0001 4889E5   		movq	%rsp, %rbp
  16              		.cfi_def_cfa_register 6
  17 0004 4883EC30 		subq	$48, %rsp
  18 0008 48897DE8 		movq	%rdi, -24(%rbp)
  19 000c 89F0     		movl	%esi, %eax
  20 000e 488955D8 		movq	%rdx, -40(%rbp)
  21 0012 8845E4   		movb	%al, -28(%rbp)
  22              	.LBB2:
  16:XmlTestReporter.cpp ****     for (size_t pos = str.find(c); pos != string::npos; pos = str.find(c, pos + 1))
  23              		.loc 1 16 0
  24 0015 0FBE4DE4 		movsbl	-28(%rbp), %ecx
  25 0019 488B45E8 		movq	-24(%rbp), %rax
  26 001d BA000000 		movl	$0, %edx
  26      00
  27 0022 89CE     		movl	%ecx, %esi
  28 0024 4889C7   		movq	%rax, %rdi
  29 0027 E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcm@PLT
  29      00
  30 002c 488945F8 		movq	%rax, -8(%rbp)
  31              	.L3:
  32              		.loc 1 16 0 is_stmt 0 discriminator 3
  33 0030 48837DF8 		cmpq	$-1, -8(%rbp)
  33      FF
  34 0035 743C     		je	.L4
  17:XmlTestReporter.cpp ****         str.replace(pos, 1, replacement);
  35              		.loc 1 17 0 is_stmt 1 discriminator 2
  36 0037 488B55D8 		movq	-40(%rbp), %rdx
  37 003b 488B75F8 		movq	-8(%rbp), %rsi
  38 003f 488B45E8 		movq	-24(%rbp), %rax
  39 0043 4889D1   		movq	%rdx, %rcx
  40 0046 BA010000 		movl	$1, %edx
  40      00
  41 004b 4889C7   		movq	%rax, %rdi
  42 004e E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmRKS4_@PLT
  42      00
  16:XmlTestReporter.cpp ****     for (size_t pos = str.find(c); pos != string::npos; pos = str.find(c, pos + 1))
  43              		.loc 1 16 0 discriminator 2
  44 0053 488B45F8 		movq	-8(%rbp), %rax
  45 0057 488D5001 		leaq	1(%rax), %rdx
  46 005b 0FBE4DE4 		movsbl	-28(%rbp), %ecx
  47 005f 488B45E8 		movq	-24(%rbp), %rax
  48 0063 89CE     		movl	%ecx, %esi
  49 0065 4889C7   		movq	%rax, %rdi
  50 0068 E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcm@PLT
  50      00
  51 006d 488945F8 		movq	%rax, -8(%rbp)
  52 0071 EBBD     		jmp	.L3
  53              	.L4:
  54              	.LBE2:
  18:XmlTestReporter.cpp **** }
  55              		.loc 1 18 0
  56 0073 90       		nop
  57 0074 C9       		leave
  58              		.cfi_def_cfa 7, 8
  59 0075 C3       		ret
  60              		.cfi_endproc
  61              	.LFE1316:
  63              		.section	.rodata
  64              	.LC0:
  65 0000 26616D70 		.string	"&amp;"
  65      3B00
  66              	.LC1:
  67 0006 266C743B 		.string	"&lt;"
  67      00
  68              	.LC2:
  69 000b 2667743B 		.string	"&gt;"
  69      00
  70              	.LC3:
  71 0010 2661706F 		.string	"&apos;"
  71      733B00
  72              	.LC4:
  73 0017 2671756F 		.string	"&quot;"
  73      743B00
  74              		.text
  76              	_ZN12_GLOBAL__N_19XmlEscapeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:
  77              	.LFB1317:
  19:XmlTestReporter.cpp **** 
  20:XmlTestReporter.cpp **** string XmlEscape(string const& value)
  21:XmlTestReporter.cpp **** {
  78              		.loc 1 21 0
  79              		.cfi_startproc
  80              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
  81              		.cfi_lsda 0x1b,.LLSDA1317
  82 0076 55       		pushq	%rbp
  83              		.cfi_def_cfa_offset 16
  84              		.cfi_offset 6, -16
  85 0077 4889E5   		movq	%rsp, %rbp
  86              		.cfi_def_cfa_register 6
  87 007a 53       		pushq	%rbx
  88 007b 4881ECD8 		subq	$216, %rsp
  88      000000
  89              		.cfi_offset 3, -24
  90 0082 4889BD28 		movq	%rdi, -216(%rbp)
  90      FFFFFF
  91 0089 4889B520 		movq	%rsi, -224(%rbp)
  91      FFFFFF
  92              		.loc 1 21 0
  93 0090 64488B04 		movq	%fs:40, %rax
  93      25280000 
  93      00
  94 0099 488945E8 		movq	%rax, -24(%rbp)
  95 009d 31C0     		xorl	%eax, %eax
  22:XmlTestReporter.cpp ****     string escaped = value;
  96              		.loc 1 22 0
  97 009f 488B9520 		movq	-224(%rbp), %rdx
  97      FFFFFF
  98 00a6 488B8528 		movq	-216(%rbp), %rax
  98      FFFFFF
  99 00ad 4889D6   		movq	%rdx, %rsi
 100 00b0 4889C7   		movq	%rax, %rdi
 101              	.LEHB0:
 102 00b3 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 102      00
 103              	.LEHE0:
  23:XmlTestReporter.cpp **** 
  24:XmlTestReporter.cpp ****     ReplaceChar(escaped, '&', "&amp;");
 104              		.loc 1 24 0
 105 00b8 488D853F 		leaq	-193(%rbp), %rax
 105      FFFFFF
 106 00bf 4889C7   		movq	%rax, %rdi
 107 00c2 E8000000 		call	_ZNSaIcEC1Ev@PLT
 107      00
 108 00c7 488D953F 		leaq	-193(%rbp), %rdx
 108      FFFFFF
 109 00ce 488D8540 		leaq	-192(%rbp), %rax
 109      FFFFFF
 110 00d5 488D3500 		leaq	.LC0(%rip), %rsi
 110      000000
 111 00dc 4889C7   		movq	%rax, %rdi
 112              	.LEHB1:
 113 00df E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 113      00
 114              	.LEHE1:
 115              		.loc 1 24 0 is_stmt 0 discriminator 2
 116 00e4 488D9540 		leaq	-192(%rbp), %rdx
 116      FFFFFF
 117 00eb 488B8528 		movq	-216(%rbp), %rax
 117      FFFFFF
 118 00f2 BE260000 		movl	$38, %esi
 118      00
 119 00f7 4889C7   		movq	%rax, %rdi
 120              	.LEHB2:
 121 00fa E801FFFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_
 121      FF
 122              	.LEHE2:
 123              		.loc 1 24 0 discriminator 4
 124 00ff 488D8540 		leaq	-192(%rbp), %rax
 124      FFFFFF
 125 0106 4889C7   		movq	%rax, %rdi
 126              	.LEHB3:
 127 0109 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 127      00
 128              	.LEHE3:
 129              		.loc 1 24 0 discriminator 6
 130 010e 488D853F 		leaq	-193(%rbp), %rax
 130      FFFFFF
 131 0115 4889C7   		movq	%rax, %rdi
 132 0118 E8000000 		call	_ZNSaIcED1Ev@PLT
 132      00
  25:XmlTestReporter.cpp ****     ReplaceChar(escaped, '<', "&lt;");
 133              		.loc 1 25 0 is_stmt 1 discriminator 6
 134 011d 488D853F 		leaq	-193(%rbp), %rax
 134      FFFFFF
 135 0124 4889C7   		movq	%rax, %rdi
 136 0127 E8000000 		call	_ZNSaIcEC1Ev@PLT
 136      00
 137 012c 488D953F 		leaq	-193(%rbp), %rdx
 137      FFFFFF
 138 0133 488D8560 		leaq	-160(%rbp), %rax
 138      FFFFFF
 139 013a 488D3500 		leaq	.LC1(%rip), %rsi
 139      000000
 140 0141 4889C7   		movq	%rax, %rdi
 141              	.LEHB4:
 142 0144 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 142      00
 143              	.LEHE4:
 144              		.loc 1 25 0 is_stmt 0 discriminator 2
 145 0149 488D9560 		leaq	-160(%rbp), %rdx
 145      FFFFFF
 146 0150 488B8528 		movq	-216(%rbp), %rax
 146      FFFFFF
 147 0157 BE3C0000 		movl	$60, %esi
 147      00
 148 015c 4889C7   		movq	%rax, %rdi
 149              	.LEHB5:
 150 015f E89CFEFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_
 150      FF
 151              	.LEHE5:
 152              		.loc 1 25 0 discriminator 4
 153 0164 488D8560 		leaq	-160(%rbp), %rax
 153      FFFFFF
 154 016b 4889C7   		movq	%rax, %rdi
 155              	.LEHB6:
 156 016e E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 156      00
 157              	.LEHE6:
 158              		.loc 1 25 0 discriminator 6
 159 0173 488D853F 		leaq	-193(%rbp), %rax
 159      FFFFFF
 160 017a 4889C7   		movq	%rax, %rdi
 161 017d E8000000 		call	_ZNSaIcED1Ev@PLT
 161      00
  26:XmlTestReporter.cpp ****     ReplaceChar(escaped, '>', "&gt;");
 162              		.loc 1 26 0 is_stmt 1 discriminator 6
 163 0182 488D853F 		leaq	-193(%rbp), %rax
 163      FFFFFF
 164 0189 4889C7   		movq	%rax, %rdi
 165 018c E8000000 		call	_ZNSaIcEC1Ev@PLT
 165      00
 166 0191 488D953F 		leaq	-193(%rbp), %rdx
 166      FFFFFF
 167 0198 488D4580 		leaq	-128(%rbp), %rax
 168 019c 488D3500 		leaq	.LC2(%rip), %rsi
 168      000000
 169 01a3 4889C7   		movq	%rax, %rdi
 170              	.LEHB7:
 171 01a6 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 171      00
 172              	.LEHE7:
 173              		.loc 1 26 0 is_stmt 0 discriminator 2
 174 01ab 488D5580 		leaq	-128(%rbp), %rdx
 175 01af 488B8528 		movq	-216(%rbp), %rax
 175      FFFFFF
 176 01b6 BE3E0000 		movl	$62, %esi
 176      00
 177 01bb 4889C7   		movq	%rax, %rdi
 178              	.LEHB8:
 179 01be E83DFEFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_
 179      FF
 180              	.LEHE8:
 181              		.loc 1 26 0 discriminator 4
 182 01c3 488D4580 		leaq	-128(%rbp), %rax
 183 01c7 4889C7   		movq	%rax, %rdi
 184              	.LEHB9:
 185 01ca E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 185      00
 186              	.LEHE9:
 187              		.loc 1 26 0 discriminator 6
 188 01cf 488D853F 		leaq	-193(%rbp), %rax
 188      FFFFFF
 189 01d6 4889C7   		movq	%rax, %rdi
 190 01d9 E8000000 		call	_ZNSaIcED1Ev@PLT
 190      00
  27:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\'', "&apos;");
 191              		.loc 1 27 0 is_stmt 1 discriminator 6
 192 01de 488D853F 		leaq	-193(%rbp), %rax
 192      FFFFFF
 193 01e5 4889C7   		movq	%rax, %rdi
 194 01e8 E8000000 		call	_ZNSaIcEC1Ev@PLT
 194      00
 195 01ed 488D953F 		leaq	-193(%rbp), %rdx
 195      FFFFFF
 196 01f4 488D45A0 		leaq	-96(%rbp), %rax
 197 01f8 488D3500 		leaq	.LC3(%rip), %rsi
 197      000000
 198 01ff 4889C7   		movq	%rax, %rdi
 199              	.LEHB10:
 200 0202 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 200      00
 201              	.LEHE10:
 202              		.loc 1 27 0 is_stmt 0 discriminator 2
 203 0207 488D55A0 		leaq	-96(%rbp), %rdx
 204 020b 488B8528 		movq	-216(%rbp), %rax
 204      FFFFFF
 205 0212 BE270000 		movl	$39, %esi
 205      00
 206 0217 4889C7   		movq	%rax, %rdi
 207              	.LEHB11:
 208 021a E8E1FDFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_
 208      FF
 209              	.LEHE11:
 210              		.loc 1 27 0 discriminator 4
 211 021f 488D45A0 		leaq	-96(%rbp), %rax
 212 0223 4889C7   		movq	%rax, %rdi
 213              	.LEHB12:
 214 0226 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 214      00
 215              	.LEHE12:
 216              		.loc 1 27 0 discriminator 6
 217 022b 488D853F 		leaq	-193(%rbp), %rax
 217      FFFFFF
 218 0232 4889C7   		movq	%rax, %rdi
 219 0235 E8000000 		call	_ZNSaIcED1Ev@PLT
 219      00
  28:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\"', "&quot;");
 220              		.loc 1 28 0 is_stmt 1 discriminator 6
 221 023a 488D853F 		leaq	-193(%rbp), %rax
 221      FFFFFF
 222 0241 4889C7   		movq	%rax, %rdi
 223 0244 E8000000 		call	_ZNSaIcEC1Ev@PLT
 223      00
 224 0249 488D953F 		leaq	-193(%rbp), %rdx
 224      FFFFFF
 225 0250 488D45C0 		leaq	-64(%rbp), %rax
 226 0254 488D3500 		leaq	.LC4(%rip), %rsi
 226      000000
 227 025b 4889C7   		movq	%rax, %rdi
 228              	.LEHB13:
 229 025e E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@PLT
 229      00
 230              	.LEHE13:
 231              		.loc 1 28 0 is_stmt 0 discriminator 2
 232 0263 488D55C0 		leaq	-64(%rbp), %rdx
 233 0267 488B8528 		movq	-216(%rbp), %rax
 233      FFFFFF
 234 026e BE220000 		movl	$34, %esi
 234      00
 235 0273 4889C7   		movq	%rax, %rdi
 236              	.LEHB14:
 237 0276 E885FDFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_
 237      FF
 238              	.LEHE14:
 239              		.loc 1 28 0 discriminator 4
 240 027b 488D45C0 		leaq	-64(%rbp), %rax
 241 027f 4889C7   		movq	%rax, %rdi
 242              	.LEHB15:
 243 0282 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 243      00
 244              	.LEHE15:
 245              		.loc 1 28 0 discriminator 6
 246 0287 488D853F 		leaq	-193(%rbp), %rax
 246      FFFFFF
 247 028e 4889C7   		movq	%rax, %rdi
 248 0291 E8000000 		call	_ZNSaIcED1Ev@PLT
 248      00
  29:XmlTestReporter.cpp ****  
  30:XmlTestReporter.cpp ****     return escaped;
 249              		.loc 1 30 0 is_stmt 1 discriminator 6
 250 0296 90       		nop
  31:XmlTestReporter.cpp **** }
 251              		.loc 1 31 0 discriminator 6
 252 0297 488B8528 		movq	-216(%rbp), %rax
 252      FFFFFF
 253 029e 488B4DE8 		movq	-24(%rbp), %rcx
 254 02a2 6448330C 		xorq	%fs:40, %rcx
 254      25280000 
 254      00
 255 02ab 0F84E400 		je	.L18
 255      0000
 256 02b1 E9DA0000 		jmp	.L29
 256      00
 257              	.L20:
 258 02b6 4889C3   		movq	%rax, %rbx
  24:XmlTestReporter.cpp ****     ReplaceChar(escaped, '<', "&lt;");
 259              		.loc 1 24 0
 260 02b9 488D8540 		leaq	-192(%rbp), %rax
 260      FFFFFF
 261 02c0 4889C7   		movq	%rax, %rdi
 262 02c3 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 262      00
 263 02c8 EB03     		jmp	.L8
 264              	.L19:
 265 02ca 4889C3   		movq	%rax, %rbx
 266              	.L8:
  24:XmlTestReporter.cpp ****     ReplaceChar(escaped, '<', "&lt;");
 267              		.loc 1 24 0 is_stmt 0 discriminator 5
 268 02cd 488D853F 		leaq	-193(%rbp), %rax
 268      FFFFFF
 269 02d4 4889C7   		movq	%rax, %rdi
 270 02d7 E8000000 		call	_ZNSaIcED1Ev@PLT
 270      00
 271 02dc E9950000 		jmp	.L9
 271      00
 272              	.L22:
 273 02e1 4889C3   		movq	%rax, %rbx
  25:XmlTestReporter.cpp ****     ReplaceChar(escaped, '>', "&gt;");
 274              		.loc 1 25 0 is_stmt 1
 275 02e4 488D8560 		leaq	-160(%rbp), %rax
 275      FFFFFF
 276 02eb 4889C7   		movq	%rax, %rdi
 277 02ee E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 277      00
 278 02f3 EB03     		jmp	.L11
 279              	.L21:
 280 02f5 4889C3   		movq	%rax, %rbx
 281              	.L11:
  25:XmlTestReporter.cpp ****     ReplaceChar(escaped, '>', "&gt;");
 282              		.loc 1 25 0 is_stmt 0 discriminator 5
 283 02f8 488D853F 		leaq	-193(%rbp), %rax
 283      FFFFFF
 284 02ff 4889C7   		movq	%rax, %rdi
 285 0302 E8000000 		call	_ZNSaIcED1Ev@PLT
 285      00
 286 0307 EB6D     		jmp	.L9
 287              	.L24:
 288 0309 4889C3   		movq	%rax, %rbx
  26:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\'', "&apos;");
 289              		.loc 1 26 0 is_stmt 1
 290 030c 488D4580 		leaq	-128(%rbp), %rax
 291 0310 4889C7   		movq	%rax, %rdi
 292 0313 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 292      00
 293 0318 EB03     		jmp	.L13
 294              	.L23:
 295 031a 4889C3   		movq	%rax, %rbx
 296              	.L13:
  26:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\'', "&apos;");
 297              		.loc 1 26 0 is_stmt 0 discriminator 5
 298 031d 488D853F 		leaq	-193(%rbp), %rax
 298      FFFFFF
 299 0324 4889C7   		movq	%rax, %rdi
 300 0327 E8000000 		call	_ZNSaIcED1Ev@PLT
 300      00
 301 032c EB48     		jmp	.L9
 302              	.L26:
 303 032e 4889C3   		movq	%rax, %rbx
  27:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\"', "&quot;");
 304              		.loc 1 27 0 is_stmt 1
 305 0331 488D45A0 		leaq	-96(%rbp), %rax
 306 0335 4889C7   		movq	%rax, %rdi
 307 0338 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 307      00
 308 033d EB03     		jmp	.L15
 309              	.L25:
 310 033f 4889C3   		movq	%rax, %rbx
 311              	.L15:
  27:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\"', "&quot;");
 312              		.loc 1 27 0 is_stmt 0 discriminator 5
 313 0342 488D853F 		leaq	-193(%rbp), %rax
 313      FFFFFF
 314 0349 4889C7   		movq	%rax, %rdi
 315 034c E8000000 		call	_ZNSaIcED1Ev@PLT
 315      00
 316 0351 EB23     		jmp	.L9
 317              	.L28:
 318 0353 4889C3   		movq	%rax, %rbx
  28:XmlTestReporter.cpp ****  
 319              		.loc 1 28 0 is_stmt 1
 320 0356 488D45C0 		leaq	-64(%rbp), %rax
 321 035a 4889C7   		movq	%rax, %rdi
 322 035d E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 322      00
 323 0362 EB03     		jmp	.L17
 324              	.L27:
 325 0364 4889C3   		movq	%rax, %rbx
 326              	.L17:
  28:XmlTestReporter.cpp ****  
 327              		.loc 1 28 0 is_stmt 0 discriminator 5
 328 0367 488D853F 		leaq	-193(%rbp), %rax
 328      FFFFFF
 329 036e 4889C7   		movq	%rax, %rdi
 330 0371 E8000000 		call	_ZNSaIcED1Ev@PLT
 330      00
 331              	.L9:
 332 0376 488B8528 		movq	-216(%rbp), %rax
 332      FFFFFF
 333 037d 4889C7   		movq	%rax, %rdi
 334 0380 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 334      00
 335 0385 4889D8   		movq	%rbx, %rax
 336 0388 4889C7   		movq	%rax, %rdi
 337              	.LEHB16:
 338 038b E8000000 		call	_Unwind_Resume@PLT
 338      00
 339              	.LEHE16:
 340              	.L29:
 341              		.loc 1 31 0 is_stmt 1
 342 0390 E8000000 		call	__stack_chk_fail@PLT
 342      00
 343              	.L18:
 344 0395 4881C4D8 		addq	$216, %rsp
 344      000000
 345 039c 5B       		popq	%rbx
 346 039d 5D       		popq	%rbp
 347              		.cfi_def_cfa 7, 8
 348 039e C3       		ret
 349              		.cfi_endproc
 350              	.LFE1317:
 351              		.globl	__gxx_personality_v0
 352              		.section	.gcc_except_table,"a",@progbits
 353              	.LLSDA1317:
 354 0000 FF       		.byte	0xff
 355 0001 FF       		.byte	0xff
 356 0002 01       		.byte	0x1
 357 0003 62       		.uleb128 .LLSDACSE1317-.LLSDACSB1317
 358              	.LLSDACSB1317:
 359 0004 3D       		.uleb128 .LEHB0-.LFB1317
 360 0005 05       		.uleb128 .LEHE0-.LEHB0
 361 0006 00       		.uleb128 0
 362 0007 00       		.uleb128 0
 363 0008 69       		.uleb128 .LEHB1-.LFB1317
 364 0009 05       		.uleb128 .LEHE1-.LEHB1
 365 000a D404     		.uleb128 .L19-.LFB1317
 366 000c 00       		.uleb128 0
 367 000d 8401     		.uleb128 .LEHB2-.LFB1317
 368 000f 05       		.uleb128 .LEHE2-.LEHB2
 369 0010 C004     		.uleb128 .L20-.LFB1317
 370 0012 00       		.uleb128 0
 371 0013 9301     		.uleb128 .LEHB3-.LFB1317
 372 0015 05       		.uleb128 .LEHE3-.LEHB3
 373 0016 D404     		.uleb128 .L19-.LFB1317
 374 0018 00       		.uleb128 0
 375 0019 CE01     		.uleb128 .LEHB4-.LFB1317
 376 001b 05       		.uleb128 .LEHE4-.LEHB4
 377 001c FF04     		.uleb128 .L21-.LFB1317
 378 001e 00       		.uleb128 0
 379 001f E901     		.uleb128 .LEHB5-.LFB1317
 380 0021 05       		.uleb128 .LEHE5-.LEHB5
 381 0022 EB04     		.uleb128 .L22-.LFB1317
 382 0024 00       		.uleb128 0
 383 0025 F801     		.uleb128 .LEHB6-.LFB1317
 384 0027 05       		.uleb128 .LEHE6-.LEHB6
 385 0028 FF04     		.uleb128 .L21-.LFB1317
 386 002a 00       		.uleb128 0
 387 002b B002     		.uleb128 .LEHB7-.LFB1317
 388 002d 05       		.uleb128 .LEHE7-.LEHB7
 389 002e A405     		.uleb128 .L23-.LFB1317
 390 0030 00       		.uleb128 0
 391 0031 C802     		.uleb128 .LEHB8-.LFB1317
 392 0033 05       		.uleb128 .LEHE8-.LEHB8
 393 0034 9305     		.uleb128 .L24-.LFB1317
 394 0036 00       		.uleb128 0
 395 0037 D402     		.uleb128 .LEHB9-.LFB1317
 396 0039 05       		.uleb128 .LEHE9-.LEHB9
 397 003a A405     		.uleb128 .L23-.LFB1317
 398 003c 00       		.uleb128 0
 399 003d 8C03     		.uleb128 .LEHB10-.LFB1317
 400 003f 05       		.uleb128 .LEHE10-.LEHB10
 401 0040 C905     		.uleb128 .L25-.LFB1317
 402 0042 00       		.uleb128 0
 403 0043 A403     		.uleb128 .LEHB11-.LFB1317
 404 0045 05       		.uleb128 .LEHE11-.LEHB11
 405 0046 B805     		.uleb128 .L26-.LFB1317
 406 0048 00       		.uleb128 0
 407 0049 B003     		.uleb128 .LEHB12-.LFB1317
 408 004b 05       		.uleb128 .LEHE12-.LEHB12
 409 004c C905     		.uleb128 .L25-.LFB1317
 410 004e 00       		.uleb128 0
 411 004f E803     		.uleb128 .LEHB13-.LFB1317
 412 0051 05       		.uleb128 .LEHE13-.LEHB13
 413 0052 EE05     		.uleb128 .L27-.LFB1317
 414 0054 00       		.uleb128 0
 415 0055 8004     		.uleb128 .LEHB14-.LFB1317
 416 0057 05       		.uleb128 .LEHE14-.LEHB14
 417 0058 DD05     		.uleb128 .L28-.LFB1317
 418 005a 00       		.uleb128 0
 419 005b 8C04     		.uleb128 .LEHB15-.LFB1317
 420 005d 05       		.uleb128 .LEHE15-.LEHB15
 421 005e EE05     		.uleb128 .L27-.LFB1317
 422 0060 00       		.uleb128 0
 423 0061 9506     		.uleb128 .LEHB16-.LFB1317
 424 0063 05       		.uleb128 .LEHE16-.LEHB16
 425 0064 00       		.uleb128 0
 426 0065 00       		.uleb128 0
 427              	.LLSDACSE1317:
 428              		.text
 430              		.section	.rodata
 431              	.LC5:
 432 001e 2800     		.string	"("
 433              	.LC6:
 434 0020 29203A20 		.string	") : "
 434      00
 435              		.text
 437              	_ZN12_GLOBAL__N_119BuildFailureMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiS7_:
 438              	.LFB1318:
  32:XmlTestReporter.cpp **** 
  33:XmlTestReporter.cpp **** string BuildFailureMessage(string const& file, int line, string const& message)
  34:XmlTestReporter.cpp **** {
 439              		.loc 1 34 0
 440              		.cfi_startproc
 441              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 442              		.cfi_lsda 0x1b,.LLSDA1318
 443 039f 55       		pushq	%rbp
 444              		.cfi_def_cfa_offset 16
 445              		.cfi_offset 6, -16
 446 03a0 4889E5   		movq	%rsp, %rbp
 447              		.cfi_def_cfa_register 6
 448 03a3 53       		pushq	%rbx
 449 03a4 4881ECA8 		subq	$424, %rsp
 449      010000
 450              		.cfi_offset 3, -24
 451 03ab 4889BD68 		movq	%rdi, -408(%rbp)
 451      FEFFFF
 452 03b2 4889B560 		movq	%rsi, -416(%rbp)
 452      FEFFFF
 453 03b9 89955CFE 		movl	%edx, -420(%rbp)
 453      FFFF
 454 03bf 48898D50 		movq	%rcx, -432(%rbp)
 454      FEFFFF
 455              		.loc 1 34 0
 456 03c6 64488B04 		movq	%fs:40, %rax
 456      25280000 
 456      00
 457 03cf 488945E8 		movq	%rax, -24(%rbp)
 458 03d3 31C0     		xorl	%eax, %eax
  35:XmlTestReporter.cpp ****     ostringstream failureMessage;
 459              		.loc 1 35 0
 460 03d5 488D8570 		leaq	-400(%rbp), %rax
 460      FEFFFF
 461 03dc BE100000 		movl	$16, %esi
 461      00
 462 03e1 4889C7   		movq	%rax, %rdi
 463              	.LEHB17:
 464 03e4 E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode@PLT
 464      00
 465              	.LEHE17:
  36:XmlTestReporter.cpp ****     failureMessage << file << "(" << line << ") : " << message;
 466              		.loc 1 36 0
 467 03e9 488B9560 		movq	-416(%rbp), %rdx
 467      FEFFFF
 468 03f0 488D8570 		leaq	-400(%rbp), %rax
 468      FEFFFF
 469 03f7 4889D6   		movq	%rdx, %rsi
 470 03fa 4889C7   		movq	%rax, %rdi
 471              	.LEHB18:
 472 03fd E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 472      00
 473 0402 488D3500 		leaq	.LC5(%rip), %rsi
 473      000000
 474 0409 4889C7   		movq	%rax, %rdi
 475 040c E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 475      00
 476              		.loc 1 36 0 is_stmt 0 discriminator 1
 477 0411 4889C2   		movq	%rax, %rdx
 478 0414 8B855CFE 		movl	-420(%rbp), %eax
 478      FFFF
 479 041a 89C6     		movl	%eax, %esi
 480 041c 4889D7   		movq	%rdx, %rdi
 481 041f E8000000 		call	_ZNSolsEi@PLT
 481      00
 482              		.loc 1 36 0 discriminator 2
 483 0424 488D3500 		leaq	.LC6(%rip), %rsi
 483      000000
 484 042b 4889C7   		movq	%rax, %rdi
 485 042e E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 485      00
 486              		.loc 1 36 0 discriminator 3
 487 0433 4889C2   		movq	%rax, %rdx
 488 0436 488B8550 		movq	-432(%rbp), %rax
 488      FEFFFF
 489 043d 4889C6   		movq	%rax, %rsi
 490 0440 4889D7   		movq	%rdx, %rdi
 491 0443 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 491      00
  37:XmlTestReporter.cpp ****     return failureMessage.str();
 492              		.loc 1 37 0 is_stmt 1
 493 0448 488B8568 		movq	-408(%rbp), %rax
 493      FEFFFF
 494 044f 488D9570 		leaq	-400(%rbp), %rdx
 494      FEFFFF
 495 0456 4889D6   		movq	%rdx, %rsi
 496 0459 4889C7   		movq	%rax, %rdi
 497 045c E8000000 		call	_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv@PLT
 497      00
 498              	.LEHE18:
 499 0461 90       		nop
  35:XmlTestReporter.cpp ****     ostringstream failureMessage;
 500              		.loc 1 35 0
 501 0462 488D8570 		leaq	-400(%rbp), %rax
 501      FEFFFF
 502 0469 4889C7   		movq	%rax, %rdi
 503              	.LEHB19:
 504 046c E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT
 504      00
 505              	.LEHE19:
 506              		.loc 1 37 0
 507 0471 90       		nop
  38:XmlTestReporter.cpp **** }
 508              		.loc 1 38 0
 509 0472 488B8568 		movq	-408(%rbp), %rax
 509      FEFFFF
 510 0479 488B4DE8 		movq	-24(%rbp), %rcx
 511 047d 6448330C 		xorq	%fs:40, %rcx
 511      25280000 
 511      00
 512 0486 7424     		je	.L33
 513 0488 EB1D     		jmp	.L35
 514              	.L34:
 515 048a 4889C3   		movq	%rax, %rbx
  35:XmlTestReporter.cpp ****     failureMessage << file << "(" << line << ") : " << message;
 516              		.loc 1 35 0
 517 048d 488D8570 		leaq	-400(%rbp), %rax
 517      FEFFFF
 518 0494 4889C7   		movq	%rax, %rdi
 519 0497 E8000000 		call	_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT
 519      00
 520 049c 4889D8   		movq	%rbx, %rax
 521 049f 4889C7   		movq	%rax, %rdi
 522              	.LEHB20:
 523 04a2 E8000000 		call	_Unwind_Resume@PLT
 523      00
 524              	.LEHE20:
 525              	.L35:
 526              		.loc 1 38 0
 527 04a7 E8000000 		call	__stack_chk_fail@PLT
 527      00
 528              	.L33:
 529 04ac 4881C4A8 		addq	$424, %rsp
 529      010000
 530 04b3 5B       		popq	%rbx
 531 04b4 5D       		popq	%rbp
 532              		.cfi_def_cfa 7, 8
 533 04b5 C3       		ret
 534              		.cfi_endproc
 535              	.LFE1318:
 536              		.section	.gcc_except_table
 537              	.LLSDA1318:
 538 0066 FF       		.byte	0xff
 539 0067 FF       		.byte	0xff
 540 0068 01       		.byte	0x1
 541 0069 13       		.uleb128 .LLSDACSE1318-.LLSDACSB1318
 542              	.LLSDACSB1318:
 543 006a 45       		.uleb128 .LEHB17-.LFB1318
 544 006b 05       		.uleb128 .LEHE17-.LEHB17
 545 006c 00       		.uleb128 0
 546 006d 00       		.uleb128 0
 547 006e 5E       		.uleb128 .LEHB18-.LFB1318
 548 006f 64       		.uleb128 .LEHE18-.LEHB18
 549 0070 EB01     		.uleb128 .L34-.LFB1318
 550 0072 00       		.uleb128 0
 551 0073 CD01     		.uleb128 .LEHB19-.LFB1318
 552 0075 05       		.uleb128 .LEHE19-.LEHB19
 553 0076 00       		.uleb128 0
 554 0077 00       		.uleb128 0
 555 0078 8302     		.uleb128 .LEHB20-.LFB1318
 556 007a 05       		.uleb128 .LEHE20-.LEHB20
 557 007b 00       		.uleb128 0
 558 007c 00       		.uleb128 0
 559              	.LLSDACSE1318:
 560              		.text
 562              		.section	.text._ZN8UnitTest12TestReporterC2Ev,"axG",@progbits,_ZN8UnitTest12TestReporterC5Ev,comda
 563              		.align 2
 564              		.weak	_ZN8UnitTest12TestReporterC2Ev
 566              	_ZN8UnitTest12TestReporterC2Ev:
 567              	.LFB1322:
 568              		.file 2 "TestReporter.h"
   1:TestReporter.h **** #ifndef UNITTEST_TESTREPORTER_H
   2:TestReporter.h **** #define UNITTEST_TESTREPORTER_H
   3:TestReporter.h **** 
   4:TestReporter.h **** namespace UnitTest {
   5:TestReporter.h **** 
   6:TestReporter.h **** class TestDetails;
   7:TestReporter.h **** 
   8:TestReporter.h **** class TestReporter
 569              		.loc 2 8 0
 570              		.cfi_startproc
 571 0000 55       		pushq	%rbp
 572              		.cfi_def_cfa_offset 16
 573              		.cfi_offset 6, -16
 574 0001 4889E5   		movq	%rsp, %rbp
 575              		.cfi_def_cfa_register 6
 576 0004 48897DF8 		movq	%rdi, -8(%rbp)
 577              	.LBB3:
 578              		.loc 2 8 0
 579 0008 488B0500 		movq	_ZTVN8UnitTest12TestReporterE@GOTPCREL(%rip), %rax
 579      000000
 580 000f 488D5010 		leaq	16(%rax), %rdx
 581 0013 488B45F8 		movq	-8(%rbp), %rax
 582 0017 488910   		movq	%rdx, (%rax)
 583              	.LBE3:
 584 001a 90       		nop
 585 001b 5D       		popq	%rbp
 586              		.cfi_def_cfa 7, 8
 587 001c C3       		ret
 588              		.cfi_endproc
 589              	.LFE1322:
 591              		.weak	_ZN8UnitTest12TestReporterC1Ev
 592              		.set	_ZN8UnitTest12TestReporterC1Ev,_ZN8UnitTest12TestReporterC2Ev
 593              		.section	.text._ZN8UnitTest20DeferredTestReporterC2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 594              		.align 2
 595              		.weak	_ZN8UnitTest20DeferredTestReporterC2Ev
 597              	_ZN8UnitTest20DeferredTestReporterC2Ev:
 598              	.LFB1324:
 599              		.file 3 "DeferredTestReporter.h"
   1:DeferredTestReporter.h **** #ifndef UNITTEST_DEFERREDTESTREPORTER_H
   2:DeferredTestReporter.h **** #define UNITTEST_DEFERREDTESTREPORTER_H
   3:DeferredTestReporter.h **** 
   4:DeferredTestReporter.h **** #include "TestReporter.h"
   5:DeferredTestReporter.h **** #include "DeferredTestResult.h"
   6:DeferredTestReporter.h **** 
   7:DeferredTestReporter.h **** #include <vector>
   8:DeferredTestReporter.h **** 
   9:DeferredTestReporter.h **** namespace UnitTest
  10:DeferredTestReporter.h **** {
  11:DeferredTestReporter.h **** 
  12:DeferredTestReporter.h **** class DeferredTestReporter : public TestReporter
 600              		.loc 3 12 0
 601              		.cfi_startproc
 602              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 603              		.cfi_lsda 0x1b,.LLSDA1324
 604 0000 55       		pushq	%rbp
 605              		.cfi_def_cfa_offset 16
 606              		.cfi_offset 6, -16
 607 0001 4889E5   		movq	%rsp, %rbp
 608              		.cfi_def_cfa_register 6
 609 0004 53       		pushq	%rbx
 610 0005 4883EC18 		subq	$24, %rsp
 611              		.cfi_offset 3, -24
 612 0009 48897DE8 		movq	%rdi, -24(%rbp)
 613              	.LBB4:
 614              		.loc 3 12 0
 615 000d 488B45E8 		movq	-24(%rbp), %rax
 616 0011 4889C7   		movq	%rax, %rdi
 617 0014 E8000000 		call	_ZN8UnitTest12TestReporterC2Ev@PLT
 617      00
 618 0019 488B0500 		movq	_ZTVN8UnitTest20DeferredTestReporterE@GOTPCREL(%rip), %rax
 618      000000
 619 0020 488D5010 		leaq	16(%rax), %rdx
 620 0024 488B45E8 		movq	-24(%rbp), %rax
 621 0028 488910   		movq	%rdx, (%rax)
 622 002b 488B45E8 		movq	-24(%rbp), %rax
 623 002f 4883C008 		addq	$8, %rax
 624 0033 4889C7   		movq	%rax, %rdi
 625              	.LEHB21:
 626 0036 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev@PLT
 626      00
 627              	.LEHE21:
 628              	.LBE4:
 629 003b EB1A     		jmp	.L40
 630              	.L39:
 631 003d 4889C3   		movq	%rax, %rbx
 632              	.LBB5:
 633 0040 488B45E8 		movq	-24(%rbp), %rax
 634 0044 4889C7   		movq	%rax, %rdi
 635 0047 E8000000 		call	_ZN8UnitTest12TestReporterD2Ev@PLT
 635      00
 636 004c 4889D8   		movq	%rbx, %rax
 637 004f 4889C7   		movq	%rax, %rdi
 638              	.LEHB22:
 639 0052 E8000000 		call	_Unwind_Resume@PLT
 639      00
 640              	.LEHE22:
 641              	.L40:
 642              	.LBE5:
 643 0057 4883C418 		addq	$24, %rsp
 644 005b 5B       		popq	%rbx
 645 005c 5D       		popq	%rbp
 646              		.cfi_def_cfa 7, 8
 647 005d C3       		ret
 648              		.cfi_endproc
 649              	.LFE1324:
 650              		.section	.gcc_except_table
 651              	.LLSDA1324:
 652 007d FF       		.byte	0xff
 653 007e FF       		.byte	0xff
 654 007f 01       		.byte	0x1
 655 0080 08       		.uleb128 .LLSDACSE1324-.LLSDACSB1324
 656              	.LLSDACSB1324:
 657 0081 36       		.uleb128 .LEHB21-.LFB1324
 658 0082 05       		.uleb128 .LEHE21-.LEHB21
 659 0083 3D       		.uleb128 .L39-.LFB1324
 660 0084 00       		.uleb128 0
 661 0085 52       		.uleb128 .LEHB22-.LFB1324
 662 0086 05       		.uleb128 .LEHE22-.LEHB22
 663 0087 00       		.uleb128 0
 664 0088 00       		.uleb128 0
 665              	.LLSDACSE1324:
 666              		.section	.text._ZN8UnitTest20DeferredTestReporterC2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 668              		.weak	_ZN8UnitTest20DeferredTestReporterC1Ev
 669              		.set	_ZN8UnitTest20DeferredTestReporterC1Ev,_ZN8UnitTest20DeferredTestReporterC2Ev
 670              		.section	.text._ZN8UnitTest20DeferredTestReporterD2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 671              		.align 2
 672              		.weak	_ZN8UnitTest20DeferredTestReporterD2Ev
 674              	_ZN8UnitTest20DeferredTestReporterD2Ev:
 675              	.LFB1327:
 676              		.loc 3 12 0
 677              		.cfi_startproc
 678              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 679              		.cfi_lsda 0x1b,.LLSDA1327
 680 0000 55       		pushq	%rbp
 681              		.cfi_def_cfa_offset 16
 682              		.cfi_offset 6, -16
 683 0001 4889E5   		movq	%rsp, %rbp
 684              		.cfi_def_cfa_register 6
 685 0004 53       		pushq	%rbx
 686 0005 4883EC18 		subq	$24, %rsp
 687              		.cfi_offset 3, -24
 688 0009 48897DE8 		movq	%rdi, -24(%rbp)
 689              	.LBB6:
 690              		.loc 3 12 0
 691 000d 488B0500 		movq	_ZTVN8UnitTest20DeferredTestReporterE@GOTPCREL(%rip), %rax
 691      000000
 692 0014 488D5010 		leaq	16(%rax), %rdx
 693 0018 488B45E8 		movq	-24(%rbp), %rax
 694 001c 488910   		movq	%rdx, (%rax)
 695 001f 488B45E8 		movq	-24(%rbp), %rax
 696 0023 4883C008 		addq	$8, %rax
 697 0027 4889C7   		movq	%rax, %rdi
 698              	.LEHB23:
 699 002a E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev@PLT
 699      00
 700              	.LEHE23:
 701              		.loc 3 12 0 is_stmt 0 discriminator 2
 702 002f 488B45E8 		movq	-24(%rbp), %rax
 703 0033 4889C7   		movq	%rax, %rdi
 704              	.LEHB24:
 705 0036 E8000000 		call	_ZN8UnitTest12TestReporterD2Ev@PLT
 705      00
 706              	.LEHE24:
 707              	.LBE6:
 708 003b B8000000 		movl	$0, %eax
 708      00
 709 0040 85C0     		testl	%eax, %eax
 710 0042 7428     		je	.L41
 711              		.loc 3 12 0 discriminator 6
 712 0044 488B45E8 		movq	-24(%rbp), %rax
 713 0048 4889C7   		movq	%rax, %rdi
 714 004b E8000000 		call	_ZdlPv@PLT
 714      00
 715 0050 EB1A     		jmp	.L41
 716              	.L44:
 717 0052 4889C3   		movq	%rax, %rbx
 718              	.LBB7:
 719              		.loc 3 12 0
 720 0055 488B45E8 		movq	-24(%rbp), %rax
 721 0059 4889C7   		movq	%rax, %rdi
 722 005c E8000000 		call	_ZN8UnitTest12TestReporterD2Ev@PLT
 722      00
 723 0061 4889D8   		movq	%rbx, %rax
 724 0064 4889C7   		movq	%rax, %rdi
 725              	.LEHB25:
 726 0067 E8000000 		call	_Unwind_Resume@PLT
 726      00
 727              	.LEHE25:
 728              	.L41:
 729              	.LBE7:
 730 006c 4883C418 		addq	$24, %rsp
 731 0070 5B       		popq	%rbx
 732 0071 5D       		popq	%rbp
 733              		.cfi_def_cfa 7, 8
 734 0072 C3       		ret
 735              		.cfi_endproc
 736              	.LFE1327:
 737              		.section	.gcc_except_table
 738              	.LLSDA1327:
 739 0089 FF       		.byte	0xff
 740 008a FF       		.byte	0xff
 741 008b 01       		.byte	0x1
 742 008c 0C       		.uleb128 .LLSDACSE1327-.LLSDACSB1327
 743              	.LLSDACSB1327:
 744 008d 2A       		.uleb128 .LEHB23-.LFB1327
 745 008e 05       		.uleb128 .LEHE23-.LEHB23
 746 008f 52       		.uleb128 .L44-.LFB1327
 747 0090 00       		.uleb128 0
 748 0091 36       		.uleb128 .LEHB24-.LFB1327
 749 0092 05       		.uleb128 .LEHE24-.LEHB24
 750 0093 00       		.uleb128 0
 751 0094 00       		.uleb128 0
 752 0095 67       		.uleb128 .LEHB25-.LFB1327
 753 0096 05       		.uleb128 .LEHE25-.LEHB25
 754 0097 00       		.uleb128 0
 755 0098 00       		.uleb128 0
 756              	.LLSDACSE1327:
 757              		.section	.text._ZN8UnitTest20DeferredTestReporterD2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 759              		.weak	_ZN8UnitTest20DeferredTestReporterD1Ev
 760              		.set	_ZN8UnitTest20DeferredTestReporterD1Ev,_ZN8UnitTest20DeferredTestReporterD2Ev
 761              		.section	.text._ZN8UnitTest20DeferredTestReporterD0Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 762              		.align 2
 763              		.weak	_ZN8UnitTest20DeferredTestReporterD0Ev
 765              	_ZN8UnitTest20DeferredTestReporterD0Ev:
 766              	.LFB1329:
 767              		.loc 3 12 0 is_stmt 1
 768              		.cfi_startproc
 769 0000 55       		pushq	%rbp
 770              		.cfi_def_cfa_offset 16
 771              		.cfi_offset 6, -16
 772 0001 4889E5   		movq	%rsp, %rbp
 773              		.cfi_def_cfa_register 6
 774 0004 4883EC10 		subq	$16, %rsp
 775 0008 48897DF8 		movq	%rdi, -8(%rbp)
 776              		.loc 3 12 0
 777 000c 488B45F8 		movq	-8(%rbp), %rax
 778 0010 4889C7   		movq	%rax, %rdi
 779 0013 E8000000 		call	_ZN8UnitTest20DeferredTestReporterD1Ev@PLT
 779      00
 780 0018 488B45F8 		movq	-8(%rbp), %rax
 781 001c 4889C7   		movq	%rax, %rdi
 782 001f E8000000 		call	_ZdlPv@PLT
 782      00
 783 0024 C9       		leave
 784              		.cfi_def_cfa 7, 8
 785 0025 C3       		ret
 786              		.cfi_endproc
 787              	.LFE1329:
 789              		.text
 790              		.align 2
 791              		.globl	_ZN8UnitTest15XmlTestReporterC2ERSo
 793              	_ZN8UnitTest15XmlTestReporterC2ERSo:
 794              	.LFB1330:
  39:XmlTestReporter.cpp **** 
  40:XmlTestReporter.cpp **** }
  41:XmlTestReporter.cpp **** 
  42:XmlTestReporter.cpp **** namespace UnitTest {
  43:XmlTestReporter.cpp **** 
  44:XmlTestReporter.cpp **** XmlTestReporter::XmlTestReporter(ostream& ostream)
 795              		.loc 1 44 0
 796              		.cfi_startproc
 797 04b6 55       		pushq	%rbp
 798              		.cfi_def_cfa_offset 16
 799              		.cfi_offset 6, -16
 800 04b7 4889E5   		movq	%rsp, %rbp
 801              		.cfi_def_cfa_register 6
 802 04ba 4883EC10 		subq	$16, %rsp
 803 04be 48897DF8 		movq	%rdi, -8(%rbp)
 804 04c2 488975F0 		movq	%rsi, -16(%rbp)
 805              	.LBB8:
  45:XmlTestReporter.cpp ****     : m_ostream(ostream)
 806              		.loc 1 45 0
 807 04c6 488B45F8 		movq	-8(%rbp), %rax
 808 04ca 4889C7   		movq	%rax, %rdi
 809 04cd E8000000 		call	_ZN8UnitTest20DeferredTestReporterC2Ev@PLT
 809      00
 810 04d2 488B0500 		movq	_ZTVN8UnitTest15XmlTestReporterE@GOTPCREL(%rip), %rax
 810      000000
 811 04d9 488D5010 		leaq	16(%rax), %rdx
 812 04dd 488B45F8 		movq	-8(%rbp), %rax
 813 04e1 488910   		movq	%rdx, (%rax)
 814 04e4 488B45F8 		movq	-8(%rbp), %rax
 815 04e8 488B55F0 		movq	-16(%rbp), %rdx
 816 04ec 48895020 		movq	%rdx, 32(%rax)
 817              	.LBE8:
  46:XmlTestReporter.cpp **** {
  47:XmlTestReporter.cpp **** }
 818              		.loc 1 47 0
 819 04f0 90       		nop
 820 04f1 C9       		leave
 821              		.cfi_def_cfa 7, 8
 822 04f2 C3       		ret
 823              		.cfi_endproc
 824              	.LFE1330:
 826              		.globl	_ZN8UnitTest15XmlTestReporterC1ERSo
 827              		.set	_ZN8UnitTest15XmlTestReporterC1ERSo,_ZN8UnitTest15XmlTestReporterC2ERSo
 828 04f3 90       		.align 2
 829              		.globl	_ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif
 831              	_ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif:
 832              	.LFB1332:
  48:XmlTestReporter.cpp **** 
  49:XmlTestReporter.cpp **** void XmlTestReporter::ReportSummary(int totalTestCount, int failedTestCount,
  50:XmlTestReporter.cpp ****                                     int failureCount, float secondsElapsed)
  51:XmlTestReporter.cpp **** {
 833              		.loc 1 51 0
 834              		.cfi_startproc
 835 04f4 55       		pushq	%rbp
 836              		.cfi_def_cfa_offset 16
 837              		.cfi_offset 6, -16
 838 04f5 4889E5   		movq	%rsp, %rbp
 839              		.cfi_def_cfa_register 6
 840 04f8 4883EC50 		subq	$80, %rsp
 841 04fc 48897DC8 		movq	%rdi, -56(%rbp)
 842 0500 8975C4   		movl	%esi, -60(%rbp)
 843 0503 8955C0   		movl	%edx, -64(%rbp)
 844 0506 894DBC   		movl	%ecx, -68(%rbp)
 845 0509 F30F1145 		movss	%xmm0, -72(%rbp)
 845      B8
 846              		.loc 1 51 0
 847 050e 64488B04 		movq	%fs:40, %rax
 847      25280000 
 847      00
 848 0517 488945F8 		movq	%rax, -8(%rbp)
 849 051b 31C0     		xorl	%eax, %eax
  52:XmlTestReporter.cpp ****     AddXmlElement(m_ostream, NULL);
 850              		.loc 1 52 0
 851 051d 488B45C8 		movq	-56(%rbp), %rax
 852 0521 488B4820 		movq	32(%rax), %rcx
 853 0525 488B45C8 		movq	-56(%rbp), %rax
 854 0529 BA000000 		movl	$0, %edx
 854      00
 855 052e 4889CE   		movq	%rcx, %rsi
 856 0531 4889C7   		movq	%rax, %rdi
 857 0534 E8000000 		call	_ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc@PLT
 857      00
  53:XmlTestReporter.cpp **** 
  54:XmlTestReporter.cpp ****     BeginResults(m_ostream, totalTestCount, failedTestCount, failureCount, secondsElapsed);
 858              		.loc 1 54 0
 859 0539 488B45C8 		movq	-56(%rbp), %rax
 860 053d 488B7020 		movq	32(%rax), %rsi
 861 0541 8B7DB8   		movl	-72(%rbp), %edi
 862 0544 448B45BC 		movl	-68(%rbp), %r8d
 863 0548 8B4DC0   		movl	-64(%rbp), %ecx
 864 054b 8B55C4   		movl	-60(%rbp), %edx
 865 054e 488B45C8 		movq	-56(%rbp), %rax
 866 0552 897DB4   		movl	%edi, -76(%rbp)
 867 0555 F30F1045 		movss	-76(%rbp), %xmm0
 867      B4
 868 055a 4889C7   		movq	%rax, %rdi
 869 055d E8000000 		call	_ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif@PLT
 869      00
  55:XmlTestReporter.cpp **** 
  56:XmlTestReporter.cpp ****     DeferredTestResultList const& results = GetResults();
 870              		.loc 1 56 0
 871 0562 488B45C8 		movq	-56(%rbp), %rax
 872 0566 4889C7   		movq	%rax, %rdi
 873 0569 E8000000 		call	_ZN8UnitTest20DeferredTestReporter10GetResultsEv@PLT
 873      00
 874 056e 488945F0 		movq	%rax, -16(%rbp)
 875              	.LBB9:
  57:XmlTestReporter.cpp ****     for (DeferredTestResultList::const_iterator i = results.begin(); i != results.end(); ++i)
 876              		.loc 1 57 0
 877 0572 488B45F0 		movq	-16(%rbp), %rax
 878 0576 4889C7   		movq	%rax, %rdi
 879 0579 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv@PLT
 879      00
 880 057e 488945D0 		movq	%rax, -48(%rbp)
 881              	.L50:
 882              		.loc 1 57 0 is_stmt 0 discriminator 1
 883 0582 488B45F0 		movq	-16(%rbp), %rax
 884 0586 4889C7   		movq	%rax, %rdi
 885 0589 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv@PLT
 885      00
 886 058e 488945E0 		movq	%rax, -32(%rbp)
 887 0592 488D55E0 		leaq	-32(%rbp), %rdx
 888 0596 488D45D0 		leaq	-48(%rbp), %rax
 889 059a 4889D6   		movq	%rdx, %rsi
 890 059d 4889C7   		movq	%rax, %rdi
 891 05a0 E8000000 		call	_ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iter
 891      00
 892 05a5 84C0     		testb	%al, %al
 893 05a7 0F849700 		je	.L48
 893      0000
  58:XmlTestReporter.cpp ****     {
  59:XmlTestReporter.cpp ****         BeginTest(m_ostream, *i);
 894              		.loc 1 59 0 is_stmt 1
 895 05ad 488D45D0 		leaq	-48(%rbp), %rax
 896 05b1 4889C7   		movq	%rax, %rdi
 897 05b4 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 897      00
 898 05b9 4889C2   		movq	%rax, %rdx
 899 05bc 488B45C8 		movq	-56(%rbp), %rax
 900 05c0 488B4820 		movq	32(%rax), %rcx
 901 05c4 488B45C8 		movq	-56(%rbp), %rax
 902 05c8 4889CE   		movq	%rcx, %rsi
 903 05cb 4889C7   		movq	%rax, %rdi
 904 05ce E8000000 		call	_ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE@PLT
 904      00
  60:XmlTestReporter.cpp **** 
  61:XmlTestReporter.cpp ****         if (i->failed)
 905              		.loc 1 61 0
 906 05d3 488D45D0 		leaq	-48(%rbp), %rax
 907 05d7 4889C7   		movq	%rax, %rdi
 908 05da E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv
 908      00
 909 05df 0FB6407C 		movzbl	124(%rax), %eax
 910 05e3 84C0     		testb	%al, %al
 911 05e5 7426     		je	.L49
  62:XmlTestReporter.cpp ****             AddFailure(m_ostream, *i);
 912              		.loc 1 62 0
 913 05e7 488D45D0 		leaq	-48(%rbp), %rax
 914 05eb 4889C7   		movq	%rax, %rdi
 915 05ee E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 915      00
 916 05f3 4889C2   		movq	%rax, %rdx
 917 05f6 488B45C8 		movq	-56(%rbp), %rax
 918 05fa 488B4820 		movq	32(%rax), %rcx
 919 05fe 488B45C8 		movq	-56(%rbp), %rax
 920 0602 4889CE   		movq	%rcx, %rsi
 921 0605 4889C7   		movq	%rax, %rdi
 922 0608 E8000000 		call	_ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE@PLT
 922      00
 923              	.L49:
  63:XmlTestReporter.cpp **** 
  64:XmlTestReporter.cpp ****         EndTest(m_ostream, *i);
 924              		.loc 1 64 0
 925 060d 488D45D0 		leaq	-48(%rbp), %rax
 926 0611 4889C7   		movq	%rax, %rdi
 927 0614 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 927      00
 928 0619 4889C2   		movq	%rax, %rdx
 929 061c 488B45C8 		movq	-56(%rbp), %rax
 930 0620 488B4820 		movq	32(%rax), %rcx
 931 0624 488B45C8 		movq	-56(%rbp), %rax
 932 0628 4889CE   		movq	%rcx, %rsi
 933 062b 4889C7   		movq	%rax, %rdi
 934 062e E8000000 		call	_ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE@PLT
 934      00
  57:XmlTestReporter.cpp ****     {
 935              		.loc 1 57 0
 936 0633 488D45D0 		leaq	-48(%rbp), %rax
 937 0637 4889C7   		movq	%rax, %rdi
 938 063a E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv@
 938      00
 939 063f E93EFFFF 		jmp	.L50
 939      FF
 940              	.L48:
 941              	.LBE9:
  65:XmlTestReporter.cpp ****     }
  66:XmlTestReporter.cpp **** 
  67:XmlTestReporter.cpp ****     EndResults(m_ostream);
 942              		.loc 1 67 0
 943 0644 488B45C8 		movq	-56(%rbp), %rax
 944 0648 488B5020 		movq	32(%rax), %rdx
 945 064c 488B45C8 		movq	-56(%rbp), %rax
 946 0650 4889D6   		movq	%rdx, %rsi
 947 0653 4889C7   		movq	%rax, %rdi
 948 0656 E8000000 		call	_ZN8UnitTest15XmlTestReporter10EndResultsERSo@PLT
 948      00
  68:XmlTestReporter.cpp **** }
 949              		.loc 1 68 0
 950 065b 90       		nop
 951 065c 488B45F8 		movq	-8(%rbp), %rax
 952 0660 64483304 		xorq	%fs:40, %rax
 952      25280000 
 952      00
 953 0669 7405     		je	.L51
 954 066b E8000000 		call	__stack_chk_fail@PLT
 954      00
 955              	.L51:
 956 0670 C9       		leave
 957              		.cfi_def_cfa 7, 8
 958 0671 C3       		ret
 959              		.cfi_endproc
 960              	.LFE1332:
 962              		.section	.rodata
 963              	.LC7:
 964 0025 3C3F786D 		.string	"<?xml version=\"1.0\""
 964      6C207665 
 964      7273696F 
 964      6E3D2231 
 964      2E302200 
 965              	.LC8:
 966 0039 20656E63 		.string	" encoding=\""
 966      6F64696E 
 966      673D2200 
 967              	.LC9:
 968 0045 2200     		.string	"\""
 969              	.LC10:
 970 0047 3F3E00   		.string	"?>"
 971              		.text
 972              		.align 2
 973              		.globl	_ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc
 975              	_ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc:
 976              	.LFB1333:
  69:XmlTestReporter.cpp **** 
  70:XmlTestReporter.cpp **** void XmlTestReporter::AddXmlElement(ostream& os, char const* encoding)
  71:XmlTestReporter.cpp **** {
 977              		.loc 1 71 0
 978              		.cfi_startproc
 979 0672 55       		pushq	%rbp
 980              		.cfi_def_cfa_offset 16
 981              		.cfi_offset 6, -16
 982 0673 4889E5   		movq	%rsp, %rbp
 983              		.cfi_def_cfa_register 6
 984 0676 4883EC20 		subq	$32, %rsp
 985 067a 48897DF8 		movq	%rdi, -8(%rbp)
 986 067e 488975F0 		movq	%rsi, -16(%rbp)
 987 0682 488955E8 		movq	%rdx, -24(%rbp)
  72:XmlTestReporter.cpp ****     os << "<?xml version=\"1.0\"";
 988              		.loc 1 72 0
 989 0686 488B45F0 		movq	-16(%rbp), %rax
 990 068a 488D3500 		leaq	.LC7(%rip), %rsi
 990      000000
 991 0691 4889C7   		movq	%rax, %rdi
 992 0694 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 992      00
  73:XmlTestReporter.cpp **** 
  74:XmlTestReporter.cpp ****     if (encoding != NULL)
 993              		.loc 1 74 0
 994 0699 48837DE8 		cmpq	$0, -24(%rbp)
 994      00
 995 069e 7434     		je	.L53
  75:XmlTestReporter.cpp ****         os << " encoding=\"" << encoding << "\"";
 996              		.loc 1 75 0
 997 06a0 488B45F0 		movq	-16(%rbp), %rax
 998 06a4 488D3500 		leaq	.LC8(%rip), %rsi
 998      000000
 999 06ab 4889C7   		movq	%rax, %rdi
 1000 06ae E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1000      00
 1001 06b3 4889C2   		movq	%rax, %rdx
 1002 06b6 488B45E8 		movq	-24(%rbp), %rax
 1003 06ba 4889C6   		movq	%rax, %rsi
 1004 06bd 4889D7   		movq	%rdx, %rdi
 1005 06c0 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1005      00
 1006 06c5 488D3500 		leaq	.LC9(%rip), %rsi
 1006      000000
 1007 06cc 4889C7   		movq	%rax, %rdi
 1008 06cf E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1008      00
 1009              	.L53:
  76:XmlTestReporter.cpp **** 
  77:XmlTestReporter.cpp ****     os << "?>";
 1010              		.loc 1 77 0
 1011 06d4 488B45F0 		movq	-16(%rbp), %rax
 1012 06d8 488D3500 		leaq	.LC10(%rip), %rsi
 1012      000000
 1013 06df 4889C7   		movq	%rax, %rdi
 1014 06e2 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1014      00
  78:XmlTestReporter.cpp **** }
 1015              		.loc 1 78 0
 1016 06e7 90       		nop
 1017 06e8 C9       		leave
 1018              		.cfi_def_cfa 7, 8
 1019 06e9 C3       		ret
 1020              		.cfi_endproc
 1021              	.LFE1333:
 1023              		.section	.rodata
 1024              	.LC11:
 1025 004a 3C756E69 		.string	"<unittest-results"
 1025      74746573 
 1025      742D7265 
 1025      73756C74 
 1025      7300
 1026              	.LC12:
 1027 005c 20746573 		.string	" tests=\""
 1027      74733D22 
 1027      00
 1028              	.LC13:
 1029 0065 20666169 		.string	" failedtests=\""
 1029      6C656474 
 1029      65737473 
 1029      3D2200
 1030              	.LC14:
 1031 0074 20666169 		.string	" failures=\""
 1031      6C757265 
 1031      733D2200 
 1032              	.LC15:
 1033 0080 2074696D 		.string	" time=\""
 1033      653D2200 
 1034              	.LC16:
 1035 0088 3E00     		.string	">"
 1036              		.text
 1037              		.align 2
 1038              		.globl	_ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif
 1040              	_ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif:
 1041              	.LFB1334:
  79:XmlTestReporter.cpp **** 
  80:XmlTestReporter.cpp **** void XmlTestReporter::BeginResults(std::ostream& os, int totalTestCount, int failedTestCount, 
  81:XmlTestReporter.cpp ****                                    int failureCount, float secondsElapsed)
  82:XmlTestReporter.cpp **** {
 1042              		.loc 1 82 0
 1043              		.cfi_startproc
 1044 06ea 55       		pushq	%rbp
 1045              		.cfi_def_cfa_offset 16
 1046              		.cfi_offset 6, -16
 1047 06eb 4889E5   		movq	%rsp, %rbp
 1048              		.cfi_def_cfa_register 6
 1049 06ee 4883EC30 		subq	$48, %rsp
 1050 06f2 48897DF8 		movq	%rdi, -8(%rbp)
 1051 06f6 488975F0 		movq	%rsi, -16(%rbp)
 1052 06fa 8955EC   		movl	%edx, -20(%rbp)
 1053 06fd 894DE8   		movl	%ecx, -24(%rbp)
 1054 0700 448945E4 		movl	%r8d, -28(%rbp)
 1055 0704 F30F1145 		movss	%xmm0, -32(%rbp)
 1055      E0
  83:XmlTestReporter.cpp ****    os << "<unittest-results"
 1056              		.loc 1 83 0
 1057 0709 488B45F0 		movq	-16(%rbp), %rax
 1058 070d 488D3500 		leaq	.LC11(%rip), %rsi
 1058      000000
 1059 0714 4889C7   		movq	%rax, %rdi
 1060 0717 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1060      00
  84:XmlTestReporter.cpp ****        << " tests=\"" << totalTestCount << "\"" 
 1061              		.loc 1 84 0
 1062 071c 488D3500 		leaq	.LC12(%rip), %rsi
 1062      000000
 1063 0723 4889C7   		movq	%rax, %rdi
 1064 0726 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1064      00
 1065 072b 4889C2   		movq	%rax, %rdx
 1066 072e 8B45EC   		movl	-20(%rbp), %eax
 1067 0731 89C6     		movl	%eax, %esi
 1068 0733 4889D7   		movq	%rdx, %rdi
 1069 0736 E8000000 		call	_ZNSolsEi@PLT
 1069      00
 1070 073b 488D3500 		leaq	.LC9(%rip), %rsi
 1070      000000
 1071 0742 4889C7   		movq	%rax, %rdi
 1072 0745 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1072      00
  85:XmlTestReporter.cpp ****        << " failedtests=\"" << failedTestCount << "\"" 
 1073              		.loc 1 85 0
 1074 074a 488D3500 		leaq	.LC13(%rip), %rsi
 1074      000000
 1075 0751 4889C7   		movq	%rax, %rdi
 1076 0754 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1076      00
 1077 0759 4889C2   		movq	%rax, %rdx
 1078 075c 8B45E8   		movl	-24(%rbp), %eax
 1079 075f 89C6     		movl	%eax, %esi
 1080 0761 4889D7   		movq	%rdx, %rdi
 1081 0764 E8000000 		call	_ZNSolsEi@PLT
 1081      00
 1082 0769 488D3500 		leaq	.LC9(%rip), %rsi
 1082      000000
 1083 0770 4889C7   		movq	%rax, %rdi
 1084 0773 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1084      00
  86:XmlTestReporter.cpp ****        << " failures=\"" << failureCount << "\"" 
 1085              		.loc 1 86 0
 1086 0778 488D3500 		leaq	.LC14(%rip), %rsi
 1086      000000
 1087 077f 4889C7   		movq	%rax, %rdi
 1088 0782 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1088      00
 1089 0787 4889C2   		movq	%rax, %rdx
 1090 078a 8B45E4   		movl	-28(%rbp), %eax
 1091 078d 89C6     		movl	%eax, %esi
 1092 078f 4889D7   		movq	%rdx, %rdi
 1093 0792 E8000000 		call	_ZNSolsEi@PLT
 1093      00
 1094 0797 488D3500 		leaq	.LC9(%rip), %rsi
 1094      000000
 1095 079e 4889C7   		movq	%rax, %rdi
 1096 07a1 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1096      00
  87:XmlTestReporter.cpp ****        << " time=\"" << secondsElapsed << "\""
 1097              		.loc 1 87 0
 1098 07a6 488D3500 		leaq	.LC15(%rip), %rsi
 1098      000000
 1099 07ad 4889C7   		movq	%rax, %rdi
 1100 07b0 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1100      00
 1101 07b5 4889C2   		movq	%rax, %rdx
 1102 07b8 8B45E0   		movl	-32(%rbp), %eax
 1103 07bb 8945DC   		movl	%eax, -36(%rbp)
 1104 07be F30F1045 		movss	-36(%rbp), %xmm0
 1104      DC
 1105 07c3 4889D7   		movq	%rdx, %rdi
 1106 07c6 E8000000 		call	_ZNSolsEf@PLT
 1106      00
 1107 07cb 488D3500 		leaq	.LC9(%rip), %rsi
 1107      000000
 1108 07d2 4889C7   		movq	%rax, %rdi
 1109 07d5 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1109      00
  88:XmlTestReporter.cpp ****        << ">";
 1110              		.loc 1 88 0
 1111 07da 488D3500 		leaq	.LC16(%rip), %rsi
 1111      000000
 1112 07e1 4889C7   		movq	%rax, %rdi
 1113 07e4 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1113      00
  89:XmlTestReporter.cpp **** }
 1114              		.loc 1 89 0
 1115 07e9 90       		nop
 1116 07ea C9       		leave
 1117              		.cfi_def_cfa 7, 8
 1118 07eb C3       		ret
 1119              		.cfi_endproc
 1120              	.LFE1334:
 1122              		.section	.rodata
 1123              	.LC17:
 1124 008a 3C2F756E 		.string	"</unittest-results>"
 1124      69747465 
 1124      73742D72 
 1124      6573756C 
 1124      74733E00 
 1125              		.text
 1126              		.align 2
 1127              		.globl	_ZN8UnitTest15XmlTestReporter10EndResultsERSo
 1129              	_ZN8UnitTest15XmlTestReporter10EndResultsERSo:
 1130              	.LFB1335:
  90:XmlTestReporter.cpp **** 
  91:XmlTestReporter.cpp **** void XmlTestReporter::EndResults(std::ostream& os)
  92:XmlTestReporter.cpp **** {
 1131              		.loc 1 92 0
 1132              		.cfi_startproc
 1133 07ec 55       		pushq	%rbp
 1134              		.cfi_def_cfa_offset 16
 1135              		.cfi_offset 6, -16
 1136 07ed 4889E5   		movq	%rsp, %rbp
 1137              		.cfi_def_cfa_register 6
 1138 07f0 4883EC10 		subq	$16, %rsp
 1139 07f4 48897DF8 		movq	%rdi, -8(%rbp)
 1140 07f8 488975F0 		movq	%rsi, -16(%rbp)
  93:XmlTestReporter.cpp ****     os << "</unittest-results>";
 1141              		.loc 1 93 0
 1142 07fc 488B45F0 		movq	-16(%rbp), %rax
 1143 0800 488D3500 		leaq	.LC17(%rip), %rsi
 1143      000000
 1144 0807 4889C7   		movq	%rax, %rdi
 1145 080a E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1145      00
  94:XmlTestReporter.cpp **** }
 1146              		.loc 1 94 0
 1147 080f 90       		nop
 1148 0810 C9       		leave
 1149              		.cfi_def_cfa 7, 8
 1150 0811 C3       		ret
 1151              		.cfi_endproc
 1152              	.LFE1335:
 1154              		.section	.rodata
 1155              	.LC18:
 1156 009e 3C746573 		.string	"<test"
 1156      7400
 1157              	.LC19:
 1158 00a4 20737569 		.string	" suite=\""
 1158      74653D22 
 1158      00
 1159              	.LC20:
 1160 00ad 206E616D 		.string	" name=\""
 1160      653D2200 
 1161              		.text
 1162              		.align 2
 1163              		.globl	_ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE
 1165              	_ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE:
 1166              	.LFB1336:
  95:XmlTestReporter.cpp **** 
  96:XmlTestReporter.cpp **** void XmlTestReporter::BeginTest(std::ostream& os, DeferredTestResult const& result)
  97:XmlTestReporter.cpp **** {
 1167              		.loc 1 97 0
 1168              		.cfi_startproc
 1169 0812 55       		pushq	%rbp
 1170              		.cfi_def_cfa_offset 16
 1171              		.cfi_offset 6, -16
 1172 0813 4889E5   		movq	%rsp, %rbp
 1173              		.cfi_def_cfa_register 6
 1174 0816 4155     		pushq	%r13
 1175 0818 4154     		pushq	%r12
 1176 081a 53       		pushq	%rbx
 1177 081b 4883EC28 		subq	$40, %rsp
 1178              		.cfi_offset 13, -24
 1179              		.cfi_offset 12, -32
 1180              		.cfi_offset 3, -40
 1181 081f 48897DD8 		movq	%rdi, -40(%rbp)
 1182 0823 488975D0 		movq	%rsi, -48(%rbp)
 1183 0827 488955C8 		movq	%rdx, -56(%rbp)
  98:XmlTestReporter.cpp ****     os << "<test"
  99:XmlTestReporter.cpp ****         << " suite=\"" << result.suiteName << "\"" 
 100:XmlTestReporter.cpp ****         << " name=\"" << result.testName << "\""
 101:XmlTestReporter.cpp ****         << " time=\"" << result.timeElapsed << "\"";
 1184              		.loc 1 101 0
 1185 082b 488B45C8 		movq	-56(%rbp), %rax
 1186 082f 8B5878   		movl	120(%rax), %ebx
 100:XmlTestReporter.cpp ****         << " time=\"" << result.timeElapsed << "\"";
 1187              		.loc 1 100 0
 1188 0832 488B45C8 		movq	-56(%rbp), %rax
 1189 0836 4C8D6820 		leaq	32(%rax), %r13
  99:XmlTestReporter.cpp ****         << " name=\"" << result.testName << "\""
 1190              		.loc 1 99 0
 1191 083a 4C8B65C8 		movq	-56(%rbp), %r12
  98:XmlTestReporter.cpp ****     os << "<test"
 1192              		.loc 1 98 0
 1193 083e 488B45D0 		movq	-48(%rbp), %rax
 1194 0842 488D3500 		leaq	.LC18(%rip), %rsi
 1194      000000
 1195 0849 4889C7   		movq	%rax, %rdi
 1196 084c E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1196      00
  99:XmlTestReporter.cpp ****         << " name=\"" << result.testName << "\""
 1197              		.loc 1 99 0
 1198 0851 488D3500 		leaq	.LC19(%rip), %rsi
 1198      000000
 1199 0858 4889C7   		movq	%rax, %rdi
 1200 085b E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1200      00
 1201 0860 4C89E6   		movq	%r12, %rsi
 1202 0863 4889C7   		movq	%rax, %rdi
 1203 0866 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 1203      00
 1204 086b 488D3500 		leaq	.LC9(%rip), %rsi
 1204      000000
 1205 0872 4889C7   		movq	%rax, %rdi
 1206 0875 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1206      00
 100:XmlTestReporter.cpp ****         << " time=\"" << result.timeElapsed << "\"";
 1207              		.loc 1 100 0
 1208 087a 488D3500 		leaq	.LC20(%rip), %rsi
 1208      000000
 1209 0881 4889C7   		movq	%rax, %rdi
 1210 0884 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1210      00
 1211 0889 4C89EE   		movq	%r13, %rsi
 1212 088c 4889C7   		movq	%rax, %rdi
 1213 088f E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 1213      00
 1214 0894 488D3500 		leaq	.LC9(%rip), %rsi
 1214      000000
 1215 089b 4889C7   		movq	%rax, %rdi
 1216 089e E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1216      00
 1217              		.loc 1 101 0
 1218 08a3 488D3500 		leaq	.LC15(%rip), %rsi
 1218      000000
 1219 08aa 4889C7   		movq	%rax, %rdi
 1220 08ad E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1220      00
 1221 08b2 895DC4   		movl	%ebx, -60(%rbp)
 1222 08b5 F30F1045 		movss	-60(%rbp), %xmm0
 1222      C4
 1223 08ba 4889C7   		movq	%rax, %rdi
 1224 08bd E8000000 		call	_ZNSolsEf@PLT
 1224      00
 1225 08c2 488D3500 		leaq	.LC9(%rip), %rsi
 1225      000000
 1226 08c9 4889C7   		movq	%rax, %rdi
 1227 08cc E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1227      00
 102:XmlTestReporter.cpp **** }
 1228              		.loc 1 102 0
 1229 08d1 90       		nop
 1230 08d2 4883C428 		addq	$40, %rsp
 1231 08d6 5B       		popq	%rbx
 1232 08d7 415C     		popq	%r12
 1233 08d9 415D     		popq	%r13
 1234 08db 5D       		popq	%rbp
 1235              		.cfi_def_cfa 7, 8
 1236 08dc C3       		ret
 1237              		.cfi_endproc
 1238              	.LFE1336:
 1240              		.section	.rodata
 1241              	.LC21:
 1242 00b5 3C2F7465 		.string	"</test>"
 1242      73743E00 
 1243              	.LC22:
 1244 00bd 2F3E00   		.string	"/>"
 1245              		.text
 1246 08dd 90       		.align 2
 1247              		.globl	_ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE
 1249              	_ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE:
 1250              	.LFB1337:
 103:XmlTestReporter.cpp **** 
 104:XmlTestReporter.cpp **** void XmlTestReporter::EndTest(std::ostream& os, DeferredTestResult const& result)
 105:XmlTestReporter.cpp **** {
 1251              		.loc 1 105 0
 1252              		.cfi_startproc
 1253 08de 55       		pushq	%rbp
 1254              		.cfi_def_cfa_offset 16
 1255              		.cfi_offset 6, -16
 1256 08df 4889E5   		movq	%rsp, %rbp
 1257              		.cfi_def_cfa_register 6
 1258 08e2 4883EC20 		subq	$32, %rsp
 1259 08e6 48897DF8 		movq	%rdi, -8(%rbp)
 1260 08ea 488975F0 		movq	%rsi, -16(%rbp)
 1261 08ee 488955E8 		movq	%rdx, -24(%rbp)
 106:XmlTestReporter.cpp ****     if (result.failed)
 1262              		.loc 1 106 0
 1263 08f2 488B45E8 		movq	-24(%rbp), %rax
 1264 08f6 0FB6407C 		movzbl	124(%rax), %eax
 1265 08fa 84C0     		testb	%al, %al
 1266 08fc 7415     		je	.L58
 107:XmlTestReporter.cpp ****         os << "</test>";
 1267              		.loc 1 107 0
 1268 08fe 488B45F0 		movq	-16(%rbp), %rax
 1269 0902 488D3500 		leaq	.LC21(%rip), %rsi
 1269      000000
 1270 0909 4889C7   		movq	%rax, %rdi
 1271 090c E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1271      00
 108:XmlTestReporter.cpp ****     else
 109:XmlTestReporter.cpp ****         os << "/>";
 110:XmlTestReporter.cpp **** }
 1272              		.loc 1 110 0
 1273 0911 EB13     		jmp	.L60
 1274              	.L58:
 109:XmlTestReporter.cpp **** }
 1275              		.loc 1 109 0
 1276 0913 488B45F0 		movq	-16(%rbp), %rax
 1277 0917 488D3500 		leaq	.LC22(%rip), %rsi
 1277      000000
 1278 091e 4889C7   		movq	%rax, %rdi
 1279 0921 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1279      00
 1280              	.L60:
 1281              		.loc 1 110 0
 1282 0926 90       		nop
 1283 0927 C9       		leave
 1284              		.cfi_def_cfa 7, 8
 1285 0928 C3       		ret
 1286              		.cfi_endproc
 1287              	.LFE1337:
 1289              		.section	.rodata
 1290              	.LC23:
 1291 00c0 3C666169 		.string	"<failure"
 1291      6C757265 
 1291      00
 1292              	.LC24:
 1293 00c9 206D6573 		.string	" message=\""
 1293      73616765 
 1293      3D2200
 1294              		.text
 1295 0929 90       		.align 2
 1296              		.globl	_ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE
 1298              	_ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE:
 1299              	.LFB1338:
 111:XmlTestReporter.cpp **** 
 112:XmlTestReporter.cpp **** void XmlTestReporter::AddFailure(std::ostream& os, DeferredTestResult const& result)
 113:XmlTestReporter.cpp **** {
 1300              		.loc 1 113 0
 1301              		.cfi_startproc
 1302              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1303              		.cfi_lsda 0x1b,.LLSDA1338
 1304 092a 55       		pushq	%rbp
 1305              		.cfi_def_cfa_offset 16
 1306              		.cfi_offset 6, -16
 1307 092b 4889E5   		movq	%rsp, %rbp
 1308              		.cfi_def_cfa_register 6
 1309 092e 53       		pushq	%rbx
 1310 092f 4881EC98 		subq	$152, %rsp
 1310      000000
 1311              		.cfi_offset 3, -24
 1312 0936 4889BD78 		movq	%rdi, -136(%rbp)
 1312      FFFFFF
 1313 093d 4889B570 		movq	%rsi, -144(%rbp)
 1313      FFFFFF
 1314 0944 48899568 		movq	%rdx, -152(%rbp)
 1314      FFFFFF
 1315              		.loc 1 113 0
 1316 094b 64488B04 		movq	%fs:40, %rax
 1316      25280000 
 1316      00
 1317 0954 488945E8 		movq	%rax, -24(%rbp)
 1318 0958 31C0     		xorl	%eax, %eax
 114:XmlTestReporter.cpp ****     os << ">"; // close <test> element
 1319              		.loc 1 114 0
 1320 095a 488B8570 		movq	-144(%rbp), %rax
 1320      FFFFFF
 1321 0961 488D3500 		leaq	.LC16(%rip), %rsi
 1321      000000
 1322 0968 4889C7   		movq	%rax, %rdi
 1323              	.LEHB26:
 1324 096b E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1324      00
 1325              	.LBB10:
 115:XmlTestReporter.cpp **** 
 116:XmlTestReporter.cpp ****     for (DeferredTestResult::FailureVec::const_iterator it = result.failures.begin(); 
 1326              		.loc 1 116 0
 1327 0970 488B8568 		movq	-152(%rbp), %rax
 1327      FFFFFF
 1328 0977 4883C060 		addq	$96, %rax
 1329 097b 4889C7   		movq	%rax, %rdi
 1330 097e E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv@
 1330      00
 1331 0983 48894580 		movq	%rax, -128(%rbp)
 1332              	.L63:
 117:XmlTestReporter.cpp ****          it != result.failures.end(); 
 1333              		.loc 1 117 0
 1334 0987 488B8568 		movq	-152(%rbp), %rax
 1334      FFFFFF
 1335 098e 4883C060 		addq	$96, %rax
 1336 0992 4889C7   		movq	%rax, %rdi
 1337 0995 E8000000 		call	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv@PL
 1337      00
 1338 099a 48894590 		movq	%rax, -112(%rbp)
 116:XmlTestReporter.cpp ****          it != result.failures.end(); 
 1339              		.loc 1 116 0
 1340 099e 488D5590 		leaq	-112(%rbp), %rdx
 1341 09a2 488D4580 		leaq	-128(%rbp), %rax
 1342 09a6 4889D6   		movq	%rdx, %rsi
 1343 09a9 4889C7   		movq	%rax, %rdi
 1344 09ac E8000000 		call	_ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_
 1344      00
 1345 09b1 84C0     		testb	%al, %al
 1346 09b3 0F84F100 		je	.L69
 1346      0000
 1347              	.LBB11:
 118:XmlTestReporter.cpp ****          ++it)
 119:XmlTestReporter.cpp ****     {
 120:XmlTestReporter.cpp ****         string const escapedMessage = XmlEscape(it->second);
 1348              		.loc 1 120 0
 1349 09b9 488D4580 		leaq	-128(%rbp), %rax
 1350 09bd 4889C7   		movq	%rax, %rdi
 1351 09c0 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 1351      00
 1352 09c5 488D5008 		leaq	8(%rax), %rdx
 1353 09c9 488D45A0 		leaq	-96(%rbp), %rax
 1354 09cd 4889D6   		movq	%rdx, %rsi
 1355 09d0 4889C7   		movq	%rax, %rdi
 1356 09d3 E89EF6FF 		call	_ZN12_GLOBAL__N_19XmlEscapeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
 1356      FF
 1357              	.LEHE26:
 121:XmlTestReporter.cpp ****         string const message = BuildFailureMessage(result.failureFile, it->first, escapedMessage);
 1358              		.loc 1 121 0
 1359 09d8 488D4580 		leaq	-128(%rbp), %rax
 1360 09dc 4889C7   		movq	%rax, %rdi
 1361 09df E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 1361      00
 1362 09e4 8B10     		movl	(%rax), %edx
 1363 09e6 488B8568 		movq	-152(%rbp), %rax
 1363      FFFFFF
 1364 09ed 488D7040 		leaq	64(%rax), %rsi
 1365 09f1 488D45C0 		leaq	-64(%rbp), %rax
 1366 09f5 488D4DA0 		leaq	-96(%rbp), %rcx
 1367 09f9 4889C7   		movq	%rax, %rdi
 1368              	.LEHB27:
 1369 09fc E89EF9FF 		call	_ZN12_GLOBAL__N_119BuildFailureMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
 1369      FF
 1370              	.LEHE27:
 122:XmlTestReporter.cpp **** 
 123:XmlTestReporter.cpp ****         os << "<failure" << " message=\"" << message << "\"" << "/>";
 1371              		.loc 1 123 0
 1372 0a01 488B8570 		movq	-144(%rbp), %rax
 1372      FFFFFF
 1373 0a08 488D3500 		leaq	.LC23(%rip), %rsi
 1373      000000
 1374 0a0f 4889C7   		movq	%rax, %rdi
 1375              	.LEHB28:
 1376 0a12 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1376      00
 1377 0a17 488D3500 		leaq	.LC24(%rip), %rsi
 1377      000000
 1378 0a1e 4889C7   		movq	%rax, %rdi
 1379 0a21 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1379      00
 1380              		.loc 1 123 0 is_stmt 0 discriminator 1
 1381 0a26 4889C2   		movq	%rax, %rdx
 1382 0a29 488D45C0 		leaq	-64(%rbp), %rax
 1383 0a2d 4889C6   		movq	%rax, %rsi
 1384 0a30 4889D7   		movq	%rdx, %rdi
 1385 0a33 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5
 1385      00
 1386              		.loc 1 123 0 discriminator 2
 1387 0a38 488D3500 		leaq	.LC9(%rip), %rsi
 1387      000000
 1388 0a3f 4889C7   		movq	%rax, %rdi
 1389 0a42 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1389      00
 1390              		.loc 1 123 0 discriminator 3
 1391 0a47 488D3500 		leaq	.LC22(%rip), %rsi
 1391      000000
 1392 0a4e 4889C7   		movq	%rax, %rdi
 1393 0a51 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1393      00
 1394              	.LEHE28:
 121:XmlTestReporter.cpp ****         string const message = BuildFailureMessage(result.failureFile, it->first, escapedMessage);
 1395              		.loc 1 121 0 is_stmt 1
 1396 0a56 488D45C0 		leaq	-64(%rbp), %rax
 1397 0a5a 4889C7   		movq	%rax, %rdi
 1398              	.LEHB29:
 1399 0a5d E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 1399      00
 1400              	.LEHE29:
 120:XmlTestReporter.cpp ****         string const message = BuildFailureMessage(result.failureFile, it->first, escapedMessage);
 1401              		.loc 1 120 0
 1402 0a62 488D45A0 		leaq	-96(%rbp), %rax
 1403 0a66 4889C7   		movq	%rax, %rdi
 1404              	.LEHB30:
 1405 0a69 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 1405      00
 1406              	.LEHE30:
 1407              	.LBE11:
 116:XmlTestReporter.cpp ****          it != result.failures.end(); 
 1408              		.loc 1 116 0
 1409 0a6e 488D4580 		leaq	-128(%rbp), %rax
 1410 0a72 4889C7   		movq	%rax, %rdi
 1411 0a75 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 1411      00
 1412 0a7a E908FFFF 		jmp	.L63
 1412      FF
 1413              	.L68:
 1414 0a7f 4889C3   		movq	%rax, %rbx
 1415              	.LBB12:
 121:XmlTestReporter.cpp **** 
 1416              		.loc 1 121 0
 1417 0a82 488D45C0 		leaq	-64(%rbp), %rax
 1418 0a86 4889C7   		movq	%rax, %rdi
 1419 0a89 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 1419      00
 1420 0a8e EB03     		jmp	.L65
 1421              	.L67:
 1422 0a90 4889C3   		movq	%rax, %rbx
 1423              	.L65:
 120:XmlTestReporter.cpp ****         string const message = BuildFailureMessage(result.failureFile, it->first, escapedMessage);
 1424              		.loc 1 120 0
 1425 0a93 488D45A0 		leaq	-96(%rbp), %rax
 1426 0a97 4889C7   		movq	%rax, %rdi
 1427 0a9a E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 1427      00
 1428 0a9f 4889D8   		movq	%rbx, %rax
 1429 0aa2 4889C7   		movq	%rax, %rdi
 1430              	.LEHB31:
 1431 0aa5 E8000000 		call	_Unwind_Resume@PLT
 1431      00
 1432              	.LEHE31:
 1433              	.L69:
 1434              	.LBE12:
 1435              	.LBE10:
 124:XmlTestReporter.cpp ****     }
 125:XmlTestReporter.cpp **** }
 1436              		.loc 1 125 0
 1437 0aaa 90       		nop
 1438 0aab 488B45E8 		movq	-24(%rbp), %rax
 1439 0aaf 64483304 		xorq	%fs:40, %rax
 1439      25280000 
 1439      00
 1440 0ab8 7405     		je	.L66
 1441 0aba E8000000 		call	__stack_chk_fail@PLT
 1441      00
 1442              	.L66:
 1443 0abf 4881C498 		addq	$152, %rsp
 1443      000000
 1444 0ac6 5B       		popq	%rbx
 1445 0ac7 5D       		popq	%rbp
 1446              		.cfi_def_cfa 7, 8
 1447 0ac8 C3       		ret
 1448              		.cfi_endproc
 1449              	.LFE1338:
 1450              		.section	.gcc_except_table
 1451              	.LLSDA1338:
 1452 0099 FF       		.byte	0xff
 1453 009a FF       		.byte	0xff
 1454 009b 01       		.byte	0x1
 1455 009c 20       		.uleb128 .LLSDACSE1338-.LLSDACSB1338
 1456              	.LLSDACSB1338:
 1457 009d 41       		.uleb128 .LEHB26-.LFB1338
 1458 009e 6D       		.uleb128 .LEHE26-.LEHB26
 1459 009f 00       		.uleb128 0
 1460 00a0 00       		.uleb128 0
 1461 00a1 D201     		.uleb128 .LEHB27-.LFB1338
 1462 00a3 05       		.uleb128 .LEHE27-.LEHB27
 1463 00a4 E602     		.uleb128 .L67-.LFB1338
 1464 00a6 00       		.uleb128 0
 1465 00a7 E801     		.uleb128 .LEHB28-.LFB1338
 1466 00a9 44       		.uleb128 .LEHE28-.LEHB28
 1467 00aa D502     		.uleb128 .L68-.LFB1338
 1468 00ac 00       		.uleb128 0
 1469 00ad B302     		.uleb128 .LEHB29-.LFB1338
 1470 00af 05       		.uleb128 .LEHE29-.LEHB29
 1471 00b0 E602     		.uleb128 .L67-.LFB1338
 1472 00b2 00       		.uleb128 0
 1473 00b3 BF02     		.uleb128 .LEHB30-.LFB1338
 1474 00b5 05       		.uleb128 .LEHE30-.LEHB30
 1475 00b6 00       		.uleb128 0
 1476 00b7 00       		.uleb128 0
 1477 00b8 FB02     		.uleb128 .LEHB31-.LFB1338
 1478 00ba 05       		.uleb128 .LEHE31-.LEHB31
 1479 00bb 00       		.uleb128 0
 1480 00bc 00       		.uleb128 0
 1481              	.LLSDACSE1338:
 1482              		.text
 1484              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev,"axG",@progbits,_ZNSt6vect
 1485              		.align 2
 1486              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
 1488              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:
 1489              	.LFB1374:
 1490              		.file 4 "/usr/include/c++/5/bits/stl_vector.h"
   1:/usr/include/c++/5/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/5/bits/stl_vector.h **** 
   3:/usr/include/c++/5/bits/stl_vector.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/stl_vector.h **** //
   5:/usr/include/c++/5/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/stl_vector.h **** // any later version.
  10:/usr/include/c++/5/bits/stl_vector.h **** 
  11:/usr/include/c++/5/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/stl_vector.h **** 
  16:/usr/include/c++/5/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/stl_vector.h **** 
  20:/usr/include/c++/5/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/stl_vector.h **** 
  25:/usr/include/c++/5/bits/stl_vector.h **** /*
  26:/usr/include/c++/5/bits/stl_vector.h ****  *
  27:/usr/include/c++/5/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/c++/5/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/5/bits/stl_vector.h ****  *
  30:/usr/include/c++/5/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/5/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/5/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/5/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/5/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/5/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/5/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/5/bits/stl_vector.h ****  *
  38:/usr/include/c++/5/bits/stl_vector.h ****  *
  39:/usr/include/c++/5/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/c++/5/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/5/bits/stl_vector.h ****  *
  42:/usr/include/c++/5/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/5/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/5/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/5/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/5/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/5/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/5/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/5/bits/stl_vector.h ****  */
  50:/usr/include/c++/5/bits/stl_vector.h **** 
  51:/usr/include/c++/5/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/c++/5/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/5/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/5/bits/stl_vector.h ****  */
  55:/usr/include/c++/5/bits/stl_vector.h **** 
  56:/usr/include/c++/5/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/c++/5/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/c++/5/bits/stl_vector.h **** 
  59:/usr/include/c++/5/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/c++/5/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/5/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/c++/5/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/5/bits/stl_vector.h **** #endif
  65:/usr/include/c++/5/bits/stl_vector.h **** 
  66:/usr/include/c++/5/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  67:/usr/include/c++/5/bits/stl_vector.h **** {
  68:/usr/include/c++/5/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  69:/usr/include/c++/5/bits/stl_vector.h **** 
  70:/usr/include/c++/5/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  71:/usr/include/c++/5/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  72:/usr/include/c++/5/bits/stl_vector.h ****     struct _Vector_base
  73:/usr/include/c++/5/bits/stl_vector.h ****     {
  74:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  75:/usr/include/c++/5/bits/stl_vector.h ****         rebind<_Tp>::other _Tp_alloc_type;
  76:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  77:/usr/include/c++/5/bits/stl_vector.h ****        	pointer;
  78:/usr/include/c++/5/bits/stl_vector.h **** 
  79:/usr/include/c++/5/bits/stl_vector.h ****       struct _Vector_impl 
  80:/usr/include/c++/5/bits/stl_vector.h ****       : public _Tp_alloc_type
  81:/usr/include/c++/5/bits/stl_vector.h ****       {
  82:/usr/include/c++/5/bits/stl_vector.h **** 	pointer _M_start;
  83:/usr/include/c++/5/bits/stl_vector.h **** 	pointer _M_finish;
  84:/usr/include/c++/5/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  85:/usr/include/c++/5/bits/stl_vector.h **** 
  86:/usr/include/c++/5/bits/stl_vector.h **** 	_Vector_impl()
  87:/usr/include/c++/5/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  88:/usr/include/c++/5/bits/stl_vector.h **** 	{ }
  89:/usr/include/c++/5/bits/stl_vector.h **** 
  90:/usr/include/c++/5/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
  91:/usr/include/c++/5/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  92:/usr/include/c++/5/bits/stl_vector.h **** 	{ }
  93:/usr/include/c++/5/bits/stl_vector.h **** 
  94:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
  95:/usr/include/c++/5/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
  96:/usr/include/c++/5/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)),
  97:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_start(), _M_finish(), _M_end_of_storage()
  98:/usr/include/c++/5/bits/stl_vector.h **** 	{ }
  99:/usr/include/c++/5/bits/stl_vector.h **** #endif
 100:/usr/include/c++/5/bits/stl_vector.h **** 
 101:/usr/include/c++/5/bits/stl_vector.h **** 	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 102:/usr/include/c++/5/bits/stl_vector.h **** 	{
 103:/usr/include/c++/5/bits/stl_vector.h **** 	  std::swap(_M_start, __x._M_start);
 104:/usr/include/c++/5/bits/stl_vector.h **** 	  std::swap(_M_finish, __x._M_finish);
 105:/usr/include/c++/5/bits/stl_vector.h **** 	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 106:/usr/include/c++/5/bits/stl_vector.h **** 	}
 107:/usr/include/c++/5/bits/stl_vector.h ****       };
 108:/usr/include/c++/5/bits/stl_vector.h ****       
 109:/usr/include/c++/5/bits/stl_vector.h ****     public:
 110:/usr/include/c++/5/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 111:/usr/include/c++/5/bits/stl_vector.h **** 
 112:/usr/include/c++/5/bits/stl_vector.h ****       _Tp_alloc_type&
 113:/usr/include/c++/5/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 114:/usr/include/c++/5/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 115:/usr/include/c++/5/bits/stl_vector.h **** 
 116:/usr/include/c++/5/bits/stl_vector.h ****       const _Tp_alloc_type&
 117:/usr/include/c++/5/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 118:/usr/include/c++/5/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 119:/usr/include/c++/5/bits/stl_vector.h **** 
 120:/usr/include/c++/5/bits/stl_vector.h ****       allocator_type
 121:/usr/include/c++/5/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 122:/usr/include/c++/5/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 123:/usr/include/c++/5/bits/stl_vector.h **** 
 124:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base()
 125:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl() { }
 126:/usr/include/c++/5/bits/stl_vector.h **** 
 127:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 128:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(__a) { }
 129:/usr/include/c++/5/bits/stl_vector.h **** 
 130:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(size_t __n)
 131:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl()
 132:/usr/include/c++/5/bits/stl_vector.h ****       { _M_create_storage(__n); }
 133:/usr/include/c++/5/bits/stl_vector.h **** 
 134:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 135:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(__a)
 136:/usr/include/c++/5/bits/stl_vector.h ****       { _M_create_storage(__n); }
 137:/usr/include/c++/5/bits/stl_vector.h **** 
 138:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 139:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 140:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 141:/usr/include/c++/5/bits/stl_vector.h **** 
 142:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x) noexcept
 143:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(std::move(__x._M_get_Tp_allocator()))
 144:/usr/include/c++/5/bits/stl_vector.h ****       { this->_M_impl._M_swap_data(__x._M_impl); }
 145:/usr/include/c++/5/bits/stl_vector.h **** 
 146:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 147:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(__a)
 148:/usr/include/c++/5/bits/stl_vector.h ****       {
 149:/usr/include/c++/5/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 150:/usr/include/c++/5/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 151:/usr/include/c++/5/bits/stl_vector.h **** 	else
 152:/usr/include/c++/5/bits/stl_vector.h **** 	  {
 153:/usr/include/c++/5/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 154:/usr/include/c++/5/bits/stl_vector.h **** 	    _M_create_storage(__n);
 155:/usr/include/c++/5/bits/stl_vector.h **** 	  }
 156:/usr/include/c++/5/bits/stl_vector.h ****       }
 157:/usr/include/c++/5/bits/stl_vector.h **** #endif
 158:/usr/include/c++/5/bits/stl_vector.h **** 
 159:/usr/include/c++/5/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 160:/usr/include/c++/5/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 161:/usr/include/c++/5/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 162:/usr/include/c++/5/bits/stl_vector.h **** 
 163:/usr/include/c++/5/bits/stl_vector.h ****     public:
 164:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_impl _M_impl;
 165:/usr/include/c++/5/bits/stl_vector.h **** 
 166:/usr/include/c++/5/bits/stl_vector.h ****       pointer
 167:/usr/include/c++/5/bits/stl_vector.h ****       _M_allocate(size_t __n)
 168:/usr/include/c++/5/bits/stl_vector.h ****       {
 169:/usr/include/c++/5/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 170:/usr/include/c++/5/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 171:/usr/include/c++/5/bits/stl_vector.h ****       }
 172:/usr/include/c++/5/bits/stl_vector.h **** 
 173:/usr/include/c++/5/bits/stl_vector.h ****       void
 174:/usr/include/c++/5/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 175:/usr/include/c++/5/bits/stl_vector.h ****       {
 176:/usr/include/c++/5/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 177:/usr/include/c++/5/bits/stl_vector.h **** 	if (__p)
 178:/usr/include/c++/5/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 179:/usr/include/c++/5/bits/stl_vector.h ****       }
 180:/usr/include/c++/5/bits/stl_vector.h **** 
 181:/usr/include/c++/5/bits/stl_vector.h ****     private:
 182:/usr/include/c++/5/bits/stl_vector.h ****       void
 183:/usr/include/c++/5/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 184:/usr/include/c++/5/bits/stl_vector.h ****       {
 185:/usr/include/c++/5/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 186:/usr/include/c++/5/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 187:/usr/include/c++/5/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 188:/usr/include/c++/5/bits/stl_vector.h ****       }
 189:/usr/include/c++/5/bits/stl_vector.h ****     };
 190:/usr/include/c++/5/bits/stl_vector.h **** 
 191:/usr/include/c++/5/bits/stl_vector.h **** 
 192:/usr/include/c++/5/bits/stl_vector.h ****   /**
 193:/usr/include/c++/5/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 194:/usr/include/c++/5/bits/stl_vector.h ****    *  individual elements in any order.
 195:/usr/include/c++/5/bits/stl_vector.h ****    *
 196:/usr/include/c++/5/bits/stl_vector.h ****    *  @ingroup sequences
 197:/usr/include/c++/5/bits/stl_vector.h ****    *
 198:/usr/include/c++/5/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 199:/usr/include/c++/5/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 200:/usr/include/c++/5/bits/stl_vector.h ****    *
 201:/usr/include/c++/5/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 202:/usr/include/c++/5/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 203:/usr/include/c++/5/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 204:/usr/include/c++/5/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 205:/usr/include/c++/5/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 206:/usr/include/c++/5/bits/stl_vector.h ****    *
 207:/usr/include/c++/5/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 208:/usr/include/c++/5/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 209:/usr/include/c++/5/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 210:/usr/include/c++/5/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 211:/usr/include/c++/5/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 212:/usr/include/c++/5/bits/stl_vector.h ****   */
 213:/usr/include/c++/5/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 214:/usr/include/c++/5/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 215:/usr/include/c++/5/bits/stl_vector.h ****     {
 216:/usr/include/c++/5/bits/stl_vector.h ****       // Concept requirements.
 217:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Alloc::value_type                _Alloc_value_type;
 218:/usr/include/c++/5/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 219:/usr/include/c++/5/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 220:/usr/include/c++/5/bits/stl_vector.h ****       
 221:/usr/include/c++/5/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			 _Base;
 222:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;
 223:/usr/include/c++/5/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>  _Alloc_traits;
 224:/usr/include/c++/5/bits/stl_vector.h **** 
 225:/usr/include/c++/5/bits/stl_vector.h ****     public:
 226:/usr/include/c++/5/bits/stl_vector.h ****       typedef _Tp					 value_type;
 227:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Base::pointer                    pointer;
 228:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer      const_pointer;
 229:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference          reference;
 230:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference    const_reference;
 231:/usr/include/c++/5/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 232:/usr/include/c++/5/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 233:/usr/include/c++/5/bits/stl_vector.h ****       const_iterator;
 234:/usr/include/c++/5/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;
 235:/usr/include/c++/5/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		 reverse_iterator;
 236:/usr/include/c++/5/bits/stl_vector.h ****       typedef size_t					 size_type;
 237:/usr/include/c++/5/bits/stl_vector.h ****       typedef ptrdiff_t					 difference_type;
 238:/usr/include/c++/5/bits/stl_vector.h ****       typedef _Alloc                        		 allocator_type;
 239:/usr/include/c++/5/bits/stl_vector.h **** 
 240:/usr/include/c++/5/bits/stl_vector.h ****     protected:
 241:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::_M_allocate;
 242:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::_M_deallocate;
 243:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::_M_impl;
 244:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 245:/usr/include/c++/5/bits/stl_vector.h **** 
 246:/usr/include/c++/5/bits/stl_vector.h ****     public:
 247:/usr/include/c++/5/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 248:/usr/include/c++/5/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 249:/usr/include/c++/5/bits/stl_vector.h **** 
 250:/usr/include/c++/5/bits/stl_vector.h ****       /**
 251:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 252:/usr/include/c++/5/bits/stl_vector.h ****        */
 253:/usr/include/c++/5/bits/stl_vector.h ****       vector()
 1491              		.loc 4 253 0
 1492              		.cfi_startproc
 1493 0000 55       		pushq	%rbp
 1494              		.cfi_def_cfa_offset 16
 1495              		.cfi_offset 6, -16
 1496 0001 4889E5   		movq	%rsp, %rbp
 1497              		.cfi_def_cfa_register 6
 1498 0004 4883EC10 		subq	$16, %rsp
 1499 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1500              	.LBB13:
 254:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 255:/usr/include/c++/5/bits/stl_vector.h ****       noexcept(is_nothrow_default_constructible<_Alloc>::value)
 256:/usr/include/c++/5/bits/stl_vector.h **** #endif
 257:/usr/include/c++/5/bits/stl_vector.h ****       : _Base() { }
 1501              		.loc 4 257 0
 1502 000c 488B45F8 		movq	-8(%rbp), %rax
 1503 0010 4889C7   		movq	%rax, %rdi
 1504 0013 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev@PLT
 1504      00
 1505              	.LBE13:
 1506 0018 90       		nop
 1507 0019 C9       		leave
 1508              		.cfi_def_cfa 7, 8
 1509 001a C3       		ret
 1510              		.cfi_endproc
 1511              	.LFE1374:
 1513              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
 1514              		.set	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev,_ZNSt6vectorIN8UnitTest18DeferredTes
 1515              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vect
 1516              		.align 2
 1517              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
 1519              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:
 1520              	.LFB1377:
 258:/usr/include/c++/5/bits/stl_vector.h **** 
 259:/usr/include/c++/5/bits/stl_vector.h ****       /**
 260:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 261:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 262:/usr/include/c++/5/bits/stl_vector.h ****        */
 263:/usr/include/c++/5/bits/stl_vector.h ****       explicit
 264:/usr/include/c++/5/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 265:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__a) { }
 266:/usr/include/c++/5/bits/stl_vector.h **** 
 267:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 268:/usr/include/c++/5/bits/stl_vector.h ****       /**
 269:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 270:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 271:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 272:/usr/include/c++/5/bits/stl_vector.h ****        *
 273:/usr/include/c++/5/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 274:/usr/include/c++/5/bits/stl_vector.h ****        *  constructed elements.
 275:/usr/include/c++/5/bits/stl_vector.h ****        */
 276:/usr/include/c++/5/bits/stl_vector.h ****       explicit
 277:/usr/include/c++/5/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 278:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__n, __a)
 279:/usr/include/c++/5/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 280:/usr/include/c++/5/bits/stl_vector.h **** 
 281:/usr/include/c++/5/bits/stl_vector.h ****       /**
 282:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 283:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 284:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 285:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 286:/usr/include/c++/5/bits/stl_vector.h ****        *
 287:/usr/include/c++/5/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 288:/usr/include/c++/5/bits/stl_vector.h ****        */
 289:/usr/include/c++/5/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 290:/usr/include/c++/5/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 291:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__n, __a)
 292:/usr/include/c++/5/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 293:/usr/include/c++/5/bits/stl_vector.h **** #else
 294:/usr/include/c++/5/bits/stl_vector.h ****       /**
 295:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 296:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 297:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 298:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 299:/usr/include/c++/5/bits/stl_vector.h ****        *
 300:/usr/include/c++/5/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 301:/usr/include/c++/5/bits/stl_vector.h ****        */
 302:/usr/include/c++/5/bits/stl_vector.h ****       explicit
 303:/usr/include/c++/5/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 304:/usr/include/c++/5/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 305:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__n, __a)
 306:/usr/include/c++/5/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 307:/usr/include/c++/5/bits/stl_vector.h **** #endif
 308:/usr/include/c++/5/bits/stl_vector.h **** 
 309:/usr/include/c++/5/bits/stl_vector.h ****       /**
 310:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 311:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 312:/usr/include/c++/5/bits/stl_vector.h ****        *
 313:/usr/include/c++/5/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocation
 314:/usr/include/c++/5/bits/stl_vector.h ****        *  object used by @a __x.  All the elements of @a __x are copied,
 315:/usr/include/c++/5/bits/stl_vector.h ****        *  but any extra memory in
 316:/usr/include/c++/5/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.
 317:/usr/include/c++/5/bits/stl_vector.h ****        */
 318:/usr/include/c++/5/bits/stl_vector.h ****       vector(const vector& __x)
 319:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__x.size(),
 320:/usr/include/c++/5/bits/stl_vector.h ****         _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 321:/usr/include/c++/5/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 322:/usr/include/c++/5/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 323:/usr/include/c++/5/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 324:/usr/include/c++/5/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 325:/usr/include/c++/5/bits/stl_vector.h ****       }
 326:/usr/include/c++/5/bits/stl_vector.h **** 
 327:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 328:/usr/include/c++/5/bits/stl_vector.h ****       /**
 329:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 330:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 331:/usr/include/c++/5/bits/stl_vector.h ****        *
 332:/usr/include/c++/5/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of @a __x.
 333:/usr/include/c++/5/bits/stl_vector.h ****        *  The contents of @a __x are a valid, but unspecified %vector.
 334:/usr/include/c++/5/bits/stl_vector.h ****        */
 335:/usr/include/c++/5/bits/stl_vector.h ****       vector(vector&& __x) noexcept
 336:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(std::move(__x)) { }
 337:/usr/include/c++/5/bits/stl_vector.h **** 
 338:/usr/include/c++/5/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 339:/usr/include/c++/5/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 340:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 341:/usr/include/c++/5/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 342:/usr/include/c++/5/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 343:/usr/include/c++/5/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 344:/usr/include/c++/5/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 345:/usr/include/c++/5/bits/stl_vector.h ****       }
 346:/usr/include/c++/5/bits/stl_vector.h **** 
 347:/usr/include/c++/5/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 348:/usr/include/c++/5/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 349:/usr/include/c++/5/bits/stl_vector.h ****       noexcept(_Alloc_traits::_S_always_equal())
 350:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(std::move(__rv), __m)
 351:/usr/include/c++/5/bits/stl_vector.h ****       {
 352:/usr/include/c++/5/bits/stl_vector.h **** 	if (__rv.get_allocator() != __m)
 353:/usr/include/c++/5/bits/stl_vector.h **** 	  {
 354:/usr/include/c++/5/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 355:/usr/include/c++/5/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 356:/usr/include/c++/5/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 357:/usr/include/c++/5/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 358:/usr/include/c++/5/bits/stl_vector.h **** 	    __rv.clear();
 359:/usr/include/c++/5/bits/stl_vector.h **** 	  }
 360:/usr/include/c++/5/bits/stl_vector.h ****       }
 361:/usr/include/c++/5/bits/stl_vector.h **** 
 362:/usr/include/c++/5/bits/stl_vector.h ****       /**
 363:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 364:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 365:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 366:/usr/include/c++/5/bits/stl_vector.h ****        *
 367:/usr/include/c++/5/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 368:/usr/include/c++/5/bits/stl_vector.h ****        *  initializer_list @a __l.
 369:/usr/include/c++/5/bits/stl_vector.h ****        *
 370:/usr/include/c++/5/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 371:/usr/include/c++/5/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 372:/usr/include/c++/5/bits/stl_vector.h ****        */
 373:/usr/include/c++/5/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 374:/usr/include/c++/5/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 375:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__a)
 376:/usr/include/c++/5/bits/stl_vector.h ****       {
 377:/usr/include/c++/5/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 378:/usr/include/c++/5/bits/stl_vector.h **** 			    random_access_iterator_tag());
 379:/usr/include/c++/5/bits/stl_vector.h ****       }
 380:/usr/include/c++/5/bits/stl_vector.h **** #endif
 381:/usr/include/c++/5/bits/stl_vector.h **** 
 382:/usr/include/c++/5/bits/stl_vector.h ****       /**
 383:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 384:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 385:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 386:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 387:/usr/include/c++/5/bits/stl_vector.h ****        *
 388:/usr/include/c++/5/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 389:/usr/include/c++/5/bits/stl_vector.h ****        *  [first,last).
 390:/usr/include/c++/5/bits/stl_vector.h ****        *
 391:/usr/include/c++/5/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 392:/usr/include/c++/5/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 393:/usr/include/c++/5/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 394:/usr/include/c++/5/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 395:/usr/include/c++/5/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 396:/usr/include/c++/5/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 397:/usr/include/c++/5/bits/stl_vector.h ****        */
 398:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 399:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator,
 400:/usr/include/c++/5/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 401:/usr/include/c++/5/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 402:/usr/include/c++/5/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 403:/usr/include/c++/5/bits/stl_vector.h **** 	: _Base(__a)
 404:/usr/include/c++/5/bits/stl_vector.h ****         { _M_initialize_dispatch(__first, __last, __false_type()); }
 405:/usr/include/c++/5/bits/stl_vector.h **** #else
 406:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
 407:/usr/include/c++/5/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 408:/usr/include/c++/5/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 409:/usr/include/c++/5/bits/stl_vector.h **** 	: _Base(__a)
 410:/usr/include/c++/5/bits/stl_vector.h ****         {
 411:/usr/include/c++/5/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 412:/usr/include/c++/5/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 413:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 414:/usr/include/c++/5/bits/stl_vector.h **** 	}
 415:/usr/include/c++/5/bits/stl_vector.h **** #endif
 416:/usr/include/c++/5/bits/stl_vector.h **** 
 417:/usr/include/c++/5/bits/stl_vector.h ****       /**
 418:/usr/include/c++/5/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 419:/usr/include/c++/5/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 420:/usr/include/c++/5/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 421:/usr/include/c++/5/bits/stl_vector.h ****        *  responsibility.
 422:/usr/include/c++/5/bits/stl_vector.h ****        */
 423:/usr/include/c++/5/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 1521              		.loc 4 423 0
 1522              		.cfi_startproc
 1523              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1524              		.cfi_lsda 0x1b,.LLSDA1377
 1525 0000 55       		pushq	%rbp
 1526              		.cfi_def_cfa_offset 16
 1527              		.cfi_offset 6, -16
 1528 0001 4889E5   		movq	%rsp, %rbp
 1529              		.cfi_def_cfa_register 6
 1530 0004 53       		pushq	%rbx
 1531 0005 4883EC18 		subq	$24, %rsp
 1532              		.cfi_offset 3, -24
 1533 0009 48897DE8 		movq	%rdi, -24(%rbp)
 1534              	.LBB14:
 424:/usr/include/c++/5/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 425:/usr/include/c++/5/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 1535              		.loc 4 425 0
 1536 000d 488B45E8 		movq	-24(%rbp), %rax
 1537 0011 4889C7   		movq	%rax, %rdi
 1538 0014 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1538      00
 1539 0019 4889C2   		movq	%rax, %rdx
 424:/usr/include/c++/5/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 1540              		.loc 4 424 0
 1541 001c 488B45E8 		movq	-24(%rbp), %rax
 1542 0020 488B4808 		movq	8(%rax), %rcx
 1543 0024 488B45E8 		movq	-24(%rbp), %rax
 1544 0028 488B00   		movq	(%rax), %rax
 1545 002b 4889CE   		movq	%rcx, %rsi
 1546 002e 4889C7   		movq	%rax, %rdi
 1547              	.LEHB32:
 1548 0031 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E@PLT
 1548      00
 1549              	.LEHE32:
 1550              		.loc 4 425 0
 1551 0036 488B45E8 		movq	-24(%rbp), %rax
 1552 003a 4889C7   		movq	%rax, %rdi
 1553              	.LEHB33:
 1554 003d E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev@PLT
 1554      00
 1555              	.LEHE33:
 1556              	.LBE14:
 1557 0042 EB1A     		jmp	.L74
 1558              	.L73:
 1559 0044 4889C3   		movq	%rax, %rbx
 1560              	.LBB15:
 1561 0047 488B45E8 		movq	-24(%rbp), %rax
 1562 004b 4889C7   		movq	%rax, %rdi
 1563 004e E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev@PLT
 1563      00
 1564 0053 4889D8   		movq	%rbx, %rax
 1565 0056 4889C7   		movq	%rax, %rdi
 1566              	.LEHB34:
 1567 0059 E8000000 		call	_Unwind_Resume@PLT
 1567      00
 1568              	.LEHE34:
 1569              	.L74:
 1570              	.LBE15:
 1571 005e 4883C418 		addq	$24, %rsp
 1572 0062 5B       		popq	%rbx
 1573 0063 5D       		popq	%rbp
 1574              		.cfi_def_cfa 7, 8
 1575 0064 C3       		ret
 1576              		.cfi_endproc
 1577              	.LFE1377:
 1578              		.section	.gcc_except_table
 1579              	.LLSDA1377:
 1580 00bd FF       		.byte	0xff
 1581 00be FF       		.byte	0xff
 1582 00bf 01       		.byte	0x1
 1583 00c0 0C       		.uleb128 .LLSDACSE1377-.LLSDACSB1377
 1584              	.LLSDACSB1377:
 1585 00c1 31       		.uleb128 .LEHB32-.LFB1377
 1586 00c2 05       		.uleb128 .LEHE32-.LEHB32
 1587 00c3 44       		.uleb128 .L73-.LFB1377
 1588 00c4 00       		.uleb128 0
 1589 00c5 3D       		.uleb128 .LEHB33-.LFB1377
 1590 00c6 05       		.uleb128 .LEHE33-.LEHB33
 1591 00c7 00       		.uleb128 0
 1592 00c8 00       		.uleb128 0
 1593 00c9 59       		.uleb128 .LEHB34-.LFB1377
 1594 00ca 05       		.uleb128 .LEHE34-.LEHB34
 1595 00cb 00       		.uleb128 0
 1596 00cc 00       		.uleb128 0
 1597              	.LLSDACSE1377:
 1598              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vect
 1600              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
 1601              		.set	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev,_ZNSt6vectorIN8UnitTest18DeferredTes
 1602              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv,"axG",@progbits,_ZNKS
 1603              		.align 2
 1604              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv
 1606              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv:
 1607              	.LFB1379:
 426:/usr/include/c++/5/bits/stl_vector.h **** 
 427:/usr/include/c++/5/bits/stl_vector.h ****       /**
 428:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 429:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 430:/usr/include/c++/5/bits/stl_vector.h ****        *
 431:/usr/include/c++/5/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any extra memory in
 432:/usr/include/c++/5/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.  Unlike the
 433:/usr/include/c++/5/bits/stl_vector.h ****        *  copy constructor, the allocator object is not copied.
 434:/usr/include/c++/5/bits/stl_vector.h ****        */
 435:/usr/include/c++/5/bits/stl_vector.h ****       vector&
 436:/usr/include/c++/5/bits/stl_vector.h ****       operator=(const vector& __x);
 437:/usr/include/c++/5/bits/stl_vector.h **** 
 438:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 439:/usr/include/c++/5/bits/stl_vector.h ****       /**
 440:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 441:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 442:/usr/include/c++/5/bits/stl_vector.h ****        *
 443:/usr/include/c++/5/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 444:/usr/include/c++/5/bits/stl_vector.h ****        *  if the allocators permit it).
 445:/usr/include/c++/5/bits/stl_vector.h ****        *  @a __x is a valid, but unspecified %vector.
 446:/usr/include/c++/5/bits/stl_vector.h ****        */
 447:/usr/include/c++/5/bits/stl_vector.h ****       vector&
 448:/usr/include/c++/5/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 449:/usr/include/c++/5/bits/stl_vector.h ****       {
 450:/usr/include/c++/5/bits/stl_vector.h ****         constexpr bool __move_storage =
 451:/usr/include/c++/5/bits/stl_vector.h ****           _Alloc_traits::_S_propagate_on_move_assign()
 452:/usr/include/c++/5/bits/stl_vector.h ****           || _Alloc_traits::_S_always_equal();
 453:/usr/include/c++/5/bits/stl_vector.h ****         _M_move_assign(std::move(__x),
 454:/usr/include/c++/5/bits/stl_vector.h ****                        integral_constant<bool, __move_storage>());
 455:/usr/include/c++/5/bits/stl_vector.h **** 	return *this;
 456:/usr/include/c++/5/bits/stl_vector.h ****       }
 457:/usr/include/c++/5/bits/stl_vector.h **** 
 458:/usr/include/c++/5/bits/stl_vector.h ****       /**
 459:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 460:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 461:/usr/include/c++/5/bits/stl_vector.h ****        *
 462:/usr/include/c++/5/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 463:/usr/include/c++/5/bits/stl_vector.h ****        *  initializer list @a __l.
 464:/usr/include/c++/5/bits/stl_vector.h ****        *
 465:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 466:/usr/include/c++/5/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 467:/usr/include/c++/5/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 468:/usr/include/c++/5/bits/stl_vector.h ****        */
 469:/usr/include/c++/5/bits/stl_vector.h ****       vector&
 470:/usr/include/c++/5/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 471:/usr/include/c++/5/bits/stl_vector.h ****       {
 472:/usr/include/c++/5/bits/stl_vector.h **** 	this->assign(__l.begin(), __l.end());
 473:/usr/include/c++/5/bits/stl_vector.h **** 	return *this;
 474:/usr/include/c++/5/bits/stl_vector.h ****       }
 475:/usr/include/c++/5/bits/stl_vector.h **** #endif
 476:/usr/include/c++/5/bits/stl_vector.h **** 
 477:/usr/include/c++/5/bits/stl_vector.h ****       /**
 478:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 479:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 480:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 481:/usr/include/c++/5/bits/stl_vector.h ****        *
 482:/usr/include/c++/5/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 483:/usr/include/c++/5/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 484:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 485:/usr/include/c++/5/bits/stl_vector.h ****        *  the number of elements assigned.  Old data may be lost.
 486:/usr/include/c++/5/bits/stl_vector.h ****        */
 487:/usr/include/c++/5/bits/stl_vector.h ****       void
 488:/usr/include/c++/5/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 489:/usr/include/c++/5/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 490:/usr/include/c++/5/bits/stl_vector.h **** 
 491:/usr/include/c++/5/bits/stl_vector.h ****       /**
 492:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 493:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 494:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 495:/usr/include/c++/5/bits/stl_vector.h ****        *
 496:/usr/include/c++/5/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 497:/usr/include/c++/5/bits/stl_vector.h ****        *  range [__first,__last).
 498:/usr/include/c++/5/bits/stl_vector.h ****        *
 499:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 500:/usr/include/c++/5/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 501:/usr/include/c++/5/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 502:/usr/include/c++/5/bits/stl_vector.h ****        */
 503:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 504:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator,
 505:/usr/include/c++/5/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 506:/usr/include/c++/5/bits/stl_vector.h ****         void
 507:/usr/include/c++/5/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 508:/usr/include/c++/5/bits/stl_vector.h ****         { _M_assign_dispatch(__first, __last, __false_type()); }
 509:/usr/include/c++/5/bits/stl_vector.h **** #else
 510:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
 511:/usr/include/c++/5/bits/stl_vector.h ****         void
 512:/usr/include/c++/5/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 513:/usr/include/c++/5/bits/stl_vector.h ****         {
 514:/usr/include/c++/5/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 515:/usr/include/c++/5/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 516:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 517:/usr/include/c++/5/bits/stl_vector.h **** 	}
 518:/usr/include/c++/5/bits/stl_vector.h **** #endif
 519:/usr/include/c++/5/bits/stl_vector.h **** 
 520:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 521:/usr/include/c++/5/bits/stl_vector.h ****       /**
 522:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 523:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 524:/usr/include/c++/5/bits/stl_vector.h ****        *
 525:/usr/include/c++/5/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 526:/usr/include/c++/5/bits/stl_vector.h ****        *  initializer list @a __l.
 527:/usr/include/c++/5/bits/stl_vector.h ****        *
 528:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 529:/usr/include/c++/5/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 530:/usr/include/c++/5/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 531:/usr/include/c++/5/bits/stl_vector.h ****        */
 532:/usr/include/c++/5/bits/stl_vector.h ****       void
 533:/usr/include/c++/5/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 534:/usr/include/c++/5/bits/stl_vector.h ****       { this->assign(__l.begin(), __l.end()); }
 535:/usr/include/c++/5/bits/stl_vector.h **** #endif
 536:/usr/include/c++/5/bits/stl_vector.h **** 
 537:/usr/include/c++/5/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 538:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::get_allocator;
 539:/usr/include/c++/5/bits/stl_vector.h **** 
 540:/usr/include/c++/5/bits/stl_vector.h ****       // iterators
 541:/usr/include/c++/5/bits/stl_vector.h ****       /**
 542:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 543:/usr/include/c++/5/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 544:/usr/include/c++/5/bits/stl_vector.h ****        *  element order.
 545:/usr/include/c++/5/bits/stl_vector.h ****        */
 546:/usr/include/c++/5/bits/stl_vector.h ****       iterator
 547:/usr/include/c++/5/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 548:/usr/include/c++/5/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 549:/usr/include/c++/5/bits/stl_vector.h **** 
 550:/usr/include/c++/5/bits/stl_vector.h ****       /**
 551:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 552:/usr/include/c++/5/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 553:/usr/include/c++/5/bits/stl_vector.h ****        *  element order.
 554:/usr/include/c++/5/bits/stl_vector.h ****        */
 555:/usr/include/c++/5/bits/stl_vector.h ****       const_iterator
 556:/usr/include/c++/5/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 1608              		.loc 4 556 0
 1609              		.cfi_startproc
 1610 0000 55       		pushq	%rbp
 1611              		.cfi_def_cfa_offset 16
 1612              		.cfi_offset 6, -16
 1613 0001 4889E5   		movq	%rsp, %rbp
 1614              		.cfi_def_cfa_register 6
 1615 0004 4883EC30 		subq	$48, %rsp
 1616 0008 48897DD8 		movq	%rdi, -40(%rbp)
 1617              		.loc 4 556 0
 1618 000c 64488B04 		movq	%fs:40, %rax
 1618      25280000 
 1618      00
 1619 0015 488945F8 		movq	%rax, -8(%rbp)
 1620 0019 31C0     		xorl	%eax, %eax
 557:/usr/include/c++/5/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 1621              		.loc 4 557 0
 1622 001b 488B45D8 		movq	-40(%rbp), %rax
 1623 001f 488B00   		movq	(%rax), %rax
 1624 0022 488945F0 		movq	%rax, -16(%rbp)
 1625 0026 488D55F0 		leaq	-16(%rbp), %rdx
 1626 002a 488D45E0 		leaq	-32(%rbp), %rax
 1627 002e 4889D6   		movq	%rdx, %rsi
 1628 0031 4889C7   		movq	%rax, %rdi
 1629 0034 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 1629      00
 1630 0039 488B45E0 		movq	-32(%rbp), %rax
 1631 003d 488B4DF8 		movq	-8(%rbp), %rcx
 1632 0041 6448330C 		xorq	%fs:40, %rcx
 1632      25280000 
 1632      00
 1633 004a 7405     		je	.L77
 1634 004c E8000000 		call	__stack_chk_fail@PLT
 1634      00
 1635              	.L77:
 1636 0051 C9       		leave
 1637              		.cfi_def_cfa 7, 8
 1638 0052 C3       		ret
 1639              		.cfi_endproc
 1640              	.LFE1379:
 1642              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv,"axG",@progbits,_ZNKSt6
 1643              		.align 2
 1644              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv
 1646              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv:
 1647              	.LFB1380:
 558:/usr/include/c++/5/bits/stl_vector.h **** 
 559:/usr/include/c++/5/bits/stl_vector.h ****       /**
 560:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 561:/usr/include/c++/5/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 562:/usr/include/c++/5/bits/stl_vector.h ****        *  element order.
 563:/usr/include/c++/5/bits/stl_vector.h ****        */
 564:/usr/include/c++/5/bits/stl_vector.h ****       iterator
 565:/usr/include/c++/5/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 566:/usr/include/c++/5/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 567:/usr/include/c++/5/bits/stl_vector.h **** 
 568:/usr/include/c++/5/bits/stl_vector.h ****       /**
 569:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 570:/usr/include/c++/5/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 571:/usr/include/c++/5/bits/stl_vector.h ****        *  ordinary element order.
 572:/usr/include/c++/5/bits/stl_vector.h ****        */
 573:/usr/include/c++/5/bits/stl_vector.h ****       const_iterator
 574:/usr/include/c++/5/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 1648              		.loc 4 574 0
 1649              		.cfi_startproc
 1650 0000 55       		pushq	%rbp
 1651              		.cfi_def_cfa_offset 16
 1652              		.cfi_offset 6, -16
 1653 0001 4889E5   		movq	%rsp, %rbp
 1654              		.cfi_def_cfa_register 6
 1655 0004 4883EC30 		subq	$48, %rsp
 1656 0008 48897DD8 		movq	%rdi, -40(%rbp)
 1657              		.loc 4 574 0
 1658 000c 64488B04 		movq	%fs:40, %rax
 1658      25280000 
 1658      00
 1659 0015 488945F8 		movq	%rax, -8(%rbp)
 1660 0019 31C0     		xorl	%eax, %eax
 575:/usr/include/c++/5/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 1661              		.loc 4 575 0
 1662 001b 488B45D8 		movq	-40(%rbp), %rax
 1663 001f 488B4008 		movq	8(%rax), %rax
 1664 0023 488945F0 		movq	%rax, -16(%rbp)
 1665 0027 488D55F0 		leaq	-16(%rbp), %rdx
 1666 002b 488D45E0 		leaq	-32(%rbp), %rax
 1667 002f 4889D6   		movq	%rdx, %rsi
 1668 0032 4889C7   		movq	%rax, %rdi
 1669 0035 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 1669      00
 1670 003a 488B45E0 		movq	-32(%rbp), %rax
 1671 003e 488B4DF8 		movq	-8(%rbp), %rcx
 1672 0042 6448330C 		xorq	%fs:40, %rcx
 1672      25280000 
 1672      00
 1673 004b 7405     		je	.L80
 1674 004d E8000000 		call	__stack_chk_fail@PLT
 1674      00
 1675              	.L80:
 1676 0052 C9       		leave
 1677              		.cfi_def_cfa 7, 8
 1678 0053 C3       		ret
 1679              		.cfi_endproc
 1680              	.LFE1380:
 1682              		.section	.text._ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__n
 1683              		.weak	_ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_ite
 1685              	_ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT
 1686              	.LFB1381:
 1687              		.file 5 "/usr/include/c++/5/bits/stl_iterator.h"
   1:/usr/include/c++/5/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:/usr/include/c++/5/bits/stl_iterator.h **** 
   3:/usr/include/c++/5/bits/stl_iterator.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/stl_iterator.h **** //
   5:/usr/include/c++/5/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/stl_iterator.h **** // any later version.
  10:/usr/include/c++/5/bits/stl_iterator.h **** 
  11:/usr/include/c++/5/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/stl_iterator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/stl_iterator.h **** 
  16:/usr/include/c++/5/bits/stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/stl_iterator.h **** 
  20:/usr/include/c++/5/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/stl_iterator.h **** 
  25:/usr/include/c++/5/bits/stl_iterator.h **** /*
  26:/usr/include/c++/5/bits/stl_iterator.h ****  *
  27:/usr/include/c++/5/bits/stl_iterator.h ****  * Copyright (c) 1994
  28:/usr/include/c++/5/bits/stl_iterator.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/5/bits/stl_iterator.h ****  *
  30:/usr/include/c++/5/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/5/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/5/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/5/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/5/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/5/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/5/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/5/bits/stl_iterator.h ****  *
  38:/usr/include/c++/5/bits/stl_iterator.h ****  *
  39:/usr/include/c++/5/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/5/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/5/bits/stl_iterator.h ****  *
  42:/usr/include/c++/5/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/5/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/5/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/5/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/5/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/5/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/5/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/5/bits/stl_iterator.h ****  */
  50:/usr/include/c++/5/bits/stl_iterator.h **** 
  51:/usr/include/c++/5/bits/stl_iterator.h **** /** @file bits/stl_iterator.h
  52:/usr/include/c++/5/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/5/bits/stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/5/bits/stl_iterator.h ****  *
  55:/usr/include/c++/5/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:/usr/include/c++/5/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:/usr/include/c++/5/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:/usr/include/c++/5/bits/stl_iterator.h ****  */
  59:/usr/include/c++/5/bits/stl_iterator.h **** 
  60:/usr/include/c++/5/bits/stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:/usr/include/c++/5/bits/stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:/usr/include/c++/5/bits/stl_iterator.h **** 
  63:/usr/include/c++/5/bits/stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:/usr/include/c++/5/bits/stl_iterator.h **** #include <ext/type_traits.h>
  65:/usr/include/c++/5/bits/stl_iterator.h **** #include <bits/move.h>
  66:/usr/include/c++/5/bits/stl_iterator.h **** #include <bits/ptr_traits.h>
  67:/usr/include/c++/5/bits/stl_iterator.h **** 
  68:/usr/include/c++/5/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  69:/usr/include/c++/5/bits/stl_iterator.h **** {
  70:/usr/include/c++/5/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  71:/usr/include/c++/5/bits/stl_iterator.h **** 
  72:/usr/include/c++/5/bits/stl_iterator.h ****   /**
  73:/usr/include/c++/5/bits/stl_iterator.h ****    * @addtogroup iterators
  74:/usr/include/c++/5/bits/stl_iterator.h ****    * @{
  75:/usr/include/c++/5/bits/stl_iterator.h ****    */
  76:/usr/include/c++/5/bits/stl_iterator.h **** 
  77:/usr/include/c++/5/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
  78:/usr/include/c++/5/bits/stl_iterator.h ****   /**
  79:/usr/include/c++/5/bits/stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
  80:/usr/include/c++/5/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
  81:/usr/include/c++/5/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
  82:/usr/include/c++/5/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
  83:/usr/include/c++/5/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
  84:/usr/include/c++/5/bits/stl_iterator.h ****    *  @code
  85:/usr/include/c++/5/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
  86:/usr/include/c++/5/bits/stl_iterator.h ****    *  @endcode
  87:/usr/include/c++/5/bits/stl_iterator.h ****    *
  88:/usr/include/c++/5/bits/stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
  89:/usr/include/c++/5/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
  90:/usr/include/c++/5/bits/stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
  91:/usr/include/c++/5/bits/stl_iterator.h ****    *
  92:/usr/include/c++/5/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
  93:/usr/include/c++/5/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
  94:/usr/include/c++/5/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
  95:/usr/include/c++/5/bits/stl_iterator.h ****   */
  96:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
  97:/usr/include/c++/5/bits/stl_iterator.h ****     class reverse_iterator
  98:/usr/include/c++/5/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
  99:/usr/include/c++/5/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 100:/usr/include/c++/5/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 101:/usr/include/c++/5/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 102:/usr/include/c++/5/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 103:/usr/include/c++/5/bits/stl_iterator.h ****     {
 104:/usr/include/c++/5/bits/stl_iterator.h ****     protected:
 105:/usr/include/c++/5/bits/stl_iterator.h ****       _Iterator current;
 106:/usr/include/c++/5/bits/stl_iterator.h **** 
 107:/usr/include/c++/5/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 108:/usr/include/c++/5/bits/stl_iterator.h **** 
 109:/usr/include/c++/5/bits/stl_iterator.h ****     public:
 110:/usr/include/c++/5/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 111:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 112:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 113:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 114:/usr/include/c++/5/bits/stl_iterator.h **** 
 115:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 116:/usr/include/c++/5/bits/stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 117:/usr/include/c++/5/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 118:/usr/include/c++/5/bits/stl_iterator.h ****       */
 119:/usr/include/c++/5/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 120:/usr/include/c++/5/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 121:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 122:/usr/include/c++/5/bits/stl_iterator.h **** 
 123:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 124:/usr/include/c++/5/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 125:/usr/include/c++/5/bits/stl_iterator.h ****       */
 126:/usr/include/c++/5/bits/stl_iterator.h ****       explicit
 127:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 128:/usr/include/c++/5/bits/stl_iterator.h **** 
 129:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 130:/usr/include/c++/5/bits/stl_iterator.h ****        *  The copy constructor is normal.
 131:/usr/include/c++/5/bits/stl_iterator.h ****       */
 132:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 133:/usr/include/c++/5/bits/stl_iterator.h ****       : current(__x.current) { }
 134:/usr/include/c++/5/bits/stl_iterator.h **** 
 135:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 136:/usr/include/c++/5/bits/stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 137:/usr/include/c++/5/bits/stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 138:/usr/include/c++/5/bits/stl_iterator.h ****       */
 139:/usr/include/c++/5/bits/stl_iterator.h ****       template<typename _Iter>
 140:/usr/include/c++/5/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 141:/usr/include/c++/5/bits/stl_iterator.h **** 	: current(__x.base()) { }
 142:/usr/include/c++/5/bits/stl_iterator.h **** 
 143:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 144:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 145:/usr/include/c++/5/bits/stl_iterator.h ****       */
 146:/usr/include/c++/5/bits/stl_iterator.h ****       iterator_type
 147:/usr/include/c++/5/bits/stl_iterator.h ****       base() const
 148:/usr/include/c++/5/bits/stl_iterator.h ****       { return current; }
 149:/usr/include/c++/5/bits/stl_iterator.h **** 
 150:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 151:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  A reference to the value at @c --current
 152:/usr/include/c++/5/bits/stl_iterator.h ****        *
 153:/usr/include/c++/5/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 154:/usr/include/c++/5/bits/stl_iterator.h ****        *
 155:/usr/include/c++/5/bits/stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 156:/usr/include/c++/5/bits/stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 157:/usr/include/c++/5/bits/stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 158:/usr/include/c++/5/bits/stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 159:/usr/include/c++/5/bits/stl_iterator.h ****       */
 160:/usr/include/c++/5/bits/stl_iterator.h ****       reference
 161:/usr/include/c++/5/bits/stl_iterator.h ****       operator*() const
 162:/usr/include/c++/5/bits/stl_iterator.h ****       {
 163:/usr/include/c++/5/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 164:/usr/include/c++/5/bits/stl_iterator.h **** 	return *--__tmp;
 165:/usr/include/c++/5/bits/stl_iterator.h ****       }
 166:/usr/include/c++/5/bits/stl_iterator.h **** 
 167:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 168:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 169:/usr/include/c++/5/bits/stl_iterator.h ****        *
 170:/usr/include/c++/5/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 171:/usr/include/c++/5/bits/stl_iterator.h ****       */
 172:/usr/include/c++/5/bits/stl_iterator.h ****       pointer
 173:/usr/include/c++/5/bits/stl_iterator.h ****       operator->() const
 174:/usr/include/c++/5/bits/stl_iterator.h ****       { return &(operator*()); }
 175:/usr/include/c++/5/bits/stl_iterator.h **** 
 176:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 177:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  @c *this
 178:/usr/include/c++/5/bits/stl_iterator.h ****        *
 179:/usr/include/c++/5/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 180:/usr/include/c++/5/bits/stl_iterator.h ****       */
 181:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator&
 182:/usr/include/c++/5/bits/stl_iterator.h ****       operator++()
 183:/usr/include/c++/5/bits/stl_iterator.h ****       {
 184:/usr/include/c++/5/bits/stl_iterator.h **** 	--current;
 185:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 186:/usr/include/c++/5/bits/stl_iterator.h ****       }
 187:/usr/include/c++/5/bits/stl_iterator.h **** 
 188:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 189:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  The original value of @c *this
 190:/usr/include/c++/5/bits/stl_iterator.h ****        *
 191:/usr/include/c++/5/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 192:/usr/include/c++/5/bits/stl_iterator.h ****       */
 193:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator
 194:/usr/include/c++/5/bits/stl_iterator.h ****       operator++(int)
 195:/usr/include/c++/5/bits/stl_iterator.h ****       {
 196:/usr/include/c++/5/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 197:/usr/include/c++/5/bits/stl_iterator.h **** 	--current;
 198:/usr/include/c++/5/bits/stl_iterator.h **** 	return __tmp;
 199:/usr/include/c++/5/bits/stl_iterator.h ****       }
 200:/usr/include/c++/5/bits/stl_iterator.h **** 
 201:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 202:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  @c *this
 203:/usr/include/c++/5/bits/stl_iterator.h ****        *
 204:/usr/include/c++/5/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 205:/usr/include/c++/5/bits/stl_iterator.h ****       */
 206:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator&
 207:/usr/include/c++/5/bits/stl_iterator.h ****       operator--()
 208:/usr/include/c++/5/bits/stl_iterator.h ****       {
 209:/usr/include/c++/5/bits/stl_iterator.h **** 	++current;
 210:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 211:/usr/include/c++/5/bits/stl_iterator.h ****       }
 212:/usr/include/c++/5/bits/stl_iterator.h **** 
 213:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 214:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 215:/usr/include/c++/5/bits/stl_iterator.h ****        *
 216:/usr/include/c++/5/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 217:/usr/include/c++/5/bits/stl_iterator.h ****       */
 218:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator
 219:/usr/include/c++/5/bits/stl_iterator.h ****       operator--(int)
 220:/usr/include/c++/5/bits/stl_iterator.h ****       {
 221:/usr/include/c++/5/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 222:/usr/include/c++/5/bits/stl_iterator.h **** 	++current;
 223:/usr/include/c++/5/bits/stl_iterator.h **** 	return __tmp;
 224:/usr/include/c++/5/bits/stl_iterator.h ****       }
 225:/usr/include/c++/5/bits/stl_iterator.h **** 
 226:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 227:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 228:/usr/include/c++/5/bits/stl_iterator.h ****        *
 229:/usr/include/c++/5/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 230:/usr/include/c++/5/bits/stl_iterator.h ****       */
 231:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator
 232:/usr/include/c++/5/bits/stl_iterator.h ****       operator+(difference_type __n) const
 233:/usr/include/c++/5/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 234:/usr/include/c++/5/bits/stl_iterator.h **** 
 235:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 236:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  *this
 237:/usr/include/c++/5/bits/stl_iterator.h ****        *
 238:/usr/include/c++/5/bits/stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 239:/usr/include/c++/5/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 240:/usr/include/c++/5/bits/stl_iterator.h ****       */
 241:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator&
 242:/usr/include/c++/5/bits/stl_iterator.h ****       operator+=(difference_type __n)
 243:/usr/include/c++/5/bits/stl_iterator.h ****       {
 244:/usr/include/c++/5/bits/stl_iterator.h **** 	current -= __n;
 245:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 246:/usr/include/c++/5/bits/stl_iterator.h ****       }
 247:/usr/include/c++/5/bits/stl_iterator.h **** 
 248:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 249:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 250:/usr/include/c++/5/bits/stl_iterator.h ****        *
 251:/usr/include/c++/5/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 252:/usr/include/c++/5/bits/stl_iterator.h ****       */
 253:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator
 254:/usr/include/c++/5/bits/stl_iterator.h ****       operator-(difference_type __n) const
 255:/usr/include/c++/5/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 256:/usr/include/c++/5/bits/stl_iterator.h **** 
 257:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 258:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  *this
 259:/usr/include/c++/5/bits/stl_iterator.h ****        *
 260:/usr/include/c++/5/bits/stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 261:/usr/include/c++/5/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 262:/usr/include/c++/5/bits/stl_iterator.h ****       */
 263:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator&
 264:/usr/include/c++/5/bits/stl_iterator.h ****       operator-=(difference_type __n)
 265:/usr/include/c++/5/bits/stl_iterator.h ****       {
 266:/usr/include/c++/5/bits/stl_iterator.h **** 	current += __n;
 267:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 268:/usr/include/c++/5/bits/stl_iterator.h ****       }
 269:/usr/include/c++/5/bits/stl_iterator.h **** 
 270:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 271:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 272:/usr/include/c++/5/bits/stl_iterator.h ****        *
 273:/usr/include/c++/5/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 274:/usr/include/c++/5/bits/stl_iterator.h ****       */
 275:/usr/include/c++/5/bits/stl_iterator.h ****       reference
 276:/usr/include/c++/5/bits/stl_iterator.h ****       operator[](difference_type __n) const
 277:/usr/include/c++/5/bits/stl_iterator.h ****       { return *(*this + __n); }
 278:/usr/include/c++/5/bits/stl_iterator.h ****     };
 279:/usr/include/c++/5/bits/stl_iterator.h **** 
 280:/usr/include/c++/5/bits/stl_iterator.h ****   //@{
 281:/usr/include/c++/5/bits/stl_iterator.h ****   /**
 282:/usr/include/c++/5/bits/stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 283:/usr/include/c++/5/bits/stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 284:/usr/include/c++/5/bits/stl_iterator.h ****    *  @return  A simple bool.
 285:/usr/include/c++/5/bits/stl_iterator.h ****    *
 286:/usr/include/c++/5/bits/stl_iterator.h ****    *  Reverse iterators forward many operations to their underlying base()
 287:/usr/include/c++/5/bits/stl_iterator.h ****    *  iterators.  Others are implemented in terms of one another.
 288:/usr/include/c++/5/bits/stl_iterator.h ****    *
 289:/usr/include/c++/5/bits/stl_iterator.h ****   */
 290:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 291:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 292:/usr/include/c++/5/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 293:/usr/include/c++/5/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 294:/usr/include/c++/5/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 295:/usr/include/c++/5/bits/stl_iterator.h **** 
 296:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 297:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 298:/usr/include/c++/5/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 299:/usr/include/c++/5/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 300:/usr/include/c++/5/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 301:/usr/include/c++/5/bits/stl_iterator.h **** 
 302:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 303:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 304:/usr/include/c++/5/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 305:/usr/include/c++/5/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 306:/usr/include/c++/5/bits/stl_iterator.h ****     { return !(__x == __y); }
 307:/usr/include/c++/5/bits/stl_iterator.h **** 
 308:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 309:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 310:/usr/include/c++/5/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 311:/usr/include/c++/5/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 312:/usr/include/c++/5/bits/stl_iterator.h ****     { return __y < __x; }
 313:/usr/include/c++/5/bits/stl_iterator.h **** 
 314:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 315:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 316:/usr/include/c++/5/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 317:/usr/include/c++/5/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 318:/usr/include/c++/5/bits/stl_iterator.h ****     { return !(__y < __x); }
 319:/usr/include/c++/5/bits/stl_iterator.h **** 
 320:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 321:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 322:/usr/include/c++/5/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 323:/usr/include/c++/5/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 324:/usr/include/c++/5/bits/stl_iterator.h ****     { return !(__x < __y); }
 325:/usr/include/c++/5/bits/stl_iterator.h **** 
 326:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 327:/usr/include/c++/5/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 328:/usr/include/c++/5/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 329:/usr/include/c++/5/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 330:/usr/include/c++/5/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 331:/usr/include/c++/5/bits/stl_iterator.h **** 
 332:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 333:/usr/include/c++/5/bits/stl_iterator.h ****     inline reverse_iterator<_Iterator>
 334:/usr/include/c++/5/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 335:/usr/include/c++/5/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 336:/usr/include/c++/5/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 337:/usr/include/c++/5/bits/stl_iterator.h **** 
 338:/usr/include/c++/5/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 339:/usr/include/c++/5/bits/stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 340:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 341:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 342:/usr/include/c++/5/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 343:/usr/include/c++/5/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 344:/usr/include/c++/5/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 345:/usr/include/c++/5/bits/stl_iterator.h **** 
 346:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 347:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 348:/usr/include/c++/5/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 349:/usr/include/c++/5/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 350:/usr/include/c++/5/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 351:/usr/include/c++/5/bits/stl_iterator.h **** 
 352:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 353:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 354:/usr/include/c++/5/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 355:/usr/include/c++/5/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 356:/usr/include/c++/5/bits/stl_iterator.h ****     { return !(__x == __y); }
 357:/usr/include/c++/5/bits/stl_iterator.h **** 
 358:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 359:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 360:/usr/include/c++/5/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 361:/usr/include/c++/5/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 362:/usr/include/c++/5/bits/stl_iterator.h ****     { return __y < __x; }
 363:/usr/include/c++/5/bits/stl_iterator.h **** 
 364:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 365:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 366:/usr/include/c++/5/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 367:/usr/include/c++/5/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 368:/usr/include/c++/5/bits/stl_iterator.h ****     { return !(__y < __x); }
 369:/usr/include/c++/5/bits/stl_iterator.h **** 
 370:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 371:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 372:/usr/include/c++/5/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 373:/usr/include/c++/5/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 374:/usr/include/c++/5/bits/stl_iterator.h ****     { return !(__x < __y); }
 375:/usr/include/c++/5/bits/stl_iterator.h **** 
 376:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 377:/usr/include/c++/5/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 378:/usr/include/c++/5/bits/stl_iterator.h ****     // DR 685.
 379:/usr/include/c++/5/bits/stl_iterator.h ****     inline auto
 380:/usr/include/c++/5/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 381:/usr/include/c++/5/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 382:/usr/include/c++/5/bits/stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 383:/usr/include/c++/5/bits/stl_iterator.h **** #else
 384:/usr/include/c++/5/bits/stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 385:/usr/include/c++/5/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 386:/usr/include/c++/5/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 387:/usr/include/c++/5/bits/stl_iterator.h **** #endif
 388:/usr/include/c++/5/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 389:/usr/include/c++/5/bits/stl_iterator.h ****   //@}
 390:/usr/include/c++/5/bits/stl_iterator.h **** 
 391:/usr/include/c++/5/bits/stl_iterator.h **** #if __cplusplus > 201103L
 392:/usr/include/c++/5/bits/stl_iterator.h **** #define __cpp_lib_make_reverse_iterator 201402
 393:/usr/include/c++/5/bits/stl_iterator.h **** 
 394:/usr/include/c++/5/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 395:/usr/include/c++/5/bits/stl_iterator.h ****   // DR 2285. make_reverse_iterator
 396:/usr/include/c++/5/bits/stl_iterator.h ****   /// Generator function for reverse_iterator.
 397:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 398:/usr/include/c++/5/bits/stl_iterator.h ****     inline reverse_iterator<_Iterator>
 399:/usr/include/c++/5/bits/stl_iterator.h ****     make_reverse_iterator(_Iterator __i)
 400:/usr/include/c++/5/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 401:/usr/include/c++/5/bits/stl_iterator.h **** #endif
 402:/usr/include/c++/5/bits/stl_iterator.h **** 
 403:/usr/include/c++/5/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 404:/usr/include/c++/5/bits/stl_iterator.h ****   /**
 405:/usr/include/c++/5/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 406:/usr/include/c++/5/bits/stl_iterator.h ****    *
 407:/usr/include/c++/5/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 408:/usr/include/c++/5/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 409:/usr/include/c++/5/bits/stl_iterator.h ****    *  push_back.
 410:/usr/include/c++/5/bits/stl_iterator.h ****    *
 411:/usr/include/c++/5/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 412:/usr/include/c++/5/bits/stl_iterator.h ****    *  save typing.
 413:/usr/include/c++/5/bits/stl_iterator.h ****   */
 414:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Container>
 415:/usr/include/c++/5/bits/stl_iterator.h ****     class back_insert_iterator
 416:/usr/include/c++/5/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 417:/usr/include/c++/5/bits/stl_iterator.h ****     {
 418:/usr/include/c++/5/bits/stl_iterator.h ****     protected:
 419:/usr/include/c++/5/bits/stl_iterator.h ****       _Container* container;
 420:/usr/include/c++/5/bits/stl_iterator.h **** 
 421:/usr/include/c++/5/bits/stl_iterator.h ****     public:
 422:/usr/include/c++/5/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 423:/usr/include/c++/5/bits/stl_iterator.h ****       typedef _Container          container_type;
 424:/usr/include/c++/5/bits/stl_iterator.h **** 
 425:/usr/include/c++/5/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 426:/usr/include/c++/5/bits/stl_iterator.h ****       explicit
 427:/usr/include/c++/5/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x) : container(&__x) { }
 428:/usr/include/c++/5/bits/stl_iterator.h **** 
 429:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 430:/usr/include/c++/5/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 431:/usr/include/c++/5/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 432:/usr/include/c++/5/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 433:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 434:/usr/include/c++/5/bits/stl_iterator.h ****        *
 435:/usr/include/c++/5/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 436:/usr/include/c++/5/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 437:/usr/include/c++/5/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 438:/usr/include/c++/5/bits/stl_iterator.h ****        *  always append the value to the end of the container.
 439:/usr/include/c++/5/bits/stl_iterator.h ****       */
 440:/usr/include/c++/5/bits/stl_iterator.h **** #if __cplusplus < 201103L
 441:/usr/include/c++/5/bits/stl_iterator.h ****       back_insert_iterator&
 442:/usr/include/c++/5/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 443:/usr/include/c++/5/bits/stl_iterator.h ****       {
 444:/usr/include/c++/5/bits/stl_iterator.h **** 	container->push_back(__value);
 445:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 446:/usr/include/c++/5/bits/stl_iterator.h ****       }
 447:/usr/include/c++/5/bits/stl_iterator.h **** #else
 448:/usr/include/c++/5/bits/stl_iterator.h ****       back_insert_iterator&
 449:/usr/include/c++/5/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 450:/usr/include/c++/5/bits/stl_iterator.h ****       {
 451:/usr/include/c++/5/bits/stl_iterator.h **** 	container->push_back(__value);
 452:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 453:/usr/include/c++/5/bits/stl_iterator.h ****       }
 454:/usr/include/c++/5/bits/stl_iterator.h **** 
 455:/usr/include/c++/5/bits/stl_iterator.h ****       back_insert_iterator&
 456:/usr/include/c++/5/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 457:/usr/include/c++/5/bits/stl_iterator.h ****       {
 458:/usr/include/c++/5/bits/stl_iterator.h **** 	container->push_back(std::move(__value));
 459:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 460:/usr/include/c++/5/bits/stl_iterator.h ****       }
 461:/usr/include/c++/5/bits/stl_iterator.h **** #endif
 462:/usr/include/c++/5/bits/stl_iterator.h **** 
 463:/usr/include/c++/5/bits/stl_iterator.h ****       /// Simply returns *this.
 464:/usr/include/c++/5/bits/stl_iterator.h ****       back_insert_iterator&
 465:/usr/include/c++/5/bits/stl_iterator.h ****       operator*()
 466:/usr/include/c++/5/bits/stl_iterator.h ****       { return *this; }
 467:/usr/include/c++/5/bits/stl_iterator.h **** 
 468:/usr/include/c++/5/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 469:/usr/include/c++/5/bits/stl_iterator.h ****       back_insert_iterator&
 470:/usr/include/c++/5/bits/stl_iterator.h ****       operator++()
 471:/usr/include/c++/5/bits/stl_iterator.h ****       { return *this; }
 472:/usr/include/c++/5/bits/stl_iterator.h **** 
 473:/usr/include/c++/5/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 474:/usr/include/c++/5/bits/stl_iterator.h ****       back_insert_iterator
 475:/usr/include/c++/5/bits/stl_iterator.h ****       operator++(int)
 476:/usr/include/c++/5/bits/stl_iterator.h ****       { return *this; }
 477:/usr/include/c++/5/bits/stl_iterator.h ****     };
 478:/usr/include/c++/5/bits/stl_iterator.h **** 
 479:/usr/include/c++/5/bits/stl_iterator.h ****   /**
 480:/usr/include/c++/5/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 481:/usr/include/c++/5/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 482:/usr/include/c++/5/bits/stl_iterator.h ****    *
 483:/usr/include/c++/5/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 484:/usr/include/c++/5/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 485:/usr/include/c++/5/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 486:/usr/include/c++/5/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 487:/usr/include/c++/5/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 488:/usr/include/c++/5/bits/stl_iterator.h ****    *  types for you.
 489:/usr/include/c++/5/bits/stl_iterator.h ****   */
 490:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Container>
 491:/usr/include/c++/5/bits/stl_iterator.h ****     inline back_insert_iterator<_Container>
 492:/usr/include/c++/5/bits/stl_iterator.h ****     back_inserter(_Container& __x)
 493:/usr/include/c++/5/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 494:/usr/include/c++/5/bits/stl_iterator.h **** 
 495:/usr/include/c++/5/bits/stl_iterator.h ****   /**
 496:/usr/include/c++/5/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 497:/usr/include/c++/5/bits/stl_iterator.h ****    *
 498:/usr/include/c++/5/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 499:/usr/include/c++/5/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 500:/usr/include/c++/5/bits/stl_iterator.h ****    *  push_front.
 501:/usr/include/c++/5/bits/stl_iterator.h ****    *
 502:/usr/include/c++/5/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 503:/usr/include/c++/5/bits/stl_iterator.h ****    *  save typing.
 504:/usr/include/c++/5/bits/stl_iterator.h ****   */
 505:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Container>
 506:/usr/include/c++/5/bits/stl_iterator.h ****     class front_insert_iterator
 507:/usr/include/c++/5/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 508:/usr/include/c++/5/bits/stl_iterator.h ****     {
 509:/usr/include/c++/5/bits/stl_iterator.h ****     protected:
 510:/usr/include/c++/5/bits/stl_iterator.h ****       _Container* container;
 511:/usr/include/c++/5/bits/stl_iterator.h **** 
 512:/usr/include/c++/5/bits/stl_iterator.h ****     public:
 513:/usr/include/c++/5/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 514:/usr/include/c++/5/bits/stl_iterator.h ****       typedef _Container          container_type;
 515:/usr/include/c++/5/bits/stl_iterator.h **** 
 516:/usr/include/c++/5/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 517:/usr/include/c++/5/bits/stl_iterator.h ****       explicit front_insert_iterator(_Container& __x) : container(&__x) { }
 518:/usr/include/c++/5/bits/stl_iterator.h **** 
 519:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 520:/usr/include/c++/5/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 521:/usr/include/c++/5/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 522:/usr/include/c++/5/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 523:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 524:/usr/include/c++/5/bits/stl_iterator.h ****        *
 525:/usr/include/c++/5/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 526:/usr/include/c++/5/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 527:/usr/include/c++/5/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 528:/usr/include/c++/5/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 529:/usr/include/c++/5/bits/stl_iterator.h ****       */
 530:/usr/include/c++/5/bits/stl_iterator.h **** #if __cplusplus < 201103L
 531:/usr/include/c++/5/bits/stl_iterator.h ****       front_insert_iterator&
 532:/usr/include/c++/5/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 533:/usr/include/c++/5/bits/stl_iterator.h ****       {
 534:/usr/include/c++/5/bits/stl_iterator.h **** 	container->push_front(__value);
 535:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 536:/usr/include/c++/5/bits/stl_iterator.h ****       }
 537:/usr/include/c++/5/bits/stl_iterator.h **** #else
 538:/usr/include/c++/5/bits/stl_iterator.h ****       front_insert_iterator&
 539:/usr/include/c++/5/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 540:/usr/include/c++/5/bits/stl_iterator.h ****       {
 541:/usr/include/c++/5/bits/stl_iterator.h **** 	container->push_front(__value);
 542:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 543:/usr/include/c++/5/bits/stl_iterator.h ****       }
 544:/usr/include/c++/5/bits/stl_iterator.h **** 
 545:/usr/include/c++/5/bits/stl_iterator.h ****       front_insert_iterator&
 546:/usr/include/c++/5/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 547:/usr/include/c++/5/bits/stl_iterator.h ****       {
 548:/usr/include/c++/5/bits/stl_iterator.h **** 	container->push_front(std::move(__value));
 549:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 550:/usr/include/c++/5/bits/stl_iterator.h ****       }
 551:/usr/include/c++/5/bits/stl_iterator.h **** #endif
 552:/usr/include/c++/5/bits/stl_iterator.h **** 
 553:/usr/include/c++/5/bits/stl_iterator.h ****       /// Simply returns *this.
 554:/usr/include/c++/5/bits/stl_iterator.h ****       front_insert_iterator&
 555:/usr/include/c++/5/bits/stl_iterator.h ****       operator*()
 556:/usr/include/c++/5/bits/stl_iterator.h ****       { return *this; }
 557:/usr/include/c++/5/bits/stl_iterator.h **** 
 558:/usr/include/c++/5/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 559:/usr/include/c++/5/bits/stl_iterator.h ****       front_insert_iterator&
 560:/usr/include/c++/5/bits/stl_iterator.h ****       operator++()
 561:/usr/include/c++/5/bits/stl_iterator.h ****       { return *this; }
 562:/usr/include/c++/5/bits/stl_iterator.h **** 
 563:/usr/include/c++/5/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 564:/usr/include/c++/5/bits/stl_iterator.h ****       front_insert_iterator
 565:/usr/include/c++/5/bits/stl_iterator.h ****       operator++(int)
 566:/usr/include/c++/5/bits/stl_iterator.h ****       { return *this; }
 567:/usr/include/c++/5/bits/stl_iterator.h ****     };
 568:/usr/include/c++/5/bits/stl_iterator.h **** 
 569:/usr/include/c++/5/bits/stl_iterator.h ****   /**
 570:/usr/include/c++/5/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 571:/usr/include/c++/5/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 572:/usr/include/c++/5/bits/stl_iterator.h ****    *
 573:/usr/include/c++/5/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 574:/usr/include/c++/5/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 575:/usr/include/c++/5/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 576:/usr/include/c++/5/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 577:/usr/include/c++/5/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 578:/usr/include/c++/5/bits/stl_iterator.h ****    *  types for you.
 579:/usr/include/c++/5/bits/stl_iterator.h ****   */
 580:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Container>
 581:/usr/include/c++/5/bits/stl_iterator.h ****     inline front_insert_iterator<_Container>
 582:/usr/include/c++/5/bits/stl_iterator.h ****     front_inserter(_Container& __x)
 583:/usr/include/c++/5/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 584:/usr/include/c++/5/bits/stl_iterator.h **** 
 585:/usr/include/c++/5/bits/stl_iterator.h ****   /**
 586:/usr/include/c++/5/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 587:/usr/include/c++/5/bits/stl_iterator.h ****    *
 588:/usr/include/c++/5/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 589:/usr/include/c++/5/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 590:/usr/include/c++/5/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 591:/usr/include/c++/5/bits/stl_iterator.h ****    *  position.
 592:/usr/include/c++/5/bits/stl_iterator.h ****    *
 593:/usr/include/c++/5/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 594:/usr/include/c++/5/bits/stl_iterator.h ****    *  %iterator's position.)
 595:/usr/include/c++/5/bits/stl_iterator.h ****    *
 596:/usr/include/c++/5/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 597:/usr/include/c++/5/bits/stl_iterator.h ****    *  save typing.
 598:/usr/include/c++/5/bits/stl_iterator.h ****   */
 599:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Container>
 600:/usr/include/c++/5/bits/stl_iterator.h ****     class insert_iterator
 601:/usr/include/c++/5/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 602:/usr/include/c++/5/bits/stl_iterator.h ****     {
 603:/usr/include/c++/5/bits/stl_iterator.h ****     protected:
 604:/usr/include/c++/5/bits/stl_iterator.h ****       _Container* container;
 605:/usr/include/c++/5/bits/stl_iterator.h ****       typename _Container::iterator iter;
 606:/usr/include/c++/5/bits/stl_iterator.h **** 
 607:/usr/include/c++/5/bits/stl_iterator.h ****     public:
 608:/usr/include/c++/5/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 609:/usr/include/c++/5/bits/stl_iterator.h ****       typedef _Container          container_type;
 610:/usr/include/c++/5/bits/stl_iterator.h **** 
 611:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 612:/usr/include/c++/5/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 613:/usr/include/c++/5/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 614:/usr/include/c++/5/bits/stl_iterator.h ****       */
 615:/usr/include/c++/5/bits/stl_iterator.h ****       insert_iterator(_Container& __x, typename _Container::iterator __i)
 616:/usr/include/c++/5/bits/stl_iterator.h ****       : container(&__x), iter(__i) {}
 617:/usr/include/c++/5/bits/stl_iterator.h **** 
 618:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 619:/usr/include/c++/5/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 620:/usr/include/c++/5/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 621:/usr/include/c++/5/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 622:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 623:/usr/include/c++/5/bits/stl_iterator.h ****        *
 624:/usr/include/c++/5/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 625:/usr/include/c++/5/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 626:/usr/include/c++/5/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 627:/usr/include/c++/5/bits/stl_iterator.h ****        *
 628:/usr/include/c++/5/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 629:/usr/include/c++/5/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 630:/usr/include/c++/5/bits/stl_iterator.h ****        *  @code
 631:/usr/include/c++/5/bits/stl_iterator.h ****        *     // vector v contains A and Z
 632:/usr/include/c++/5/bits/stl_iterator.h ****        *
 633:/usr/include/c++/5/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 634:/usr/include/c++/5/bits/stl_iterator.h ****        *     i = 1;
 635:/usr/include/c++/5/bits/stl_iterator.h ****        *     i = 2;
 636:/usr/include/c++/5/bits/stl_iterator.h ****        *     i = 3;
 637:/usr/include/c++/5/bits/stl_iterator.h ****        *
 638:/usr/include/c++/5/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 639:/usr/include/c++/5/bits/stl_iterator.h ****        *  @endcode
 640:/usr/include/c++/5/bits/stl_iterator.h ****       */
 641:/usr/include/c++/5/bits/stl_iterator.h **** #if __cplusplus < 201103L
 642:/usr/include/c++/5/bits/stl_iterator.h ****       insert_iterator&
 643:/usr/include/c++/5/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 644:/usr/include/c++/5/bits/stl_iterator.h ****       {
 645:/usr/include/c++/5/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 646:/usr/include/c++/5/bits/stl_iterator.h **** 	++iter;
 647:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 648:/usr/include/c++/5/bits/stl_iterator.h ****       }
 649:/usr/include/c++/5/bits/stl_iterator.h **** #else
 650:/usr/include/c++/5/bits/stl_iterator.h ****       insert_iterator&
 651:/usr/include/c++/5/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 652:/usr/include/c++/5/bits/stl_iterator.h ****       {
 653:/usr/include/c++/5/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 654:/usr/include/c++/5/bits/stl_iterator.h **** 	++iter;
 655:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 656:/usr/include/c++/5/bits/stl_iterator.h ****       }
 657:/usr/include/c++/5/bits/stl_iterator.h **** 
 658:/usr/include/c++/5/bits/stl_iterator.h ****       insert_iterator&
 659:/usr/include/c++/5/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 660:/usr/include/c++/5/bits/stl_iterator.h ****       {
 661:/usr/include/c++/5/bits/stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 662:/usr/include/c++/5/bits/stl_iterator.h **** 	++iter;
 663:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 664:/usr/include/c++/5/bits/stl_iterator.h ****       }
 665:/usr/include/c++/5/bits/stl_iterator.h **** #endif
 666:/usr/include/c++/5/bits/stl_iterator.h **** 
 667:/usr/include/c++/5/bits/stl_iterator.h ****       /// Simply returns *this.
 668:/usr/include/c++/5/bits/stl_iterator.h ****       insert_iterator&
 669:/usr/include/c++/5/bits/stl_iterator.h ****       operator*()
 670:/usr/include/c++/5/bits/stl_iterator.h ****       { return *this; }
 671:/usr/include/c++/5/bits/stl_iterator.h **** 
 672:/usr/include/c++/5/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 673:/usr/include/c++/5/bits/stl_iterator.h ****       insert_iterator&
 674:/usr/include/c++/5/bits/stl_iterator.h ****       operator++()
 675:/usr/include/c++/5/bits/stl_iterator.h ****       { return *this; }
 676:/usr/include/c++/5/bits/stl_iterator.h **** 
 677:/usr/include/c++/5/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 678:/usr/include/c++/5/bits/stl_iterator.h ****       insert_iterator&
 679:/usr/include/c++/5/bits/stl_iterator.h ****       operator++(int)
 680:/usr/include/c++/5/bits/stl_iterator.h ****       { return *this; }
 681:/usr/include/c++/5/bits/stl_iterator.h ****     };
 682:/usr/include/c++/5/bits/stl_iterator.h **** 
 683:/usr/include/c++/5/bits/stl_iterator.h ****   /**
 684:/usr/include/c++/5/bits/stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 685:/usr/include/c++/5/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 686:/usr/include/c++/5/bits/stl_iterator.h ****    *
 687:/usr/include/c++/5/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 688:/usr/include/c++/5/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 689:/usr/include/c++/5/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 690:/usr/include/c++/5/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 691:/usr/include/c++/5/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 692:/usr/include/c++/5/bits/stl_iterator.h ****    *  types for you.
 693:/usr/include/c++/5/bits/stl_iterator.h ****   */
 694:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Container, typename _Iterator>
 695:/usr/include/c++/5/bits/stl_iterator.h ****     inline insert_iterator<_Container>
 696:/usr/include/c++/5/bits/stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 697:/usr/include/c++/5/bits/stl_iterator.h ****     {
 698:/usr/include/c++/5/bits/stl_iterator.h ****       return insert_iterator<_Container>(__x,
 699:/usr/include/c++/5/bits/stl_iterator.h **** 					 typename _Container::iterator(__i));
 700:/usr/include/c++/5/bits/stl_iterator.h ****     }
 701:/usr/include/c++/5/bits/stl_iterator.h **** 
 702:/usr/include/c++/5/bits/stl_iterator.h ****   // @} group iterators
 703:/usr/include/c++/5/bits/stl_iterator.h **** 
 704:/usr/include/c++/5/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 705:/usr/include/c++/5/bits/stl_iterator.h **** } // namespace
 706:/usr/include/c++/5/bits/stl_iterator.h **** 
 707:/usr/include/c++/5/bits/stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 708:/usr/include/c++/5/bits/stl_iterator.h **** {
 709:/usr/include/c++/5/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 710:/usr/include/c++/5/bits/stl_iterator.h **** 
 711:/usr/include/c++/5/bits/stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 712:/usr/include/c++/5/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 713:/usr/include/c++/5/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 714:/usr/include/c++/5/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 715:/usr/include/c++/5/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 716:/usr/include/c++/5/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 717:/usr/include/c++/5/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 718:/usr/include/c++/5/bits/stl_iterator.h ****   using std::iterator_traits;
 719:/usr/include/c++/5/bits/stl_iterator.h ****   using std::iterator;
 720:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 721:/usr/include/c++/5/bits/stl_iterator.h ****     class __normal_iterator
 722:/usr/include/c++/5/bits/stl_iterator.h ****     {
 723:/usr/include/c++/5/bits/stl_iterator.h ****     protected:
 724:/usr/include/c++/5/bits/stl_iterator.h ****       _Iterator _M_current;
 725:/usr/include/c++/5/bits/stl_iterator.h **** 
 726:/usr/include/c++/5/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 727:/usr/include/c++/5/bits/stl_iterator.h **** 
 728:/usr/include/c++/5/bits/stl_iterator.h ****     public:
 729:/usr/include/c++/5/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 730:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 731:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 732:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 733:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 734:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 735:/usr/include/c++/5/bits/stl_iterator.h **** 
 736:/usr/include/c++/5/bits/stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 737:/usr/include/c++/5/bits/stl_iterator.h ****       : _M_current(_Iterator()) { }
 738:/usr/include/c++/5/bits/stl_iterator.h **** 
 739:/usr/include/c++/5/bits/stl_iterator.h ****       explicit
 740:/usr/include/c++/5/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 741:/usr/include/c++/5/bits/stl_iterator.h ****       : _M_current(__i) { }
 742:/usr/include/c++/5/bits/stl_iterator.h **** 
 743:/usr/include/c++/5/bits/stl_iterator.h ****       // Allow iterator to const_iterator conversion
 744:/usr/include/c++/5/bits/stl_iterator.h ****       template<typename _Iter>
 745:/usr/include/c++/5/bits/stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
 746:/usr/include/c++/5/bits/stl_iterator.h **** 			  typename __enable_if<
 747:/usr/include/c++/5/bits/stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 748:/usr/include/c++/5/bits/stl_iterator.h **** 		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
 749:/usr/include/c++/5/bits/stl_iterator.h ****         : _M_current(__i.base()) { }
 750:/usr/include/c++/5/bits/stl_iterator.h **** 
 751:/usr/include/c++/5/bits/stl_iterator.h ****       // Forward iterator requirements
 752:/usr/include/c++/5/bits/stl_iterator.h ****       reference
 753:/usr/include/c++/5/bits/stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
 754:/usr/include/c++/5/bits/stl_iterator.h ****       { return *_M_current; }
 755:/usr/include/c++/5/bits/stl_iterator.h **** 
 756:/usr/include/c++/5/bits/stl_iterator.h ****       pointer
 757:/usr/include/c++/5/bits/stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
 758:/usr/include/c++/5/bits/stl_iterator.h ****       { return _M_current; }
 759:/usr/include/c++/5/bits/stl_iterator.h **** 
 760:/usr/include/c++/5/bits/stl_iterator.h ****       __normal_iterator&
 761:/usr/include/c++/5/bits/stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
 762:/usr/include/c++/5/bits/stl_iterator.h ****       {
 763:/usr/include/c++/5/bits/stl_iterator.h **** 	++_M_current;
 764:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 765:/usr/include/c++/5/bits/stl_iterator.h ****       }
 766:/usr/include/c++/5/bits/stl_iterator.h **** 
 767:/usr/include/c++/5/bits/stl_iterator.h ****       __normal_iterator
 768:/usr/include/c++/5/bits/stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 769:/usr/include/c++/5/bits/stl_iterator.h ****       { return __normal_iterator(_M_current++); }
 770:/usr/include/c++/5/bits/stl_iterator.h **** 
 771:/usr/include/c++/5/bits/stl_iterator.h ****       // Bidirectional iterator requirements
 772:/usr/include/c++/5/bits/stl_iterator.h ****       __normal_iterator&
 773:/usr/include/c++/5/bits/stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
 774:/usr/include/c++/5/bits/stl_iterator.h ****       {
 775:/usr/include/c++/5/bits/stl_iterator.h **** 	--_M_current;
 776:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 777:/usr/include/c++/5/bits/stl_iterator.h ****       }
 778:/usr/include/c++/5/bits/stl_iterator.h **** 
 779:/usr/include/c++/5/bits/stl_iterator.h ****       __normal_iterator
 780:/usr/include/c++/5/bits/stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 781:/usr/include/c++/5/bits/stl_iterator.h ****       { return __normal_iterator(_M_current--); }
 782:/usr/include/c++/5/bits/stl_iterator.h **** 
 783:/usr/include/c++/5/bits/stl_iterator.h ****       // Random access iterator requirements
 784:/usr/include/c++/5/bits/stl_iterator.h ****       reference
 785:/usr/include/c++/5/bits/stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 786:/usr/include/c++/5/bits/stl_iterator.h ****       { return _M_current[__n]; }
 787:/usr/include/c++/5/bits/stl_iterator.h **** 
 788:/usr/include/c++/5/bits/stl_iterator.h ****       __normal_iterator&
 789:/usr/include/c++/5/bits/stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 790:/usr/include/c++/5/bits/stl_iterator.h ****       { _M_current += __n; return *this; }
 791:/usr/include/c++/5/bits/stl_iterator.h **** 
 792:/usr/include/c++/5/bits/stl_iterator.h ****       __normal_iterator
 793:/usr/include/c++/5/bits/stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 794:/usr/include/c++/5/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 795:/usr/include/c++/5/bits/stl_iterator.h **** 
 796:/usr/include/c++/5/bits/stl_iterator.h ****       __normal_iterator&
 797:/usr/include/c++/5/bits/stl_iterator.h ****       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 798:/usr/include/c++/5/bits/stl_iterator.h ****       { _M_current -= __n; return *this; }
 799:/usr/include/c++/5/bits/stl_iterator.h **** 
 800:/usr/include/c++/5/bits/stl_iterator.h ****       __normal_iterator
 801:/usr/include/c++/5/bits/stl_iterator.h ****       operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 802:/usr/include/c++/5/bits/stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
 803:/usr/include/c++/5/bits/stl_iterator.h **** 
 804:/usr/include/c++/5/bits/stl_iterator.h ****       const _Iterator&
 805:/usr/include/c++/5/bits/stl_iterator.h ****       base() const _GLIBCXX_NOEXCEPT
 806:/usr/include/c++/5/bits/stl_iterator.h ****       { return _M_current; }
 807:/usr/include/c++/5/bits/stl_iterator.h ****     };
 808:/usr/include/c++/5/bits/stl_iterator.h **** 
 809:/usr/include/c++/5/bits/stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
 810:/usr/include/c++/5/bits/stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
 811:/usr/include/c++/5/bits/stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
 812:/usr/include/c++/5/bits/stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
 813:/usr/include/c++/5/bits/stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
 814:/usr/include/c++/5/bits/stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
 815:/usr/include/c++/5/bits/stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
 816:/usr/include/c++/5/bits/stl_iterator.h **** 
 817:/usr/include/c++/5/bits/stl_iterator.h ****   // Forward iterator requirements
 818:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 819:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 820:/usr/include/c++/5/bits/stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 821:/usr/include/c++/5/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 822:/usr/include/c++/5/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 823:/usr/include/c++/5/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 824:/usr/include/c++/5/bits/stl_iterator.h **** 
 825:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 826:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 827:/usr/include/c++/5/bits/stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 828:/usr/include/c++/5/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 829:/usr/include/c++/5/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 830:/usr/include/c++/5/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 831:/usr/include/c++/5/bits/stl_iterator.h **** 
 832:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 833:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 834:/usr/include/c++/5/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 835:/usr/include/c++/5/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 836:/usr/include/c++/5/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 837:/usr/include/c++/5/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 838:/usr/include/c++/5/bits/stl_iterator.h **** 
 839:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 840:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 841:/usr/include/c++/5/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 1688              		.loc 5 841 0
 1689              		.cfi_startproc
 1690 0000 55       		pushq	%rbp
 1691              		.cfi_def_cfa_offset 16
 1692              		.cfi_offset 6, -16
 1693 0001 4889E5   		movq	%rsp, %rbp
 1694              		.cfi_def_cfa_register 6
 1695 0004 53       		pushq	%rbx
 1696 0005 4883EC18 		subq	$24, %rsp
 1697              		.cfi_offset 3, -24
 1698 0009 48897DE8 		movq	%rdi, -24(%rbp)
 1699 000d 488975E0 		movq	%rsi, -32(%rbp)
 842:/usr/include/c++/5/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 843:/usr/include/c++/5/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 844:/usr/include/c++/5/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 1700              		.loc 5 844 0
 1701 0011 488B45E8 		movq	-24(%rbp), %rax
 1702 0015 4889C7   		movq	%rax, %rdi
 1703 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4bas
 1703      00
 1704 001d 488B18   		movq	(%rax), %rbx
 1705 0020 488B45E0 		movq	-32(%rbp), %rax
 1706 0024 4889C7   		movq	%rax, %rdi
 1707 0027 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4bas
 1707      00
 1708 002c 488B00   		movq	(%rax), %rax
 1709 002f 4839C3   		cmpq	%rax, %rbx
 1710 0032 0F95C0   		setne	%al
 1711 0035 4883C418 		addq	$24, %rsp
 1712 0039 5B       		popq	%rbx
 1713 003a 5D       		popq	%rbp
 1714              		.cfi_def_cfa 7, 8
 1715 003b C3       		ret
 1716              		.cfi_endproc
 1717              	.LFE1381:
 1719              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 1720              		.align 2
 1721              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv
 1723              	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv:
 1724              	.LFB1382:
 761:/usr/include/c++/5/bits/stl_iterator.h ****       {
 1725              		.loc 5 761 0
 1726              		.cfi_startproc
 1727 0000 55       		pushq	%rbp
 1728              		.cfi_def_cfa_offset 16
 1729              		.cfi_offset 6, -16
 1730 0001 4889E5   		movq	%rsp, %rbp
 1731              		.cfi_def_cfa_register 6
 1732 0004 48897DF8 		movq	%rdi, -8(%rbp)
 763:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 1733              		.loc 5 763 0
 1734 0008 488B45F8 		movq	-8(%rbp), %rax
 1735 000c 488B00   		movq	(%rax), %rax
 1736 000f 488D9080 		leaq	128(%rax), %rdx
 1736      000000
 1737 0016 488B45F8 		movq	-8(%rbp), %rax
 1738 001a 488910   		movq	%rdx, (%rax)
 764:/usr/include/c++/5/bits/stl_iterator.h ****       }
 1739              		.loc 5 764 0
 1740 001d 488B45F8 		movq	-8(%rbp), %rax
 765:/usr/include/c++/5/bits/stl_iterator.h **** 
 1741              		.loc 5 765 0
 1742 0021 5D       		popq	%rbp
 1743              		.cfi_def_cfa 7, 8
 1744 0022 C3       		ret
 1745              		.cfi_endproc
 1746              	.LFE1382:
 1748              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaI
 1749              		.align 2
 1750              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeE
 1752              	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv:
 1753              	.LFB1383:
 753:/usr/include/c++/5/bits/stl_iterator.h ****       { return *_M_current; }
 1754              		.loc 5 753 0
 1755              		.cfi_startproc
 1756 0000 55       		pushq	%rbp
 1757              		.cfi_def_cfa_offset 16
 1758              		.cfi_offset 6, -16
 1759 0001 4889E5   		movq	%rsp, %rbp
 1760              		.cfi_def_cfa_register 6
 1761 0004 48897DF8 		movq	%rdi, -8(%rbp)
 754:/usr/include/c++/5/bits/stl_iterator.h **** 
 1762              		.loc 5 754 0
 1763 0008 488B45F8 		movq	-8(%rbp), %rax
 1764 000c 488B00   		movq	(%rax), %rax
 1765 000f 5D       		popq	%rbp
 1766              		.cfi_def_cfa 7, 8
 1767 0010 C3       		ret
 1768              		.cfi_endproc
 1769              	.LFE1383:
 1771              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaI
 1772              		.align 2
 1773              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptE
 1775              	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv:
 1776              	.LFB1384:
 757:/usr/include/c++/5/bits/stl_iterator.h ****       { return _M_current; }
 1777              		.loc 5 757 0
 1778              		.cfi_startproc
 1779 0000 55       		pushq	%rbp
 1780              		.cfi_def_cfa_offset 16
 1781              		.cfi_offset 6, -16
 1782 0001 4889E5   		movq	%rsp, %rbp
 1783              		.cfi_def_cfa_register 6
 1784 0004 48897DF8 		movq	%rdi, -8(%rbp)
 758:/usr/include/c++/5/bits/stl_iterator.h **** 
 1785              		.loc 5 758 0
 1786 0008 488B45F8 		movq	-8(%rbp), %rax
 1787 000c 488B00   		movq	(%rax), %rax
 1788 000f 5D       		popq	%rbp
 1789              		.cfi_def_cfa 7, 8
 1790 0010 C3       		ret
 1791              		.cfi_endproc
 1792              	.LFE1384:
 1794              		.section	.text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_E
 1795              		.align 2
 1796              		.weak	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv
 1798              	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv:
 1799              	.LFB1386:
 556:/usr/include/c++/5/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 1800              		.loc 4 556 0
 1801              		.cfi_startproc
 1802 0000 55       		pushq	%rbp
 1803              		.cfi_def_cfa_offset 16
 1804              		.cfi_offset 6, -16
 1805 0001 4889E5   		movq	%rsp, %rbp
 1806              		.cfi_def_cfa_register 6
 1807 0004 4883EC30 		subq	$48, %rsp
 1808 0008 48897DD8 		movq	%rdi, -40(%rbp)
 556:/usr/include/c++/5/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 1809              		.loc 4 556 0
 1810 000c 64488B04 		movq	%fs:40, %rax
 1810      25280000 
 1810      00
 1811 0015 488945F8 		movq	%rax, -8(%rbp)
 1812 0019 31C0     		xorl	%eax, %eax
 557:/usr/include/c++/5/bits/stl_vector.h **** 
 1813              		.loc 4 557 0
 1814 001b 488B45D8 		movq	-40(%rbp), %rax
 1815 001f 488B00   		movq	(%rax), %rax
 1816 0022 488945F0 		movq	%rax, -16(%rbp)
 1817 0026 488D55F0 		leaq	-16(%rbp), %rdx
 1818 002a 488D45E0 		leaq	-32(%rbp), %rax
 1819 002e 4889D6   		movq	%rdx, %rsi
 1820 0031 4889C7   		movq	%rax, %rdi
 1821 0034 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 1821      00
 1822 0039 488B45E0 		movq	-32(%rbp), %rax
 1823 003d 488B4DF8 		movq	-8(%rbp), %rcx
 1824 0041 6448330C 		xorq	%fs:40, %rcx
 1824      25280000 
 1824      00
 1825 004a 7405     		je	.L91
 1826 004c E8000000 		call	__stack_chk_fail@PLT
 1826      00
 1827              	.L91:
 1828 0051 C9       		leave
 1829              		.cfi_def_cfa 7, 8
 1830 0052 C3       		ret
 1831              		.cfi_endproc
 1832              	.LFE1386:
 1834              		.section	.text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_E
 1835              		.align 2
 1836              		.weak	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv
 1838              	_ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv:
 1839              	.LFB1387:
 574:/usr/include/c++/5/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 1840              		.loc 4 574 0
 1841              		.cfi_startproc
 1842 0000 55       		pushq	%rbp
 1843              		.cfi_def_cfa_offset 16
 1844              		.cfi_offset 6, -16
 1845 0001 4889E5   		movq	%rsp, %rbp
 1846              		.cfi_def_cfa_register 6
 1847 0004 4883EC30 		subq	$48, %rsp
 1848 0008 48897DD8 		movq	%rdi, -40(%rbp)
 574:/usr/include/c++/5/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 1849              		.loc 4 574 0
 1850 000c 64488B04 		movq	%fs:40, %rax
 1850      25280000 
 1850      00
 1851 0015 488945F8 		movq	%rax, -8(%rbp)
 1852 0019 31C0     		xorl	%eax, %eax
 1853              		.loc 4 575 0
 1854 001b 488B45D8 		movq	-40(%rbp), %rax
 1855 001f 488B4008 		movq	8(%rax), %rax
 1856 0023 488945F0 		movq	%rax, -16(%rbp)
 1857 0027 488D55F0 		leaq	-16(%rbp), %rdx
 1858 002b 488D45E0 		leaq	-32(%rbp), %rax
 1859 002f 4889D6   		movq	%rdx, %rsi
 1860 0032 4889C7   		movq	%rax, %rdi
 1861 0035 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 1861      00
 1862 003a 488B45E0 		movq	-32(%rbp), %rax
 1863 003e 488B4DF8 		movq	-8(%rbp), %rcx
 1864 0042 6448330C 		xorq	%fs:40, %rcx
 1864      25280000 
 1864      00
 1865 004b 7405     		je	.L94
 1866 004d E8000000 		call	__stack_chk_fail@PLT
 1866      00
 1867              	.L94:
 1868 0052 C9       		leave
 1869              		.cfi_def_cfa 7, 8
 1870 0053 C3       		ret
 1871              		.cfi_endproc
 1872              	.LFE1387:
 1874              		.section	.text._ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6
 1875              		.weak	_ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8
 1877              	_ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_
 1878              	.LFB1388:
 841:/usr/include/c++/5/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 1879              		.loc 5 841 0
 1880              		.cfi_startproc
 1881 0000 55       		pushq	%rbp
 1882              		.cfi_def_cfa_offset 16
 1883              		.cfi_offset 6, -16
 1884 0001 4889E5   		movq	%rsp, %rbp
 1885              		.cfi_def_cfa_register 6
 1886 0004 53       		pushq	%rbx
 1887 0005 4883EC18 		subq	$24, %rsp
 1888              		.cfi_offset 3, -24
 1889 0009 48897DE8 		movq	%rdi, -24(%rbp)
 1890 000d 488975E0 		movq	%rsi, -32(%rbp)
 1891              		.loc 5 844 0
 1892 0011 488B45E8 		movq	-24(%rbp), %rax
 1893 0015 4889C7   		movq	%rax, %rdi
 1894 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 1894      00
 1895 001d 488B18   		movq	(%rax), %rbx
 1896 0020 488B45E0 		movq	-32(%rbp), %rax
 1897 0024 4889C7   		movq	%rax, %rdi
 1898 0027 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 1898      00
 1899 002c 488B00   		movq	(%rax), %rax
 1900 002f 4839C3   		cmpq	%rax, %rbx
 1901 0032 0F95C0   		setne	%al
 1902 0035 4883C418 		addq	$24, %rsp
 1903 0039 5B       		popq	%rbx
 1904 003a 5D       		popq	%rbp
 1905              		.cfi_def_cfa 7, 8
 1906 003b C3       		ret
 1907              		.cfi_endproc
 1908              	.LFE1388:
 1910              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tra
 1911              		.align 2
 1912              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 1914              	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt
 1915              	.LFB1389:
 761:/usr/include/c++/5/bits/stl_iterator.h ****       {
 1916              		.loc 5 761 0
 1917              		.cfi_startproc
 1918 0000 55       		pushq	%rbp
 1919              		.cfi_def_cfa_offset 16
 1920              		.cfi_offset 6, -16
 1921 0001 4889E5   		movq	%rsp, %rbp
 1922              		.cfi_def_cfa_register 6
 1923 0004 48897DF8 		movq	%rdi, -8(%rbp)
 763:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 1924              		.loc 5 763 0
 1925 0008 488B45F8 		movq	-8(%rbp), %rax
 1926 000c 488B00   		movq	(%rax), %rax
 1927 000f 488D5028 		leaq	40(%rax), %rdx
 1928 0013 488B45F8 		movq	-8(%rbp), %rax
 1929 0017 488910   		movq	%rdx, (%rax)
 764:/usr/include/c++/5/bits/stl_iterator.h ****       }
 1930              		.loc 5 764 0
 1931 001a 488B45F8 		movq	-8(%rbp), %rax
 765:/usr/include/c++/5/bits/stl_iterator.h **** 
 1932              		.loc 5 765 0
 1933 001e 5D       		popq	%rbp
 1934              		.cfi_def_cfa 7, 8
 1935 001f C3       		ret
 1936              		.cfi_endproc
 1937              	.LFE1389:
 1939              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tr
 1940              		.align 2
 1941              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESa
 1943              	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 1944              	.LFB1390:
 757:/usr/include/c++/5/bits/stl_iterator.h ****       { return _M_current; }
 1945              		.loc 5 757 0
 1946              		.cfi_startproc
 1947 0000 55       		pushq	%rbp
 1948              		.cfi_def_cfa_offset 16
 1949              		.cfi_offset 6, -16
 1950 0001 4889E5   		movq	%rsp, %rbp
 1951              		.cfi_def_cfa_register 6
 1952 0004 48897DF8 		movq	%rdi, -8(%rbp)
 758:/usr/include/c++/5/bits/stl_iterator.h **** 
 1953              		.loc 5 758 0
 1954 0008 488B45F8 		movq	-8(%rbp), %rax
 1955 000c 488B00   		movq	(%rax), %rax
 1956 000f 5D       		popq	%rbp
 1957              		.cfi_def_cfa 7, 8
 1958 0010 C3       		ret
 1959              		.cfi_endproc
 1960              	.LFE1390:
 1962              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev,"axG"
 1963              		.align 2
 1964              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev
 1966              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev:
 1967              	.LFB1437:
  79:/usr/include/c++/5/bits/stl_vector.h ****       : public _Tp_alloc_type
 1968              		.loc 4 79 0
 1969              		.cfi_startproc
 1970 0000 55       		pushq	%rbp
 1971              		.cfi_def_cfa_offset 16
 1972              		.cfi_offset 6, -16
 1973 0001 4889E5   		movq	%rsp, %rbp
 1974              		.cfi_def_cfa_register 6
 1975 0004 4883EC10 		subq	$16, %rsp
 1976 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1977              	.LBB16:
  79:/usr/include/c++/5/bits/stl_vector.h ****       : public _Tp_alloc_type
 1978              		.loc 4 79 0
 1979 000c 488B45F8 		movq	-8(%rbp), %rax
 1980 0010 4889C7   		movq	%rax, %rdi
 1981 0013 E8000000 		call	_ZNSaIN8UnitTest18DeferredTestResultEED2Ev@PLT
 1981      00
 1982              	.LBE16:
 1983 0018 90       		nop
 1984 0019 C9       		leave
 1985              		.cfi_def_cfa 7, 8
 1986 001a C3       		ret
 1987              		.cfi_endproc
 1988              	.LFE1437:
 1990              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev
 1991              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev,_ZNSt12_Vector_
 1992              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev,"axG",@progbits,_ZN
 1993              		.align 2
 1994              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
 1996              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:
 1997              	.LFB1439:
 124:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl() { }
 1998              		.loc 4 124 0
 1999              		.cfi_startproc
 2000 0000 55       		pushq	%rbp
 2001              		.cfi_def_cfa_offset 16
 2002              		.cfi_offset 6, -16
 2003 0001 4889E5   		movq	%rsp, %rbp
 2004              		.cfi_def_cfa_register 6
 2005 0004 4883EC10 		subq	$16, %rsp
 2006 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2007              	.LBB17:
 125:/usr/include/c++/5/bits/stl_vector.h **** 
 2008              		.loc 4 125 0
 2009 000c 488B45F8 		movq	-8(%rbp), %rax
 2010 0010 4889C7   		movq	%rax, %rdi
 2011 0013 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev@PLT
 2011      00
 2012              	.LBE17:
 2013 0018 90       		nop
 2014 0019 C9       		leave
 2015              		.cfi_def_cfa 7, 8
 2016 001a C3       		ret
 2017              		.cfi_endproc
 2018              	.LFE1439:
 2020              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
 2021              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev,_ZNSt12_Vector_baseIN8UnitTes
 2022              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZN
 2023              		.align 2
 2024              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
 2026              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:
 2027              	.LFB1442:
 159:/usr/include/c++/5/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 2028              		.loc 4 159 0
 2029              		.cfi_startproc
 2030              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2031              		.cfi_lsda 0x1b,.LLSDA1442
 2032 0000 55       		pushq	%rbp
 2033              		.cfi_def_cfa_offset 16
 2034              		.cfi_offset 6, -16
 2035 0001 4889E5   		movq	%rsp, %rbp
 2036              		.cfi_def_cfa_register 6
 2037 0004 53       		pushq	%rbx
 2038 0005 4883EC18 		subq	$24, %rsp
 2039              		.cfi_offset 3, -24
 2040 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2041              	.LBB18:
 161:/usr/include/c++/5/bits/stl_vector.h **** 
 2042              		.loc 4 161 0
 2043 000d 488B45E8 		movq	-24(%rbp), %rax
 2044 0011 488B4010 		movq	16(%rax), %rax
 160:/usr/include/c++/5/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 2045              		.loc 4 160 0
 2046 0015 4889C2   		movq	%rax, %rdx
 161:/usr/include/c++/5/bits/stl_vector.h **** 
 2047              		.loc 4 161 0
 2048 0018 488B45E8 		movq	-24(%rbp), %rax
 2049 001c 488B00   		movq	(%rax), %rax
 160:/usr/include/c++/5/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 2050              		.loc 4 160 0
 2051 001f 4829C2   		subq	%rax, %rdx
 2052 0022 4889D0   		movq	%rdx, %rax
 2053 0025 48C1F807 		sarq	$7, %rax
 2054 0029 4889C2   		movq	%rax, %rdx
 2055 002c 488B45E8 		movq	-24(%rbp), %rax
 2056 0030 488B08   		movq	(%rax), %rcx
 2057 0033 488B45E8 		movq	-24(%rbp), %rax
 2058 0037 4889CE   		movq	%rcx, %rsi
 2059 003a 4889C7   		movq	%rax, %rdi
 2060              	.LEHB35:
 2061 003d E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m@PLT
 2061      00
 2062              	.LEHE35:
 161:/usr/include/c++/5/bits/stl_vector.h **** 
 2063              		.loc 4 161 0
 2064 0042 488B45E8 		movq	-24(%rbp), %rax
 2065 0046 4889C7   		movq	%rax, %rdi
 2066 0049 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev@PLT
 2066      00
 2067              	.LBE18:
 2068 004e EB1A     		jmp	.L106
 2069              	.L105:
 2070 0050 4889C3   		movq	%rax, %rbx
 2071              	.LBB19:
 2072 0053 488B45E8 		movq	-24(%rbp), %rax
 2073 0057 4889C7   		movq	%rax, %rdi
 2074 005a E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev@PLT
 2074      00
 2075 005f 4889D8   		movq	%rbx, %rax
 2076 0062 4889C7   		movq	%rax, %rdi
 2077              	.LEHB36:
 2078 0065 E8000000 		call	_Unwind_Resume@PLT
 2078      00
 2079              	.LEHE36:
 2080              	.L106:
 2081              	.LBE19:
 2082 006a 4883C418 		addq	$24, %rsp
 2083 006e 5B       		popq	%rbx
 2084 006f 5D       		popq	%rbp
 2085              		.cfi_def_cfa 7, 8
 2086 0070 C3       		ret
 2087              		.cfi_endproc
 2088              	.LFE1442:
 2089              		.section	.gcc_except_table
 2090              	.LLSDA1442:
 2091 00cd FF       		.byte	0xff
 2092 00ce FF       		.byte	0xff
 2093 00cf 01       		.byte	0x1
 2094 00d0 08       		.uleb128 .LLSDACSE1442-.LLSDACSB1442
 2095              	.LLSDACSB1442:
 2096 00d1 3D       		.uleb128 .LEHB35-.LFB1442
 2097 00d2 05       		.uleb128 .LEHE35-.LEHB35
 2098 00d3 50       		.uleb128 .L105-.LFB1442
 2099 00d4 00       		.uleb128 0
 2100 00d5 65       		.uleb128 .LEHB36-.LFB1442
 2101 00d6 05       		.uleb128 .LEHE36-.LEHB36
 2102 00d7 00       		.uleb128 0
 2103 00d8 00       		.uleb128 0
 2104              	.LLSDACSE1442:
 2105              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZN
 2107              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
 2108              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED1Ev,_ZNSt12_Vector_baseIN8UnitTes
 2109              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv,
 2110              		.align 2
 2111              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
 2113              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:
 2114              	.LFB1444:
 113:/usr/include/c++/5/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 2115              		.loc 4 113 0
 2116              		.cfi_startproc
 2117 0000 55       		pushq	%rbp
 2118              		.cfi_def_cfa_offset 16
 2119              		.cfi_offset 6, -16
 2120 0001 4889E5   		movq	%rsp, %rbp
 2121              		.cfi_def_cfa_register 6
 2122 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/5/bits/stl_vector.h **** 
 2123              		.loc 4 114 0
 2124 0008 488B45F8 		movq	-8(%rbp), %rax
 2125 000c 5D       		popq	%rbp
 2126              		.cfi_def_cfa 7, 8
 2127 000d C3       		ret
 2128              		.cfi_endproc
 2129              	.LFE1444:
 2131              		.section	.text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E,"axG",@progbits,_Z
 2132              		.weak	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E
 2134              	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E:
 2135              	.LFB1445:
 2136              		.file 6 "/usr/include/c++/5/bits/stl_construct.h"
   1:/usr/include/c++/5/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/c++/5/bits/stl_construct.h **** 
   3:/usr/include/c++/5/bits/stl_construct.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/stl_construct.h **** //
   5:/usr/include/c++/5/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/stl_construct.h **** // any later version.
  10:/usr/include/c++/5/bits/stl_construct.h **** 
  11:/usr/include/c++/5/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/stl_construct.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/stl_construct.h **** 
  16:/usr/include/c++/5/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/stl_construct.h **** 
  20:/usr/include/c++/5/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/stl_construct.h **** 
  25:/usr/include/c++/5/bits/stl_construct.h **** /*
  26:/usr/include/c++/5/bits/stl_construct.h ****  *
  27:/usr/include/c++/5/bits/stl_construct.h ****  * Copyright (c) 1994
  28:/usr/include/c++/5/bits/stl_construct.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/5/bits/stl_construct.h ****  *
  30:/usr/include/c++/5/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/5/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/5/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/5/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/5/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/5/bits/stl_construct.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/5/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/5/bits/stl_construct.h ****  *
  38:/usr/include/c++/5/bits/stl_construct.h ****  *
  39:/usr/include/c++/5/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/5/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/5/bits/stl_construct.h ****  *
  42:/usr/include/c++/5/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/5/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/5/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/5/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/5/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/5/bits/stl_construct.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/5/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/5/bits/stl_construct.h ****  */
  50:/usr/include/c++/5/bits/stl_construct.h **** 
  51:/usr/include/c++/5/bits/stl_construct.h **** /** @file bits/stl_construct.h
  52:/usr/include/c++/5/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/5/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/5/bits/stl_construct.h ****  */
  55:/usr/include/c++/5/bits/stl_construct.h **** 
  56:/usr/include/c++/5/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:/usr/include/c++/5/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:/usr/include/c++/5/bits/stl_construct.h **** 
  59:/usr/include/c++/5/bits/stl_construct.h **** #include <new>
  60:/usr/include/c++/5/bits/stl_construct.h **** #include <bits/move.h>
  61:/usr/include/c++/5/bits/stl_construct.h **** #include <ext/alloc_traits.h>
  62:/usr/include/c++/5/bits/stl_construct.h **** 
  63:/usr/include/c++/5/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:/usr/include/c++/5/bits/stl_construct.h **** {
  65:/usr/include/c++/5/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:/usr/include/c++/5/bits/stl_construct.h **** 
  67:/usr/include/c++/5/bits/stl_construct.h ****   /**
  68:/usr/include/c++/5/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  69:/usr/include/c++/5/bits/stl_construct.h ****    * object's constructor with an initializer.
  70:/usr/include/c++/5/bits/stl_construct.h ****    */
  71:/usr/include/c++/5/bits/stl_construct.h **** #if __cplusplus >= 201103L
  72:/usr/include/c++/5/bits/stl_construct.h ****   template<typename _T1, typename... _Args>
  73:/usr/include/c++/5/bits/stl_construct.h ****     inline void
  74:/usr/include/c++/5/bits/stl_construct.h ****     _Construct(_T1* __p, _Args&&... __args)
  75:/usr/include/c++/5/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  76:/usr/include/c++/5/bits/stl_construct.h **** #else
  77:/usr/include/c++/5/bits/stl_construct.h ****   template<typename _T1, typename _T2>
  78:/usr/include/c++/5/bits/stl_construct.h ****     inline void
  79:/usr/include/c++/5/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
  80:/usr/include/c++/5/bits/stl_construct.h ****     {
  81:/usr/include/c++/5/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  82:/usr/include/c++/5/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
  83:/usr/include/c++/5/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
  84:/usr/include/c++/5/bits/stl_construct.h ****     }
  85:/usr/include/c++/5/bits/stl_construct.h **** #endif
  86:/usr/include/c++/5/bits/stl_construct.h **** 
  87:/usr/include/c++/5/bits/stl_construct.h ****   /**
  88:/usr/include/c++/5/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
  89:/usr/include/c++/5/bits/stl_construct.h ****    */
  90:/usr/include/c++/5/bits/stl_construct.h ****   template<typename _Tp>
  91:/usr/include/c++/5/bits/stl_construct.h ****     inline void
  92:/usr/include/c++/5/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
  93:/usr/include/c++/5/bits/stl_construct.h ****     { __pointer->~_Tp(); }
  94:/usr/include/c++/5/bits/stl_construct.h **** 
  95:/usr/include/c++/5/bits/stl_construct.h ****   template<bool>
  96:/usr/include/c++/5/bits/stl_construct.h ****     struct _Destroy_aux
  97:/usr/include/c++/5/bits/stl_construct.h ****     {
  98:/usr/include/c++/5/bits/stl_construct.h ****       template<typename _ForwardIterator>
  99:/usr/include/c++/5/bits/stl_construct.h ****         static void
 100:/usr/include/c++/5/bits/stl_construct.h ****         __destroy(_ForwardIterator __first, _ForwardIterator __last)
 101:/usr/include/c++/5/bits/stl_construct.h **** 	{
 102:/usr/include/c++/5/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 103:/usr/include/c++/5/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 104:/usr/include/c++/5/bits/stl_construct.h **** 	}
 105:/usr/include/c++/5/bits/stl_construct.h ****     };
 106:/usr/include/c++/5/bits/stl_construct.h **** 
 107:/usr/include/c++/5/bits/stl_construct.h ****   template<>
 108:/usr/include/c++/5/bits/stl_construct.h ****     struct _Destroy_aux<true>
 109:/usr/include/c++/5/bits/stl_construct.h ****     {
 110:/usr/include/c++/5/bits/stl_construct.h ****       template<typename _ForwardIterator>
 111:/usr/include/c++/5/bits/stl_construct.h ****         static void
 112:/usr/include/c++/5/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 113:/usr/include/c++/5/bits/stl_construct.h ****     };
 114:/usr/include/c++/5/bits/stl_construct.h **** 
 115:/usr/include/c++/5/bits/stl_construct.h ****   /**
 116:/usr/include/c++/5/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 117:/usr/include/c++/5/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 118:/usr/include/c++/5/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 119:/usr/include/c++/5/bits/stl_construct.h ****    */
 120:/usr/include/c++/5/bits/stl_construct.h ****   template<typename _ForwardIterator>
 121:/usr/include/c++/5/bits/stl_construct.h ****     inline void
 122:/usr/include/c++/5/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 123:/usr/include/c++/5/bits/stl_construct.h ****     {
 124:/usr/include/c++/5/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 125:/usr/include/c++/5/bits/stl_construct.h ****                        _Value_type;
 126:/usr/include/c++/5/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 127:/usr/include/c++/5/bits/stl_construct.h **** 	__destroy(__first, __last);
 128:/usr/include/c++/5/bits/stl_construct.h ****     }
 129:/usr/include/c++/5/bits/stl_construct.h **** 
 130:/usr/include/c++/5/bits/stl_construct.h ****   /**
 131:/usr/include/c++/5/bits/stl_construct.h ****    * Destroy a range of objects using the supplied allocator.  For
 132:/usr/include/c++/5/bits/stl_construct.h ****    * nondefault allocators we do not optimize away invocation of 
 133:/usr/include/c++/5/bits/stl_construct.h ****    * destroy() even if _Tp has a trivial destructor.
 134:/usr/include/c++/5/bits/stl_construct.h ****    */
 135:/usr/include/c++/5/bits/stl_construct.h **** 
 136:/usr/include/c++/5/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Allocator>
 137:/usr/include/c++/5/bits/stl_construct.h ****     void
 138:/usr/include/c++/5/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 139:/usr/include/c++/5/bits/stl_construct.h **** 	     _Allocator& __alloc)
 140:/usr/include/c++/5/bits/stl_construct.h ****     {
 141:/usr/include/c++/5/bits/stl_construct.h ****       typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 142:/usr/include/c++/5/bits/stl_construct.h ****       for (; __first != __last; ++__first)
 143:/usr/include/c++/5/bits/stl_construct.h **** 	__traits::destroy(__alloc, std::__addressof(*__first));
 144:/usr/include/c++/5/bits/stl_construct.h ****     }
 145:/usr/include/c++/5/bits/stl_construct.h **** 
 146:/usr/include/c++/5/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Tp>
 147:/usr/include/c++/5/bits/stl_construct.h ****     inline void
 148:/usr/include/c++/5/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 2137              		.loc 6 148 0
 2138              		.cfi_startproc
 2139 0000 55       		pushq	%rbp
 2140              		.cfi_def_cfa_offset 16
 2141              		.cfi_offset 6, -16
 2142 0001 4889E5   		movq	%rsp, %rbp
 2143              		.cfi_def_cfa_register 6
 2144 0004 4883EC20 		subq	$32, %rsp
 2145 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2146 000c 488975F0 		movq	%rsi, -16(%rbp)
 2147 0010 488955E8 		movq	%rdx, -24(%rbp)
 149:/usr/include/c++/5/bits/stl_construct.h **** 	     allocator<_Tp>&)
 150:/usr/include/c++/5/bits/stl_construct.h ****     {
 151:/usr/include/c++/5/bits/stl_construct.h ****       _Destroy(__first, __last);
 2148              		.loc 6 151 0
 2149 0014 488B55F0 		movq	-16(%rbp), %rdx
 2150 0018 488B45F8 		movq	-8(%rbp), %rax
 2151 001c 4889D6   		movq	%rdx, %rsi
 2152 001f 4889C7   		movq	%rax, %rdi
 2153 0022 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_@PLT
 2153      00
 152:/usr/include/c++/5/bits/stl_construct.h ****     }
 2154              		.loc 6 152 0
 2155 0027 90       		nop
 2156 0028 C9       		leave
 2157              		.cfi_def_cfa 7, 8
 2158 0029 C3       		ret
 2159              		.cfi_endproc
 2160              	.LFE1445:
 2162              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 2163              		.align 2
 2164              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ER
 2166              	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_:
 2167              	.LFB1447:
 740:/usr/include/c++/5/bits/stl_iterator.h ****       : _M_current(__i) { }
 2168              		.loc 5 740 0
 2169              		.cfi_startproc
 2170 0000 55       		pushq	%rbp
 2171              		.cfi_def_cfa_offset 16
 2172              		.cfi_offset 6, -16
 2173 0001 4889E5   		movq	%rsp, %rbp
 2174              		.cfi_def_cfa_register 6
 2175 0004 48897DF8 		movq	%rdi, -8(%rbp)
 2176 0008 488975F0 		movq	%rsi, -16(%rbp)
 2177              	.LBB20:
 741:/usr/include/c++/5/bits/stl_iterator.h **** 
 2178              		.loc 5 741 0
 2179 000c 488B45F0 		movq	-16(%rbp), %rax
 2180 0010 488B10   		movq	(%rax), %rdx
 2181 0013 488B45F8 		movq	-8(%rbp), %rax
 2182 0017 488910   		movq	%rdx, (%rax)
 2183              	.LBE20:
 2184 001a 90       		nop
 2185 001b 5D       		popq	%rbp
 2186              		.cfi_def_cfa 7, 8
 2187 001c C3       		ret
 2188              		.cfi_endproc
 2189              	.LFE1447:
 2191              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ER
 2192              		.set	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 2193              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaI
 2194              		.align 2
 2195              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4ba
 2197              	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv:
 2198              	.LFB1449:
 805:/usr/include/c++/5/bits/stl_iterator.h ****       { return _M_current; }
 2199              		.loc 5 805 0
 2200              		.cfi_startproc
 2201 0000 55       		pushq	%rbp
 2202              		.cfi_def_cfa_offset 16
 2203              		.cfi_offset 6, -16
 2204 0001 4889E5   		movq	%rsp, %rbp
 2205              		.cfi_def_cfa_register 6
 2206 0004 48897DF8 		movq	%rdi, -8(%rbp)
 806:/usr/include/c++/5/bits/stl_iterator.h ****     };
 2207              		.loc 5 806 0
 2208 0008 488B45F8 		movq	-8(%rbp), %rax
 2209 000c 5D       		popq	%rbp
 2210              		.cfi_def_cfa 7, 8
 2211 000d C3       		ret
 2212              		.cfi_endproc
 2213              	.LFE1449:
 2215              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tra
 2216              		.align 2
 2217              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 2219              	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt
 2220              	.LFB1451:
 740:/usr/include/c++/5/bits/stl_iterator.h ****       : _M_current(__i) { }
 2221              		.loc 5 740 0
 2222              		.cfi_startproc
 2223 0000 55       		pushq	%rbp
 2224              		.cfi_def_cfa_offset 16
 2225              		.cfi_offset 6, -16
 2226 0001 4889E5   		movq	%rsp, %rbp
 2227              		.cfi_def_cfa_register 6
 2228 0004 48897DF8 		movq	%rdi, -8(%rbp)
 2229 0008 488975F0 		movq	%rsi, -16(%rbp)
 2230              	.LBB21:
 741:/usr/include/c++/5/bits/stl_iterator.h **** 
 2231              		.loc 5 741 0
 2232 000c 488B45F0 		movq	-16(%rbp), %rax
 2233 0010 488B10   		movq	(%rax), %rdx
 2234 0013 488B45F8 		movq	-8(%rbp), %rax
 2235 0017 488910   		movq	%rdx, (%rax)
 2236              	.LBE21:
 2237 001a 90       		nop
 2238 001b 5D       		popq	%rbp
 2239              		.cfi_def_cfa 7, 8
 2240 001c C3       		ret
 2241              		.cfi_endproc
 2242              	.LFE1451:
 2244              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 2245              		.set	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIc
 2246              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_tr
 2247              		.align 2
 2248              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESa
 2250              	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 2251              	.LFB1453:
 805:/usr/include/c++/5/bits/stl_iterator.h ****       { return _M_current; }
 2252              		.loc 5 805 0
 2253              		.cfi_startproc
 2254 0000 55       		pushq	%rbp
 2255              		.cfi_def_cfa_offset 16
 2256              		.cfi_offset 6, -16
 2257 0001 4889E5   		movq	%rsp, %rbp
 2258              		.cfi_def_cfa_register 6
 2259 0004 48897DF8 		movq	%rdi, -8(%rbp)
 806:/usr/include/c++/5/bits/stl_iterator.h ****     };
 2260              		.loc 5 806 0
 2261 0008 488B45F8 		movq	-8(%rbp), %rax
 2262 000c 5D       		popq	%rbp
 2263              		.cfi_def_cfa 7, 8
 2264 000d C3       		ret
 2265              		.cfi_endproc
 2266              	.LFE1453:
 2268              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev,"axG"
 2269              		.align 2
 2270              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev
 2272              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev:
 2273              	.LFB1479:
  86:/usr/include/c++/5/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 2274              		.loc 4 86 0
 2275              		.cfi_startproc
 2276 0000 55       		pushq	%rbp
 2277              		.cfi_def_cfa_offset 16
 2278              		.cfi_offset 6, -16
 2279 0001 4889E5   		movq	%rsp, %rbp
 2280              		.cfi_def_cfa_register 6
 2281 0004 4883EC10 		subq	$16, %rsp
 2282 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2283              	.LBB22:
  87:/usr/include/c++/5/bits/stl_vector.h **** 	{ }
 2284              		.loc 4 87 0
 2285 000c 488B45F8 		movq	-8(%rbp), %rax
 2286 0010 4889C7   		movq	%rax, %rdi
 2287 0013 E8000000 		call	_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev@PLT
 2287      00
 2288 0018 488B45F8 		movq	-8(%rbp), %rax
 2289 001c 48C70000 		movq	$0, (%rax)
 2289      000000
 2290 0023 488B45F8 		movq	-8(%rbp), %rax
 2291 0027 48C74008 		movq	$0, 8(%rax)
 2291      00000000 
 2292 002f 488B45F8 		movq	-8(%rbp), %rax
 2293 0033 48C74010 		movq	$0, 16(%rax)
 2293      00000000 
 2294              	.LBE22:
  88:/usr/include/c++/5/bits/stl_vector.h **** 
 2295              		.loc 4 88 0
 2296 003b 90       		nop
 2297 003c C9       		leave
 2298              		.cfi_def_cfa 7, 8
 2299 003d C3       		ret
 2300              		.cfi_endproc
 2301              	.LFE1479:
 2303              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev
 2304              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev,_ZNSt12_Vector_
 2305              		.section	.text._ZNSaIN8UnitTest18DeferredTestResultEED2Ev,"axG",@progbits,_ZNSaIN8UnitTest18Deferr
 2306              		.align 2
 2307              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEED2Ev
 2309              	_ZNSaIN8UnitTest18DeferredTestResultEED2Ev:
 2310              	.LFB1482:
 2311              		.file 7 "/usr/include/c++/5/bits/allocator.h"
   1:/usr/include/c++/5/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/5/bits/allocator.h **** 
   3:/usr/include/c++/5/bits/allocator.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/allocator.h **** //
   5:/usr/include/c++/5/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/allocator.h **** // any later version.
  10:/usr/include/c++/5/bits/allocator.h **** 
  11:/usr/include/c++/5/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/allocator.h **** 
  16:/usr/include/c++/5/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/allocator.h **** 
  20:/usr/include/c++/5/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/allocator.h **** 
  25:/usr/include/c++/5/bits/allocator.h **** /*
  26:/usr/include/c++/5/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/c++/5/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/c++/5/bits/allocator.h ****  *
  29:/usr/include/c++/5/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/c++/5/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/c++/5/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/c++/5/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/c++/5/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/c++/5/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/c++/5/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/c++/5/bits/allocator.h ****  */
  37:/usr/include/c++/5/bits/allocator.h **** 
  38:/usr/include/c++/5/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/c++/5/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/c++/5/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/c++/5/bits/allocator.h ****  */
  42:/usr/include/c++/5/bits/allocator.h **** 
  43:/usr/include/c++/5/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/c++/5/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/c++/5/bits/allocator.h **** 
  46:/usr/include/c++/5/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/c++/5/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/c++/5/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/c++/5/bits/allocator.h **** #include <type_traits>
  50:/usr/include/c++/5/bits/allocator.h **** #endif
  51:/usr/include/c++/5/bits/allocator.h **** 
  52:/usr/include/c++/5/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/include/c++/5/bits/allocator.h **** {
  54:/usr/include/c++/5/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/include/c++/5/bits/allocator.h **** 
  56:/usr/include/c++/5/bits/allocator.h ****   /**
  57:/usr/include/c++/5/bits/allocator.h ****    *  @addtogroup allocators
  58:/usr/include/c++/5/bits/allocator.h ****    *  @{
  59:/usr/include/c++/5/bits/allocator.h ****    */
  60:/usr/include/c++/5/bits/allocator.h **** 
  61:/usr/include/c++/5/bits/allocator.h ****   /// allocator<void> specialization.
  62:/usr/include/c++/5/bits/allocator.h ****   template<>
  63:/usr/include/c++/5/bits/allocator.h ****     class allocator<void>
  64:/usr/include/c++/5/bits/allocator.h ****     {
  65:/usr/include/c++/5/bits/allocator.h ****     public:
  66:/usr/include/c++/5/bits/allocator.h ****       typedef size_t      size_type;
  67:/usr/include/c++/5/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  68:/usr/include/c++/5/bits/allocator.h ****       typedef void*       pointer;
  69:/usr/include/c++/5/bits/allocator.h ****       typedef const void* const_pointer;
  70:/usr/include/c++/5/bits/allocator.h ****       typedef void        value_type;
  71:/usr/include/c++/5/bits/allocator.h **** 
  72:/usr/include/c++/5/bits/allocator.h ****       template<typename _Tp1>
  73:/usr/include/c++/5/bits/allocator.h ****         struct rebind
  74:/usr/include/c++/5/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
  75:/usr/include/c++/5/bits/allocator.h **** 
  76:/usr/include/c++/5/bits/allocator.h **** #if __cplusplus >= 201103L
  77:/usr/include/c++/5/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  78:/usr/include/c++/5/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  79:/usr/include/c++/5/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  80:/usr/include/c++/5/bits/allocator.h **** #endif
  81:/usr/include/c++/5/bits/allocator.h ****     };
  82:/usr/include/c++/5/bits/allocator.h **** 
  83:/usr/include/c++/5/bits/allocator.h ****   /**
  84:/usr/include/c++/5/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
  85:/usr/include/c++/5/bits/allocator.h ****    *
  86:/usr/include/c++/5/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
  87:/usr/include/c++/5/bits/allocator.h ****    *  for further details.
  88:/usr/include/c++/5/bits/allocator.h ****    *
  89:/usr/include/c++/5/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  90:/usr/include/c++/5/bits/allocator.h ****    */
  91:/usr/include/c++/5/bits/allocator.h ****   template<typename _Tp>
  92:/usr/include/c++/5/bits/allocator.h ****     class allocator: public __allocator_base<_Tp>
  93:/usr/include/c++/5/bits/allocator.h ****     {
  94:/usr/include/c++/5/bits/allocator.h ****    public:
  95:/usr/include/c++/5/bits/allocator.h ****       typedef size_t     size_type;
  96:/usr/include/c++/5/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
  97:/usr/include/c++/5/bits/allocator.h ****       typedef _Tp*       pointer;
  98:/usr/include/c++/5/bits/allocator.h ****       typedef const _Tp* const_pointer;
  99:/usr/include/c++/5/bits/allocator.h ****       typedef _Tp&       reference;
 100:/usr/include/c++/5/bits/allocator.h ****       typedef const _Tp& const_reference;
 101:/usr/include/c++/5/bits/allocator.h ****       typedef _Tp        value_type;
 102:/usr/include/c++/5/bits/allocator.h **** 
 103:/usr/include/c++/5/bits/allocator.h ****       template<typename _Tp1>
 104:/usr/include/c++/5/bits/allocator.h ****         struct rebind
 105:/usr/include/c++/5/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
 106:/usr/include/c++/5/bits/allocator.h **** 
 107:/usr/include/c++/5/bits/allocator.h **** #if __cplusplus >= 201103L
 108:/usr/include/c++/5/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 109:/usr/include/c++/5/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 110:/usr/include/c++/5/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 111:/usr/include/c++/5/bits/allocator.h **** #endif
 112:/usr/include/c++/5/bits/allocator.h **** 
 113:/usr/include/c++/5/bits/allocator.h ****       allocator() throw() { }
 114:/usr/include/c++/5/bits/allocator.h **** 
 115:/usr/include/c++/5/bits/allocator.h ****       allocator(const allocator& __a) throw()
 116:/usr/include/c++/5/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 117:/usr/include/c++/5/bits/allocator.h **** 
 118:/usr/include/c++/5/bits/allocator.h ****       template<typename _Tp1>
 119:/usr/include/c++/5/bits/allocator.h ****         allocator(const allocator<_Tp1>&) throw() { }
 120:/usr/include/c++/5/bits/allocator.h **** 
 121:/usr/include/c++/5/bits/allocator.h ****       ~allocator() throw() { }
 2312              		.loc 7 121 0
 2313              		.cfi_startproc
 2314 0000 55       		pushq	%rbp
 2315              		.cfi_def_cfa_offset 16
 2316              		.cfi_offset 6, -16
 2317 0001 4889E5   		movq	%rsp, %rbp
 2318              		.cfi_def_cfa_register 6
 2319 0004 4883EC10 		subq	$16, %rsp
 2320 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2321              	.LBB23:
 2322              		.loc 7 121 0
 2323 000c 488B45F8 		movq	-8(%rbp), %rax
 2324 0010 4889C7   		movq	%rax, %rdi
 2325 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev@PLT
 2325      00
 2326              	.LBE23:
 2327 0018 90       		nop
 2328 0019 C9       		leave
 2329              		.cfi_def_cfa 7, 8
 2330 001a C3       		ret
 2331              		.cfi_endproc
 2332              	.LFE1482:
 2334              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEED1Ev
 2335              		.set	_ZNSaIN8UnitTest18DeferredTestResultEED1Ev,_ZNSaIN8UnitTest18DeferredTestResultEED2Ev
 2336              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m,"a
 2337              		.align 2
 2338              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m
 2340              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m:
 2341              	.LFB1484:
 174:/usr/include/c++/5/bits/stl_vector.h ****       {
 2342              		.loc 4 174 0
 2343              		.cfi_startproc
 2344 0000 55       		pushq	%rbp
 2345              		.cfi_def_cfa_offset 16
 2346              		.cfi_offset 6, -16
 2347 0001 4889E5   		movq	%rsp, %rbp
 2348              		.cfi_def_cfa_register 6
 2349 0004 4883EC20 		subq	$32, %rsp
 2350 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2351 000c 488975F0 		movq	%rsi, -16(%rbp)
 2352 0010 488955E8 		movq	%rdx, -24(%rbp)
 177:/usr/include/c++/5/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 2353              		.loc 4 177 0
 2354 0014 48837DF0 		cmpq	$0, -16(%rbp)
 2354      00
 2355 0019 7417     		je	.L120
 178:/usr/include/c++/5/bits/stl_vector.h ****       }
 2356              		.loc 4 178 0
 2357 001b 488B45F8 		movq	-8(%rbp), %rax
 2358 001f 488B55E8 		movq	-24(%rbp), %rdx
 2359 0023 488B4DF0 		movq	-16(%rbp), %rcx
 2360 0027 4889CE   		movq	%rcx, %rsi
 2361 002a 4889C7   		movq	%rax, %rdi
 2362 002d E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m@PLT
 2362      00
 2363              	.L120:
 179:/usr/include/c++/5/bits/stl_vector.h **** 
 2364              		.loc 4 179 0
 2365 0032 90       		nop
 2366 0033 C9       		leave
 2367              		.cfi_def_cfa 7, 8
 2368 0034 C3       		ret
 2369              		.cfi_endproc
 2370              	.LFE1484:
 2372              		.section	.text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_,"axG",@progbits,_ZSt8_Destroy
 2373              		.weak	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_
 2375              	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_:
 2376              	.LFB1485:
 122:/usr/include/c++/5/bits/stl_construct.h ****     {
 2377              		.loc 6 122 0
 2378              		.cfi_startproc
 2379 0000 55       		pushq	%rbp
 2380              		.cfi_def_cfa_offset 16
 2381              		.cfi_offset 6, -16
 2382 0001 4889E5   		movq	%rsp, %rbp
 2383              		.cfi_def_cfa_register 6
 2384 0004 4883EC10 		subq	$16, %rsp
 2385 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2386 000c 488975F0 		movq	%rsi, -16(%rbp)
 126:/usr/include/c++/5/bits/stl_construct.h **** 	__destroy(__first, __last);
 2387              		.loc 6 126 0
 2388 0010 488B55F0 		movq	-16(%rbp), %rdx
 2389 0014 488B45F8 		movq	-8(%rbp), %rax
 2390 0018 4889D6   		movq	%rdx, %rsi
 2391 001b 4889C7   		movq	%rax, %rdi
 2392 001e E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_@PLT
 2392      00
 128:/usr/include/c++/5/bits/stl_construct.h **** 
 2393              		.loc 6 128 0
 2394 0023 90       		nop
 2395 0024 C9       		leave
 2396              		.cfi_def_cfa 7, 8
 2397 0025 C3       		ret
 2398              		.cfi_endproc
 2399              	.LFE1485:
 2401              		.section	.text._ZNSaIN8UnitTest18DeferredTestResultEEC2Ev,"axG",@progbits,_ZNSaIN8UnitTest18Deferr
 2402              		.align 2
 2403              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev
 2405              	_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev:
 2406              	.LFB1497:
 113:/usr/include/c++/5/bits/allocator.h **** 
 2407              		.loc 7 113 0
 2408              		.cfi_startproc
 2409 0000 55       		pushq	%rbp
 2410              		.cfi_def_cfa_offset 16
 2411              		.cfi_offset 6, -16
 2412 0001 4889E5   		movq	%rsp, %rbp
 2413              		.cfi_def_cfa_register 6
 2414 0004 4883EC10 		subq	$16, %rsp
 2415 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2416              	.LBB24:
 113:/usr/include/c++/5/bits/allocator.h **** 
 2417              		.loc 7 113 0
 2418 000c 488B45F8 		movq	-8(%rbp), %rax
 2419 0010 4889C7   		movq	%rax, %rdi
 2420 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev@PLT
 2420      00
 2421              	.LBE24:
 2422 0018 90       		nop
 2423 0019 C9       		leave
 2424              		.cfi_def_cfa 7, 8
 2425 001a C3       		ret
 2426              		.cfi_endproc
 2427              	.LFE1497:
 2429              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEEC1Ev
 2430              		.set	_ZNSaIN8UnitTest18DeferredTestResultEEC1Ev,_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev
 2431              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev,"axG",@progbits,_
 2432              		.align 2
 2433              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev
 2435              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev:
 2436              	.LFB1500:
 2437              		.file 8 "/usr/include/c++/5/ext/new_allocator.h"
   1:/usr/include/c++/5/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/5/ext/new_allocator.h **** 
   3:/usr/include/c++/5/ext/new_allocator.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/ext/new_allocator.h **** //
   5:/usr/include/c++/5/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/5/ext/new_allocator.h **** 
  11:/usr/include/c++/5/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/ext/new_allocator.h **** 
  16:/usr/include/c++/5/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/ext/new_allocator.h **** 
  20:/usr/include/c++/5/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/ext/new_allocator.h **** 
  25:/usr/include/c++/5/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/5/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/5/ext/new_allocator.h ****  */
  28:/usr/include/c++/5/ext/new_allocator.h **** 
  29:/usr/include/c++/5/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/5/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/5/ext/new_allocator.h **** 
  32:/usr/include/c++/5/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/5/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/5/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/5/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/5/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/5/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/5/ext/new_allocator.h **** #endif
  39:/usr/include/c++/5/ext/new_allocator.h **** 
  40:/usr/include/c++/5/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/5/ext/new_allocator.h **** {
  42:/usr/include/c++/5/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/5/ext/new_allocator.h **** 
  44:/usr/include/c++/5/ext/new_allocator.h ****   using std::size_t;
  45:/usr/include/c++/5/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/usr/include/c++/5/ext/new_allocator.h **** 
  47:/usr/include/c++/5/ext/new_allocator.h ****   /**
  48:/usr/include/c++/5/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:/usr/include/c++/5/ext/new_allocator.h ****    *  @ingroup allocators
  50:/usr/include/c++/5/ext/new_allocator.h ****    *
  51:/usr/include/c++/5/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard. 
  52:/usr/include/c++/5/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/usr/include/c++/5/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  54:/usr/include/c++/5/ext/new_allocator.h ****    *
  55:/usr/include/c++/5/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/usr/include/c++/5/ext/new_allocator.h ****    */
  57:/usr/include/c++/5/ext/new_allocator.h ****   template<typename _Tp>
  58:/usr/include/c++/5/ext/new_allocator.h ****     class new_allocator
  59:/usr/include/c++/5/ext/new_allocator.h ****     {
  60:/usr/include/c++/5/ext/new_allocator.h ****     public:
  61:/usr/include/c++/5/ext/new_allocator.h ****       typedef size_t     size_type;
  62:/usr/include/c++/5/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/usr/include/c++/5/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/usr/include/c++/5/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/usr/include/c++/5/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/usr/include/c++/5/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/usr/include/c++/5/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/usr/include/c++/5/ext/new_allocator.h **** 
  69:/usr/include/c++/5/ext/new_allocator.h ****       template<typename _Tp1>
  70:/usr/include/c++/5/ext/new_allocator.h ****         struct rebind
  71:/usr/include/c++/5/ext/new_allocator.h ****         { typedef new_allocator<_Tp1> other; };
  72:/usr/include/c++/5/ext/new_allocator.h **** 
  73:/usr/include/c++/5/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/usr/include/c++/5/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/usr/include/c++/5/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/usr/include/c++/5/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/usr/include/c++/5/ext/new_allocator.h **** #endif
  78:/usr/include/c++/5/ext/new_allocator.h **** 
  79:/usr/include/c++/5/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/c++/5/ext/new_allocator.h **** 
  81:/usr/include/c++/5/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  82:/usr/include/c++/5/ext/new_allocator.h **** 
  83:/usr/include/c++/5/ext/new_allocator.h ****       template<typename _Tp1>
  84:/usr/include/c++/5/ext/new_allocator.h ****         new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  85:/usr/include/c++/5/ext/new_allocator.h **** 
  86:/usr/include/c++/5/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 2438              		.loc 8 86 0
 2439              		.cfi_startproc
 2440 0000 55       		pushq	%rbp
 2441              		.cfi_def_cfa_offset 16
 2442              		.cfi_offset 6, -16
 2443 0001 4889E5   		movq	%rsp, %rbp
 2444              		.cfi_def_cfa_register 6
 2445 0004 48897DF8 		movq	%rdi, -8(%rbp)
 2446              		.loc 8 86 0
 2447 0008 90       		nop
 2448 0009 5D       		popq	%rbp
 2449              		.cfi_def_cfa 7, 8
 2450 000a C3       		ret
 2451              		.cfi_endproc
 2452              	.LFE1500:
 2454              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED1Ev
 2455              		.set	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED1Ev,_ZN9__gnu_cxx13new_allocato
 2456              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_
 2457              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m
 2459              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m:
 2460              	.LFB1502:
 2461              		.file 9 "/usr/include/c++/5/ext/alloc_traits.h"
   1:/usr/include/c++/5/ext/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/c++/5/ext/alloc_traits.h **** 
   3:/usr/include/c++/5/ext/alloc_traits.h **** // Copyright (C) 2011-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/ext/alloc_traits.h **** //
   5:/usr/include/c++/5/ext/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/ext/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/ext/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/ext/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/ext/alloc_traits.h **** // any later version.
  10:/usr/include/c++/5/ext/alloc_traits.h **** 
  11:/usr/include/c++/5/ext/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/ext/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/ext/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/ext/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/ext/alloc_traits.h **** 
  16:/usr/include/c++/5/ext/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/ext/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/ext/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/ext/alloc_traits.h **** 
  20:/usr/include/c++/5/ext/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/ext/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/ext/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/ext/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/ext/alloc_traits.h **** 
  25:/usr/include/c++/5/ext/alloc_traits.h **** /** @file ext/alloc_traits.h
  26:/usr/include/c++/5/ext/alloc_traits.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/5/ext/alloc_traits.h ****  */
  28:/usr/include/c++/5/ext/alloc_traits.h **** 
  29:/usr/include/c++/5/ext/alloc_traits.h **** #ifndef _EXT_ALLOC_TRAITS_H
  30:/usr/include/c++/5/ext/alloc_traits.h **** #define _EXT_ALLOC_TRAITS_H 1
  31:/usr/include/c++/5/ext/alloc_traits.h **** 
  32:/usr/include/c++/5/ext/alloc_traits.h **** #pragma GCC system_header
  33:/usr/include/c++/5/ext/alloc_traits.h **** 
  34:/usr/include/c++/5/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  35:/usr/include/c++/5/ext/alloc_traits.h **** # include <bits/move.h>
  36:/usr/include/c++/5/ext/alloc_traits.h **** # include <bits/alloc_traits.h>
  37:/usr/include/c++/5/ext/alloc_traits.h **** #else
  38:/usr/include/c++/5/ext/alloc_traits.h **** # include <bits/allocator.h>  // for __alloc_swap
  39:/usr/include/c++/5/ext/alloc_traits.h **** #endif
  40:/usr/include/c++/5/ext/alloc_traits.h **** 
  41:/usr/include/c++/5/ext/alloc_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/5/ext/alloc_traits.h **** {
  43:/usr/include/c++/5/ext/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/5/ext/alloc_traits.h **** 
  45:/usr/include/c++/5/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  46:/usr/include/c++/5/ext/alloc_traits.h ****   template<typename _Alloc>
  47:/usr/include/c++/5/ext/alloc_traits.h ****     struct __allocator_always_compares_equal : std::false_type { };
  48:/usr/include/c++/5/ext/alloc_traits.h **** 
  49:/usr/include/c++/5/ext/alloc_traits.h ****   template<typename _Tp>
  50:/usr/include/c++/5/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<std::allocator<_Tp>>
  51:/usr/include/c++/5/ext/alloc_traits.h ****     : std::true_type { };
  52:/usr/include/c++/5/ext/alloc_traits.h **** 
  53:/usr/include/c++/5/ext/alloc_traits.h ****   template<typename, typename> struct array_allocator;
  54:/usr/include/c++/5/ext/alloc_traits.h **** 
  55:/usr/include/c++/5/ext/alloc_traits.h ****   template<typename _Tp, typename _Array>
  56:/usr/include/c++/5/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<array_allocator<_Tp, _Array>>
  57:/usr/include/c++/5/ext/alloc_traits.h ****     : std::true_type { };
  58:/usr/include/c++/5/ext/alloc_traits.h **** 
  59:/usr/include/c++/5/ext/alloc_traits.h ****   template<typename> struct bitmap_allocator;
  60:/usr/include/c++/5/ext/alloc_traits.h **** 
  61:/usr/include/c++/5/ext/alloc_traits.h ****   template<typename _Tp>
  62:/usr/include/c++/5/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<bitmap_allocator<_Tp>>
  63:/usr/include/c++/5/ext/alloc_traits.h ****     : std::true_type { };
  64:/usr/include/c++/5/ext/alloc_traits.h **** 
  65:/usr/include/c++/5/ext/alloc_traits.h ****   template<typename> struct malloc_allocator;
  66:/usr/include/c++/5/ext/alloc_traits.h **** 
  67:/usr/include/c++/5/ext/alloc_traits.h ****   template<typename _Tp>
  68:/usr/include/c++/5/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<malloc_allocator<_Tp>>
  69:/usr/include/c++/5/ext/alloc_traits.h ****     : std::true_type { };
  70:/usr/include/c++/5/ext/alloc_traits.h **** 
  71:/usr/include/c++/5/ext/alloc_traits.h ****   template<typename> struct mt_allocator;
  72:/usr/include/c++/5/ext/alloc_traits.h **** 
  73:/usr/include/c++/5/ext/alloc_traits.h ****   template<typename _Tp>
  74:/usr/include/c++/5/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<mt_allocator<_Tp>>
  75:/usr/include/c++/5/ext/alloc_traits.h ****     : std::true_type { };
  76:/usr/include/c++/5/ext/alloc_traits.h **** 
  77:/usr/include/c++/5/ext/alloc_traits.h ****   template<typename> struct new_allocator;
  78:/usr/include/c++/5/ext/alloc_traits.h **** 
  79:/usr/include/c++/5/ext/alloc_traits.h ****   template<typename _Tp>
  80:/usr/include/c++/5/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<new_allocator<_Tp>>
  81:/usr/include/c++/5/ext/alloc_traits.h ****     : std::true_type { };
  82:/usr/include/c++/5/ext/alloc_traits.h **** 
  83:/usr/include/c++/5/ext/alloc_traits.h ****   template<typename> struct pool_allocator;
  84:/usr/include/c++/5/ext/alloc_traits.h **** 
  85:/usr/include/c++/5/ext/alloc_traits.h ****   template<typename _Tp>
  86:/usr/include/c++/5/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<pool_allocator<_Tp>>
  87:/usr/include/c++/5/ext/alloc_traits.h ****     : std::true_type { };
  88:/usr/include/c++/5/ext/alloc_traits.h **** #endif
  89:/usr/include/c++/5/ext/alloc_traits.h **** 
  90:/usr/include/c++/5/ext/alloc_traits.h **** /**
  91:/usr/include/c++/5/ext/alloc_traits.h ****  * @brief  Uniform interface to C++98 and C++0x allocators.
  92:/usr/include/c++/5/ext/alloc_traits.h ****  * @ingroup allocators
  93:/usr/include/c++/5/ext/alloc_traits.h **** */
  94:/usr/include/c++/5/ext/alloc_traits.h **** template<typename _Alloc>
  95:/usr/include/c++/5/ext/alloc_traits.h ****   struct __alloc_traits
  96:/usr/include/c++/5/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  97:/usr/include/c++/5/ext/alloc_traits.h ****   : std::allocator_traits<_Alloc>
  98:/usr/include/c++/5/ext/alloc_traits.h **** #endif
  99:/usr/include/c++/5/ext/alloc_traits.h ****   {
 100:/usr/include/c++/5/ext/alloc_traits.h ****     typedef _Alloc allocator_type;
 101:/usr/include/c++/5/ext/alloc_traits.h **** #if __cplusplus >= 201103L
 102:/usr/include/c++/5/ext/alloc_traits.h ****     typedef std::allocator_traits<_Alloc>           _Base_type;
 103:/usr/include/c++/5/ext/alloc_traits.h ****     typedef typename _Base_type::value_type         value_type;
 104:/usr/include/c++/5/ext/alloc_traits.h ****     typedef typename _Base_type::pointer            pointer;
 105:/usr/include/c++/5/ext/alloc_traits.h ****     typedef typename _Base_type::const_pointer      const_pointer;
 106:/usr/include/c++/5/ext/alloc_traits.h ****     typedef typename _Base_type::size_type          size_type;
 107:/usr/include/c++/5/ext/alloc_traits.h ****     typedef typename _Base_type::difference_type    difference_type;
 108:/usr/include/c++/5/ext/alloc_traits.h ****     // C++11 allocators do not define reference or const_reference
 109:/usr/include/c++/5/ext/alloc_traits.h ****     typedef value_type&                             reference;
 110:/usr/include/c++/5/ext/alloc_traits.h ****     typedef const value_type&                       const_reference;
 111:/usr/include/c++/5/ext/alloc_traits.h ****     using _Base_type::allocate;
 112:/usr/include/c++/5/ext/alloc_traits.h ****     using _Base_type::deallocate;
 113:/usr/include/c++/5/ext/alloc_traits.h ****     using _Base_type::construct;
 114:/usr/include/c++/5/ext/alloc_traits.h ****     using _Base_type::destroy;
 115:/usr/include/c++/5/ext/alloc_traits.h ****     using _Base_type::max_size;
 116:/usr/include/c++/5/ext/alloc_traits.h **** 
 117:/usr/include/c++/5/ext/alloc_traits.h ****   private:
 118:/usr/include/c++/5/ext/alloc_traits.h ****     template<typename _Ptr>
 119:/usr/include/c++/5/ext/alloc_traits.h ****       using __is_custom_pointer
 120:/usr/include/c++/5/ext/alloc_traits.h **** 	= std::__and_<std::is_same<pointer, _Ptr>,
 121:/usr/include/c++/5/ext/alloc_traits.h **** 		      std::__not_<std::is_pointer<_Ptr>>>;
 122:/usr/include/c++/5/ext/alloc_traits.h **** 
 123:/usr/include/c++/5/ext/alloc_traits.h ****   public:
 124:/usr/include/c++/5/ext/alloc_traits.h ****     // overload construct for non-standard pointer types
 125:/usr/include/c++/5/ext/alloc_traits.h ****     template<typename _Ptr, typename... _Args>
 126:/usr/include/c++/5/ext/alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
 127:/usr/include/c++/5/ext/alloc_traits.h ****       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
 128:/usr/include/c++/5/ext/alloc_traits.h ****       {
 129:/usr/include/c++/5/ext/alloc_traits.h **** 	_Base_type::construct(__a, std::addressof(*__p),
 130:/usr/include/c++/5/ext/alloc_traits.h **** 			      std::forward<_Args>(__args)...);
 131:/usr/include/c++/5/ext/alloc_traits.h ****       }
 132:/usr/include/c++/5/ext/alloc_traits.h **** 
 133:/usr/include/c++/5/ext/alloc_traits.h ****     // overload destroy for non-standard pointer types
 134:/usr/include/c++/5/ext/alloc_traits.h ****     template<typename _Ptr>
 135:/usr/include/c++/5/ext/alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
 136:/usr/include/c++/5/ext/alloc_traits.h ****       destroy(_Alloc& __a, _Ptr __p)
 137:/usr/include/c++/5/ext/alloc_traits.h ****       { _Base_type::destroy(__a, std::addressof(*__p)); }
 138:/usr/include/c++/5/ext/alloc_traits.h **** 
 139:/usr/include/c++/5/ext/alloc_traits.h ****     static _Alloc _S_select_on_copy(const _Alloc& __a)
 140:/usr/include/c++/5/ext/alloc_traits.h ****     { return _Base_type::select_on_container_copy_construction(__a); }
 141:/usr/include/c++/5/ext/alloc_traits.h **** 
 142:/usr/include/c++/5/ext/alloc_traits.h ****     static void _S_on_swap(_Alloc& __a, _Alloc& __b)
 143:/usr/include/c++/5/ext/alloc_traits.h ****     { std::__alloc_on_swap(__a, __b); }
 144:/usr/include/c++/5/ext/alloc_traits.h **** 
 145:/usr/include/c++/5/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_copy_assign()
 146:/usr/include/c++/5/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_copy_assignment::value; }
 147:/usr/include/c++/5/ext/alloc_traits.h **** 
 148:/usr/include/c++/5/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_move_assign()
 149:/usr/include/c++/5/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_move_assignment::value; }
 150:/usr/include/c++/5/ext/alloc_traits.h **** 
 151:/usr/include/c++/5/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_swap()
 152:/usr/include/c++/5/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_swap::value; }
 153:/usr/include/c++/5/ext/alloc_traits.h **** 
 154:/usr/include/c++/5/ext/alloc_traits.h ****     static constexpr bool _S_always_equal()
 155:/usr/include/c++/5/ext/alloc_traits.h ****     { return __allocator_always_compares_equal<_Alloc>::value; }
 156:/usr/include/c++/5/ext/alloc_traits.h **** 
 157:/usr/include/c++/5/ext/alloc_traits.h ****     static constexpr bool _S_nothrow_move()
 158:/usr/include/c++/5/ext/alloc_traits.h ****     { return _S_propagate_on_move_assign() || _S_always_equal(); }
 159:/usr/include/c++/5/ext/alloc_traits.h **** 
 160:/usr/include/c++/5/ext/alloc_traits.h ****     static constexpr bool _S_nothrow_swap()
 161:/usr/include/c++/5/ext/alloc_traits.h ****     {
 162:/usr/include/c++/5/ext/alloc_traits.h ****       using std::swap;
 163:/usr/include/c++/5/ext/alloc_traits.h ****       return !_S_propagate_on_swap()
 164:/usr/include/c++/5/ext/alloc_traits.h ****        	|| noexcept(swap(std::declval<_Alloc&>(), std::declval<_Alloc&>()));
 165:/usr/include/c++/5/ext/alloc_traits.h ****     }
 166:/usr/include/c++/5/ext/alloc_traits.h **** 
 167:/usr/include/c++/5/ext/alloc_traits.h ****     template<typename _Tp>
 168:/usr/include/c++/5/ext/alloc_traits.h ****       struct rebind
 169:/usr/include/c++/5/ext/alloc_traits.h ****       { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
 170:/usr/include/c++/5/ext/alloc_traits.h **** #else
 171:/usr/include/c++/5/ext/alloc_traits.h **** 
 172:/usr/include/c++/5/ext/alloc_traits.h ****     typedef typename _Alloc::pointer                pointer;
 173:/usr/include/c++/5/ext/alloc_traits.h ****     typedef typename _Alloc::const_pointer          const_pointer;
 174:/usr/include/c++/5/ext/alloc_traits.h ****     typedef typename _Alloc::value_type             value_type;
 175:/usr/include/c++/5/ext/alloc_traits.h ****     typedef typename _Alloc::reference              reference;
 176:/usr/include/c++/5/ext/alloc_traits.h ****     typedef typename _Alloc::const_reference        const_reference;
 177:/usr/include/c++/5/ext/alloc_traits.h ****     typedef typename _Alloc::size_type              size_type;
 178:/usr/include/c++/5/ext/alloc_traits.h ****     typedef typename _Alloc::difference_type        difference_type;
 179:/usr/include/c++/5/ext/alloc_traits.h **** 
 180:/usr/include/c++/5/ext/alloc_traits.h ****     static pointer
 181:/usr/include/c++/5/ext/alloc_traits.h ****     allocate(_Alloc& __a, size_type __n)
 182:/usr/include/c++/5/ext/alloc_traits.h ****     { return __a.allocate(__n); }
 183:/usr/include/c++/5/ext/alloc_traits.h **** 
 184:/usr/include/c++/5/ext/alloc_traits.h ****     static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 2462              		.loc 9 184 0
 2463              		.cfi_startproc
 2464 0000 55       		pushq	%rbp
 2465              		.cfi_def_cfa_offset 16
 2466              		.cfi_offset 6, -16
 2467 0001 4889E5   		movq	%rsp, %rbp
 2468              		.cfi_def_cfa_register 6
 2469 0004 4883EC20 		subq	$32, %rsp
 2470 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2471 000c 488975F0 		movq	%rsi, -16(%rbp)
 2472 0010 488955E8 		movq	%rdx, -24(%rbp)
 185:/usr/include/c++/5/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 2473              		.loc 9 185 0
 2474 0014 488B55E8 		movq	-24(%rbp), %rdx
 2475 0018 488B4DF0 		movq	-16(%rbp), %rcx
 2476 001c 488B45F8 		movq	-8(%rbp), %rax
 2477 0020 4889CE   		movq	%rcx, %rsi
 2478 0023 4889C7   		movq	%rax, %rdi
 2479 0026 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m@PLT
 2479      00
 2480 002b 90       		nop
 2481 002c C9       		leave
 2482              		.cfi_def_cfa 7, 8
 2483 002d C3       		ret
 2484              		.cfi_endproc
 2485              	.LFE1502:
 2487              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_,"axG",
 2488              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_
 2490              	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_:
 2491              	.LFB1503:
 100:/usr/include/c++/5/bits/stl_construct.h **** 	{
 2492              		.loc 6 100 0
 2493              		.cfi_startproc
 2494 0000 55       		pushq	%rbp
 2495              		.cfi_def_cfa_offset 16
 2496              		.cfi_offset 6, -16
 2497 0001 4889E5   		movq	%rsp, %rbp
 2498              		.cfi_def_cfa_register 6
 2499 0004 4883EC10 		subq	$16, %rsp
 2500 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2501 000c 488975F0 		movq	%rsi, -16(%rbp)
 2502              	.L127:
 102:/usr/include/c++/5/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2503              		.loc 6 102 0 discriminator 2
 2504 0010 488B45F8 		movq	-8(%rbp), %rax
 2505 0014 483B45F0 		cmpq	-16(%rbp), %rax
 2506 0018 741B     		je	.L128
 103:/usr/include/c++/5/bits/stl_construct.h **** 	}
 2507              		.loc 6 103 0 discriminator 1
 2508 001a 488B45F8 		movq	-8(%rbp), %rax
 2509 001e 4889C7   		movq	%rax, %rdi
 2510 0021 E8000000 		call	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_@PLT
 2510      00
 2511 0026 4889C7   		movq	%rax, %rdi
 2512 0029 E8000000 		call	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_@PLT
 2512      00
 102:/usr/include/c++/5/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2513              		.loc 6 102 0 discriminator 1
 2514 002e 48836DF8 		subq	$-128, -8(%rbp)
 2514      80
 2515 0033 EBDB     		jmp	.L127
 2516              	.L128:
 104:/usr/include/c++/5/bits/stl_construct.h ****     };
 2517              		.loc 6 104 0
 2518 0035 90       		nop
 2519 0036 C9       		leave
 2520              		.cfi_def_cfa 7, 8
 2521 0037 C3       		ret
 2522              		.cfi_endproc
 2523              	.LFE1503:
 2525              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev,"axG",@progbits,_
 2526              		.align 2
 2527              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev
 2529              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev:
 2530              	.LFB1515:
  79:/usr/include/c++/5/ext/new_allocator.h **** 
 2531              		.loc 8 79 0
 2532              		.cfi_startproc
 2533 0000 55       		pushq	%rbp
 2534              		.cfi_def_cfa_offset 16
 2535              		.cfi_offset 6, -16
 2536 0001 4889E5   		movq	%rsp, %rbp
 2537              		.cfi_def_cfa_register 6
 2538 0004 48897DF8 		movq	%rdi, -8(%rbp)
  79:/usr/include/c++/5/ext/new_allocator.h **** 
 2539              		.loc 8 79 0
 2540 0008 90       		nop
 2541 0009 5D       		popq	%rbp
 2542              		.cfi_def_cfa 7, 8
 2543 000a C3       		ret
 2544              		.cfi_endproc
 2545              	.LFE1515:
 2547              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC1Ev
 2548              		.set	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC1Ev,_ZN9__gnu_cxx13new_allocato
 2549              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m,"ax
 2550              		.align 2
 2551              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m
 2553              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m:
 2554              	.LFB1517:
  87:/usr/include/c++/5/ext/new_allocator.h **** 
  88:/usr/include/c++/5/ext/new_allocator.h ****       pointer
  89:/usr/include/c++/5/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  90:/usr/include/c++/5/ext/new_allocator.h ****       { return std::__addressof(__x); }
  91:/usr/include/c++/5/ext/new_allocator.h **** 
  92:/usr/include/c++/5/ext/new_allocator.h ****       const_pointer
  93:/usr/include/c++/5/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  94:/usr/include/c++/5/ext/new_allocator.h ****       { return std::__addressof(__x); }
  95:/usr/include/c++/5/ext/new_allocator.h **** 
  96:/usr/include/c++/5/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  97:/usr/include/c++/5/ext/new_allocator.h ****       // about what the return value is when __n == 0.
  98:/usr/include/c++/5/ext/new_allocator.h ****       pointer
  99:/usr/include/c++/5/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
 100:/usr/include/c++/5/ext/new_allocator.h ****       { 
 101:/usr/include/c++/5/ext/new_allocator.h **** 	if (__n > this->max_size())
 102:/usr/include/c++/5/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 103:/usr/include/c++/5/ext/new_allocator.h **** 
 104:/usr/include/c++/5/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 105:/usr/include/c++/5/ext/new_allocator.h ****       }
 106:/usr/include/c++/5/ext/new_allocator.h **** 
 107:/usr/include/c++/5/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 108:/usr/include/c++/5/ext/new_allocator.h ****       void
 109:/usr/include/c++/5/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 2555              		.loc 8 109 0
 2556              		.cfi_startproc
 2557 0000 55       		pushq	%rbp
 2558              		.cfi_def_cfa_offset 16
 2559              		.cfi_offset 6, -16
 2560 0001 4889E5   		movq	%rsp, %rbp
 2561              		.cfi_def_cfa_register 6
 2562 0004 4883EC20 		subq	$32, %rsp
 2563 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2564 000c 488975F0 		movq	%rsi, -16(%rbp)
 2565 0010 488955E8 		movq	%rdx, -24(%rbp)
 110:/usr/include/c++/5/ext/new_allocator.h ****       { ::operator delete(__p); }
 2566              		.loc 8 110 0
 2567 0014 488B45F0 		movq	-16(%rbp), %rax
 2568 0018 4889C7   		movq	%rax, %rdi
 2569 001b E8000000 		call	_ZdlPv@PLT
 2569      00
 2570 0020 90       		nop
 2571 0021 C9       		leave
 2572              		.cfi_def_cfa 7, 8
 2573 0022 C3       		ret
 2574              		.cfi_endproc
 2575              	.LFE1517:
 2577              		.section	.text._ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_,"axG",@progbits,_ZSt11__a
 2578              		.weak	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_
 2580              	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_:
 2581              	.LFB1518:
 2582              		.file 10 "/usr/include/c++/5/bits/move.h"
   1:/usr/include/c++/5/bits/move.h **** // Move, forward and identity for C++0x + swap -*- C++ -*-
   2:/usr/include/c++/5/bits/move.h **** 
   3:/usr/include/c++/5/bits/move.h **** // Copyright (C) 2007-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/move.h **** //
   5:/usr/include/c++/5/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/move.h **** // any later version.
  10:/usr/include/c++/5/bits/move.h **** 
  11:/usr/include/c++/5/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/move.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/move.h **** 
  16:/usr/include/c++/5/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/move.h **** 
  20:/usr/include/c++/5/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/move.h **** 
  25:/usr/include/c++/5/bits/move.h **** /** @file bits/move.h
  26:/usr/include/c++/5/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/5/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/include/c++/5/bits/move.h ****  */
  29:/usr/include/c++/5/bits/move.h **** 
  30:/usr/include/c++/5/bits/move.h **** #ifndef _MOVE_H
  31:/usr/include/c++/5/bits/move.h **** #define _MOVE_H 1
  32:/usr/include/c++/5/bits/move.h **** 
  33:/usr/include/c++/5/bits/move.h **** #include <bits/c++config.h>
  34:/usr/include/c++/5/bits/move.h **** #include <bits/concept_check.h>
  35:/usr/include/c++/5/bits/move.h **** 
  36:/usr/include/c++/5/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/usr/include/c++/5/bits/move.h **** {
  38:/usr/include/c++/5/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/usr/include/c++/5/bits/move.h **** 
  40:/usr/include/c++/5/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/usr/include/c++/5/bits/move.h ****   /**
  42:/usr/include/c++/5/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/usr/include/c++/5/bits/move.h ****    *  @ingroup utilities
  44:/usr/include/c++/5/bits/move.h ****    */
  45:/usr/include/c++/5/bits/move.h ****   template<typename _Tp>
  46:/usr/include/c++/5/bits/move.h ****     inline _Tp*
  47:/usr/include/c++/5/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 2583              		.loc 10 47 0
 2584              		.cfi_startproc
 2585 0000 55       		pushq	%rbp
 2586              		.cfi_def_cfa_offset 16
 2587              		.cfi_offset 6, -16
 2588 0001 4889E5   		movq	%rsp, %rbp
 2589              		.cfi_def_cfa_register 6
 2590 0004 48897DF8 		movq	%rdi, -8(%rbp)
  48:/usr/include/c++/5/bits/move.h ****     {
  49:/usr/include/c++/5/bits/move.h ****       return reinterpret_cast<_Tp*>
  50:/usr/include/c++/5/bits/move.h **** 	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
 2591              		.loc 10 50 0
 2592 0008 488B45F8 		movq	-8(%rbp), %rax
  51:/usr/include/c++/5/bits/move.h ****     }
 2593              		.loc 10 51 0
 2594 000c 5D       		popq	%rbp
 2595              		.cfi_def_cfa 7, 8
 2596 000d C3       		ret
 2597              		.cfi_endproc
 2598              	.LFE1518:
 2600              		.section	.text._ZN8UnitTest18DeferredTestResultD2Ev,"axG",@progbits,_ZN8UnitTest18DeferredTestResu
 2601              		.align 2
 2602              		.weak	_ZN8UnitTest18DeferredTestResultD2Ev
 2604              	_ZN8UnitTest18DeferredTestResultD2Ev:
 2605              	.LFB1521:
 2606              		.file 11 "DeferredTestResult.h"
   1:DeferredTestResult.h **** #ifndef UNITTEST_DEFERREDTESTRESULT_H
   2:DeferredTestResult.h **** #define UNITTEST_DEFERREDTESTRESULT_H
   3:DeferredTestResult.h **** 
   4:DeferredTestResult.h **** #include <string>
   5:DeferredTestResult.h **** #include <vector>
   6:DeferredTestResult.h **** 
   7:DeferredTestResult.h **** namespace UnitTest
   8:DeferredTestResult.h **** {
   9:DeferredTestResult.h **** 
  10:DeferredTestResult.h **** struct DeferredTestResult
 2607              		.loc 11 10 0
 2608              		.cfi_startproc
 2609              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2610              		.cfi_lsda 0x1b,.LLSDA1521
 2611 0000 55       		pushq	%rbp
 2612              		.cfi_def_cfa_offset 16
 2613              		.cfi_offset 6, -16
 2614 0001 4889E5   		movq	%rsp, %rbp
 2615              		.cfi_def_cfa_register 6
 2616 0004 53       		pushq	%rbx
 2617 0005 4883EC18 		subq	$24, %rsp
 2618              		.cfi_offset 3, -24
 2619 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2620              	.LBB25:
 2621              		.loc 11 10 0
 2622 000d 488B45E8 		movq	-24(%rbp), %rax
 2623 0011 4883C060 		addq	$96, %rax
 2624 0015 4889C7   		movq	%rax, %rdi
 2625              	.LEHB37:
 2626 0018 E8000000 		call	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev@PLT
 2626      00
 2627              	.LEHE37:
 2628              		.loc 11 10 0 is_stmt 0 discriminator 2
 2629 001d 488B45E8 		movq	-24(%rbp), %rax
 2630 0021 4883C040 		addq	$64, %rax
 2631 0025 4889C7   		movq	%rax, %rdi
 2632              	.LEHB38:
 2633 0028 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2633      00
 2634              	.LEHE38:
 2635              		.loc 11 10 0 discriminator 4
 2636 002d 488B45E8 		movq	-24(%rbp), %rax
 2637 0031 4883C020 		addq	$32, %rax
 2638 0035 4889C7   		movq	%rax, %rdi
 2639              	.LEHB39:
 2640 0038 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2640      00
 2641              	.LEHE39:
 2642              		.loc 11 10 0 discriminator 6
 2643 003d 488B45E8 		movq	-24(%rbp), %rax
 2644 0041 4889C7   		movq	%rax, %rdi
 2645              	.LEHB40:
 2646 0044 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2646      00
 2647              	.LEHE40:
 2648              	.LBE25:
 2649 0049 EB44     		jmp	.L140
 2650              	.L137:
 2651 004b 4889C3   		movq	%rax, %rbx
 2652              	.LBB26:
 2653              		.loc 11 10 0
 2654 004e 488B45E8 		movq	-24(%rbp), %rax
 2655 0052 4883C040 		addq	$64, %rax
 2656 0056 4889C7   		movq	%rax, %rdi
 2657 0059 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2657      00
 2658 005e EB03     		jmp	.L135
 2659              	.L138:
 2660 0060 4889C3   		movq	%rax, %rbx
 2661              	.L135:
 2662              		.loc 11 10 0 discriminator 3
 2663 0063 488B45E8 		movq	-24(%rbp), %rax
 2664 0067 4883C020 		addq	$32, %rax
 2665 006b 4889C7   		movq	%rax, %rdi
 2666 006e E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2666      00
 2667 0073 EB03     		jmp	.L136
 2668              	.L139:
 2669 0075 4889C3   		movq	%rax, %rbx
 2670              	.L136:
 2671              		.loc 11 10 0 discriminator 5
 2672 0078 488B45E8 		movq	-24(%rbp), %rax
 2673 007c 4889C7   		movq	%rax, %rdi
 2674 007f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 2674      00
 2675 0084 4889D8   		movq	%rbx, %rax
 2676 0087 4889C7   		movq	%rax, %rdi
 2677              	.LEHB41:
 2678 008a E8000000 		call	_Unwind_Resume@PLT
 2678      00
 2679              	.LEHE41:
 2680              	.L140:
 2681              	.LBE26:
 2682              		.loc 11 10 0
 2683 008f 4883C418 		addq	$24, %rsp
 2684 0093 5B       		popq	%rbx
 2685 0094 5D       		popq	%rbp
 2686              		.cfi_def_cfa 7, 8
 2687 0095 C3       		ret
 2688              		.cfi_endproc
 2689              	.LFE1521:
 2690              		.section	.gcc_except_table
 2691              	.LLSDA1521:
 2692 00d9 FF       		.byte	0xff
 2693 00da FF       		.byte	0xff
 2694 00db 01       		.byte	0x1
 2695 00dc 15       		.uleb128 .LLSDACSE1521-.LLSDACSB1521
 2696              	.LLSDACSB1521:
 2697 00dd 18       		.uleb128 .LEHB37-.LFB1521
 2698 00de 05       		.uleb128 .LEHE37-.LEHB37
 2699 00df 4B       		.uleb128 .L137-.LFB1521
 2700 00e0 00       		.uleb128 0
 2701 00e1 28       		.uleb128 .LEHB38-.LFB1521
 2702 00e2 05       		.uleb128 .LEHE38-.LEHB38
 2703 00e3 60       		.uleb128 .L138-.LFB1521
 2704 00e4 00       		.uleb128 0
 2705 00e5 38       		.uleb128 .LEHB39-.LFB1521
 2706 00e6 05       		.uleb128 .LEHE39-.LEHB39
 2707 00e7 75       		.uleb128 .L139-.LFB1521
 2708 00e8 00       		.uleb128 0
 2709 00e9 44       		.uleb128 .LEHB40-.LFB1521
 2710 00ea 05       		.uleb128 .LEHE40-.LEHB40
 2711 00eb 00       		.uleb128 0
 2712 00ec 00       		.uleb128 0
 2713 00ed 8A01     		.uleb128 .LEHB41-.LFB1521
 2714 00ef 05       		.uleb128 .LEHE41-.LEHB41
 2715 00f0 00       		.uleb128 0
 2716 00f1 00       		.uleb128 0
 2717              	.LLSDACSE1521:
 2718              		.section	.text._ZN8UnitTest18DeferredTestResultD2Ev,"axG",@progbits,_ZN8UnitTest18DeferredTestResu
 2720              		.weak	_ZN8UnitTest18DeferredTestResultD1Ev
 2721              		.set	_ZN8UnitTest18DeferredTestResultD1Ev,_ZN8UnitTest18DeferredTestResultD2Ev
 2722              		.section	.text._ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_,"axG",@progbits,_ZSt8_DestroyIN8
 2723              		.weak	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_
 2725              	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_:
 2726              	.LFB1519:
  92:/usr/include/c++/5/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 2727              		.loc 6 92 0 is_stmt 1
 2728              		.cfi_startproc
 2729 0000 55       		pushq	%rbp
 2730              		.cfi_def_cfa_offset 16
 2731              		.cfi_offset 6, -16
 2732 0001 4889E5   		movq	%rsp, %rbp
 2733              		.cfi_def_cfa_register 6
 2734 0004 4883EC10 		subq	$16, %rsp
 2735 0008 48897DF8 		movq	%rdi, -8(%rbp)
  93:/usr/include/c++/5/bits/stl_construct.h **** 
 2736              		.loc 6 93 0
 2737 000c 488B45F8 		movq	-8(%rbp), %rax
 2738 0010 4889C7   		movq	%rax, %rdi
 2739 0013 E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 2739      00
 2740 0018 90       		nop
 2741 0019 C9       		leave
 2742              		.cfi_def_cfa 7, 8
 2743 001a C3       		ret
 2744              		.cfi_endproc
 2745              	.LFE1519:
 2747              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 2748              		.align 2
 2749              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev
 2751              	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:
 2752              	.LFB1529:
 423:/usr/include/c++/5/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 2753              		.loc 4 423 0
 2754              		.cfi_startproc
 2755              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2756              		.cfi_lsda 0x1b,.LLSDA1529
 2757 0000 55       		pushq	%rbp
 2758              		.cfi_def_cfa_offset 16
 2759              		.cfi_offset 6, -16
 2760 0001 4889E5   		movq	%rsp, %rbp
 2761              		.cfi_def_cfa_register 6
 2762 0004 53       		pushq	%rbx
 2763 0005 4883EC18 		subq	$24, %rsp
 2764              		.cfi_offset 3, -24
 2765 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2766              	.LBB27:
 425:/usr/include/c++/5/bits/stl_vector.h **** 
 2767              		.loc 4 425 0
 2768 000d 488B45E8 		movq	-24(%rbp), %rax
 2769 0011 4889C7   		movq	%rax, %rdi
 2770 0014 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_
 2770      00
 2771 0019 4889C2   		movq	%rax, %rdx
 424:/usr/include/c++/5/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 2772              		.loc 4 424 0
 2773 001c 488B45E8 		movq	-24(%rbp), %rax
 2774 0020 488B4808 		movq	8(%rax), %rcx
 2775 0024 488B45E8 		movq	-24(%rbp), %rax
 2776 0028 488B00   		movq	(%rax), %rax
 2777 002b 4889CE   		movq	%rcx, %rsi
 2778 002e 4889C7   		movq	%rax, %rdi
 2779              	.LEHB42:
 2780 0031 E8000000 		call	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0
 2780      00
 2781              	.LEHE42:
 425:/usr/include/c++/5/bits/stl_vector.h **** 
 2782              		.loc 4 425 0
 2783 0036 488B45E8 		movq	-24(%rbp), %rax
 2784 003a 4889C7   		movq	%rax, %rdi
 2785              	.LEHB43:
 2786 003d E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2E
 2786      00
 2787              	.LEHE43:
 2788              	.LBE27:
 2789 0042 EB1A     		jmp	.L145
 2790              	.L144:
 2791 0044 4889C3   		movq	%rax, %rbx
 2792              	.LBB28:
 2793 0047 488B45E8 		movq	-24(%rbp), %rax
 2794 004b 4889C7   		movq	%rax, %rdi
 2795 004e E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2E
 2795      00
 2796 0053 4889D8   		movq	%rbx, %rax
 2797 0056 4889C7   		movq	%rax, %rdi
 2798              	.LEHB44:
 2799 0059 E8000000 		call	_Unwind_Resume@PLT
 2799      00
 2800              	.LEHE44:
 2801              	.L145:
 2802              	.LBE28:
 2803 005e 4883C418 		addq	$24, %rsp
 2804 0062 5B       		popq	%rbx
 2805 0063 5D       		popq	%rbp
 2806              		.cfi_def_cfa 7, 8
 2807 0064 C3       		ret
 2808              		.cfi_endproc
 2809              	.LFE1529:
 2810              		.section	.gcc_except_table
 2811              	.LLSDA1529:
 2812 00f2 FF       		.byte	0xff
 2813 00f3 FF       		.byte	0xff
 2814 00f4 01       		.byte	0x1
 2815 00f5 0C       		.uleb128 .LLSDACSE1529-.LLSDACSB1529
 2816              	.LLSDACSB1529:
 2817 00f6 31       		.uleb128 .LEHB42-.LFB1529
 2818 00f7 05       		.uleb128 .LEHE42-.LEHB42
 2819 00f8 44       		.uleb128 .L144-.LFB1529
 2820 00f9 00       		.uleb128 0
 2821 00fa 3D       		.uleb128 .LEHB43-.LFB1529
 2822 00fb 05       		.uleb128 .LEHE43-.LEHB43
 2823 00fc 00       		.uleb128 0
 2824 00fd 00       		.uleb128 0
 2825 00fe 59       		.uleb128 .LEHB44-.LFB1529
 2826 00ff 05       		.uleb128 .LEHE44-.LEHB44
 2827 0100 00       		.uleb128 0
 2828 0101 00       		.uleb128 0
 2829              	.LLSDACSE1529:
 2830              		.section	.text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE
 2832              		.weak	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev
 2833              		.set	_ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev,_ZNSt
 2834              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 2835              		.align 2
 2836              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12
 2838              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector
 2839              	.LFB1533:
  79:/usr/include/c++/5/bits/stl_vector.h ****       : public _Tp_alloc_type
 2840              		.loc 4 79 0
 2841              		.cfi_startproc
 2842 0000 55       		pushq	%rbp
 2843              		.cfi_def_cfa_offset 16
 2844              		.cfi_offset 6, -16
 2845 0001 4889E5   		movq	%rsp, %rbp
 2846              		.cfi_def_cfa_register 6
 2847 0004 4883EC10 		subq	$16, %rsp
 2848 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2849              	.LBB29:
  79:/usr/include/c++/5/bits/stl_vector.h ****       : public _Tp_alloc_type
 2850              		.loc 4 79 0
 2851 000c 488B45F8 		movq	-8(%rbp), %rax
 2852 0010 4889C7   		movq	%rax, %rdi
 2853 0013 E8000000 		call	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev@PLT
 2853      00
 2854              	.LBE29:
 2855 0018 90       		nop
 2856 0019 C9       		leave
 2857              		.cfi_def_cfa 7, 8
 2858 001a C3       		ret
 2859              		.cfi_endproc
 2860              	.LFE1533:
 2862              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12
 2863              		.set	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 2864              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 2865              		.align 2
 2866              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2
 2868              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:
 2869              	.LFB1535:
 159:/usr/include/c++/5/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 2870              		.loc 4 159 0
 2871              		.cfi_startproc
 2872              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2873              		.cfi_lsda 0x1b,.LLSDA1535
 2874 0000 55       		pushq	%rbp
 2875              		.cfi_def_cfa_offset 16
 2876              		.cfi_offset 6, -16
 2877 0001 4889E5   		movq	%rsp, %rbp
 2878              		.cfi_def_cfa_register 6
 2879 0004 53       		pushq	%rbx
 2880 0005 4883EC18 		subq	$24, %rsp
 2881              		.cfi_offset 3, -24
 2882 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2883              	.LBB30:
 161:/usr/include/c++/5/bits/stl_vector.h **** 
 2884              		.loc 4 161 0
 2885 000d 488B45E8 		movq	-24(%rbp), %rax
 2886 0011 488B4010 		movq	16(%rax), %rax
 160:/usr/include/c++/5/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 2887              		.loc 4 160 0
 2888 0015 4889C2   		movq	%rax, %rdx
 161:/usr/include/c++/5/bits/stl_vector.h **** 
 2889              		.loc 4 161 0
 2890 0018 488B45E8 		movq	-24(%rbp), %rax
 2891 001c 488B00   		movq	(%rax), %rax
 160:/usr/include/c++/5/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 2892              		.loc 4 160 0
 2893 001f 4829C2   		subq	%rax, %rdx
 2894 0022 4889D0   		movq	%rdx, %rax
 2895 0025 48C1F803 		sarq	$3, %rax
 2896 0029 4889C2   		movq	%rax, %rdx
 2897 002c 48B8CDCC 		movabsq	$-3689348814741910323, %rax
 2897      CCCCCCCC 
 2897      CCCC
 2898 0036 480FAFC2 		imulq	%rdx, %rax
 2899 003a 4889C2   		movq	%rax, %rdx
 2900 003d 488B45E8 		movq	-24(%rbp), %rax
 2901 0041 488B08   		movq	(%rax), %rcx
 2902 0044 488B45E8 		movq	-24(%rbp), %rax
 2903 0048 4889CE   		movq	%rcx, %rsi
 2904 004b 4889C7   		movq	%rax, %rdi
 2905              	.LEHB45:
 2906 004e E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_
 2906      00
 2907              	.LEHE45:
 161:/usr/include/c++/5/bits/stl_vector.h **** 
 2908              		.loc 4 161 0
 2909 0053 488B45E8 		movq	-24(%rbp), %rax
 2910 0057 4889C7   		movq	%rax, %rdi
 2911 005a E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 2911      00
 2912              	.LBE30:
 2913 005f EB1A     		jmp	.L150
 2914              	.L149:
 2915 0061 4889C3   		movq	%rax, %rbx
 2916              	.LBB31:
 2917 0064 488B45E8 		movq	-24(%rbp), %rax
 2918 0068 4889C7   		movq	%rax, %rdi
 2919 006b E8000000 		call	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_
 2919      00
 2920 0070 4889D8   		movq	%rbx, %rax
 2921 0073 4889C7   		movq	%rax, %rdi
 2922              	.LEHB46:
 2923 0076 E8000000 		call	_Unwind_Resume@PLT
 2923      00
 2924              	.LEHE46:
 2925              	.L150:
 2926              	.LBE31:
 2927 007b 4883C418 		addq	$24, %rsp
 2928 007f 5B       		popq	%rbx
 2929 0080 5D       		popq	%rbp
 2930              		.cfi_def_cfa 7, 8
 2931 0081 C3       		ret
 2932              		.cfi_endproc
 2933              	.LFE1535:
 2934              		.section	.gcc_except_table
 2935              	.LLSDA1535:
 2936 0102 FF       		.byte	0xff
 2937 0103 FF       		.byte	0xff
 2938 0104 01       		.byte	0x1
 2939 0105 08       		.uleb128 .LLSDACSE1535-.LLSDACSB1535
 2940              	.LLSDACSB1535:
 2941 0106 4E       		.uleb128 .LEHB45-.LFB1535
 2942 0107 05       		.uleb128 .LEHE45-.LEHB45
 2943 0108 61       		.uleb128 .L149-.LFB1535
 2944 0109 00       		.uleb128 0
 2945 010a 76       		.uleb128 .LEHB46-.LFB1535
 2946 010b 05       		.uleb128 .LEHE46-.LEHB46
 2947 010c 00       		.uleb128 0
 2948 010d 00       		.uleb128 0
 2949              	.LLSDACSE1535:
 2950              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 2952              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1
 2953              		.set	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1E
 2954              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 2955              		.align 2
 2956              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19
 2958              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_
 2959              	.LFB1537:
 113:/usr/include/c++/5/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 2960              		.loc 4 113 0
 2961              		.cfi_startproc
 2962 0000 55       		pushq	%rbp
 2963              		.cfi_def_cfa_offset 16
 2964              		.cfi_offset 6, -16
 2965 0001 4889E5   		movq	%rsp, %rbp
 2966              		.cfi_def_cfa_register 6
 2967 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/5/bits/stl_vector.h **** 
 2968              		.loc 4 114 0
 2969 0008 488B45F8 		movq	-8(%rbp), %rax
 2970 000c 5D       		popq	%rbp
 2971              		.cfi_def_cfa 7, 8
 2972 000d C3       		ret
 2973              		.cfi_endproc
 2974              	.LFE1537:
 2976              		.section	.text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT
 2977              		.weak	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT
 2979              	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0_E:
 2980              	.LFB1538:
 148:/usr/include/c++/5/bits/stl_construct.h **** 	     allocator<_Tp>&)
 2981              		.loc 6 148 0
 2982              		.cfi_startproc
 2983 0000 55       		pushq	%rbp
 2984              		.cfi_def_cfa_offset 16
 2985              		.cfi_offset 6, -16
 2986 0001 4889E5   		movq	%rsp, %rbp
 2987              		.cfi_def_cfa_register 6
 2988 0004 4883EC20 		subq	$32, %rsp
 2989 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2990 000c 488975F0 		movq	%rsi, -16(%rbp)
 2991 0010 488955E8 		movq	%rdx, -24(%rbp)
 151:/usr/include/c++/5/bits/stl_construct.h ****     }
 2992              		.loc 6 151 0
 2993 0014 488B55F0 		movq	-16(%rbp), %rdx
 2994 0018 488B45F8 		movq	-8(%rbp), %rax
 2995 001c 4889D6   		movq	%rdx, %rsi
 2996 001f 4889C7   		movq	%rax, %rdi
 2997 0022 E8000000 		call	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_@PLT
 2997      00
 2998              		.loc 6 152 0
 2999 0027 90       		nop
 3000 0028 C9       		leave
 3001              		.cfi_def_cfa 7, 8
 3002 0029 C3       		ret
 3003              		.cfi_endproc
 3004              	.LFE1538:
 3006              		.section	.text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev,"axG",@pr
 3007              		.align 2
 3008              		.weak	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev
 3010              	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:
 3011              	.LFB1540:
 3012              		.loc 7 121 0
 3013              		.cfi_startproc
 3014 0000 55       		pushq	%rbp
 3015              		.cfi_def_cfa_offset 16
 3016              		.cfi_offset 6, -16
 3017 0001 4889E5   		movq	%rsp, %rbp
 3018              		.cfi_def_cfa_register 6
 3019 0004 4883EC10 		subq	$16, %rsp
 3020 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3021              	.LBB32:
 3022              		.loc 7 121 0
 3023 000c 488B45F8 		movq	-8(%rbp), %rax
 3024 0010 4889C7   		movq	%rax, %rdi
 3025 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED
 3025      00
 3026              	.LBE32:
 3027 0018 90       		nop
 3028 0019 C9       		leave
 3029              		.cfi_def_cfa 7, 8
 3030 001a C3       		ret
 3031              		.cfi_endproc
 3032              	.LFE1540:
 3034              		.weak	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev
 3035              		.set	_ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev,_ZNSaISt4pairIiNSt7
 3036              		.section	.text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES
 3037              		.align 2
 3038              		.weak	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13
 3040              	_ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_M_deal
 3041              	.LFB1542:
 174:/usr/include/c++/5/bits/stl_vector.h ****       {
 3042              		.loc 4 174 0
 3043              		.cfi_startproc
 3044 0000 55       		pushq	%rbp
 3045              		.cfi_def_cfa_offset 16
 3046              		.cfi_offset 6, -16
 3047 0001 4889E5   		movq	%rsp, %rbp
 3048              		.cfi_def_cfa_register 6
 3049 0004 4883EC20 		subq	$32, %rsp
 3050 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3051 000c 488975F0 		movq	%rsi, -16(%rbp)
 3052 0010 488955E8 		movq	%rdx, -24(%rbp)
 177:/usr/include/c++/5/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 3053              		.loc 4 177 0
 3054 0014 48837DF0 		cmpq	$0, -16(%rbp)
 3054      00
 3055 0019 7417     		je	.L157
 178:/usr/include/c++/5/bits/stl_vector.h ****       }
 3056              		.loc 4 178 0
 3057 001b 488B45F8 		movq	-8(%rbp), %rax
 3058 001f 488B55E8 		movq	-24(%rbp), %rdx
 3059 0023 488B4DF0 		movq	-16(%rbp), %rcx
 3060 0027 4889CE   		movq	%rcx, %rsi
 3061 002a 4889C7   		movq	%rax, %rdi
 3062 002d E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE
 3062      00
 3063              	.L157:
 179:/usr/include/c++/5/bits/stl_vector.h **** 
 3064              		.loc 4 179 0
 3065 0032 90       		nop
 3066 0033 C9       		leave
 3067              		.cfi_def_cfa 7, 8
 3068 0034 C3       		ret
 3069              		.cfi_endproc
 3070              	.LFE1542:
 3072              		.section	.text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9
 3073              		.weak	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_
 3075              	_ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_:
 3076              	.LFB1543:
 122:/usr/include/c++/5/bits/stl_construct.h ****     {
 3077              		.loc 6 122 0
 3078              		.cfi_startproc
 3079 0000 55       		pushq	%rbp
 3080              		.cfi_def_cfa_offset 16
 3081              		.cfi_offset 6, -16
 3082 0001 4889E5   		movq	%rsp, %rbp
 3083              		.cfi_def_cfa_register 6
 3084 0004 4883EC10 		subq	$16, %rsp
 3085 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3086 000c 488975F0 		movq	%rsi, -16(%rbp)
 126:/usr/include/c++/5/bits/stl_construct.h **** 	__destroy(__first, __last);
 3087              		.loc 6 126 0
 3088 0010 488B55F0 		movq	-16(%rbp), %rdx
 3089 0014 488B45F8 		movq	-8(%rbp), %rax
 3090 0018 4889D6   		movq	%rdx, %rsi
 3091 001b 4889C7   		movq	%rax, %rdi
 3092 001e E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESa
 3092      00
 128:/usr/include/c++/5/bits/stl_construct.h **** 
 3093              		.loc 6 128 0
 3094 0023 90       		nop
 3095 0024 C9       		leave
 3096              		.cfi_def_cfa 7, 8
 3097 0025 C3       		ret
 3098              		.cfi_endproc
 3099              	.LFE1543:
 3101              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 3102              		.align 2
 3103              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 3105              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:
 3106              	.LFB1545:
  86:/usr/include/c++/5/ext/new_allocator.h **** 
 3107              		.loc 8 86 0
 3108              		.cfi_startproc
 3109 0000 55       		pushq	%rbp
 3110              		.cfi_def_cfa_offset 16
 3111              		.cfi_offset 6, -16
 3112 0001 4889E5   		movq	%rsp, %rbp
 3113              		.cfi_def_cfa_register 6
 3114 0004 48897DF8 		movq	%rdi, -8(%rbp)
  86:/usr/include/c++/5/ext/new_allocator.h **** 
 3115              		.loc 8 86 0
 3116 0008 90       		nop
 3117 0009 5D       		popq	%rbp
 3118              		.cfi_def_cfa 7, 8
 3119 000a C3       		ret
 3120              		.cfi_endproc
 3121              	.LFE1545:
 3123              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 3124              		.set	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED
 3125              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_trait
 3126              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 3128              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10
 3129              	.LFB1547:
 184:/usr/include/c++/5/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 3130              		.loc 9 184 0
 3131              		.cfi_startproc
 3132 0000 55       		pushq	%rbp
 3133              		.cfi_def_cfa_offset 16
 3134              		.cfi_offset 6, -16
 3135 0001 4889E5   		movq	%rsp, %rbp
 3136              		.cfi_def_cfa_register 6
 3137 0004 4883EC20 		subq	$32, %rsp
 3138 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3139 000c 488975F0 		movq	%rsi, -16(%rbp)
 3140 0010 488955E8 		movq	%rdx, -24(%rbp)
 3141              		.loc 9 185 0
 3142 0014 488B55E8 		movq	-24(%rbp), %rdx
 3143 0018 488B4DF0 		movq	-16(%rbp), %rcx
 3144 001c 488B45F8 		movq	-8(%rbp), %rax
 3145 0020 4889CE   		movq	%rcx, %rsi
 3146 0023 4889C7   		movq	%rax, %rdi
 3147 0026 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE1
 3147      00
 3148 002b 90       		nop
 3149 002c C9       		leave
 3150              		.cfi_def_cfa 7, 8
 3151 002d C3       		ret
 3152              		.cfi_endproc
 3153              	.LFE1547:
 3155              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_t
 3156              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcES
 3158              	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE
 3159              	.LFB1548:
 100:/usr/include/c++/5/bits/stl_construct.h **** 	{
 3160              		.loc 6 100 0
 3161              		.cfi_startproc
 3162 0000 55       		pushq	%rbp
 3163              		.cfi_def_cfa_offset 16
 3164              		.cfi_offset 6, -16
 3165 0001 4889E5   		movq	%rsp, %rbp
 3166              		.cfi_def_cfa_register 6
 3167 0004 4883EC10 		subq	$16, %rsp
 3168 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3169 000c 488975F0 		movq	%rsi, -16(%rbp)
 3170              	.L163:
 102:/usr/include/c++/5/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3171              		.loc 6 102 0 discriminator 2
 3172 0010 488B45F8 		movq	-8(%rbp), %rax
 3173 0014 483B45F0 		cmpq	-16(%rbp), %rax
 3174 0018 741B     		je	.L164
 103:/usr/include/c++/5/bits/stl_construct.h **** 	}
 3175              		.loc 6 103 0 discriminator 1
 3176 001a 488B45F8 		movq	-8(%rbp), %rax
 3177 001e 4889C7   		movq	%rax, %rdi
 3178 0021 E8000000 		call	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_@PLT
 3178      00
 3179 0026 4889C7   		movq	%rax, %rdi
 3180 0029 E8000000 		call	_ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_@PLT
 3180      00
 102:/usr/include/c++/5/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3181              		.loc 6 102 0 discriminator 1
 3182 002e 488345F8 		addq	$40, -8(%rbp)
 3182      28
 3183 0033 EBDB     		jmp	.L163
 3184              	.L164:
 104:/usr/include/c++/5/bits/stl_construct.h ****     };
 3185              		.loc 6 104 0
 3186 0035 90       		nop
 3187 0036 C9       		leave
 3188              		.cfi_def_cfa 7, 8
 3189 0037 C3       		ret
 3190              		.cfi_endproc
 3191              	.LFE1548:
 3193              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcE
 3194              		.align 2
 3195              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
 3197              	_ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deall
 3198              	.LFB1549:
 109:/usr/include/c++/5/ext/new_allocator.h ****       { ::operator delete(__p); }
 3199              		.loc 8 109 0
 3200              		.cfi_startproc
 3201 0000 55       		pushq	%rbp
 3202              		.cfi_def_cfa_offset 16
 3203              		.cfi_offset 6, -16
 3204 0001 4889E5   		movq	%rsp, %rbp
 3205              		.cfi_def_cfa_register 6
 3206 0004 4883EC20 		subq	$32, %rsp
 3207 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3208 000c 488975F0 		movq	%rsi, -16(%rbp)
 3209 0010 488955E8 		movq	%rdx, -24(%rbp)
 3210              		.loc 8 110 0
 3211 0014 488B45F0 		movq	-16(%rbp), %rax
 3212 0018 4889C7   		movq	%rax, %rdi
 3213 001b E8000000 		call	_ZdlPv@PLT
 3213      00
 3214 0020 90       		nop
 3215 0021 C9       		leave
 3216              		.cfi_def_cfa 7, 8
 3217 0022 C3       		ret
 3218              		.cfi_endproc
 3219              	.LFE1549:
 3221              		.section	.text._ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT
 3222              		.weak	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_
 3224              	_ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_:
 3225              	.LFB1550:
  47:/usr/include/c++/5/bits/move.h ****     {
 3226              		.loc 10 47 0
 3227              		.cfi_startproc
 3228 0000 55       		pushq	%rbp
 3229              		.cfi_def_cfa_offset 16
 3230              		.cfi_offset 6, -16
 3231 0001 4889E5   		movq	%rsp, %rbp
 3232              		.cfi_def_cfa_register 6
 3233 0004 48897DF8 		movq	%rdi, -8(%rbp)
  50:/usr/include/c++/5/bits/move.h ****     }
 3234              		.loc 10 50 0
 3235 0008 488B45F8 		movq	-8(%rbp), %rax
 3236              		.loc 10 51 0
 3237 000c 5D       		popq	%rbp
 3238              		.cfi_def_cfa 7, 8
 3239 000d C3       		ret
 3240              		.cfi_endproc
 3241              	.LFE1550:
 3243              		.section	.text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev,"axG",@progbi
 3244              		.align 2
 3245              		.weak	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev
 3247              	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
 3248              	.LFB1553:
 3249              		.file 12 "/usr/include/c++/5/bits/stl_pair.h"
   1:/usr/include/c++/5/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/usr/include/c++/5/bits/stl_pair.h **** 
   3:/usr/include/c++/5/bits/stl_pair.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/stl_pair.h **** //
   5:/usr/include/c++/5/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/stl_pair.h **** // any later version.
  10:/usr/include/c++/5/bits/stl_pair.h **** 
  11:/usr/include/c++/5/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/stl_pair.h **** 
  16:/usr/include/c++/5/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/stl_pair.h **** 
  20:/usr/include/c++/5/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/stl_pair.h **** 
  25:/usr/include/c++/5/bits/stl_pair.h **** /*
  26:/usr/include/c++/5/bits/stl_pair.h ****  *
  27:/usr/include/c++/5/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/usr/include/c++/5/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/5/bits/stl_pair.h ****  *
  30:/usr/include/c++/5/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/5/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/5/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/5/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/5/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/5/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/5/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/5/bits/stl_pair.h ****  *
  38:/usr/include/c++/5/bits/stl_pair.h ****  *
  39:/usr/include/c++/5/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/5/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/5/bits/stl_pair.h ****  *
  42:/usr/include/c++/5/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/5/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/5/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/5/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/5/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/5/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/5/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/5/bits/stl_pair.h ****  */
  50:/usr/include/c++/5/bits/stl_pair.h **** 
  51:/usr/include/c++/5/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/usr/include/c++/5/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/5/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/usr/include/c++/5/bits/stl_pair.h ****  */
  55:/usr/include/c++/5/bits/stl_pair.h **** 
  56:/usr/include/c++/5/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/usr/include/c++/5/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/usr/include/c++/5/bits/stl_pair.h **** 
  59:/usr/include/c++/5/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/usr/include/c++/5/bits/stl_pair.h **** 
  61:/usr/include/c++/5/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/usr/include/c++/5/bits/stl_pair.h **** #include <type_traits> // for std::__decay_and_strip too
  63:/usr/include/c++/5/bits/stl_pair.h **** #endif
  64:/usr/include/c++/5/bits/stl_pair.h **** 
  65:/usr/include/c++/5/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  66:/usr/include/c++/5/bits/stl_pair.h **** {
  67:/usr/include/c++/5/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  68:/usr/include/c++/5/bits/stl_pair.h **** 
  69:/usr/include/c++/5/bits/stl_pair.h ****   /**
  70:/usr/include/c++/5/bits/stl_pair.h ****    *  @addtogroup utilities
  71:/usr/include/c++/5/bits/stl_pair.h ****    *  @{
  72:/usr/include/c++/5/bits/stl_pair.h ****    */
  73:/usr/include/c++/5/bits/stl_pair.h **** 
  74:/usr/include/c++/5/bits/stl_pair.h **** #if __cplusplus >= 201103L
  75:/usr/include/c++/5/bits/stl_pair.h ****   /// piecewise_construct_t
  76:/usr/include/c++/5/bits/stl_pair.h ****   struct piecewise_construct_t { };
  77:/usr/include/c++/5/bits/stl_pair.h **** 
  78:/usr/include/c++/5/bits/stl_pair.h ****   /// piecewise_construct
  79:/usr/include/c++/5/bits/stl_pair.h ****   constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();
  80:/usr/include/c++/5/bits/stl_pair.h **** 
  81:/usr/include/c++/5/bits/stl_pair.h ****   // Forward declarations.
  82:/usr/include/c++/5/bits/stl_pair.h ****   template<typename...>
  83:/usr/include/c++/5/bits/stl_pair.h ****     class tuple;
  84:/usr/include/c++/5/bits/stl_pair.h **** 
  85:/usr/include/c++/5/bits/stl_pair.h ****   template<std::size_t...>
  86:/usr/include/c++/5/bits/stl_pair.h ****     struct _Index_tuple;
  87:/usr/include/c++/5/bits/stl_pair.h **** #endif
  88:/usr/include/c++/5/bits/stl_pair.h **** 
  89:/usr/include/c++/5/bits/stl_pair.h ****  /**
  90:/usr/include/c++/5/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
  91:/usr/include/c++/5/bits/stl_pair.h ****    *
  92:/usr/include/c++/5/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
  93:/usr/include/c++/5/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
  94:/usr/include/c++/5/bits/stl_pair.h ****    */
  95:/usr/include/c++/5/bits/stl_pair.h ****   template<class _T1, class _T2>
  96:/usr/include/c++/5/bits/stl_pair.h ****     struct pair
 3250              		.loc 12 96 0
 3251              		.cfi_startproc
 3252 0000 55       		pushq	%rbp
 3253              		.cfi_def_cfa_offset 16
 3254              		.cfi_offset 6, -16
 3255 0001 4889E5   		movq	%rsp, %rbp
 3256              		.cfi_def_cfa_register 6
 3257 0004 4883EC10 		subq	$16, %rsp
 3258 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3259              	.LBB33:
 3260              		.loc 12 96 0
 3261 000c 488B45F8 		movq	-8(%rbp), %rax
 3262 0010 4883C008 		addq	$8, %rax
 3263 0014 4889C7   		movq	%rax, %rdi
 3264 0017 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@PLT
 3264      00
 3265              	.LBE33:
 3266 001c 90       		nop
 3267 001d C9       		leave
 3268              		.cfi_def_cfa 7, 8
 3269 001e C3       		ret
 3270              		.cfi_endproc
 3271              	.LFE1553:
 3273              		.weak	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 3274              		.set	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev,_ZNSt4pairIiNSt7__cxx11
 3275              		.section	.text._ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_,"
 3276              		.weak	_ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_
 3278              	_ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_:
 3279              	.LFB1551:
  92:/usr/include/c++/5/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 3280              		.loc 6 92 0
 3281              		.cfi_startproc
 3282 0000 55       		pushq	%rbp
 3283              		.cfi_def_cfa_offset 16
 3284              		.cfi_offset 6, -16
 3285 0001 4889E5   		movq	%rsp, %rbp
 3286              		.cfi_def_cfa_register 6
 3287 0004 4883EC10 		subq	$16, %rsp
 3288 0008 48897DF8 		movq	%rdi, -8(%rbp)
  93:/usr/include/c++/5/bits/stl_construct.h **** 
 3289              		.loc 6 93 0
 3290 000c 488B45F8 		movq	-8(%rbp), %rax
 3291 0010 4889C7   		movq	%rax, %rdi
 3292 0013 E8000000 		call	_ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev@PLT
 3292      00
 3293 0018 90       		nop
 3294 0019 C9       		leave
 3295              		.cfi_def_cfa 7, 8
 3296 001a C3       		ret
 3297              		.cfi_endproc
 3298              	.LFE1551:
 3300              		.weak	_ZTVN8UnitTest15XmlTestReporterE
 3301              		.section	.data.rel.ro._ZTVN8UnitTest15XmlTestReporterE,"awG",@progbits,_ZTVN8UnitTest15XmlTestRepo
 3302              		.align 8
 3305              	_ZTVN8UnitTest15XmlTestReporterE:
 3306 0000 00000000 		.quad	0
 3306      00000000 
 3307 0008 00000000 		.quad	_ZTIN8UnitTest15XmlTestReporterE
 3307      00000000 
 3308 0010 00000000 		.quad	_ZN8UnitTest15XmlTestReporterD1Ev
 3308      00000000 
 3309 0018 00000000 		.quad	_ZN8UnitTest15XmlTestReporterD0Ev
 3309      00000000 
 3310 0020 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
 3310      00000000 
 3311 0028 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
 3311      00000000 
 3312 0030 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
 3312      00000000 
 3313 0038 00000000 		.quad	_ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif
 3313      00000000 
 3314              		.section	.text._ZN8UnitTest15XmlTestReporterD2Ev,"axG",@progbits,_ZN8UnitTest15XmlTestReporterD5Ev
 3315              		.align 2
 3316              		.weak	_ZN8UnitTest15XmlTestReporterD2Ev
 3318              	_ZN8UnitTest15XmlTestReporterD2Ev:
 3319              	.LFB1556:
 3320              		.file 13 "XmlTestReporter.h"
   1:XmlTestReporter.h **** #ifndef UNITTEST_XMLTESTREPORTER_H
   2:XmlTestReporter.h **** #define UNITTEST_XMLTESTREPORTER_H
   3:XmlTestReporter.h **** 
   4:XmlTestReporter.h **** #include "DeferredTestReporter.h"
   5:XmlTestReporter.h **** 
   6:XmlTestReporter.h **** #include <iosfwd>
   7:XmlTestReporter.h **** 
   8:XmlTestReporter.h **** namespace UnitTest
   9:XmlTestReporter.h **** {
  10:XmlTestReporter.h **** 
  11:XmlTestReporter.h **** class XmlTestReporter : public DeferredTestReporter
 3321              		.loc 13 11 0
 3322              		.cfi_startproc
 3323 0000 55       		pushq	%rbp
 3324              		.cfi_def_cfa_offset 16
 3325              		.cfi_offset 6, -16
 3326 0001 4889E5   		movq	%rsp, %rbp
 3327              		.cfi_def_cfa_register 6
 3328 0004 4883EC10 		subq	$16, %rsp
 3329 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3330              	.LBB34:
 3331              		.loc 13 11 0
 3332 000c 488B0500 		movq	_ZTVN8UnitTest15XmlTestReporterE@GOTPCREL(%rip), %rax
 3332      000000
 3333 0013 488D5010 		leaq	16(%rax), %rdx
 3334 0017 488B45F8 		movq	-8(%rbp), %rax
 3335 001b 488910   		movq	%rdx, (%rax)
 3336 001e 488B45F8 		movq	-8(%rbp), %rax
 3337 0022 4889C7   		movq	%rax, %rdi
 3338 0025 E8000000 		call	_ZN8UnitTest20DeferredTestReporterD2Ev@PLT
 3338      00
 3339              	.LBE34:
 3340 002a B8000000 		movl	$0, %eax
 3340      00
 3341 002f 85C0     		testl	%eax, %eax
 3342 0031 740C     		je	.L170
 3343              		.loc 13 11 0 is_stmt 0 discriminator 4
 3344 0033 488B45F8 		movq	-8(%rbp), %rax
 3345 0037 4889C7   		movq	%rax, %rdi
 3346 003a E8000000 		call	_ZdlPv@PLT
 3346      00
 3347              	.L170:
 3348              		.loc 13 11 0
 3349 003f C9       		leave
 3350              		.cfi_def_cfa 7, 8
 3351 0040 C3       		ret
 3352              		.cfi_endproc
 3353              	.LFE1556:
 3355              		.weak	_ZN8UnitTest15XmlTestReporterD1Ev
 3356              		.set	_ZN8UnitTest15XmlTestReporterD1Ev,_ZN8UnitTest15XmlTestReporterD2Ev
 3357              		.section	.text._ZN8UnitTest15XmlTestReporterD0Ev,"axG",@progbits,_ZN8UnitTest15XmlTestReporterD5Ev
 3358              		.align 2
 3359              		.weak	_ZN8UnitTest15XmlTestReporterD0Ev
 3361              	_ZN8UnitTest15XmlTestReporterD0Ev:
 3362              	.LFB1558:
 3363              		.loc 13 11 0 is_stmt 1
 3364              		.cfi_startproc
 3365 0000 55       		pushq	%rbp
 3366              		.cfi_def_cfa_offset 16
 3367              		.cfi_offset 6, -16
 3368 0001 4889E5   		movq	%rsp, %rbp
 3369              		.cfi_def_cfa_register 6
 3370 0004 4883EC10 		subq	$16, %rsp
 3371 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3372              		.loc 13 11 0
 3373 000c 488B45F8 		movq	-8(%rbp), %rax
 3374 0010 4889C7   		movq	%rax, %rdi
 3375 0013 E8000000 		call	_ZN8UnitTest15XmlTestReporterD1Ev@PLT
 3375      00
 3376 0018 488B45F8 		movq	-8(%rbp), %rax
 3377 001c 4889C7   		movq	%rax, %rdi
 3378 001f E8000000 		call	_ZdlPv@PLT
 3378      00
 3379 0024 C9       		leave
 3380              		.cfi_def_cfa 7, 8
 3381 0025 C3       		ret
 3382              		.cfi_endproc
 3383              	.LFE1558:
 3385              		.weak	_ZTIN8UnitTest15XmlTestReporterE
 3386              		.section	.data.rel.ro._ZTIN8UnitTest15XmlTestReporterE,"awG",@progbits,_ZTIN8UnitTest15XmlTestRepo
 3387              		.align 8
 3390              	_ZTIN8UnitTest15XmlTestReporterE:
 3391 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 3391      00000000 
 3392 0008 00000000 		.quad	_ZTSN8UnitTest15XmlTestReporterE
 3392      00000000 
 3393 0010 00000000 		.quad	_ZTIN8UnitTest20DeferredTestReporterE
 3393      00000000 
 3394              		.weak	_ZTSN8UnitTest15XmlTestReporterE
 3395              		.section	.rodata._ZTSN8UnitTest15XmlTestReporterE,"aG",@progbits,_ZTSN8UnitTest15XmlTestReporterE,
 3396              		.align 16
 3399              	_ZTSN8UnitTest15XmlTestReporterE:
 3400 0000 4E38556E 		.string	"N8UnitTest15XmlTestReporterE"
 3400      69745465 
 3400      73743135 
 3400      586D6C54 
 3400      65737452 
 3401              		.text
 3403              	_Z41__static_initialization_and_destruction_0ii:
 3404              	.LFB1559:
 126:XmlTestReporter.cpp **** 
 127:XmlTestReporter.cpp **** }
 3405              		.loc 1 127 0
 3406              		.cfi_startproc
 3407 0ac9 55       		pushq	%rbp
 3408              		.cfi_def_cfa_offset 16
 3409              		.cfi_offset 6, -16
 3410 0aca 4889E5   		movq	%rsp, %rbp
 3411              		.cfi_def_cfa_register 6
 3412 0acd 4883EC10 		subq	$16, %rsp
 3413 0ad1 897DFC   		movl	%edi, -4(%rbp)
 3414 0ad4 8975F8   		movl	%esi, -8(%rbp)
 3415              		.loc 1 127 0
 3416 0ad7 837DFC01 		cmpl	$1, -4(%rbp)
 3417 0adb 7532     		jne	.L175
 3418              		.loc 1 127 0 is_stmt 0 discriminator 1
 3419 0add 817DF8FF 		cmpl	$65535, -8(%rbp)
 3419      FF0000
 3420 0ae4 7529     		jne	.L175
 3421              		.file 14 "/usr/include/c++/5/iostream"
   1:/usr/include/c++/5/iostream **** // Standard iostream objects -*- C++ -*-
   2:/usr/include/c++/5/iostream **** 
   3:/usr/include/c++/5/iostream **** // Copyright (C) 1997-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/iostream **** //
   5:/usr/include/c++/5/iostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/iostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/iostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/iostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/iostream **** // any later version.
  10:/usr/include/c++/5/iostream **** 
  11:/usr/include/c++/5/iostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/iostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/iostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/iostream **** // GNU General Public License for more details.
  15:/usr/include/c++/5/iostream **** 
  16:/usr/include/c++/5/iostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/iostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/iostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/iostream **** 
  20:/usr/include/c++/5/iostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/iostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/iostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/iostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/iostream **** 
  25:/usr/include/c++/5/iostream **** /** @file include/iostream
  26:/usr/include/c++/5/iostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/5/iostream ****  */
  28:/usr/include/c++/5/iostream **** 
  29:/usr/include/c++/5/iostream **** //
  30:/usr/include/c++/5/iostream **** // ISO C++ 14882: 27.3  Standard iostream objects
  31:/usr/include/c++/5/iostream **** //
  32:/usr/include/c++/5/iostream **** 
  33:/usr/include/c++/5/iostream **** #ifndef _GLIBCXX_IOSTREAM
  34:/usr/include/c++/5/iostream **** #define _GLIBCXX_IOSTREAM 1
  35:/usr/include/c++/5/iostream **** 
  36:/usr/include/c++/5/iostream **** #pragma GCC system_header
  37:/usr/include/c++/5/iostream **** 
  38:/usr/include/c++/5/iostream **** #include <bits/c++config.h>
  39:/usr/include/c++/5/iostream **** #include <ostream>
  40:/usr/include/c++/5/iostream **** #include <istream>
  41:/usr/include/c++/5/iostream **** 
  42:/usr/include/c++/5/iostream **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/usr/include/c++/5/iostream **** {
  44:/usr/include/c++/5/iostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/usr/include/c++/5/iostream **** 
  46:/usr/include/c++/5/iostream ****   /**
  47:/usr/include/c++/5/iostream ****    *  @name Standard Stream Objects
  48:/usr/include/c++/5/iostream ****    *
  49:/usr/include/c++/5/iostream ****    *  The &lt;iostream&gt; header declares the eight <em>standard stream
  50:/usr/include/c++/5/iostream ****    *  objects</em>.  For other declarations, see
  51:/usr/include/c++/5/iostream ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/io.html
  52:/usr/include/c++/5/iostream ****    *  and the @link iosfwd I/O forward declarations @endlink
  53:/usr/include/c++/5/iostream ****    *
  54:/usr/include/c++/5/iostream ****    *  They are required by default to cooperate with the global C
  55:/usr/include/c++/5/iostream ****    *  library's @c FILE streams, and to be available during program
  56:/usr/include/c++/5/iostream ****    *  startup and termination. For more information, see the section of the
  57:/usr/include/c++/5/iostream ****    *  manual linked to above.
  58:/usr/include/c++/5/iostream ****   */
  59:/usr/include/c++/5/iostream ****   //@{
  60:/usr/include/c++/5/iostream ****   extern istream cin;		/// Linked to standard input
  61:/usr/include/c++/5/iostream ****   extern ostream cout;		/// Linked to standard output
  62:/usr/include/c++/5/iostream ****   extern ostream cerr;		/// Linked to standard error (unbuffered)
  63:/usr/include/c++/5/iostream ****   extern ostream clog;		/// Linked to standard error (buffered)
  64:/usr/include/c++/5/iostream **** 
  65:/usr/include/c++/5/iostream **** #ifdef _GLIBCXX_USE_WCHAR_T
  66:/usr/include/c++/5/iostream ****   extern wistream wcin;		/// Linked to standard input
  67:/usr/include/c++/5/iostream ****   extern wostream wcout;	/// Linked to standard output
  68:/usr/include/c++/5/iostream ****   extern wostream wcerr;	/// Linked to standard error (unbuffered)
  69:/usr/include/c++/5/iostream ****   extern wostream wclog;	/// Linked to standard error (buffered)
  70:/usr/include/c++/5/iostream **** #endif
  71:/usr/include/c++/5/iostream ****   //@}
  72:/usr/include/c++/5/iostream **** 
  73:/usr/include/c++/5/iostream ****   // For construction of filebuffers for cout, cin, cerr, clog et. al.
  74:/usr/include/c++/5/iostream ****   static ios_base::Init __ioinit;
 3422              		.loc 14 74 0 is_stmt 1
 3423 0ae6 488D3D00 		leaq	_ZStL8__ioinit(%rip), %rdi
 3423      000000
 3424 0aed E8000000 		call	_ZNSt8ios_base4InitC1Ev@PLT
 3424      00
 3425 0af2 488D1500 		leaq	__dso_handle(%rip), %rdx
 3425      000000
 3426 0af9 488D3500 		leaq	_ZStL8__ioinit(%rip), %rsi
 3426      000000
 3427 0b00 488B0500 		movq	_ZNSt8ios_base4InitD1Ev@GOTPCREL(%rip), %rax
 3427      000000
 3428 0b07 4889C7   		movq	%rax, %rdi
 3429 0b0a E8000000 		call	__cxa_atexit@PLT
 3429      00
 3430              	.L175:
 3431              		.loc 1 127 0
 3432 0b0f 90       		nop
 3433 0b10 C9       		leave
 3434              		.cfi_def_cfa 7, 8
 3435 0b11 C3       		ret
 3436              		.cfi_endproc
 3437              	.LFE1559:
 3440              	_GLOBAL__sub_I_XmlTestReporter.cpp:
 3441              	.LFB1560:
 3442              		.loc 1 127 0
 3443              		.cfi_startproc
 3444 0b12 55       		pushq	%rbp
 3445              		.cfi_def_cfa_offset 16
 3446              		.cfi_offset 6, -16
 3447 0b13 4889E5   		movq	%rsp, %rbp
 3448              		.cfi_def_cfa_register 6
 3449              		.loc 1 127 0
 3450 0b16 BEFFFF00 		movl	$65535, %esi
 3450      00
 3451 0b1b BF010000 		movl	$1, %edi
 3451      00
 3452 0b20 E8A4FFFF 		call	_Z41__static_initialization_and_destruction_0ii
 3452      FF
 3453 0b25 5D       		popq	%rbp
 3454              		.cfi_def_cfa 7, 8
 3455 0b26 C3       		ret
 3456              		.cfi_endproc
 3457              	.LFE1560:
 3459              		.section	.init_array,"aw"
 3460              		.align 8
 3461 0000 00000000 		.quad	_GLOBAL__sub_I_XmlTestReporter.cpp
 3461      00000000 
 3462              		.text
 3463              	.Letext0:
 3464              		.file 15 "/usr/include/c++/5/bits/basic_string.h"
 3465              		.file 16 "/usr/include/c++/5/bits/basic_string.tcc"
 3466              		.file 17 "/usr/include/c++/5/bits/stringfwd.h"
 3467              		.file 18 "/usr/include/c++/5/bits/cpp_type_traits.h"
 3468              		.file 19 "/usr/include/c++/5/cwchar"
 3469              		.file 20 "/usr/include/c++/5/bits/char_traits.h"
 3470              		.file 21 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h"
 3471              		.file 22 "/usr/include/c++/5/clocale"
 3472              		.file 23 "/usr/include/c++/5/bits/vector.tcc"
 3473              		.file 24 "/usr/include/c++/5/bits/ios_base.h"
 3474              		.file 25 "/usr/include/c++/5/cwctype"
 3475              		.file 26 "/usr/include/c++/5/iosfwd"
 3476              		.file 27 "/usr/include/c++/5/bits/stl_iterator_base_types.h"
 3477              		.file 28 "/usr/include/c++/5/debug/debug.h"
 3478              		.file 29 "/usr/include/c++/5/bits/predefined_ops.h"
 3479              		.file 30 "/usr/include/c++/5/ext/numeric_traits.h"
 3480              		.file 31 "/usr/include/stdio.h"
 3481              		.file 32 "<built-in>"
 3482              		.file 33 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 3483              		.file 34 "/usr/include/wchar.h"
 3484              		.file 35 "/usr/include/time.h"
 3485              		.file 36 "/usr/include/locale.h"
 3486              		.file 37 "/usr/include/x86_64-linux-gnu/bits/types.h"
 3487              		.file 38 "/usr/include/x86_64-linux-gnu/c++/5/bits/atomic_word.h"
 3488              		.file 39 "/usr/include/wctype.h"
 19700              		.align 8
 19703              	DW.ref.__gxx_personality_v0:
 19704 0000 00000000 		.quad	__gxx_personality_v0
 19704      00000000 
 19705              		.hidden	__dso_handle
 19706              		.ident	"GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.5) 5.4.0 20160609"
 19707              		.section	.note.GNU-stack,"",@progbits
DEFINED SYMBOLS
                            *ABS*:0000000000000000 XmlTestReporter.cpp
                             .bss:0000000000000000 _ZStL8__ioinit
     /tmp/ccFMxdI2.s:7      .text:0000000000000000 _ZN12_GLOBAL__N_111ReplaceCharERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcRKS5_
     /tmp/ccFMxdI2.s:76     .text:0000000000000076 _ZN12_GLOBAL__N_19XmlEscapeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
     /tmp/ccFMxdI2.s:19703  .data.DW.ref.__gxx_personality_v0:0000000000000000 DW.ref.__gxx_personality_v0
     /tmp/ccFMxdI2.s:437    .text:000000000000039f _ZN12_GLOBAL__N_119BuildFailureMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiS7_
     /tmp/ccFMxdI2.s:566    .text._ZN8UnitTest12TestReporterC2Ev:0000000000000000 _ZN8UnitTest12TestReporterC2Ev
     /tmp/ccFMxdI2.s:566    .text._ZN8UnitTest12TestReporterC2Ev:0000000000000000 _ZN8UnitTest12TestReporterC1Ev
     /tmp/ccFMxdI2.s:597    .text._ZN8UnitTest20DeferredTestReporterC2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterC2Ev
     /tmp/ccFMxdI2.s:1488   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
     /tmp/ccFMxdI2.s:597    .text._ZN8UnitTest20DeferredTestReporterC2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterC1Ev
     /tmp/ccFMxdI2.s:674    .text._ZN8UnitTest20DeferredTestReporterD2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterD2Ev
     /tmp/ccFMxdI2.s:1519   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
     /tmp/ccFMxdI2.s:674    .text._ZN8UnitTest20DeferredTestReporterD2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterD1Ev
     /tmp/ccFMxdI2.s:765    .text._ZN8UnitTest20DeferredTestReporterD0Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterD0Ev
     /tmp/ccFMxdI2.s:793    .text:00000000000004b6 _ZN8UnitTest15XmlTestReporterC2ERSo
     /tmp/ccFMxdI2.s:3305   .data.rel.ro._ZTVN8UnitTest15XmlTestReporterE:0000000000000000 _ZTVN8UnitTest15XmlTestReporterE
     /tmp/ccFMxdI2.s:793    .text:00000000000004b6 _ZN8UnitTest15XmlTestReporterC1ERSo
     /tmp/ccFMxdI2.s:831    .text:00000000000004f4 _ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif
     /tmp/ccFMxdI2.s:975    .text:0000000000000672 _ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc
     /tmp/ccFMxdI2.s:1040   .text:00000000000006ea _ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif
     /tmp/ccFMxdI2.s:1606   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv
     /tmp/ccFMxdI2.s:1646   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv
     /tmp/ccFMxdI2.s:1685   .text._ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_:0000000000000000 _ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_
     /tmp/ccFMxdI2.s:1752   .text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
     /tmp/ccFMxdI2.s:1165   .text:0000000000000812 _ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE
     /tmp/ccFMxdI2.s:1775   .text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv
     /tmp/ccFMxdI2.s:1298   .text:000000000000092a _ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE
     /tmp/ccFMxdI2.s:1249   .text:00000000000008de _ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE
     /tmp/ccFMxdI2.s:1723   .text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv
     /tmp/ccFMxdI2.s:1129   .text:00000000000007ec _ZN8UnitTest15XmlTestReporter10EndResultsERSo
     /tmp/ccFMxdI2.s:1798   .text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv:0000000000000000 _ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE5beginEv
     /tmp/ccFMxdI2.s:1838   .text._ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv:0000000000000000 _ZNKSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE3endEv
     /tmp/ccFMxdI2.s:1877   .text._ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEEbRKNS_17__normal_iteratorIT_T0_EESJ_:0000000000000000 _ZN9__gnu_cxxneIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEEbRKNS_17__normal_iteratorIT_T0_EESJ_
     /tmp/ccFMxdI2.s:1943   .text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEptEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEptEv
     /tmp/ccFMxdI2.s:1914   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEppEv:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEppEv
     /tmp/ccFMxdI2.s:1488   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
     /tmp/ccFMxdI2.s:1996   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
     /tmp/ccFMxdI2.s:1519   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
     /tmp/ccFMxdI2.s:2113   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccFMxdI2.s:2134   .text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E
     /tmp/ccFMxdI2.s:2026   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
     /tmp/ccFMxdI2.s:2166   .text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS4_
     /tmp/ccFMxdI2.s:2197   .text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv
     /tmp/ccFMxdI2.s:2219   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKSA_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC1ERKSA_
     /tmp/ccFMxdI2.s:2250   .text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEE4baseEv
     /tmp/ccFMxdI2.s:1966   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev
     /tmp/ccFMxdI2.s:2309   .text._ZNSaIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEED2Ev
     /tmp/ccFMxdI2.s:1966   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev
     /tmp/ccFMxdI2.s:2272   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev
     /tmp/ccFMxdI2.s:1996   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
     /tmp/ccFMxdI2.s:2340   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m
     /tmp/ccFMxdI2.s:2026   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
     /tmp/ccFMxdI2.s:2375   .text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_:0000000000000000 _ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_
     /tmp/ccFMxdI2.s:2166   .text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_
     /tmp/ccFMxdI2.s:2219   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKSA_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC2ERKSA_
     /tmp/ccFMxdI2.s:2272   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev
     /tmp/ccFMxdI2.s:2405   .text._ZNSaIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEEC2Ev
     /tmp/ccFMxdI2.s:2435   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev
     /tmp/ccFMxdI2.s:2309   .text._ZNSaIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEED1Ev
     /tmp/ccFMxdI2.s:2459   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE10deallocateERS3_PS2_m
     /tmp/ccFMxdI2.s:2490   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_
     /tmp/ccFMxdI2.s:2529   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev
     /tmp/ccFMxdI2.s:2405   .text._ZNSaIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEEC1Ev
     /tmp/ccFMxdI2.s:2435   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED1Ev
     /tmp/ccFMxdI2.s:2553   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m
     /tmp/ccFMxdI2.s:2580   .text._ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_:0000000000000000 _ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_
     /tmp/ccFMxdI2.s:2725   .text._ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_:0000000000000000 _ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_
     /tmp/ccFMxdI2.s:2529   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC1Ev
     /tmp/ccFMxdI2.s:2604   .text._ZN8UnitTest18DeferredTestResultD2Ev:0000000000000000 _ZN8UnitTest18DeferredTestResultD2Ev
     /tmp/ccFMxdI2.s:2751   .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev
     /tmp/ccFMxdI2.s:2604   .text._ZN8UnitTest18DeferredTestResultD2Ev:0000000000000000 _ZN8UnitTest18DeferredTestResultD1Ev
     /tmp/ccFMxdI2.s:2751   .text._ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev
     /tmp/ccFMxdI2.s:2958   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE19_M_get_Tp_allocatorEv
     /tmp/ccFMxdI2.s:2979   .text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_EvT_S9_RSaIT0_E
     /tmp/ccFMxdI2.s:2868   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev
     /tmp/ccFMxdI2.s:2838   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD2Ev
     /tmp/ccFMxdI2.s:3010   .text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev
     /tmp/ccFMxdI2.s:2838   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD1Ev
     /tmp/ccFMxdI2.s:3040   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_M_deallocateEPS7_m:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE13_M_deallocateEPS7_m
     /tmp/ccFMxdI2.s:2868   .text._ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED1Ev
     /tmp/ccFMxdI2.s:3075   .text._ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_:0000000000000000 _ZSt8_DestroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_
     /tmp/ccFMxdI2.s:3105   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev
     /tmp/ccFMxdI2.s:3010   .text._ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev
     /tmp/ccFMxdI2.s:3128   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateERS9_PS8_m:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateERS9_PS8_m
     /tmp/ccFMxdI2.s:3158   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEvT_SB_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEvT_SB_
     /tmp/ccFMxdI2.s:3105   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev
     /tmp/ccFMxdI2.s:3197   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS8_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS8_m
     /tmp/ccFMxdI2.s:3224   .text._ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_:0000000000000000 _ZSt11__addressofISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_RS8_
     /tmp/ccFMxdI2.s:3278   .text._ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_:0000000000000000 _ZSt8_DestroyISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_
     /tmp/ccFMxdI2.s:3247   .text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev
     /tmp/ccFMxdI2.s:3247   .text._ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
     /tmp/ccFMxdI2.s:3390   .data.rel.ro._ZTIN8UnitTest15XmlTestReporterE:0000000000000000 _ZTIN8UnitTest15XmlTestReporterE
     /tmp/ccFMxdI2.s:3318   .text._ZN8UnitTest15XmlTestReporterD2Ev:0000000000000000 _ZN8UnitTest15XmlTestReporterD1Ev
     /tmp/ccFMxdI2.s:3361   .text._ZN8UnitTest15XmlTestReporterD0Ev:0000000000000000 _ZN8UnitTest15XmlTestReporterD0Ev
     /tmp/ccFMxdI2.s:3318   .text._ZN8UnitTest15XmlTestReporterD2Ev:0000000000000000 _ZN8UnitTest15XmlTestReporterD2Ev
     /tmp/ccFMxdI2.s:3399   .rodata._ZTSN8UnitTest15XmlTestReporterE:0000000000000000 _ZTSN8UnitTest15XmlTestReporterE
     /tmp/ccFMxdI2.s:3403   .text:0000000000000ac9 _Z41__static_initialization_and_destruction_0ii
     /tmp/ccFMxdI2.s:3440   .text:0000000000000b12 _GLOBAL__sub_I_XmlTestReporter.cpp
                           .group:0000000000000000 _ZN8UnitTest12TestReporterC5Ev
                           .group:0000000000000000 _ZN8UnitTest20DeferredTestReporterC5Ev
                           .group:0000000000000000 _ZN8UnitTest20DeferredTestReporterD5Ev
                           .group:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC5Ev
                           .group:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC5ERKS4_
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt6vectorIS8_SaIS8_EEEC5ERKSA_
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC5Ev
                           .group:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEED5Ev
                           .group:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEEC5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC5Ev
                           .group:0000000000000000 _ZN8UnitTest18DeferredTestResultD5Ev
                           .group:0000000000000000 _ZNSt6vectorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaIS7_EED5Ev
                           .group:0000000000000000 _ZNSaISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED5Ev
                           .group:0000000000000000 _ZNSt4pairIiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED5Ev
                           .group:0000000000000000 _ZN8UnitTest15XmlTestReporterD5Ev

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcm
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEmmRKS4_
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_
_ZNSaIcEC1Ev
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
_ZNSaIcED1Ev
_Unwind_Resume
__stack_chk_fail
__gxx_personality_v0
_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode
_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
_ZNSolsEi
_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv
_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev
_ZTVN8UnitTest12TestReporterE
_ZTVN8UnitTest20DeferredTestReporterE
_ZN8UnitTest12TestReporterD2Ev
_ZdlPv
_ZN8UnitTest20DeferredTestReporter10GetResultsEv
_ZNSolsEf
_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTIN8UnitTest20DeferredTestReporterE
_ZNSt8ios_base4InitC1Ev
__dso_handle
_ZNSt8ios_base4InitD1Ev
__cxa_atexit
