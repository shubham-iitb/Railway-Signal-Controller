   1              		.file	"arg_end.c"
   2              		.text
   3              	.Ltext0:
   5              	resetfn:
   6              	.LFB0:
   7              		.file 1 "arg_end.c"
   1:arg_end.c     **** /*********************************************************************
   2:arg_end.c     **** This file is part of the argtable2 library.
   3:arg_end.c     **** Copyright (C) 1998-2001,2003-2011 Stewart Heitmann
   4:arg_end.c     **** sheitmann@users.sourceforge.net
   5:arg_end.c     **** 
   6:arg_end.c     **** The argtable2 library is free software; you can redistribute it and/or
   7:arg_end.c     **** modify it under the terms of the GNU Library General Public License as
   8:arg_end.c     **** published by the Free Software Foundation; either version 2 of the
   9:arg_end.c     **** License, or (at your option) any later version.
  10:arg_end.c     **** 
  11:arg_end.c     **** This software is distributed in the hope that it will be useful,
  12:arg_end.c     **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:arg_end.c     **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  14:arg_end.c     **** Library General Public License for more details.
  15:arg_end.c     **** 
  16:arg_end.c     **** You should have received a copy of the GNU Library General Public
  17:arg_end.c     **** License along with this library; if not, write to the Free Software
  18:arg_end.c     **** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:arg_end.c     **** USA.
  20:arg_end.c     **** **********************************************************************/
  21:arg_end.c     **** 
  22:arg_end.c     **** /* config.h must be included before anything else */
  23:arg_end.c     **** #ifdef HAVE_CONFIG_H
  24:arg_end.c     **** #include "config.h"
  25:arg_end.c     **** #endif
  26:arg_end.c     **** 
  27:arg_end.c     **** /* #ifdef HAVE_STDLIB_H */
  28:arg_end.c     **** #include <stdlib.h>
  29:arg_end.c     **** /* #endif */
  30:arg_end.c     **** 
  31:arg_end.c     **** #include "argtable2.h"
  32:arg_end.c     **** 
  33:arg_end.c     **** static void resetfn(struct arg_end *parent)
  34:arg_end.c     ****     {
   8              		.loc 1 34 0
   9              		.cfi_startproc
  10 0000 55       		pushq	%rbp
  11              		.cfi_def_cfa_offset 16
  12              		.cfi_offset 6, -16
  13 0001 4889E5   		movq	%rsp, %rbp
  14              		.cfi_def_cfa_register 6
  15 0004 48897DF8 		movq	%rdi, -8(%rbp)
  35:arg_end.c     ****     /*printf("%s:resetfn(%p)\n",__FILE__,parent);*/
  36:arg_end.c     ****     parent->count = 0;
  16              		.loc 1 36 0
  17 0008 488B45F8 		movq	-8(%rbp), %rax
  18 000c C7406000 		movl	$0, 96(%rax)
  18      000000
  37:arg_end.c     ****     }
  19              		.loc 1 37 0
  20 0013 90       		nop
  21 0014 5D       		popq	%rbp
  22              		.cfi_def_cfa 7, 8
  23 0015 C3       		ret
  24              		.cfi_endproc
  25              	.LFE0:
  27              		.section	.rodata
  28              	.LC0:
  29 0000 00       		.string	""
  30              	.LC1:
  31 0001 25733A20 		.string	"%s: "
  31      00
  32              	.LC2:
  33 0006 746F6F20 		.string	"too many errors to display"
  33      6D616E79 
  33      20657272 
  33      6F727320 
  33      746F2064 
  34              	.LC3:
  35 0021 696E7375 		.string	"insufficent memory"
  35      66666963 
  35      656E7420 
  35      6D656D6F 
  35      727900
  36              	.LC4:
  37 0034 756E6578 		.string	"unexpected argument \"%s\""
  37      70656374 
  37      65642061 
  37      7267756D 
  37      656E7420 
  38 004d 000000   		.align 8
  39              	.LC5:
  40 0050 6F707469 		.string	"option \"%s\" requires an argument"
  40      6F6E2022 
  40      25732220 
  40      72657175 
  40      69726573 
  41              	.LC6:
  42 0071 696E7661 		.string	"invalid option \"%s\""
  42      6C696420 
  42      6F707469 
  42      6F6E2022 
  42      25732200 
  43              	.LC7:
  44 0085 696E7661 		.string	"invalid option \"-%c\""
  44      6C696420 
  44      6F707469 
  44      6F6E2022 
  44      2D256322 
  45              		.text
  47              	errorfn:
  48              	.LFB1:
  38:arg_end.c     **** 
  39:arg_end.c     **** static void errorfn(void *parent, FILE *fp, int error, const char *argval, const char *progname)
  40:arg_end.c     ****     {
  49              		.loc 1 40 0
  50              		.cfi_startproc
  51 0016 55       		pushq	%rbp
  52              		.cfi_def_cfa_offset 16
  53              		.cfi_offset 6, -16
  54 0017 4889E5   		movq	%rsp, %rbp
  55              		.cfi_def_cfa_register 6
  56 001a 4883EC30 		subq	$48, %rsp
  57 001e 48897DF8 		movq	%rdi, -8(%rbp)
  58 0022 488975F0 		movq	%rsi, -16(%rbp)
  59 0026 8955EC   		movl	%edx, -20(%rbp)
  60 0029 48894DE0 		movq	%rcx, -32(%rbp)
  61 002d 4C8945D8 		movq	%r8, -40(%rbp)
  41:arg_end.c     ****     progname = progname ? progname : "";
  62              		.loc 1 41 0
  63 0031 48837DD8 		cmpq	$0, -40(%rbp)
  63      00
  64 0036 7406     		je	.L3
  65              		.loc 1 41 0 is_stmt 0 discriminator 1
  66 0038 488B45D8 		movq	-40(%rbp), %rax
  67 003c EB07     		jmp	.L4
  68              	.L3:
  69              		.loc 1 41 0 discriminator 2
  70 003e 488D0500 		leaq	.LC0(%rip), %rax
  70      000000
  71              	.L4:
  72              		.loc 1 41 0 discriminator 4
  73 0045 488945D8 		movq	%rax, -40(%rbp)
  42:arg_end.c     ****     argval = argval ? argval : "";
  74              		.loc 1 42 0 is_stmt 1 discriminator 4
  75 0049 48837DE0 		cmpq	$0, -32(%rbp)
  75      00
  76 004e 7406     		je	.L5
  77              		.loc 1 42 0 is_stmt 0 discriminator 1
  78 0050 488B45E0 		movq	-32(%rbp), %rax
  79 0054 EB07     		jmp	.L6
  80              	.L5:
  81              		.loc 1 42 0 discriminator 2
  82 0056 488D0500 		leaq	.LC0(%rip), %rax
  82      000000
  83              	.L6:
  84              		.loc 1 42 0 discriminator 4
  85 005d 488945E0 		movq	%rax, -32(%rbp)
  43:arg_end.c     **** 
  44:arg_end.c     ****     fprintf(fp,"%s: ",progname);
  86              		.loc 1 44 0 is_stmt 1 discriminator 4
  87 0061 488B55D8 		movq	-40(%rbp), %rdx
  88 0065 488B45F0 		movq	-16(%rbp), %rax
  89 0069 488D3500 		leaq	.LC1(%rip), %rsi
  89      000000
  90 0070 4889C7   		movq	%rax, %rdi
  91 0073 B8000000 		movl	$0, %eax
  91      00
  92 0078 E8000000 		call	fprintf@PLT
  92      00
  45:arg_end.c     ****     switch(error)
  93              		.loc 1 45 0 discriminator 4
  94 007d 837DEC05 		cmpl	$5, -20(%rbp)
  95 0081 0F87BF00 		ja	.L7
  95      0000
  96 0087 8B45EC   		movl	-20(%rbp), %eax
  97 008a 488D1485 		leaq	0(,%rax,4), %rdx
  97      00000000 
  98 0092 488D0500 		leaq	.L9(%rip), %rax
  98      000000
  99 0099 8B0402   		movl	(%rdx,%rax), %eax
 100 009c 4863D0   		movslq	%eax, %rdx
 101 009f 488D0500 		leaq	.L9(%rip), %rax
 101      000000
 102 00a6 4801D0   		addq	%rdx, %rax
 103 00a9 FFE0     		jmp	*%rax
 104              		.section	.rodata
 105 009a 0000     		.align 4
 106              		.align 4
 107              	.L9:
 108 009c 00000000 		.long	.L7-.L9
 109 00a0 00000000 		.long	.L8-.L9
 110 00a4 00000000 		.long	.L10-.L9
 111 00a8 00000000 		.long	.L11-.L9
 112 00ac 00000000 		.long	.L12-.L9
 113 00b0 00000000 		.long	.L13-.L9
 114              		.text
 115              	.L8:
  46:arg_end.c     ****         {
  47:arg_end.c     ****         case ARG_ELIMIT:
  48:arg_end.c     ****             fputs("too many errors to display",fp);
 116              		.loc 1 48 0
 117 00ab 488B45F0 		movq	-16(%rbp), %rax
 118 00af 4889C1   		movq	%rax, %rcx
 119 00b2 BA1A0000 		movl	$26, %edx
 119      00
 120 00b7 BE010000 		movl	$1, %esi
 120      00
 121 00bc 488D3D00 		leaq	.LC2(%rip), %rdi
 121      000000
 122 00c3 E8000000 		call	fwrite@PLT
 122      00
  49:arg_end.c     ****             break;
 123              		.loc 1 49 0
 124 00c8 E9950000 		jmp	.L14
 124      00
 125              	.L10:
  50:arg_end.c     ****         case ARG_EMALLOC:
  51:arg_end.c     ****             fputs("insufficent memory",fp);
 126              		.loc 1 51 0
 127 00cd 488B45F0 		movq	-16(%rbp), %rax
 128 00d1 4889C1   		movq	%rax, %rcx
 129 00d4 BA120000 		movl	$18, %edx
 129      00
 130 00d9 BE010000 		movl	$1, %esi
 130      00
 131 00de 488D3D00 		leaq	.LC3(%rip), %rdi
 131      000000
 132 00e5 E8000000 		call	fwrite@PLT
 132      00
  52:arg_end.c     ****             break;
 133              		.loc 1 52 0
 134 00ea EB76     		jmp	.L14
 135              	.L11:
  53:arg_end.c     ****         case ARG_ENOMATCH:
  54:arg_end.c     ****             fprintf(fp,"unexpected argument \"%s\"",argval);
 136              		.loc 1 54 0
 137 00ec 488B55E0 		movq	-32(%rbp), %rdx
 138 00f0 488B45F0 		movq	-16(%rbp), %rax
 139 00f4 488D3500 		leaq	.LC4(%rip), %rsi
 139      000000
 140 00fb 4889C7   		movq	%rax, %rdi
 141 00fe B8000000 		movl	$0, %eax
 141      00
 142 0103 E8000000 		call	fprintf@PLT
 142      00
  55:arg_end.c     ****             break;
 143              		.loc 1 55 0
 144 0108 EB58     		jmp	.L14
 145              	.L13:
  56:arg_end.c     ****         case ARG_EMISSARG:
  57:arg_end.c     ****             fprintf(fp,"option \"%s\" requires an argument",argval);
 146              		.loc 1 57 0
 147 010a 488B55E0 		movq	-32(%rbp), %rdx
 148 010e 488B45F0 		movq	-16(%rbp), %rax
 149 0112 488D3500 		leaq	.LC5(%rip), %rsi
 149      000000
 150 0119 4889C7   		movq	%rax, %rdi
 151 011c B8000000 		movl	$0, %eax
 151      00
 152 0121 E8000000 		call	fprintf@PLT
 152      00
  58:arg_end.c     ****             break;
 153              		.loc 1 58 0
 154 0126 EB3A     		jmp	.L14
 155              	.L12:
  59:arg_end.c     ****         case ARG_ELONGOPT:
  60:arg_end.c     ****             fprintf(fp,"invalid option \"%s\"",argval);
 156              		.loc 1 60 0
 157 0128 488B55E0 		movq	-32(%rbp), %rdx
 158 012c 488B45F0 		movq	-16(%rbp), %rax
 159 0130 488D3500 		leaq	.LC6(%rip), %rsi
 159      000000
 160 0137 4889C7   		movq	%rax, %rdi
 161 013a B8000000 		movl	$0, %eax
 161      00
 162 013f E8000000 		call	fprintf@PLT
 162      00
  61:arg_end.c     ****             break;
 163              		.loc 1 61 0
 164 0144 EB1C     		jmp	.L14
 165              	.L7:
  62:arg_end.c     ****         default:
  63:arg_end.c     ****             fprintf(fp,"invalid option \"-%c\"",error);
 166              		.loc 1 63 0
 167 0146 8B55EC   		movl	-20(%rbp), %edx
 168 0149 488B45F0 		movq	-16(%rbp), %rax
 169 014d 488D3500 		leaq	.LC7(%rip), %rsi
 169      000000
 170 0154 4889C7   		movq	%rax, %rdi
 171 0157 B8000000 		movl	$0, %eax
 171      00
 172 015c E8000000 		call	fprintf@PLT
 172      00
  64:arg_end.c     ****             break;
 173              		.loc 1 64 0
 174 0161 90       		nop
 175              	.L14:
  65:arg_end.c     ****         }
  66:arg_end.c     ****     fputc('\n',fp);
 176              		.loc 1 66 0
 177 0162 488B45F0 		movq	-16(%rbp), %rax
 178 0166 4889C6   		movq	%rax, %rsi
 179 0169 BF0A0000 		movl	$10, %edi
 179      00
 180 016e E8000000 		call	fputc@PLT
 180      00
  67:arg_end.c     ****     }
 181              		.loc 1 67 0
 182 0173 90       		nop
 183 0174 C9       		leave
 184              		.cfi_def_cfa 7, 8
 185 0175 C3       		ret
 186              		.cfi_endproc
 187              	.LFE1:
 189              		.globl	arg_end
 191              	arg_end:
 192              	.LFB2:
  68:arg_end.c     **** 
  69:arg_end.c     **** 
  70:arg_end.c     **** struct arg_end* arg_end(int maxcount)
  71:arg_end.c     ****     {
 193              		.loc 1 71 0
 194              		.cfi_startproc
 195 0176 55       		pushq	%rbp
 196              		.cfi_def_cfa_offset 16
 197              		.cfi_offset 6, -16
 198 0177 4889E5   		movq	%rsp, %rbp
 199              		.cfi_def_cfa_register 6
 200 017a 4883EC20 		subq	$32, %rsp
 201 017e 897DEC   		movl	%edi, -20(%rbp)
  72:arg_end.c     ****     size_t nbytes;
  73:arg_end.c     ****     struct arg_end *result;
  74:arg_end.c     **** 
  75:arg_end.c     ****     nbytes = sizeof(struct arg_end)
  76:arg_end.c     ****            + maxcount * sizeof(int)             /* storage for int error[maxcount] array*/
  77:arg_end.c     ****            + maxcount * sizeof(void*)           /* storage for void* parent[maxcount] array */
  78:arg_end.c     ****            + maxcount * sizeof(char*);          /* storage for char* argval[maxcount] array */
 202              		.loc 1 78 0
 203 0181 8B45EC   		movl	-20(%rbp), %eax
 204 0184 4863D0   		movslq	%eax, %rdx
 205 0187 4889D0   		movq	%rdx, %rax
 206 018a 48C1E002 		salq	$2, %rax
 207 018e 4801D0   		addq	%rdx, %rax
 208 0191 48C1E002 		salq	$2, %rax
  75:arg_end.c     ****            + maxcount * sizeof(int)             /* storage for int error[maxcount] array*/
 209              		.loc 1 75 0
 210 0195 4883E880 		subq	$-128, %rax
 211 0199 488945F0 		movq	%rax, -16(%rbp)
  79:arg_end.c     **** 
  80:arg_end.c     ****     result = (struct arg_end*)malloc(nbytes);
 212              		.loc 1 80 0
 213 019d 488B45F0 		movq	-16(%rbp), %rax
 214 01a1 4889C7   		movq	%rax, %rdi
 215 01a4 E8000000 		call	malloc@PLT
 215      00
 216 01a9 488945F8 		movq	%rax, -8(%rbp)
  81:arg_end.c     ****     if (result)
 217              		.loc 1 81 0
 218 01ad 48837DF8 		cmpq	$0, -8(%rbp)
 218      00
 219 01b2 0F84DB00 		je	.L16
 219      0000
  82:arg_end.c     ****         {
  83:arg_end.c     ****         /* init the arg_hdr struct */
  84:arg_end.c     ****         result->hdr.flag      = ARG_TERMINATOR;
 220              		.loc 1 84 0
 221 01b8 488B45F8 		movq	-8(%rbp), %rax
 222 01bc C60001   		movb	$1, (%rax)
  85:arg_end.c     ****         result->hdr.shortopts = NULL;
 223              		.loc 1 85 0
 224 01bf 488B45F8 		movq	-8(%rbp), %rax
 225 01c3 48C74008 		movq	$0, 8(%rax)
 225      00000000 
  86:arg_end.c     ****         result->hdr.longopts  = NULL;
 226              		.loc 1 86 0
 227 01cb 488B45F8 		movq	-8(%rbp), %rax
 228 01cf 48C74010 		movq	$0, 16(%rax)
 228      00000000 
  87:arg_end.c     ****         result->hdr.datatype  = NULL;
 229              		.loc 1 87 0
 230 01d7 488B45F8 		movq	-8(%rbp), %rax
 231 01db 48C74018 		movq	$0, 24(%rax)
 231      00000000 
  88:arg_end.c     ****         result->hdr.glossary  = NULL;
 232              		.loc 1 88 0
 233 01e3 488B45F8 		movq	-8(%rbp), %rax
 234 01e7 48C74020 		movq	$0, 32(%rax)
 234      00000000 
  89:arg_end.c     ****         result->hdr.mincount  = 1;
 235              		.loc 1 89 0
 236 01ef 488B45F8 		movq	-8(%rbp), %rax
 237 01f3 C7402801 		movl	$1, 40(%rax)
 237      000000
  90:arg_end.c     ****         result->hdr.maxcount  = maxcount;
 238              		.loc 1 90 0
 239 01fa 488B45F8 		movq	-8(%rbp), %rax
 240 01fe 8B55EC   		movl	-20(%rbp), %edx
 241 0201 89502C   		movl	%edx, 44(%rax)
  91:arg_end.c     ****         result->hdr.parent    = result;
 242              		.loc 1 91 0
 243 0204 488B45F8 		movq	-8(%rbp), %rax
 244 0208 488B55F8 		movq	-8(%rbp), %rdx
 245 020c 48895030 		movq	%rdx, 48(%rax)
  92:arg_end.c     ****         result->hdr.resetfn   = (arg_resetfn*)resetfn;
 246              		.loc 1 92 0
 247 0210 488B45F8 		movq	-8(%rbp), %rax
 248 0214 488D15E5 		leaq	resetfn(%rip), %rdx
 248      FDFFFF
 249 021b 48895038 		movq	%rdx, 56(%rax)
  93:arg_end.c     ****         result->hdr.scanfn    = NULL;
 250              		.loc 1 93 0
 251 021f 488B45F8 		movq	-8(%rbp), %rax
 252 0223 48C74040 		movq	$0, 64(%rax)
 252      00000000 
  94:arg_end.c     ****         result->hdr.checkfn   = NULL;
 253              		.loc 1 94 0
 254 022b 488B45F8 		movq	-8(%rbp), %rax
 255 022f 48C74048 		movq	$0, 72(%rax)
 255      00000000 
  95:arg_end.c     ****         result->hdr.errorfn   = errorfn;
 256              		.loc 1 95 0
 257 0237 488B45F8 		movq	-8(%rbp), %rax
 258 023b 488D15D4 		leaq	errorfn(%rip), %rdx
 258      FDFFFF
 259 0242 48895050 		movq	%rdx, 80(%rax)
  96:arg_end.c     **** 
  97:arg_end.c     ****         /* store error[maxcount] array immediately after struct arg_end */
  98:arg_end.c     ****         result->error = (int*)(result+1);
 260              		.loc 1 98 0
 261 0246 488B45F8 		movq	-8(%rbp), %rax
 262 024a 488D9080 		leaq	128(%rax), %rdx
 262      000000
 263 0251 488B45F8 		movq	-8(%rbp), %rax
 264 0255 48895068 		movq	%rdx, 104(%rax)
  99:arg_end.c     **** 
 100:arg_end.c     ****         /* store parent[maxcount] array immediately after error[] array */
 101:arg_end.c     ****         result->parent = (void**)(result->error + maxcount );
 265              		.loc 1 101 0
 266 0259 488B45F8 		movq	-8(%rbp), %rax
 267 025d 488B4068 		movq	104(%rax), %rax
 268 0261 8B55EC   		movl	-20(%rbp), %edx
 269 0264 4863D2   		movslq	%edx, %rdx
 270 0267 48C1E202 		salq	$2, %rdx
 271 026b 4801C2   		addq	%rax, %rdx
 272 026e 488B45F8 		movq	-8(%rbp), %rax
 273 0272 48895070 		movq	%rdx, 112(%rax)
 102:arg_end.c     **** 
 103:arg_end.c     ****         /* store argval[maxcount] array immediately after parent[] array */
 104:arg_end.c     ****         result->argval = (const char**)(result->parent + maxcount );
 274              		.loc 1 104 0
 275 0276 488B45F8 		movq	-8(%rbp), %rax
 276 027a 488B4070 		movq	112(%rax), %rax
 277 027e 8B55EC   		movl	-20(%rbp), %edx
 278 0281 4863D2   		movslq	%edx, %rdx
 279 0284 48C1E203 		salq	$3, %rdx
 280 0288 4801C2   		addq	%rax, %rdx
 281 028b 488B45F8 		movq	-8(%rbp), %rax
 282 028f 48895078 		movq	%rdx, 120(%rax)
 283              	.L16:
 105:arg_end.c     ****         }
 106:arg_end.c     **** 
 107:arg_end.c     ****     /*printf("arg_end(%d) returns %p\n",maxcount,result);*/
 108:arg_end.c     ****     return result;
 284              		.loc 1 108 0
 285 0293 488B45F8 		movq	-8(%rbp), %rax
 109:arg_end.c     ****     }
 286              		.loc 1 109 0
 287 0297 C9       		leave
 288              		.cfi_def_cfa 7, 8
 289 0298 C3       		ret
 290              		.cfi_endproc
 291              	.LFE2:
 293              		.globl	arg_print_errors
 295              	arg_print_errors:
 296              	.LFB3:
 110:arg_end.c     **** 
 111:arg_end.c     **** 
 112:arg_end.c     **** void arg_print_errors(FILE* fp, struct arg_end* end, const char* progname)
 113:arg_end.c     ****     {
 297              		.loc 1 113 0
 298              		.cfi_startproc
 299 0299 55       		pushq	%rbp
 300              		.cfi_def_cfa_offset 16
 301              		.cfi_offset 6, -16
 302 029a 4889E5   		movq	%rsp, %rbp
 303              		.cfi_def_cfa_register 6
 304 029d 4883EC30 		subq	$48, %rsp
 305 02a1 48897DE8 		movq	%rdi, -24(%rbp)
 306 02a5 488975E0 		movq	%rsi, -32(%rbp)
 307 02a9 488955D8 		movq	%rdx, -40(%rbp)
 114:arg_end.c     ****     int i;
 115:arg_end.c     ****     /*printf("arg_errors()\n");*/
 116:arg_end.c     ****     for (i=0; i<end->count; i++)
 308              		.loc 1 116 0
 309 02ad C745F400 		movl	$0, -12(%rbp)
 309      000000
 310 02b4 E9860000 		jmp	.L19
 310      00
 311              	.L21:
 312              	.LBB2:
 117:arg_end.c     ****         {
 118:arg_end.c     ****         struct arg_hdr *errorparent = (struct arg_hdr *)(end->parent[i]);
 313              		.loc 1 118 0
 314 02b9 488B45E0 		movq	-32(%rbp), %rax
 315 02bd 488B4070 		movq	112(%rax), %rax
 316 02c1 8B55F4   		movl	-12(%rbp), %edx
 317 02c4 4863D2   		movslq	%edx, %rdx
 318 02c7 48C1E203 		salq	$3, %rdx
 319 02cb 4801D0   		addq	%rdx, %rax
 320 02ce 488B00   		movq	(%rax), %rax
 321 02d1 488945F8 		movq	%rax, -8(%rbp)
 119:arg_end.c     ****         if (errorparent->errorfn)
 322              		.loc 1 119 0
 323 02d5 488B45F8 		movq	-8(%rbp), %rax
 324 02d9 488B4050 		movq	80(%rax), %rax
 325 02dd 4885C0   		testq	%rax, %rax
 326 02e0 7459     		je	.L20
 120:arg_end.c     ****             errorparent->errorfn(end->parent[i],fp,end->error[i],end->argval[i],progname);
 327              		.loc 1 120 0
 328 02e2 488B45F8 		movq	-8(%rbp), %rax
 329 02e6 488B4050 		movq	80(%rax), %rax
 330 02ea 488B55E0 		movq	-32(%rbp), %rdx
 331 02ee 488B5278 		movq	120(%rdx), %rdx
 332 02f2 8B4DF4   		movl	-12(%rbp), %ecx
 333 02f5 4863C9   		movslq	%ecx, %rcx
 334 02f8 48C1E103 		salq	$3, %rcx
 335 02fc 4801CA   		addq	%rcx, %rdx
 336 02ff 488B0A   		movq	(%rdx), %rcx
 337 0302 488B55E0 		movq	-32(%rbp), %rdx
 338 0306 488B5268 		movq	104(%rdx), %rdx
 339 030a 8B75F4   		movl	-12(%rbp), %esi
 340 030d 4863F6   		movslq	%esi, %rsi
 341 0310 48C1E602 		salq	$2, %rsi
 342 0314 4801F2   		addq	%rsi, %rdx
 343 0317 8B12     		movl	(%rdx), %edx
 344 0319 488B75E0 		movq	-32(%rbp), %rsi
 345 031d 488B7670 		movq	112(%rsi), %rsi
 346 0321 8B7DF4   		movl	-12(%rbp), %edi
 347 0324 4863FF   		movslq	%edi, %rdi
 348 0327 48C1E703 		salq	$3, %rdi
 349 032b 4801FE   		addq	%rdi, %rsi
 350 032e 488B3E   		movq	(%rsi), %rdi
 351 0331 4C8B45D8 		movq	-40(%rbp), %r8
 352 0335 488B75E8 		movq	-24(%rbp), %rsi
 353 0339 FFD0     		call	*%rax
 354              	.L20:
 355              	.LBE2:
 116:arg_end.c     ****         {
 356              		.loc 1 116 0 discriminator 2
 357 033b 8345F401 		addl	$1, -12(%rbp)
 358              	.L19:
 116:arg_end.c     ****         {
 359              		.loc 1 116 0 is_stmt 0 discriminator 1
 360 033f 488B45E0 		movq	-32(%rbp), %rax
 361 0343 8B4060   		movl	96(%rax), %eax
 362 0346 3B45F4   		cmpl	-12(%rbp), %eax
 363 0349 0F8F6AFF 		jg	.L21
 363      FFFF
 121:arg_end.c     ****         }
 122:arg_end.c     ****     }
 364              		.loc 1 122 0 is_stmt 1
 365 034f 90       		nop
 366 0350 C9       		leave
 367              		.cfi_def_cfa 7, 8
 368 0351 C3       		ret
 369              		.cfi_endproc
 370              	.LFE3:
 372              	.Letext0:
 373              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 374              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 375              		.file 4 "/usr/include/stdio.h"
 376              		.file 5 "/usr/include/libio.h"
 377              		.file 6 "argtable2.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 arg_end.c
     /tmp/ccqWRJvf.s:5      .text:0000000000000000 resetfn
     /tmp/ccqWRJvf.s:47     .text:0000000000000016 errorfn
     /tmp/ccqWRJvf.s:191    .text:0000000000000176 arg_end
     /tmp/ccqWRJvf.s:295    .text:0000000000000299 arg_print_errors

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
fprintf
fwrite
fputc
malloc
