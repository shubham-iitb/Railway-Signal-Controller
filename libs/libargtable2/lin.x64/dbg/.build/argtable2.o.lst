   1              		.file	"argtable2.c"
   2              		.text
   3              	.Ltext0:
   5              	arg_register_error:
   6              	.LFB0:
   7              		.file 1 "argtable2.c"
   1:argtable2.c   **** /*********************************************************************
   2:argtable2.c   **** This file is part of the argtable2 library.
   3:argtable2.c   **** Copyright (C) 1998-2001,2003-2011 Stewart Heitmann
   4:argtable2.c   **** sheitmann@users.sourceforge.net
   5:argtable2.c   **** 
   6:argtable2.c   **** The argtable2 library is free software; you can redistribute it and/or
   7:argtable2.c   **** modify it under the terms of the GNU Library General Public License as
   8:argtable2.c   **** published by the Free Software Foundation; either version 2 of the
   9:argtable2.c   **** License, or (at your option) any later version.
  10:argtable2.c   **** 
  11:argtable2.c   **** This software is distributed in the hope that it will be useful,
  12:argtable2.c   **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:argtable2.c   **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  14:argtable2.c   **** Library General Public License for more details.
  15:argtable2.c   **** 
  16:argtable2.c   **** You should have received a copy of the GNU Library General Public
  17:argtable2.c   **** License along with this library; if not, write to the Free Software
  18:argtable2.c   **** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:argtable2.c   **** USA.
  20:argtable2.c   **** **********************************************************************/
  21:argtable2.c   **** 
  22:argtable2.c   **** /* config.h must be included before anything else */
  23:argtable2.c   **** #ifdef HAVE_CONFIG_H
  24:argtable2.c   **** #include "config.h"
  25:argtable2.c   **** #endif
  26:argtable2.c   **** 
  27:argtable2.c   **** #ifdef STDC_HEADERS
  28:argtable2.c   **** #include <stdlib.h>
  29:argtable2.c   **** #include <string.h>
  30:argtable2.c   **** #include <stdlib.h>
  31:argtable2.c   **** #include <ctype.h>
  32:argtable2.c   **** #endif
  33:argtable2.c   **** 
  34:argtable2.c   **** #ifdef HAVE_STRINGS_H
  35:argtable2.c   **** #include <strings.h>
  36:argtable2.c   **** #endif
  37:argtable2.c   **** 
  38:argtable2.c   **** #ifdef HAVE_GETOPT_H
  39:argtable2.c   **** #include <getopt.h>
  40:argtable2.c   **** #else
  41:argtable2.c   **** #include "./getopt.h"
  42:argtable2.c   **** #endif
  43:argtable2.c   **** 
  44:argtable2.c   **** #ifdef HAVE_UNISTD_H
  45:argtable2.c   **** #include <unistd.h>
  46:argtable2.c   **** #endif
  47:argtable2.c   **** 
  48:argtable2.c   **** #include "argtable2.h"
  49:argtable2.c   **** #include "./getopt.h"
  50:argtable2.c   **** 
  51:argtable2.c   **** static
  52:argtable2.c   **** void arg_register_error(struct arg_end *end, void *parent, int error, const char *argval)
  53:argtable2.c   ****     {
   8              		.loc 1 53 0
   9              		.cfi_startproc
  10 0000 55       		pushq	%rbp
  11              		.cfi_def_cfa_offset 16
  12              		.cfi_offset 6, -16
  13 0001 4889E5   		movq	%rsp, %rbp
  14              		.cfi_def_cfa_register 6
  15 0004 48897DF8 		movq	%rdi, -8(%rbp)
  16 0008 488975F0 		movq	%rsi, -16(%rbp)
  17 000c 8955EC   		movl	%edx, -20(%rbp)
  18 000f 48894DE0 		movq	%rcx, -32(%rbp)
  54:argtable2.c   ****     /* printf("arg_register_error(%p,%p,%d,%s)\n",end,parent,error,argval); */
  55:argtable2.c   ****     if (end->count < end->hdr.maxcount)
  19              		.loc 1 55 0
  20 0013 488B45F8 		movq	-8(%rbp), %rax
  21 0017 8B5060   		movl	96(%rax), %edx
  22 001a 488B45F8 		movq	-8(%rbp), %rax
  23 001e 8B402C   		movl	44(%rax), %eax
  24 0021 39C2     		cmpl	%eax, %edx
  25 0023 7D6E     		jge	.L2
  56:argtable2.c   ****         {
  57:argtable2.c   ****         end->error[end->count] = error;
  26              		.loc 1 57 0
  27 0025 488B45F8 		movq	-8(%rbp), %rax
  28 0029 488B5068 		movq	104(%rax), %rdx
  29 002d 488B45F8 		movq	-8(%rbp), %rax
  30 0031 8B4060   		movl	96(%rax), %eax
  31 0034 4898     		cltq
  32 0036 48C1E002 		salq	$2, %rax
  33 003a 4801C2   		addq	%rax, %rdx
  34 003d 8B45EC   		movl	-20(%rbp), %eax
  35 0040 8902     		movl	%eax, (%rdx)
  58:argtable2.c   ****         end->parent[end->count] = parent;
  36              		.loc 1 58 0
  37 0042 488B45F8 		movq	-8(%rbp), %rax
  38 0046 488B5070 		movq	112(%rax), %rdx
  39 004a 488B45F8 		movq	-8(%rbp), %rax
  40 004e 8B4060   		movl	96(%rax), %eax
  41 0051 4898     		cltq
  42 0053 48C1E003 		salq	$3, %rax
  43 0057 4801C2   		addq	%rax, %rdx
  44 005a 488B45F0 		movq	-16(%rbp), %rax
  45 005e 488902   		movq	%rax, (%rdx)
  59:argtable2.c   ****         end->argval[end->count] = argval;
  46              		.loc 1 59 0
  47 0061 488B45F8 		movq	-8(%rbp), %rax
  48 0065 488B5078 		movq	120(%rax), %rdx
  49 0069 488B45F8 		movq	-8(%rbp), %rax
  50 006d 8B4060   		movl	96(%rax), %eax
  51 0070 4898     		cltq
  52 0072 48C1E003 		salq	$3, %rax
  53 0076 4801C2   		addq	%rax, %rdx
  54 0079 488B45E0 		movq	-32(%rbp), %rax
  55 007d 488902   		movq	%rax, (%rdx)
  60:argtable2.c   ****         end->count++;
  56              		.loc 1 60 0
  57 0080 488B45F8 		movq	-8(%rbp), %rax
  58 0084 8B4060   		movl	96(%rax), %eax
  59 0087 8D5001   		leal	1(%rax), %edx
  60 008a 488B45F8 		movq	-8(%rbp), %rax
  61 008e 895060   		movl	%edx, 96(%rax)
  61:argtable2.c   ****         }
  62:argtable2.c   ****     else
  63:argtable2.c   ****         {
  64:argtable2.c   ****         end->error[end->hdr.maxcount-1]  = ARG_ELIMIT;
  65:argtable2.c   ****         end->parent[end->hdr.maxcount-1] = end;
  66:argtable2.c   ****         end->argval[end->hdr.maxcount-1] = NULL;
  67:argtable2.c   ****         }
  68:argtable2.c   ****     }
  62              		.loc 1 68 0
  63 0091 EB68     		jmp	.L4
  64              	.L2:
  64:argtable2.c   ****         end->parent[end->hdr.maxcount-1] = end;
  65              		.loc 1 64 0
  66 0093 488B45F8 		movq	-8(%rbp), %rax
  67 0097 488B5068 		movq	104(%rax), %rdx
  68 009b 488B45F8 		movq	-8(%rbp), %rax
  69 009f 8B402C   		movl	44(%rax), %eax
  70 00a2 4898     		cltq
  71 00a4 48C1E002 		salq	$2, %rax
  72 00a8 4883E804 		subq	$4, %rax
  73 00ac 4801D0   		addq	%rdx, %rax
  74 00af C7000100 		movl	$1, (%rax)
  74      0000
  65:argtable2.c   ****         end->argval[end->hdr.maxcount-1] = NULL;
  75              		.loc 1 65 0
  76 00b5 488B45F8 		movq	-8(%rbp), %rax
  77 00b9 488B5070 		movq	112(%rax), %rdx
  78 00bd 488B45F8 		movq	-8(%rbp), %rax
  79 00c1 8B402C   		movl	44(%rax), %eax
  80 00c4 4898     		cltq
  81 00c6 48C1E003 		salq	$3, %rax
  82 00ca 4883E808 		subq	$8, %rax
  83 00ce 4801C2   		addq	%rax, %rdx
  84 00d1 488B45F8 		movq	-8(%rbp), %rax
  85 00d5 488902   		movq	%rax, (%rdx)
  66:argtable2.c   ****         }
  86              		.loc 1 66 0
  87 00d8 488B45F8 		movq	-8(%rbp), %rax
  88 00dc 488B5078 		movq	120(%rax), %rdx
  89 00e0 488B45F8 		movq	-8(%rbp), %rax
  90 00e4 8B402C   		movl	44(%rax), %eax
  91 00e7 4898     		cltq
  92 00e9 48C1E003 		salq	$3, %rax
  93 00ed 4883E808 		subq	$8, %rax
  94 00f1 4801D0   		addq	%rdx, %rax
  95 00f4 48C70000 		movq	$0, (%rax)
  95      000000
  96              	.L4:
  97              		.loc 1 68 0
  98 00fb 90       		nop
  99 00fc 5D       		popq	%rbp
 100              		.cfi_def_cfa 7, 8
 101 00fd C3       		ret
 102              		.cfi_endproc
 103              	.LFE0:
 106              	find_shortoption:
 107              	.LFB1:
  69:argtable2.c   **** 
  70:argtable2.c   **** 
  71:argtable2.c   **** /*
  72:argtable2.c   ****  * Return index of first table entry with a matching short option
  73:argtable2.c   ****  * or -1 if no match was found.
  74:argtable2.c   ****  */
  75:argtable2.c   **** static
  76:argtable2.c   **** int find_shortoption(struct arg_hdr **table, char shortopt)
  77:argtable2.c   ****     {
 108              		.loc 1 77 0
 109              		.cfi_startproc
 110 00fe 55       		pushq	%rbp
 111              		.cfi_def_cfa_offset 16
 112              		.cfi_offset 6, -16
 113 00ff 4889E5   		movq	%rsp, %rbp
 114              		.cfi_def_cfa_register 6
 115 0102 4883EC20 		subq	$32, %rsp
 116 0106 48897DE8 		movq	%rdi, -24(%rbp)
 117 010a 89F0     		movl	%esi, %eax
 118 010c 8845E4   		movb	%al, -28(%rbp)
  78:argtable2.c   ****     int tabindex;
  79:argtable2.c   ****     for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 119              		.loc 1 79 0
 120 010f C745FC00 		movl	$0, -4(%rbp)
 120      000000
 121 0116 EB57     		jmp	.L6
 122              	.L9:
  80:argtable2.c   ****         {
  81:argtable2.c   ****         if (table[tabindex]->shortopts && strchr(table[tabindex]->shortopts,shortopt))
 123              		.loc 1 81 0
 124 0118 8B45FC   		movl	-4(%rbp), %eax
 125 011b 4898     		cltq
 126 011d 488D14C5 		leaq	0(,%rax,8), %rdx
 126      00000000 
 127 0125 488B45E8 		movq	-24(%rbp), %rax
 128 0129 4801D0   		addq	%rdx, %rax
 129 012c 488B00   		movq	(%rax), %rax
 130 012f 488B4008 		movq	8(%rax), %rax
 131 0133 4885C0   		testq	%rax, %rax
 132 0136 7433     		je	.L7
 133              		.loc 1 81 0 is_stmt 0 discriminator 1
 134 0138 0FBE55E4 		movsbl	-28(%rbp), %edx
 135 013c 8B45FC   		movl	-4(%rbp), %eax
 136 013f 4898     		cltq
 137 0141 488D0CC5 		leaq	0(,%rax,8), %rcx
 137      00000000 
 138 0149 488B45E8 		movq	-24(%rbp), %rax
 139 014d 4801C8   		addq	%rcx, %rax
 140 0150 488B00   		movq	(%rax), %rax
 141 0153 488B4008 		movq	8(%rax), %rax
 142 0157 89D6     		movl	%edx, %esi
 143 0159 4889C7   		movq	%rax, %rdi
 144 015c E8000000 		call	strchr@PLT
 144      00
 145 0161 4885C0   		testq	%rax, %rax
 146 0164 7405     		je	.L7
  82:argtable2.c   ****             return tabindex;
 147              		.loc 1 82 0 is_stmt 1
 148 0166 8B45FC   		movl	-4(%rbp), %eax
 149 0169 EB2D     		jmp	.L8
 150              	.L7:
  79:argtable2.c   ****         {
 151              		.loc 1 79 0 discriminator 2
 152 016b 8345FC01 		addl	$1, -4(%rbp)
 153              	.L6:
  79:argtable2.c   ****         {
 154              		.loc 1 79 0 is_stmt 0 discriminator 1
 155 016f 8B45FC   		movl	-4(%rbp), %eax
 156 0172 4898     		cltq
 157 0174 488D14C5 		leaq	0(,%rax,8), %rdx
 157      00000000 
 158 017c 488B45E8 		movq	-24(%rbp), %rax
 159 0180 4801D0   		addq	%rdx, %rax
 160 0183 488B00   		movq	(%rax), %rax
 161 0186 0FB600   		movzbl	(%rax), %eax
 162 0189 0FBEC0   		movsbl	%al, %eax
 163 018c 83E001   		andl	$1, %eax
 164 018f 85C0     		testl	%eax, %eax
 165 0191 7485     		je	.L9
  83:argtable2.c   ****         }
  84:argtable2.c   ****     return -1;
 166              		.loc 1 84 0 is_stmt 1
 167 0193 B8FFFFFF 		movl	$-1, %eax
 167      FF
 168              	.L8:
  85:argtable2.c   ****     }
 169              		.loc 1 85 0
 170 0198 C9       		leave
 171              		.cfi_def_cfa 7, 8
 172 0199 C3       		ret
 173              		.cfi_endproc
 174              	.LFE1:
 176              		.section	.rodata
 177              	.LC0:
 178 0000 6765746F 		.string	"getoptval = %d\n"
 178      70747661 
 178      6C203D20 
 178      25640A00 
 179              	.LC1:
 180 0010 6E6F7074 		.string	"noptions  = %d\n"
 180      696F6E73 
 180      20203D20 
 180      25640A00 
 181              	.LC2:
 182 0020 6F707469 		.string	"options[%d].name    = \"%s\"\n"
 182      6F6E735B 
 182      25645D2E 
 182      6E616D65 
 182      20202020 
 183              	.LC3:
 184 003c 6F707469 		.string	"options[%d].has_arg = %d\n"
 184      6F6E735B 
 184      25645D2E 
 184      6861735F 
 184      61726720 
 185              	.LC4:
 186 0056 6F707469 		.string	"options[%d].flag    = %p\n"
 186      6F6E735B 
 186      25645D2E 
 186      666C6167 
 186      20202020 
 187              	.LC5:
 188 0070 6F707469 		.string	"options[%d].val     = %d\n"
 188      6F6E735B 
 188      25645D2E 
 188      76616C20 
 188      20202020 
 189              		.text
 191              	dump_longoptions:
 192              	.LFB2:
  86:argtable2.c   **** 
  87:argtable2.c   **** 
  88:argtable2.c   **** struct longoptions
  89:argtable2.c   ****     {
  90:argtable2.c   ****     int getoptval;
  91:argtable2.c   ****     int noptions;
  92:argtable2.c   ****     struct option *options;
  93:argtable2.c   ****     };
  94:argtable2.c   **** 
  95:argtable2.c   **** #ifndef NDEBUG
  96:argtable2.c   **** static
  97:argtable2.c   **** void dump_longoptions(struct longoptions* longoptions)
  98:argtable2.c   ****     {
 193              		.loc 1 98 0
 194              		.cfi_startproc
 195 019a 55       		pushq	%rbp
 196              		.cfi_def_cfa_offset 16
 197              		.cfi_offset 6, -16
 198 019b 4889E5   		movq	%rsp, %rbp
 199              		.cfi_def_cfa_register 6
 200 019e 4883EC20 		subq	$32, %rsp
 201 01a2 48897DE8 		movq	%rdi, -24(%rbp)
  99:argtable2.c   ****     int i;
 100:argtable2.c   ****     printf("getoptval = %d\n", longoptions->getoptval);
 202              		.loc 1 100 0
 203 01a6 488B45E8 		movq	-24(%rbp), %rax
 204 01aa 8B00     		movl	(%rax), %eax
 205 01ac 89C6     		movl	%eax, %esi
 206 01ae 488D3D00 		leaq	.LC0(%rip), %rdi
 206      000000
 207 01b5 B8000000 		movl	$0, %eax
 207      00
 208 01ba E8000000 		call	printf@PLT
 208      00
 101:argtable2.c   ****     printf("noptions  = %d\n", longoptions->noptions);
 209              		.loc 1 101 0
 210 01bf 488B45E8 		movq	-24(%rbp), %rax
 211 01c3 8B4004   		movl	4(%rax), %eax
 212 01c6 89C6     		movl	%eax, %esi
 213 01c8 488D3D00 		leaq	.LC1(%rip), %rdi
 213      000000
 214 01cf B8000000 		movl	$0, %eax
 214      00
 215 01d4 E8000000 		call	printf@PLT
 215      00
 102:argtable2.c   ****     for (i=0; i<longoptions->noptions; i++)
 216              		.loc 1 102 0
 217 01d9 C745FC00 		movl	$0, -4(%rbp)
 217      000000
 218 01e0 E9BD0000 		jmp	.L11
 218      00
 219              	.L12:
 103:argtable2.c   ****         {
 104:argtable2.c   ****         printf("options[%d].name    = \"%s\"\n", i, longoptions->options[i].name);
 220              		.loc 1 104 0 discriminator 3
 221 01e5 488B45E8 		movq	-24(%rbp), %rax
 222 01e9 488B4008 		movq	8(%rax), %rax
 223 01ed 8B55FC   		movl	-4(%rbp), %edx
 224 01f0 4863D2   		movslq	%edx, %rdx
 225 01f3 48C1E205 		salq	$5, %rdx
 226 01f7 4801D0   		addq	%rdx, %rax
 227 01fa 488B10   		movq	(%rax), %rdx
 228 01fd 8B45FC   		movl	-4(%rbp), %eax
 229 0200 89C6     		movl	%eax, %esi
 230 0202 488D3D00 		leaq	.LC2(%rip), %rdi
 230      000000
 231 0209 B8000000 		movl	$0, %eax
 231      00
 232 020e E8000000 		call	printf@PLT
 232      00
 105:argtable2.c   ****         printf("options[%d].has_arg = %d\n", i, longoptions->options[i].has_arg);
 233              		.loc 1 105 0 discriminator 3
 234 0213 488B45E8 		movq	-24(%rbp), %rax
 235 0217 488B4008 		movq	8(%rax), %rax
 236 021b 8B55FC   		movl	-4(%rbp), %edx
 237 021e 4863D2   		movslq	%edx, %rdx
 238 0221 48C1E205 		salq	$5, %rdx
 239 0225 4801D0   		addq	%rdx, %rax
 240 0228 8B5008   		movl	8(%rax), %edx
 241 022b 8B45FC   		movl	-4(%rbp), %eax
 242 022e 89C6     		movl	%eax, %esi
 243 0230 488D3D00 		leaq	.LC3(%rip), %rdi
 243      000000
 244 0237 B8000000 		movl	$0, %eax
 244      00
 245 023c E8000000 		call	printf@PLT
 245      00
 106:argtable2.c   ****         printf("options[%d].flag    = %p\n", i, longoptions->options[i].flag);
 246              		.loc 1 106 0 discriminator 3
 247 0241 488B45E8 		movq	-24(%rbp), %rax
 248 0245 488B4008 		movq	8(%rax), %rax
 249 0249 8B55FC   		movl	-4(%rbp), %edx
 250 024c 4863D2   		movslq	%edx, %rdx
 251 024f 48C1E205 		salq	$5, %rdx
 252 0253 4801D0   		addq	%rdx, %rax
 253 0256 488B5010 		movq	16(%rax), %rdx
 254 025a 8B45FC   		movl	-4(%rbp), %eax
 255 025d 89C6     		movl	%eax, %esi
 256 025f 488D3D00 		leaq	.LC4(%rip), %rdi
 256      000000
 257 0266 B8000000 		movl	$0, %eax
 257      00
 258 026b E8000000 		call	printf@PLT
 258      00
 107:argtable2.c   ****         printf("options[%d].val     = %d\n", i, longoptions->options[i].val);
 259              		.loc 1 107 0 discriminator 3
 260 0270 488B45E8 		movq	-24(%rbp), %rax
 261 0274 488B4008 		movq	8(%rax), %rax
 262 0278 8B55FC   		movl	-4(%rbp), %edx
 263 027b 4863D2   		movslq	%edx, %rdx
 264 027e 48C1E205 		salq	$5, %rdx
 265 0282 4801D0   		addq	%rdx, %rax
 266 0285 8B5018   		movl	24(%rax), %edx
 267 0288 8B45FC   		movl	-4(%rbp), %eax
 268 028b 89C6     		movl	%eax, %esi
 269 028d 488D3D00 		leaq	.LC5(%rip), %rdi
 269      000000
 270 0294 B8000000 		movl	$0, %eax
 270      00
 271 0299 E8000000 		call	printf@PLT
 271      00
 102:argtable2.c   ****         {
 272              		.loc 1 102 0 discriminator 3
 273 029e 8345FC01 		addl	$1, -4(%rbp)
 274              	.L11:
 102:argtable2.c   ****         {
 275              		.loc 1 102 0 is_stmt 0 discriminator 1
 276 02a2 488B45E8 		movq	-24(%rbp), %rax
 277 02a6 8B4004   		movl	4(%rax), %eax
 278 02a9 3B45FC   		cmpl	-4(%rbp), %eax
 279 02ac 0F8F33FF 		jg	.L12
 279      FFFF
 108:argtable2.c   ****         }
 109:argtable2.c   ****     }
 280              		.loc 1 109 0 is_stmt 1
 281 02b2 90       		nop
 282 02b3 C9       		leave
 283              		.cfi_def_cfa 7, 8
 284 02b4 C3       		ret
 285              		.cfi_endproc
 286              	.LFE2:
 289              	alloc_longoptions:
 290              	.LFB3:
 110:argtable2.c   **** #endif
 111:argtable2.c   **** 
 112:argtable2.c   **** static
 113:argtable2.c   **** struct longoptions* alloc_longoptions(struct arg_hdr **table)
 114:argtable2.c   ****     {
 291              		.loc 1 114 0
 292              		.cfi_startproc
 293 02b5 55       		pushq	%rbp
 294              		.cfi_def_cfa_offset 16
 295              		.cfi_offset 6, -16
 296 02b6 4889E5   		movq	%rsp, %rbp
 297              		.cfi_def_cfa_register 6
 298 02b9 4883EC60 		subq	$96, %rsp
 299 02bd 48897DA8 		movq	%rdi, -88(%rbp)
 115:argtable2.c   ****     struct longoptions *result;
 116:argtable2.c   ****     size_t nbytes;
 117:argtable2.c   ****     int noptions = 1;
 300              		.loc 1 117 0
 301 02c1 C745BC01 		movl	$1, -68(%rbp)
 301      000000
 118:argtable2.c   ****     size_t longoptlen = 0;
 302              		.loc 1 118 0
 303 02c8 48C745C8 		movq	$0, -56(%rbp)
 303      00000000 
 119:argtable2.c   ****     int tabindex;
 120:argtable2.c   **** 
 121:argtable2.c   ****     /*
 122:argtable2.c   ****      * Determine the total number of option structs required
 123:argtable2.c   ****      * by counting the number of comma separated long options
 124:argtable2.c   ****      * in all table entries and return the count in noptions.
 125:argtable2.c   ****      * note: noptions starts at 1 not 0 because we getoptlong
 126:argtable2.c   ****      * requires a NULL option entry to terminate the option array.
 127:argtable2.c   ****      * While we are at it, count the number of chars required
 128:argtable2.c   ****      * to store private copies of all the longoption strings
 129:argtable2.c   ****      * and return that count in logoptlen.
 130:argtable2.c   ****      */
 131:argtable2.c   ****      tabindex=0;
 304              		.loc 1 131 0
 305 02d0 C745C000 		movl	$0, -64(%rbp)
 305      000000
 306              	.L18:
 307              	.LBB2:
 132:argtable2.c   ****      do
 133:argtable2.c   ****         {
 134:argtable2.c   ****         const char *longopts = table[tabindex]->longopts;
 308              		.loc 1 134 0
 309 02d7 8B45C0   		movl	-64(%rbp), %eax
 310 02da 4898     		cltq
 311 02dc 488D14C5 		leaq	0(,%rax,8), %rdx
 311      00000000 
 312 02e4 488B45A8 		movq	-88(%rbp), %rax
 313 02e8 4801D0   		addq	%rdx, %rax
 314 02eb 488B00   		movq	(%rax), %rax
 315 02ee 488B4010 		movq	16(%rax), %rax
 316 02f2 488945D0 		movq	%rax, -48(%rbp)
 135:argtable2.c   ****         longoptlen += (longopts?strlen(longopts):0) + 1;
 317              		.loc 1 135 0
 318 02f6 48837DD0 		cmpq	$0, -48(%rbp)
 318      00
 319 02fb 7412     		je	.L14
 320              		.loc 1 135 0 is_stmt 0 discriminator 1
 321 02fd 488B45D0 		movq	-48(%rbp), %rax
 322 0301 4889C7   		movq	%rax, %rdi
 323 0304 E8000000 		call	strlen@PLT
 323      00
 324 0309 4883C001 		addq	$1, %rax
 325 030d EB05     		jmp	.L15
 326              	.L14:
 327              		.loc 1 135 0 discriminator 2
 328 030f B8010000 		movl	$1, %eax
 328      00
 329              	.L15:
 330              		.loc 1 135 0 discriminator 4
 331 0314 480145C8 		addq	%rax, -56(%rbp)
 136:argtable2.c   ****         while (longopts)
 332              		.loc 1 136 0 is_stmt 1 discriminator 4
 333 0318 EB1D     		jmp	.L16
 334              	.L17:
 137:argtable2.c   ****             {
 138:argtable2.c   ****             noptions++;
 335              		.loc 1 138 0
 336 031a 8345BC01 		addl	$1, -68(%rbp)
 139:argtable2.c   ****             longopts = strchr(longopts+1,',');
 337              		.loc 1 139 0
 338 031e 488B45D0 		movq	-48(%rbp), %rax
 339 0322 4883C001 		addq	$1, %rax
 340 0326 BE2C0000 		movl	$44, %esi
 340      00
 341 032b 4889C7   		movq	%rax, %rdi
 342 032e E8000000 		call	strchr@PLT
 342      00
 343 0333 488945D0 		movq	%rax, -48(%rbp)
 344              	.L16:
 136:argtable2.c   ****         while (longopts)
 345              		.loc 1 136 0
 346 0337 48837DD0 		cmpq	$0, -48(%rbp)
 346      00
 347 033c 75DC     		jne	.L17
 348              	.LBE2:
 140:argtable2.c   ****             }
 141:argtable2.c   ****         }while(!(table[tabindex++]->flag&ARG_TERMINATOR));
 349              		.loc 1 141 0
 350 033e 8B45C0   		movl	-64(%rbp), %eax
 351 0341 8D5001   		leal	1(%rax), %edx
 352 0344 8955C0   		movl	%edx, -64(%rbp)
 353 0347 4898     		cltq
 354 0349 488D14C5 		leaq	0(,%rax,8), %rdx
 354      00000000 
 355 0351 488B45A8 		movq	-88(%rbp), %rax
 356 0355 4801D0   		addq	%rdx, %rax
 357 0358 488B00   		movq	(%rax), %rax
 358 035b 0FB600   		movzbl	(%rax), %eax
 359 035e 0FBEC0   		movsbl	%al, %eax
 360 0361 83E001   		andl	$1, %eax
 361 0364 85C0     		testl	%eax, %eax
 362 0366 0F846BFF 		je	.L18
 362      FFFF
 142:argtable2.c   ****     /*printf("%d long options consuming %d chars in total\n",noptions,longoptlen);*/
 143:argtable2.c   **** 
 144:argtable2.c   **** 
 145:argtable2.c   ****     /* allocate storage for return data structure as: */
 146:argtable2.c   ****     /* (struct longoptions) + (struct options)[noptions] + char[longoptlen] */
 147:argtable2.c   ****     nbytes = sizeof(struct longoptions)
 148:argtable2.c   ****            + sizeof(struct option)*noptions
 363              		.loc 1 148 0
 364 036c 8B45BC   		movl	-68(%rbp), %eax
 365 036f 4898     		cltq
 366 0371 48C1E005 		salq	$5, %rax
 367 0375 4889C2   		movq	%rax, %rdx
 149:argtable2.c   ****            + longoptlen;
 368              		.loc 1 149 0
 369 0378 488B45C8 		movq	-56(%rbp), %rax
 370 037c 4801D0   		addq	%rdx, %rax
 147:argtable2.c   ****            + sizeof(struct option)*noptions
 371              		.loc 1 147 0
 372 037f 4883C010 		addq	$16, %rax
 373 0383 488945E8 		movq	%rax, -24(%rbp)
 150:argtable2.c   ****     result = (struct longoptions*)malloc(nbytes);
 374              		.loc 1 150 0
 375 0387 488B45E8 		movq	-24(%rbp), %rax
 376 038b 4889C7   		movq	%rax, %rdi
 377 038e E8000000 		call	malloc@PLT
 377      00
 378 0393 488945F0 		movq	%rax, -16(%rbp)
 151:argtable2.c   ****     if (result)
 379              		.loc 1 151 0
 380 0397 48837DF0 		cmpq	$0, -16(%rbp)
 380      00
 381 039c 0F847B02 		je	.L19
 381      0000
 382              	.LBB3:
 152:argtable2.c   ****         {
 153:argtable2.c   ****         int option_index=0;
 383              		.loc 1 153 0
 384 03a2 C745C400 		movl	$0, -60(%rbp)
 384      000000
 154:argtable2.c   ****         char *store;
 155:argtable2.c   **** 
 156:argtable2.c   ****         result->getoptval=0;
 385              		.loc 1 156 0
 386 03a9 488B45F0 		movq	-16(%rbp), %rax
 387 03ad C7000000 		movl	$0, (%rax)
 387      0000
 157:argtable2.c   ****         result->noptions = noptions;
 388              		.loc 1 157 0
 389 03b3 488B45F0 		movq	-16(%rbp), %rax
 390 03b7 8B55BC   		movl	-68(%rbp), %edx
 391 03ba 895004   		movl	%edx, 4(%rax)
 158:argtable2.c   ****         result->options = (struct option*)(result + 1);
 392              		.loc 1 158 0
 393 03bd 488B45F0 		movq	-16(%rbp), %rax
 394 03c1 488D5010 		leaq	16(%rax), %rdx
 395 03c5 488B45F0 		movq	-16(%rbp), %rax
 396 03c9 48895008 		movq	%rdx, 8(%rax)
 159:argtable2.c   ****         store = (char*)(result->options + noptions);
 397              		.loc 1 159 0
 398 03cd 488B45F0 		movq	-16(%rbp), %rax
 399 03d1 488B4008 		movq	8(%rax), %rax
 400 03d5 8B55BC   		movl	-68(%rbp), %edx
 401 03d8 4863D2   		movslq	%edx, %rdx
 402 03db 48C1E205 		salq	$5, %rdx
 403 03df 4801D0   		addq	%rdx, %rax
 404 03e2 488945D8 		movq	%rax, -40(%rbp)
 160:argtable2.c   **** 
 161:argtable2.c   ****         for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 405              		.loc 1 161 0
 406 03e6 C745C000 		movl	$0, -64(%rbp)
 406      000000
 407 03ed E9920100 		jmp	.L20
 407      00
 408              	.L31:
 409              	.LBB4:
 162:argtable2.c   ****             {
 163:argtable2.c   ****             const char *longopts = table[tabindex]->longopts;
 410              		.loc 1 163 0
 411 03f2 8B45C0   		movl	-64(%rbp), %eax
 412 03f5 4898     		cltq
 413 03f7 488D14C5 		leaq	0(,%rax,8), %rdx
 413      00000000 
 414 03ff 488B45A8 		movq	-88(%rbp), %rax
 415 0403 4801D0   		addq	%rdx, %rax
 416 0406 488B00   		movq	(%rax), %rax
 417 0409 488B4010 		movq	16(%rax), %rax
 418 040d 488945E0 		movq	%rax, -32(%rbp)
 164:argtable2.c   **** 
 165:argtable2.c   ****             while(longopts && *longopts)
 419              		.loc 1 165 0
 420 0411 E9540100 		jmp	.L21
 420      00
 421              	.L30:
 422              	.LBB5:
 166:argtable2.c   ****                 {
 167:argtable2.c   ****                 char *storestart = store;
 423              		.loc 1 167 0
 424 0416 488B45D8 		movq	-40(%rbp), %rax
 425 041a 488945F8 		movq	%rax, -8(%rbp)
 168:argtable2.c   **** 
 169:argtable2.c   ****                 /* copy progressive longopt strings into the store */
 170:argtable2.c   ****                 while (*longopts!=0 && *longopts!=',')
 426              		.loc 1 170 0
 427 041e EB1D     		jmp	.L22
 428              	.L24:
 171:argtable2.c   ****                     *store++ = *longopts++;
 429              		.loc 1 171 0
 430 0420 488B45D8 		movq	-40(%rbp), %rax
 431 0424 488D5001 		leaq	1(%rax), %rdx
 432 0428 488955D8 		movq	%rdx, -40(%rbp)
 433 042c 488B55E0 		movq	-32(%rbp), %rdx
 434 0430 488D4A01 		leaq	1(%rdx), %rcx
 435 0434 48894DE0 		movq	%rcx, -32(%rbp)
 436 0438 0FB612   		movzbl	(%rdx), %edx
 437 043b 8810     		movb	%dl, (%rax)
 438              	.L22:
 170:argtable2.c   ****                     *store++ = *longopts++;
 439              		.loc 1 170 0
 440 043d 488B45E0 		movq	-32(%rbp), %rax
 441 0441 0FB600   		movzbl	(%rax), %eax
 442 0444 84C0     		testb	%al, %al
 443 0446 740B     		je	.L23
 170:argtable2.c   ****                     *store++ = *longopts++;
 444              		.loc 1 170 0 is_stmt 0 discriminator 1
 445 0448 488B45E0 		movq	-32(%rbp), %rax
 446 044c 0FB600   		movzbl	(%rax), %eax
 447 044f 3C2C     		cmpb	$44, %al
 448 0451 75CD     		jne	.L24
 449              	.L23:
 172:argtable2.c   ****                 *store++ = 0;
 450              		.loc 1 172 0 is_stmt 1
 451 0453 488B45D8 		movq	-40(%rbp), %rax
 452 0457 488D5001 		leaq	1(%rax), %rdx
 453 045b 488955D8 		movq	%rdx, -40(%rbp)
 454 045f C60000   		movb	$0, (%rax)
 173:argtable2.c   ****                 if (*longopts==',')
 455              		.loc 1 173 0
 456 0462 488B45E0 		movq	-32(%rbp), %rax
 457 0466 0FB600   		movzbl	(%rax), %eax
 458 0469 3C2C     		cmpb	$44, %al
 459 046b 7505     		jne	.L25
 174:argtable2.c   ****                     longopts++;
 460              		.loc 1 174 0
 461 046d 488345E0 		addq	$1, -32(%rbp)
 461      01
 462              	.L25:
 175:argtable2.c   ****                 /*fprintf(stderr,"storestart=\"%s\"\n",storestart);*/
 176:argtable2.c   **** 
 177:argtable2.c   ****                 result->options[option_index].name    = storestart;
 463              		.loc 1 177 0
 464 0472 488B45F0 		movq	-16(%rbp), %rax
 465 0476 488B4008 		movq	8(%rax), %rax
 466 047a 8B55C4   		movl	-60(%rbp), %edx
 467 047d 4863D2   		movslq	%edx, %rdx
 468 0480 48C1E205 		salq	$5, %rdx
 469 0484 4801C2   		addq	%rax, %rdx
 470 0487 488B45F8 		movq	-8(%rbp), %rax
 471 048b 488902   		movq	%rax, (%rdx)
 178:argtable2.c   ****                 result->options[option_index].flag    = &(result->getoptval);
 472              		.loc 1 178 0
 473 048e 488B45F0 		movq	-16(%rbp), %rax
 474 0492 488B4008 		movq	8(%rax), %rax
 475 0496 8B55C4   		movl	-60(%rbp), %edx
 476 0499 4863D2   		movslq	%edx, %rdx
 477 049c 48C1E205 		salq	$5, %rdx
 478 04a0 4801C2   		addq	%rax, %rdx
 479 04a3 488B45F0 		movq	-16(%rbp), %rax
 480 04a7 48894210 		movq	%rax, 16(%rdx)
 179:argtable2.c   ****                 result->options[option_index].val     = tabindex;
 481              		.loc 1 179 0
 482 04ab 488B45F0 		movq	-16(%rbp), %rax
 483 04af 488B4008 		movq	8(%rax), %rax
 484 04b3 8B55C4   		movl	-60(%rbp), %edx
 485 04b6 4863D2   		movslq	%edx, %rdx
 486 04b9 48C1E205 		salq	$5, %rdx
 487 04bd 4801C2   		addq	%rax, %rdx
 488 04c0 8B45C0   		movl	-64(%rbp), %eax
 489 04c3 894218   		movl	%eax, 24(%rdx)
 180:argtable2.c   ****                 if (table[tabindex]->flag & ARG_HASOPTVALUE)
 490              		.loc 1 180 0
 491 04c6 8B45C0   		movl	-64(%rbp), %eax
 492 04c9 4898     		cltq
 493 04cb 488D14C5 		leaq	0(,%rax,8), %rdx
 493      00000000 
 494 04d3 488B45A8 		movq	-88(%rbp), %rax
 495 04d7 4801D0   		addq	%rdx, %rax
 496 04da 488B00   		movq	(%rax), %rax
 497 04dd 0FB600   		movzbl	(%rax), %eax
 498 04e0 0FBEC0   		movsbl	%al, %eax
 499 04e3 83E004   		andl	$4, %eax
 500 04e6 85C0     		testl	%eax, %eax
 501 04e8 741E     		je	.L26
 181:argtable2.c   ****                     result->options[option_index].has_arg = 2;
 502              		.loc 1 181 0
 503 04ea 488B45F0 		movq	-16(%rbp), %rax
 504 04ee 488B4008 		movq	8(%rax), %rax
 505 04f2 8B55C4   		movl	-60(%rbp), %edx
 506 04f5 4863D2   		movslq	%edx, %rdx
 507 04f8 48C1E205 		salq	$5, %rdx
 508 04fc 4801D0   		addq	%rdx, %rax
 509 04ff C7400802 		movl	$2, 8(%rax)
 509      000000
 510 0506 EB5E     		jmp	.L27
 511              	.L26:
 182:argtable2.c   ****                 else if (table[tabindex]->flag & ARG_HASVALUE)
 512              		.loc 1 182 0
 513 0508 8B45C0   		movl	-64(%rbp), %eax
 514 050b 4898     		cltq
 515 050d 488D14C5 		leaq	0(,%rax,8), %rdx
 515      00000000 
 516 0515 488B45A8 		movq	-88(%rbp), %rax
 517 0519 4801D0   		addq	%rdx, %rax
 518 051c 488B00   		movq	(%rax), %rax
 519 051f 0FB600   		movzbl	(%rax), %eax
 520 0522 0FBEC0   		movsbl	%al, %eax
 521 0525 83E002   		andl	$2, %eax
 522 0528 85C0     		testl	%eax, %eax
 523 052a 741E     		je	.L28
 183:argtable2.c   ****                     result->options[option_index].has_arg = 1;
 524              		.loc 1 183 0
 525 052c 488B45F0 		movq	-16(%rbp), %rax
 526 0530 488B4008 		movq	8(%rax), %rax
 527 0534 8B55C4   		movl	-60(%rbp), %edx
 528 0537 4863D2   		movslq	%edx, %rdx
 529 053a 48C1E205 		salq	$5, %rdx
 530 053e 4801D0   		addq	%rdx, %rax
 531 0541 C7400801 		movl	$1, 8(%rax)
 531      000000
 532 0548 EB1C     		jmp	.L27
 533              	.L28:
 184:argtable2.c   ****                 else
 185:argtable2.c   ****                     result->options[option_index].has_arg = 0;
 534              		.loc 1 185 0
 535 054a 488B45F0 		movq	-16(%rbp), %rax
 536 054e 488B4008 		movq	8(%rax), %rax
 537 0552 8B55C4   		movl	-60(%rbp), %edx
 538 0555 4863D2   		movslq	%edx, %rdx
 539 0558 48C1E205 		salq	$5, %rdx
 540 055c 4801D0   		addq	%rdx, %rax
 541 055f C7400800 		movl	$0, 8(%rax)
 541      000000
 542              	.L27:
 186:argtable2.c   **** 
 187:argtable2.c   ****                 option_index++;
 543              		.loc 1 187 0
 544 0566 8345C401 		addl	$1, -60(%rbp)
 545              	.L21:
 546              	.LBE5:
 165:argtable2.c   ****                 {
 547              		.loc 1 165 0
 548 056a 48837DE0 		cmpq	$0, -32(%rbp)
 548      00
 549 056f 740F     		je	.L29
 165:argtable2.c   ****                 {
 550              		.loc 1 165 0 is_stmt 0 discriminator 1
 551 0571 488B45E0 		movq	-32(%rbp), %rax
 552 0575 0FB600   		movzbl	(%rax), %eax
 553 0578 84C0     		testb	%al, %al
 554 057a 0F8596FE 		jne	.L30
 554      FFFF
 555              	.L29:
 556              	.LBE4:
 161:argtable2.c   ****             {
 557              		.loc 1 161 0 is_stmt 1 discriminator 2
 558 0580 8345C001 		addl	$1, -64(%rbp)
 559              	.L20:
 161:argtable2.c   ****             {
 560              		.loc 1 161 0 is_stmt 0 discriminator 1
 561 0584 8B45C0   		movl	-64(%rbp), %eax
 562 0587 4898     		cltq
 563 0589 488D14C5 		leaq	0(,%rax,8), %rdx
 563      00000000 
 564 0591 488B45A8 		movq	-88(%rbp), %rax
 565 0595 4801D0   		addq	%rdx, %rax
 566 0598 488B00   		movq	(%rax), %rax
 567 059b 0FB600   		movzbl	(%rax), %eax
 568 059e 0FBEC0   		movsbl	%al, %eax
 569 05a1 83E001   		andl	$1, %eax
 570 05a4 85C0     		testl	%eax, %eax
 571 05a6 0F8446FE 		je	.L31
 571      FFFF
 188:argtable2.c   ****                 }
 189:argtable2.c   ****             }
 190:argtable2.c   ****         /* terminate the options array with a zero-filled entry */
 191:argtable2.c   ****         result->options[option_index].name    = 0;
 572              		.loc 1 191 0 is_stmt 1
 573 05ac 488B45F0 		movq	-16(%rbp), %rax
 574 05b0 488B4008 		movq	8(%rax), %rax
 575 05b4 8B55C4   		movl	-60(%rbp), %edx
 576 05b7 4863D2   		movslq	%edx, %rdx
 577 05ba 48C1E205 		salq	$5, %rdx
 578 05be 4801D0   		addq	%rdx, %rax
 579 05c1 48C70000 		movq	$0, (%rax)
 579      000000
 192:argtable2.c   ****         result->options[option_index].has_arg = 0;
 580              		.loc 1 192 0
 581 05c8 488B45F0 		movq	-16(%rbp), %rax
 582 05cc 488B4008 		movq	8(%rax), %rax
 583 05d0 8B55C4   		movl	-60(%rbp), %edx
 584 05d3 4863D2   		movslq	%edx, %rdx
 585 05d6 48C1E205 		salq	$5, %rdx
 586 05da 4801D0   		addq	%rdx, %rax
 587 05dd C7400800 		movl	$0, 8(%rax)
 587      000000
 193:argtable2.c   ****         result->options[option_index].flag    = 0;
 588              		.loc 1 193 0
 589 05e4 488B45F0 		movq	-16(%rbp), %rax
 590 05e8 488B4008 		movq	8(%rax), %rax
 591 05ec 8B55C4   		movl	-60(%rbp), %edx
 592 05ef 4863D2   		movslq	%edx, %rdx
 593 05f2 48C1E205 		salq	$5, %rdx
 594 05f6 4801D0   		addq	%rdx, %rax
 595 05f9 48C74010 		movq	$0, 16(%rax)
 595      00000000 
 194:argtable2.c   ****         result->options[option_index].val     = 0;
 596              		.loc 1 194 0
 597 0601 488B45F0 		movq	-16(%rbp), %rax
 598 0605 488B4008 		movq	8(%rax), %rax
 599 0609 8B55C4   		movl	-60(%rbp), %edx
 600 060c 4863D2   		movslq	%edx, %rdx
 601 060f 48C1E205 		salq	$5, %rdx
 602 0613 4801D0   		addq	%rdx, %rax
 603 0616 C7401800 		movl	$0, 24(%rax)
 603      000000
 604              	.L19:
 605              	.LBE3:
 195:argtable2.c   ****         }
 196:argtable2.c   **** 
 197:argtable2.c   ****     /*dump_longoptions(result);*/
 198:argtable2.c   ****     return result;
 606              		.loc 1 198 0
 607 061d 488B45F0 		movq	-16(%rbp), %rax
 199:argtable2.c   ****     }
 608              		.loc 1 199 0
 609 0621 C9       		leave
 610              		.cfi_def_cfa 7, 8
 611 0622 C3       		ret
 612              		.cfi_endproc
 613              	.LFE3:
 616              	alloc_shortoptions:
 617              	.LFB4:
 200:argtable2.c   **** 
 201:argtable2.c   **** static
 202:argtable2.c   **** char* alloc_shortoptions(struct arg_hdr **table)
 203:argtable2.c   ****    {
 618              		.loc 1 203 0
 619              		.cfi_startproc
 620 0623 55       		pushq	%rbp
 621              		.cfi_def_cfa_offset 16
 622              		.cfi_offset 6, -16
 623 0624 4889E5   		movq	%rsp, %rbp
 624              		.cfi_def_cfa_register 6
 625 0627 4883EC50 		subq	$80, %rsp
 626 062b 48897DB8 		movq	%rdi, -72(%rbp)
 204:argtable2.c   ****    char *result;
 205:argtable2.c   ****    size_t len = 2;
 627              		.loc 1 205 0
 628 062f 48C745D0 		movq	$2, -48(%rbp)
 628      02000000 
 206:argtable2.c   ****    int tabindex;
 207:argtable2.c   **** 
 208:argtable2.c   ****    /* determine the total number of option chars required */
 209:argtable2.c   ****    for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 629              		.loc 1 209 0
 630 0637 C745CC00 		movl	$0, -52(%rbp)
 630      000000
 631 063e EB53     		jmp	.L34
 632              	.L37:
 633              	.LBB6:
 210:argtable2.c   ****        {
 211:argtable2.c   ****        struct arg_hdr *hdr = table[tabindex];
 634              		.loc 1 211 0
 635 0640 8B45CC   		movl	-52(%rbp), %eax
 636 0643 4898     		cltq
 637 0645 488D14C5 		leaq	0(,%rax,8), %rdx
 637      00000000 
 638 064d 488B45B8 		movq	-72(%rbp), %rax
 639 0651 4801D0   		addq	%rdx, %rax
 640 0654 488B00   		movq	(%rax), %rax
 641 0657 488945E8 		movq	%rax, -24(%rbp)
 212:argtable2.c   ****        len += 3 * (hdr->shortopts?strlen(hdr->shortopts):0);
 642              		.loc 1 212 0
 643 065b 488B45E8 		movq	-24(%rbp), %rax
 644 065f 488B4008 		movq	8(%rax), %rax
 645 0663 4885C0   		testq	%rax, %rax
 646 0666 741E     		je	.L35
 647              		.loc 1 212 0 is_stmt 0 discriminator 1
 648 0668 488B45E8 		movq	-24(%rbp), %rax
 649 066c 488B4008 		movq	8(%rax), %rax
 650 0670 4889C7   		movq	%rax, %rdi
 651 0673 E8000000 		call	strlen@PLT
 651      00
 652 0678 4889C2   		movq	%rax, %rdx
 653 067b 4889D0   		movq	%rdx, %rax
 654 067e 4801C0   		addq	%rax, %rax
 655 0681 4801D0   		addq	%rdx, %rax
 656 0684 EB05     		jmp	.L36
 657              	.L35:
 658              		.loc 1 212 0 discriminator 2
 659 0686 B8000000 		movl	$0, %eax
 659      00
 660              	.L36:
 661              		.loc 1 212 0 discriminator 4
 662 068b 480145D0 		addq	%rax, -48(%rbp)
 663              	.LBE6:
 209:argtable2.c   ****        {
 664              		.loc 1 209 0 is_stmt 1 discriminator 4
 665 068f 8345CC01 		addl	$1, -52(%rbp)
 666              	.L34:
 209:argtable2.c   ****        {
 667              		.loc 1 209 0 is_stmt 0 discriminator 2
 668 0693 8B45CC   		movl	-52(%rbp), %eax
 669 0696 4898     		cltq
 670 0698 488D14C5 		leaq	0(,%rax,8), %rdx
 670      00000000 
 671 06a0 488B45B8 		movq	-72(%rbp), %rax
 672 06a4 4801D0   		addq	%rdx, %rax
 673 06a7 488B00   		movq	(%rax), %rax
 674 06aa 0FB600   		movzbl	(%rax), %eax
 675 06ad 0FBEC0   		movsbl	%al, %eax
 676 06b0 83E001   		andl	$1, %eax
 677 06b3 85C0     		testl	%eax, %eax
 678 06b5 7489     		je	.L37
 213:argtable2.c   ****        }
 214:argtable2.c   **** 
 215:argtable2.c   ****    result = malloc(len);
 679              		.loc 1 215 0 is_stmt 1
 680 06b7 488B45D0 		movq	-48(%rbp), %rax
 681 06bb 4889C7   		movq	%rax, %rdi
 682 06be E8000000 		call	malloc@PLT
 682      00
 683 06c3 488945F0 		movq	%rax, -16(%rbp)
 216:argtable2.c   ****    if (result)
 684              		.loc 1 216 0
 685 06c7 48837DF0 		cmpq	$0, -16(%rbp)
 685      00
 686 06cc 0F84EE00 		je	.L38
 686      0000
 687              	.LBB7:
 217:argtable2.c   ****         {
 218:argtable2.c   ****         char *res = result;
 688              		.loc 1 218 0
 689 06d2 488B45F0 		movq	-16(%rbp), %rax
 690 06d6 488945D8 		movq	%rax, -40(%rbp)
 219:argtable2.c   **** 
 220:argtable2.c   ****         /* add a leading ':' so getopt return codes distinguish    */
 221:argtable2.c   ****         /* unrecognised option and options missing argument values */
 222:argtable2.c   ****         *res++=':';
 691              		.loc 1 222 0
 692 06da 488B45D8 		movq	-40(%rbp), %rax
 693 06de 488D5001 		leaq	1(%rax), %rdx
 694 06e2 488955D8 		movq	%rdx, -40(%rbp)
 695 06e6 C6003A   		movb	$58, (%rax)
 223:argtable2.c   **** 
 224:argtable2.c   ****         for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 696              		.loc 1 224 0
 697 06e9 C745CC00 		movl	$0, -52(%rbp)
 697      000000
 698 06f0 E99C0000 		jmp	.L39
 698      00
 699              	.L44:
 700              	.LBB8:
 225:argtable2.c   ****             {
 226:argtable2.c   ****             struct arg_hdr *hdr = table[tabindex];
 701              		.loc 1 226 0
 702 06f5 8B45CC   		movl	-52(%rbp), %eax
 703 06f8 4898     		cltq
 704 06fa 488D14C5 		leaq	0(,%rax,8), %rdx
 704      00000000 
 705 0702 488B45B8 		movq	-72(%rbp), %rax
 706 0706 4801D0   		addq	%rdx, %rax
 707 0709 488B00   		movq	(%rax), %rax
 708 070c 488945F8 		movq	%rax, -8(%rbp)
 227:argtable2.c   ****             const char *shortopts = hdr->shortopts;
 709              		.loc 1 227 0
 710 0710 488B45F8 		movq	-8(%rbp), %rax
 711 0714 488B4008 		movq	8(%rax), %rax
 712 0718 488945E0 		movq	%rax, -32(%rbp)
 228:argtable2.c   ****             while(shortopts && *shortopts)
 713              		.loc 1 228 0
 714 071c EB5D     		jmp	.L40
 715              	.L43:
 229:argtable2.c   ****                 {
 230:argtable2.c   ****                 *res++ = *shortopts++;
 716              		.loc 1 230 0
 717 071e 488B45D8 		movq	-40(%rbp), %rax
 718 0722 488D5001 		leaq	1(%rax), %rdx
 719 0726 488955D8 		movq	%rdx, -40(%rbp)
 720 072a 488B55E0 		movq	-32(%rbp), %rdx
 721 072e 488D4A01 		leaq	1(%rdx), %rcx
 722 0732 48894DE0 		movq	%rcx, -32(%rbp)
 723 0736 0FB612   		movzbl	(%rdx), %edx
 724 0739 8810     		movb	%dl, (%rax)
 231:argtable2.c   ****                 if (hdr->flag & ARG_HASVALUE)
 725              		.loc 1 231 0
 726 073b 488B45F8 		movq	-8(%rbp), %rax
 727 073f 0FB600   		movzbl	(%rax), %eax
 728 0742 0FBEC0   		movsbl	%al, %eax
 729 0745 83E002   		andl	$2, %eax
 730 0748 85C0     		testl	%eax, %eax
 731 074a 740F     		je	.L41
 232:argtable2.c   ****                     *res++=':';
 732              		.loc 1 232 0
 733 074c 488B45D8 		movq	-40(%rbp), %rax
 734 0750 488D5001 		leaq	1(%rax), %rdx
 735 0754 488955D8 		movq	%rdx, -40(%rbp)
 736 0758 C6003A   		movb	$58, (%rax)
 737              	.L41:
 233:argtable2.c   ****                 if (hdr->flag & ARG_HASOPTVALUE)
 738              		.loc 1 233 0
 739 075b 488B45F8 		movq	-8(%rbp), %rax
 740 075f 0FB600   		movzbl	(%rax), %eax
 741 0762 0FBEC0   		movsbl	%al, %eax
 742 0765 83E004   		andl	$4, %eax
 743 0768 85C0     		testl	%eax, %eax
 744 076a 740F     		je	.L40
 234:argtable2.c   ****                     *res++=':';
 745              		.loc 1 234 0
 746 076c 488B45D8 		movq	-40(%rbp), %rax
 747 0770 488D5001 		leaq	1(%rax), %rdx
 748 0774 488955D8 		movq	%rdx, -40(%rbp)
 749 0778 C6003A   		movb	$58, (%rax)
 750              	.L40:
 228:argtable2.c   ****                 {
 751              		.loc 1 228 0
 752 077b 48837DE0 		cmpq	$0, -32(%rbp)
 752      00
 753 0780 740B     		je	.L42
 228:argtable2.c   ****                 {
 754              		.loc 1 228 0 is_stmt 0 discriminator 1
 755 0782 488B45E0 		movq	-32(%rbp), %rax
 756 0786 0FB600   		movzbl	(%rax), %eax
 757 0789 84C0     		testb	%al, %al
 758 078b 7591     		jne	.L43
 759              	.L42:
 760              	.LBE8:
 224:argtable2.c   ****             {
 761              		.loc 1 224 0 is_stmt 1 discriminator 2
 762 078d 8345CC01 		addl	$1, -52(%rbp)
 763              	.L39:
 224:argtable2.c   ****             {
 764              		.loc 1 224 0 is_stmt 0 discriminator 1
 765 0791 8B45CC   		movl	-52(%rbp), %eax
 766 0794 4898     		cltq
 767 0796 488D14C5 		leaq	0(,%rax,8), %rdx
 767      00000000 
 768 079e 488B45B8 		movq	-72(%rbp), %rax
 769 07a2 4801D0   		addq	%rdx, %rax
 770 07a5 488B00   		movq	(%rax), %rax
 771 07a8 0FB600   		movzbl	(%rax), %eax
 772 07ab 0FBEC0   		movsbl	%al, %eax
 773 07ae 83E001   		andl	$1, %eax
 774 07b1 85C0     		testl	%eax, %eax
 775 07b3 0F843CFF 		je	.L44
 775      FFFF
 235:argtable2.c   ****                 }
 236:argtable2.c   ****             }
 237:argtable2.c   ****         /* null terminate the string */
 238:argtable2.c   ****         *res=0;
 776              		.loc 1 238 0 is_stmt 1
 777 07b9 488B45D8 		movq	-40(%rbp), %rax
 778 07bd C60000   		movb	$0, (%rax)
 779              	.L38:
 780              	.LBE7:
 239:argtable2.c   ****         }
 240:argtable2.c   **** 
 241:argtable2.c   ****    /*printf("alloc_shortoptions() returns \"%s\"\n",(result?result:"NULL"));*/
 242:argtable2.c   ****    return result;
 781              		.loc 1 242 0
 782 07c0 488B45F0 		movq	-16(%rbp), %rax
 243:argtable2.c   ****    }
 783              		.loc 1 243 0
 784 07c4 C9       		leave
 785              		.cfi_def_cfa 7, 8
 786 07c5 C3       		ret
 787              		.cfi_endproc
 788              	.LFE4:
 791              	arg_endindex:
 792              	.LFB5:
 244:argtable2.c   **** 
 245:argtable2.c   **** 
 246:argtable2.c   **** /* return index of the table terminator entry */
 247:argtable2.c   **** static
 248:argtable2.c   **** int arg_endindex(struct arg_hdr **table)
 249:argtable2.c   ****     {
 793              		.loc 1 249 0
 794              		.cfi_startproc
 795 07c6 55       		pushq	%rbp
 796              		.cfi_def_cfa_offset 16
 797              		.cfi_offset 6, -16
 798 07c7 4889E5   		movq	%rsp, %rbp
 799              		.cfi_def_cfa_register 6
 800 07ca 48897DE8 		movq	%rdi, -24(%rbp)
 250:argtable2.c   ****     int tabindex=0;
 801              		.loc 1 250 0
 802 07ce C745FC00 		movl	$0, -4(%rbp)
 802      000000
 251:argtable2.c   ****     while (!(table[tabindex]->flag&ARG_TERMINATOR))
 803              		.loc 1 251 0
 804 07d5 EB04     		jmp	.L47
 805              	.L48:
 252:argtable2.c   ****         tabindex++;
 806              		.loc 1 252 0
 807 07d7 8345FC01 		addl	$1, -4(%rbp)
 808              	.L47:
 251:argtable2.c   ****     while (!(table[tabindex]->flag&ARG_TERMINATOR))
 809              		.loc 1 251 0
 810 07db 8B45FC   		movl	-4(%rbp), %eax
 811 07de 4898     		cltq
 812 07e0 488D14C5 		leaq	0(,%rax,8), %rdx
 812      00000000 
 813 07e8 488B45E8 		movq	-24(%rbp), %rax
 814 07ec 4801D0   		addq	%rdx, %rax
 815 07ef 488B00   		movq	(%rax), %rax
 816 07f2 0FB600   		movzbl	(%rax), %eax
 817 07f5 0FBEC0   		movsbl	%al, %eax
 818 07f8 83E001   		andl	$1, %eax
 819 07fb 85C0     		testl	%eax, %eax
 820 07fd 74D8     		je	.L48
 253:argtable2.c   ****     return tabindex;
 821              		.loc 1 253 0
 822 07ff 8B45FC   		movl	-4(%rbp), %eax
 254:argtable2.c   ****     }
 823              		.loc 1 254 0
 824 0802 5D       		popq	%rbp
 825              		.cfi_def_cfa 7, 8
 826 0803 C3       		ret
 827              		.cfi_endproc
 828              	.LFE5:
 831              	arg_parse_tagged:
 832              	.LFB6:
 255:argtable2.c   **** 
 256:argtable2.c   **** 
 257:argtable2.c   **** static
 258:argtable2.c   **** void arg_parse_tagged(int argc, char **argv, struct arg_hdr **table, struct arg_end *endtable)
 259:argtable2.c   ****     {
 833              		.loc 1 259 0
 834              		.cfi_startproc
 835 0804 55       		pushq	%rbp
 836              		.cfi_def_cfa_offset 16
 837              		.cfi_offset 6, -16
 838 0805 4889E5   		movq	%rsp, %rbp
 839              		.cfi_def_cfa_register 6
 840 0808 4883EC60 		subq	$96, %rsp
 841 080c 897DBC   		movl	%edi, -68(%rbp)
 842 080f 488975B0 		movq	%rsi, -80(%rbp)
 843 0813 488955A8 		movq	%rdx, -88(%rbp)
 844 0817 48894DA0 		movq	%rcx, -96(%rbp)
 260:argtable2.c   ****     struct longoptions *longoptions;
 261:argtable2.c   ****     char *shortoptions;
 262:argtable2.c   ****     int copt;
 263:argtable2.c   **** 
 264:argtable2.c   ****     /*printf("arg_parse_tagged(%d,%p,%p,%p)\n",argc,argv,table,endtable);*/
 265:argtable2.c   **** 
 266:argtable2.c   ****     /* allocate short and long option arrays for the given opttable[].   */
 267:argtable2.c   ****     /* if the allocs fail then put an error msg in the last table entry. */
 268:argtable2.c   ****     longoptions  = alloc_longoptions(table);
 845              		.loc 1 268 0
 846 081b 488B45A8 		movq	-88(%rbp), %rax
 847 081f 4889C7   		movq	%rax, %rdi
 848 0822 E88EFAFF 		call	alloc_longoptions
 848      FF
 849 0827 488945E0 		movq	%rax, -32(%rbp)
 269:argtable2.c   ****     shortoptions = alloc_shortoptions(table);
 850              		.loc 1 269 0
 851 082b 488B45A8 		movq	-88(%rbp), %rax
 852 082f 4889C7   		movq	%rax, %rdi
 853 0832 E8ECFDFF 		call	alloc_shortoptions
 853      FF
 854 0837 488945E8 		movq	%rax, -24(%rbp)
 270:argtable2.c   ****     if (!longoptions || !shortoptions)
 855              		.loc 1 270 0
 856 083b 48837DE0 		cmpq	$0, -32(%rbp)
 856      00
 857 0840 7407     		je	.L51
 858              		.loc 1 270 0 is_stmt 0 discriminator 1
 859 0842 48837DE8 		cmpq	$0, -24(%rbp)
 859      00
 860 0847 7537     		jne	.L52
 861              	.L51:
 271:argtable2.c   ****         {
 272:argtable2.c   ****         /* one or both memory allocs failed */
 273:argtable2.c   ****         arg_register_error(endtable,endtable,ARG_EMALLOC,NULL);
 862              		.loc 1 273 0 is_stmt 1
 863 0849 488B75A0 		movq	-96(%rbp), %rsi
 864 084d 488B45A0 		movq	-96(%rbp), %rax
 865 0851 B9000000 		movl	$0, %ecx
 865      00
 866 0856 BA020000 		movl	$2, %edx
 866      00
 867 085b 4889C7   		movq	%rax, %rdi
 868 085e E89DF7FF 		call	arg_register_error
 868      FF
 274:argtable2.c   ****         /* free anything that was allocated (this is null safe) */
 275:argtable2.c   ****         free(shortoptions);
 869              		.loc 1 275 0
 870 0863 488B45E8 		movq	-24(%rbp), %rax
 871 0867 4889C7   		movq	%rax, %rdi
 872 086a E8000000 		call	free@PLT
 872      00
 276:argtable2.c   ****         free(longoptions);
 873              		.loc 1 276 0
 874 086f 488B45E0 		movq	-32(%rbp), %rax
 875 0873 4889C7   		movq	%rax, %rdi
 876 0876 E8000000 		call	free@PLT
 876      00
 277:argtable2.c   ****         return;
 877              		.loc 1 277 0
 878 087b E9190300 		jmp	.L50
 878      00
 879              	.L52:
 278:argtable2.c   ****         }
 279:argtable2.c   **** 
 280:argtable2.c   ****     /*dump_longoptions(longoptions);*/
 281:argtable2.c   **** 
 282:argtable2.c   ****     /* reset getopts internal option-index to zero, and disable error reporting */
 283:argtable2.c   ****     optind = 0;
 880              		.loc 1 283 0
 881 0880 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 881      000000
 882 0887 C7000000 		movl	$0, (%rax)
 882      0000
 284:argtable2.c   ****     opterr = 0;
 883              		.loc 1 284 0
 884 088d 488B0500 		movq	opterr@GOTPCREL(%rip), %rax
 884      000000
 885 0894 C7000000 		movl	$0, (%rax)
 885      0000
 285:argtable2.c   **** 
 286:argtable2.c   ****     /* fetch and process args using getopt_long */
 287:argtable2.c   ****     while( (copt=getopt_long(argc,argv,shortoptions,longoptions->options,NULL)) != -1)
 886              		.loc 1 287 0
 887 089a E9B50200 		jmp	.L54
 887      00
 888              	.L66:
 288:argtable2.c   ****         {
 289:argtable2.c   ****         /*
 290:argtable2.c   ****         printf("optarg='%s'\n",optarg);
 291:argtable2.c   ****         printf("optind=%d\n",optind);
 292:argtable2.c   ****         printf("copt=%c\n",(char)copt);
 293:argtable2.c   ****         printf("optopt=%c (%d)\n",optopt, (int)(optopt));
 294:argtable2.c   ****         */
 295:argtable2.c   ****         switch(copt)
 889              		.loc 1 295 0
 890 089f 8B45CC   		movl	-52(%rbp), %eax
 891 08a2 83F83A   		cmpl	$58, %eax
 892 08a5 0F849E01 		je	.L56
 892      0000
 893 08ab 83F83F   		cmpl	$63, %eax
 894 08ae 0F842D01 		je	.L57
 894      0000
 895 08b4 85C0     		testl	%eax, %eax
 896 08b6 0F85C701 		jne	.L67
 896      0000
 897              	.LBB9:
 296:argtable2.c   ****             {
 297:argtable2.c   ****             case 0:
 298:argtable2.c   ****                 {
 299:argtable2.c   ****                 int tabindex = longoptions->getoptval;
 898              		.loc 1 299 0
 899 08bc 488B45E0 		movq	-32(%rbp), %rax
 900 08c0 8B00     		movl	(%rax), %eax
 901 08c2 8945D0   		movl	%eax, -48(%rbp)
 300:argtable2.c   ****                 void *parent  = table[tabindex]->parent;
 902              		.loc 1 300 0
 903 08c5 8B45D0   		movl	-48(%rbp), %eax
 904 08c8 4898     		cltq
 905 08ca 488D14C5 		leaq	0(,%rax,8), %rdx
 905      00000000 
 906 08d2 488B45A8 		movq	-88(%rbp), %rax
 907 08d6 4801D0   		addq	%rdx, %rax
 908 08d9 488B00   		movq	(%rax), %rax
 909 08dc 488B4030 		movq	48(%rax), %rax
 910 08e0 488945F0 		movq	%rax, -16(%rbp)
 301:argtable2.c   ****                 /*printf("long option detected from argtable[%d]\n", tabindex);*/
 302:argtable2.c   ****                 if (optarg && optarg[0]==0 && (table[tabindex]->flag & ARG_HASVALUE))
 911              		.loc 1 302 0
 912 08e4 488B0500 		movq	optarg@GOTPCREL(%rip), %rax
 912      000000
 913 08eb 488B00   		movq	(%rax), %rax
 914 08ee 4885C0   		testq	%rax, %rax
 915 08f1 746A     		je	.L59
 916              		.loc 1 302 0 is_stmt 0 discriminator 1
 917 08f3 488B0500 		movq	optarg@GOTPCREL(%rip), %rax
 917      000000
 918 08fa 488B00   		movq	(%rax), %rax
 919 08fd 0FB600   		movzbl	(%rax), %eax
 920 0900 84C0     		testb	%al, %al
 921 0902 7559     		jne	.L59
 922              		.loc 1 302 0 discriminator 2
 923 0904 8B45D0   		movl	-48(%rbp), %eax
 924 0907 4898     		cltq
 925 0909 488D14C5 		leaq	0(,%rax,8), %rdx
 925      00000000 
 926 0911 488B45A8 		movq	-88(%rbp), %rax
 927 0915 4801D0   		addq	%rdx, %rax
 928 0918 488B00   		movq	(%rax), %rax
 929 091b 0FB600   		movzbl	(%rax), %eax
 930 091e 0FBEC0   		movsbl	%al, %eax
 931 0921 83E002   		andl	$2, %eax
 932 0924 85C0     		testl	%eax, %eax
 933 0926 7435     		je	.L59
 303:argtable2.c   ****                     {
 304:argtable2.c   ****                     /* printf(": long option %s requires an argument\n",argv[optind-1]); */
 305:argtable2.c   ****                     arg_register_error(endtable,endtable,ARG_EMISSARG,argv[optind-1]);
 934              		.loc 1 305 0 is_stmt 1
 935 0928 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 935      000000
 936 092f 8B00     		movl	(%rax), %eax
 937 0931 4898     		cltq
 938 0933 48C1E003 		salq	$3, %rax
 939 0937 488D50F8 		leaq	-8(%rax), %rdx
 940 093b 488B45B0 		movq	-80(%rbp), %rax
 941 093f 4801D0   		addq	%rdx, %rax
 942 0942 488B10   		movq	(%rax), %rdx
 943 0945 488B75A0 		movq	-96(%rbp), %rsi
 944 0949 488B45A0 		movq	-96(%rbp), %rax
 945 094d 4889D1   		movq	%rdx, %rcx
 946 0950 BA050000 		movl	$5, %edx
 946      00
 947 0955 4889C7   		movq	%rax, %rdi
 948 0958 E8A3F6FF 		call	arg_register_error
 948      FF
 949              	.L59:
 306:argtable2.c   ****                     /* continue to scan the (empty) argument value to enforce argument count checki
 307:argtable2.c   ****                     }
 308:argtable2.c   ****                 if (table[tabindex]->scanfn)
 950              		.loc 1 308 0
 951 095d 8B45D0   		movl	-48(%rbp), %eax
 952 0960 4898     		cltq
 953 0962 488D14C5 		leaq	0(,%rax,8), %rdx
 953      00000000 
 954 096a 488B45A8 		movq	-88(%rbp), %rax
 955 096e 4801D0   		addq	%rdx, %rax
 956 0971 488B00   		movq	(%rax), %rax
 957 0974 488B4040 		movq	64(%rax), %rax
 958 0978 4885C0   		testq	%rax, %rax
 959 097b 0F84D301 		je	.L54
 959      0000
 960              	.LBB10:
 309:argtable2.c   ****                     {
 310:argtable2.c   ****                     int errorcode = table[tabindex]->scanfn(parent,optarg);
 961              		.loc 1 310 0
 962 0981 8B45D0   		movl	-48(%rbp), %eax
 963 0984 4898     		cltq
 964 0986 488D14C5 		leaq	0(,%rax,8), %rdx
 964      00000000 
 965 098e 488B45A8 		movq	-88(%rbp), %rax
 966 0992 4801D0   		addq	%rdx, %rax
 967 0995 488B00   		movq	(%rax), %rax
 968 0998 488B4040 		movq	64(%rax), %rax
 969 099c 488B1500 		movq	optarg@GOTPCREL(%rip), %rdx
 969      000000
 970 09a3 488B0A   		movq	(%rdx), %rcx
 971 09a6 488B55F0 		movq	-16(%rbp), %rdx
 972 09aa 4889CE   		movq	%rcx, %rsi
 973 09ad 4889D7   		movq	%rdx, %rdi
 974 09b0 FFD0     		call	*%rax
 975 09b2 8945D4   		movl	%eax, -44(%rbp)
 311:argtable2.c   ****                     if (errorcode!=0)
 976              		.loc 1 311 0
 977 09b5 837DD400 		cmpl	$0, -44(%rbp)
 978 09b9 0F849501 		je	.L54
 978      0000
 312:argtable2.c   ****                         arg_register_error(endtable,parent,errorcode,optarg);
 979              		.loc 1 312 0
 980 09bf 488B0500 		movq	optarg@GOTPCREL(%rip), %rax
 980      000000
 981 09c6 488B08   		movq	(%rax), %rcx
 982 09c9 8B55D4   		movl	-44(%rbp), %edx
 983 09cc 488B75F0 		movq	-16(%rbp), %rsi
 984 09d0 488B45A0 		movq	-96(%rbp), %rax
 985 09d4 4889C7   		movq	%rax, %rdi
 986 09d7 E824F6FF 		call	arg_register_error
 986      FF
 987              	.LBE10:
 988              	.LBE9:
 313:argtable2.c   ****                     }
 314:argtable2.c   ****                 }
 315:argtable2.c   ****                 break;
 989              		.loc 1 315 0
 990 09dc E9730100 		jmp	.L54
 990      00
 991              	.L57:
 316:argtable2.c   **** 
 317:argtable2.c   ****             case '?':
 318:argtable2.c   ****                 /*
 319:argtable2.c   ****                 * getopt_long() found an unrecognised short option.
 320:argtable2.c   ****                 * if it was a short option its value is in optopt
 321:argtable2.c   ****                 * if it was a long option then optopt=0
 322:argtable2.c   ****                 */
 323:argtable2.c   ****                 switch (optopt)
 992              		.loc 1 323 0
 993 09e1 488B0500 		movq	optopt@GOTPCREL(%rip), %rax
 993      000000
 994 09e8 8B00     		movl	(%rax), %eax
 995 09ea 85C0     		testl	%eax, %eax
 996 09ec 7537     		jne	.L68
 324:argtable2.c   ****                     {
 325:argtable2.c   ****                     case 0:
 326:argtable2.c   ****                         /*printf("?0 unrecognised long option %s\n",argv[optind-1]);*/
 327:argtable2.c   ****                         arg_register_error(endtable,endtable,ARG_ELONGOPT,argv[optind-1]);
 997              		.loc 1 327 0
 998 09ee 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 998      000000
 999 09f5 8B00     		movl	(%rax), %eax
 1000 09f7 4898     		cltq
 1001 09f9 48C1E003 		salq	$3, %rax
 1002 09fd 488D50F8 		leaq	-8(%rax), %rdx
 1003 0a01 488B45B0 		movq	-80(%rbp), %rax
 1004 0a05 4801D0   		addq	%rdx, %rax
 1005 0a08 488B10   		movq	(%rax), %rdx
 1006 0a0b 488B75A0 		movq	-96(%rbp), %rsi
 1007 0a0f 488B45A0 		movq	-96(%rbp), %rax
 1008 0a13 4889D1   		movq	%rdx, %rcx
 1009 0a16 BA040000 		movl	$4, %edx
 1009      00
 1010 0a1b 4889C7   		movq	%rax, %rdi
 1011 0a1e E8DDF5FF 		call	arg_register_error
 1011      FF
 328:argtable2.c   ****                         break;
 1012              		.loc 1 328 0
 1013 0a23 EB1F     		jmp	.L63
 1014              	.L68:
 329:argtable2.c   ****                     default:
 330:argtable2.c   ****                         /*printf("?* unrecognised short option '%c'\n",optopt);*/
 331:argtable2.c   ****                         arg_register_error(endtable,endtable,optopt,NULL);
 1015              		.loc 1 331 0
 1016 0a25 488B0500 		movq	optopt@GOTPCREL(%rip), %rax
 1016      000000
 1017 0a2c 8B10     		movl	(%rax), %edx
 1018 0a2e 488B75A0 		movq	-96(%rbp), %rsi
 1019 0a32 488B45A0 		movq	-96(%rbp), %rax
 1020 0a36 B9000000 		movl	$0, %ecx
 1020      00
 1021 0a3b 4889C7   		movq	%rax, %rdi
 1022 0a3e E8BDF5FF 		call	arg_register_error
 1022      FF
 332:argtable2.c   ****                         break;
 1023              		.loc 1 332 0
 1024 0a43 90       		nop
 1025              	.L63:
 333:argtable2.c   ****                     }
 334:argtable2.c   ****                 break;
 1026              		.loc 1 334 0
 1027 0a44 E90B0100 		jmp	.L54
 1027      00
 1028              	.L56:
 335:argtable2.c   **** 
 336:argtable2.c   ****             case':':
 337:argtable2.c   ****                 /*
 338:argtable2.c   ****                 * getopt_long() found an option with its argument missing.
 339:argtable2.c   ****                 */
 340:argtable2.c   ****                 /*printf(": option %s requires an argument\n",argv[optind-1]); */
 341:argtable2.c   ****                 arg_register_error(endtable,endtable,ARG_EMISSARG,argv[optind-1]); 
 1029              		.loc 1 341 0
 1030 0a49 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1030      000000
 1031 0a50 8B00     		movl	(%rax), %eax
 1032 0a52 4898     		cltq
 1033 0a54 48C1E003 		salq	$3, %rax
 1034 0a58 488D50F8 		leaq	-8(%rax), %rdx
 1035 0a5c 488B45B0 		movq	-80(%rbp), %rax
 1036 0a60 4801D0   		addq	%rdx, %rax
 1037 0a63 488B10   		movq	(%rax), %rdx
 1038 0a66 488B75A0 		movq	-96(%rbp), %rsi
 1039 0a6a 488B45A0 		movq	-96(%rbp), %rax
 1040 0a6e 4889D1   		movq	%rdx, %rcx
 1041 0a71 BA050000 		movl	$5, %edx
 1041      00
 1042 0a76 4889C7   		movq	%rax, %rdi
 1043 0a79 E882F5FF 		call	arg_register_error
 1043      FF
 342:argtable2.c   ****                 break;
 1044              		.loc 1 342 0
 1045 0a7e E9D10000 		jmp	.L54
 1045      00
 1046              	.L67:
 1047              	.LBB11:
 343:argtable2.c   **** 
 344:argtable2.c   ****             default:
 345:argtable2.c   ****                 {
 346:argtable2.c   ****                 /* getopt_long() found a valid short option */
 347:argtable2.c   ****                 int tabindex = find_shortoption(table,(char)copt);
 1048              		.loc 1 347 0
 1049 0a83 8B45CC   		movl	-52(%rbp), %eax
 1050 0a86 0FBED0   		movsbl	%al, %edx
 1051 0a89 488B45A8 		movq	-88(%rbp), %rax
 1052 0a8d 89D6     		movl	%edx, %esi
 1053 0a8f 4889C7   		movq	%rax, %rdi
 1054 0a92 E867F6FF 		call	find_shortoption
 1054      FF
 1055 0a97 8945D8   		movl	%eax, -40(%rbp)
 348:argtable2.c   ****                 /*printf("short option detected from argtable[%d]\n", tabindex);*/
 349:argtable2.c   ****                 if (tabindex==-1)
 1056              		.loc 1 349 0
 1057 0a9a 837DD8FF 		cmpl	$-1, -40(%rbp)
 1058 0a9e 751D     		jne	.L64
 350:argtable2.c   ****                     {
 351:argtable2.c   ****                     /* should never get here - but handle it just in case */
 352:argtable2.c   ****                     /*printf("unrecognised short option %d\n",copt);*/
 353:argtable2.c   ****                     arg_register_error(endtable,endtable,copt,NULL);
 1059              		.loc 1 353 0
 1060 0aa0 8B55CC   		movl	-52(%rbp), %edx
 1061 0aa3 488B75A0 		movq	-96(%rbp), %rsi
 1062 0aa7 488B45A0 		movq	-96(%rbp), %rax
 1063 0aab B9000000 		movl	$0, %ecx
 1063      00
 1064 0ab0 4889C7   		movq	%rax, %rdi
 1065 0ab3 E848F5FF 		call	arg_register_error
 1065      FF
 1066 0ab8 E9960000 		jmp	.L69
 1066      00
 1067              	.L64:
 354:argtable2.c   ****                     }
 355:argtable2.c   ****                 else
 356:argtable2.c   ****                     {
 357:argtable2.c   ****                     if (table[tabindex]->scanfn)
 1068              		.loc 1 357 0
 1069 0abd 8B45D8   		movl	-40(%rbp), %eax
 1070 0ac0 4898     		cltq
 1071 0ac2 488D14C5 		leaq	0(,%rax,8), %rdx
 1071      00000000 
 1072 0aca 488B45A8 		movq	-88(%rbp), %rax
 1073 0ace 4801D0   		addq	%rdx, %rax
 1074 0ad1 488B00   		movq	(%rax), %rax
 1075 0ad4 488B4040 		movq	64(%rax), %rax
 1076 0ad8 4885C0   		testq	%rax, %rax
 1077 0adb 7476     		je	.L69
 1078              	.LBB12:
 358:argtable2.c   ****                         {
 359:argtable2.c   ****                         void *parent  = table[tabindex]->parent;
 1079              		.loc 1 359 0
 1080 0add 8B45D8   		movl	-40(%rbp), %eax
 1081 0ae0 4898     		cltq
 1082 0ae2 488D14C5 		leaq	0(,%rax,8), %rdx
 1082      00000000 
 1083 0aea 488B45A8 		movq	-88(%rbp), %rax
 1084 0aee 4801D0   		addq	%rdx, %rax
 1085 0af1 488B00   		movq	(%rax), %rax
 1086 0af4 488B4030 		movq	48(%rax), %rax
 1087 0af8 488945F8 		movq	%rax, -8(%rbp)
 360:argtable2.c   ****                         int errorcode = table[tabindex]->scanfn(parent,optarg);
 1088              		.loc 1 360 0
 1089 0afc 8B45D8   		movl	-40(%rbp), %eax
 1090 0aff 4898     		cltq
 1091 0b01 488D14C5 		leaq	0(,%rax,8), %rdx
 1091      00000000 
 1092 0b09 488B45A8 		movq	-88(%rbp), %rax
 1093 0b0d 4801D0   		addq	%rdx, %rax
 1094 0b10 488B00   		movq	(%rax), %rax
 1095 0b13 488B4040 		movq	64(%rax), %rax
 1096 0b17 488B1500 		movq	optarg@GOTPCREL(%rip), %rdx
 1096      000000
 1097 0b1e 488B0A   		movq	(%rdx), %rcx
 1098 0b21 488B55F8 		movq	-8(%rbp), %rdx
 1099 0b25 4889CE   		movq	%rcx, %rsi
 1100 0b28 4889D7   		movq	%rdx, %rdi
 1101 0b2b FFD0     		call	*%rax
 1102 0b2d 8945DC   		movl	%eax, -36(%rbp)
 361:argtable2.c   ****                         if (errorcode!=0)
 1103              		.loc 1 361 0
 1104 0b30 837DDC00 		cmpl	$0, -36(%rbp)
 1105 0b34 741D     		je	.L69
 362:argtable2.c   ****                             arg_register_error(endtable,parent,errorcode,optarg);
 1106              		.loc 1 362 0
 1107 0b36 488B0500 		movq	optarg@GOTPCREL(%rip), %rax
 1107      000000
 1108 0b3d 488B08   		movq	(%rax), %rcx
 1109 0b40 8B55DC   		movl	-36(%rbp), %edx
 1110 0b43 488B75F8 		movq	-8(%rbp), %rsi
 1111 0b47 488B45A0 		movq	-96(%rbp), %rax
 1112 0b4b 4889C7   		movq	%rax, %rdi
 1113 0b4e E8ADF4FF 		call	arg_register_error
 1113      FF
 1114              	.L69:
 1115              	.LBE12:
 363:argtable2.c   ****                         }
 364:argtable2.c   ****                     }
 365:argtable2.c   ****                 break;
 1116              		.loc 1 365 0
 1117 0b53 90       		nop
 1118              	.L54:
 1119              	.LBE11:
 287:argtable2.c   ****         {
 1120              		.loc 1 287 0
 1121 0b54 488B45E0 		movq	-32(%rbp), %rax
 1122 0b58 488B4808 		movq	8(%rax), %rcx
 1123 0b5c 488B55E8 		movq	-24(%rbp), %rdx
 1124 0b60 488B75B0 		movq	-80(%rbp), %rsi
 1125 0b64 8B45BC   		movl	-68(%rbp), %eax
 1126 0b67 41B80000 		movl	$0, %r8d
 1126      0000
 1127 0b6d 89C7     		movl	%eax, %edi
 1128 0b6f E8000000 		call	getopt_long@PLT
 1128      00
 1129 0b74 8945CC   		movl	%eax, -52(%rbp)
 1130 0b77 837DCCFF 		cmpl	$-1, -52(%rbp)
 1131 0b7b 0F851EFD 		jne	.L66
 1131      FFFF
 366:argtable2.c   ****                 }
 367:argtable2.c   ****             }
 368:argtable2.c   ****         }
 369:argtable2.c   **** 
 370:argtable2.c   ****     free(shortoptions);
 1132              		.loc 1 370 0
 1133 0b81 488B45E8 		movq	-24(%rbp), %rax
 1134 0b85 4889C7   		movq	%rax, %rdi
 1135 0b88 E8000000 		call	free@PLT
 1135      00
 371:argtable2.c   ****     free(longoptions);
 1136              		.loc 1 371 0
 1137 0b8d 488B45E0 		movq	-32(%rbp), %rax
 1138 0b91 4889C7   		movq	%rax, %rdi
 1139 0b94 E8000000 		call	free@PLT
 1139      00
 1140              	.L50:
 372:argtable2.c   ****     }
 1141              		.loc 1 372 0
 1142 0b99 C9       		leave
 1143              		.cfi_def_cfa 7, 8
 1144 0b9a C3       		ret
 1145              		.cfi_endproc
 1146              	.LFE6:
 1149              	arg_parse_untagged:
 1150              	.LFB7:
 373:argtable2.c   **** 
 374:argtable2.c   **** 
 375:argtable2.c   **** static
 376:argtable2.c   **** void arg_parse_untagged(int argc, char **argv, struct arg_hdr **table, struct arg_end *endtable)
 377:argtable2.c   ****     {
 1151              		.loc 1 377 0
 1152              		.cfi_startproc
 1153 0b9b 55       		pushq	%rbp
 1154              		.cfi_def_cfa_offset 16
 1155              		.cfi_offset 6, -16
 1156 0b9c 4889E5   		movq	%rsp, %rbp
 1157              		.cfi_def_cfa_register 6
 1158 0b9f 4883EC50 		subq	$80, %rsp
 1159 0ba3 897DCC   		movl	%edi, -52(%rbp)
 1160 0ba6 488975C0 		movq	%rsi, -64(%rbp)
 1161 0baa 488955B8 		movq	%rdx, -72(%rbp)
 1162 0bae 48894DB0 		movq	%rcx, -80(%rbp)
 378:argtable2.c   ****     int tabindex=0;
 1163              		.loc 1 378 0
 1164 0bb2 C745DC00 		movl	$0, -36(%rbp)
 1164      000000
 379:argtable2.c   ****     int errorlast=0;
 1165              		.loc 1 379 0
 1166 0bb9 C745E000 		movl	$0, -32(%rbp)
 1166      000000
 380:argtable2.c   ****     const char *optarglast = NULL;
 1167              		.loc 1 380 0
 1168 0bc0 48C745E8 		movq	$0, -24(%rbp)
 1168      00000000 
 381:argtable2.c   ****     void *parentlast = NULL;
 1169              		.loc 1 381 0
 1170 0bc8 48C745F0 		movq	$0, -16(%rbp)
 1170      00000000 
 382:argtable2.c   **** 
 383:argtable2.c   ****     /*printf("arg_parse_untagged(%d,%p,%p,%p)\n",argc,argv,table,endtable);*/
 384:argtable2.c   ****     while (!(table[tabindex]->flag&ARG_TERMINATOR))
 1171              		.loc 1 384 0
 1172 0bd0 E9420100 		jmp	.L71
 1172      00
 1173              	.L78:
 1174              	.LBB13:
 385:argtable2.c   ****         {
 386:argtable2.c   ****         void *parent;
 387:argtable2.c   ****         int errorcode;
 388:argtable2.c   **** 
 389:argtable2.c   ****         /* if we have exhausted our argv[optind] entries then we have finished */
 390:argtable2.c   ****         if (optind>=argc)
 1175              		.loc 1 390 0
 1176 0bd5 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1176      000000
 1177 0bdc 8B00     		movl	(%rax), %eax
 1178 0bde 3B45CC   		cmpl	-52(%rbp), %eax
 1179 0be1 0F8DDE01 		jge	.L82
 1179      0000
 391:argtable2.c   ****             {
 392:argtable2.c   ****             /*printf("arg_parse_untagged(): argv[] exhausted\n");*/
 393:argtable2.c   ****             return;
 394:argtable2.c   ****             }
 395:argtable2.c   **** 
 396:argtable2.c   ****         /* skip table entries with non-null long or short options (they are not untagged entries) *
 397:argtable2.c   ****         if (table[tabindex]->longopts || table[tabindex]->shortopts)
 1180              		.loc 1 397 0
 1181 0be7 8B45DC   		movl	-36(%rbp), %eax
 1182 0bea 4898     		cltq
 1183 0bec 488D14C5 		leaq	0(,%rax,8), %rdx
 1183      00000000 
 1184 0bf4 488B45B8 		movq	-72(%rbp), %rax
 1185 0bf8 4801D0   		addq	%rdx, %rax
 1186 0bfb 488B00   		movq	(%rax), %rax
 1187 0bfe 488B4010 		movq	16(%rax), %rax
 1188 0c02 4885C0   		testq	%rax, %rax
 1189 0c05 7520     		jne	.L74
 1190              		.loc 1 397 0 is_stmt 0 discriminator 1
 1191 0c07 8B45DC   		movl	-36(%rbp), %eax
 1192 0c0a 4898     		cltq
 1193 0c0c 488D14C5 		leaq	0(,%rax,8), %rdx
 1193      00000000 
 1194 0c14 488B45B8 		movq	-72(%rbp), %rax
 1195 0c18 4801D0   		addq	%rdx, %rax
 1196 0c1b 488B00   		movq	(%rax), %rax
 1197 0c1e 488B4008 		movq	8(%rax), %rax
 1198 0c22 4885C0   		testq	%rax, %rax
 1199 0c25 7409     		je	.L75
 1200              	.L74:
 398:argtable2.c   ****             {
 399:argtable2.c   ****             /*printf("arg_parse_untagged(): skipping argtable[%d] (tagged argument)\n",tabindex);*/
 400:argtable2.c   ****             tabindex++;
 1201              		.loc 1 400 0 is_stmt 1
 1202 0c27 8345DC01 		addl	$1, -36(%rbp)
 401:argtable2.c   ****             continue;
 1203              		.loc 1 401 0
 1204 0c2b E9E70000 		jmp	.L71
 1204      00
 1205              	.L75:
 402:argtable2.c   ****             }
 403:argtable2.c   **** 
 404:argtable2.c   ****         /* skip table entries with NULL scanfn */
 405:argtable2.c   ****         if (!(table[tabindex]->scanfn))
 1206              		.loc 1 405 0
 1207 0c30 8B45DC   		movl	-36(%rbp), %eax
 1208 0c33 4898     		cltq
 1209 0c35 488D14C5 		leaq	0(,%rax,8), %rdx
 1209      00000000 
 1210 0c3d 488B45B8 		movq	-72(%rbp), %rax
 1211 0c41 4801D0   		addq	%rdx, %rax
 1212 0c44 488B00   		movq	(%rax), %rax
 1213 0c47 488B4040 		movq	64(%rax), %rax
 1214 0c4b 4885C0   		testq	%rax, %rax
 1215 0c4e 7509     		jne	.L76
 406:argtable2.c   ****             {
 407:argtable2.c   ****             /*printf("arg_parse_untagged(): skipping argtable[%d] (NULL scanfn)\n",tabindex);*/
 408:argtable2.c   ****             tabindex++;
 1216              		.loc 1 408 0
 1217 0c50 8345DC01 		addl	$1, -36(%rbp)
 409:argtable2.c   ****             continue;
 1218              		.loc 1 409 0
 1219 0c54 E9BE0000 		jmp	.L71
 1219      00
 1220              	.L76:
 410:argtable2.c   ****             }
 411:argtable2.c   **** 
 412:argtable2.c   ****         /* attempt to scan the current argv[optind] with the current     */
 413:argtable2.c   ****         /* table[tabindex] entry. If it succeeds then keep it, otherwise */
 414:argtable2.c   ****         /* try again with the next table[] entry.                        */
 415:argtable2.c   ****         parent = table[tabindex]->parent;
 1221              		.loc 1 415 0
 1222 0c59 8B45DC   		movl	-36(%rbp), %eax
 1223 0c5c 4898     		cltq
 1224 0c5e 488D14C5 		leaq	0(,%rax,8), %rdx
 1224      00000000 
 1225 0c66 488B45B8 		movq	-72(%rbp), %rax
 1226 0c6a 4801D0   		addq	%rdx, %rax
 1227 0c6d 488B00   		movq	(%rax), %rax
 1228 0c70 488B4030 		movq	48(%rax), %rax
 1229 0c74 488945F8 		movq	%rax, -8(%rbp)
 416:argtable2.c   ****         errorcode = table[tabindex]->scanfn(parent,argv[optind]);
 1230              		.loc 1 416 0
 1231 0c78 8B45DC   		movl	-36(%rbp), %eax
 1232 0c7b 4898     		cltq
 1233 0c7d 488D14C5 		leaq	0(,%rax,8), %rdx
 1233      00000000 
 1234 0c85 488B45B8 		movq	-72(%rbp), %rax
 1235 0c89 4801D0   		addq	%rdx, %rax
 1236 0c8c 488B00   		movq	(%rax), %rax
 1237 0c8f 488B4040 		movq	64(%rax), %rax
 1238 0c93 488B1500 		movq	optind@GOTPCREL(%rip), %rdx
 1238      000000
 1239 0c9a 8B12     		movl	(%rdx), %edx
 1240 0c9c 4863D2   		movslq	%edx, %rdx
 1241 0c9f 488D0CD5 		leaq	0(,%rdx,8), %rcx
 1241      00000000 
 1242 0ca7 488B55C0 		movq	-64(%rbp), %rdx
 1243 0cab 4801CA   		addq	%rcx, %rdx
 1244 0cae 488B0A   		movq	(%rdx), %rcx
 1245 0cb1 488B55F8 		movq	-8(%rbp), %rdx
 1246 0cb5 4889CE   		movq	%rcx, %rsi
 1247 0cb8 4889D7   		movq	%rdx, %rdi
 1248 0cbb FFD0     		call	*%rax
 1249 0cbd 8945E4   		movl	%eax, -28(%rbp)
 417:argtable2.c   ****         if (errorcode==0)
 1250              		.loc 1 417 0
 1251 0cc0 837DE400 		cmpl	$0, -28(%rbp)
 1252 0cc4 751E     		jne	.L77
 418:argtable2.c   ****             {
 419:argtable2.c   ****             /* success, move onto next argv[optind] but stay with same table[tabindex] */
 420:argtable2.c   ****             /*printf("arg_parse_untagged(): argtable[%d] successfully matched\n",tabindex);*/
 421:argtable2.c   ****             optind++;
 1253              		.loc 1 421 0
 1254 0cc6 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1254      000000
 1255 0ccd 8B00     		movl	(%rax), %eax
 1256 0ccf 8D5001   		leal	1(%rax), %edx
 1257 0cd2 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1257      000000
 1258 0cd9 8910     		movl	%edx, (%rax)
 422:argtable2.c   **** 
 423:argtable2.c   ****             /* clear the last tentative error */
 424:argtable2.c   ****             errorlast = 0;
 1259              		.loc 1 424 0
 1260 0cdb C745E000 		movl	$0, -32(%rbp)
 1260      000000
 1261 0ce2 EB33     		jmp	.L71
 1262              	.L77:
 425:argtable2.c   ****             }
 426:argtable2.c   ****         else
 427:argtable2.c   ****             {
 428:argtable2.c   ****             /* failure, try same argv[optind] with next table[tabindex] entry */
 429:argtable2.c   ****             /*printf("arg_parse_untagged(): argtable[%d] failed match\n",tabindex);*/
 430:argtable2.c   ****             tabindex++;
 1263              		.loc 1 430 0
 1264 0ce4 8345DC01 		addl	$1, -36(%rbp)
 431:argtable2.c   **** 
 432:argtable2.c   ****             /* remember this as a tentative error we may wish to reinstate later */
 433:argtable2.c   ****             errorlast = errorcode;
 1265              		.loc 1 433 0
 1266 0ce8 8B45E4   		movl	-28(%rbp), %eax
 1267 0ceb 8945E0   		movl	%eax, -32(%rbp)
 434:argtable2.c   ****             optarglast = argv[optind];
 1268              		.loc 1 434 0
 1269 0cee 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1269      000000
 1270 0cf5 8B00     		movl	(%rax), %eax
 1271 0cf7 4898     		cltq
 1272 0cf9 488D14C5 		leaq	0(,%rax,8), %rdx
 1272      00000000 
 1273 0d01 488B45C0 		movq	-64(%rbp), %rax
 1274 0d05 4801D0   		addq	%rdx, %rax
 1275 0d08 488B00   		movq	(%rax), %rax
 1276 0d0b 488945E8 		movq	%rax, -24(%rbp)
 435:argtable2.c   ****             parentlast = parent;
 1277              		.loc 1 435 0
 1278 0d0f 488B45F8 		movq	-8(%rbp), %rax
 1279 0d13 488945F0 		movq	%rax, -16(%rbp)
 1280              	.L71:
 1281              	.LBE13:
 384:argtable2.c   ****         {
 1282              		.loc 1 384 0
 1283 0d17 8B45DC   		movl	-36(%rbp), %eax
 1284 0d1a 4898     		cltq
 1285 0d1c 488D14C5 		leaq	0(,%rax,8), %rdx
 1285      00000000 
 1286 0d24 488B45B8 		movq	-72(%rbp), %rax
 1287 0d28 4801D0   		addq	%rdx, %rax
 1288 0d2b 488B00   		movq	(%rax), %rax
 1289 0d2e 0FB600   		movzbl	(%rax), %eax
 1290 0d31 0FBEC0   		movsbl	%al, %eax
 1291 0d34 83E001   		andl	$1, %eax
 1292 0d37 85C0     		testl	%eax, %eax
 1293 0d39 0F8496FE 		je	.L78
 1293      FFFF
 436:argtable2.c   ****             }
 437:argtable2.c   **** 
 438:argtable2.c   ****         }
 439:argtable2.c   **** 
 440:argtable2.c   ****     /* if a tenative error still remains at this point then register it as a proper error */
 441:argtable2.c   ****     if (errorlast)
 1294              		.loc 1 441 0
 1295 0d3f 837DE000 		cmpl	$0, -32(%rbp)
 1296 0d43 746F     		je	.L80
 442:argtable2.c   ****         {
 443:argtable2.c   ****         arg_register_error(endtable,parentlast,errorlast,optarglast);
 1297              		.loc 1 443 0
 1298 0d45 488B4DE8 		movq	-24(%rbp), %rcx
 1299 0d49 8B55E0   		movl	-32(%rbp), %edx
 1300 0d4c 488B75F0 		movq	-16(%rbp), %rsi
 1301 0d50 488B45B0 		movq	-80(%rbp), %rax
 1302 0d54 4889C7   		movq	%rax, %rdi
 1303 0d57 E8A4F2FF 		call	arg_register_error
 1303      FF
 444:argtable2.c   ****         optind++;
 1304              		.loc 1 444 0
 1305 0d5c 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1305      000000
 1306 0d63 8B00     		movl	(%rax), %eax
 1307 0d65 8D5001   		leal	1(%rax), %edx
 1308 0d68 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1308      000000
 1309 0d6f 8910     		movl	%edx, (%rax)
 445:argtable2.c   ****         }
 446:argtable2.c   **** 
 447:argtable2.c   ****     /* only get here when not all argv[] entries were consumed */
 448:argtable2.c   ****     /* register an error for each unused argv[] entry */
 449:argtable2.c   ****     while (optind<argc)
 1310              		.loc 1 449 0
 1311 0d71 EB41     		jmp	.L80
 1312              	.L81:
 450:argtable2.c   ****         {
 451:argtable2.c   ****         /*printf("arg_parse_untagged(): argv[%d]=\"%s\" not consumed\n",optind,argv[optind]);*/
 452:argtable2.c   ****         arg_register_error(endtable,endtable,ARG_ENOMATCH,argv[optind++]);
 1313              		.loc 1 452 0
 1314 0d73 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1314      000000
 1315 0d7a 8B00     		movl	(%rax), %eax
 1316 0d7c 8D4801   		leal	1(%rax), %ecx
 1317 0d7f 488B1500 		movq	optind@GOTPCREL(%rip), %rdx
 1317      000000
 1318 0d86 890A     		movl	%ecx, (%rdx)
 1319 0d88 4898     		cltq
 1320 0d8a 488D14C5 		leaq	0(,%rax,8), %rdx
 1320      00000000 
 1321 0d92 488B45C0 		movq	-64(%rbp), %rax
 1322 0d96 4801D0   		addq	%rdx, %rax
 1323 0d99 488B10   		movq	(%rax), %rdx
 1324 0d9c 488B75B0 		movq	-80(%rbp), %rsi
 1325 0da0 488B45B0 		movq	-80(%rbp), %rax
 1326 0da4 4889D1   		movq	%rdx, %rcx
 1327 0da7 BA030000 		movl	$3, %edx
 1327      00
 1328 0dac 4889C7   		movq	%rax, %rdi
 1329 0daf E84CF2FF 		call	arg_register_error
 1329      FF
 1330              	.L80:
 449:argtable2.c   ****         {
 1331              		.loc 1 449 0
 1332 0db4 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1332      000000
 1333 0dbb 8B00     		movl	(%rax), %eax
 1334 0dbd 3B45CC   		cmpl	-52(%rbp), %eax
 1335 0dc0 7CB1     		jl	.L81
 453:argtable2.c   ****         }
 454:argtable2.c   **** 
 455:argtable2.c   ****     return;
 1336              		.loc 1 455 0 discriminator 2
 1337 0dc2 90       		nop
 1338 0dc3 EB01     		jmp	.L70
 1339              	.L82:
 1340              	.LBB14:
 393:argtable2.c   ****             }
 1341              		.loc 1 393 0
 1342 0dc5 90       		nop
 1343              	.L70:
 1344              	.LBE14:
 456:argtable2.c   ****     }
 1345              		.loc 1 456 0
 1346 0dc6 C9       		leave
 1347              		.cfi_def_cfa 7, 8
 1348 0dc7 C3       		ret
 1349              		.cfi_endproc
 1350              	.LFE7:
 1353              	arg_parse_check:
 1354              	.LFB8:
 457:argtable2.c   **** 
 458:argtable2.c   **** 
 459:argtable2.c   **** static
 460:argtable2.c   **** void arg_parse_check(struct arg_hdr **table, struct arg_end *endtable)
 461:argtable2.c   ****     {
 1355              		.loc 1 461 0
 1356              		.cfi_startproc
 1357 0dc8 55       		pushq	%rbp
 1358              		.cfi_def_cfa_offset 16
 1359              		.cfi_offset 6, -16
 1360 0dc9 4889E5   		movq	%rsp, %rbp
 1361              		.cfi_def_cfa_register 6
 1362 0dcc 4883EC20 		subq	$32, %rsp
 1363 0dd0 48897DE8 		movq	%rdi, -24(%rbp)
 1364 0dd4 488975E0 		movq	%rsi, -32(%rbp)
 462:argtable2.c   ****     int tabindex=0;
 1365              		.loc 1 462 0
 1366 0dd8 C745F000 		movl	$0, -16(%rbp)
 1366      000000
 1367              	.L85:
 463:argtable2.c   ****     /* printf("arg_parse_check()\n"); */
 464:argtable2.c   ****     do
 465:argtable2.c   ****         {
 466:argtable2.c   ****         if (table[tabindex]->checkfn)
 1368              		.loc 1 466 0
 1369 0ddf 8B45F0   		movl	-16(%rbp), %eax
 1370 0de2 4898     		cltq
 1371 0de4 488D14C5 		leaq	0(,%rax,8), %rdx
 1371      00000000 
 1372 0dec 488B45E8 		movq	-24(%rbp), %rax
 1373 0df0 4801D0   		addq	%rdx, %rax
 1374 0df3 488B00   		movq	(%rax), %rax
 1375 0df6 488B4048 		movq	72(%rax), %rax
 1376 0dfa 4885C0   		testq	%rax, %rax
 1377 0dfd 7464     		je	.L84
 1378              	.LBB15:
 467:argtable2.c   ****             {
 468:argtable2.c   ****             void *parent  = table[tabindex]->parent;
 1379              		.loc 1 468 0
 1380 0dff 8B45F0   		movl	-16(%rbp), %eax
 1381 0e02 4898     		cltq
 1382 0e04 488D14C5 		leaq	0(,%rax,8), %rdx
 1382      00000000 
 1383 0e0c 488B45E8 		movq	-24(%rbp), %rax
 1384 0e10 4801D0   		addq	%rdx, %rax
 1385 0e13 488B00   		movq	(%rax), %rax
 1386 0e16 488B4030 		movq	48(%rax), %rax
 1387 0e1a 488945F8 		movq	%rax, -8(%rbp)
 469:argtable2.c   ****             int errorcode = table[tabindex]->checkfn(parent);
 1388              		.loc 1 469 0
 1389 0e1e 8B45F0   		movl	-16(%rbp), %eax
 1390 0e21 4898     		cltq
 1391 0e23 488D14C5 		leaq	0(,%rax,8), %rdx
 1391      00000000 
 1392 0e2b 488B45E8 		movq	-24(%rbp), %rax
 1393 0e2f 4801D0   		addq	%rdx, %rax
 1394 0e32 488B00   		movq	(%rax), %rax
 1395 0e35 488B4048 		movq	72(%rax), %rax
 1396 0e39 488B55F8 		movq	-8(%rbp), %rdx
 1397 0e3d 4889D7   		movq	%rdx, %rdi
 1398 0e40 FFD0     		call	*%rax
 1399 0e42 8945F4   		movl	%eax, -12(%rbp)
 470:argtable2.c   ****             if (errorcode!=0)
 1400              		.loc 1 470 0
 1401 0e45 837DF400 		cmpl	$0, -12(%rbp)
 1402 0e49 7418     		je	.L84
 471:argtable2.c   ****                 arg_register_error(endtable,parent,errorcode,NULL);
 1403              		.loc 1 471 0
 1404 0e4b 8B55F4   		movl	-12(%rbp), %edx
 1405 0e4e 488B75F8 		movq	-8(%rbp), %rsi
 1406 0e52 488B45E0 		movq	-32(%rbp), %rax
 1407 0e56 B9000000 		movl	$0, %ecx
 1407      00
 1408 0e5b 4889C7   		movq	%rax, %rdi
 1409 0e5e E89DF1FF 		call	arg_register_error
 1409      FF
 1410              	.L84:
 1411              	.LBE15:
 472:argtable2.c   ****             }
 473:argtable2.c   ****         }while(!(table[tabindex++]->flag&ARG_TERMINATOR));
 1412              		.loc 1 473 0
 1413 0e63 8B45F0   		movl	-16(%rbp), %eax
 1414 0e66 8D5001   		leal	1(%rax), %edx
 1415 0e69 8955F0   		movl	%edx, -16(%rbp)
 1416 0e6c 4898     		cltq
 1417 0e6e 488D14C5 		leaq	0(,%rax,8), %rdx
 1417      00000000 
 1418 0e76 488B45E8 		movq	-24(%rbp), %rax
 1419 0e7a 4801D0   		addq	%rdx, %rax
 1420 0e7d 488B00   		movq	(%rax), %rax
 1421 0e80 0FB600   		movzbl	(%rax), %eax
 1422 0e83 0FBEC0   		movsbl	%al, %eax
 1423 0e86 83E001   		andl	$1, %eax
 1424 0e89 85C0     		testl	%eax, %eax
 1425 0e8b 0F844EFF 		je	.L85
 1425      FFFF
 474:argtable2.c   ****     }
 1426              		.loc 1 474 0
 1427 0e91 90       		nop
 1428 0e92 C9       		leave
 1429              		.cfi_def_cfa 7, 8
 1430 0e93 C3       		ret
 1431              		.cfi_endproc
 1432              	.LFE8:
 1435              	arg_reset:
 1436              	.LFB9:
 475:argtable2.c   **** 
 476:argtable2.c   **** 
 477:argtable2.c   **** static
 478:argtable2.c   **** void arg_reset(void **argtable)
 479:argtable2.c   ****     {
 1437              		.loc 1 479 0
 1438              		.cfi_startproc
 1439 0e94 55       		pushq	%rbp
 1440              		.cfi_def_cfa_offset 16
 1441              		.cfi_offset 6, -16
 1442 0e95 4889E5   		movq	%rsp, %rbp
 1443              		.cfi_def_cfa_register 6
 1444 0e98 4883EC20 		subq	$32, %rsp
 1445 0e9c 48897DE8 		movq	%rdi, -24(%rbp)
 480:argtable2.c   ****     struct arg_hdr **table=(struct arg_hdr**)argtable;
 1446              		.loc 1 480 0
 1447 0ea0 488B45E8 		movq	-24(%rbp), %rax
 1448 0ea4 488945F8 		movq	%rax, -8(%rbp)
 481:argtable2.c   ****     int tabindex=0;
 1449              		.loc 1 481 0
 1450 0ea8 C745F400 		movl	$0, -12(%rbp)
 1450      000000
 1451              	.L88:
 482:argtable2.c   ****     /*printf("arg_reset(%p)\n",argtable);*/
 483:argtable2.c   ****     do
 484:argtable2.c   ****         {
 485:argtable2.c   ****         if (table[tabindex]->resetfn)
 1452              		.loc 1 485 0
 1453 0eaf 8B45F4   		movl	-12(%rbp), %eax
 1454 0eb2 4898     		cltq
 1455 0eb4 488D14C5 		leaq	0(,%rax,8), %rdx
 1455      00000000 
 1456 0ebc 488B45F8 		movq	-8(%rbp), %rax
 1457 0ec0 4801D0   		addq	%rdx, %rax
 1458 0ec3 488B00   		movq	(%rax), %rax
 1459 0ec6 488B4038 		movq	56(%rax), %rax
 1460 0eca 4885C0   		testq	%rax, %rax
 1461 0ecd 743C     		je	.L87
 486:argtable2.c   ****             table[tabindex]->resetfn(table[tabindex]->parent);
 1462              		.loc 1 486 0
 1463 0ecf 8B45F4   		movl	-12(%rbp), %eax
 1464 0ed2 4898     		cltq
 1465 0ed4 488D14C5 		leaq	0(,%rax,8), %rdx
 1465      00000000 
 1466 0edc 488B45F8 		movq	-8(%rbp), %rax
 1467 0ee0 4801D0   		addq	%rdx, %rax
 1468 0ee3 488B00   		movq	(%rax), %rax
 1469 0ee6 488B4038 		movq	56(%rax), %rax
 1470 0eea 8B55F4   		movl	-12(%rbp), %edx
 1471 0eed 4863D2   		movslq	%edx, %rdx
 1472 0ef0 488D0CD5 		leaq	0(,%rdx,8), %rcx
 1472      00000000 
 1473 0ef8 488B55F8 		movq	-8(%rbp), %rdx
 1474 0efc 4801CA   		addq	%rcx, %rdx
 1475 0eff 488B12   		movq	(%rdx), %rdx
 1476 0f02 488B5230 		movq	48(%rdx), %rdx
 1477 0f06 4889D7   		movq	%rdx, %rdi
 1478 0f09 FFD0     		call	*%rax
 1479              	.L87:
 487:argtable2.c   ****         } while(!(table[tabindex++]->flag&ARG_TERMINATOR));
 1480              		.loc 1 487 0
 1481 0f0b 8B45F4   		movl	-12(%rbp), %eax
 1482 0f0e 8D5001   		leal	1(%rax), %edx
 1483 0f11 8955F4   		movl	%edx, -12(%rbp)
 1484 0f14 4898     		cltq
 1485 0f16 488D14C5 		leaq	0(,%rax,8), %rdx
 1485      00000000 
 1486 0f1e 488B45F8 		movq	-8(%rbp), %rax
 1487 0f22 4801D0   		addq	%rdx, %rax
 1488 0f25 488B00   		movq	(%rax), %rax
 1489 0f28 0FB600   		movzbl	(%rax), %eax
 1490 0f2b 0FBEC0   		movsbl	%al, %eax
 1491 0f2e 83E001   		andl	$1, %eax
 1492 0f31 85C0     		testl	%eax, %eax
 1493 0f33 0F8476FF 		je	.L88
 1493      FFFF
 488:argtable2.c   ****     }
 1494              		.loc 1 488 0
 1495 0f39 90       		nop
 1496 0f3a C9       		leave
 1497              		.cfi_def_cfa 7, 8
 1498 0f3b C3       		ret
 1499              		.cfi_endproc
 1500              	.LFE9:
 1502              		.globl	arg_parse
 1504              	arg_parse:
 1505              	.LFB10:
 489:argtable2.c   **** 
 490:argtable2.c   ****     
 491:argtable2.c   **** int arg_parse(int argc, char **argv, void **argtable)
 492:argtable2.c   ****     {
 1506              		.loc 1 492 0
 1507              		.cfi_startproc
 1508 0f3c 55       		pushq	%rbp
 1509              		.cfi_def_cfa_offset 16
 1510              		.cfi_offset 6, -16
 1511 0f3d 4889E5   		movq	%rsp, %rbp
 1512              		.cfi_def_cfa_register 6
 1513 0f40 4883EC40 		subq	$64, %rsp
 1514 0f44 897DDC   		movl	%edi, -36(%rbp)
 1515 0f47 488975D0 		movq	%rsi, -48(%rbp)
 1516 0f4b 488955C8 		movq	%rdx, -56(%rbp)
 493:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr **)argtable;
 1517              		.loc 1 493 0
 1518 0f4f 488B45C8 		movq	-56(%rbp), %rax
 1519 0f53 488945E8 		movq	%rax, -24(%rbp)
 494:argtable2.c   ****     struct arg_end *endtable;
 495:argtable2.c   ****     int endindex;
 496:argtable2.c   ****     char **argvcopy = NULL;
 1520              		.loc 1 496 0
 1521 0f57 48C745F0 		movq	$0, -16(%rbp)
 1521      00000000 
 497:argtable2.c   **** 
 498:argtable2.c   ****     /*printf("arg_parse(%d,%p,%p)\n",argc,argv,argtable);*/
 499:argtable2.c   **** 
 500:argtable2.c   ****     /* reset any argtable data from previous invocations */
 501:argtable2.c   ****     arg_reset(argtable);
 1522              		.loc 1 501 0
 1523 0f5f 488B45C8 		movq	-56(%rbp), %rax
 1524 0f63 4889C7   		movq	%rax, %rdi
 1525 0f66 E829FFFF 		call	arg_reset
 1525      FF
 502:argtable2.c   **** 
 503:argtable2.c   ****     /* locate the first end-of-table marker within the array */
 504:argtable2.c   ****     endindex = arg_endindex(table);
 1526              		.loc 1 504 0
 1527 0f6b 488B45E8 		movq	-24(%rbp), %rax
 1528 0f6f 4889C7   		movq	%rax, %rdi
 1529 0f72 E84FF8FF 		call	arg_endindex
 1529      FF
 1530 0f77 8945E4   		movl	%eax, -28(%rbp)
 505:argtable2.c   ****     endtable = (struct arg_end*)table[endindex];
 1531              		.loc 1 505 0
 1532 0f7a 8B45E4   		movl	-28(%rbp), %eax
 1533 0f7d 4898     		cltq
 1534 0f7f 488D14C5 		leaq	0(,%rax,8), %rdx
 1534      00000000 
 1535 0f87 488B45E8 		movq	-24(%rbp), %rax
 1536 0f8b 4801D0   		addq	%rdx, %rax
 1537 0f8e 488B00   		movq	(%rax), %rax
 1538 0f91 488945F8 		movq	%rax, -8(%rbp)
 506:argtable2.c   **** 
 507:argtable2.c   ****     /* Special case of argc==0.  This can occur on Texas Instruments DSP. */
 508:argtable2.c   ****     /* Failure to trap this case results in an unwanted NULL result from  */
 509:argtable2.c   ****     /* the malloc for argvcopy (next code block).                         */
 510:argtable2.c   ****     if (argc==0)
 1539              		.loc 1 510 0
 1540 0f95 837DDC00 		cmpl	$0, -36(%rbp)
 1541 0f99 751F     		jne	.L90
 511:argtable2.c   ****         {
 512:argtable2.c   ****         /* We must still perform post-parse checks despite the absence of command line arguments */
 513:argtable2.c   ****         arg_parse_check(table,endtable);
 1542              		.loc 1 513 0
 1543 0f9b 488B55F8 		movq	-8(%rbp), %rdx
 1544 0f9f 488B45E8 		movq	-24(%rbp), %rax
 1545 0fa3 4889D6   		movq	%rdx, %rsi
 1546 0fa6 4889C7   		movq	%rax, %rdi
 1547 0fa9 E81AFEFF 		call	arg_parse_check
 1547      FF
 514:argtable2.c   **** 
 515:argtable2.c   ****         /* Now we are finished */
 516:argtable2.c   ****         return endtable->count;
 1548              		.loc 1 516 0
 1549 0fae 488B45F8 		movq	-8(%rbp), %rax
 1550 0fb2 8B4060   		movl	96(%rax), %eax
 1551 0fb5 E9DC0000 		jmp	.L91
 1551      00
 1552              	.L90:
 517:argtable2.c   ****         }
 518:argtable2.c   **** 
 519:argtable2.c   ****     argvcopy = malloc(sizeof(char *) * argc);
 1553              		.loc 1 519 0
 1554 0fba 8B45DC   		movl	-36(%rbp), %eax
 1555 0fbd 4898     		cltq
 1556 0fbf 48C1E003 		salq	$3, %rax
 1557 0fc3 4889C7   		movq	%rax, %rdi
 1558 0fc6 E8000000 		call	malloc@PLT
 1558      00
 1559 0fcb 488945F0 		movq	%rax, -16(%rbp)
 520:argtable2.c   ****     if (argvcopy)
 1560              		.loc 1 520 0
 1561 0fcf 48837DF0 		cmpq	$0, -16(%rbp)
 1561      00
 1562 0fd4 0F849B00 		je	.L92
 1562      0000
 1563              	.LBB16:
 521:argtable2.c   ****         {
 522:argtable2.c   ****         int i;
 523:argtable2.c   **** 
 524:argtable2.c   ****         /*
 525:argtable2.c   ****         Fill in the local copy of argv[]. We need a local copy
 526:argtable2.c   ****         because getopt rearranges argv[] which adversely affects
 527:argtable2.c   ****         susbsequent parsing attempts.
 528:argtable2.c   ****         */
 529:argtable2.c   ****         for (i=0; i<argc; i++)
 1564              		.loc 1 529 0
 1565 0fda C745E000 		movl	$0, -32(%rbp)
 1565      000000
 1566 0fe1 EB32     		jmp	.L93
 1567              	.L94:
 530:argtable2.c   ****             argvcopy[i] = argv[i];
 1568              		.loc 1 530 0 discriminator 3
 1569 0fe3 8B45E0   		movl	-32(%rbp), %eax
 1570 0fe6 4898     		cltq
 1571 0fe8 488D14C5 		leaq	0(,%rax,8), %rdx
 1571      00000000 
 1572 0ff0 488B45F0 		movq	-16(%rbp), %rax
 1573 0ff4 4801C2   		addq	%rax, %rdx
 1574 0ff7 8B45E0   		movl	-32(%rbp), %eax
 1575 0ffa 4898     		cltq
 1576 0ffc 488D0CC5 		leaq	0(,%rax,8), %rcx
 1576      00000000 
 1577 1004 488B45D0 		movq	-48(%rbp), %rax
 1578 1008 4801C8   		addq	%rcx, %rax
 1579 100b 488B00   		movq	(%rax), %rax
 1580 100e 488902   		movq	%rax, (%rdx)
 529:argtable2.c   ****             argvcopy[i] = argv[i];
 1581              		.loc 1 529 0 discriminator 3
 1582 1011 8345E001 		addl	$1, -32(%rbp)
 1583              	.L93:
 529:argtable2.c   ****             argvcopy[i] = argv[i];
 1584              		.loc 1 529 0 is_stmt 0 discriminator 1
 1585 1015 8B45E0   		movl	-32(%rbp), %eax
 1586 1018 3B45DC   		cmpl	-36(%rbp), %eax
 1587 101b 7CC6     		jl	.L94
 531:argtable2.c   **** 
 532:argtable2.c   ****         /* parse the command line (local copy) for tagged options */
 533:argtable2.c   ****         arg_parse_tagged(argc,argvcopy,table,endtable);
 1588              		.loc 1 533 0 is_stmt 1
 1589 101d 488B4DF8 		movq	-8(%rbp), %rcx
 1590 1021 488B55E8 		movq	-24(%rbp), %rdx
 1591 1025 488B75F0 		movq	-16(%rbp), %rsi
 1592 1029 8B45DC   		movl	-36(%rbp), %eax
 1593 102c 89C7     		movl	%eax, %edi
 1594 102e E8D1F7FF 		call	arg_parse_tagged
 1594      FF
 534:argtable2.c   **** 
 535:argtable2.c   ****         /* parse the command line (local copy) for untagged options */
 536:argtable2.c   ****         arg_parse_untagged(argc,argvcopy,table,endtable);
 1595              		.loc 1 536 0
 1596 1033 488B4DF8 		movq	-8(%rbp), %rcx
 1597 1037 488B55E8 		movq	-24(%rbp), %rdx
 1598 103b 488B75F0 		movq	-16(%rbp), %rsi
 1599 103f 8B45DC   		movl	-36(%rbp), %eax
 1600 1042 89C7     		movl	%eax, %edi
 1601 1044 E852FBFF 		call	arg_parse_untagged
 1601      FF
 537:argtable2.c   **** 
 538:argtable2.c   ****         /* if no errors so far then perform post-parse checks otherwise dont bother */
 539:argtable2.c   ****         if (endtable->count==0)
 1602              		.loc 1 539 0
 1603 1049 488B45F8 		movq	-8(%rbp), %rax
 1604 104d 8B4060   		movl	96(%rax), %eax
 1605 1050 85C0     		testl	%eax, %eax
 1606 1052 7513     		jne	.L95
 540:argtable2.c   ****             arg_parse_check(table,endtable);
 1607              		.loc 1 540 0
 1608 1054 488B55F8 		movq	-8(%rbp), %rdx
 1609 1058 488B45E8 		movq	-24(%rbp), %rax
 1610 105c 4889D6   		movq	%rdx, %rsi
 1611 105f 4889C7   		movq	%rax, %rdi
 1612 1062 E861FDFF 		call	arg_parse_check
 1612      FF
 1613              	.L95:
 541:argtable2.c   **** 
 542:argtable2.c   ****         /* release the local copt of argv[] */
 543:argtable2.c   ****         free(argvcopy);
 1614              		.loc 1 543 0
 1615 1067 488B45F0 		movq	-16(%rbp), %rax
 1616 106b 4889C7   		movq	%rax, %rdi
 1617 106e E8000000 		call	free@PLT
 1617      00
 1618              	.LBE16:
 1619 1073 EB1A     		jmp	.L96
 1620              	.L92:
 544:argtable2.c   ****         }
 545:argtable2.c   ****     else
 546:argtable2.c   ****         {
 547:argtable2.c   ****         /* memory alloc failed */
 548:argtable2.c   ****         arg_register_error(endtable,endtable,ARG_EMALLOC,NULL);
 1621              		.loc 1 548 0
 1622 1075 488B75F8 		movq	-8(%rbp), %rsi
 1623 1079 488B45F8 		movq	-8(%rbp), %rax
 1624 107d B9000000 		movl	$0, %ecx
 1624      00
 1625 1082 BA020000 		movl	$2, %edx
 1625      00
 1626 1087 4889C7   		movq	%rax, %rdi
 1627 108a E871EFFF 		call	arg_register_error
 1627      FF
 1628              	.L96:
 549:argtable2.c   ****         }        
 550:argtable2.c   **** 
 551:argtable2.c   ****     return endtable->count;
 1629              		.loc 1 551 0
 1630 108f 488B45F8 		movq	-8(%rbp), %rax
 1631 1093 8B4060   		movl	96(%rax), %eax
 1632              	.L91:
 552:argtable2.c   ****     }
 1633              		.loc 1 552 0
 1634 1096 C9       		leave
 1635              		.cfi_def_cfa 7, 8
 1636 1097 C3       		ret
 1637              		.cfi_endproc
 1638              	.LFE10:
 1641              	arg_cat:
 1642              	.LFB11:
 553:argtable2.c   **** 
 554:argtable2.c   **** 
 555:argtable2.c   **** /*
 556:argtable2.c   ****  * Concatenate contents of src[] string onto *pdest[] string.
 557:argtable2.c   ****  * The *pdest pointer is altered to point to the end of the
 558:argtable2.c   ****  * target string and *pndest is decremented by the same number
 559:argtable2.c   ****  * of chars.
 560:argtable2.c   ****  * Does not append more than *pndest chars into *pdest[]
 561:argtable2.c   ****  * so as to prevent buffer overruns.
 562:argtable2.c   ****  * Its something like strncat() but more efficient for repeated
 563:argtable2.c   ****  * calls on the same destination string.
 564:argtable2.c   ****  * Example of use:
 565:argtable2.c   ****  *   char dest[30] = "good"
 566:argtable2.c   ****  *   size_t ndest = sizeof(dest);
 567:argtable2.c   ****  *   char *pdest = dest;
 568:argtable2.c   ****  *   arg_char(&pdest,"bye ",&ndest);
 569:argtable2.c   ****  *   arg_char(&pdest,"cruel ",&ndest);
 570:argtable2.c   ****  *   arg_char(&pdest,"world!",&ndest);
 571:argtable2.c   ****  * Results in:
 572:argtable2.c   ****  *   dest[] == "goodbye cruel world!"
 573:argtable2.c   ****  *   ndest  == 10
 574:argtable2.c   ****  */
 575:argtable2.c   **** static
 576:argtable2.c   **** void arg_cat(char **pdest, const char *src, size_t *pndest)
 577:argtable2.c   ****     {
 1643              		.loc 1 577 0
 1644              		.cfi_startproc
 1645 1098 55       		pushq	%rbp
 1646              		.cfi_def_cfa_offset 16
 1647              		.cfi_offset 6, -16
 1648 1099 4889E5   		movq	%rsp, %rbp
 1649              		.cfi_def_cfa_register 6
 1650 109c 48897DE8 		movq	%rdi, -24(%rbp)
 1651 10a0 488975E0 		movq	%rsi, -32(%rbp)
 1652 10a4 488955D8 		movq	%rdx, -40(%rbp)
 578:argtable2.c   ****     char *dest = *pdest;
 1653              		.loc 1 578 0
 1654 10a8 488B45E8 		movq	-24(%rbp), %rax
 1655 10ac 488B00   		movq	(%rax), %rax
 1656 10af 488945F0 		movq	%rax, -16(%rbp)
 579:argtable2.c   ****     char *end  = dest + *pndest;
 1657              		.loc 1 579 0
 1658 10b3 488B45D8 		movq	-40(%rbp), %rax
 1659 10b7 488B10   		movq	(%rax), %rdx
 1660 10ba 488B45F0 		movq	-16(%rbp), %rax
 1661 10be 4801D0   		addq	%rdx, %rax
 1662 10c1 488945F8 		movq	%rax, -8(%rbp)
 580:argtable2.c   **** 
 581:argtable2.c   ****     /*locate null terminator of dest string */
 582:argtable2.c   ****     while(dest<end && *dest!=0)
 1663              		.loc 1 582 0
 1664 10c5 EB05     		jmp	.L98
 1665              	.L100:
 583:argtable2.c   ****         dest++;
 1666              		.loc 1 583 0
 1667 10c7 488345F0 		addq	$1, -16(%rbp)
 1667      01
 1668              	.L98:
 582:argtable2.c   ****         dest++;
 1669              		.loc 1 582 0
 1670 10cc 488B45F0 		movq	-16(%rbp), %rax
 1671 10d0 483B45F8 		cmpq	-8(%rbp), %rax
 1672 10d4 732A     		jnb	.L101
 582:argtable2.c   ****         dest++;
 1673              		.loc 1 582 0 is_stmt 0 discriminator 1
 1674 10d6 488B45F0 		movq	-16(%rbp), %rax
 1675 10da 0FB600   		movzbl	(%rax), %eax
 1676 10dd 84C0     		testb	%al, %al
 1677 10df 75E6     		jne	.L100
 584:argtable2.c   **** 
 585:argtable2.c   ****     /* concat src string to dest string */
 586:argtable2.c   ****     while(dest<end && *src!=0)
 1678              		.loc 1 586 0 is_stmt 1
 1679 10e1 EB1D     		jmp	.L101
 1680              	.L103:
 587:argtable2.c   ****         *dest++ = *src++;
 1681              		.loc 1 587 0
 1682 10e3 488B45F0 		movq	-16(%rbp), %rax
 1683 10e7 488D5001 		leaq	1(%rax), %rdx
 1684 10eb 488955F0 		movq	%rdx, -16(%rbp)
 1685 10ef 488B55E0 		movq	-32(%rbp), %rdx
 1686 10f3 488D4A01 		leaq	1(%rdx), %rcx
 1687 10f7 48894DE0 		movq	%rcx, -32(%rbp)
 1688 10fb 0FB612   		movzbl	(%rdx), %edx
 1689 10fe 8810     		movb	%dl, (%rax)
 1690              	.L101:
 586:argtable2.c   ****         *dest++ = *src++;
 1691              		.loc 1 586 0
 1692 1100 488B45F0 		movq	-16(%rbp), %rax
 1693 1104 483B45F8 		cmpq	-8(%rbp), %rax
 1694 1108 730B     		jnb	.L102
 586:argtable2.c   ****         *dest++ = *src++;
 1695              		.loc 1 586 0 is_stmt 0 discriminator 1
 1696 110a 488B45E0 		movq	-32(%rbp), %rax
 1697 110e 0FB600   		movzbl	(%rax), %eax
 1698 1111 84C0     		testb	%al, %al
 1699 1113 75CE     		jne	.L103
 1700              	.L102:
 588:argtable2.c   **** 
 589:argtable2.c   ****     /* null terminate dest string */
 590:argtable2.c   ****     *dest=0;
 1701              		.loc 1 590 0 is_stmt 1
 1702 1115 488B45F0 		movq	-16(%rbp), %rax
 1703 1119 C60000   		movb	$0, (%rax)
 591:argtable2.c   **** 
 592:argtable2.c   ****     /* update *pdest and *pndest */
 593:argtable2.c   ****     *pndest = end - dest;
 1704              		.loc 1 593 0
 1705 111c 488B55F8 		movq	-8(%rbp), %rdx
 1706 1120 488B45F0 		movq	-16(%rbp), %rax
 1707 1124 4829C2   		subq	%rax, %rdx
 1708 1127 4889D0   		movq	%rdx, %rax
 1709 112a 4889C2   		movq	%rax, %rdx
 1710 112d 488B45D8 		movq	-40(%rbp), %rax
 1711 1131 488910   		movq	%rdx, (%rax)
 594:argtable2.c   ****     *pdest  = dest;
 1712              		.loc 1 594 0
 1713 1134 488B45E8 		movq	-24(%rbp), %rax
 1714 1138 488B55F0 		movq	-16(%rbp), %rdx
 1715 113c 488910   		movq	%rdx, (%rax)
 595:argtable2.c   ****     }
 1716              		.loc 1 595 0
 1717 113f 90       		nop
 1718 1140 5D       		popq	%rbp
 1719              		.cfi_def_cfa 7, 8
 1720 1141 C3       		ret
 1721              		.cfi_endproc
 1722              	.LFE11:
 1724              		.section	.rodata
 1725              	.LC6:
 1726 008a 2000     		.string	" "
 1727              	.LC7:
 1728 008c 5B00     		.string	"["
 1729              	.LC8:
 1730 008e 5D00     		.string	"]"
 1731              	.LC9:
 1732 0090 2D2D00   		.string	"--"
 1733              	.LC10:
 1734 0093 2C00     		.string	","
 1735              	.LC11:
 1736 0095 3D00     		.string	"="
 1737              		.text
 1739              	arg_cat_option:
 1740              	.LFB12:
 596:argtable2.c   **** 
 597:argtable2.c   **** 
 598:argtable2.c   **** static
 599:argtable2.c   **** void arg_cat_option(char *dest, size_t ndest, const char *shortopts, const char *longopts, const ch
 600:argtable2.c   ****     {
 1741              		.loc 1 600 0
 1742              		.cfi_startproc
 1743 1142 55       		pushq	%rbp
 1744              		.cfi_def_cfa_offset 16
 1745              		.cfi_offset 6, -16
 1746 1143 4889E5   		movq	%rsp, %rbp
 1747              		.cfi_def_cfa_register 6
 1748 1146 4883EC50 		subq	$80, %rsp
 1749 114a 48897DD8 		movq	%rdi, -40(%rbp)
 1750 114e 488975D0 		movq	%rsi, -48(%rbp)
 1751 1152 488955C8 		movq	%rdx, -56(%rbp)
 1752 1156 48894DC0 		movq	%rcx, -64(%rbp)
 1753 115a 4C8945B8 		movq	%r8, -72(%rbp)
 1754 115e 44894DB4 		movl	%r9d, -76(%rbp)
 1755              		.loc 1 600 0
 1756 1162 64488B04 		movq	%fs:40, %rax
 1756      25280000 
 1756      00
 1757 116b 488945F8 		movq	%rax, -8(%rbp)
 1758 116f 31C0     		xorl	%eax, %eax
 601:argtable2.c   ****     if (shortopts)
 1759              		.loc 1 601 0
 1760 1171 48837DC8 		cmpq	$0, -56(%rbp)
 1760      00
 1761 1176 0F84B700 		je	.L105
 1761      0000
 1762              	.LBB17:
 602:argtable2.c   ****         {
 603:argtable2.c   ****         char option[3];
 604:argtable2.c   ****         
 605:argtable2.c   ****         /* note: option array[] is initialiazed dynamically here to satisfy   */
 606:argtable2.c   ****         /* a deficiency in the watcom compiler wrt static array initializers. */
 607:argtable2.c   ****         option[0] = '-';
 1763              		.loc 1 607 0
 1764 117c C645F02D 		movb	$45, -16(%rbp)
 608:argtable2.c   ****         option[1] = shortopts[0];
 1765              		.loc 1 608 0
 1766 1180 488B45C8 		movq	-56(%rbp), %rax
 1767 1184 0FB600   		movzbl	(%rax), %eax
 1768 1187 8845F1   		movb	%al, -15(%rbp)
 609:argtable2.c   ****         option[2] = 0;
 1769              		.loc 1 609 0
 1770 118a C645F200 		movb	$0, -14(%rbp)
 610:argtable2.c   ****         
 611:argtable2.c   ****         arg_cat(&dest,option,&ndest);
 1771              		.loc 1 611 0
 1772 118e 488D55D0 		leaq	-48(%rbp), %rdx
 1773 1192 488D4DF0 		leaq	-16(%rbp), %rcx
 1774 1196 488D45D8 		leaq	-40(%rbp), %rax
 1775 119a 4889CE   		movq	%rcx, %rsi
 1776 119d 4889C7   		movq	%rax, %rdi
 1777 11a0 E8F3FEFF 		call	arg_cat
 1777      FF
 612:argtable2.c   ****         if (datatype)
 1778              		.loc 1 612 0
 1779 11a5 48837DB8 		cmpq	$0, -72(%rbp)
 1779      00
 1780 11aa 0F84D401 		je	.L114
 1780      0000
 613:argtable2.c   ****             {
 614:argtable2.c   ****             arg_cat(&dest," ",&ndest);
 1781              		.loc 1 614 0
 1782 11b0 488D55D0 		leaq	-48(%rbp), %rdx
 1783 11b4 488D45D8 		leaq	-40(%rbp), %rax
 1784 11b8 488D3500 		leaq	.LC6(%rip), %rsi
 1784      000000
 1785 11bf 4889C7   		movq	%rax, %rdi
 1786 11c2 E8D1FEFF 		call	arg_cat
 1786      FF
 615:argtable2.c   ****             if (optvalue)
 1787              		.loc 1 615 0
 1788 11c7 837DB400 		cmpl	$0, -76(%rbp)
 1789 11cb 744A     		je	.L107
 616:argtable2.c   ****                 {
 617:argtable2.c   ****                 arg_cat(&dest,"[",&ndest);
 1790              		.loc 1 617 0
 1791 11cd 488D55D0 		leaq	-48(%rbp), %rdx
 1792 11d1 488D45D8 		leaq	-40(%rbp), %rax
 1793 11d5 488D3500 		leaq	.LC7(%rip), %rsi
 1793      000000
 1794 11dc 4889C7   		movq	%rax, %rdi
 1795 11df E8B4FEFF 		call	arg_cat
 1795      FF
 618:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 1796              		.loc 1 618 0
 1797 11e4 488D55D0 		leaq	-48(%rbp), %rdx
 1798 11e8 488B4DB8 		movq	-72(%rbp), %rcx
 1799 11ec 488D45D8 		leaq	-40(%rbp), %rax
 1800 11f0 4889CE   		movq	%rcx, %rsi
 1801 11f3 4889C7   		movq	%rax, %rdi
 1802 11f6 E89DFEFF 		call	arg_cat
 1802      FF
 619:argtable2.c   ****                 arg_cat(&dest,"]",&ndest);
 1803              		.loc 1 619 0
 1804 11fb 488D55D0 		leaq	-48(%rbp), %rdx
 1805 11ff 488D45D8 		leaq	-40(%rbp), %rax
 1806 1203 488D3500 		leaq	.LC8(%rip), %rsi
 1806      000000
 1807 120a 4889C7   		movq	%rax, %rdi
 1808 120d E886FEFF 		call	arg_cat
 1808      FF
 1809              	.LBE17:
 620:argtable2.c   ****                 }
 621:argtable2.c   ****             else
 622:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 623:argtable2.c   ****             }
 624:argtable2.c   ****         }
 625:argtable2.c   ****     else if (longopts)
 626:argtable2.c   ****         {
 627:argtable2.c   ****         size_t ncspn;
 628:argtable2.c   **** 
 629:argtable2.c   ****         /* add "--" tag prefix */
 630:argtable2.c   ****         arg_cat(&dest,"--",&ndest);
 631:argtable2.c   **** 
 632:argtable2.c   ****         /* add comma separated option tag */
 633:argtable2.c   ****         ncspn = strcspn(longopts,",");
 634:argtable2.c   ****         strncat(dest,longopts,(ncspn<ndest)?ncspn:ndest);
 635:argtable2.c   **** 
 636:argtable2.c   ****         if (datatype)
 637:argtable2.c   ****             {
 638:argtable2.c   ****             arg_cat(&dest,"=",&ndest);
 639:argtable2.c   ****             if (optvalue)
 640:argtable2.c   ****                 {
 641:argtable2.c   ****                 arg_cat(&dest,"[",&ndest);
 642:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 643:argtable2.c   ****                 arg_cat(&dest,"]",&ndest);
 644:argtable2.c   ****                 }
 645:argtable2.c   ****             else
 646:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 647:argtable2.c   ****             }
 648:argtable2.c   ****         }
 649:argtable2.c   ****     else if (datatype)
 650:argtable2.c   ****         {
 651:argtable2.c   ****         if (optvalue)
 652:argtable2.c   ****             {
 653:argtable2.c   ****             arg_cat(&dest,"[",&ndest);
 654:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 655:argtable2.c   ****             arg_cat(&dest,"]",&ndest);
 656:argtable2.c   ****             }
 657:argtable2.c   ****         else
 658:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 659:argtable2.c   ****         }
 660:argtable2.c   ****     }
 1810              		.loc 1 660 0
 1811 1212 E96D0100 		jmp	.L114
 1811      00
 1812              	.L107:
 1813              	.LBB18:
 622:argtable2.c   ****             }
 1814              		.loc 1 622 0
 1815 1217 488D55D0 		leaq	-48(%rbp), %rdx
 1816 121b 488B4DB8 		movq	-72(%rbp), %rcx
 1817 121f 488D45D8 		leaq	-40(%rbp), %rax
 1818 1223 4889CE   		movq	%rcx, %rsi
 1819 1226 4889C7   		movq	%rax, %rdi
 1820 1229 E86AFEFF 		call	arg_cat
 1820      FF
 1821              	.LBE18:
 1822              		.loc 1 660 0
 1823 122e E9510100 		jmp	.L114
 1823      00
 1824              	.L105:
 625:argtable2.c   ****         {
 1825              		.loc 1 625 0
 1826 1233 48837DC0 		cmpq	$0, -64(%rbp)
 1826      00
 1827 1238 0F84DB00 		je	.L109
 1827      0000
 1828              	.LBB19:
 630:argtable2.c   **** 
 1829              		.loc 1 630 0
 1830 123e 488D55D0 		leaq	-48(%rbp), %rdx
 1831 1242 488D45D8 		leaq	-40(%rbp), %rax
 1832 1246 488D3500 		leaq	.LC9(%rip), %rsi
 1832      000000
 1833 124d 4889C7   		movq	%rax, %rdi
 1834 1250 E843FEFF 		call	arg_cat
 1834      FF
 633:argtable2.c   ****         strncat(dest,longopts,(ncspn<ndest)?ncspn:ndest);
 1835              		.loc 1 633 0
 1836 1255 488B45C0 		movq	-64(%rbp), %rax
 1837 1259 488D3500 		leaq	.LC10(%rip), %rsi
 1837      000000
 1838 1260 4889C7   		movq	%rax, %rdi
 1839 1263 E8000000 		call	strcspn@PLT
 1839      00
 1840 1268 488945E8 		movq	%rax, -24(%rbp)
 634:argtable2.c   **** 
 1841              		.loc 1 634 0
 1842 126c 488B55D0 		movq	-48(%rbp), %rdx
 1843 1270 488B45E8 		movq	-24(%rbp), %rax
 1844 1274 4839C2   		cmpq	%rax, %rdx
 1845 1277 480F47D0 		cmova	%rax, %rdx
 1846 127b 488B45D8 		movq	-40(%rbp), %rax
 1847 127f 488B4DC0 		movq	-64(%rbp), %rcx
 1848 1283 4889CE   		movq	%rcx, %rsi
 1849 1286 4889C7   		movq	%rax, %rdi
 1850 1289 E8000000 		call	strncat@PLT
 1850      00
 636:argtable2.c   ****             {
 1851              		.loc 1 636 0
 1852 128e 48837DB8 		cmpq	$0, -72(%rbp)
 1852      00
 1853 1293 0F84EB00 		je	.L114
 1853      0000
 638:argtable2.c   ****             if (optvalue)
 1854              		.loc 1 638 0
 1855 1299 488D55D0 		leaq	-48(%rbp), %rdx
 1856 129d 488D45D8 		leaq	-40(%rbp), %rax
 1857 12a1 488D3500 		leaq	.LC11(%rip), %rsi
 1857      000000
 1858 12a8 4889C7   		movq	%rax, %rdi
 1859 12ab E8E8FDFF 		call	arg_cat
 1859      FF
 639:argtable2.c   ****                 {
 1860              		.loc 1 639 0
 1861 12b0 837DB400 		cmpl	$0, -76(%rbp)
 1862 12b4 744A     		je	.L111
 641:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 1863              		.loc 1 641 0
 1864 12b6 488D55D0 		leaq	-48(%rbp), %rdx
 1865 12ba 488D45D8 		leaq	-40(%rbp), %rax
 1866 12be 488D3500 		leaq	.LC7(%rip), %rsi
 1866      000000
 1867 12c5 4889C7   		movq	%rax, %rdi
 1868 12c8 E8CBFDFF 		call	arg_cat
 1868      FF
 642:argtable2.c   ****                 arg_cat(&dest,"]",&ndest);
 1869              		.loc 1 642 0
 1870 12cd 488D55D0 		leaq	-48(%rbp), %rdx
 1871 12d1 488B4DB8 		movq	-72(%rbp), %rcx
 1872 12d5 488D45D8 		leaq	-40(%rbp), %rax
 1873 12d9 4889CE   		movq	%rcx, %rsi
 1874 12dc 4889C7   		movq	%rax, %rdi
 1875 12df E8B4FDFF 		call	arg_cat
 1875      FF
 643:argtable2.c   ****                 }
 1876              		.loc 1 643 0
 1877 12e4 488D55D0 		leaq	-48(%rbp), %rdx
 1878 12e8 488D45D8 		leaq	-40(%rbp), %rax
 1879 12ec 488D3500 		leaq	.LC8(%rip), %rsi
 1879      000000
 1880 12f3 4889C7   		movq	%rax, %rdi
 1881 12f6 E89DFDFF 		call	arg_cat
 1881      FF
 1882              	.LBE19:
 1883              		.loc 1 660 0
 1884 12fb E9840000 		jmp	.L114
 1884      00
 1885              	.L111:
 1886              	.LBB20:
 646:argtable2.c   ****             }
 1887              		.loc 1 646 0
 1888 1300 488D55D0 		leaq	-48(%rbp), %rdx
 1889 1304 488B4DB8 		movq	-72(%rbp), %rcx
 1890 1308 488D45D8 		leaq	-40(%rbp), %rax
 1891 130c 4889CE   		movq	%rcx, %rsi
 1892 130f 4889C7   		movq	%rax, %rdi
 1893 1312 E881FDFF 		call	arg_cat
 1893      FF
 1894              	.LBE20:
 1895              		.loc 1 660 0
 1896 1317 EB6B     		jmp	.L114
 1897              	.L109:
 649:argtable2.c   ****         {
 1898              		.loc 1 649 0
 1899 1319 48837DB8 		cmpq	$0, -72(%rbp)
 1899      00
 1900 131e 7464     		je	.L114
 651:argtable2.c   ****             {
 1901              		.loc 1 651 0
 1902 1320 837DB400 		cmpl	$0, -76(%rbp)
 1903 1324 7447     		je	.L112
 653:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 1904              		.loc 1 653 0
 1905 1326 488D55D0 		leaq	-48(%rbp), %rdx
 1906 132a 488D45D8 		leaq	-40(%rbp), %rax
 1907 132e 488D3500 		leaq	.LC7(%rip), %rsi
 1907      000000
 1908 1335 4889C7   		movq	%rax, %rdi
 1909 1338 E85BFDFF 		call	arg_cat
 1909      FF
 654:argtable2.c   ****             arg_cat(&dest,"]",&ndest);
 1910              		.loc 1 654 0
 1911 133d 488D55D0 		leaq	-48(%rbp), %rdx
 1912 1341 488B4DB8 		movq	-72(%rbp), %rcx
 1913 1345 488D45D8 		leaq	-40(%rbp), %rax
 1914 1349 4889CE   		movq	%rcx, %rsi
 1915 134c 4889C7   		movq	%rax, %rdi
 1916 134f E844FDFF 		call	arg_cat
 1916      FF
 655:argtable2.c   ****             }
 1917              		.loc 1 655 0
 1918 1354 488D55D0 		leaq	-48(%rbp), %rdx
 1919 1358 488D45D8 		leaq	-40(%rbp), %rax
 1920 135c 488D3500 		leaq	.LC8(%rip), %rsi
 1920      000000
 1921 1363 4889C7   		movq	%rax, %rdi
 1922 1366 E82DFDFF 		call	arg_cat
 1922      FF
 1923              		.loc 1 660 0
 1924 136b EB17     		jmp	.L114
 1925              	.L112:
 658:argtable2.c   ****         }
 1926              		.loc 1 658 0
 1927 136d 488D55D0 		leaq	-48(%rbp), %rdx
 1928 1371 488B4DB8 		movq	-72(%rbp), %rcx
 1929 1375 488D45D8 		leaq	-40(%rbp), %rax
 1930 1379 4889CE   		movq	%rcx, %rsi
 1931 137c 4889C7   		movq	%rax, %rdi
 1932 137f E814FDFF 		call	arg_cat
 1932      FF
 1933              	.L114:
 1934              		.loc 1 660 0
 1935 1384 90       		nop
 1936 1385 488B45F8 		movq	-8(%rbp), %rax
 1937 1389 64483304 		xorq	%fs:40, %rax
 1937      25280000 
 1937      00
 1938 1392 7405     		je	.L113
 1939 1394 E8000000 		call	__stack_chk_fail@PLT
 1939      00
 1940              	.L113:
 1941 1399 C9       		leave
 1942              		.cfi_def_cfa 7, 8
 1943 139a C3       		ret
 1944              		.cfi_endproc
 1945              	.LFE12:
 1947              		.section	.rodata
 1948              	.LC12:
 1949 0097 00       		.string	""
 1950              		.text
 1952              	arg_cat_optionv:
 1953              	.LFB13:
 661:argtable2.c   **** 
 662:argtable2.c   **** static
 663:argtable2.c   **** void arg_cat_optionv(char *dest, size_t ndest, const char *shortopts, const char *longopts, const c
 664:argtable2.c   ****     {
 1954              		.loc 1 664 0
 1955              		.cfi_startproc
 1956 139b 55       		pushq	%rbp
 1957              		.cfi_def_cfa_offset 16
 1958              		.cfi_offset 6, -16
 1959 139c 4889E5   		movq	%rsp, %rbp
 1960              		.cfi_def_cfa_register 6
 1961 139f 4883EC70 		subq	$112, %rsp
 1962 13a3 48897DC8 		movq	%rdi, -56(%rbp)
 1963 13a7 488975C0 		movq	%rsi, -64(%rbp)
 1964 13ab 488955B8 		movq	%rdx, -72(%rbp)
 1965 13af 48894DB0 		movq	%rcx, -80(%rbp)
 1966 13b3 4C8945A8 		movq	%r8, -88(%rbp)
 1967 13b7 44894DA4 		movl	%r9d, -92(%rbp)
 1968 13bb 488B4510 		movq	16(%rbp), %rax
 1969 13bf 48894598 		movq	%rax, -104(%rbp)
 1970              		.loc 1 664 0
 1971 13c3 64488B04 		movq	%fs:40, %rax
 1971      25280000 
 1971      00
 1972 13cc 488945F8 		movq	%rax, -8(%rbp)
 1973 13d0 31C0     		xorl	%eax, %eax
 665:argtable2.c   ****     separator = separator ? separator : "";
 1974              		.loc 1 665 0
 1975 13d2 48837D98 		cmpq	$0, -104(%rbp)
 1975      00
 1976 13d7 7406     		je	.L116
 1977              		.loc 1 665 0 is_stmt 0 discriminator 1
 1978 13d9 488B4598 		movq	-104(%rbp), %rax
 1979 13dd EB07     		jmp	.L117
 1980              	.L116:
 1981              		.loc 1 665 0 discriminator 2
 1982 13df 488D0500 		leaq	.LC12(%rip), %rax
 1982      000000
 1983              	.L117:
 1984              		.loc 1 665 0 discriminator 4
 1985 13e6 48894598 		movq	%rax, -104(%rbp)
 666:argtable2.c   **** 
 667:argtable2.c   ****     if (shortopts)
 1986              		.loc 1 667 0 is_stmt 1 discriminator 4
 1987 13ea 48837DB8 		cmpq	$0, -72(%rbp)
 1987      00
 1988 13ef 7465     		je	.L118
 1989              	.LBB21:
 668:argtable2.c   ****         {
 669:argtable2.c   ****         const char *c = shortopts;
 1990              		.loc 1 669 0
 1991 13f1 488B45B8 		movq	-72(%rbp), %rax
 1992 13f5 488945D8 		movq	%rax, -40(%rbp)
 670:argtable2.c   ****         while(*c)
 1993              		.loc 1 670 0
 1994 13f9 EB50     		jmp	.L119
 1995              	.L121:
 1996              	.LBB22:
 671:argtable2.c   ****             {
 672:argtable2.c   ****             /* "-a|-b|-c" */
 673:argtable2.c   ****             char shortopt[3];
 674:argtable2.c   ****         
 675:argtable2.c   ****             /* note: shortopt array[] is initialiazed dynamically here to satisfy */
 676:argtable2.c   ****             /* a deficiency in the watcom compiler wrt static array initializers. */
 677:argtable2.c   ****             shortopt[0]='-';
 1997              		.loc 1 677 0
 1998 13fb C645F02D 		movb	$45, -16(%rbp)
 678:argtable2.c   ****             shortopt[1]=*c;
 1999              		.loc 1 678 0
 2000 13ff 488B45D8 		movq	-40(%rbp), %rax
 2001 1403 0FB600   		movzbl	(%rax), %eax
 2002 1406 8845F1   		movb	%al, -15(%rbp)
 679:argtable2.c   ****             shortopt[2]=0;
 2003              		.loc 1 679 0
 2004 1409 C645F200 		movb	$0, -14(%rbp)
 680:argtable2.c   ****             
 681:argtable2.c   ****             arg_cat(&dest,shortopt,&ndest);
 2005              		.loc 1 681 0
 2006 140d 488D55C0 		leaq	-64(%rbp), %rdx
 2007 1411 488D4DF0 		leaq	-16(%rbp), %rcx
 2008 1415 488D45C8 		leaq	-56(%rbp), %rax
 2009 1419 4889CE   		movq	%rcx, %rsi
 2010 141c 4889C7   		movq	%rax, %rdi
 2011 141f E874FCFF 		call	arg_cat
 2011      FF
 682:argtable2.c   ****             if (*++c)
 2012              		.loc 1 682 0
 2013 1424 488345D8 		addq	$1, -40(%rbp)
 2013      01
 2014 1429 488B45D8 		movq	-40(%rbp), %rax
 2015 142d 0FB600   		movzbl	(%rax), %eax
 2016 1430 84C0     		testb	%al, %al
 2017 1432 7417     		je	.L119
 683:argtable2.c   ****                 arg_cat(&dest,separator,&ndest);
 2018              		.loc 1 683 0
 2019 1434 488D55C0 		leaq	-64(%rbp), %rdx
 2020 1438 488B4D98 		movq	-104(%rbp), %rcx
 2021 143c 488D45C8 		leaq	-56(%rbp), %rax
 2022 1440 4889CE   		movq	%rcx, %rsi
 2023 1443 4889C7   		movq	%rax, %rdi
 2024 1446 E84DFCFF 		call	arg_cat
 2024      FF
 2025              	.L119:
 2026              	.LBE22:
 670:argtable2.c   ****             {
 2027              		.loc 1 670 0
 2028 144b 488B45D8 		movq	-40(%rbp), %rax
 2029 144f 0FB600   		movzbl	(%rax), %eax
 2030 1452 84C0     		testb	%al, %al
 2031 1454 75A5     		jne	.L121
 2032              	.L118:
 2033              	.LBE21:
 684:argtable2.c   ****             }
 685:argtable2.c   ****         }
 686:argtable2.c   **** 
 687:argtable2.c   ****     /* put separator between long opts and short opts */
 688:argtable2.c   ****     if (shortopts && longopts)
 2034              		.loc 1 688 0
 2035 1456 48837DB8 		cmpq	$0, -72(%rbp)
 2035      00
 2036 145b 741E     		je	.L122
 2037              		.loc 1 688 0 is_stmt 0 discriminator 1
 2038 145d 48837DB0 		cmpq	$0, -80(%rbp)
 2038      00
 2039 1462 7417     		je	.L122
 689:argtable2.c   ****         arg_cat(&dest,separator,&ndest);
 2040              		.loc 1 689 0 is_stmt 1
 2041 1464 488D55C0 		leaq	-64(%rbp), %rdx
 2042 1468 488B4D98 		movq	-104(%rbp), %rcx
 2043 146c 488D45C8 		leaq	-56(%rbp), %rax
 2044 1470 4889CE   		movq	%rcx, %rsi
 2045 1473 4889C7   		movq	%rax, %rdi
 2046 1476 E81DFCFF 		call	arg_cat
 2046      FF
 2047              	.L122:
 690:argtable2.c   **** 
 691:argtable2.c   ****     if (longopts)
 2048              		.loc 1 691 0
 2049 147b 48837DB0 		cmpq	$0, -80(%rbp)
 2049      00
 2050 1480 0F849800 		je	.L123
 2050      0000
 2051              	.LBB23:
 692:argtable2.c   ****         {
 693:argtable2.c   ****         const char *c = longopts;
 2052              		.loc 1 693 0
 2053 1486 488B45B0 		movq	-80(%rbp), %rax
 2054 148a 488945E0 		movq	%rax, -32(%rbp)
 694:argtable2.c   ****         while(*c)
 2055              		.loc 1 694 0
 2056 148e EB7F     		jmp	.L124
 2057              	.L125:
 2058              	.LBB24:
 695:argtable2.c   ****             {
 696:argtable2.c   ****             size_t ncspn;
 697:argtable2.c   **** 
 698:argtable2.c   ****             /* add "--" tag prefix */
 699:argtable2.c   ****             arg_cat(&dest,"--",&ndest);
 2059              		.loc 1 699 0
 2060 1490 488D55C0 		leaq	-64(%rbp), %rdx
 2061 1494 488D45C8 		leaq	-56(%rbp), %rax
 2062 1498 488D3500 		leaq	.LC9(%rip), %rsi
 2062      000000
 2063 149f 4889C7   		movq	%rax, %rdi
 2064 14a2 E8F1FBFF 		call	arg_cat
 2064      FF
 700:argtable2.c   **** 
 701:argtable2.c   ****             /* add comma separated option tag */
 702:argtable2.c   ****             ncspn = strcspn(c,",");
 2065              		.loc 1 702 0
 2066 14a7 488B45E0 		movq	-32(%rbp), %rax
 2067 14ab 488D3500 		leaq	.LC10(%rip), %rsi
 2067      000000
 2068 14b2 4889C7   		movq	%rax, %rdi
 2069 14b5 E8000000 		call	strcspn@PLT
 2069      00
 2070 14ba 488945E8 		movq	%rax, -24(%rbp)
 703:argtable2.c   ****             strncat(dest,c,(ncspn<ndest)?ncspn:ndest);
 2071              		.loc 1 703 0
 2072 14be 488B55C0 		movq	-64(%rbp), %rdx
 2073 14c2 488B45E8 		movq	-24(%rbp), %rax
 2074 14c6 4839C2   		cmpq	%rax, %rdx
 2075 14c9 480F47D0 		cmova	%rax, %rdx
 2076 14cd 488B45C8 		movq	-56(%rbp), %rax
 2077 14d1 488B4DE0 		movq	-32(%rbp), %rcx
 2078 14d5 4889CE   		movq	%rcx, %rsi
 2079 14d8 4889C7   		movq	%rax, %rdi
 2080 14db E8000000 		call	strncat@PLT
 2080      00
 704:argtable2.c   ****             c+=ncspn;
 2081              		.loc 1 704 0
 2082 14e0 488B45E8 		movq	-24(%rbp), %rax
 2083 14e4 480145E0 		addq	%rax, -32(%rbp)
 705:argtable2.c   **** 
 706:argtable2.c   ****             /* add given separator in place of comma */
 707:argtable2.c   ****             if (*c==',')
 2084              		.loc 1 707 0
 2085 14e8 488B45E0 		movq	-32(%rbp), %rax
 2086 14ec 0FB600   		movzbl	(%rax), %eax
 2087 14ef 3C2C     		cmpb	$44, %al
 2088 14f1 751C     		jne	.L124
 708:argtable2.c   ****                  {
 709:argtable2.c   ****                  arg_cat(&dest,separator,&ndest);
 2089              		.loc 1 709 0
 2090 14f3 488D55C0 		leaq	-64(%rbp), %rdx
 2091 14f7 488B4D98 		movq	-104(%rbp), %rcx
 2092 14fb 488D45C8 		leaq	-56(%rbp), %rax
 2093 14ff 4889CE   		movq	%rcx, %rsi
 2094 1502 4889C7   		movq	%rax, %rdi
 2095 1505 E88EFBFF 		call	arg_cat
 2095      FF
 710:argtable2.c   ****                  c++;
 2096              		.loc 1 710 0
 2097 150a 488345E0 		addq	$1, -32(%rbp)
 2097      01
 2098              	.L124:
 2099              	.LBE24:
 694:argtable2.c   ****             {
 2100              		.loc 1 694 0
 2101 150f 488B45E0 		movq	-32(%rbp), %rax
 2102 1513 0FB600   		movzbl	(%rax), %eax
 2103 1516 84C0     		testb	%al, %al
 2104 1518 0F8572FF 		jne	.L125
 2104      FFFF
 2105              	.L123:
 2106              	.LBE23:
 711:argtable2.c   ****                  }
 712:argtable2.c   ****             }
 713:argtable2.c   ****         }
 714:argtable2.c   **** 
 715:argtable2.c   ****     if (datatype)
 2107              		.loc 1 715 0
 2108 151e 48837DA8 		cmpq	$0, -88(%rbp)
 2108      00
 2109 1523 0F84A200 		je	.L131
 2109      0000
 716:argtable2.c   ****         {
 717:argtable2.c   ****         if (longopts)
 2110              		.loc 1 717 0
 2111 1529 48837DB0 		cmpq	$0, -80(%rbp)
 2111      00
 2112 152e 7419     		je	.L127
 718:argtable2.c   ****             arg_cat(&dest,"=",&ndest);
 2113              		.loc 1 718 0
 2114 1530 488D55C0 		leaq	-64(%rbp), %rdx
 2115 1534 488D45C8 		leaq	-56(%rbp), %rax
 2116 1538 488D3500 		leaq	.LC11(%rip), %rsi
 2116      000000
 2117 153f 4889C7   		movq	%rax, %rdi
 2118 1542 E851FBFF 		call	arg_cat
 2118      FF
 2119 1547 EB1E     		jmp	.L128
 2120              	.L127:
 719:argtable2.c   ****         else if (shortopts)
 2121              		.loc 1 719 0
 2122 1549 48837DB8 		cmpq	$0, -72(%rbp)
 2122      00
 2123 154e 7417     		je	.L128
 720:argtable2.c   ****             arg_cat(&dest," ",&ndest);
 2124              		.loc 1 720 0
 2125 1550 488D55C0 		leaq	-64(%rbp), %rdx
 2126 1554 488D45C8 		leaq	-56(%rbp), %rax
 2127 1558 488D3500 		leaq	.LC6(%rip), %rsi
 2127      000000
 2128 155f 4889C7   		movq	%rax, %rdi
 2129 1562 E831FBFF 		call	arg_cat
 2129      FF
 2130              	.L128:
 721:argtable2.c   **** 
 722:argtable2.c   ****         if (optvalue)
 2131              		.loc 1 722 0
 2132 1567 837DA400 		cmpl	$0, -92(%rbp)
 2133 156b 7447     		je	.L129
 723:argtable2.c   ****             {
 724:argtable2.c   ****             arg_cat(&dest,"[",&ndest);
 2134              		.loc 1 724 0
 2135 156d 488D55C0 		leaq	-64(%rbp), %rdx
 2136 1571 488D45C8 		leaq	-56(%rbp), %rax
 2137 1575 488D3500 		leaq	.LC7(%rip), %rsi
 2137      000000
 2138 157c 4889C7   		movq	%rax, %rdi
 2139 157f E814FBFF 		call	arg_cat
 2139      FF
 725:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 2140              		.loc 1 725 0
 2141 1584 488D55C0 		leaq	-64(%rbp), %rdx
 2142 1588 488B4DA8 		movq	-88(%rbp), %rcx
 2143 158c 488D45C8 		leaq	-56(%rbp), %rax
 2144 1590 4889CE   		movq	%rcx, %rsi
 2145 1593 4889C7   		movq	%rax, %rdi
 2146 1596 E8FDFAFF 		call	arg_cat
 2146      FF
 726:argtable2.c   ****             arg_cat(&dest,"]",&ndest);
 2147              		.loc 1 726 0
 2148 159b 488D55C0 		leaq	-64(%rbp), %rdx
 2149 159f 488D45C8 		leaq	-56(%rbp), %rax
 2150 15a3 488D3500 		leaq	.LC8(%rip), %rsi
 2150      000000
 2151 15aa 4889C7   		movq	%rax, %rdi
 2152 15ad E8E6FAFF 		call	arg_cat
 2152      FF
 727:argtable2.c   ****             }
 728:argtable2.c   ****         else
 729:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 730:argtable2.c   ****         }
 731:argtable2.c   ****     }
 2153              		.loc 1 731 0
 2154 15b2 EB17     		jmp	.L131
 2155              	.L129:
 729:argtable2.c   ****         }
 2156              		.loc 1 729 0
 2157 15b4 488D55C0 		leaq	-64(%rbp), %rdx
 2158 15b8 488B4DA8 		movq	-88(%rbp), %rcx
 2159 15bc 488D45C8 		leaq	-56(%rbp), %rax
 2160 15c0 4889CE   		movq	%rcx, %rsi
 2161 15c3 4889C7   		movq	%rax, %rdi
 2162 15c6 E8CDFAFF 		call	arg_cat
 2162      FF
 2163              	.L131:
 2164              		.loc 1 731 0
 2165 15cb 90       		nop
 2166 15cc 488B45F8 		movq	-8(%rbp), %rax
 2167 15d0 64483304 		xorq	%fs:40, %rax
 2167      25280000 
 2167      00
 2168 15d9 7405     		je	.L130
 2169 15db E8000000 		call	__stack_chk_fail@PLT
 2169      00
 2170              	.L130:
 2171 15e0 C9       		leave
 2172              		.cfi_def_cfa 7, 8
 2173 15e1 C3       		ret
 2174              		.cfi_endproc
 2175              	.LFE13:
 2177              		.section	.rodata
 2178              	.LC13:
 2179 0098 7C00     		.string	"|"
 2180              		.text
 2181              		.globl	arg_print_option
 2183              	arg_print_option:
 2184              	.LFB14:
 732:argtable2.c   **** 
 733:argtable2.c   **** 
 734:argtable2.c   **** /* this function should be deprecated because it doesnt consider optional argument values (ARG_HASO
 735:argtable2.c   **** void arg_print_option(FILE *fp, const char *shortopts, const char *longopts, const char *datatype, 
 736:argtable2.c   ****     {
 2185              		.loc 1 736 0
 2186              		.cfi_startproc
 2187 15e2 55       		pushq	%rbp
 2188              		.cfi_def_cfa_offset 16
 2189              		.cfi_offset 6, -16
 2190 15e3 4889E5   		movq	%rsp, %rbp
 2191              		.cfi_def_cfa_register 6
 2192 15e6 4881EC00 		subq	$256, %rsp
 2192      010000
 2193 15ed 4889BD28 		movq	%rdi, -216(%rbp)
 2193      FFFFFF
 2194 15f4 4889B520 		movq	%rsi, -224(%rbp)
 2194      FFFFFF
 2195 15fb 48899518 		movq	%rdx, -232(%rbp)
 2195      FFFFFF
 2196 1602 48898D10 		movq	%rcx, -240(%rbp)
 2196      FFFFFF
 2197 1609 4C898508 		movq	%r8, -248(%rbp)
 2197      FFFFFF
 2198              		.loc 1 736 0
 2199 1610 64488B04 		movq	%fs:40, %rax
 2199      25280000 
 2199      00
 2200 1619 488945F8 		movq	%rax, -8(%rbp)
 2201 161d 31C0     		xorl	%eax, %eax
 737:argtable2.c   ****     char syntax[200]="";
 2202              		.loc 1 737 0
 2203 161f 48C78530 		movq	$0, -208(%rbp)
 2203      FFFFFF00 
 2203      000000
 2204 162a 488D9538 		leaq	-200(%rbp), %rdx
 2204      FFFFFF
 2205 1631 B8000000 		movl	$0, %eax
 2205      00
 2206 1636 B9180000 		movl	$24, %ecx
 2206      00
 2207 163b 4889D7   		movq	%rdx, %rdi
 2208 163e F348AB   		rep stosq
 738:argtable2.c   ****     suffix = suffix ? suffix : "";
 2209              		.loc 1 738 0
 2210 1641 4883BD08 		cmpq	$0, -248(%rbp)
 2210      FFFFFF00 
 2211 1649 7409     		je	.L133
 2212              		.loc 1 738 0 is_stmt 0 discriminator 1
 2213 164b 488B8508 		movq	-248(%rbp), %rax
 2213      FFFFFF
 2214 1652 EB07     		jmp	.L134
 2215              	.L133:
 2216              		.loc 1 738 0 discriminator 2
 2217 1654 488D0500 		leaq	.LC12(%rip), %rax
 2217      000000
 2218              	.L134:
 2219              		.loc 1 738 0 discriminator 4
 2220 165b 48898508 		movq	%rax, -248(%rbp)
 2220      FFFFFF
 739:argtable2.c   **** 
 740:argtable2.c   ****     /* there is no way of passing the proper optvalue for optional argument values here, so we must
 741:argtable2.c   ****     arg_cat_optionv(syntax,sizeof(syntax),shortopts,longopts,datatype,0,"|");
 2221              		.loc 1 741 0 is_stmt 1 discriminator 4
 2222 1662 488BBD10 		movq	-240(%rbp), %rdi
 2222      FFFFFF
 2223 1669 488B8D18 		movq	-232(%rbp), %rcx
 2223      FFFFFF
 2224 1670 488B9520 		movq	-224(%rbp), %rdx
 2224      FFFFFF
 2225 1677 488D8530 		leaq	-208(%rbp), %rax
 2225      FFFFFF
 2226 167e 4883EC08 		subq	$8, %rsp
 2227 1682 488D3500 		leaq	.LC13(%rip), %rsi
 2227      000000
 2228 1689 56       		pushq	%rsi
 2229 168a 41B90000 		movl	$0, %r9d
 2229      0000
 2230 1690 4989F8   		movq	%rdi, %r8
 2231 1693 BEC80000 		movl	$200, %esi
 2231      00
 2232 1698 4889C7   		movq	%rax, %rdi
 2233 169b E8FBFCFF 		call	arg_cat_optionv
 2233      FF
 2234 16a0 4883C410 		addq	$16, %rsp
 742:argtable2.c   **** 
 743:argtable2.c   ****     fputs(syntax,fp);
 2235              		.loc 1 743 0 discriminator 4
 2236 16a4 488B9528 		movq	-216(%rbp), %rdx
 2236      FFFFFF
 2237 16ab 488D8530 		leaq	-208(%rbp), %rax
 2237      FFFFFF
 2238 16b2 4889D6   		movq	%rdx, %rsi
 2239 16b5 4889C7   		movq	%rax, %rdi
 2240 16b8 E8000000 		call	fputs@PLT
 2240      00
 744:argtable2.c   ****     fputs(suffix,fp);
 2241              		.loc 1 744 0 discriminator 4
 2242 16bd 488B9528 		movq	-216(%rbp), %rdx
 2242      FFFFFF
 2243 16c4 488B8508 		movq	-248(%rbp), %rax
 2243      FFFFFF
 2244 16cb 4889D6   		movq	%rdx, %rsi
 2245 16ce 4889C7   		movq	%rax, %rdi
 2246 16d1 E8000000 		call	fputs@PLT
 2246      00
 745:argtable2.c   ****     }
 2247              		.loc 1 745 0 discriminator 4
 2248 16d6 90       		nop
 2249 16d7 488B45F8 		movq	-8(%rbp), %rax
 2250 16db 64483304 		xorq	%fs:40, %rax
 2250      25280000 
 2250      00
 2251 16e4 7405     		je	.L135
 2252              		.loc 1 745 0 is_stmt 0
 2253 16e6 E8000000 		call	__stack_chk_fail@PLT
 2253      00
 2254              	.L135:
 2255 16eb C9       		leave
 2256              		.cfi_def_cfa 7, 8
 2257 16ec C3       		ret
 2258              		.cfi_endproc
 2259              	.LFE14:
 2261              		.section	.rodata
 2262              	.LC14:
 2263 009a 202D2563 		.string	" -%c"
 2263      00
 2264              	.LC15:
 2265 009f 205B2D25 		.string	" [-%c"
 2265      6300
 2266              	.LC16:
 2267 00a5 256300   		.string	"%c"
 2268              	.LC17:
 2269 00a8 5B256300 		.string	"[%c"
 2270              		.text
 2272              	arg_print_gnuswitch:
 2273              	.LFB15:
 746:argtable2.c   **** 
 747:argtable2.c   **** 
 748:argtable2.c   **** /*
 749:argtable2.c   ****  * Print a GNU style [OPTION] string in which all short options that
 750:argtable2.c   ****  * do not take argument values are presented in abbreviated form, as
 751:argtable2.c   ****  * in: -xvfsd, or -xvf[sd], or [-xvsfd]
 752:argtable2.c   ****  */
 753:argtable2.c   **** static
 754:argtable2.c   **** void arg_print_gnuswitch(FILE *fp, struct arg_hdr **table)
 755:argtable2.c   ****     {
 2274              		.loc 1 755 0 is_stmt 1
 2275              		.cfi_startproc
 2276 16ed 55       		pushq	%rbp
 2277              		.cfi_def_cfa_offset 16
 2278              		.cfi_offset 6, -16
 2279 16ee 4889E5   		movq	%rsp, %rbp
 2280              		.cfi_def_cfa_register 6
 2281 16f1 4883EC30 		subq	$48, %rsp
 2282 16f5 48897DD8 		movq	%rdi, -40(%rbp)
 2283 16f9 488975D0 		movq	%rsi, -48(%rbp)
 756:argtable2.c   ****     int tabindex;
 757:argtable2.c   ****     char *format1=" -%c";
 2284              		.loc 1 757 0
 2285 16fd 488D0500 		leaq	.LC14(%rip), %rax
 2285      000000
 2286 1704 488945E8 		movq	%rax, -24(%rbp)
 758:argtable2.c   ****     char *format2=" [-%c";
 2287              		.loc 1 758 0
 2288 1708 488D0500 		leaq	.LC15(%rip), %rax
 2288      000000
 2289 170f 488945F0 		movq	%rax, -16(%rbp)
 759:argtable2.c   ****     char *suffix="";
 2290              		.loc 1 759 0
 2291 1713 488D0500 		leaq	.LC12(%rip), %rax
 2291      000000
 2292 171a 488945F8 		movq	%rax, -8(%rbp)
 760:argtable2.c   **** 
 761:argtable2.c   ****     /* print all mandatory switches that are without argument values */
 762:argtable2.c   ****     for(tabindex=0; table[tabindex] && !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 2293              		.loc 1 762 0
 2294 171e C745E400 		movl	$0, -28(%rbp)
 2294      000000
 2295 1725 E9C20000 		jmp	.L137
 2295      00
 2296              	.L143:
 763:argtable2.c   ****         {
 764:argtable2.c   ****         /* skip optional options */
 765:argtable2.c   ****         if (table[tabindex]->mincount<1)
 2297              		.loc 1 765 0
 2298 172a 8B45E4   		movl	-28(%rbp), %eax
 2299 172d 4898     		cltq
 2300 172f 488D14C5 		leaq	0(,%rax,8), %rdx
 2300      00000000 
 2301 1737 488B45D0 		movq	-48(%rbp), %rax
 2302 173b 4801D0   		addq	%rdx, %rax
 2303 173e 488B00   		movq	(%rax), %rax
 2304 1741 8B4028   		movl	40(%rax), %eax
 2305 1744 85C0     		testl	%eax, %eax
 2306 1746 0F8E9500 		jle	.L151
 2306      0000
 766:argtable2.c   ****             continue;
 767:argtable2.c   **** 
 768:argtable2.c   ****         /* skip non-short options */
 769:argtable2.c   ****         if (table[tabindex]->shortopts==NULL)
 2307              		.loc 1 769 0
 2308 174c 8B45E4   		movl	-28(%rbp), %eax
 2309 174f 4898     		cltq
 2310 1751 488D14C5 		leaq	0(,%rax,8), %rdx
 2310      00000000 
 2311 1759 488B45D0 		movq	-48(%rbp), %rax
 2312 175d 4801D0   		addq	%rdx, %rax
 2313 1760 488B00   		movq	(%rax), %rax
 2314 1763 488B4008 		movq	8(%rax), %rax
 2315 1767 4885C0   		testq	%rax, %rax
 2316 176a 7478     		je	.L152
 770:argtable2.c   ****             continue;
 771:argtable2.c   **** 
 772:argtable2.c   ****         /* skip options that take argument values */
 773:argtable2.c   ****         if (table[tabindex]->flag&ARG_HASVALUE)
 2317              		.loc 1 773 0
 2318 176c 8B45E4   		movl	-28(%rbp), %eax
 2319 176f 4898     		cltq
 2320 1771 488D14C5 		leaq	0(,%rax,8), %rdx
 2320      00000000 
 2321 1779 488B45D0 		movq	-48(%rbp), %rax
 2322 177d 4801D0   		addq	%rdx, %rax
 2323 1780 488B00   		movq	(%rax), %rax
 2324 1783 0FB600   		movzbl	(%rax), %eax
 2325 1786 0FBEC0   		movsbl	%al, %eax
 2326 1789 83E002   		andl	$2, %eax
 2327 178c 85C0     		testl	%eax, %eax
 2328 178e 7557     		jne	.L153
 774:argtable2.c   ****             continue;
 775:argtable2.c   **** 
 776:argtable2.c   ****         /* print the short option (only the first short option char, ignore multiple choices)*/
 777:argtable2.c   ****         fprintf(fp,format1,table[tabindex]->shortopts[0]);
 2329              		.loc 1 777 0
 2330 1790 8B45E4   		movl	-28(%rbp), %eax
 2331 1793 4898     		cltq
 2332 1795 488D14C5 		leaq	0(,%rax,8), %rdx
 2332      00000000 
 2333 179d 488B45D0 		movq	-48(%rbp), %rax
 2334 17a1 4801D0   		addq	%rdx, %rax
 2335 17a4 488B00   		movq	(%rax), %rax
 2336 17a7 488B4008 		movq	8(%rax), %rax
 2337 17ab 0FB600   		movzbl	(%rax), %eax
 2338 17ae 0FBED0   		movsbl	%al, %edx
 2339 17b1 488B4DE8 		movq	-24(%rbp), %rcx
 2340 17b5 488B45D8 		movq	-40(%rbp), %rax
 2341 17b9 4889CE   		movq	%rcx, %rsi
 2342 17bc 4889C7   		movq	%rax, %rdi
 2343 17bf B8000000 		movl	$0, %eax
 2343      00
 2344 17c4 E8000000 		call	fprintf@PLT
 2344      00
 778:argtable2.c   ****         format1="%c";
 2345              		.loc 1 778 0
 2346 17c9 488D0500 		leaq	.LC16(%rip), %rax
 2346      000000
 2347 17d0 488945E8 		movq	%rax, -24(%rbp)
 779:argtable2.c   ****         format2="[%c";
 2348              		.loc 1 779 0
 2349 17d4 488D0500 		leaq	.LC17(%rip), %rax
 2349      000000
 2350 17db 488945F0 		movq	%rax, -16(%rbp)
 2351 17df EB07     		jmp	.L139
 2352              	.L151:
 766:argtable2.c   **** 
 2353              		.loc 1 766 0
 2354 17e1 90       		nop
 2355 17e2 EB04     		jmp	.L139
 2356              	.L152:
 770:argtable2.c   **** 
 2357              		.loc 1 770 0
 2358 17e4 90       		nop
 2359 17e5 EB01     		jmp	.L139
 2360              	.L153:
 774:argtable2.c   **** 
 2361              		.loc 1 774 0
 2362 17e7 90       		nop
 2363              	.L139:
 762:argtable2.c   ****         {
 2364              		.loc 1 762 0 discriminator 2
 2365 17e8 8345E401 		addl	$1, -28(%rbp)
 2366              	.L137:
 762:argtable2.c   ****         {
 2367              		.loc 1 762 0 is_stmt 0 discriminator 1
 2368 17ec 8B45E4   		movl	-28(%rbp), %eax
 2369 17ef 4898     		cltq
 2370 17f1 488D14C5 		leaq	0(,%rax,8), %rdx
 2370      00000000 
 2371 17f9 488B45D0 		movq	-48(%rbp), %rax
 2372 17fd 4801D0   		addq	%rdx, %rax
 2373 1800 488B00   		movq	(%rax), %rax
 2374 1803 4885C0   		testq	%rax, %rax
 2375 1806 7428     		je	.L142
 762:argtable2.c   ****         {
 2376              		.loc 1 762 0 discriminator 3
 2377 1808 8B45E4   		movl	-28(%rbp), %eax
 2378 180b 4898     		cltq
 2379 180d 488D14C5 		leaq	0(,%rax,8), %rdx
 2379      00000000 
 2380 1815 488B45D0 		movq	-48(%rbp), %rax
 2381 1819 4801D0   		addq	%rdx, %rax
 2382 181c 488B00   		movq	(%rax), %rax
 2383 181f 0FB600   		movzbl	(%rax), %eax
 2384 1822 0FBEC0   		movsbl	%al, %eax
 2385 1825 83E001   		andl	$1, %eax
 2386 1828 85C0     		testl	%eax, %eax
 2387 182a 0F84FAFE 		je	.L143
 2387      FFFF
 2388              	.L142:
 780:argtable2.c   ****         }
 781:argtable2.c   **** 
 782:argtable2.c   ****     /* print all optional switches that are without argument values */
 783:argtable2.c   ****     for(tabindex=0; table[tabindex] && !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 2389              		.loc 1 783 0 is_stmt 1
 2390 1830 C745E400 		movl	$0, -28(%rbp)
 2390      000000
 2391 1837 E9C20000 		jmp	.L144
 2391      00
 2392              	.L150:
 784:argtable2.c   ****         {
 785:argtable2.c   ****         /* skip mandatory args */
 786:argtable2.c   ****         if (table[tabindex]->mincount>0)
 2393              		.loc 1 786 0
 2394 183c 8B45E4   		movl	-28(%rbp), %eax
 2395 183f 4898     		cltq
 2396 1841 488D14C5 		leaq	0(,%rax,8), %rdx
 2396      00000000 
 2397 1849 488B45D0 		movq	-48(%rbp), %rax
 2398 184d 4801D0   		addq	%rdx, %rax
 2399 1850 488B00   		movq	(%rax), %rax
 2400 1853 8B4028   		movl	40(%rax), %eax
 2401 1856 85C0     		testl	%eax, %eax
 2402 1858 0F8F9500 		jg	.L154
 2402      0000
 787:argtable2.c   ****             continue;
 788:argtable2.c   **** 
 789:argtable2.c   ****         /* skip args without short options */
 790:argtable2.c   ****         if (table[tabindex]->shortopts==NULL)
 2403              		.loc 1 790 0
 2404 185e 8B45E4   		movl	-28(%rbp), %eax
 2405 1861 4898     		cltq
 2406 1863 488D14C5 		leaq	0(,%rax,8), %rdx
 2406      00000000 
 2407 186b 488B45D0 		movq	-48(%rbp), %rax
 2408 186f 4801D0   		addq	%rdx, %rax
 2409 1872 488B00   		movq	(%rax), %rax
 2410 1875 488B4008 		movq	8(%rax), %rax
 2411 1879 4885C0   		testq	%rax, %rax
 2412 187c 7478     		je	.L155
 791:argtable2.c   ****             continue;
 792:argtable2.c   **** 
 793:argtable2.c   ****         /* skip args with values */
 794:argtable2.c   ****         if (table[tabindex]->flag&ARG_HASVALUE)
 2413              		.loc 1 794 0
 2414 187e 8B45E4   		movl	-28(%rbp), %eax
 2415 1881 4898     		cltq
 2416 1883 488D14C5 		leaq	0(,%rax,8), %rdx
 2416      00000000 
 2417 188b 488B45D0 		movq	-48(%rbp), %rax
 2418 188f 4801D0   		addq	%rdx, %rax
 2419 1892 488B00   		movq	(%rax), %rax
 2420 1895 0FB600   		movzbl	(%rax), %eax
 2421 1898 0FBEC0   		movsbl	%al, %eax
 2422 189b 83E002   		andl	$2, %eax
 2423 189e 85C0     		testl	%eax, %eax
 2424 18a0 7557     		jne	.L156
 795:argtable2.c   ****             continue;
 796:argtable2.c   **** 
 797:argtable2.c   ****         /* print first short option */
 798:argtable2.c   ****         fprintf(fp,format2,table[tabindex]->shortopts[0]);
 2425              		.loc 1 798 0
 2426 18a2 8B45E4   		movl	-28(%rbp), %eax
 2427 18a5 4898     		cltq
 2428 18a7 488D14C5 		leaq	0(,%rax,8), %rdx
 2428      00000000 
 2429 18af 488B45D0 		movq	-48(%rbp), %rax
 2430 18b3 4801D0   		addq	%rdx, %rax
 2431 18b6 488B00   		movq	(%rax), %rax
 2432 18b9 488B4008 		movq	8(%rax), %rax
 2433 18bd 0FB600   		movzbl	(%rax), %eax
 2434 18c0 0FBED0   		movsbl	%al, %edx
 2435 18c3 488B4DF0 		movq	-16(%rbp), %rcx
 2436 18c7 488B45D8 		movq	-40(%rbp), %rax
 2437 18cb 4889CE   		movq	%rcx, %rsi
 2438 18ce 4889C7   		movq	%rax, %rdi
 2439 18d1 B8000000 		movl	$0, %eax
 2439      00
 2440 18d6 E8000000 		call	fprintf@PLT
 2440      00
 799:argtable2.c   ****         format2="%c";
 2441              		.loc 1 799 0
 2442 18db 488D0500 		leaq	.LC16(%rip), %rax
 2442      000000
 2443 18e2 488945F0 		movq	%rax, -16(%rbp)
 800:argtable2.c   ****         suffix="]";
 2444              		.loc 1 800 0
 2445 18e6 488D0500 		leaq	.LC8(%rip), %rax
 2445      000000
 2446 18ed 488945F8 		movq	%rax, -8(%rbp)
 2447 18f1 EB07     		jmp	.L146
 2448              	.L154:
 787:argtable2.c   **** 
 2449              		.loc 1 787 0
 2450 18f3 90       		nop
 2451 18f4 EB04     		jmp	.L146
 2452              	.L155:
 791:argtable2.c   **** 
 2453              		.loc 1 791 0
 2454 18f6 90       		nop
 2455 18f7 EB01     		jmp	.L146
 2456              	.L156:
 795:argtable2.c   **** 
 2457              		.loc 1 795 0
 2458 18f9 90       		nop
 2459              	.L146:
 783:argtable2.c   ****         {
 2460              		.loc 1 783 0 discriminator 2
 2461 18fa 8345E401 		addl	$1, -28(%rbp)
 2462              	.L144:
 783:argtable2.c   ****         {
 2463              		.loc 1 783 0 is_stmt 0 discriminator 1
 2464 18fe 8B45E4   		movl	-28(%rbp), %eax
 2465 1901 4898     		cltq
 2466 1903 488D14C5 		leaq	0(,%rax,8), %rdx
 2466      00000000 
 2467 190b 488B45D0 		movq	-48(%rbp), %rax
 2468 190f 4801D0   		addq	%rdx, %rax
 2469 1912 488B00   		movq	(%rax), %rax
 2470 1915 4885C0   		testq	%rax, %rax
 2471 1918 7428     		je	.L149
 783:argtable2.c   ****         {
 2472              		.loc 1 783 0 discriminator 3
 2473 191a 8B45E4   		movl	-28(%rbp), %eax
 2474 191d 4898     		cltq
 2475 191f 488D14C5 		leaq	0(,%rax,8), %rdx
 2475      00000000 
 2476 1927 488B45D0 		movq	-48(%rbp), %rax
 2477 192b 4801D0   		addq	%rdx, %rax
 2478 192e 488B00   		movq	(%rax), %rax
 2479 1931 0FB600   		movzbl	(%rax), %eax
 2480 1934 0FBEC0   		movsbl	%al, %eax
 2481 1937 83E001   		andl	$1, %eax
 2482 193a 85C0     		testl	%eax, %eax
 2483 193c 0F84FAFE 		je	.L150
 2483      FFFF
 2484              	.L149:
 801:argtable2.c   ****         }
 802:argtable2.c   **** 
 803:argtable2.c   ****     fprintf(fp,"%s",suffix);
 2485              		.loc 1 803 0 is_stmt 1
 2486 1942 488B55D8 		movq	-40(%rbp), %rdx
 2487 1946 488B45F8 		movq	-8(%rbp), %rax
 2488 194a 4889D6   		movq	%rdx, %rsi
 2489 194d 4889C7   		movq	%rax, %rdi
 2490 1950 E8000000 		call	fputs@PLT
 2490      00
 804:argtable2.c   ****     }
 2491              		.loc 1 804 0
 2492 1955 90       		nop
 2493 1956 C9       		leave
 2494              		.cfi_def_cfa 7, 8
 2495 1957 C3       		ret
 2496              		.cfi_endproc
 2497              	.LFE15:
 2499              		.section	.rodata
 2500              	.LC18:
 2501 00ac 20257300 		.string	" %s"
 2502              	.LC19:
 2503 00b0 205B2573 		.string	" [%s]"
 2503      5D00
 2504              	.LC20:
 2505 00b6 205B2573 		.string	" [%s] [%s]"
 2505      5D205B25 
 2505      735D00
 2506              	.LC21:
 2507 00c1 205B2573 		.string	" [%s]..."
 2507      5D2E2E2E 
 2507      00
 2508              		.text
 2509              		.globl	arg_print_syntax
 2511              	arg_print_syntax:
 2512              	.LFB16:
 805:argtable2.c   **** 
 806:argtable2.c   **** 
 807:argtable2.c   **** void arg_print_syntax(FILE *fp, void **argtable, const char *suffix)
 808:argtable2.c   ****     {
 2513              		.loc 1 808 0
 2514              		.cfi_startproc
 2515 1958 55       		pushq	%rbp
 2516              		.cfi_def_cfa_offset 16
 2517              		.cfi_offset 6, -16
 2518 1959 4889E5   		movq	%rsp, %rbp
 2519              		.cfi_def_cfa_register 6
 2520 195c 4881EC20 		subq	$288, %rsp
 2520      010000
 2521 1963 4889BDF8 		movq	%rdi, -264(%rbp)
 2521      FEFFFF
 2522 196a 4889B5F0 		movq	%rsi, -272(%rbp)
 2522      FEFFFF
 2523 1971 488995E8 		movq	%rdx, -280(%rbp)
 2523      FEFFFF
 2524              		.loc 1 808 0
 2525 1978 64488B04 		movq	%fs:40, %rax
 2525      25280000 
 2525      00
 2526 1981 488945F8 		movq	%rax, -8(%rbp)
 2527 1985 31C0     		xorl	%eax, %eax
 809:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr**)argtable;
 2528              		.loc 1 809 0
 2529 1987 488B85F0 		movq	-272(%rbp), %rax
 2529      FEFFFF
 2530 198e 48898510 		movq	%rax, -240(%rbp)
 2530      FFFFFF
 810:argtable2.c   ****     int i,tabindex;
 811:argtable2.c   **** 
 812:argtable2.c   ****     /* print GNU style [OPTION] string */
 813:argtable2.c   ****     arg_print_gnuswitch(fp, table);
 2531              		.loc 1 813 0
 2532 1995 488B9510 		movq	-240(%rbp), %rdx
 2532      FFFFFF
 2533 199c 488B85F8 		movq	-264(%rbp), %rax
 2533      FEFFFF
 2534 19a3 4889D6   		movq	%rdx, %rsi
 2535 19a6 4889C7   		movq	%rax, %rdi
 2536 19a9 E83FFDFF 		call	arg_print_gnuswitch
 2536      FF
 814:argtable2.c   **** 
 815:argtable2.c   ****     /* print remaining options in abbreviated style */
 816:argtable2.c   ****     for(tabindex=0; table[tabindex] && !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 2537              		.loc 1 816 0
 2538 19ae C7850CFF 		movl	$0, -244(%rbp)
 2538      FFFF0000 
 2538      0000
 2539 19b8 E9870200 		jmp	.L158
 2539      00
 2540              	.L169:
 2541              	.LBB25:
 817:argtable2.c   ****         {
 818:argtable2.c   ****         char syntax[200]="";
 2542              		.loc 1 818 0
 2543 19bd 48C78530 		movq	$0, -208(%rbp)
 2543      FFFFFF00 
 2543      000000
 2544 19c8 488D9538 		leaq	-200(%rbp), %rdx
 2544      FFFFFF
 2545 19cf B8000000 		movl	$0, %eax
 2545      00
 2546 19d4 B9180000 		movl	$24, %ecx
 2546      00
 2547 19d9 4889D7   		movq	%rdx, %rdi
 2548 19dc F348AB   		rep stosq
 819:argtable2.c   ****         const char *shortopts, *longopts, *datatype;
 820:argtable2.c   **** 
 821:argtable2.c   ****         /* skip short options without arg values (they were printed by arg_print_gnu_switch) */
 822:argtable2.c   ****         if (table[tabindex]->shortopts && !(table[tabindex]->flag&ARG_HASVALUE))
 2549              		.loc 1 822 0
 2550 19df 8B850CFF 		movl	-244(%rbp), %eax
 2550      FFFF
 2551 19e5 4898     		cltq
 2552 19e7 488D14C5 		leaq	0(,%rax,8), %rdx
 2552      00000000 
 2553 19ef 488B8510 		movq	-240(%rbp), %rax
 2553      FFFFFF
 2554 19f6 4801D0   		addq	%rdx, %rax
 2555 19f9 488B00   		movq	(%rax), %rax
 2556 19fc 488B4008 		movq	8(%rax), %rax
 2557 1a00 4885C0   		testq	%rax, %rax
 2558 1a03 742E     		je	.L159
 2559              		.loc 1 822 0 is_stmt 0 discriminator 1
 2560 1a05 8B850CFF 		movl	-244(%rbp), %eax
 2560      FFFF
 2561 1a0b 4898     		cltq
 2562 1a0d 488D14C5 		leaq	0(,%rax,8), %rdx
 2562      00000000 
 2563 1a15 488B8510 		movq	-240(%rbp), %rax
 2563      FFFFFF
 2564 1a1c 4801D0   		addq	%rdx, %rax
 2565 1a1f 488B00   		movq	(%rax), %rax
 2566 1a22 0FB600   		movzbl	(%rax), %eax
 2567 1a25 0FBEC0   		movsbl	%al, %eax
 2568 1a28 83E002   		andl	$2, %eax
 2569 1a2b 85C0     		testl	%eax, %eax
 2570 1a2d 0F840602 		je	.L173
 2570      0000
 2571              	.L159:
 823:argtable2.c   ****             continue;
 824:argtable2.c   **** 
 825:argtable2.c   ****         shortopts = table[tabindex]->shortopts;
 2572              		.loc 1 825 0 is_stmt 1
 2573 1a33 8B850CFF 		movl	-244(%rbp), %eax
 2573      FFFF
 2574 1a39 4898     		cltq
 2575 1a3b 488D14C5 		leaq	0(,%rax,8), %rdx
 2575      00000000 
 2576 1a43 488B8510 		movq	-240(%rbp), %rax
 2576      FFFFFF
 2577 1a4a 4801D0   		addq	%rdx, %rax
 2578 1a4d 488B00   		movq	(%rax), %rax
 2579 1a50 488B4008 		movq	8(%rax), %rax
 2580 1a54 48898518 		movq	%rax, -232(%rbp)
 2580      FFFFFF
 826:argtable2.c   ****         longopts  = table[tabindex]->longopts;
 2581              		.loc 1 826 0
 2582 1a5b 8B850CFF 		movl	-244(%rbp), %eax
 2582      FFFF
 2583 1a61 4898     		cltq
 2584 1a63 488D14C5 		leaq	0(,%rax,8), %rdx
 2584      00000000 
 2585 1a6b 488B8510 		movq	-240(%rbp), %rax
 2585      FFFFFF
 2586 1a72 4801D0   		addq	%rdx, %rax
 2587 1a75 488B00   		movq	(%rax), %rax
 2588 1a78 488B4010 		movq	16(%rax), %rax
 2589 1a7c 48898520 		movq	%rax, -224(%rbp)
 2589      FFFFFF
 827:argtable2.c   ****         datatype  = table[tabindex]->datatype;
 2590              		.loc 1 827 0
 2591 1a83 8B850CFF 		movl	-244(%rbp), %eax
 2591      FFFF
 2592 1a89 4898     		cltq
 2593 1a8b 488D14C5 		leaq	0(,%rax,8), %rdx
 2593      00000000 
 2594 1a93 488B8510 		movq	-240(%rbp), %rax
 2594      FFFFFF
 2595 1a9a 4801D0   		addq	%rdx, %rax
 2596 1a9d 488B00   		movq	(%rax), %rax
 2597 1aa0 488B4018 		movq	24(%rax), %rax
 2598 1aa4 48898528 		movq	%rax, -216(%rbp)
 2598      FFFFFF
 828:argtable2.c   ****         arg_cat_option(syntax,sizeof(syntax),shortopts,longopts,datatype, table[tabindex]->flag&ARG
 2599              		.loc 1 828 0
 2600 1aab 8B850CFF 		movl	-244(%rbp), %eax
 2600      FFFF
 2601 1ab1 4898     		cltq
 2602 1ab3 488D14C5 		leaq	0(,%rax,8), %rdx
 2602      00000000 
 2603 1abb 488B8510 		movq	-240(%rbp), %rax
 2603      FFFFFF
 2604 1ac2 4801D0   		addq	%rdx, %rax
 2605 1ac5 488B00   		movq	(%rax), %rax
 2606 1ac8 0FB600   		movzbl	(%rax), %eax
 2607 1acb 0FBEC0   		movsbl	%al, %eax
 2608 1ace 83E004   		andl	$4, %eax
 2609 1ad1 89C7     		movl	%eax, %edi
 2610 1ad3 488BB528 		movq	-216(%rbp), %rsi
 2610      FFFFFF
 2611 1ada 488B8D20 		movq	-224(%rbp), %rcx
 2611      FFFFFF
 2612 1ae1 488B9518 		movq	-232(%rbp), %rdx
 2612      FFFFFF
 2613 1ae8 488D8530 		leaq	-208(%rbp), %rax
 2613      FFFFFF
 2614 1aef 4189F9   		movl	%edi, %r9d
 2615 1af2 4989F0   		movq	%rsi, %r8
 2616 1af5 BEC80000 		movl	$200, %esi
 2616      00
 2617 1afa 4889C7   		movq	%rax, %rdi
 2618 1afd E840F6FF 		call	arg_cat_option
 2618      FF
 829:argtable2.c   **** 
 830:argtable2.c   ****         if (strlen(syntax)>0)
 2619              		.loc 1 830 0
 2620 1b02 488D8530 		leaq	-208(%rbp), %rax
 2620      FFFFFF
 2621 1b09 0FB600   		movzbl	(%rax), %eax
 2622 1b0c 84C0     		testb	%al, %al
 2623 1b0e 0F842901 		je	.L160
 2623      0000
 831:argtable2.c   ****             {
 832:argtable2.c   ****             /* print mandatory instances of this option */
 833:argtable2.c   ****             for (i=0; i<table[tabindex]->mincount; i++)
 2624              		.loc 1 833 0
 2625 1b14 C78508FF 		movl	$0, -248(%rbp)
 2625      FFFF0000 
 2625      0000
 2626 1b1e EB29     		jmp	.L162
 2627              	.L163:
 834:argtable2.c   ****                 fprintf(fp, " %s",syntax);
 2628              		.loc 1 834 0 discriminator 3
 2629 1b20 488D9530 		leaq	-208(%rbp), %rdx
 2629      FFFFFF
 2630 1b27 488B85F8 		movq	-264(%rbp), %rax
 2630      FEFFFF
 2631 1b2e 488D3500 		leaq	.LC18(%rip), %rsi
 2631      000000
 2632 1b35 4889C7   		movq	%rax, %rdi
 2633 1b38 B8000000 		movl	$0, %eax
 2633      00
 2634 1b3d E8000000 		call	fprintf@PLT
 2634      00
 833:argtable2.c   ****                 fprintf(fp, " %s",syntax);
 2635              		.loc 1 833 0 discriminator 3
 2636 1b42 838508FF 		addl	$1, -248(%rbp)
 2636      FFFF01
 2637              	.L162:
 833:argtable2.c   ****                 fprintf(fp, " %s",syntax);
 2638              		.loc 1 833 0 is_stmt 0 discriminator 1
 2639 1b49 8B850CFF 		movl	-244(%rbp), %eax
 2639      FFFF
 2640 1b4f 4898     		cltq
 2641 1b51 488D14C5 		leaq	0(,%rax,8), %rdx
 2641      00000000 
 2642 1b59 488B8510 		movq	-240(%rbp), %rax
 2642      FFFFFF
 2643 1b60 4801D0   		addq	%rdx, %rax
 2644 1b63 488B00   		movq	(%rax), %rax
 2645 1b66 8B4028   		movl	40(%rax), %eax
 2646 1b69 3B8508FF 		cmpl	-248(%rbp), %eax
 2646      FFFF
 2647 1b6f 7FAF     		jg	.L163
 835:argtable2.c   **** 
 836:argtable2.c   ****             /* print optional instances enclosed in "[..]" */
 837:argtable2.c   ****             switch ( table[tabindex]->maxcount - table[tabindex]->mincount )
 2648              		.loc 1 837 0 is_stmt 1
 2649 1b71 8B850CFF 		movl	-244(%rbp), %eax
 2649      FFFF
 2650 1b77 4898     		cltq
 2651 1b79 488D14C5 		leaq	0(,%rax,8), %rdx
 2651      00000000 
 2652 1b81 488B8510 		movq	-240(%rbp), %rax
 2652      FFFFFF
 2653 1b88 4801D0   		addq	%rdx, %rax
 2654 1b8b 488B00   		movq	(%rax), %rax
 2655 1b8e 8B502C   		movl	44(%rax), %edx
 2656 1b91 8B850CFF 		movl	-244(%rbp), %eax
 2656      FFFF
 2657 1b97 4898     		cltq
 2658 1b99 488D0CC5 		leaq	0(,%rax,8), %rcx
 2658      00000000 
 2659 1ba1 488B8510 		movq	-240(%rbp), %rax
 2659      FFFFFF
 2660 1ba8 4801C8   		addq	%rcx, %rax
 2661 1bab 488B00   		movq	(%rax), %rax
 2662 1bae 8B4028   		movl	40(%rax), %eax
 2663 1bb1 29C2     		subl	%eax, %edx
 2664 1bb3 89D0     		movl	%edx, %eax
 2665 1bb5 83F801   		cmpl	$1, %eax
 2666 1bb8 740B     		je	.L165
 2667 1bba 83F802   		cmpl	$2, %eax
 2668 1bbd 742A     		je	.L166
 2669 1bbf 85C0     		testl	%eax, %eax
 2670 1bc1 7479     		je	.L174
 2671 1bc3 EB4F     		jmp	.L172
 2672              	.L165:
 838:argtable2.c   ****                 {
 839:argtable2.c   ****                 case 0:
 840:argtable2.c   ****                     break;
 841:argtable2.c   ****                 case 1:
 842:argtable2.c   ****                     fprintf(fp, " [%s]",syntax);
 2673              		.loc 1 842 0
 2674 1bc5 488D9530 		leaq	-208(%rbp), %rdx
 2674      FFFFFF
 2675 1bcc 488B85F8 		movq	-264(%rbp), %rax
 2675      FEFFFF
 2676 1bd3 488D3500 		leaq	.LC19(%rip), %rsi
 2676      000000
 2677 1bda 4889C7   		movq	%rax, %rdi
 2678 1bdd B8000000 		movl	$0, %eax
 2678      00
 2679 1be2 E8000000 		call	fprintf@PLT
 2679      00
 843:argtable2.c   ****                     break;
 2680              		.loc 1 843 0
 2681 1be7 EB54     		jmp	.L160
 2682              	.L166:
 844:argtable2.c   ****                 case 2:
 845:argtable2.c   ****                     fprintf(fp, " [%s] [%s]",syntax,syntax);
 2683              		.loc 1 845 0
 2684 1be9 488D8D30 		leaq	-208(%rbp), %rcx
 2684      FFFFFF
 2685 1bf0 488D9530 		leaq	-208(%rbp), %rdx
 2685      FFFFFF
 2686 1bf7 488B85F8 		movq	-264(%rbp), %rax
 2686      FEFFFF
 2687 1bfe 488D3500 		leaq	.LC20(%rip), %rsi
 2687      000000
 2688 1c05 4889C7   		movq	%rax, %rdi
 2689 1c08 B8000000 		movl	$0, %eax
 2689      00
 2690 1c0d E8000000 		call	fprintf@PLT
 2690      00
 846:argtable2.c   ****                     break;
 2691              		.loc 1 846 0
 2692 1c12 EB29     		jmp	.L160
 2693              	.L172:
 847:argtable2.c   ****                 default:
 848:argtable2.c   ****                     fprintf(fp, " [%s]...",syntax);
 2694              		.loc 1 848 0
 2695 1c14 488D9530 		leaq	-208(%rbp), %rdx
 2695      FFFFFF
 2696 1c1b 488B85F8 		movq	-264(%rbp), %rax
 2696      FEFFFF
 2697 1c22 488D3500 		leaq	.LC21(%rip), %rsi
 2697      000000
 2698 1c29 4889C7   		movq	%rax, %rdi
 2699 1c2c B8000000 		movl	$0, %eax
 2699      00
 2700 1c31 E8000000 		call	fprintf@PLT
 2700      00
 849:argtable2.c   ****                     break;
 2701              		.loc 1 849 0
 2702 1c36 90       		nop
 2703 1c37 EB04     		jmp	.L160
 2704              	.L173:
 823:argtable2.c   **** 
 2705              		.loc 1 823 0
 2706 1c39 90       		nop
 2707 1c3a EB01     		jmp	.L160
 2708              	.L174:
 840:argtable2.c   ****                 case 1:
 2709              		.loc 1 840 0
 2710 1c3c 90       		nop
 2711              	.L160:
 2712              	.LBE25:
 816:argtable2.c   ****         {
 2713              		.loc 1 816 0 discriminator 2
 2714 1c3d 83850CFF 		addl	$1, -244(%rbp)
 2714      FFFF01
 2715              	.L158:
 816:argtable2.c   ****         {
 2716              		.loc 1 816 0 is_stmt 0 discriminator 1
 2717 1c44 8B850CFF 		movl	-244(%rbp), %eax
 2717      FFFF
 2718 1c4a 4898     		cltq
 2719 1c4c 488D14C5 		leaq	0(,%rax,8), %rdx
 2719      00000000 
 2720 1c54 488B8510 		movq	-240(%rbp), %rax
 2720      FFFFFF
 2721 1c5b 4801D0   		addq	%rdx, %rax
 2722 1c5e 488B00   		movq	(%rax), %rax
 2723 1c61 4885C0   		testq	%rax, %rax
 2724 1c64 742E     		je	.L168
 816:argtable2.c   ****         {
 2725              		.loc 1 816 0 discriminator 3
 2726 1c66 8B850CFF 		movl	-244(%rbp), %eax
 2726      FFFF
 2727 1c6c 4898     		cltq
 2728 1c6e 488D14C5 		leaq	0(,%rax,8), %rdx
 2728      00000000 
 2729 1c76 488B8510 		movq	-240(%rbp), %rax
 2729      FFFFFF
 2730 1c7d 4801D0   		addq	%rdx, %rax
 2731 1c80 488B00   		movq	(%rax), %rax
 2732 1c83 0FB600   		movzbl	(%rax), %eax
 2733 1c86 0FBEC0   		movsbl	%al, %eax
 2734 1c89 83E001   		andl	$1, %eax
 2735 1c8c 85C0     		testl	%eax, %eax
 2736 1c8e 0F8429FD 		je	.L169
 2736      FFFF
 2737              	.L168:
 850:argtable2.c   ****                 }
 851:argtable2.c   ****             }
 852:argtable2.c   ****         }
 853:argtable2.c   **** 
 854:argtable2.c   ****     if (suffix)
 2738              		.loc 1 854 0 is_stmt 1
 2739 1c94 4883BDE8 		cmpq	$0, -280(%rbp)
 2739      FEFFFF00 
 2740 1c9c 7419     		je	.L175
 855:argtable2.c   ****         fprintf(fp, "%s",suffix);
 2741              		.loc 1 855 0
 2742 1c9e 488B95F8 		movq	-264(%rbp), %rdx
 2742      FEFFFF
 2743 1ca5 488B85E8 		movq	-280(%rbp), %rax
 2743      FEFFFF
 2744 1cac 4889D6   		movq	%rdx, %rsi
 2745 1caf 4889C7   		movq	%rax, %rdi
 2746 1cb2 E8000000 		call	fputs@PLT
 2746      00
 2747              	.L175:
 856:argtable2.c   ****     }
 2748              		.loc 1 856 0
 2749 1cb7 90       		nop
 2750 1cb8 488B45F8 		movq	-8(%rbp), %rax
 2751 1cbc 64483304 		xorq	%fs:40, %rax
 2751      25280000 
 2751      00
 2752 1cc5 7405     		je	.L171
 2753 1cc7 E8000000 		call	__stack_chk_fail@PLT
 2753      00
 2754              	.L171:
 2755 1ccc C9       		leave
 2756              		.cfi_def_cfa 7, 8
 2757 1ccd C3       		ret
 2758              		.cfi_endproc
 2759              	.LFE16:
 2761              		.globl	arg_print_syntaxv
 2763              	arg_print_syntaxv:
 2764              	.LFB17:
 857:argtable2.c   **** 
 858:argtable2.c   **** 
 859:argtable2.c   **** void arg_print_syntaxv(FILE *fp, void **argtable, const char *suffix)
 860:argtable2.c   ****     {
 2765              		.loc 1 860 0
 2766              		.cfi_startproc
 2767 1cce 55       		pushq	%rbp
 2768              		.cfi_def_cfa_offset 16
 2769              		.cfi_offset 6, -16
 2770 1ccf 4889E5   		movq	%rsp, %rbp
 2771              		.cfi_def_cfa_register 6
 2772 1cd2 4881EC20 		subq	$288, %rsp
 2772      010000
 2773 1cd9 4889BDF8 		movq	%rdi, -264(%rbp)
 2773      FEFFFF
 2774 1ce0 4889B5F0 		movq	%rsi, -272(%rbp)
 2774      FEFFFF
 2775 1ce7 488995E8 		movq	%rdx, -280(%rbp)
 2775      FEFFFF
 2776              		.loc 1 860 0
 2777 1cee 64488B04 		movq	%fs:40, %rax
 2777      25280000 
 2777      00
 2778 1cf7 488945F8 		movq	%rax, -8(%rbp)
 2779 1cfb 31C0     		xorl	%eax, %eax
 861:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr**)argtable;
 2780              		.loc 1 861 0
 2781 1cfd 488B85F0 		movq	-272(%rbp), %rax
 2781      FEFFFF
 2782 1d04 48898510 		movq	%rax, -240(%rbp)
 2782      FFFFFF
 862:argtable2.c   ****     int i,tabindex;
 863:argtable2.c   **** 
 864:argtable2.c   ****     /* print remaining options in abbreviated style */
 865:argtable2.c   ****     for(tabindex=0; table[tabindex] && !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 2783              		.loc 1 865 0
 2784 1d0b C7850CFF 		movl	$0, -244(%rbp)
 2784      FFFF0000 
 2784      0000
 2785 1d15 E92E0200 		jmp	.L177
 2785      00
 2786              	.L186:
 2787              	.LBB26:
 866:argtable2.c   ****         {
 867:argtable2.c   ****         char syntax[200]="";
 2788              		.loc 1 867 0
 2789 1d1a 48C78530 		movq	$0, -208(%rbp)
 2789      FFFFFF00 
 2789      000000
 2790 1d25 488D9538 		leaq	-200(%rbp), %rdx
 2790      FFFFFF
 2791 1d2c B8000000 		movl	$0, %eax
 2791      00
 2792 1d31 B9180000 		movl	$24, %ecx
 2792      00
 2793 1d36 4889D7   		movq	%rdx, %rdi
 2794 1d39 F348AB   		rep stosq
 868:argtable2.c   ****         const char *shortopts, *longopts, *datatype;
 869:argtable2.c   **** 
 870:argtable2.c   ****         shortopts = table[tabindex]->shortopts;
 2795              		.loc 1 870 0
 2796 1d3c 8B850CFF 		movl	-244(%rbp), %eax
 2796      FFFF
 2797 1d42 4898     		cltq
 2798 1d44 488D14C5 		leaq	0(,%rax,8), %rdx
 2798      00000000 
 2799 1d4c 488B8510 		movq	-240(%rbp), %rax
 2799      FFFFFF
 2800 1d53 4801D0   		addq	%rdx, %rax
 2801 1d56 488B00   		movq	(%rax), %rax
 2802 1d59 488B4008 		movq	8(%rax), %rax
 2803 1d5d 48898518 		movq	%rax, -232(%rbp)
 2803      FFFFFF
 871:argtable2.c   ****         longopts  = table[tabindex]->longopts;
 2804              		.loc 1 871 0
 2805 1d64 8B850CFF 		movl	-244(%rbp), %eax
 2805      FFFF
 2806 1d6a 4898     		cltq
 2807 1d6c 488D14C5 		leaq	0(,%rax,8), %rdx
 2807      00000000 
 2808 1d74 488B8510 		movq	-240(%rbp), %rax
 2808      FFFFFF
 2809 1d7b 4801D0   		addq	%rdx, %rax
 2810 1d7e 488B00   		movq	(%rax), %rax
 2811 1d81 488B4010 		movq	16(%rax), %rax
 2812 1d85 48898520 		movq	%rax, -224(%rbp)
 2812      FFFFFF
 872:argtable2.c   ****         datatype  = table[tabindex]->datatype;
 2813              		.loc 1 872 0
 2814 1d8c 8B850CFF 		movl	-244(%rbp), %eax
 2814      FFFF
 2815 1d92 4898     		cltq
 2816 1d94 488D14C5 		leaq	0(,%rax,8), %rdx
 2816      00000000 
 2817 1d9c 488B8510 		movq	-240(%rbp), %rax
 2817      FFFFFF
 2818 1da3 4801D0   		addq	%rdx, %rax
 2819 1da6 488B00   		movq	(%rax), %rax
 2820 1da9 488B4018 		movq	24(%rax), %rax
 2821 1dad 48898528 		movq	%rax, -216(%rbp)
 2821      FFFFFF
 873:argtable2.c   ****         arg_cat_optionv(syntax,sizeof(syntax),shortopts,longopts,datatype,table[tabindex]->flag&ARG
 2822              		.loc 1 873 0
 2823 1db4 8B850CFF 		movl	-244(%rbp), %eax
 2823      FFFF
 2824 1dba 4898     		cltq
 2825 1dbc 488D14C5 		leaq	0(,%rax,8), %rdx
 2825      00000000 
 2826 1dc4 488B8510 		movq	-240(%rbp), %rax
 2826      FFFFFF
 2827 1dcb 4801D0   		addq	%rdx, %rax
 2828 1dce 488B00   		movq	(%rax), %rax
 2829 1dd1 0FB600   		movzbl	(%rax), %eax
 2830 1dd4 0FBEC0   		movsbl	%al, %eax
 2831 1dd7 83E004   		andl	$4, %eax
 2832 1dda 4189C0   		movl	%eax, %r8d
 2833 1ddd 488BBD28 		movq	-216(%rbp), %rdi
 2833      FFFFFF
 2834 1de4 488B8D20 		movq	-224(%rbp), %rcx
 2834      FFFFFF
 2835 1deb 488B9518 		movq	-232(%rbp), %rdx
 2835      FFFFFF
 2836 1df2 488D8530 		leaq	-208(%rbp), %rax
 2836      FFFFFF
 2837 1df9 4883EC08 		subq	$8, %rsp
 2838 1dfd 488D3500 		leaq	.LC13(%rip), %rsi
 2838      000000
 2839 1e04 56       		pushq	%rsi
 2840 1e05 4589C1   		movl	%r8d, %r9d
 2841 1e08 4989F8   		movq	%rdi, %r8
 2842 1e0b BEC80000 		movl	$200, %esi
 2842      00
 2843 1e10 4889C7   		movq	%rax, %rdi
 2844 1e13 E883F5FF 		call	arg_cat_optionv
 2844      FF
 2845 1e18 4883C410 		addq	$16, %rsp
 874:argtable2.c   **** 
 875:argtable2.c   ****         /* print mandatory options */
 876:argtable2.c   ****         for (i=0; i<table[tabindex]->mincount; i++)
 2846              		.loc 1 876 0
 2847 1e1c C78508FF 		movl	$0, -248(%rbp)
 2847      FFFF0000 
 2847      0000
 2848 1e26 EB29     		jmp	.L178
 2849              	.L179:
 877:argtable2.c   ****             fprintf(fp," %s",syntax);
 2850              		.loc 1 877 0 discriminator 3
 2851 1e28 488D9530 		leaq	-208(%rbp), %rdx
 2851      FFFFFF
 2852 1e2f 488B85F8 		movq	-264(%rbp), %rax
 2852      FEFFFF
 2853 1e36 488D3500 		leaq	.LC18(%rip), %rsi
 2853      000000
 2854 1e3d 4889C7   		movq	%rax, %rdi
 2855 1e40 B8000000 		movl	$0, %eax
 2855      00
 2856 1e45 E8000000 		call	fprintf@PLT
 2856      00
 876:argtable2.c   ****             fprintf(fp," %s",syntax);
 2857              		.loc 1 876 0 discriminator 3
 2858 1e4a 838508FF 		addl	$1, -248(%rbp)
 2858      FFFF01
 2859              	.L178:
 876:argtable2.c   ****             fprintf(fp," %s",syntax);
 2860              		.loc 1 876 0 is_stmt 0 discriminator 1
 2861 1e51 8B850CFF 		movl	-244(%rbp), %eax
 2861      FFFF
 2862 1e57 4898     		cltq
 2863 1e59 488D14C5 		leaq	0(,%rax,8), %rdx
 2863      00000000 
 2864 1e61 488B8510 		movq	-240(%rbp), %rax
 2864      FFFFFF
 2865 1e68 4801D0   		addq	%rdx, %rax
 2866 1e6b 488B00   		movq	(%rax), %rax
 2867 1e6e 8B4028   		movl	40(%rax), %eax
 2868 1e71 3B8508FF 		cmpl	-248(%rbp), %eax
 2868      FFFF
 2869 1e77 7FAF     		jg	.L179
 878:argtable2.c   **** 
 879:argtable2.c   ****         /* print optional args enclosed in "[..]" */
 880:argtable2.c   ****         switch ( table[tabindex]->maxcount - table[tabindex]->mincount )
 2870              		.loc 1 880 0 is_stmt 1
 2871 1e79 8B850CFF 		movl	-244(%rbp), %eax
 2871      FFFF
 2872 1e7f 4898     		cltq
 2873 1e81 488D14C5 		leaq	0(,%rax,8), %rdx
 2873      00000000 
 2874 1e89 488B8510 		movq	-240(%rbp), %rax
 2874      FFFFFF
 2875 1e90 4801D0   		addq	%rdx, %rax
 2876 1e93 488B00   		movq	(%rax), %rax
 2877 1e96 8B502C   		movl	44(%rax), %edx
 2878 1e99 8B850CFF 		movl	-244(%rbp), %eax
 2878      FFFF
 2879 1e9f 4898     		cltq
 2880 1ea1 488D0CC5 		leaq	0(,%rax,8), %rcx
 2880      00000000 
 2881 1ea9 488B8510 		movq	-240(%rbp), %rax
 2881      FFFFFF
 2882 1eb0 4801C8   		addq	%rcx, %rax
 2883 1eb3 488B00   		movq	(%rax), %rax
 2884 1eb6 8B4028   		movl	40(%rax), %eax
 2885 1eb9 29C2     		subl	%eax, %edx
 2886 1ebb 89D0     		movl	%edx, %eax
 2887 1ebd 83F801   		cmpl	$1, %eax
 2888 1ec0 740B     		je	.L181
 2889 1ec2 83F802   		cmpl	$2, %eax
 2890 1ec5 742A     		je	.L182
 2891 1ec7 85C0     		testl	%eax, %eax
 2892 1ec9 7475     		je	.L190
 2893 1ecb EB4F     		jmp	.L189
 2894              	.L181:
 881:argtable2.c   ****             {
 882:argtable2.c   ****             case 0:
 883:argtable2.c   ****                 break;
 884:argtable2.c   ****             case 1:
 885:argtable2.c   ****                 fprintf(fp, " [%s]",syntax);
 2895              		.loc 1 885 0
 2896 1ecd 488D9530 		leaq	-208(%rbp), %rdx
 2896      FFFFFF
 2897 1ed4 488B85F8 		movq	-264(%rbp), %rax
 2897      FEFFFF
 2898 1edb 488D3500 		leaq	.LC19(%rip), %rsi
 2898      000000
 2899 1ee2 4889C7   		movq	%rax, %rdi
 2900 1ee5 B8000000 		movl	$0, %eax
 2900      00
 2901 1eea E8000000 		call	fprintf@PLT
 2901      00
 886:argtable2.c   ****                 break;
 2902              		.loc 1 886 0
 2903 1eef EB50     		jmp	.L184
 2904              	.L182:
 887:argtable2.c   ****             case 2:
 888:argtable2.c   ****                 fprintf(fp, " [%s] [%s]",syntax,syntax);
 2905              		.loc 1 888 0
 2906 1ef1 488D8D30 		leaq	-208(%rbp), %rcx
 2906      FFFFFF
 2907 1ef8 488D9530 		leaq	-208(%rbp), %rdx
 2907      FFFFFF
 2908 1eff 488B85F8 		movq	-264(%rbp), %rax
 2908      FEFFFF
 2909 1f06 488D3500 		leaq	.LC20(%rip), %rsi
 2909      000000
 2910 1f0d 4889C7   		movq	%rax, %rdi
 2911 1f10 B8000000 		movl	$0, %eax
 2911      00
 2912 1f15 E8000000 		call	fprintf@PLT
 2912      00
 889:argtable2.c   ****                 break;
 2913              		.loc 1 889 0
 2914 1f1a EB25     		jmp	.L184
 2915              	.L189:
 890:argtable2.c   ****             default:
 891:argtable2.c   ****                 fprintf(fp, " [%s]...",syntax);
 2916              		.loc 1 891 0
 2917 1f1c 488D9530 		leaq	-208(%rbp), %rdx
 2917      FFFFFF
 2918 1f23 488B85F8 		movq	-264(%rbp), %rax
 2918      FEFFFF
 2919 1f2a 488D3500 		leaq	.LC21(%rip), %rsi
 2919      000000
 2920 1f31 4889C7   		movq	%rax, %rdi
 2921 1f34 B8000000 		movl	$0, %eax
 2921      00
 2922 1f39 E8000000 		call	fprintf@PLT
 2922      00
 892:argtable2.c   ****                 break;
 2923              		.loc 1 892 0
 2924 1f3e EB01     		jmp	.L184
 2925              	.L190:
 883:argtable2.c   ****             case 1:
 2926              		.loc 1 883 0
 2927 1f40 90       		nop
 2928              	.L184:
 2929              	.LBE26:
 865:argtable2.c   ****         {
 2930              		.loc 1 865 0 discriminator 1
 2931 1f41 83850CFF 		addl	$1, -244(%rbp)
 2931      FFFF01
 2932              	.L177:
 865:argtable2.c   ****         {
 2933              		.loc 1 865 0 is_stmt 0 discriminator 2
 2934 1f48 8B850CFF 		movl	-244(%rbp), %eax
 2934      FFFF
 2935 1f4e 4898     		cltq
 2936 1f50 488D14C5 		leaq	0(,%rax,8), %rdx
 2936      00000000 
 2937 1f58 488B8510 		movq	-240(%rbp), %rax
 2937      FFFFFF
 2938 1f5f 4801D0   		addq	%rdx, %rax
 2939 1f62 488B00   		movq	(%rax), %rax
 2940 1f65 4885C0   		testq	%rax, %rax
 2941 1f68 742E     		je	.L185
 865:argtable2.c   ****         {
 2942              		.loc 1 865 0 discriminator 3
 2943 1f6a 8B850CFF 		movl	-244(%rbp), %eax
 2943      FFFF
 2944 1f70 4898     		cltq
 2945 1f72 488D14C5 		leaq	0(,%rax,8), %rdx
 2945      00000000 
 2946 1f7a 488B8510 		movq	-240(%rbp), %rax
 2946      FFFFFF
 2947 1f81 4801D0   		addq	%rdx, %rax
 2948 1f84 488B00   		movq	(%rax), %rax
 2949 1f87 0FB600   		movzbl	(%rax), %eax
 2950 1f8a 0FBEC0   		movsbl	%al, %eax
 2951 1f8d 83E001   		andl	$1, %eax
 2952 1f90 85C0     		testl	%eax, %eax
 2953 1f92 0F8482FD 		je	.L186
 2953      FFFF
 2954              	.L185:
 893:argtable2.c   ****             }
 894:argtable2.c   ****         }
 895:argtable2.c   **** 
 896:argtable2.c   ****     if (suffix)
 2955              		.loc 1 896 0 is_stmt 1
 2956 1f98 4883BDE8 		cmpq	$0, -280(%rbp)
 2956      FEFFFF00 
 2957 1fa0 7419     		je	.L191
 897:argtable2.c   ****         fprintf(fp,"%s",suffix);
 2958              		.loc 1 897 0
 2959 1fa2 488B95F8 		movq	-264(%rbp), %rdx
 2959      FEFFFF
 2960 1fa9 488B85E8 		movq	-280(%rbp), %rax
 2960      FEFFFF
 2961 1fb0 4889D6   		movq	%rdx, %rsi
 2962 1fb3 4889C7   		movq	%rax, %rdi
 2963 1fb6 E8000000 		call	fputs@PLT
 2963      00
 2964              	.L191:
 898:argtable2.c   ****     }
 2965              		.loc 1 898 0
 2966 1fbb 90       		nop
 2967 1fbc 488B45F8 		movq	-8(%rbp), %rax
 2968 1fc0 64483304 		xorq	%fs:40, %rax
 2968      25280000 
 2968      00
 2969 1fc9 7405     		je	.L188
 2970 1fcb E8000000 		call	__stack_chk_fail@PLT
 2970      00
 2971              	.L188:
 2972 1fd0 C9       		leave
 2973              		.cfi_def_cfa 7, 8
 2974 1fd1 C3       		ret
 2975              		.cfi_endproc
 2976              	.LFE17:
 2978              		.section	.rodata
 2979              	.LC22:
 2980 00ca 2020252D 		.string	"  %-20s %s\n"
 2980      32307320 
 2980      25730A00 
 2981              	.LC23:
 2982 00d6 2C2000   		.string	", "
 2983              		.text
 2984              		.globl	arg_print_glossary
 2986              	arg_print_glossary:
 2987              	.LFB18:
 899:argtable2.c   **** 
 900:argtable2.c   **** 
 901:argtable2.c   **** void arg_print_glossary(FILE *fp, void **argtable, const char *format)
 902:argtable2.c   ****     {
 2988              		.loc 1 902 0
 2989              		.cfi_startproc
 2990 1fd2 55       		pushq	%rbp
 2991              		.cfi_def_cfa_offset 16
 2992              		.cfi_offset 6, -16
 2993 1fd3 4889E5   		movq	%rsp, %rbp
 2994              		.cfi_def_cfa_register 6
 2995 1fd6 4881EC20 		subq	$288, %rsp
 2995      010000
 2996 1fdd 4889BDF8 		movq	%rdi, -264(%rbp)
 2996      FEFFFF
 2997 1fe4 4889B5F0 		movq	%rsi, -272(%rbp)
 2997      FEFFFF
 2998 1feb 488995E8 		movq	%rdx, -280(%rbp)
 2998      FEFFFF
 2999              		.loc 1 902 0
 3000 1ff2 64488B04 		movq	%fs:40, %rax
 3000      25280000 
 3000      00
 3001 1ffb 488945F8 		movq	%rax, -8(%rbp)
 3002 1fff 31C0     		xorl	%eax, %eax
 903:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr**)argtable;
 3003              		.loc 1 903 0
 3004 2001 488B85F0 		movq	-272(%rbp), %rax
 3004      FEFFFF
 3005 2008 48898508 		movq	%rax, -248(%rbp)
 3005      FFFFFF
 904:argtable2.c   ****     int tabindex;
 905:argtable2.c   **** 
 906:argtable2.c   ****     format = format ? format : "  %-20s %s\n";
 3006              		.loc 1 906 0
 3007 200f 4883BDE8 		cmpq	$0, -280(%rbp)
 3007      FEFFFF00 
 3008 2017 7409     		je	.L193
 3009              		.loc 1 906 0 is_stmt 0 discriminator 1
 3010 2019 488B85E8 		movq	-280(%rbp), %rax
 3010      FEFFFF
 3011 2020 EB07     		jmp	.L194
 3012              	.L193:
 3013              		.loc 1 906 0 discriminator 2
 3014 2022 488D0500 		leaq	.LC22(%rip), %rax
 3014      000000
 3015              	.L194:
 3016              		.loc 1 906 0 discriminator 4
 3017 2029 488985E8 		movq	%rax, -280(%rbp)
 3017      FEFFFF
 907:argtable2.c   ****     for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 3018              		.loc 1 907 0 is_stmt 1 discriminator 4
 3019 2030 C78504FF 		movl	$0, -252(%rbp)
 3019      FFFF0000 
 3019      0000
 3020 203a E9840100 		jmp	.L195
 3020      00
 3021              	.L197:
 908:argtable2.c   ****         {
 909:argtable2.c   ****         if (table[tabindex]->glossary)
 3022              		.loc 1 909 0
 3023 203f 8B8504FF 		movl	-252(%rbp), %eax
 3023      FFFF
 3024 2045 4898     		cltq
 3025 2047 488D14C5 		leaq	0(,%rax,8), %rdx
 3025      00000000 
 3026 204f 488B8508 		movq	-248(%rbp), %rax
 3026      FFFFFF
 3027 2056 4801D0   		addq	%rdx, %rax
 3028 2059 488B00   		movq	(%rax), %rax
 3029 205c 488B4020 		movq	32(%rax), %rax
 3030 2060 4885C0   		testq	%rax, %rax
 3031 2063 0F845301 		je	.L196
 3031      0000
 3032              	.LBB27:
 910:argtable2.c   ****             {
 911:argtable2.c   ****             char syntax[200]="";
 3033              		.loc 1 911 0
 3034 2069 48C78530 		movq	$0, -208(%rbp)
 3034      FFFFFF00 
 3034      000000
 3035 2074 488D9538 		leaq	-200(%rbp), %rdx
 3035      FFFFFF
 3036 207b B8000000 		movl	$0, %eax
 3036      00
 3037 2080 B9180000 		movl	$24, %ecx
 3037      00
 3038 2085 4889D7   		movq	%rdx, %rdi
 3039 2088 F348AB   		rep stosq
 912:argtable2.c   ****             const char *shortopts = table[tabindex]->shortopts;
 3040              		.loc 1 912 0
 3041 208b 8B8504FF 		movl	-252(%rbp), %eax
 3041      FFFF
 3042 2091 4898     		cltq
 3043 2093 488D14C5 		leaq	0(,%rax,8), %rdx
 3043      00000000 
 3044 209b 488B8508 		movq	-248(%rbp), %rax
 3044      FFFFFF
 3045 20a2 4801D0   		addq	%rdx, %rax
 3046 20a5 488B00   		movq	(%rax), %rax
 3047 20a8 488B4008 		movq	8(%rax), %rax
 3048 20ac 48898510 		movq	%rax, -240(%rbp)
 3048      FFFFFF
 913:argtable2.c   ****             const char *longopts  = table[tabindex]->longopts;
 3049              		.loc 1 913 0
 3050 20b3 8B8504FF 		movl	-252(%rbp), %eax
 3050      FFFF
 3051 20b9 4898     		cltq
 3052 20bb 488D14C5 		leaq	0(,%rax,8), %rdx
 3052      00000000 
 3053 20c3 488B8508 		movq	-248(%rbp), %rax
 3053      FFFFFF
 3054 20ca 4801D0   		addq	%rdx, %rax
 3055 20cd 488B00   		movq	(%rax), %rax
 3056 20d0 488B4010 		movq	16(%rax), %rax
 3057 20d4 48898518 		movq	%rax, -232(%rbp)
 3057      FFFFFF
 914:argtable2.c   ****             const char *datatype  = table[tabindex]->datatype;
 3058              		.loc 1 914 0
 3059 20db 8B8504FF 		movl	-252(%rbp), %eax
 3059      FFFF
 3060 20e1 4898     		cltq
 3061 20e3 488D14C5 		leaq	0(,%rax,8), %rdx
 3061      00000000 
 3062 20eb 488B8508 		movq	-248(%rbp), %rax
 3062      FFFFFF
 3063 20f2 4801D0   		addq	%rdx, %rax
 3064 20f5 488B00   		movq	(%rax), %rax
 3065 20f8 488B4018 		movq	24(%rax), %rax
 3066 20fc 48898520 		movq	%rax, -224(%rbp)
 3066      FFFFFF
 915:argtable2.c   ****             const char *glossary  = table[tabindex]->glossary;
 3067              		.loc 1 915 0
 3068 2103 8B8504FF 		movl	-252(%rbp), %eax
 3068      FFFF
 3069 2109 4898     		cltq
 3070 210b 488D14C5 		leaq	0(,%rax,8), %rdx
 3070      00000000 
 3071 2113 488B8508 		movq	-248(%rbp), %rax
 3071      FFFFFF
 3072 211a 4801D0   		addq	%rdx, %rax
 3073 211d 488B00   		movq	(%rax), %rax
 3074 2120 488B4020 		movq	32(%rax), %rax
 3075 2124 48898528 		movq	%rax, -216(%rbp)
 3075      FFFFFF
 916:argtable2.c   ****             arg_cat_optionv(syntax,sizeof(syntax),shortopts,longopts,datatype,table[tabindex]->flag
 3076              		.loc 1 916 0
 3077 212b 8B8504FF 		movl	-252(%rbp), %eax
 3077      FFFF
 3078 2131 4898     		cltq
 3079 2133 488D14C5 		leaq	0(,%rax,8), %rdx
 3079      00000000 
 3080 213b 488B8508 		movq	-248(%rbp), %rax
 3080      FFFFFF
 3081 2142 4801D0   		addq	%rdx, %rax
 3082 2145 488B00   		movq	(%rax), %rax
 3083 2148 0FB600   		movzbl	(%rax), %eax
 3084 214b 0FBEC0   		movsbl	%al, %eax
 3085 214e 83E004   		andl	$4, %eax
 3086 2151 4189C0   		movl	%eax, %r8d
 3087 2154 488BBD20 		movq	-224(%rbp), %rdi
 3087      FFFFFF
 3088 215b 488B8D18 		movq	-232(%rbp), %rcx
 3088      FFFFFF
 3089 2162 488B9510 		movq	-240(%rbp), %rdx
 3089      FFFFFF
 3090 2169 488D8530 		leaq	-208(%rbp), %rax
 3090      FFFFFF
 3091 2170 4883EC08 		subq	$8, %rsp
 3092 2174 488D3500 		leaq	.LC23(%rip), %rsi
 3092      000000
 3093 217b 56       		pushq	%rsi
 3094 217c 4589C1   		movl	%r8d, %r9d
 3095 217f 4989F8   		movq	%rdi, %r8
 3096 2182 BEC80000 		movl	$200, %esi
 3096      00
 3097 2187 4889C7   		movq	%rax, %rdi
 3098 218a E80CF2FF 		call	arg_cat_optionv
 3098      FF
 3099 218f 4883C410 		addq	$16, %rsp
 917:argtable2.c   ****             fprintf(fp,format,syntax,glossary);
 3100              		.loc 1 917 0
 3101 2193 488B8D28 		movq	-216(%rbp), %rcx
 3101      FFFFFF
 3102 219a 488D9530 		leaq	-208(%rbp), %rdx
 3102      FFFFFF
 3103 21a1 488BB5E8 		movq	-280(%rbp), %rsi
 3103      FEFFFF
 3104 21a8 488B85F8 		movq	-264(%rbp), %rax
 3104      FEFFFF
 3105 21af 4889C7   		movq	%rax, %rdi
 3106 21b2 B8000000 		movl	$0, %eax
 3106      00
 3107 21b7 E8000000 		call	fprintf@PLT
 3107      00
 3108              	.L196:
 3109              	.LBE27:
 907:argtable2.c   ****         {
 3110              		.loc 1 907 0 discriminator 2
 3111 21bc 838504FF 		addl	$1, -252(%rbp)
 3111      FFFF01
 3112              	.L195:
 907:argtable2.c   ****         {
 3113              		.loc 1 907 0 is_stmt 0 discriminator 1
 3114 21c3 8B8504FF 		movl	-252(%rbp), %eax
 3114      FFFF
 3115 21c9 4898     		cltq
 3116 21cb 488D14C5 		leaq	0(,%rax,8), %rdx
 3116      00000000 
 3117 21d3 488B8508 		movq	-248(%rbp), %rax
 3117      FFFFFF
 3118 21da 4801D0   		addq	%rdx, %rax
 3119 21dd 488B00   		movq	(%rax), %rax
 3120 21e0 0FB600   		movzbl	(%rax), %eax
 3121 21e3 0FBEC0   		movsbl	%al, %eax
 3122 21e6 83E001   		andl	$1, %eax
 3123 21e9 85C0     		testl	%eax, %eax
 3124 21eb 0F844EFE 		je	.L197
 3124      FFFF
 918:argtable2.c   ****             }
 919:argtable2.c   ****         }
 920:argtable2.c   ****     }
 3125              		.loc 1 920 0 is_stmt 1
 3126 21f1 90       		nop
 3127 21f2 488B45F8 		movq	-8(%rbp), %rax
 3128 21f6 64483304 		xorq	%fs:40, %rax
 3128      25280000 
 3128      00
 3129 21ff 7405     		je	.L198
 3130 2201 E8000000 		call	__stack_chk_fail@PLT
 3130      00
 3131              	.L198:
 3132 2206 C9       		leave
 3133              		.cfi_def_cfa 7, 8
 3134 2207 C3       		ret
 3135              		.cfi_endproc
 3136              	.LFE18:
 3138              		.section	.rodata
 3139              	.LC24:
 3140 00d9 25730A00 		.string	"%s\n"
 3141              		.text
 3143              	arg_print_formatted:
 3144              	.LFB19:
 921:argtable2.c   **** 
 922:argtable2.c   **** 
 923:argtable2.c   **** /**
 924:argtable2.c   ****  * Print a piece of text formatted, which means in a column with a
 925:argtable2.c   ****  * left and a right margin. The lines are wrapped at whitspaces next
 926:argtable2.c   ****  * to right margin. The function does not indent the first line, but
 927:argtable2.c   ****  * only the following ones.
 928:argtable2.c   ****  *
 929:argtable2.c   ****  * Example:
 930:argtable2.c   ****  * arg_print_formatted( fp, 0, 5, "Some text that doesn't fit." )
 931:argtable2.c   ****  * will result in the following output:
 932:argtable2.c   ****  *
 933:argtable2.c   ****  * Some
 934:argtable2.c   ****  * text
 935:argtable2.c   ****  * that
 936:argtable2.c   ****  * doesn'
 937:argtable2.c   ****  * t fit.
 938:argtable2.c   ****  *
 939:argtable2.c   ****  * Too long lines will be wrapped in the middle of a word.
 940:argtable2.c   ****  *
 941:argtable2.c   ****  * arg_print_formatted( fp, 2, 7, "Some text that doesn't fit." )
 942:argtable2.c   ****  * will result in the following output:
 943:argtable2.c   ****  *
 944:argtable2.c   ****  * Some
 945:argtable2.c   ****  *   text
 946:argtable2.c   ****  *   that
 947:argtable2.c   ****  *   doesn'
 948:argtable2.c   ****  *   t fit.
 949:argtable2.c   ****  *
 950:argtable2.c   ****  * As you see, the first line is not indented. This enables output of
 951:argtable2.c   ****  * lines, which start in a line where output already happened.
 952:argtable2.c   ****  *
 953:argtable2.c   ****  * Author: Uli Fouquet
 954:argtable2.c   ****  */
 955:argtable2.c   **** static
 956:argtable2.c   **** void arg_print_formatted( FILE *fp, const unsigned lmargin, const unsigned rmargin, const char *tex
 957:argtable2.c   ****     {
 3145              		.loc 1 957 0
 3146              		.cfi_startproc
 3147 2208 55       		pushq	%rbp
 3148              		.cfi_def_cfa_offset 16
 3149              		.cfi_offset 6, -16
 3150 2209 4889E5   		movq	%rsp, %rbp
 3151              		.cfi_def_cfa_register 6
 3152 220c 4883EC40 		subq	$64, %rsp
 3153 2210 48897DD8 		movq	%rdi, -40(%rbp)
 3154 2214 8975D4   		movl	%esi, -44(%rbp)
 3155 2217 8955D0   		movl	%edx, -48(%rbp)
 3156 221a 48894DC8 		movq	%rcx, -56(%rbp)
 958:argtable2.c   ****     const unsigned textlen = strlen( text );
 3157              		.loc 1 958 0
 3158 221e 488B45C8 		movq	-56(%rbp), %rax
 3159 2222 4889C7   		movq	%rax, %rdi
 3160 2225 E8000000 		call	strlen@PLT
 3160      00
 3161 222a 8945F8   		movl	%eax, -8(%rbp)
 959:argtable2.c   ****     unsigned line_start = 0;
 3162              		.loc 1 959 0
 3163 222d C745EC00 		movl	$0, -20(%rbp)
 3163      000000
 960:argtable2.c   ****     unsigned line_end = textlen + 1;
 3164              		.loc 1 960 0
 3165 2234 8B45F8   		movl	-8(%rbp), %eax
 3166 2237 83C001   		addl	$1, %eax
 3167 223a 8945F0   		movl	%eax, -16(%rbp)
 961:argtable2.c   ****     const unsigned colwidth = (rmargin - lmargin) + 1;
 3168              		.loc 1 961 0
 3169 223d 8B45D0   		movl	-48(%rbp), %eax
 3170 2240 2B45D4   		subl	-44(%rbp), %eax
 3171 2243 83C001   		addl	$1, %eax
 3172 2246 8945FC   		movl	%eax, -4(%rbp)
 962:argtable2.c   **** 
 963:argtable2.c   ****     /* Someone doesn't like us... */
 964:argtable2.c   ****     if ( line_end < line_start )
 3173              		.loc 1 964 0
 3174 2249 8B45F0   		movl	-16(%rbp), %eax
 3175 224c 3B45EC   		cmpl	-20(%rbp), %eax
 3176 224f 0F832C01 		jnb	.L201
 3176      0000
 965:argtable2.c   ****         { fprintf( fp, "%s\n", text ); }
 3177              		.loc 1 965 0
 3178 2255 488B55C8 		movq	-56(%rbp), %rdx
 3179 2259 488B45D8 		movq	-40(%rbp), %rax
 3180 225d 488D3500 		leaq	.LC24(%rip), %rsi
 3180      000000
 3181 2264 4889C7   		movq	%rax, %rdi
 3182 2267 B8000000 		movl	$0, %eax
 3182      00
 3183 226c E8000000 		call	fprintf@PLT
 3183      00
 966:argtable2.c   **** 
 967:argtable2.c   ****     while (line_end-1 > line_start ) 
 3184              		.loc 1 967 0
 3185 2271 E90B0100 		jmp	.L201
 3185      00
 3186              	.L203:
 968:argtable2.c   ****         {
 969:argtable2.c   ****         /* Eat leading whitespaces. This is essential because while
 970:argtable2.c   ****            wrapping lines, there will often be a whitespace at beginning
 971:argtable2.c   ****            of line  */
 972:argtable2.c   ****         while ( isspace(*(text+line_start)) ) 
 973:argtable2.c   ****             { line_start++; }
 3187              		.loc 1 973 0
 3188 2276 8345EC01 		addl	$1, -20(%rbp)
 3189              	.L202:
 972:argtable2.c   ****             { line_start++; }
 3190              		.loc 1 972 0
 3191 227a E8000000 		call	__ctype_b_loc@PLT
 3191      00
 3192 227f 488B00   		movq	(%rax), %rax
 3193 2282 8B4DEC   		movl	-20(%rbp), %ecx
 3194 2285 488B55C8 		movq	-56(%rbp), %rdx
 3195 2289 4801CA   		addq	%rcx, %rdx
 3196 228c 0FB612   		movzbl	(%rdx), %edx
 3197 228f 480FBED2 		movsbq	%dl, %rdx
 3198 2293 4801D2   		addq	%rdx, %rdx
 3199 2296 4801D0   		addq	%rdx, %rax
 3200 2299 0FB700   		movzwl	(%rax), %eax
 3201 229c 0FB7C0   		movzwl	%ax, %eax
 3202 229f 25002000 		andl	$8192, %eax
 3202      00
 3203 22a4 85C0     		testl	%eax, %eax
 3204 22a6 75CE     		jne	.L203
 974:argtable2.c   **** 
 975:argtable2.c   ****         if ((line_end - line_start) > colwidth ) 
 3205              		.loc 1 975 0
 3206 22a8 8B45F0   		movl	-16(%rbp), %eax
 3207 22ab 2B45EC   		subl	-20(%rbp), %eax
 3208 22ae 3B45FC   		cmpl	-4(%rbp), %eax
 3209 22b1 7611     		jbe	.L205
 976:argtable2.c   ****             { line_end = line_start + colwidth; }
 3210              		.loc 1 976 0
 3211 22b3 8B55EC   		movl	-20(%rbp), %edx
 3212 22b6 8B45FC   		movl	-4(%rbp), %eax
 3213 22b9 01D0     		addl	%edx, %eax
 3214 22bb 8945F0   		movl	%eax, -16(%rbp)
 977:argtable2.c   **** 
 978:argtable2.c   ****         /* Find last whitespace, that fits into line */
 979:argtable2.c   ****         while ( ( line_end > line_start ) 
 3215              		.loc 1 979 0
 3216 22be EB04     		jmp	.L205
 3217              	.L207:
 980:argtable2.c   ****                 && ( line_end - line_start > colwidth )
 981:argtable2.c   ****                 && !isspace(*(text+line_end))) 
 982:argtable2.c   ****             { line_end--; }
 3218              		.loc 1 982 0
 3219 22c0 836DF001 		subl	$1, -16(%rbp)
 3220              	.L205:
 979:argtable2.c   ****                 && ( line_end - line_start > colwidth )
 3221              		.loc 1 979 0
 3222 22c4 8B45F0   		movl	-16(%rbp), %eax
 3223 22c7 3B45EC   		cmpl	-20(%rbp), %eax
 3224 22ca 7639     		jbe	.L206
 980:argtable2.c   ****                 && ( line_end - line_start > colwidth )
 3225              		.loc 1 980 0
 3226 22cc 8B45F0   		movl	-16(%rbp), %eax
 3227 22cf 2B45EC   		subl	-20(%rbp), %eax
 3228 22d2 3B45FC   		cmpl	-4(%rbp), %eax
 3229 22d5 762E     		jbe	.L206
 981:argtable2.c   ****             { line_end--; }
 3230              		.loc 1 981 0
 3231 22d7 E8000000 		call	__ctype_b_loc@PLT
 3231      00
 3232 22dc 488B00   		movq	(%rax), %rax
 3233 22df 8B4DF0   		movl	-16(%rbp), %ecx
 3234 22e2 488B55C8 		movq	-56(%rbp), %rdx
 3235 22e6 4801CA   		addq	%rcx, %rdx
 3236 22e9 0FB612   		movzbl	(%rdx), %edx
 3237 22ec 480FBED2 		movsbq	%dl, %rdx
 3238 22f0 4801D2   		addq	%rdx, %rdx
 3239 22f3 4801D0   		addq	%rdx, %rax
 3240 22f6 0FB700   		movzwl	(%rax), %eax
 3241 22f9 0FB7C0   		movzwl	%ax, %eax
 3242 22fc 25002000 		andl	$8192, %eax
 3242      00
 3243 2301 85C0     		testl	%eax, %eax
 3244 2303 74BB     		je	.L207
 3245              	.L206:
 983:argtable2.c   **** 
 984:argtable2.c   ****         /* Do not print trailing whitespace. If this text
 985:argtable2.c   ****            has got only one line, line_end now points to the
 986:argtable2.c   ****            last char due to initialization. */
 987:argtable2.c   ****         line_end--;
 3246              		.loc 1 987 0
 3247 2305 836DF001 		subl	$1, -16(%rbp)
 988:argtable2.c   **** 
 989:argtable2.c   ****         /* Output line of text */
 990:argtable2.c   ****         while ( line_start < line_end ) 
 3248              		.loc 1 990 0
 3249 2309 EB22     		jmp	.L208
 3250              	.L209:
 991:argtable2.c   ****             {
 992:argtable2.c   ****             fputc(*(text+line_start), fp );
 3251              		.loc 1 992 0
 3252 230b 8B55EC   		movl	-20(%rbp), %edx
 3253 230e 488B45C8 		movq	-56(%rbp), %rax
 3254 2312 4801D0   		addq	%rdx, %rax
 3255 2315 0FB600   		movzbl	(%rax), %eax
 3256 2318 0FBEC0   		movsbl	%al, %eax
 3257 231b 488B55D8 		movq	-40(%rbp), %rdx
 3258 231f 4889D6   		movq	%rdx, %rsi
 3259 2322 89C7     		movl	%eax, %edi
 3260 2324 E8000000 		call	fputc@PLT
 3260      00
 993:argtable2.c   ****             line_start++;
 3261              		.loc 1 993 0
 3262 2329 8345EC01 		addl	$1, -20(%rbp)
 3263              	.L208:
 990:argtable2.c   ****             {
 3264              		.loc 1 990 0
 3265 232d 8B45EC   		movl	-20(%rbp), %eax
 3266 2330 3B45F0   		cmpl	-16(%rbp), %eax
 3267 2333 72D6     		jb	.L209
 994:argtable2.c   ****             }
 995:argtable2.c   ****         fputc( '\n', fp );
 3268              		.loc 1 995 0
 3269 2335 488B45D8 		movq	-40(%rbp), %rax
 3270 2339 4889C6   		movq	%rax, %rsi
 3271 233c BF0A0000 		movl	$10, %edi
 3271      00
 3272 2341 E8000000 		call	fputc@PLT
 3272      00
 996:argtable2.c   **** 
 997:argtable2.c   ****         /* Initialize another line */
 998:argtable2.c   ****         if ( line_end+1 < textlen ) 
 3273              		.loc 1 998 0
 3274 2346 8B45F0   		movl	-16(%rbp), %eax
 3275 2349 83C001   		addl	$1, %eax
 3276 234c 3B45F8   		cmpl	-8(%rbp), %eax
 3277 234f 732C     		jnb	.L210
 3278              	.LBB28:
 999:argtable2.c   ****             {
1000:argtable2.c   ****             unsigned i;
1001:argtable2.c   **** 
1002:argtable2.c   ****             for (i=0; i < lmargin; i++ )
 3279              		.loc 1 1002 0
 3280 2351 C745F400 		movl	$0, -12(%rbp)
 3280      000000
 3281 2358 EB15     		jmp	.L211
 3282              	.L212:
1003:argtable2.c   ****                 { fputc( ' ', fp ); }
 3283              		.loc 1 1003 0 discriminator 3
 3284 235a 488B45D8 		movq	-40(%rbp), %rax
 3285 235e 4889C6   		movq	%rax, %rsi
 3286 2361 BF200000 		movl	$32, %edi
 3286      00
 3287 2366 E8000000 		call	fputc@PLT
 3287      00
1002:argtable2.c   ****                 { fputc( ' ', fp ); }
 3288              		.loc 1 1002 0 discriminator 3
 3289 236b 8345F401 		addl	$1, -12(%rbp)
 3290              	.L211:
1002:argtable2.c   ****                 { fputc( ' ', fp ); }
 3291              		.loc 1 1002 0 is_stmt 0 discriminator 1
 3292 236f 8B45F4   		movl	-12(%rbp), %eax
 3293 2372 3B45D4   		cmpl	-44(%rbp), %eax
 3294 2375 72E3     		jb	.L212
1004:argtable2.c   **** 
1005:argtable2.c   ****             line_end = textlen;
 3295              		.loc 1 1005 0 is_stmt 1
 3296 2377 8B45F8   		movl	-8(%rbp), %eax
 3297 237a 8945F0   		movl	%eax, -16(%rbp)
 3298              	.L210:
 3299              	.LBE28:
1006:argtable2.c   ****             }
1007:argtable2.c   **** 
1008:argtable2.c   ****         /* If we have to print another line, get also the last char. */
1009:argtable2.c   ****         line_end++;
 3300              		.loc 1 1009 0
 3301 237d 8345F001 		addl	$1, -16(%rbp)
 3302              	.L201:
 967:argtable2.c   ****         {
 3303              		.loc 1 967 0
 3304 2381 8B45F0   		movl	-16(%rbp), %eax
 3305 2384 83E801   		subl	$1, %eax
 3306 2387 3B45EC   		cmpl	-20(%rbp), %eax
 3307 238a 0F87EAFE 		ja	.L202
 3307      FFFF
1010:argtable2.c   **** 
1011:argtable2.c   ****         } /* lines of text */
1012:argtable2.c   ****     }
 3308              		.loc 1 1012 0
 3309 2390 90       		nop
 3310 2391 C9       		leave
 3311              		.cfi_def_cfa 7, 8
 3312 2392 C3       		ret
 3313              		.cfi_endproc
 3314              	.LFE19:
 3316              		.section	.rodata
 3317              	.LC25:
 3318 00dd 2020252D 		.string	"  %-25s %s\n"
 3318      32357320 
 3318      25730A00 
 3319              	.LC26:
 3320 00e9 2020252D 		.string	"  %-25s "
 3320      32357320 
 3320      00
 3321              		.text
 3322              		.globl	arg_print_glossary_gnu
 3324              	arg_print_glossary_gnu:
 3325              	.LFB20:
1013:argtable2.c   **** 
1014:argtable2.c   **** /**
1015:argtable2.c   ****  * Prints the glossary in strict GNU format. 
1016:argtable2.c   ****  * Differences to arg_print_glossary() are:
1017:argtable2.c   ****  *  - wraps lines after 80 chars
1018:argtable2.c   ****  *  - indents lines without shortops
1019:argtable2.c   ****  *  - does not accept formatstrings
1020:argtable2.c   ****  *
1021:argtable2.c   ****  * Contributed by Uli Fouquet
1022:argtable2.c   ****  */
1023:argtable2.c   **** void arg_print_glossary_gnu(FILE *fp, void **argtable )
1024:argtable2.c   ****     {
 3326              		.loc 1 1024 0
 3327              		.cfi_startproc
 3328 2393 55       		pushq	%rbp
 3329              		.cfi_def_cfa_offset 16
 3330              		.cfi_offset 6, -16
 3331 2394 4889E5   		movq	%rsp, %rbp
 3332              		.cfi_def_cfa_register 6
 3333 2397 4881EC10 		subq	$272, %rsp
 3333      010000
 3334 239e 4889BDF8 		movq	%rdi, -264(%rbp)
 3334      FEFFFF
 3335 23a5 4889B5F0 		movq	%rsi, -272(%rbp)
 3335      FEFFFF
 3336              		.loc 1 1024 0
 3337 23ac 64488B04 		movq	%fs:40, %rax
 3337      25280000 
 3337      00
 3338 23b5 488945F8 		movq	%rax, -8(%rbp)
 3339 23b9 31C0     		xorl	%eax, %eax
1025:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr**)argtable;
 3340              		.loc 1 1025 0
 3341 23bb 488B85F0 		movq	-272(%rbp), %rax
 3341      FEFFFF
 3342 23c2 48898508 		movq	%rax, -248(%rbp)
 3342      FFFFFF
1026:argtable2.c   ****     int tabindex;
1027:argtable2.c   **** 
1028:argtable2.c   ****     for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 3343              		.loc 1 1028 0
 3344 23c9 C78504FF 		movl	$0, -252(%rbp)
 3344      FFFF0000 
 3344      0000
 3345 23d3 E9190200 		jmp	.L215
 3345      00
 3346              	.L219:
1029:argtable2.c   ****         {
1030:argtable2.c   ****         if (table[tabindex]->glossary)
 3347              		.loc 1 1030 0
 3348 23d8 8B8504FF 		movl	-252(%rbp), %eax
 3348      FFFF
 3349 23de 4898     		cltq
 3350 23e0 488D14C5 		leaq	0(,%rax,8), %rdx
 3350      00000000 
 3351 23e8 488B8508 		movq	-248(%rbp), %rax
 3351      FFFFFF
 3352 23ef 4801D0   		addq	%rdx, %rax
 3353 23f2 488B00   		movq	(%rax), %rax
 3354 23f5 488B4020 		movq	32(%rax), %rax
 3355 23f9 4885C0   		testq	%rax, %rax
 3356 23fc 0F84E801 		je	.L216
 3356      0000
 3357              	.LBB29:
1031:argtable2.c   ****             {
1032:argtable2.c   ****             char syntax[200]="";
 3358              		.loc 1 1032 0
 3359 2402 48C78530 		movq	$0, -208(%rbp)
 3359      FFFFFF00 
 3359      000000
 3360 240d 488D9538 		leaq	-200(%rbp), %rdx
 3360      FFFFFF
 3361 2414 B8000000 		movl	$0, %eax
 3361      00
 3362 2419 B9180000 		movl	$24, %ecx
 3362      00
 3363 241e 4889D7   		movq	%rdx, %rdi
 3364 2421 F348AB   		rep stosq
1033:argtable2.c   ****             const char *shortopts = table[tabindex]->shortopts;
 3365              		.loc 1 1033 0
 3366 2424 8B8504FF 		movl	-252(%rbp), %eax
 3366      FFFF
 3367 242a 4898     		cltq
 3368 242c 488D14C5 		leaq	0(,%rax,8), %rdx
 3368      00000000 
 3369 2434 488B8508 		movq	-248(%rbp), %rax
 3369      FFFFFF
 3370 243b 4801D0   		addq	%rdx, %rax
 3371 243e 488B00   		movq	(%rax), %rax
 3372 2441 488B4008 		movq	8(%rax), %rax
 3373 2445 48898510 		movq	%rax, -240(%rbp)
 3373      FFFFFF
1034:argtable2.c   ****             const char *longopts  = table[tabindex]->longopts;
 3374              		.loc 1 1034 0
 3375 244c 8B8504FF 		movl	-252(%rbp), %eax
 3375      FFFF
 3376 2452 4898     		cltq
 3377 2454 488D14C5 		leaq	0(,%rax,8), %rdx
 3377      00000000 
 3378 245c 488B8508 		movq	-248(%rbp), %rax
 3378      FFFFFF
 3379 2463 4801D0   		addq	%rdx, %rax
 3380 2466 488B00   		movq	(%rax), %rax
 3381 2469 488B4010 		movq	16(%rax), %rax
 3382 246d 48898518 		movq	%rax, -232(%rbp)
 3382      FFFFFF
1035:argtable2.c   ****             const char *datatype  = table[tabindex]->datatype;
 3383              		.loc 1 1035 0
 3384 2474 8B8504FF 		movl	-252(%rbp), %eax
 3384      FFFF
 3385 247a 4898     		cltq
 3386 247c 488D14C5 		leaq	0(,%rax,8), %rdx
 3386      00000000 
 3387 2484 488B8508 		movq	-248(%rbp), %rax
 3387      FFFFFF
 3388 248b 4801D0   		addq	%rdx, %rax
 3389 248e 488B00   		movq	(%rax), %rax
 3390 2491 488B4018 		movq	24(%rax), %rax
 3391 2495 48898520 		movq	%rax, -224(%rbp)
 3391      FFFFFF
1036:argtable2.c   ****             const char *glossary  = table[tabindex]->glossary;
 3392              		.loc 1 1036 0
 3393 249c 8B8504FF 		movl	-252(%rbp), %eax
 3393      FFFF
 3394 24a2 4898     		cltq
 3395 24a4 488D14C5 		leaq	0(,%rax,8), %rdx
 3395      00000000 
 3396 24ac 488B8508 		movq	-248(%rbp), %rax
 3396      FFFFFF
 3397 24b3 4801D0   		addq	%rdx, %rax
 3398 24b6 488B00   		movq	(%rax), %rax
 3399 24b9 488B4020 		movq	32(%rax), %rax
 3400 24bd 48898528 		movq	%rax, -216(%rbp)
 3400      FFFFFF
1037:argtable2.c   **** 
1038:argtable2.c   ****             if ( !shortopts && longopts ) 
 3401              		.loc 1 1038 0
 3402 24c4 4883BD10 		cmpq	$0, -240(%rbp)
 3402      FFFFFF00 
 3403 24cc 752A     		jne	.L217
 3404              		.loc 1 1038 0 is_stmt 0 discriminator 1
 3405 24ce 4883BD18 		cmpq	$0, -232(%rbp)
 3405      FFFFFF00 
 3406 24d6 7420     		je	.L217
1039:argtable2.c   ****                 {
1040:argtable2.c   ****                 /* Indent trailing line by 4 spaces... */
1041:argtable2.c   ****                 memset( syntax, ' ', 4 );
 3407              		.loc 1 1041 0 is_stmt 1
 3408 24d8 488D8530 		leaq	-208(%rbp), %rax
 3408      FFFFFF
 3409 24df BA040000 		movl	$4, %edx
 3409      00
 3410 24e4 BE200000 		movl	$32, %esi
 3410      00
 3411 24e9 4889C7   		movq	%rax, %rdi
 3412 24ec E8000000 		call	memset@PLT
 3412      00
1042:argtable2.c   ****                 *(syntax+4) = '\0';
 3413              		.loc 1 1042 0
 3414 24f1 C68534FF 		movb	$0, -204(%rbp)
 3414      FFFF00
 3415              	.L217:
1043:argtable2.c   ****                 }
1044:argtable2.c   **** 
1045:argtable2.c   ****             arg_cat_optionv(syntax,sizeof(syntax),shortopts,longopts,datatype,table[tabindex]->flag
 3416              		.loc 1 1045 0
 3417 24f8 8B8504FF 		movl	-252(%rbp), %eax
 3417      FFFF
 3418 24fe 4898     		cltq
 3419 2500 488D14C5 		leaq	0(,%rax,8), %rdx
 3419      00000000 
 3420 2508 488B8508 		movq	-248(%rbp), %rax
 3420      FFFFFF
 3421 250f 4801D0   		addq	%rdx, %rax
 3422 2512 488B00   		movq	(%rax), %rax
 3423 2515 0FB600   		movzbl	(%rax), %eax
 3424 2518 0FBEC0   		movsbl	%al, %eax
 3425 251b 83E004   		andl	$4, %eax
 3426 251e 4189C0   		movl	%eax, %r8d
 3427 2521 488BBD20 		movq	-224(%rbp), %rdi
 3427      FFFFFF
 3428 2528 488B8D18 		movq	-232(%rbp), %rcx
 3428      FFFFFF
 3429 252f 488B9510 		movq	-240(%rbp), %rdx
 3429      FFFFFF
 3430 2536 488D8530 		leaq	-208(%rbp), %rax
 3430      FFFFFF
 3431 253d 4883EC08 		subq	$8, %rsp
 3432 2541 488D3500 		leaq	.LC23(%rip), %rsi
 3432      000000
 3433 2548 56       		pushq	%rsi
 3434 2549 4589C1   		movl	%r8d, %r9d
 3435 254c 4989F8   		movq	%rdi, %r8
 3436 254f BEC80000 		movl	$200, %esi
 3436      00
 3437 2554 4889C7   		movq	%rax, %rdi
 3438 2557 E83FEEFF 		call	arg_cat_optionv
 3438      FF
 3439 255c 4883C410 		addq	$16, %rsp
1046:argtable2.c   **** 
1047:argtable2.c   ****             /* If syntax fits not into column, print glossary in new line... */
1048:argtable2.c   ****             if ( strlen(syntax) > 25 ) 
 3440              		.loc 1 1048 0
 3441 2560 488D8530 		leaq	-208(%rbp), %rax
 3441      FFFFFF
 3442 2567 4889C7   		movq	%rax, %rdi
 3443 256a E8000000 		call	strlen@PLT
 3443      00
 3444 256f 4883F819 		cmpq	$25, %rax
 3445 2573 7630     		jbe	.L218
1049:argtable2.c   ****                 {
1050:argtable2.c   ****                 fprintf( fp, "  %-25s %s\n", syntax, "" );
 3446              		.loc 1 1050 0
 3447 2575 488D9530 		leaq	-208(%rbp), %rdx
 3447      FFFFFF
 3448 257c 488B85F8 		movq	-264(%rbp), %rax
 3448      FEFFFF
 3449 2583 488D0D00 		leaq	.LC12(%rip), %rcx
 3449      000000
 3450 258a 488D3500 		leaq	.LC25(%rip), %rsi
 3450      000000
 3451 2591 4889C7   		movq	%rax, %rdi
 3452 2594 B8000000 		movl	$0, %eax
 3452      00
 3453 2599 E8000000 		call	fprintf@PLT
 3453      00
1051:argtable2.c   ****                 *syntax = '\0';
 3454              		.loc 1 1051 0
 3455 259e C68530FF 		movb	$0, -208(%rbp)
 3455      FFFF00
 3456              	.L218:
1052:argtable2.c   ****                 }
1053:argtable2.c   **** 
1054:argtable2.c   ****             fprintf( fp, "  %-25s ", syntax );
 3457              		.loc 1 1054 0
 3458 25a5 488D9530 		leaq	-208(%rbp), %rdx
 3458      FFFFFF
 3459 25ac 488B85F8 		movq	-264(%rbp), %rax
 3459      FEFFFF
 3460 25b3 488D3500 		leaq	.LC26(%rip), %rsi
 3460      000000
 3461 25ba 4889C7   		movq	%rax, %rdi
 3462 25bd B8000000 		movl	$0, %eax
 3462      00
 3463 25c2 E8000000 		call	fprintf@PLT
 3463      00
1055:argtable2.c   ****             arg_print_formatted( fp, 28, 79, glossary );
 3464              		.loc 1 1055 0
 3465 25c7 488B9528 		movq	-216(%rbp), %rdx
 3465      FFFFFF
 3466 25ce 488B85F8 		movq	-264(%rbp), %rax
 3466      FEFFFF
 3467 25d5 4889D1   		movq	%rdx, %rcx
 3468 25d8 BA4F0000 		movl	$79, %edx
 3468      00
 3469 25dd BE1C0000 		movl	$28, %esi
 3469      00
 3470 25e2 4889C7   		movq	%rax, %rdi
 3471 25e5 E81EFCFF 		call	arg_print_formatted
 3471      FF
 3472              	.L216:
 3473              	.LBE29:
1028:argtable2.c   ****         {
 3474              		.loc 1 1028 0 discriminator 2
 3475 25ea 838504FF 		addl	$1, -252(%rbp)
 3475      FFFF01
 3476              	.L215:
1028:argtable2.c   ****         {
 3477              		.loc 1 1028 0 is_stmt 0 discriminator 1
 3478 25f1 8B8504FF 		movl	-252(%rbp), %eax
 3478      FFFF
 3479 25f7 4898     		cltq
 3480 25f9 488D14C5 		leaq	0(,%rax,8), %rdx
 3480      00000000 
 3481 2601 488B8508 		movq	-248(%rbp), %rax
 3481      FFFFFF
 3482 2608 4801D0   		addq	%rdx, %rax
 3483 260b 488B00   		movq	(%rax), %rax
 3484 260e 0FB600   		movzbl	(%rax), %eax
 3485 2611 0FBEC0   		movsbl	%al, %eax
 3486 2614 83E001   		andl	$1, %eax
 3487 2617 85C0     		testl	%eax, %eax
 3488 2619 0F84B9FD 		je	.L219
 3488      FFFF
1056:argtable2.c   ****             }
1057:argtable2.c   ****         } /* for each table entry */
1058:argtable2.c   **** 
1059:argtable2.c   ****     fputc( '\n', fp );
 3489              		.loc 1 1059 0 is_stmt 1
 3490 261f 488B85F8 		movq	-264(%rbp), %rax
 3490      FEFFFF
 3491 2626 4889C6   		movq	%rax, %rsi
 3492 2629 BF0A0000 		movl	$10, %edi
 3492      00
 3493 262e E8000000 		call	fputc@PLT
 3493      00
1060:argtable2.c   ****     }
 3494              		.loc 1 1060 0
 3495 2633 90       		nop
 3496 2634 488B45F8 		movq	-8(%rbp), %rax
 3497 2638 64483304 		xorq	%fs:40, %rax
 3497      25280000 
 3497      00
 3498 2641 7405     		je	.L220
 3499 2643 E8000000 		call	__stack_chk_fail@PLT
 3499      00
 3500              	.L220:
 3501 2648 C9       		leave
 3502              		.cfi_def_cfa 7, 8
 3503 2649 C3       		ret
 3504              		.cfi_endproc
 3505              	.LFE20:
 3507              		.globl	arg_nullcheck
 3509              	arg_nullcheck:
 3510              	.LFB21:
1061:argtable2.c   **** 
1062:argtable2.c   **** 
1063:argtable2.c   **** /**
1064:argtable2.c   ****  * Checks the argtable[] array for NULL entries and returns 1
1065:argtable2.c   ****  * if any are found, zero otherwise.
1066:argtable2.c   ****  */
1067:argtable2.c   **** int arg_nullcheck(void **argtable)
1068:argtable2.c   ****     {
 3511              		.loc 1 1068 0
 3512              		.cfi_startproc
 3513 264a 55       		pushq	%rbp
 3514              		.cfi_def_cfa_offset 16
 3515              		.cfi_offset 6, -16
 3516 264b 4889E5   		movq	%rsp, %rbp
 3517              		.cfi_def_cfa_register 6
 3518 264e 48897DE8 		movq	%rdi, -24(%rbp)
1069:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr **)argtable;
 3519              		.loc 1 1069 0
 3520 2652 488B45E8 		movq	-24(%rbp), %rax
 3521 2656 488945F8 		movq	%rax, -8(%rbp)
1070:argtable2.c   ****     int tabindex;
1071:argtable2.c   ****     /*printf("arg_nullcheck(%p)\n",argtable);*/
1072:argtable2.c   **** 
1073:argtable2.c   ****     if (!table)
 3522              		.loc 1 1073 0
 3523 265a 48837DF8 		cmpq	$0, -8(%rbp)
 3523      00
 3524 265f 7507     		jne	.L222
1074:argtable2.c   ****         return 1;
 3525              		.loc 1 1074 0
 3526 2661 B8010000 		movl	$1, %eax
 3526      00
 3527 2666 EB59     		jmp	.L223
 3528              	.L222:
1075:argtable2.c   **** 
1076:argtable2.c   ****     tabindex=0;
 3529              		.loc 1 1076 0
 3530 2668 C745F400 		movl	$0, -12(%rbp)
 3530      000000
 3531              	.L225:
1077:argtable2.c   ****     do
1078:argtable2.c   ****         {
1079:argtable2.c   ****         /*printf("argtable[%d]=%p\n",tabindex,argtable[tabindex]);*/
1080:argtable2.c   ****         if (!table[tabindex])
 3532              		.loc 1 1080 0
 3533 266f 8B45F4   		movl	-12(%rbp), %eax
 3534 2672 4898     		cltq
 3535 2674 488D14C5 		leaq	0(,%rax,8), %rdx
 3535      00000000 
 3536 267c 488B45F8 		movq	-8(%rbp), %rax
 3537 2680 4801D0   		addq	%rdx, %rax
 3538 2683 488B00   		movq	(%rax), %rax
 3539 2686 4885C0   		testq	%rax, %rax
 3540 2689 7507     		jne	.L224
1081:argtable2.c   ****             return 1;
 3541              		.loc 1 1081 0
 3542 268b B8010000 		movl	$1, %eax
 3542      00
 3543 2690 EB2F     		jmp	.L223
 3544              	.L224:
1082:argtable2.c   ****         } while(!(table[tabindex++]->flag&ARG_TERMINATOR));
 3545              		.loc 1 1082 0
 3546 2692 8B45F4   		movl	-12(%rbp), %eax
 3547 2695 8D5001   		leal	1(%rax), %edx
 3548 2698 8955F4   		movl	%edx, -12(%rbp)
 3549 269b 4898     		cltq
 3550 269d 488D14C5 		leaq	0(,%rax,8), %rdx
 3550      00000000 
 3551 26a5 488B45F8 		movq	-8(%rbp), %rax
 3552 26a9 4801D0   		addq	%rdx, %rax
 3553 26ac 488B00   		movq	(%rax), %rax
 3554 26af 0FB600   		movzbl	(%rax), %eax
 3555 26b2 0FBEC0   		movsbl	%al, %eax
 3556 26b5 83E001   		andl	$1, %eax
 3557 26b8 85C0     		testl	%eax, %eax
 3558 26ba 74B3     		je	.L225
1083:argtable2.c   **** 
1084:argtable2.c   ****     return 0;
 3559              		.loc 1 1084 0
 3560 26bc B8000000 		movl	$0, %eax
 3560      00
 3561              	.L223:
1085:argtable2.c   ****     }
 3562              		.loc 1 1085 0
 3563 26c1 5D       		popq	%rbp
 3564              		.cfi_def_cfa 7, 8
 3565 26c2 C3       		ret
 3566              		.cfi_endproc
 3567              	.LFE21:
 3569              		.globl	arg_free
 3571              	arg_free:
 3572              	.LFB22:
1086:argtable2.c   **** 
1087:argtable2.c   **** 
1088:argtable2.c   **** /*
1089:argtable2.c   ****  * arg_free() is deprecated in favour of arg_freetable() due to a flaw in its design.
1090:argtable2.c   ****  * The flaw results in memory leak in the (very rare) case that an intermediate
1091:argtable2.c   ****  * entry in the argtable array failed its memory allocation while others following
1092:argtable2.c   ****  * that entry were still allocated ok. Those subsequent allocations will not be
1093:argtable2.c   ****  * deallocated by arg_free().
1094:argtable2.c   ****  * Despite the unlikeliness of the problem occurring, and the even unlikelier event
1095:argtable2.c   ****  * that it has any deliterious effect, it is fixed regardless by replacing arg_free()
1096:argtable2.c   ****  * with the newer arg_freetable() function.
1097:argtable2.c   ****  * We still keep arg_free() for backwards compatibility.
1098:argtable2.c   ****  */
1099:argtable2.c   **** void arg_free(void **argtable)
1100:argtable2.c   ****     {
 3573              		.loc 1 1100 0
 3574              		.cfi_startproc
 3575 26c3 55       		pushq	%rbp
 3576              		.cfi_def_cfa_offset 16
 3577              		.cfi_offset 6, -16
 3578 26c4 4889E5   		movq	%rsp, %rbp
 3579              		.cfi_def_cfa_register 6
 3580 26c7 4883EC20 		subq	$32, %rsp
 3581 26cb 48897DE8 		movq	%rdi, -24(%rbp)
1101:argtable2.c   ****     struct arg_hdr **table=(struct arg_hdr**)argtable;
 3582              		.loc 1 1101 0
 3583 26cf 488B45E8 		movq	-24(%rbp), %rax
 3584 26d3 488945F8 		movq	%rax, -8(%rbp)
1102:argtable2.c   ****     int tabindex=0;
 3585              		.loc 1 1102 0
 3586 26d7 C745F000 		movl	$0, -16(%rbp)
 3586      000000
 3587              	.L229:
1103:argtable2.c   ****     int flag;
1104:argtable2.c   ****     /*printf("arg_free(%p)\n",argtable);*/
1105:argtable2.c   ****     do
1106:argtable2.c   ****         {
1107:argtable2.c   ****         /*
1108:argtable2.c   ****         if we encounter a NULL entry then somewhat incorrectly we presume
1109:argtable2.c   ****         we have come to the end of the array. It isnt strictly true because
1110:argtable2.c   ****         an intermediate entry could be NULL with other non-NULL entries to follow.
1111:argtable2.c   ****         The subsequent argtable entries would then not be freed as they should.
1112:argtable2.c   ****         */
1113:argtable2.c   ****         if (table[tabindex]==NULL)
 3588              		.loc 1 1113 0
 3589 26de 8B45F0   		movl	-16(%rbp), %eax
 3590 26e1 4898     		cltq
 3591 26e3 488D14C5 		leaq	0(,%rax,8), %rdx
 3591      00000000 
 3592 26eb 488B45F8 		movq	-8(%rbp), %rax
 3593 26ef 4801D0   		addq	%rdx, %rax
 3594 26f2 488B00   		movq	(%rax), %rax
 3595 26f5 4885C0   		testq	%rax, %rax
 3596 26f8 7470     		je	.L230
1114:argtable2.c   ****             break;
1115:argtable2.c   ****                     
1116:argtable2.c   ****         flag = table[tabindex]->flag;
 3597              		.loc 1 1116 0
 3598 26fa 8B45F0   		movl	-16(%rbp), %eax
 3599 26fd 4898     		cltq
 3600 26ff 488D14C5 		leaq	0(,%rax,8), %rdx
 3600      00000000 
 3601 2707 488B45F8 		movq	-8(%rbp), %rax
 3602 270b 4801D0   		addq	%rdx, %rax
 3603 270e 488B00   		movq	(%rax), %rax
 3604 2711 0FB600   		movzbl	(%rax), %eax
 3605 2714 0FBEC0   		movsbl	%al, %eax
 3606 2717 8945F4   		movl	%eax, -12(%rbp)
1117:argtable2.c   ****         free(table[tabindex]);
 3607              		.loc 1 1117 0
 3608 271a 8B45F0   		movl	-16(%rbp), %eax
 3609 271d 4898     		cltq
 3610 271f 488D14C5 		leaq	0(,%rax,8), %rdx
 3610      00000000 
 3611 2727 488B45F8 		movq	-8(%rbp), %rax
 3612 272b 4801D0   		addq	%rdx, %rax
 3613 272e 488B00   		movq	(%rax), %rax
 3614 2731 4889C7   		movq	%rax, %rdi
 3615 2734 E8000000 		call	free@PLT
 3615      00
1118:argtable2.c   ****         table[tabindex++]=NULL;
 3616              		.loc 1 1118 0
 3617 2739 8B45F0   		movl	-16(%rbp), %eax
 3618 273c 8D5001   		leal	1(%rax), %edx
 3619 273f 8955F0   		movl	%edx, -16(%rbp)
 3620 2742 4898     		cltq
 3621 2744 488D14C5 		leaq	0(,%rax,8), %rdx
 3621      00000000 
 3622 274c 488B45F8 		movq	-8(%rbp), %rax
 3623 2750 4801D0   		addq	%rdx, %rax
 3624 2753 48C70000 		movq	$0, (%rax)
 3624      000000
1119:argtable2.c   ****         
1120:argtable2.c   ****         } while(!(flag&ARG_TERMINATOR));
 3625              		.loc 1 1120 0
 3626 275a 8B45F4   		movl	-12(%rbp), %eax
 3627 275d 83E001   		andl	$1, %eax
 3628 2760 85C0     		testl	%eax, %eax
 3629 2762 0F8476FF 		je	.L229
 3629      FFFF
1121:argtable2.c   ****     }
 3630              		.loc 1 1121 0
 3631 2768 EB01     		jmp	.L228
 3632              	.L230:
1114:argtable2.c   ****                     
 3633              		.loc 1 1114 0
 3634 276a 90       		nop
 3635              	.L228:
 3636              		.loc 1 1121 0
 3637 276b 90       		nop
 3638 276c C9       		leave
 3639              		.cfi_def_cfa 7, 8
 3640 276d C3       		ret
 3641              		.cfi_endproc
 3642              	.LFE22:
 3644              		.globl	arg_freetable
 3646              	arg_freetable:
 3647              	.LFB23:
1122:argtable2.c   **** 
1123:argtable2.c   **** /* frees each non-NULL element of argtable[], where n is the size of the number of entries in the a
1124:argtable2.c   **** void arg_freetable(void **argtable, size_t n)
1125:argtable2.c   ****     {
 3648              		.loc 1 1125 0
 3649              		.cfi_startproc
 3650 276e 55       		pushq	%rbp
 3651              		.cfi_def_cfa_offset 16
 3652              		.cfi_offset 6, -16
 3653 276f 4889E5   		movq	%rsp, %rbp
 3654              		.cfi_def_cfa_register 6
 3655 2772 4883EC20 		subq	$32, %rsp
 3656 2776 48897DE8 		movq	%rdi, -24(%rbp)
 3657 277a 488975E0 		movq	%rsi, -32(%rbp)
1126:argtable2.c   ****     struct arg_hdr **table=(struct arg_hdr**)argtable;
 3658              		.loc 1 1126 0
 3659 277e 488B45E8 		movq	-24(%rbp), %rax
 3660 2782 488945F8 		movq	%rax, -8(%rbp)
1127:argtable2.c   ****     int tabindex=0;
 3661              		.loc 1 1127 0
 3662 2786 C745F400 		movl	$0, -12(%rbp)
 3662      000000
1128:argtable2.c   ****     /*printf("arg_freetable(%p)\n",argtable);*/
1129:argtable2.c   ****     for (tabindex=0; tabindex<n; tabindex++)
 3663              		.loc 1 1129 0
 3664 278d C745F400 		movl	$0, -12(%rbp)
 3664      000000
 3665 2794 EB5D     		jmp	.L232
 3666              	.L235:
1130:argtable2.c   ****         {
1131:argtable2.c   ****         if (table[tabindex]==NULL)
 3667              		.loc 1 1131 0
 3668 2796 8B45F4   		movl	-12(%rbp), %eax
 3669 2799 4898     		cltq
 3670 279b 488D14C5 		leaq	0(,%rax,8), %rdx
 3670      00000000 
 3671 27a3 488B45F8 		movq	-8(%rbp), %rax
 3672 27a7 4801D0   		addq	%rdx, %rax
 3673 27aa 488B00   		movq	(%rax), %rax
 3674 27ad 4885C0   		testq	%rax, %rax
 3675 27b0 743C     		je	.L236
1132:argtable2.c   ****             continue;
1133:argtable2.c   ****                     
1134:argtable2.c   ****         free(table[tabindex]);
 3676              		.loc 1 1134 0
 3677 27b2 8B45F4   		movl	-12(%rbp), %eax
 3678 27b5 4898     		cltq
 3679 27b7 488D14C5 		leaq	0(,%rax,8), %rdx
 3679      00000000 
 3680 27bf 488B45F8 		movq	-8(%rbp), %rax
 3681 27c3 4801D0   		addq	%rdx, %rax
 3682 27c6 488B00   		movq	(%rax), %rax
 3683 27c9 4889C7   		movq	%rax, %rdi
 3684 27cc E8000000 		call	free@PLT
 3684      00
1135:argtable2.c   ****         table[tabindex]=NULL;        
 3685              		.loc 1 1135 0
 3686 27d1 8B45F4   		movl	-12(%rbp), %eax
 3687 27d4 4898     		cltq
 3688 27d6 488D14C5 		leaq	0(,%rax,8), %rdx
 3688      00000000 
 3689 27de 488B45F8 		movq	-8(%rbp), %rax
 3690 27e2 4801D0   		addq	%rdx, %rax
 3691 27e5 48C70000 		movq	$0, (%rax)
 3691      000000
 3692 27ec EB01     		jmp	.L234
 3693              	.L236:
1132:argtable2.c   ****             continue;
 3694              		.loc 1 1132 0
 3695 27ee 90       		nop
 3696              	.L234:
1129:argtable2.c   ****         {
 3697              		.loc 1 1129 0 discriminator 2
 3698 27ef 8345F401 		addl	$1, -12(%rbp)
 3699              	.L232:
1129:argtable2.c   ****         {
 3700              		.loc 1 1129 0 is_stmt 0 discriminator 1
 3701 27f3 8B45F4   		movl	-12(%rbp), %eax
 3702 27f6 4898     		cltq
 3703 27f8 483B45E0 		cmpq	-32(%rbp), %rax
 3704 27fc 7298     		jb	.L235
1136:argtable2.c   ****         };
1137:argtable2.c   ****     }
 3705              		.loc 1 1137 0 is_stmt 1
 3706 27fe 90       		nop
 3707 27ff C9       		leave
 3708              		.cfi_def_cfa 7, 8
 3709 2800 C3       		ret
 3710              		.cfi_endproc
 3711              	.LFE23:
 3713              	.Letext0:
 3714              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 3715              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 3716              		.file 4 "./getopt.h"
 3717              		.file 5 "/usr/include/stdio.h"
 3718              		.file 6 "/usr/include/libio.h"
 3719              		.file 7 "/usr/include/ctype.h"
 3720              		.file 8 "argtable2.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 argtable2.c
     /tmp/cczs6tas.s:5      .text:0000000000000000 arg_register_error
     /tmp/cczs6tas.s:106    .text:00000000000000fe find_shortoption
     /tmp/cczs6tas.s:191    .text:000000000000019a dump_longoptions
     /tmp/cczs6tas.s:289    .text:00000000000002b5 alloc_longoptions
     /tmp/cczs6tas.s:616    .text:0000000000000623 alloc_shortoptions
     /tmp/cczs6tas.s:791    .text:00000000000007c6 arg_endindex
     /tmp/cczs6tas.s:831    .text:0000000000000804 arg_parse_tagged
     /tmp/cczs6tas.s:1149   .text:0000000000000b9b arg_parse_untagged
     /tmp/cczs6tas.s:1353   .text:0000000000000dc8 arg_parse_check
     /tmp/cczs6tas.s:1435   .text:0000000000000e94 arg_reset
     /tmp/cczs6tas.s:1504   .text:0000000000000f3c arg_parse
     /tmp/cczs6tas.s:1641   .text:0000000000001098 arg_cat
     /tmp/cczs6tas.s:1739   .text:0000000000001142 arg_cat_option
     /tmp/cczs6tas.s:1952   .text:000000000000139b arg_cat_optionv
     /tmp/cczs6tas.s:2183   .text:00000000000015e2 arg_print_option
     /tmp/cczs6tas.s:2272   .text:00000000000016ed arg_print_gnuswitch
     /tmp/cczs6tas.s:2511   .text:0000000000001958 arg_print_syntax
     /tmp/cczs6tas.s:2763   .text:0000000000001cce arg_print_syntaxv
     /tmp/cczs6tas.s:2986   .text:0000000000001fd2 arg_print_glossary
     /tmp/cczs6tas.s:3143   .text:0000000000002208 arg_print_formatted
     /tmp/cczs6tas.s:3324   .text:0000000000002393 arg_print_glossary_gnu
     /tmp/cczs6tas.s:3509   .text:000000000000264a arg_nullcheck
     /tmp/cczs6tas.s:3571   .text:00000000000026c3 arg_free
     /tmp/cczs6tas.s:3646   .text:000000000000276e arg_freetable

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
strchr
printf
strlen
malloc
free
optind
opterr
optarg
optopt
getopt_long
strcspn
strncat
__stack_chk_fail
fputs
fprintf
__ctype_b_loc
fputc
memset
