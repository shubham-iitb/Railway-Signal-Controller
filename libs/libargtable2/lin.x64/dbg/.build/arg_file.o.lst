   1              		.file	"arg_file.c"
   2              		.text
   3              	.Ltext0:
   5              	resetfn:
   6              	.LFB0:
   7              		.file 1 "arg_file.c"
   1:arg_file.c    **** /*********************************************************************
   2:arg_file.c    **** This file is part of the argtable2 library.
   3:arg_file.c    **** Copyright (C) 1998-2001,2003-2011 Stewart Heitmann
   4:arg_file.c    **** sheitmann@users.sourceforge.net
   5:arg_file.c    **** 
   6:arg_file.c    **** The argtable2 library is free software; you can redistribute it and/or
   7:arg_file.c    **** modify it under the terms of the GNU Library General Public License as
   8:arg_file.c    **** published by the Free Software Foundation; either version 2 of the
   9:arg_file.c    **** License, or (at your option) any later version.
  10:arg_file.c    **** 
  11:arg_file.c    **** This software is distributed in the hope that it will be useful,
  12:arg_file.c    **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:arg_file.c    **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  14:arg_file.c    **** Library General Public License for more details.
  15:arg_file.c    **** 
  16:arg_file.c    **** You should have received a copy of the GNU Library General Public
  17:arg_file.c    **** License along with this library; if not, write to the Free Software
  18:arg_file.c    **** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:arg_file.c    **** USA.
  20:arg_file.c    **** **********************************************************************/
  21:arg_file.c    **** 
  22:arg_file.c    **** /* config.h must be included before anything else */
  23:arg_file.c    **** #ifdef HAVE_CONFIG_H
  24:arg_file.c    **** #include "config.h"
  25:arg_file.c    **** #endif
  26:arg_file.c    **** 
  27:arg_file.c    **** #ifdef HAVE_STRING_H
  28:arg_file.c    **** #include <string.h>
  29:arg_file.c    **** #endif
  30:arg_file.c    **** 
  31:arg_file.c    **** #ifdef HAVE_STDLIB_H
  32:arg_file.c    **** #include <stdlib.h>
  33:arg_file.c    **** #endif
  34:arg_file.c    **** 
  35:arg_file.c    **** #include "argtable2.h"
  36:arg_file.c    **** 
  37:arg_file.c    **** #ifdef WIN32
  38:arg_file.c    **** # define FILESEPARATOR1 '\\'
  39:arg_file.c    **** # define FILESEPARATOR2 '/'
  40:arg_file.c    **** #else
  41:arg_file.c    **** # define FILESEPARATOR1 '/'
  42:arg_file.c    **** # define FILESEPARATOR2 '/'
  43:arg_file.c    **** #endif
  44:arg_file.c    **** 
  45:arg_file.c    **** /* local error codes */
  46:arg_file.c    **** enum {EMINCOUNT=1,EMAXCOUNT};
  47:arg_file.c    **** 
  48:arg_file.c    **** 
  49:arg_file.c    **** static void resetfn(struct arg_file *parent)
  50:arg_file.c    ****     {
   8              		.loc 1 50 0
   9              		.cfi_startproc
  10 0000 55       		pushq	%rbp
  11              		.cfi_def_cfa_offset 16
  12              		.cfi_offset 6, -16
  13 0001 4889E5   		movq	%rsp, %rbp
  14              		.cfi_def_cfa_register 6
  15 0004 48897DF8 		movq	%rdi, -8(%rbp)
  51:arg_file.c    ****     /*printf("%s:resetfn(%p)\n",__FILE__,parent);*/
  52:arg_file.c    ****     parent->count=0;
  16              		.loc 1 52 0
  17 0008 488B45F8 		movq	-8(%rbp), %rax
  18 000c C7406000 		movl	$0, 96(%rax)
  18      000000
  53:arg_file.c    ****     }
  19              		.loc 1 53 0
  20 0013 90       		nop
  21 0014 5D       		popq	%rbp
  22              		.cfi_def_cfa 7, 8
  23 0015 C3       		ret
  24              		.cfi_endproc
  25              	.LFE0:
  27              		.section	.rodata
  28              	.LC0:
  29 0000 2E00     		.string	"."
  30              	.LC1:
  31 0002 2E2E00   		.string	".."
  32              		.text
  34              	arg_basename:
  35              	.LFB1:
  54:arg_file.c    **** 
  55:arg_file.c    **** 
  56:arg_file.c    **** /* Returns ptr to the base filename within *filename */
  57:arg_file.c    **** static const char* arg_basename(const char *filename)
  58:arg_file.c    ****     {
  36              		.loc 1 58 0
  37              		.cfi_startproc
  38 0016 55       		pushq	%rbp
  39              		.cfi_def_cfa_offset 16
  40              		.cfi_offset 6, -16
  41 0017 4889E5   		movq	%rsp, %rbp
  42              		.cfi_def_cfa_register 6
  43 001a 4883EC30 		subq	$48, %rsp
  44 001e 48897DD8 		movq	%rdi, -40(%rbp)
  59:arg_file.c    ****     const char *result=NULL, *result1, *result2;
  45              		.loc 1 59 0
  46 0022 48C745E8 		movq	$0, -24(%rbp)
  46      00000000 
  60:arg_file.c    **** 
  61:arg_file.c    ****     /* Find the last occurrence of eother file separator character. */
  62:arg_file.c    ****     /* Two alternative file separator chars are supported as legal  */
  63:arg_file.c    ****     /* file separators but not both together in the same filename.  */
  64:arg_file.c    ****     result1 = (filename ? strrchr(filename,FILESEPARATOR1) : NULL);
  47              		.loc 1 64 0
  48 002a 48837DD8 		cmpq	$0, -40(%rbp)
  48      00
  49 002f 7413     		je	.L3
  50              		.loc 1 64 0 is_stmt 0 discriminator 1
  51 0031 488B45D8 		movq	-40(%rbp), %rax
  52 0035 BE2F0000 		movl	$47, %esi
  52      00
  53 003a 4889C7   		movq	%rax, %rdi
  54 003d E8000000 		call	strrchr@PLT
  54      00
  55 0042 EB05     		jmp	.L4
  56              	.L3:
  57              		.loc 1 64 0 discriminator 2
  58 0044 B8000000 		movl	$0, %eax
  58      00
  59              	.L4:
  60              		.loc 1 64 0 discriminator 4
  61 0049 488945F0 		movq	%rax, -16(%rbp)
  65:arg_file.c    ****     result2 = (filename ? strrchr(filename,FILESEPARATOR2) : NULL);
  62              		.loc 1 65 0 is_stmt 1 discriminator 4
  63 004d 48837DD8 		cmpq	$0, -40(%rbp)
  63      00
  64 0052 7413     		je	.L5
  65              		.loc 1 65 0 is_stmt 0 discriminator 1
  66 0054 488B45D8 		movq	-40(%rbp), %rax
  67 0058 BE2F0000 		movl	$47, %esi
  67      00
  68 005d 4889C7   		movq	%rax, %rdi
  69 0060 E8000000 		call	strrchr@PLT
  69      00
  70 0065 EB05     		jmp	.L6
  71              	.L5:
  72              		.loc 1 65 0 discriminator 2
  73 0067 B8000000 		movl	$0, %eax
  73      00
  74              	.L6:
  75              		.loc 1 65 0 discriminator 4
  76 006c 488945F8 		movq	%rax, -8(%rbp)
  66:arg_file.c    **** 
  67:arg_file.c    ****     if (result2)
  77              		.loc 1 67 0 is_stmt 1 discriminator 4
  78 0070 48837DF8 		cmpq	$0, -8(%rbp)
  78      00
  79 0075 740C     		je	.L7
  68:arg_file.c    ****         result=result2+1;   /* using FILESEPARATOR2 (the alternative file separator) */
  80              		.loc 1 68 0
  81 0077 488B45F8 		movq	-8(%rbp), %rax
  82 007b 4883C001 		addq	$1, %rax
  83 007f 488945E8 		movq	%rax, -24(%rbp)
  84              	.L7:
  69:arg_file.c    **** 
  70:arg_file.c    ****     if (result1)
  85              		.loc 1 70 0
  86 0083 48837DF0 		cmpq	$0, -16(%rbp)
  86      00
  87 0088 740C     		je	.L8
  71:arg_file.c    ****         result=result1+1;   /* using FILESEPARATOR1 (the preferred file separator) */
  88              		.loc 1 71 0
  89 008a 488B45F0 		movq	-16(%rbp), %rax
  90 008e 4883C001 		addq	$1, %rax
  91 0092 488945E8 		movq	%rax, -24(%rbp)
  92              	.L8:
  72:arg_file.c    **** 
  73:arg_file.c    ****     if (!result)
  93              		.loc 1 73 0
  94 0096 48837DE8 		cmpq	$0, -24(%rbp)
  94      00
  95 009b 7508     		jne	.L9
  74:arg_file.c    ****         result = filename;  /* neither file separator was found so basename is the whole filename *
  96              		.loc 1 74 0
  97 009d 488B45D8 		movq	-40(%rbp), %rax
  98 00a1 488945E8 		movq	%rax, -24(%rbp)
  99              	.L9:
  75:arg_file.c    **** 
  76:arg_file.c    ****     /* special cases of "." and ".." are not considered basenames */
  77:arg_file.c    ****     if (result && ( strcmp(".",result)==0 || strcmp("..",result)==0 ))
 100              		.loc 1 77 0
 101 00a5 48837DE8 		cmpq	$0, -24(%rbp)
 101      00
 102 00aa 7448     		je	.L10
 103              		.loc 1 77 0 is_stmt 0 discriminator 1
 104 00ac 488B45E8 		movq	-24(%rbp), %rax
 105 00b0 4889C6   		movq	%rax, %rsi
 106 00b3 488D3D00 		leaq	.LC0(%rip), %rdi
 106      000000
 107 00ba E8000000 		call	strcmp@PLT
 107      00
 108 00bf 85C0     		testl	%eax, %eax
 109 00c1 7417     		je	.L11
 110              		.loc 1 77 0 discriminator 2
 111 00c3 488B45E8 		movq	-24(%rbp), %rax
 112 00c7 4889C6   		movq	%rax, %rsi
 113 00ca 488D3D00 		leaq	.LC1(%rip), %rdi
 113      000000
 114 00d1 E8000000 		call	strcmp@PLT
 114      00
 115 00d6 85C0     		testl	%eax, %eax
 116 00d8 751A     		jne	.L10
 117              	.L11:
  78:arg_file.c    ****        result = filename + strlen(filename);
 118              		.loc 1 78 0 is_stmt 1
 119 00da 488B45D8 		movq	-40(%rbp), %rax
 120 00de 4889C7   		movq	%rax, %rdi
 121 00e1 E8000000 		call	strlen@PLT
 121      00
 122 00e6 4889C2   		movq	%rax, %rdx
 123 00e9 488B45D8 		movq	-40(%rbp), %rax
 124 00ed 4801D0   		addq	%rdx, %rax
 125 00f0 488945E8 		movq	%rax, -24(%rbp)
 126              	.L10:
  79:arg_file.c    **** 
  80:arg_file.c    ****     return result;
 127              		.loc 1 80 0
 128 00f4 488B45E8 		movq	-24(%rbp), %rax
  81:arg_file.c    ****     }
 129              		.loc 1 81 0
 130 00f8 C9       		leave
 131              		.cfi_def_cfa 7, 8
 132 00f9 C3       		ret
 133              		.cfi_endproc
 134              	.LFE1:
 137              	arg_extension:
 138              	.LFB2:
  82:arg_file.c    **** 
  83:arg_file.c    **** 
  84:arg_file.c    **** /* Returns ptr to the file extension within *basename */
  85:arg_file.c    **** static const char* arg_extension(const char *basename)
  86:arg_file.c    ****     {
 139              		.loc 1 86 0
 140              		.cfi_startproc
 141 00fa 55       		pushq	%rbp
 142              		.cfi_def_cfa_offset 16
 143              		.cfi_offset 6, -16
 144 00fb 4889E5   		movq	%rsp, %rbp
 145              		.cfi_def_cfa_register 6
 146 00fe 4883EC20 		subq	$32, %rsp
 147 0102 48897DE8 		movq	%rdi, -24(%rbp)
  87:arg_file.c    ****     /* find the last occurrence of '.' in basename */
  88:arg_file.c    ****     const char *result = (basename ? strrchr(basename,'.') : NULL);
 148              		.loc 1 88 0
 149 0106 48837DE8 		cmpq	$0, -24(%rbp)
 149      00
 150 010b 7413     		je	.L14
 151              		.loc 1 88 0 is_stmt 0 discriminator 1
 152 010d 488B45E8 		movq	-24(%rbp), %rax
 153 0111 BE2E0000 		movl	$46, %esi
 153      00
 154 0116 4889C7   		movq	%rax, %rdi
 155 0119 E8000000 		call	strrchr@PLT
 155      00
 156 011e EB05     		jmp	.L15
 157              	.L14:
 158              		.loc 1 88 0 discriminator 2
 159 0120 B8000000 		movl	$0, %eax
 159      00
 160              	.L15:
 161              		.loc 1 88 0 discriminator 4
 162 0125 488945F8 		movq	%rax, -8(%rbp)
  89:arg_file.c    **** 
  90:arg_file.c    ****     /* if no '.' was found then return pointer to end of basename */
  91:arg_file.c    ****     if (basename && !result)
 163              		.loc 1 91 0 is_stmt 1 discriminator 4
 164 0129 48837DE8 		cmpq	$0, -24(%rbp)
 164      00
 165 012e 7421     		je	.L16
 166              		.loc 1 91 0 is_stmt 0 discriminator 1
 167 0130 48837DF8 		cmpq	$0, -8(%rbp)
 167      00
 168 0135 751A     		jne	.L16
  92:arg_file.c    ****         result = basename+strlen(basename);
 169              		.loc 1 92 0 is_stmt 1
 170 0137 488B45E8 		movq	-24(%rbp), %rax
 171 013b 4889C7   		movq	%rax, %rdi
 172 013e E8000000 		call	strlen@PLT
 172      00
 173 0143 4889C2   		movq	%rax, %rdx
 174 0146 488B45E8 		movq	-24(%rbp), %rax
 175 014a 4801D0   		addq	%rdx, %rax
 176 014d 488945F8 		movq	%rax, -8(%rbp)
 177              	.L16:
  93:arg_file.c    **** 
  94:arg_file.c    ****     /* special case: basenames with a single leading dot (eg ".foo") are not considered as true ext
  95:arg_file.c    ****     if (basename && result==basename)
 178              		.loc 1 95 0
 179 0151 48837DE8 		cmpq	$0, -24(%rbp)
 179      00
 180 0156 7424     		je	.L17
 181              		.loc 1 95 0 is_stmt 0 discriminator 1
 182 0158 488B45F8 		movq	-8(%rbp), %rax
 183 015c 483B45E8 		cmpq	-24(%rbp), %rax
 184 0160 751A     		jne	.L17
  96:arg_file.c    ****         result = basename+strlen(basename);
 185              		.loc 1 96 0 is_stmt 1
 186 0162 488B45E8 		movq	-24(%rbp), %rax
 187 0166 4889C7   		movq	%rax, %rdi
 188 0169 E8000000 		call	strlen@PLT
 188      00
 189 016e 4889C2   		movq	%rax, %rdx
 190 0171 488B45E8 		movq	-24(%rbp), %rax
 191 0175 4801D0   		addq	%rdx, %rax
 192 0178 488945F8 		movq	%rax, -8(%rbp)
 193              	.L17:
  97:arg_file.c    **** 
  98:arg_file.c    ****     /* special case: empty extensions (eg "foo.","foo..") are not considered as true extensions */
  99:arg_file.c    ****     if (basename && result && result[1]=='\0')
 194              		.loc 1 99 0
 195 017c 48837DE8 		cmpq	$0, -24(%rbp)
 195      00
 196 0181 7430     		je	.L18
 197              		.loc 1 99 0 is_stmt 0 discriminator 1
 198 0183 48837DF8 		cmpq	$0, -8(%rbp)
 198      00
 199 0188 7429     		je	.L18
 200              		.loc 1 99 0 discriminator 2
 201 018a 488B45F8 		movq	-8(%rbp), %rax
 202 018e 4883C001 		addq	$1, %rax
 203 0192 0FB600   		movzbl	(%rax), %eax
 204 0195 84C0     		testb	%al, %al
 205 0197 751A     		jne	.L18
 100:arg_file.c    ****         result = basename+strlen(basename);
 206              		.loc 1 100 0 is_stmt 1
 207 0199 488B45E8 		movq	-24(%rbp), %rax
 208 019d 4889C7   		movq	%rax, %rdi
 209 01a0 E8000000 		call	strlen@PLT
 209      00
 210 01a5 4889C2   		movq	%rax, %rdx
 211 01a8 488B45E8 		movq	-24(%rbp), %rax
 212 01ac 4801D0   		addq	%rdx, %rax
 213 01af 488945F8 		movq	%rax, -8(%rbp)
 214              	.L18:
 101:arg_file.c    **** 
 102:arg_file.c    ****     return result;
 215              		.loc 1 102 0
 216 01b3 488B45F8 		movq	-8(%rbp), %rax
 103:arg_file.c    ****     }
 217              		.loc 1 103 0
 218 01b7 C9       		leave
 219              		.cfi_def_cfa 7, 8
 220 01b8 C3       		ret
 221              		.cfi_endproc
 222              	.LFE2:
 225              	scanfn:
 226              	.LFB3:
 104:arg_file.c    **** 
 105:arg_file.c    **** 
 106:arg_file.c    **** static int scanfn(struct arg_file *parent, const char *argval)
 107:arg_file.c    ****     {
 227              		.loc 1 107 0
 228              		.cfi_startproc
 229 01b9 55       		pushq	%rbp
 230              		.cfi_def_cfa_offset 16
 231              		.cfi_offset 6, -16
 232 01ba 4889E5   		movq	%rsp, %rbp
 233              		.cfi_def_cfa_register 6
 234 01bd 53       		pushq	%rbx
 235 01be 4883EC28 		subq	$40, %rsp
 236              		.cfi_offset 3, -24
 237 01c2 48897DD8 		movq	%rdi, -40(%rbp)
 238 01c6 488975D0 		movq	%rsi, -48(%rbp)
 108:arg_file.c    ****     int errorcode = 0;
 239              		.loc 1 108 0
 240 01ca C745EC00 		movl	$0, -20(%rbp)
 240      000000
 109:arg_file.c    **** 
 110:arg_file.c    ****     if (parent->count == parent->hdr.maxcount)
 241              		.loc 1 110 0
 242 01d1 488B45D8 		movq	-40(%rbp), %rax
 243 01d5 8B5060   		movl	96(%rax), %edx
 244 01d8 488B45D8 		movq	-40(%rbp), %rax
 245 01dc 8B402C   		movl	44(%rax), %eax
 246 01df 39C2     		cmpl	%eax, %edx
 247 01e1 750C     		jne	.L21
 111:arg_file.c    ****         {
 112:arg_file.c    ****         /* maximum number of arguments exceeded */
 113:arg_file.c    ****         errorcode = EMAXCOUNT;
 248              		.loc 1 113 0
 249 01e3 C745EC02 		movl	$2, -20(%rbp)
 249      000000
 250 01ea E9B40000 		jmp	.L22
 250      00
 251              	.L21:
 114:arg_file.c    ****         }
 115:arg_file.c    ****     else if (!argval)
 252              		.loc 1 115 0
 253 01ef 48837DD0 		cmpq	$0, -48(%rbp)
 253      00
 254 01f4 7516     		jne	.L23
 116:arg_file.c    ****         {
 117:arg_file.c    ****         /* a valid argument with no argument value was given. */
 118:arg_file.c    ****         /* This happens when an optional argument value was invoked. */
 119:arg_file.c    ****         /* leave parent arguiment value unaltered but still count the argument. */
 120:arg_file.c    ****         parent->count++;
 255              		.loc 1 120 0
 256 01f6 488B45D8 		movq	-40(%rbp), %rax
 257 01fa 8B4060   		movl	96(%rax), %eax
 258 01fd 8D5001   		leal	1(%rax), %edx
 259 0200 488B45D8 		movq	-40(%rbp), %rax
 260 0204 895060   		movl	%edx, 96(%rax)
 261 0207 E9970000 		jmp	.L22
 261      00
 262              	.L23:
 121:arg_file.c    ****         } 
 122:arg_file.c    ****     else
 123:arg_file.c    ****         {
 124:arg_file.c    ****         parent->filename[parent->count]  = argval;
 263              		.loc 1 124 0
 264 020c 488B45D8 		movq	-40(%rbp), %rax
 265 0210 488B5068 		movq	104(%rax), %rdx
 266 0214 488B45D8 		movq	-40(%rbp), %rax
 267 0218 8B4060   		movl	96(%rax), %eax
 268 021b 4898     		cltq
 269 021d 48C1E003 		salq	$3, %rax
 270 0221 4801C2   		addq	%rax, %rdx
 271 0224 488B45D0 		movq	-48(%rbp), %rax
 272 0228 488902   		movq	%rax, (%rdx)
 125:arg_file.c    ****         parent->basename[parent->count]  = arg_basename(argval);
 273              		.loc 1 125 0
 274 022b 488B45D8 		movq	-40(%rbp), %rax
 275 022f 488B5070 		movq	112(%rax), %rdx
 276 0233 488B45D8 		movq	-40(%rbp), %rax
 277 0237 8B4060   		movl	96(%rax), %eax
 278 023a 4898     		cltq
 279 023c 48C1E003 		salq	$3, %rax
 280 0240 488D1C02 		leaq	(%rdx,%rax), %rbx
 281 0244 488B45D0 		movq	-48(%rbp), %rax
 282 0248 4889C7   		movq	%rax, %rdi
 283 024b E8C6FDFF 		call	arg_basename
 283      FF
 284 0250 488903   		movq	%rax, (%rbx)
 126:arg_file.c    ****         parent->extension[parent->count] = arg_extension(parent->basename[parent->count]); /* only 
 285              		.loc 1 126 0
 286 0253 488B45D8 		movq	-40(%rbp), %rax
 287 0257 488B5078 		movq	120(%rax), %rdx
 288 025b 488B45D8 		movq	-40(%rbp), %rax
 289 025f 8B4060   		movl	96(%rax), %eax
 290 0262 4898     		cltq
 291 0264 48C1E003 		salq	$3, %rax
 292 0268 488D1C02 		leaq	(%rdx,%rax), %rbx
 293 026c 488B45D8 		movq	-40(%rbp), %rax
 294 0270 488B5070 		movq	112(%rax), %rdx
 295 0274 488B45D8 		movq	-40(%rbp), %rax
 296 0278 8B4060   		movl	96(%rax), %eax
 297 027b 4898     		cltq
 298 027d 48C1E003 		salq	$3, %rax
 299 0281 4801D0   		addq	%rdx, %rax
 300 0284 488B00   		movq	(%rax), %rax
 301 0287 4889C7   		movq	%rax, %rdi
 302 028a E86BFEFF 		call	arg_extension
 302      FF
 303 028f 488903   		movq	%rax, (%rbx)
 127:arg_file.c    ****         parent->count++;
 304              		.loc 1 127 0
 305 0292 488B45D8 		movq	-40(%rbp), %rax
 306 0296 8B4060   		movl	96(%rax), %eax
 307 0299 8D5001   		leal	1(%rax), %edx
 308 029c 488B45D8 		movq	-40(%rbp), %rax
 309 02a0 895060   		movl	%edx, 96(%rax)
 310              	.L22:
 128:arg_file.c    ****         }
 129:arg_file.c    **** 
 130:arg_file.c    ****     /*printf("%s:scanfn(%p) returns %d\n",__FILE__,parent,errorcode);*/
 131:arg_file.c    ****     return errorcode;
 311              		.loc 1 131 0
 312 02a3 8B45EC   		movl	-20(%rbp), %eax
 132:arg_file.c    ****     }
 313              		.loc 1 132 0
 314 02a6 4883C428 		addq	$40, %rsp
 315 02aa 5B       		popq	%rbx
 316 02ab 5D       		popq	%rbp
 317              		.cfi_def_cfa 7, 8
 318 02ac C3       		ret
 319              		.cfi_endproc
 320              	.LFE3:
 323              	checkfn:
 324              	.LFB4:
 133:arg_file.c    **** 
 134:arg_file.c    **** 
 135:arg_file.c    **** static int checkfn(struct arg_file *parent)
 136:arg_file.c    ****     {
 325              		.loc 1 136 0
 326              		.cfi_startproc
 327 02ad 55       		pushq	%rbp
 328              		.cfi_def_cfa_offset 16
 329              		.cfi_offset 6, -16
 330 02ae 4889E5   		movq	%rsp, %rbp
 331              		.cfi_def_cfa_register 6
 332 02b1 48897DE8 		movq	%rdi, -24(%rbp)
 137:arg_file.c    ****     int errorcode = (parent->count < parent->hdr.mincount) ? EMINCOUNT : 0;
 333              		.loc 1 137 0
 334 02b5 488B45E8 		movq	-24(%rbp), %rax
 335 02b9 8B5060   		movl	96(%rax), %edx
 336 02bc 488B45E8 		movq	-24(%rbp), %rax
 337 02c0 8B4028   		movl	40(%rax), %eax
 338 02c3 39C2     		cmpl	%eax, %edx
 339 02c5 0F9CC0   		setl	%al
 340 02c8 0FB6C0   		movzbl	%al, %eax
 341 02cb 8945FC   		movl	%eax, -4(%rbp)
 138:arg_file.c    ****     /*printf("%s:checkfn(%p) returns %d\n",__FILE__,parent,errorcode);*/
 139:arg_file.c    ****     return errorcode;
 342              		.loc 1 139 0
 343 02ce 8B45FC   		movl	-4(%rbp), %eax
 140:arg_file.c    ****     }
 344              		.loc 1 140 0
 345 02d1 5D       		popq	%rbp
 346              		.cfi_def_cfa 7, 8
 347 02d2 C3       		ret
 348              		.cfi_endproc
 349              	.LFE4:
 351              		.section	.rodata
 352              	.LC2:
 353 0005 00       		.string	""
 354              	.LC3:
 355 0006 25733A20 		.string	"%s: "
 355      00
 356              	.LC4:
 357 000b 6D697373 		.string	"missing option "
 357      696E6720 
 357      6F707469 
 357      6F6E2000 
 358              	.LC5:
 359 001b 0A00     		.string	"\n"
 360              	.LC6:
 361 001d 65786365 		.string	"excess option "
 361      7373206F 
 361      7074696F 
 361      6E2000
 362              	.LC7:
 363 002c 756E6B6E 		.string	"unknown error at \"%s\"\n"
 363      6F776E20 
 363      6572726F 
 363      72206174 
 363      20222573 
 364              		.text
 366              	errorfn:
 367              	.LFB5:
 141:arg_file.c    **** 
 142:arg_file.c    **** 
 143:arg_file.c    **** static void errorfn(struct arg_file *parent, FILE *fp, int errorcode, const char *argval, const cha
 144:arg_file.c    ****     {
 368              		.loc 1 144 0
 369              		.cfi_startproc
 370 02d3 55       		pushq	%rbp
 371              		.cfi_def_cfa_offset 16
 372              		.cfi_offset 6, -16
 373 02d4 4889E5   		movq	%rsp, %rbp
 374              		.cfi_def_cfa_register 6
 375 02d7 4883EC50 		subq	$80, %rsp
 376 02db 48897DD8 		movq	%rdi, -40(%rbp)
 377 02df 488975D0 		movq	%rsi, -48(%rbp)
 378 02e3 8955CC   		movl	%edx, -52(%rbp)
 379 02e6 48894DC0 		movq	%rcx, -64(%rbp)
 380 02ea 4C8945B8 		movq	%r8, -72(%rbp)
 145:arg_file.c    ****     const char *shortopts = parent->hdr.shortopts;
 381              		.loc 1 145 0
 382 02ee 488B45D8 		movq	-40(%rbp), %rax
 383 02f2 488B4008 		movq	8(%rax), %rax
 384 02f6 488945E8 		movq	%rax, -24(%rbp)
 146:arg_file.c    ****     const char *longopts  = parent->hdr.longopts;
 385              		.loc 1 146 0
 386 02fa 488B45D8 		movq	-40(%rbp), %rax
 387 02fe 488B4010 		movq	16(%rax), %rax
 388 0302 488945F0 		movq	%rax, -16(%rbp)
 147:arg_file.c    ****     const char *datatype  = parent->hdr.datatype;
 389              		.loc 1 147 0
 390 0306 488B45D8 		movq	-40(%rbp), %rax
 391 030a 488B4018 		movq	24(%rax), %rax
 392 030e 488945F8 		movq	%rax, -8(%rbp)
 148:arg_file.c    **** 
 149:arg_file.c    ****     /* make argval NULL safe */
 150:arg_file.c    ****     argval = argval ? argval : "";
 393              		.loc 1 150 0
 394 0312 48837DC0 		cmpq	$0, -64(%rbp)
 394      00
 395 0317 7406     		je	.L28
 396              		.loc 1 150 0 is_stmt 0 discriminator 1
 397 0319 488B45C0 		movq	-64(%rbp), %rax
 398 031d EB07     		jmp	.L29
 399              	.L28:
 400              		.loc 1 150 0 discriminator 2
 401 031f 488D0500 		leaq	.LC2(%rip), %rax
 401      000000
 402              	.L29:
 403              		.loc 1 150 0 discriminator 4
 404 0326 488945C0 		movq	%rax, -64(%rbp)
 151:arg_file.c    **** 
 152:arg_file.c    ****     fprintf(fp,"%s: ",progname);
 405              		.loc 1 152 0 is_stmt 1 discriminator 4
 406 032a 488B55B8 		movq	-72(%rbp), %rdx
 407 032e 488B45D0 		movq	-48(%rbp), %rax
 408 0332 488D3500 		leaq	.LC3(%rip), %rsi
 408      000000
 409 0339 4889C7   		movq	%rax, %rdi
 410 033c B8000000 		movl	$0, %eax
 410      00
 411 0341 E8000000 		call	fprintf@PLT
 411      00
 153:arg_file.c    ****     switch(errorcode)
 412              		.loc 1 153 0 discriminator 4
 413 0346 8B45CC   		movl	-52(%rbp), %eax
 414 0349 83F801   		cmpl	$1, %eax
 415 034c 7407     		je	.L31
 416 034e 83F802   		cmpl	$2, %eax
 417 0351 7440     		je	.L32
 418              		.loc 1 153 0 is_stmt 0
 419 0353 EB7C     		jmp	.L34
 420              	.L31:
 154:arg_file.c    ****         {
 155:arg_file.c    ****         case EMINCOUNT:
 156:arg_file.c    ****             fputs("missing option ",fp);
 421              		.loc 1 156 0 is_stmt 1
 422 0355 488B45D0 		movq	-48(%rbp), %rax
 423 0359 4889C1   		movq	%rax, %rcx
 424 035c BA0F0000 		movl	$15, %edx
 424      00
 425 0361 BE010000 		movl	$1, %esi
 425      00
 426 0366 488D3D00 		leaq	.LC4(%rip), %rdi
 426      000000
 427 036d E8000000 		call	fwrite@PLT
 427      00
 157:arg_file.c    ****             arg_print_option(fp,shortopts,longopts,datatype,"\n");
 428              		.loc 1 157 0
 429 0372 488B4DF8 		movq	-8(%rbp), %rcx
 430 0376 488B55F0 		movq	-16(%rbp), %rdx
 431 037a 488B75E8 		movq	-24(%rbp), %rsi
 432 037e 488B45D0 		movq	-48(%rbp), %rax
 433 0382 4C8D0500 		leaq	.LC5(%rip), %r8
 433      000000
 434 0389 4889C7   		movq	%rax, %rdi
 435 038c E8000000 		call	arg_print_option@PLT
 435      00
 158:arg_file.c    ****             break;
 436              		.loc 1 158 0
 437 0391 EB5A     		jmp	.L33
 438              	.L32:
 159:arg_file.c    **** 
 160:arg_file.c    ****         case EMAXCOUNT:
 161:arg_file.c    ****             fputs("excess option ",fp);
 439              		.loc 1 161 0
 440 0393 488B45D0 		movq	-48(%rbp), %rax
 441 0397 4889C1   		movq	%rax, %rcx
 442 039a BA0E0000 		movl	$14, %edx
 442      00
 443 039f BE010000 		movl	$1, %esi
 443      00
 444 03a4 488D3D00 		leaq	.LC6(%rip), %rdi
 444      000000
 445 03ab E8000000 		call	fwrite@PLT
 445      00
 162:arg_file.c    ****             arg_print_option(fp,shortopts,longopts,argval,"\n");
 446              		.loc 1 162 0
 447 03b0 488B4DC0 		movq	-64(%rbp), %rcx
 448 03b4 488B55F0 		movq	-16(%rbp), %rdx
 449 03b8 488B75E8 		movq	-24(%rbp), %rsi
 450 03bc 488B45D0 		movq	-48(%rbp), %rax
 451 03c0 4C8D0500 		leaq	.LC5(%rip), %r8
 451      000000
 452 03c7 4889C7   		movq	%rax, %rdi
 453 03ca E8000000 		call	arg_print_option@PLT
 453      00
 163:arg_file.c    ****             break;
 454              		.loc 1 163 0
 455 03cf EB1C     		jmp	.L33
 456              	.L34:
 164:arg_file.c    **** 
 165:arg_file.c    ****         default:
 166:arg_file.c    ****             fprintf(fp,"unknown error at \"%s\"\n",argval);
 457              		.loc 1 166 0
 458 03d1 488B55C0 		movq	-64(%rbp), %rdx
 459 03d5 488B45D0 		movq	-48(%rbp), %rax
 460 03d9 488D3500 		leaq	.LC7(%rip), %rsi
 460      000000
 461 03e0 4889C7   		movq	%rax, %rdi
 462 03e3 B8000000 		movl	$0, %eax
 462      00
 463 03e8 E8000000 		call	fprintf@PLT
 463      00
 464              	.L33:
 167:arg_file.c    ****         }
 168:arg_file.c    ****     }
 465              		.loc 1 168 0
 466 03ed 90       		nop
 467 03ee C9       		leave
 468              		.cfi_def_cfa 7, 8
 469 03ef C3       		ret
 470              		.cfi_endproc
 471              	.LFE5:
 473              		.globl	arg_file0
 475              	arg_file0:
 476              	.LFB6:
 169:arg_file.c    **** 
 170:arg_file.c    **** 
 171:arg_file.c    **** struct arg_file* arg_file0(const char* shortopts,
 172:arg_file.c    ****                            const char* longopts,
 173:arg_file.c    ****                            const char *datatype,
 174:arg_file.c    ****                            const char *glossary)
 175:arg_file.c    ****     {
 477              		.loc 1 175 0
 478              		.cfi_startproc
 479 03f0 55       		pushq	%rbp
 480              		.cfi_def_cfa_offset 16
 481              		.cfi_offset 6, -16
 482 03f1 4889E5   		movq	%rsp, %rbp
 483              		.cfi_def_cfa_register 6
 484 03f4 4883EC20 		subq	$32, %rsp
 485 03f8 48897DF8 		movq	%rdi, -8(%rbp)
 486 03fc 488975F0 		movq	%rsi, -16(%rbp)
 487 0400 488955E8 		movq	%rdx, -24(%rbp)
 488 0404 48894DE0 		movq	%rcx, -32(%rbp)
 176:arg_file.c    ****     return arg_filen(shortopts,longopts,datatype,0,1,glossary);
 489              		.loc 1 176 0
 490 0408 488B4DE0 		movq	-32(%rbp), %rcx
 491 040c 488B55E8 		movq	-24(%rbp), %rdx
 492 0410 488B75F0 		movq	-16(%rbp), %rsi
 493 0414 488B45F8 		movq	-8(%rbp), %rax
 494 0418 4989C9   		movq	%rcx, %r9
 495 041b 41B80100 		movl	$1, %r8d
 495      0000
 496 0421 B9000000 		movl	$0, %ecx
 496      00
 497 0426 4889C7   		movq	%rax, %rdi
 498 0429 E8000000 		call	arg_filen@PLT
 498      00
 177:arg_file.c    ****     }
 499              		.loc 1 177 0
 500 042e C9       		leave
 501              		.cfi_def_cfa 7, 8
 502 042f C3       		ret
 503              		.cfi_endproc
 504              	.LFE6:
 506              		.globl	arg_file1
 508              	arg_file1:
 509              	.LFB7:
 178:arg_file.c    **** 
 179:arg_file.c    **** 
 180:arg_file.c    **** struct arg_file* arg_file1(const char* shortopts,
 181:arg_file.c    ****                            const char* longopts,
 182:arg_file.c    ****                            const char *datatype,
 183:arg_file.c    ****                            const char *glossary)
 184:arg_file.c    ****     {
 510              		.loc 1 184 0
 511              		.cfi_startproc
 512 0430 55       		pushq	%rbp
 513              		.cfi_def_cfa_offset 16
 514              		.cfi_offset 6, -16
 515 0431 4889E5   		movq	%rsp, %rbp
 516              		.cfi_def_cfa_register 6
 517 0434 4883EC20 		subq	$32, %rsp
 518 0438 48897DF8 		movq	%rdi, -8(%rbp)
 519 043c 488975F0 		movq	%rsi, -16(%rbp)
 520 0440 488955E8 		movq	%rdx, -24(%rbp)
 521 0444 48894DE0 		movq	%rcx, -32(%rbp)
 185:arg_file.c    ****     return arg_filen(shortopts,longopts,datatype,1,1,glossary);
 522              		.loc 1 185 0
 523 0448 488B4DE0 		movq	-32(%rbp), %rcx
 524 044c 488B55E8 		movq	-24(%rbp), %rdx
 525 0450 488B75F0 		movq	-16(%rbp), %rsi
 526 0454 488B45F8 		movq	-8(%rbp), %rax
 527 0458 4989C9   		movq	%rcx, %r9
 528 045b 41B80100 		movl	$1, %r8d
 528      0000
 529 0461 B9010000 		movl	$1, %ecx
 529      00
 530 0466 4889C7   		movq	%rax, %rdi
 531 0469 E8000000 		call	arg_filen@PLT
 531      00
 186:arg_file.c    ****     }
 532              		.loc 1 186 0
 533 046e C9       		leave
 534              		.cfi_def_cfa 7, 8
 535 046f C3       		ret
 536              		.cfi_endproc
 537              	.LFE7:
 539              		.section	.rodata
 540              	.LC8:
 541 0043 3C66696C 		.string	"<file>"
 541      653E00
 542              		.text
 543              		.globl	arg_filen
 545              	arg_filen:
 546              	.LFB8:
 187:arg_file.c    **** 
 188:arg_file.c    **** 
 189:arg_file.c    **** struct arg_file* arg_filen(const char* shortopts,
 190:arg_file.c    ****                            const char* longopts,
 191:arg_file.c    ****                            const char *datatype,
 192:arg_file.c    ****                            int mincount,
 193:arg_file.c    ****                            int maxcount,
 194:arg_file.c    ****                            const char *glossary)
 195:arg_file.c    ****     {
 547              		.loc 1 195 0
 548              		.cfi_startproc
 549 0470 55       		pushq	%rbp
 550              		.cfi_def_cfa_offset 16
 551              		.cfi_offset 6, -16
 552 0471 4889E5   		movq	%rsp, %rbp
 553              		.cfi_def_cfa_register 6
 554 0474 4883EC50 		subq	$80, %rsp
 555 0478 48897DD8 		movq	%rdi, -40(%rbp)
 556 047c 488975D0 		movq	%rsi, -48(%rbp)
 557 0480 488955C8 		movq	%rdx, -56(%rbp)
 558 0484 894DC4   		movl	%ecx, -60(%rbp)
 559 0487 448945C0 		movl	%r8d, -64(%rbp)
 560 048b 4C894DB8 		movq	%r9, -72(%rbp)
 196:arg_file.c    ****     size_t nbytes;
 197:arg_file.c    ****     struct arg_file *result;
 198:arg_file.c    **** 
 199:arg_file.c    **** 	/* foolproof things by ensuring maxcount is not less than mincount */
 200:arg_file.c    **** 	maxcount = (maxcount<mincount) ? mincount : maxcount;
 561              		.loc 1 200 0
 562 048f 8B45C4   		movl	-60(%rbp), %eax
 563 0492 3945C0   		cmpl	%eax, -64(%rbp)
 564 0495 0F4D45C0 		cmovge	-64(%rbp), %eax
 565 0499 8945C0   		movl	%eax, -64(%rbp)
 201:arg_file.c    **** 
 202:arg_file.c    ****     nbytes = sizeof(struct arg_file)     /* storage for struct arg_file */
 203:arg_file.c    ****            + sizeof(char*) * maxcount    /* storage for filename[maxcount] array */
 204:arg_file.c    ****            + sizeof(char*) * maxcount    /* storage for basename[maxcount] array */
 205:arg_file.c    ****            + sizeof(char*) * maxcount;   /* storage for extension[maxcount] array */
 566              		.loc 1 205 0
 567 049c 8B45C0   		movl	-64(%rbp), %eax
 568 049f 4898     		cltq
 569 04a1 4883C008 		addq	$8, %rax
 570 04a5 488D1400 		leaq	(%rax,%rax), %rdx
 571 04a9 8B45C0   		movl	-64(%rbp), %eax
 572 04ac 4898     		cltq
 573 04ae 4801D0   		addq	%rdx, %rax
 202:arg_file.c    ****            + sizeof(char*) * maxcount    /* storage for filename[maxcount] array */
 574              		.loc 1 202 0
 575 04b1 48C1E003 		salq	$3, %rax
 576 04b5 488945F0 		movq	%rax, -16(%rbp)
 206:arg_file.c    **** 
 207:arg_file.c    ****     result = (struct arg_file*)malloc(nbytes);
 577              		.loc 1 207 0
 578 04b9 488B45F0 		movq	-16(%rbp), %rax
 579 04bd 4889C7   		movq	%rax, %rdi
 580 04c0 E8000000 		call	malloc@PLT
 580      00
 581 04c5 488945F8 		movq	%rax, -8(%rbp)
 208:arg_file.c    ****     if (result)
 582              		.loc 1 208 0
 583 04c9 48837DF8 		cmpq	$0, -8(%rbp)
 583      00
 584 04ce 0F846D01 		je	.L40
 584      0000
 585              	.LBB2:
 209:arg_file.c    ****         {
 210:arg_file.c    ****         int i;
 211:arg_file.c    **** 
 212:arg_file.c    ****         /* init the arg_hdr struct */
 213:arg_file.c    ****         result->hdr.flag      = ARG_HASVALUE;
 586              		.loc 1 213 0
 587 04d4 488B45F8 		movq	-8(%rbp), %rax
 588 04d8 C60002   		movb	$2, (%rax)
 214:arg_file.c    ****         result->hdr.shortopts = shortopts;
 589              		.loc 1 214 0
 590 04db 488B45F8 		movq	-8(%rbp), %rax
 591 04df 488B55D8 		movq	-40(%rbp), %rdx
 592 04e3 48895008 		movq	%rdx, 8(%rax)
 215:arg_file.c    ****         result->hdr.longopts  = longopts;
 593              		.loc 1 215 0
 594 04e7 488B45F8 		movq	-8(%rbp), %rax
 595 04eb 488B55D0 		movq	-48(%rbp), %rdx
 596 04ef 48895010 		movq	%rdx, 16(%rax)
 216:arg_file.c    ****         result->hdr.glossary  = glossary;
 597              		.loc 1 216 0
 598 04f3 488B45F8 		movq	-8(%rbp), %rax
 599 04f7 488B55B8 		movq	-72(%rbp), %rdx
 600 04fb 48895020 		movq	%rdx, 32(%rax)
 217:arg_file.c    ****         result->hdr.datatype  = datatype ? datatype : "<file>";
 601              		.loc 1 217 0
 602 04ff 48837DC8 		cmpq	$0, -56(%rbp)
 602      00
 603 0504 7406     		je	.L41
 604              		.loc 1 217 0 is_stmt 0 discriminator 1
 605 0506 488B45C8 		movq	-56(%rbp), %rax
 606 050a EB07     		jmp	.L42
 607              	.L41:
 608              		.loc 1 217 0 discriminator 2
 609 050c 488D0500 		leaq	.LC8(%rip), %rax
 609      000000
 610              	.L42:
 611              		.loc 1 217 0 discriminator 4
 612 0513 488B55F8 		movq	-8(%rbp), %rdx
 613 0517 48894218 		movq	%rax, 24(%rdx)
 218:arg_file.c    ****         result->hdr.mincount  = mincount;
 614              		.loc 1 218 0 is_stmt 1 discriminator 4
 615 051b 488B45F8 		movq	-8(%rbp), %rax
 616 051f 8B55C4   		movl	-60(%rbp), %edx
 617 0522 895028   		movl	%edx, 40(%rax)
 219:arg_file.c    ****         result->hdr.maxcount  = maxcount;
 618              		.loc 1 219 0 discriminator 4
 619 0525 488B45F8 		movq	-8(%rbp), %rax
 620 0529 8B55C0   		movl	-64(%rbp), %edx
 621 052c 89502C   		movl	%edx, 44(%rax)
 220:arg_file.c    ****         result->hdr.parent    = result;
 622              		.loc 1 220 0 discriminator 4
 623 052f 488B45F8 		movq	-8(%rbp), %rax
 624 0533 488B55F8 		movq	-8(%rbp), %rdx
 625 0537 48895030 		movq	%rdx, 48(%rax)
 221:arg_file.c    ****         result->hdr.resetfn   = (arg_resetfn*)resetfn;
 626              		.loc 1 221 0 discriminator 4
 627 053b 488B45F8 		movq	-8(%rbp), %rax
 628 053f 488D15BA 		leaq	resetfn(%rip), %rdx
 628      FAFFFF
 629 0546 48895038 		movq	%rdx, 56(%rax)
 222:arg_file.c    ****         result->hdr.scanfn    = (arg_scanfn*)scanfn;
 630              		.loc 1 222 0 discriminator 4
 631 054a 488B45F8 		movq	-8(%rbp), %rax
 632 054e 488D1564 		leaq	scanfn(%rip), %rdx
 632      FCFFFF
 633 0555 48895040 		movq	%rdx, 64(%rax)
 223:arg_file.c    ****         result->hdr.checkfn   = (arg_checkfn*)checkfn;
 634              		.loc 1 223 0 discriminator 4
 635 0559 488B45F8 		movq	-8(%rbp), %rax
 636 055d 488D1549 		leaq	checkfn(%rip), %rdx
 636      FDFFFF
 637 0564 48895048 		movq	%rdx, 72(%rax)
 224:arg_file.c    ****         result->hdr.errorfn   = (arg_errorfn*)errorfn;
 638              		.loc 1 224 0 discriminator 4
 639 0568 488B45F8 		movq	-8(%rbp), %rax
 640 056c 488D1560 		leaq	errorfn(%rip), %rdx
 640      FDFFFF
 641 0573 48895050 		movq	%rdx, 80(%rax)
 225:arg_file.c    **** 
 226:arg_file.c    ****         /* store the filename,basename,extension arrays immediately after the arg_file struct */
 227:arg_file.c    ****         result->filename  = (const char**)(result+1);
 642              		.loc 1 227 0 discriminator 4
 643 0577 488B45F8 		movq	-8(%rbp), %rax
 644 057b 488D9080 		leaq	128(%rax), %rdx
 644      000000
 645 0582 488B45F8 		movq	-8(%rbp), %rax
 646 0586 48895068 		movq	%rdx, 104(%rax)
 228:arg_file.c    ****         result->basename  = result->filename + maxcount;
 647              		.loc 1 228 0 discriminator 4
 648 058a 488B45F8 		movq	-8(%rbp), %rax
 649 058e 488B4068 		movq	104(%rax), %rax
 650 0592 8B55C0   		movl	-64(%rbp), %edx
 651 0595 4863D2   		movslq	%edx, %rdx
 652 0598 48C1E203 		salq	$3, %rdx
 653 059c 4801C2   		addq	%rax, %rdx
 654 059f 488B45F8 		movq	-8(%rbp), %rax
 655 05a3 48895070 		movq	%rdx, 112(%rax)
 229:arg_file.c    ****         result->extension = result->basename + maxcount;
 656              		.loc 1 229 0 discriminator 4
 657 05a7 488B45F8 		movq	-8(%rbp), %rax
 658 05ab 488B4070 		movq	112(%rax), %rax
 659 05af 8B55C0   		movl	-64(%rbp), %edx
 660 05b2 4863D2   		movslq	%edx, %rdx
 661 05b5 48C1E203 		salq	$3, %rdx
 662 05b9 4801C2   		addq	%rax, %rdx
 663 05bc 488B45F8 		movq	-8(%rbp), %rax
 664 05c0 48895078 		movq	%rdx, 120(%rax)
 230:arg_file.c    ****         result->count = 0;
 665              		.loc 1 230 0 discriminator 4
 666 05c4 488B45F8 		movq	-8(%rbp), %rax
 667 05c8 C7406000 		movl	$0, 96(%rax)
 667      000000
 231:arg_file.c    **** 
 232:arg_file.c    ****         /* foolproof the string pointers by initialising them with empty strings */
 233:arg_file.c    ****         for (i=0; i<maxcount; i++)
 668              		.loc 1 233 0 discriminator 4
 669 05cf C745EC00 		movl	$0, -20(%rbp)
 669      000000
 670 05d6 EB61     		jmp	.L43
 671              	.L44:
 234:arg_file.c    ****             {
 235:arg_file.c    ****             result->filename[i] = "";
 672              		.loc 1 235 0 discriminator 3
 673 05d8 488B45F8 		movq	-8(%rbp), %rax
 674 05dc 488B4068 		movq	104(%rax), %rax
 675 05e0 8B55EC   		movl	-20(%rbp), %edx
 676 05e3 4863D2   		movslq	%edx, %rdx
 677 05e6 48C1E203 		salq	$3, %rdx
 678 05ea 4801C2   		addq	%rax, %rdx
 679 05ed 488D0500 		leaq	.LC2(%rip), %rax
 679      000000
 680 05f4 488902   		movq	%rax, (%rdx)
 236:arg_file.c    ****             result->basename[i] = "";
 681              		.loc 1 236 0 discriminator 3
 682 05f7 488B45F8 		movq	-8(%rbp), %rax
 683 05fb 488B4070 		movq	112(%rax), %rax
 684 05ff 8B55EC   		movl	-20(%rbp), %edx
 685 0602 4863D2   		movslq	%edx, %rdx
 686 0605 48C1E203 		salq	$3, %rdx
 687 0609 4801C2   		addq	%rax, %rdx
 688 060c 488D0500 		leaq	.LC2(%rip), %rax
 688      000000
 689 0613 488902   		movq	%rax, (%rdx)
 237:arg_file.c    ****             result->extension[i] = "";
 690              		.loc 1 237 0 discriminator 3
 691 0616 488B45F8 		movq	-8(%rbp), %rax
 692 061a 488B4078 		movq	120(%rax), %rax
 693 061e 8B55EC   		movl	-20(%rbp), %edx
 694 0621 4863D2   		movslq	%edx, %rdx
 695 0624 48C1E203 		salq	$3, %rdx
 696 0628 4801C2   		addq	%rax, %rdx
 697 062b 488D0500 		leaq	.LC2(%rip), %rax
 697      000000
 698 0632 488902   		movq	%rax, (%rdx)
 233:arg_file.c    ****             {
 699              		.loc 1 233 0 discriminator 3
 700 0635 8345EC01 		addl	$1, -20(%rbp)
 701              	.L43:
 233:arg_file.c    ****             {
 702              		.loc 1 233 0 is_stmt 0 discriminator 1
 703 0639 8B45EC   		movl	-20(%rbp), %eax
 704 063c 3B45C0   		cmpl	-64(%rbp), %eax
 705 063f 7C97     		jl	.L44
 706              	.L40:
 707              	.LBE2:
 238:arg_file.c    ****             }
 239:arg_file.c    ****         }
 240:arg_file.c    ****     /*printf("arg_filen() returns %p\n",result);*/
 241:arg_file.c    ****     return result;
 708              		.loc 1 241 0 is_stmt 1
 709 0641 488B45F8 		movq	-8(%rbp), %rax
 242:arg_file.c    ****     }
 710              		.loc 1 242 0
 711 0645 C9       		leave
 712              		.cfi_def_cfa 7, 8
 713 0646 C3       		ret
 714              		.cfi_endproc
 715              	.LFE8:
 717              	.Letext0:
 718              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 719              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 720              		.file 4 "/usr/include/stdio.h"
 721              		.file 5 "/usr/include/libio.h"
 722              		.file 6 "argtable2.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 arg_file.c
     /tmp/cc8t0QAj.s:5      .text:0000000000000000 resetfn
     /tmp/cc8t0QAj.s:34     .text:0000000000000016 arg_basename
     /tmp/cc8t0QAj.s:137    .text:00000000000000fa arg_extension
     /tmp/cc8t0QAj.s:225    .text:00000000000001b9 scanfn
     /tmp/cc8t0QAj.s:323    .text:00000000000002ad checkfn
     /tmp/cc8t0QAj.s:366    .text:00000000000002d3 errorfn
     /tmp/cc8t0QAj.s:475    .text:00000000000003f0 arg_file0
     /tmp/cc8t0QAj.s:545    .text:0000000000000470 arg_filen
     /tmp/cc8t0QAj.s:508    .text:0000000000000430 arg_file1

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
strrchr
strcmp
strlen
fprintf
fwrite
arg_print_option
malloc
