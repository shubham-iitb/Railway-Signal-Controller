   1              		.file	"arg_dbl.c"
   2              		.text
   3              	.Ltext0:
   5              	resetfn:
   6              	.LFB0:
   7              		.file 1 "arg_dbl.c"
   1:arg_dbl.c     **** /*********************************************************************
   2:arg_dbl.c     **** This file is part of the argtable2 library.
   3:arg_dbl.c     **** Copyright (C) 1998-2001,2003-2011 Stewart Heitmann
   4:arg_dbl.c     **** sheitmann@users.sourceforge.net
   5:arg_dbl.c     **** 
   6:arg_dbl.c     **** The argtable2 library is free software; you can redistribute it and/or
   7:arg_dbl.c     **** modify it under the terms of the GNU Library General Public License as
   8:arg_dbl.c     **** published by the Free Software Foundation; either version 2 of the
   9:arg_dbl.c     **** License, or (at your option) any later version.
  10:arg_dbl.c     **** 
  11:arg_dbl.c     **** This software is distributed in the hope that it will be useful,
  12:arg_dbl.c     **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:arg_dbl.c     **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  14:arg_dbl.c     **** Library General Public License for more details.
  15:arg_dbl.c     **** 
  16:arg_dbl.c     **** You should have received a copy of the GNU Library General Public
  17:arg_dbl.c     **** License along with this library; if not, write to the Free Software
  18:arg_dbl.c     **** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:arg_dbl.c     **** USA.
  20:arg_dbl.c     **** **********************************************************************/
  21:arg_dbl.c     **** 
  22:arg_dbl.c     **** /* config.h must be included before anything else */
  23:arg_dbl.c     **** #ifdef HAVE_CONFIG_H
  24:arg_dbl.c     **** #include "config.h"
  25:arg_dbl.c     **** #endif
  26:arg_dbl.c     **** 
  27:arg_dbl.c     **** #ifdef HAVE_STDLIB_H
  28:arg_dbl.c     **** #include <stdlib.h>
  29:arg_dbl.c     **** #endif
  30:arg_dbl.c     **** 
  31:arg_dbl.c     **** #include "argtable2.h"
  32:arg_dbl.c     **** 
  33:arg_dbl.c     **** /* local error codes */
  34:arg_dbl.c     **** enum {EMINCOUNT=1,EMAXCOUNT,EBADDOUBLE};
  35:arg_dbl.c     **** 
  36:arg_dbl.c     **** static void resetfn(struct arg_dbl *parent)
  37:arg_dbl.c     ****     {
   8              		.loc 1 37 0
   9              		.cfi_startproc
  10 0000 55       		pushq	%rbp
  11              		.cfi_def_cfa_offset 16
  12              		.cfi_offset 6, -16
  13 0001 4889E5   		movq	%rsp, %rbp
  14              		.cfi_def_cfa_register 6
  15 0004 48897DF8 		movq	%rdi, -8(%rbp)
  38:arg_dbl.c     ****     /*printf("%s:resetfn(%p)\n",__FILE__,parent);*/
  39:arg_dbl.c     ****     parent->count=0;
  16              		.loc 1 39 0
  17 0008 488B45F8 		movq	-8(%rbp), %rax
  18 000c C7406000 		movl	$0, 96(%rax)
  18      000000
  40:arg_dbl.c     ****     }
  19              		.loc 1 40 0
  20 0013 90       		nop
  21 0014 5D       		popq	%rbp
  22              		.cfi_def_cfa 7, 8
  23 0015 C3       		ret
  24              		.cfi_endproc
  25              	.LFE0:
  28              	scanfn:
  29              	.LFB1:
  41:arg_dbl.c     **** 
  42:arg_dbl.c     **** static int scanfn(struct arg_dbl *parent, const char *argval)
  43:arg_dbl.c     ****     {
  30              		.loc 1 43 0
  31              		.cfi_startproc
  32 0016 55       		pushq	%rbp
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 6, -16
  35 0017 4889E5   		movq	%rsp, %rbp
  36              		.cfi_def_cfa_register 6
  37 001a 4883EC30 		subq	$48, %rsp
  38 001e 48897DD8 		movq	%rdi, -40(%rbp)
  39 0022 488975D0 		movq	%rsi, -48(%rbp)
  40              		.loc 1 43 0
  41 0026 64488B04 		movq	%fs:40, %rax
  41      25280000 
  41      00
  42 002f 488945F8 		movq	%rax, -8(%rbp)
  43 0033 31C0     		xorl	%eax, %eax
  44:arg_dbl.c     ****     int errorcode = 0;
  44              		.loc 1 44 0
  45 0035 C745E400 		movl	$0, -28(%rbp)
  45      000000
  45:arg_dbl.c     **** 
  46:arg_dbl.c     ****     if (parent->count == parent->hdr.maxcount)
  46              		.loc 1 46 0
  47 003c 488B45D8 		movq	-40(%rbp), %rax
  48 0040 8B5060   		movl	96(%rax), %edx
  49 0043 488B45D8 		movq	-40(%rbp), %rax
  50 0047 8B402C   		movl	44(%rax), %eax
  51 004a 39C2     		cmpl	%eax, %edx
  52 004c 7509     		jne	.L3
  47:arg_dbl.c     ****         {
  48:arg_dbl.c     ****         /* maximum number of arguments exceeded */
  49:arg_dbl.c     ****         errorcode = EMAXCOUNT;
  53              		.loc 1 49 0
  54 004e C745E402 		movl	$2, -28(%rbp)
  54      000000
  55 0055 EB75     		jmp	.L4
  56              	.L3:
  50:arg_dbl.c     ****         }
  51:arg_dbl.c     ****     else if (!argval)
  57              		.loc 1 51 0
  58 0057 48837DD0 		cmpq	$0, -48(%rbp)
  58      00
  59 005c 7513     		jne	.L5
  52:arg_dbl.c     ****         {
  53:arg_dbl.c     ****         /* a valid argument with no argument value was given. */
  54:arg_dbl.c     ****         /* This happens when an optional argument value was invoked. */
  55:arg_dbl.c     ****         /* leave parent arguiment value unaltered but still count the argument. */
  56:arg_dbl.c     ****         parent->count++;
  60              		.loc 1 56 0
  61 005e 488B45D8 		movq	-40(%rbp), %rax
  62 0062 8B4060   		movl	96(%rax), %eax
  63 0065 8D5001   		leal	1(%rax), %edx
  64 0068 488B45D8 		movq	-40(%rbp), %rax
  65 006c 895060   		movl	%edx, 96(%rax)
  66 006f EB5B     		jmp	.L4
  67              	.L5:
  68              	.LBB2:
  57:arg_dbl.c     ****         }
  58:arg_dbl.c     ****     else
  59:arg_dbl.c     ****         {
  60:arg_dbl.c     ****         double val;
  61:arg_dbl.c     ****         char *end;
  62:arg_dbl.c     **** 
  63:arg_dbl.c     ****         /* extract double from argval into val */
  64:arg_dbl.c     ****         val = strtod(argval,&end);
  69              		.loc 1 64 0
  70 0071 488D55E8 		leaq	-24(%rbp), %rdx
  71 0075 488B45D0 		movq	-48(%rbp), %rax
  72 0079 4889D6   		movq	%rdx, %rsi
  73 007c 4889C7   		movq	%rax, %rdi
  74 007f E8000000 		call	strtod@PLT
  74      00
  75 0084 66480F7E 		movq	%xmm0, %rax
  75      C0
  76 0089 488945F0 		movq	%rax, -16(%rbp)
  65:arg_dbl.c     **** 
  66:arg_dbl.c     ****         /* if success then store result in parent->dval[] array otherwise return error*/
  67:arg_dbl.c     ****         if (*end==0)
  77              		.loc 1 67 0
  78 008d 488B45E8 		movq	-24(%rbp), %rax
  79 0091 0FB600   		movzbl	(%rax), %eax
  80 0094 84C0     		testb	%al, %al
  81 0096 752D     		jne	.L6
  68:arg_dbl.c     ****             parent->dval[parent->count++] = val;
  82              		.loc 1 68 0
  83 0098 488B45D8 		movq	-40(%rbp), %rax
  84 009c 488B7068 		movq	104(%rax), %rsi
  85 00a0 488B45D8 		movq	-40(%rbp), %rax
  86 00a4 8B4060   		movl	96(%rax), %eax
  87 00a7 8D4801   		leal	1(%rax), %ecx
  88 00aa 488B55D8 		movq	-40(%rbp), %rdx
  89 00ae 894A60   		movl	%ecx, 96(%rdx)
  90 00b1 4898     		cltq
  91 00b3 48C1E003 		salq	$3, %rax
  92 00b7 4801F0   		addq	%rsi, %rax
  93 00ba F20F1045 		movsd	-16(%rbp), %xmm0
  93      F0
  94 00bf F20F1100 		movsd	%xmm0, (%rax)
  95 00c3 EB07     		jmp	.L4
  96              	.L6:
  69:arg_dbl.c     ****         else
  70:arg_dbl.c     ****             errorcode = EBADDOUBLE;
  97              		.loc 1 70 0
  98 00c5 C745E403 		movl	$3, -28(%rbp)
  98      000000
  99              	.L4:
 100              	.LBE2:
  71:arg_dbl.c     ****         }
  72:arg_dbl.c     **** 
  73:arg_dbl.c     ****     /*printf("%s:scanfn(%p) returns %d\n",__FILE__,parent,errorcode);*/
  74:arg_dbl.c     ****     return errorcode;
 101              		.loc 1 74 0
 102 00cc 8B45E4   		movl	-28(%rbp), %eax
  75:arg_dbl.c     ****     }
 103              		.loc 1 75 0
 104 00cf 488B4DF8 		movq	-8(%rbp), %rcx
 105 00d3 6448330C 		xorq	%fs:40, %rcx
 105      25280000 
 105      00
 106 00dc 7405     		je	.L9
 107 00de E8000000 		call	__stack_chk_fail@PLT
 107      00
 108              	.L9:
 109 00e3 C9       		leave
 110              		.cfi_def_cfa 7, 8
 111 00e4 C3       		ret
 112              		.cfi_endproc
 113              	.LFE1:
 116              	checkfn:
 117              	.LFB2:
  76:arg_dbl.c     **** 
  77:arg_dbl.c     **** static int checkfn(struct arg_dbl *parent)
  78:arg_dbl.c     ****     {
 118              		.loc 1 78 0
 119              		.cfi_startproc
 120 00e5 55       		pushq	%rbp
 121              		.cfi_def_cfa_offset 16
 122              		.cfi_offset 6, -16
 123 00e6 4889E5   		movq	%rsp, %rbp
 124              		.cfi_def_cfa_register 6
 125 00e9 48897DE8 		movq	%rdi, -24(%rbp)
  79:arg_dbl.c     ****     int errorcode = (parent->count < parent->hdr.mincount) ? EMINCOUNT : 0;
 126              		.loc 1 79 0
 127 00ed 488B45E8 		movq	-24(%rbp), %rax
 128 00f1 8B5060   		movl	96(%rax), %edx
 129 00f4 488B45E8 		movq	-24(%rbp), %rax
 130 00f8 8B4028   		movl	40(%rax), %eax
 131 00fb 39C2     		cmpl	%eax, %edx
 132 00fd 0F9CC0   		setl	%al
 133 0100 0FB6C0   		movzbl	%al, %eax
 134 0103 8945FC   		movl	%eax, -4(%rbp)
  80:arg_dbl.c     ****     /*printf("%s:checkfn(%p) returns %d\n",__FILE__,parent,errorcode);*/
  81:arg_dbl.c     ****     return errorcode;
 135              		.loc 1 81 0
 136 0106 8B45FC   		movl	-4(%rbp), %eax
  82:arg_dbl.c     ****     }
 137              		.loc 1 82 0
 138 0109 5D       		popq	%rbp
 139              		.cfi_def_cfa 7, 8
 140 010a C3       		ret
 141              		.cfi_endproc
 142              	.LFE2:
 144              		.section	.rodata
 145              	.LC0:
 146 0000 00       		.string	""
 147              	.LC1:
 148 0001 25733A20 		.string	"%s: "
 148      00
 149              	.LC2:
 150 0006 6D697373 		.string	"missing option "
 150      696E6720 
 150      6F707469 
 150      6F6E2000 
 151              	.LC3:
 152 0016 0A00     		.string	"\n"
 153              	.LC4:
 154 0018 65786365 		.string	"excess option "
 154      7373206F 
 154      7074696F 
 154      6E2000
 155 0027 00       		.align 8
 156              	.LC5:
 157 0028 696E7661 		.string	"invalid argument \"%s\" to option "
 157      6C696420 
 157      61726775 
 157      6D656E74 
 157      20222573 
 158              		.text
 160              	errorfn:
 161              	.LFB3:
  83:arg_dbl.c     **** 
  84:arg_dbl.c     **** static void errorfn(struct arg_dbl *parent, FILE *fp, int errorcode, const char *argval, const char
  85:arg_dbl.c     ****     {
 162              		.loc 1 85 0
 163              		.cfi_startproc
 164 010b 55       		pushq	%rbp
 165              		.cfi_def_cfa_offset 16
 166              		.cfi_offset 6, -16
 167 010c 4889E5   		movq	%rsp, %rbp
 168              		.cfi_def_cfa_register 6
 169 010f 4883EC50 		subq	$80, %rsp
 170 0113 48897DD8 		movq	%rdi, -40(%rbp)
 171 0117 488975D0 		movq	%rsi, -48(%rbp)
 172 011b 8955CC   		movl	%edx, -52(%rbp)
 173 011e 48894DC0 		movq	%rcx, -64(%rbp)
 174 0122 4C8945B8 		movq	%r8, -72(%rbp)
  86:arg_dbl.c     ****     const char *shortopts = parent->hdr.shortopts;
 175              		.loc 1 86 0
 176 0126 488B45D8 		movq	-40(%rbp), %rax
 177 012a 488B4008 		movq	8(%rax), %rax
 178 012e 488945E8 		movq	%rax, -24(%rbp)
  87:arg_dbl.c     ****     const char *longopts  = parent->hdr.longopts;
 179              		.loc 1 87 0
 180 0132 488B45D8 		movq	-40(%rbp), %rax
 181 0136 488B4010 		movq	16(%rax), %rax
 182 013a 488945F0 		movq	%rax, -16(%rbp)
  88:arg_dbl.c     ****     const char *datatype  = parent->hdr.datatype;
 183              		.loc 1 88 0
 184 013e 488B45D8 		movq	-40(%rbp), %rax
 185 0142 488B4018 		movq	24(%rax), %rax
 186 0146 488945F8 		movq	%rax, -8(%rbp)
  89:arg_dbl.c     **** 
  90:arg_dbl.c     ****     /* make argval NULL safe */
  91:arg_dbl.c     ****     argval = argval ? argval : "";
 187              		.loc 1 91 0
 188 014a 48837DC0 		cmpq	$0, -64(%rbp)
 188      00
 189 014f 7406     		je	.L13
 190              		.loc 1 91 0 is_stmt 0 discriminator 1
 191 0151 488B45C0 		movq	-64(%rbp), %rax
 192 0155 EB07     		jmp	.L14
 193              	.L13:
 194              		.loc 1 91 0 discriminator 2
 195 0157 488D0500 		leaq	.LC0(%rip), %rax
 195      000000
 196              	.L14:
 197              		.loc 1 91 0 discriminator 4
 198 015e 488945C0 		movq	%rax, -64(%rbp)
  92:arg_dbl.c     **** 
  93:arg_dbl.c     ****     fprintf(fp,"%s: ",progname);
 199              		.loc 1 93 0 is_stmt 1 discriminator 4
 200 0162 488B55B8 		movq	-72(%rbp), %rdx
 201 0166 488B45D0 		movq	-48(%rbp), %rax
 202 016a 488D3500 		leaq	.LC1(%rip), %rsi
 202      000000
 203 0171 4889C7   		movq	%rax, %rdi
 204 0174 B8000000 		movl	$0, %eax
 204      00
 205 0179 E8000000 		call	fprintf@PLT
 205      00
  94:arg_dbl.c     ****     switch(errorcode)
 206              		.loc 1 94 0 discriminator 4
 207 017e 8B45CC   		movl	-52(%rbp), %eax
 208 0181 83F802   		cmpl	$2, %eax
 209 0184 7451     		je	.L16
 210 0186 83F803   		cmpl	$3, %eax
 211 0189 0F848600 		je	.L17
 211      0000
 212 018f 83F801   		cmpl	$1, %eax
 213 0192 7405     		je	.L18
  95:arg_dbl.c     ****         {
  96:arg_dbl.c     ****         case EMINCOUNT:
  97:arg_dbl.c     ****             fputs("missing option ",fp);
  98:arg_dbl.c     ****             arg_print_option(fp,shortopts,longopts,datatype,"\n");
  99:arg_dbl.c     ****             break;
 100:arg_dbl.c     **** 
 101:arg_dbl.c     ****         case EMAXCOUNT:
 102:arg_dbl.c     ****             fputs("excess option ",fp);
 103:arg_dbl.c     ****             arg_print_option(fp,shortopts,longopts,argval,"\n");
 104:arg_dbl.c     ****             break;
 105:arg_dbl.c     **** 
 106:arg_dbl.c     ****         case EBADDOUBLE:
 107:arg_dbl.c     ****             fprintf(fp,"invalid argument \"%s\" to option ",argval);
 108:arg_dbl.c     ****             arg_print_option(fp,shortopts,longopts,datatype,"\n");
 109:arg_dbl.c     ****             break;
 110:arg_dbl.c     ****         }
 111:arg_dbl.c     ****     }
 214              		.loc 1 111 0 discriminator 4
 215 0194 E9B80000 		jmp	.L19
 215      00
 216              	.L18:
  97:arg_dbl.c     ****             arg_print_option(fp,shortopts,longopts,datatype,"\n");
 217              		.loc 1 97 0
 218 0199 488B45D0 		movq	-48(%rbp), %rax
 219 019d 4889C1   		movq	%rax, %rcx
 220 01a0 BA0F0000 		movl	$15, %edx
 220      00
 221 01a5 BE010000 		movl	$1, %esi
 221      00
 222 01aa 488D3D00 		leaq	.LC2(%rip), %rdi
 222      000000
 223 01b1 E8000000 		call	fwrite@PLT
 223      00
  98:arg_dbl.c     ****             break;
 224              		.loc 1 98 0
 225 01b6 488B4DF8 		movq	-8(%rbp), %rcx
 226 01ba 488B55F0 		movq	-16(%rbp), %rdx
 227 01be 488B75E8 		movq	-24(%rbp), %rsi
 228 01c2 488B45D0 		movq	-48(%rbp), %rax
 229 01c6 4C8D0500 		leaq	.LC3(%rip), %r8
 229      000000
 230 01cd 4889C7   		movq	%rax, %rdi
 231 01d0 E8000000 		call	arg_print_option@PLT
 231      00
  99:arg_dbl.c     **** 
 232              		.loc 1 99 0
 233 01d5 EB7A     		jmp	.L15
 234              	.L16:
 102:arg_dbl.c     ****             arg_print_option(fp,shortopts,longopts,argval,"\n");
 235              		.loc 1 102 0
 236 01d7 488B45D0 		movq	-48(%rbp), %rax
 237 01db 4889C1   		movq	%rax, %rcx
 238 01de BA0E0000 		movl	$14, %edx
 238      00
 239 01e3 BE010000 		movl	$1, %esi
 239      00
 240 01e8 488D3D00 		leaq	.LC4(%rip), %rdi
 240      000000
 241 01ef E8000000 		call	fwrite@PLT
 241      00
 103:arg_dbl.c     ****             break;
 242              		.loc 1 103 0
 243 01f4 488B4DC0 		movq	-64(%rbp), %rcx
 244 01f8 488B55F0 		movq	-16(%rbp), %rdx
 245 01fc 488B75E8 		movq	-24(%rbp), %rsi
 246 0200 488B45D0 		movq	-48(%rbp), %rax
 247 0204 4C8D0500 		leaq	.LC3(%rip), %r8
 247      000000
 248 020b 4889C7   		movq	%rax, %rdi
 249 020e E8000000 		call	arg_print_option@PLT
 249      00
 104:arg_dbl.c     **** 
 250              		.loc 1 104 0
 251 0213 EB3C     		jmp	.L15
 252              	.L17:
 107:arg_dbl.c     ****             arg_print_option(fp,shortopts,longopts,datatype,"\n");
 253              		.loc 1 107 0
 254 0215 488B55C0 		movq	-64(%rbp), %rdx
 255 0219 488B45D0 		movq	-48(%rbp), %rax
 256 021d 488D3500 		leaq	.LC5(%rip), %rsi
 256      000000
 257 0224 4889C7   		movq	%rax, %rdi
 258 0227 B8000000 		movl	$0, %eax
 258      00
 259 022c E8000000 		call	fprintf@PLT
 259      00
 108:arg_dbl.c     ****             break;
 260              		.loc 1 108 0
 261 0231 488B4DF8 		movq	-8(%rbp), %rcx
 262 0235 488B55F0 		movq	-16(%rbp), %rdx
 263 0239 488B75E8 		movq	-24(%rbp), %rsi
 264 023d 488B45D0 		movq	-48(%rbp), %rax
 265 0241 4C8D0500 		leaq	.LC3(%rip), %r8
 265      000000
 266 0248 4889C7   		movq	%rax, %rdi
 267 024b E8000000 		call	arg_print_option@PLT
 267      00
 109:arg_dbl.c     ****         }
 268              		.loc 1 109 0
 269 0250 90       		nop
 270              	.L15:
 271              	.L19:
 272              		.loc 1 111 0
 273 0251 90       		nop
 274 0252 C9       		leave
 275              		.cfi_def_cfa 7, 8
 276 0253 C3       		ret
 277              		.cfi_endproc
 278              	.LFE3:
 280              		.globl	arg_dbl0
 282              	arg_dbl0:
 283              	.LFB4:
 112:arg_dbl.c     **** 
 113:arg_dbl.c     **** 
 114:arg_dbl.c     **** struct arg_dbl* arg_dbl0(const char* shortopts,
 115:arg_dbl.c     ****                                const char* longopts,
 116:arg_dbl.c     ****                                const char *datatype,
 117:arg_dbl.c     ****                                const char *glossary)
 118:arg_dbl.c     ****     {
 284              		.loc 1 118 0
 285              		.cfi_startproc
 286 0254 55       		pushq	%rbp
 287              		.cfi_def_cfa_offset 16
 288              		.cfi_offset 6, -16
 289 0255 4889E5   		movq	%rsp, %rbp
 290              		.cfi_def_cfa_register 6
 291 0258 4883EC20 		subq	$32, %rsp
 292 025c 48897DF8 		movq	%rdi, -8(%rbp)
 293 0260 488975F0 		movq	%rsi, -16(%rbp)
 294 0264 488955E8 		movq	%rdx, -24(%rbp)
 295 0268 48894DE0 		movq	%rcx, -32(%rbp)
 119:arg_dbl.c     ****     return arg_dbln(shortopts,longopts,datatype,0,1,glossary);
 296              		.loc 1 119 0
 297 026c 488B4DE0 		movq	-32(%rbp), %rcx
 298 0270 488B55E8 		movq	-24(%rbp), %rdx
 299 0274 488B75F0 		movq	-16(%rbp), %rsi
 300 0278 488B45F8 		movq	-8(%rbp), %rax
 301 027c 4989C9   		movq	%rcx, %r9
 302 027f 41B80100 		movl	$1, %r8d
 302      0000
 303 0285 B9000000 		movl	$0, %ecx
 303      00
 304 028a 4889C7   		movq	%rax, %rdi
 305 028d E8000000 		call	arg_dbln@PLT
 305      00
 120:arg_dbl.c     ****     }
 306              		.loc 1 120 0
 307 0292 C9       		leave
 308              		.cfi_def_cfa 7, 8
 309 0293 C3       		ret
 310              		.cfi_endproc
 311              	.LFE4:
 313              		.globl	arg_dbl1
 315              	arg_dbl1:
 316              	.LFB5:
 121:arg_dbl.c     **** 
 122:arg_dbl.c     **** struct arg_dbl* arg_dbl1(const char* shortopts,
 123:arg_dbl.c     ****                                const char* longopts,
 124:arg_dbl.c     ****                                const char *datatype,
 125:arg_dbl.c     ****                                const char *glossary)
 126:arg_dbl.c     ****     {
 317              		.loc 1 126 0
 318              		.cfi_startproc
 319 0294 55       		pushq	%rbp
 320              		.cfi_def_cfa_offset 16
 321              		.cfi_offset 6, -16
 322 0295 4889E5   		movq	%rsp, %rbp
 323              		.cfi_def_cfa_register 6
 324 0298 4883EC20 		subq	$32, %rsp
 325 029c 48897DF8 		movq	%rdi, -8(%rbp)
 326 02a0 488975F0 		movq	%rsi, -16(%rbp)
 327 02a4 488955E8 		movq	%rdx, -24(%rbp)
 328 02a8 48894DE0 		movq	%rcx, -32(%rbp)
 127:arg_dbl.c     ****     return arg_dbln(shortopts,longopts,datatype,1,1,glossary);
 329              		.loc 1 127 0
 330 02ac 488B4DE0 		movq	-32(%rbp), %rcx
 331 02b0 488B55E8 		movq	-24(%rbp), %rdx
 332 02b4 488B75F0 		movq	-16(%rbp), %rsi
 333 02b8 488B45F8 		movq	-8(%rbp), %rax
 334 02bc 4989C9   		movq	%rcx, %r9
 335 02bf 41B80100 		movl	$1, %r8d
 335      0000
 336 02c5 B9010000 		movl	$1, %ecx
 336      00
 337 02ca 4889C7   		movq	%rax, %rdi
 338 02cd E8000000 		call	arg_dbln@PLT
 338      00
 128:arg_dbl.c     ****     }
 339              		.loc 1 128 0
 340 02d2 C9       		leave
 341              		.cfi_def_cfa 7, 8
 342 02d3 C3       		ret
 343              		.cfi_endproc
 344              	.LFE5:
 346              		.section	.rodata
 347              	.LC6:
 348 0049 3C646F75 		.string	"<double>"
 348      626C653E 
 348      00
 349              		.text
 350              		.globl	arg_dbln
 352              	arg_dbln:
 353              	.LFB6:
 129:arg_dbl.c     **** 
 130:arg_dbl.c     **** 
 131:arg_dbl.c     **** struct arg_dbl* arg_dbln(const char* shortopts,
 132:arg_dbl.c     ****                                const char* longopts,
 133:arg_dbl.c     ****                                const char *datatype,
 134:arg_dbl.c     ****                                int mincount,
 135:arg_dbl.c     ****                                int maxcount,
 136:arg_dbl.c     ****                                const char *glossary)
 137:arg_dbl.c     ****     {
 354              		.loc 1 137 0
 355              		.cfi_startproc
 356 02d4 55       		pushq	%rbp
 357              		.cfi_def_cfa_offset 16
 358              		.cfi_offset 6, -16
 359 02d5 4889E5   		movq	%rsp, %rbp
 360              		.cfi_def_cfa_register 6
 361 02d8 4883EC50 		subq	$80, %rsp
 362 02dc 48897DD8 		movq	%rdi, -40(%rbp)
 363 02e0 488975D0 		movq	%rsi, -48(%rbp)
 364 02e4 488955C8 		movq	%rdx, -56(%rbp)
 365 02e8 894DC4   		movl	%ecx, -60(%rbp)
 366 02eb 448945C0 		movl	%r8d, -64(%rbp)
 367 02ef 4C894DB8 		movq	%r9, -72(%rbp)
 138:arg_dbl.c     ****     size_t nbytes;
 139:arg_dbl.c     ****     struct arg_dbl *result;
 140:arg_dbl.c     **** 
 141:arg_dbl.c     **** 	/* foolproof things by ensuring maxcount is not less than mincount */
 142:arg_dbl.c     **** 	maxcount = (maxcount<mincount) ? mincount : maxcount;
 368              		.loc 1 142 0
 369 02f3 8B45C4   		movl	-60(%rbp), %eax
 370 02f6 3945C0   		cmpl	%eax, -64(%rbp)
 371 02f9 0F4D45C0 		cmovge	-64(%rbp), %eax
 372 02fd 8945C0   		movl	%eax, -64(%rbp)
 143:arg_dbl.c     **** 
 144:arg_dbl.c     ****     nbytes = sizeof(struct arg_dbl)     /* storage for struct arg_dbl */
 145:arg_dbl.c     ****            + (maxcount+1) * sizeof(double);  /* storage for dval[maxcount] array plus one extra for
 373              		.loc 1 145 0
 374 0300 8B45C0   		movl	-64(%rbp), %eax
 375 0303 83C001   		addl	$1, %eax
 376 0306 4898     		cltq
 377 0308 4883C00E 		addq	$14, %rax
 144:arg_dbl.c     ****            + (maxcount+1) * sizeof(double);  /* storage for dval[maxcount] array plus one extra for
 378              		.loc 1 144 0
 379 030c 48C1E003 		salq	$3, %rax
 380 0310 488945E0 		movq	%rax, -32(%rbp)
 146:arg_dbl.c     **** 
 147:arg_dbl.c     ****     result = (struct arg_dbl*)malloc(nbytes);
 381              		.loc 1 147 0
 382 0314 488B45E0 		movq	-32(%rbp), %rax
 383 0318 4889C7   		movq	%rax, %rdi
 384 031b E8000000 		call	malloc@PLT
 384      00
 385 0320 488945E8 		movq	%rax, -24(%rbp)
 148:arg_dbl.c     ****     if (result)
 386              		.loc 1 148 0
 387 0324 48837DE8 		cmpq	$0, -24(%rbp)
 387      00
 388 0329 0F84DC00 		je	.L25
 388      0000
 389              	.LBB3:
 149:arg_dbl.c     ****         {
 150:arg_dbl.c     ****         size_t addr;
 151:arg_dbl.c     ****         size_t rem;
 152:arg_dbl.c     **** 
 153:arg_dbl.c     ****         /* init the arg_hdr struct */
 154:arg_dbl.c     ****         result->hdr.flag      = ARG_HASVALUE;
 390              		.loc 1 154 0
 391 032f 488B45E8 		movq	-24(%rbp), %rax
 392 0333 C60002   		movb	$2, (%rax)
 155:arg_dbl.c     ****         result->hdr.shortopts = shortopts;
 393              		.loc 1 155 0
 394 0336 488B45E8 		movq	-24(%rbp), %rax
 395 033a 488B55D8 		movq	-40(%rbp), %rdx
 396 033e 48895008 		movq	%rdx, 8(%rax)
 156:arg_dbl.c     ****         result->hdr.longopts  = longopts;
 397              		.loc 1 156 0
 398 0342 488B45E8 		movq	-24(%rbp), %rax
 399 0346 488B55D0 		movq	-48(%rbp), %rdx
 400 034a 48895010 		movq	%rdx, 16(%rax)
 157:arg_dbl.c     ****         result->hdr.datatype  = datatype ? datatype : "<double>";
 401              		.loc 1 157 0
 402 034e 48837DC8 		cmpq	$0, -56(%rbp)
 402      00
 403 0353 7406     		je	.L26
 404              		.loc 1 157 0 is_stmt 0 discriminator 1
 405 0355 488B45C8 		movq	-56(%rbp), %rax
 406 0359 EB07     		jmp	.L27
 407              	.L26:
 408              		.loc 1 157 0 discriminator 2
 409 035b 488D0500 		leaq	.LC6(%rip), %rax
 409      000000
 410              	.L27:
 411              		.loc 1 157 0 discriminator 4
 412 0362 488B55E8 		movq	-24(%rbp), %rdx
 413 0366 48894218 		movq	%rax, 24(%rdx)
 158:arg_dbl.c     ****         result->hdr.glossary  = glossary;
 414              		.loc 1 158 0 is_stmt 1 discriminator 4
 415 036a 488B45E8 		movq	-24(%rbp), %rax
 416 036e 488B55B8 		movq	-72(%rbp), %rdx
 417 0372 48895020 		movq	%rdx, 32(%rax)
 159:arg_dbl.c     ****         result->hdr.mincount  = mincount;
 418              		.loc 1 159 0 discriminator 4
 419 0376 488B45E8 		movq	-24(%rbp), %rax
 420 037a 8B55C4   		movl	-60(%rbp), %edx
 421 037d 895028   		movl	%edx, 40(%rax)
 160:arg_dbl.c     ****         result->hdr.maxcount  = maxcount;
 422              		.loc 1 160 0 discriminator 4
 423 0380 488B45E8 		movq	-24(%rbp), %rax
 424 0384 8B55C0   		movl	-64(%rbp), %edx
 425 0387 89502C   		movl	%edx, 44(%rax)
 161:arg_dbl.c     ****         result->hdr.parent    = result;
 426              		.loc 1 161 0 discriminator 4
 427 038a 488B45E8 		movq	-24(%rbp), %rax
 428 038e 488B55E8 		movq	-24(%rbp), %rdx
 429 0392 48895030 		movq	%rdx, 48(%rax)
 162:arg_dbl.c     ****         result->hdr.resetfn   = (arg_resetfn*)resetfn;
 430              		.loc 1 162 0 discriminator 4
 431 0396 488B45E8 		movq	-24(%rbp), %rax
 432 039a 488D155F 		leaq	resetfn(%rip), %rdx
 432      FCFFFF
 433 03a1 48895038 		movq	%rdx, 56(%rax)
 163:arg_dbl.c     ****         result->hdr.scanfn    = (arg_scanfn*)scanfn;
 434              		.loc 1 163 0 discriminator 4
 435 03a5 488B45E8 		movq	-24(%rbp), %rax
 436 03a9 488D1566 		leaq	scanfn(%rip), %rdx
 436      FCFFFF
 437 03b0 48895040 		movq	%rdx, 64(%rax)
 164:arg_dbl.c     ****         result->hdr.checkfn   = (arg_checkfn*)checkfn;
 438              		.loc 1 164 0 discriminator 4
 439 03b4 488B45E8 		movq	-24(%rbp), %rax
 440 03b8 488D1526 		leaq	checkfn(%rip), %rdx
 440      FDFFFF
 441 03bf 48895048 		movq	%rdx, 72(%rax)
 165:arg_dbl.c     ****         result->hdr.errorfn   = (arg_errorfn*)errorfn;
 442              		.loc 1 165 0 discriminator 4
 443 03c3 488B45E8 		movq	-24(%rbp), %rax
 444 03c7 488D153D 		leaq	errorfn(%rip), %rdx
 444      FDFFFF
 445 03ce 48895050 		movq	%rdx, 80(%rax)
 166:arg_dbl.c     **** 
 167:arg_dbl.c     ****         /* Store the dval[maxcount] array on the first double boundary that immediately follows the
 168:arg_dbl.c     ****         /* We do the memory alignment purely for SPARC and Motorola systems. They require floats an
 169:arg_dbl.c     ****         /* aligned on natural boundaries */
 170:arg_dbl.c     ****         addr = (size_t)(result+1);
 446              		.loc 1 170 0 discriminator 4
 447 03d2 488B45E8 		movq	-24(%rbp), %rax
 448 03d6 4883C070 		addq	$112, %rax
 449 03da 488945F0 		movq	%rax, -16(%rbp)
 171:arg_dbl.c     ****         rem  = addr % sizeof(double);
 450              		.loc 1 171 0 discriminator 4
 451 03de 488B45F0 		movq	-16(%rbp), %rax
 452 03e2 83E007   		andl	$7, %eax
 453 03e5 488945F8 		movq	%rax, -8(%rbp)
 172:arg_dbl.c     ****         result->dval  = (double*)(addr + sizeof(double) - rem);
 454              		.loc 1 172 0 discriminator 4
 455 03e9 488B45F0 		movq	-16(%rbp), %rax
 456 03ed 482B45F8 		subq	-8(%rbp), %rax
 457 03f1 4883C008 		addq	$8, %rax
 458 03f5 4889C2   		movq	%rax, %rdx
 459 03f8 488B45E8 		movq	-24(%rbp), %rax
 460 03fc 48895068 		movq	%rdx, 104(%rax)
 173:arg_dbl.c     ****         /* printf("addr=%p, dval=%p, sizeof(double)=%d rem=%d\n", addr, result->dval, (int)sizeof(d
 174:arg_dbl.c     **** 
 175:arg_dbl.c     ****         result->count = 0;
 461              		.loc 1 175 0 discriminator 4
 462 0400 488B45E8 		movq	-24(%rbp), %rax
 463 0404 C7406000 		movl	$0, 96(%rax)
 463      000000
 464              	.L25:
 465              	.LBE3:
 176:arg_dbl.c     ****         }
 177:arg_dbl.c     ****     /*printf("arg_dbln() returns %p\n",result);*/
 178:arg_dbl.c     ****     return result;
 466              		.loc 1 178 0
 467 040b 488B45E8 		movq	-24(%rbp), %rax
 179:arg_dbl.c     ****     }
 468              		.loc 1 179 0
 469 040f C9       		leave
 470              		.cfi_def_cfa 7, 8
 471 0410 C3       		ret
 472              		.cfi_endproc
 473              	.LFE6:
 475              	.Letext0:
 476              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 477              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 478              		.file 4 "/usr/include/stdio.h"
 479              		.file 5 "/usr/include/libio.h"
 480              		.file 6 "argtable2.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 arg_dbl.c
     /tmp/cctjwdPd.s:5      .text:0000000000000000 resetfn
     /tmp/cctjwdPd.s:28     .text:0000000000000016 scanfn
     /tmp/cctjwdPd.s:116    .text:00000000000000e5 checkfn
     /tmp/cctjwdPd.s:160    .text:000000000000010b errorfn
     /tmp/cctjwdPd.s:282    .text:0000000000000254 arg_dbl0
     /tmp/cctjwdPd.s:352    .text:00000000000002d4 arg_dbln
     /tmp/cctjwdPd.s:315    .text:0000000000000294 arg_dbl1

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
strtod
__stack_chk_fail
fprintf
fwrite
arg_print_option
malloc
